// Image 0: mscorlib.dll - 0
// Image 1: System.dll - 968
// Image 2: Mono.Security.dll - 1122
// Image 3: System.Core.dll - 1245
// Image 4: UnityEngine.SharedInternalsModule.dll - 1273
// Image 5: UnityEngine.CoreModule.dll - 1309
// Image 6: UnityEngine.TextRenderingModule.dll - 1740
// Image 7: UnityEngine.AnimationModule.dll - 1753
// Image 8: UnityEngine.AudioModule.dll - 1782
// Image 9: UnityEngine.IMGUIModule.dll - 1803
// Image 10: UnityEngine.Physics2DModule.dll - 1830
// Image 11: UnityEngine.PhysicsModule.dll - 1841
// Image 12: UnityEngine.UIModule.dll - 1856
// Image 13: UnityEngine.UnityAnalyticsModule.dll - 1866
// Image 14: UnityEngine.UnityWebRequestModule.dll - 1874
// Image 15: UnityEngine.dll - 1877
// Image 16: UnityEngine.UI.dll - 1878
// Image 17: Assembly-CSharp.dll - 2067

// Namespace: 
internal class <Module> // TypeDefIndex: 0
{}

// Namespace: System
[ClassInterfaceAttribute] // RVA: 0x92FD8 Offset: 0x92FD8 VA: 0x92FD8
[ComVisibleAttribute] // RVA: 0x92FD8 Offset: 0x92FD8 VA: 0x92FD8
[Serializable]
public class Object // TypeDefIndex: 1
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0x9B45C Offset: 0x9B45C VA: 0x9B45C
	// RVA: 0x45C5D0 Offset: 0x45C5D0 VA: 0x45C5D0
	public void .ctor() { }

	// RVA: 0x46D02C Offset: 0x46D02C VA: 0x46D02C Slot: 0
	public virtual bool Equals(object obj) { }

	// RVA: 0x46D040 Offset: 0x46D040 VA: 0x46D040
	public static bool Equals(object objA, object objB) { }

	[ReliabilityContractAttribute] // RVA: 0x9B474 Offset: 0x9B474 VA: 0x9B474
	// RVA: 0x45C924 Offset: 0x45C924 VA: 0x45C924 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x46D074 Offset: 0x46D074 VA: 0x46D074 Slot: 2
	public virtual int GetHashCode() { }

	// RVA: 0x45E05C Offset: 0x45E05C VA: 0x45E05C
	public Type GetType() { }

	// RVA: 0x46D014 Offset: 0x46D014 VA: 0x46D014
	protected object MemberwiseClone() { }

	// RVA: 0x46D07C Offset: 0x46D07C VA: 0x46D07C Slot: 3
	public virtual string ToString() { }

	[ReliabilityContractAttribute] // RVA: 0x9B48C Offset: 0x9B48C VA: 0x9B48C
	// RVA: 0x46D0B4 Offset: 0x46D0B4 VA: 0x46D0B4
	public static bool ReferenceEquals(object objA, object objB) { }

	// RVA: 0x46D078 Offset: 0x46D078 VA: 0x46D078
	internal static int InternalGetHashCode(object o) { }

	// RVA: 0x46D0C8 Offset: 0x46D0C8 VA: 0x46D0C8
	private void FieldGetter(string typeName, string fieldName, ref object val) { }

	// RVA: 0x46D0CC Offset: 0x46D0CC VA: 0x46D0CC
	private void FieldSetter(string typeName, string fieldName, object val) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x93010 Offset: 0x93010 VA: 0x93010
[Serializable]
public abstract class ValueType // TypeDefIndex: 2
{
	// Methods

	// RVA: 0x5C4D64 Offset: 0x5C4D64 VA: 0x5C4D64
	protected void .ctor() { }

	// RVA: 0x5C4D6C Offset: 0x5C4D6C VA: 0x5C4D6C
	private static bool InternalEquals(object o1, object o2, out object[] fields) { }

	// RVA: 0x5C4D70 Offset: 0x5C4D70 VA: 0x5C4D70
	internal static bool DefaultEquals(object o1, object o2) { }

	// RVA: 0x5C4E8C Offset: 0x5C4E8C VA: 0x5C4E8C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x5C4E90 Offset: 0x5C4E90 VA: 0x5C4E90
	internal static int InternalGetHashCode(object o, out object[] fields) { }

	// RVA: 0x5C4E94 Offset: 0x5C4E94 VA: 0x5C4E94 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x5C4F94 Offset: 0x5C4F94 VA: 0x5C4F94 Slot: 3
	public override string ToString() { }
}

// Namespace: System
[ComDefaultInterfaceAttribute] // RVA: 0x93024 Offset: 0x93024 VA: 0x93024
[ClassInterfaceAttribute] // RVA: 0x93024 Offset: 0x93024 VA: 0x93024
[AttributeUsageAttribute] // RVA: 0x93024 Offset: 0x93024 VA: 0x93024
[ComVisibleAttribute] // RVA: 0x93024 Offset: 0x93024 VA: 0x93024
[Serializable]
public abstract class Attribute : _Attribute // TypeDefIndex: 3
{
	// Methods

	// RVA: 0x473AE4 Offset: 0x473AE4 VA: 0x473AE4
	protected void .ctor() { }

	// RVA: 0x473AEC Offset: 0x473AEC VA: 0x473AEC
	private static void CheckParameters(object element, Type attributeType) { }

	// RVA: 0x473CCC Offset: 0x473CCC VA: 0x473CCC
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType) { }

	// RVA: 0x473CD4 Offset: 0x473CD4 VA: 0x473CD4
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType, bool inherit) { }

	// RVA: 0x473D74 Offset: 0x473D74 VA: 0x473D74 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x473D7C Offset: 0x473D7C VA: 0x473D7C
	public static bool IsDefined(ParameterInfo element, Type attributeType) { }

	// RVA: 0x473DFC Offset: 0x473DFC VA: 0x473DFC
	public static bool IsDefined(MemberInfo element, Type attributeType) { }

	// RVA: 0x473E04 Offset: 0x473E04 VA: 0x473E04
	public static bool IsDefined(MemberInfo element, Type attributeType, bool inherit) { }

	// RVA: 0x473D84 Offset: 0x473D84 VA: 0x473D84
	public static bool IsDefined(ParameterInfo element, Type attributeType, bool inherit) { }

	// RVA: 0x473F7C Offset: 0x473F7C VA: 0x473F7C Slot: 0
	public override bool Equals(object obj) { }
}

// Namespace: System.Runtime.InteropServices
[InterfaceTypeAttribute] // RVA: 0x930D8 Offset: 0x930D8 VA: 0x930D8
[ComVisibleAttribute] // RVA: 0x930D8 Offset: 0x930D8 VA: 0x930D8
[CLSCompliantAttribute] // RVA: 0x930D8 Offset: 0x930D8 VA: 0x930D8
[TypeLibImportClassAttribute] // RVA: 0x930D8 Offset: 0x930D8 VA: 0x930D8
[GuidAttribute] // RVA: 0x930D8 Offset: 0x930D8 VA: 0x930D8
public interface _Attribute // TypeDefIndex: 4
{}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x931D4 Offset: 0x931D4 VA: 0x931D4
[Serializable]
public struct Int32 : IFormattable, IConvertible, IComparable, IComparable<int>, IEquatable<int> // TypeDefIndex: 5
{
	// Fields
	public const int MaxValue = 2147483647;
	public const int MinValue = -2147483648;
	internal int m_value; // 0x0

	// Methods

	// RVA: 0xEECC8 Offset: 0xEECC8 VA: 0xEECC8 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xEECD0 Offset: 0xEECD0 VA: 0xEECD0 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xEECD8 Offset: 0xEECD8 VA: 0xEECD8 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xEECE0 Offset: 0xEECE0 VA: 0xEECE0 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xEECF4 Offset: 0xEECF4 VA: 0xEECF4 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xEED08 Offset: 0xEED08 VA: 0xEED08 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xEED10 Offset: 0xEED10 VA: 0xEED10 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xEED18 Offset: 0xEED18 VA: 0xEED18 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xEED20 Offset: 0xEED20 VA: 0xEED20 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xEED28 Offset: 0xEED28 VA: 0xEED28 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xEED30 Offset: 0xEED30 VA: 0xEED30 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xEED38 Offset: 0xEED38 VA: 0xEED38 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xEED40 Offset: 0xEED40 VA: 0xEED40 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xEED48 Offset: 0xEED48 VA: 0xEED48 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xEED50 Offset: 0xEED50 VA: 0xEED50 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xEED58 Offset: 0xEED58 VA: 0xEED58 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xEED60 Offset: 0xEED60 VA: 0xEED60 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xEED68 Offset: 0xEED68 VA: 0xEED68 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xEED70 Offset: 0xEED70 VA: 0xEED70 Slot: 22
	public int CompareTo(int value) { }

	// RVA: 0xEED88 Offset: 0xEED88 VA: 0xEED88 Slot: 23
	public bool Equals(int obj) { }

	// RVA: 0x455D78 Offset: 0x455D78 VA: 0x455D78
	internal static bool ProcessTrailingWhitespace(bool tryParse, string s, int position, ref Exception exc) { }

	// RVA: 0x456E70 Offset: 0x456E70 VA: 0x456E70
	internal static bool Parse(string s, bool tryParse, out int result, out Exception exc) { }

	// RVA: 0x4571B4 Offset: 0x4571B4 VA: 0x4571B4
	public static int Parse(string s, IFormatProvider provider) { }

	// RVA: 0x4571C0 Offset: 0x4571C0 VA: 0x4571C0
	internal static bool CheckStyle(NumberStyles style, bool tryParse, ref Exception exc) { }

	// RVA: 0x4572CC Offset: 0x4572CC VA: 0x4572CC
	internal static bool JumpOverWhite(ref int pos, string s, bool reportError, bool tryParse, ref Exception exc) { }

	// RVA: 0x457424 Offset: 0x457424 VA: 0x457424
	internal static void FindSign(ref int pos, string s, NumberFormatInfo nfi, ref bool foundSign, ref bool negative) { }

	// RVA: 0x45773C Offset: 0x45773C VA: 0x45773C
	internal static void FindCurrency(ref int pos, string s, NumberFormatInfo nfi, ref bool foundCurrency) { }

	// RVA: 0x457928 Offset: 0x457928 VA: 0x457928
	internal static bool FindExponent(ref int pos, string s, ref int exponent, bool tryParse, ref Exception exc) { }

	// RVA: 0x457DC8 Offset: 0x457DC8 VA: 0x457DC8
	internal static bool FindOther(ref int pos, string s, string other) { }

	// RVA: 0x457F38 Offset: 0x457F38 VA: 0x457F38
	internal static bool ValidDigit(char e, bool allowHex) { }

	// RVA: 0x455CF8 Offset: 0x455CF8 VA: 0x455CF8
	internal static Exception GetFormatException() { }

	// RVA: 0x458028 Offset: 0x458028 VA: 0x458028
	internal static bool Parse(string s, NumberStyles style, IFormatProvider fp, bool tryParse, out int result, out Exception exc) { }

	// RVA: 0x459018 Offset: 0x459018 VA: 0x459018
	public static int Parse(string s) { }

	// RVA: 0x455F9C Offset: 0x455F9C VA: 0x455F9C
	public static int Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x4590B8 Offset: 0x4590B8 VA: 0x4590B8
	public static bool TryParse(string s, out int result) { }

	// RVA: 0x4590FC Offset: 0x4590FC VA: 0x4590FC
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out int result) { }

	// RVA: 0xEED9C Offset: 0xEED9C VA: 0xEED9C Slot: 3
	public override string ToString() { }

	// RVA: 0xEEDA4 Offset: 0xEEDA4 VA: 0xEEDA4 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xEEDAC Offset: 0xEEDAC VA: 0xEEDAC
	public string ToString(string format) { }

	// RVA: 0xEEDB8 Offset: 0xEEDB8 VA: 0xEEDB8 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xEEDC0 Offset: 0xEEDC0 VA: 0xEEDC0 Slot: 24
	public TypeCode GetTypeCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x931E8 Offset: 0x931E8 VA: 0x931E8
public interface IFormattable // TypeDefIndex: 6
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string ToString(string format, IFormatProvider formatProvider);
}

// Namespace: System
[CLSCompliantAttribute] // RVA: 0x931FC Offset: 0x931FC VA: 0x931FC
[ComVisibleAttribute] // RVA: 0x931FC Offset: 0x931FC VA: 0x931FC
public interface IConvertible // TypeDefIndex: 7
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool ToBoolean(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract byte ToByte(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract char ToChar(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract DateTime ToDateTime(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract Decimal ToDecimal(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract double ToDouble(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract short ToInt16(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract int ToInt32(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract long ToInt64(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract sbyte ToSByte(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 10
	public abstract float ToSingle(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract string ToString(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract object ToType(Type conversionType, IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract ushort ToUInt16(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 14
	public abstract uint ToUInt32(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 15
	public abstract ulong ToUInt64(IFormatProvider provider);
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x93234 Offset: 0x93234 VA: 0x93234
public interface IComparable // TypeDefIndex: 8
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int CompareTo(object obj);
}

// Namespace: System
public interface IComparable<T> // TypeDefIndex: 9
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int CompareTo(T other);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IComparable<object>.CompareTo
	*/
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x93248 Offset: 0x93248 VA: 0x93248
[ComVisibleAttribute] // RVA: 0x93248 Offset: 0x93248 VA: 0x93248
public sealed class SerializableAttribute : Attribute // TypeDefIndex: 10
{
	// Methods

	// RVA: 0x447144 Offset: 0x447144 VA: 0x447144
	public void .ctor() { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x932A4 Offset: 0x932A4 VA: 0x932A4
[ComVisibleAttribute] // RVA: 0x932A4 Offset: 0x932A4 VA: 0x932A4
[Serializable]
public sealed class AttributeUsageAttribute : Attribute // TypeDefIndex: 11
{
	// Fields
	private AttributeTargets valid_on; // 0x8
	private bool allow_multiple; // 0xC
	private bool inherited; // 0xD

	// Properties
	public bool AllowMultiple { get; set; }
	public bool Inherited { get; set; }

	// Methods

	// RVA: 0x474024 Offset: 0x474024 VA: 0x474024
	public void .ctor(AttributeTargets validOn) { }

	// RVA: 0x474050 Offset: 0x474050 VA: 0x474050
	public bool get_AllowMultiple() { }

	// RVA: 0x474058 Offset: 0x474058 VA: 0x474058
	public void set_AllowMultiple(bool value) { }

	// RVA: 0x474060 Offset: 0x474060 VA: 0x474060
	public bool get_Inherited() { }

	// RVA: 0x474068 Offset: 0x474068 VA: 0x474068
	public void set_Inherited(bool value) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x932DC Offset: 0x932DC VA: 0x932DC
[ComVisibleAttribute] // RVA: 0x932DC Offset: 0x932DC VA: 0x932DC
public sealed class ComVisibleAttribute : Attribute // TypeDefIndex: 12
{
	// Fields
	private bool Visible; // 0x8

	// Methods

	// RVA: 0x1DB9B0 Offset: 0x1DB9B0 VA: 0x1DB9B0
	public void .ctor(bool visibility) { }
}

// Namespace: System
public interface IEquatable<T> // TypeDefIndex: 13
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Equals(T other);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IEquatable<object>.Equals
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x93328 Offset: 0x93328 VA: 0x93328
[Serializable]
public struct Int64 : IFormattable, IConvertible, IComparable, IComparable<long>, IEquatable<long> // TypeDefIndex: 14
{
	// Fields
	internal long m_value; // 0x0

	// Methods

	// RVA: 0xEEDC8 Offset: 0xEEDC8 VA: 0xEEDC8 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xEEDD0 Offset: 0xEEDD0 VA: 0xEEDD0 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xEEDD8 Offset: 0xEEDD8 VA: 0xEEDD8 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xEEDE0 Offset: 0xEEDE0 VA: 0xEEDE0 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xEEDF4 Offset: 0xEEDF4 VA: 0xEEDF4 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xEEE08 Offset: 0xEEE08 VA: 0xEEE08 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xEEE10 Offset: 0xEEE10 VA: 0xEEE10 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xEEE18 Offset: 0xEEE18 VA: 0xEEE18 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xEEE20 Offset: 0xEEE20 VA: 0xEEE20 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xEEE28 Offset: 0xEEE28 VA: 0xEEE28 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xEEE30 Offset: 0xEEE30 VA: 0xEEE30 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xEEE38 Offset: 0xEEE38 VA: 0xEEE38 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xEEE40 Offset: 0xEEE40 VA: 0xEEE40 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xEEE48 Offset: 0xEEE48 VA: 0xEEE48 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xEEE50 Offset: 0xEEE50 VA: 0xEEE50 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xEEE58 Offset: 0xEEE58 VA: 0xEEE58 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xEEE60 Offset: 0xEEE60 VA: 0xEEE60 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xEEE68 Offset: 0xEEE68 VA: 0xEEE68 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xEEE74 Offset: 0xEEE74 VA: 0xEEE74 Slot: 22
	public int CompareTo(long value) { }

	// RVA: 0xEEEA8 Offset: 0xEEEA8 VA: 0xEEEA8 Slot: 23
	public bool Equals(long obj) { }

	// RVA: 0x459F24 Offset: 0x459F24 VA: 0x459F24
	internal static bool Parse(string s, bool tryParse, out long result, out Exception exc) { }

	// RVA: 0x45A2D0 Offset: 0x45A2D0 VA: 0x45A2D0
	public static long Parse(string s, IFormatProvider provider) { }

	// RVA: 0x45A39C Offset: 0x45A39C VA: 0x45A39C
	internal static bool Parse(string s, NumberStyles style, IFormatProvider fp, bool tryParse, out long result, out Exception exc) { }

	// RVA: 0x45B8B0 Offset: 0x45B8B0 VA: 0x45B8B0
	public static long Parse(string s) { }

	// RVA: 0x45A2DC Offset: 0x45A2DC VA: 0x45A2DC
	public static long Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x45B958 Offset: 0x45B958 VA: 0x45B958
	public static bool TryParse(string s, out long result) { }

	// RVA: 0x45B9A0 Offset: 0x45B9A0 VA: 0x45B9A0
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out long result) { }

	// RVA: 0xEEEC4 Offset: 0xEEEC4 VA: 0xEEEC4 Slot: 3
	public override string ToString() { }

	// RVA: 0xEEECC Offset: 0xEEECC VA: 0xEEECC Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xEEED4 Offset: 0xEEED4 VA: 0xEEED4
	public string ToString(string format) { }

	// RVA: 0xEEEE0 Offset: 0xEEEE0 VA: 0xEEEE0 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[CLSCompliantAttribute] // RVA: 0x9333C Offset: 0x9333C VA: 0x9333C
[ComVisibleAttribute] // RVA: 0x9333C Offset: 0x9333C VA: 0x9333C
[Serializable]
public struct UInt32 : IFormattable, IConvertible, IComparable, IComparable<uint>, IEquatable<uint> // TypeDefIndex: 15
{
	// Fields
	public const uint MaxValue = 4294967295;
	public const uint MinValue = 0;
	internal uint m_value; // 0x0

	// Methods

	// RVA: 0xF0F10 Offset: 0xF0F10 VA: 0xF0F10 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xF0F18 Offset: 0xF0F18 VA: 0xF0F18 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xF0F20 Offset: 0xF0F20 VA: 0xF0F20 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xF0F28 Offset: 0xF0F28 VA: 0xF0F28 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xF0F3C Offset: 0xF0F3C VA: 0xF0F3C Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xF0F50 Offset: 0xF0F50 VA: 0xF0F50 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xF0F58 Offset: 0xF0F58 VA: 0xF0F58 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xF0F60 Offset: 0xF0F60 VA: 0xF0F60 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xF0F68 Offset: 0xF0F68 VA: 0xF0F68 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xF0F70 Offset: 0xF0F70 VA: 0xF0F70 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xF0F78 Offset: 0xF0F78 VA: 0xF0F78 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xF0F80 Offset: 0xF0F80 VA: 0xF0F80 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xF0F88 Offset: 0xF0F88 VA: 0xF0F88 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xF0F90 Offset: 0xF0F90 VA: 0xF0F90 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xF0F98 Offset: 0xF0F98 VA: 0xF0F98 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xF0FA0 Offset: 0xF0FA0 VA: 0xF0FA0 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xF0FA8 Offset: 0xF0FA8 VA: 0xF0FA8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xF0FB0 Offset: 0xF0FB0 VA: 0xF0FB0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xF0FB8 Offset: 0xF0FB8 VA: 0xF0FB8 Slot: 22
	public int CompareTo(uint value) { }

	// RVA: 0xF0FD0 Offset: 0xF0FD0 VA: 0xF0FD0 Slot: 23
	public bool Equals(uint obj) { }

	// RVA: 0x5C0BC4 Offset: 0x5C0BC4 VA: 0x5C0BC4
	internal static bool Parse(string s, bool tryParse, out uint result, out Exception exc) { }

	// RVA: 0x5C0F04 Offset: 0x5C0F04 VA: 0x5C0F04
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out uint result, out Exception exc) { }

	[CLSCompliantAttribute] // RVA: 0x9B4A4 Offset: 0x9B4A4 VA: 0x9B4A4
	// RVA: 0x5BFE88 Offset: 0x5BFE88 VA: 0x5BFE88
	public static uint Parse(string s, NumberStyles style, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9B4B8 Offset: 0x9B4B8 VA: 0x9B4B8
	// RVA: 0x5C1E24 Offset: 0x5C1E24 VA: 0x5C1E24
	public static uint Parse(string s, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9B4CC Offset: 0x9B4CC VA: 0x9B4CC
	// RVA: 0x5C1E30 Offset: 0x5C1E30 VA: 0x5C1E30
	public static bool TryParse(string s, out uint result) { }

	[CLSCompliantAttribute] // RVA: 0x9B4E0 Offset: 0x9B4E0 VA: 0x9B4E0
	// RVA: 0x5BFFC8 Offset: 0x5BFFC8 VA: 0x5BFFC8
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out uint result) { }

	// RVA: 0xF0FE4 Offset: 0xF0FE4 VA: 0xF0FE4 Slot: 3
	public override string ToString() { }

	// RVA: 0xF0FEC Offset: 0xF0FEC VA: 0xF0FEC Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xF0FF4 Offset: 0xF0FF4 VA: 0xF0FF4
	public string ToString(string format) { }

	// RVA: 0xF1000 Offset: 0xF1000 VA: 0xF1000 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x93374 Offset: 0x93374 VA: 0x93374
[ComVisibleAttribute] // RVA: 0x93374 Offset: 0x93374 VA: 0x93374
[Serializable]
public sealed class CLSCompliantAttribute : Attribute // TypeDefIndex: 16
{
	// Fields
	private bool is_compliant; // 0x8

	// Methods

	// RVA: 0x4783E0 Offset: 0x4783E0 VA: 0x4783E0
	public void .ctor(bool isCompliant) { }
}

// Namespace: System
[CLSCompliantAttribute] // RVA: 0x933AC Offset: 0x933AC VA: 0x933AC
[ComVisibleAttribute] // RVA: 0x933AC Offset: 0x933AC VA: 0x933AC
[Serializable]
public struct UInt64 : IFormattable, IConvertible, IComparable, IComparable<ulong>, IEquatable<ulong> // TypeDefIndex: 17
{
	// Fields
	internal ulong m_value; // 0x0

	// Methods

	// RVA: 0xF1008 Offset: 0xF1008 VA: 0xF1008 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xF1010 Offset: 0xF1010 VA: 0xF1010 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xF1018 Offset: 0xF1018 VA: 0xF1018 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xF1020 Offset: 0xF1020 VA: 0xF1020 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xF1034 Offset: 0xF1034 VA: 0xF1034 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xF1048 Offset: 0xF1048 VA: 0xF1048 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xF1050 Offset: 0xF1050 VA: 0xF1050 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xF1058 Offset: 0xF1058 VA: 0xF1058 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xF1060 Offset: 0xF1060 VA: 0xF1060 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xF1068 Offset: 0xF1068 VA: 0xF1068 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xF1070 Offset: 0xF1070 VA: 0xF1070 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xF1078 Offset: 0xF1078 VA: 0xF1078 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xF1080 Offset: 0xF1080 VA: 0xF1080 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xF1088 Offset: 0xF1088 VA: 0xF1088 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xF1090 Offset: 0xF1090 VA: 0xF1090 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xF1098 Offset: 0xF1098 VA: 0xF1098 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xF10A0 Offset: 0xF10A0 VA: 0xF10A0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xF10A8 Offset: 0xF10A8 VA: 0xF10A8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xF10B4 Offset: 0xF10B4 VA: 0xF10B4 Slot: 22
	public int CompareTo(ulong value) { }

	// RVA: 0xF10E8 Offset: 0xF10E8 VA: 0xF10E8 Slot: 23
	public bool Equals(ulong obj) { }

	[CLSCompliantAttribute] // RVA: 0x9B4F4 Offset: 0x9B4F4 VA: 0x9B4F4
	// RVA: 0x5C2AC4 Offset: 0x5C2AC4 VA: 0x5C2AC4
	public static ulong Parse(string s, IFormatProvider provider) { }

	// RVA: 0x5C2B90 Offset: 0x5C2B90 VA: 0x5C2B90
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out ulong result, out Exception exc) { }

	[CLSCompliantAttribute] // RVA: 0x9B508 Offset: 0x9B508 VA: 0x9B508
	// RVA: 0x5C2AD0 Offset: 0x5C2AD0 VA: 0x5C2AD0
	public static ulong Parse(string s, NumberStyles style, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9B51C Offset: 0x9B51C VA: 0x9B51C
	// RVA: 0x5C3AE0 Offset: 0x5C3AE0 VA: 0x5C3AE0
	public static bool TryParse(string s, out ulong result) { }

	// RVA: 0xF1104 Offset: 0xF1104 VA: 0xF1104 Slot: 3
	public override string ToString() { }

	// RVA: 0xF110C Offset: 0xF110C VA: 0xF110C Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xF1114 Offset: 0xF1114 VA: 0xF1114
	public string ToString(string format) { }

	// RVA: 0xF1120 Offset: 0xF1120 VA: 0xF1120 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x933E4 Offset: 0x933E4 VA: 0x933E4
[Serializable]
public struct Byte : IFormattable, IConvertible, IComparable, IComparable<byte>, IEquatable<byte> // TypeDefIndex: 18
{
	// Fields
	public const byte MinValue = 0;
	public const byte MaxValue = 255;
	internal byte m_value; // 0x0

	// Methods

	// RVA: 0xEF138 Offset: 0xEF138 VA: 0xEF138 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xEF140 Offset: 0xEF140 VA: 0xEF140 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xEF148 Offset: 0xEF148 VA: 0xEF148 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xEF150 Offset: 0xEF150 VA: 0xEF150 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xEF158 Offset: 0xEF158 VA: 0xEF158 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xEF168 Offset: 0xEF168 VA: 0xEF168 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xEF17C Offset: 0xEF17C VA: 0xEF17C Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xEF184 Offset: 0xEF184 VA: 0xEF184 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xEF18C Offset: 0xEF18C VA: 0xEF18C Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xEF194 Offset: 0xEF194 VA: 0xEF194 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xEF19C Offset: 0xEF19C VA: 0xEF19C Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xEF1A4 Offset: 0xEF1A4 VA: 0xEF1A4 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xEF1AC Offset: 0xEF1AC VA: 0xEF1AC Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xEF1B4 Offset: 0xEF1B4 VA: 0xEF1B4 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xEF1BC Offset: 0xEF1BC VA: 0xEF1BC Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xEF1C4 Offset: 0xEF1C4 VA: 0xEF1C4 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xEF1CC Offset: 0xEF1CC VA: 0xEF1CC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xEF1D4 Offset: 0xEF1D4 VA: 0xEF1D4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xEF1DC Offset: 0xEF1DC VA: 0xEF1DC Slot: 22
	public int CompareTo(byte value) { }

	// RVA: 0xEF1F4 Offset: 0xEF1F4 VA: 0xEF1F4 Slot: 23
	public bool Equals(byte obj) { }

	// RVA: 0x478098 Offset: 0x478098 VA: 0x478098
	public static byte Parse(string s, IFormatProvider provider) { }

	// RVA: 0x4780A4 Offset: 0x4780A4 VA: 0x4780A4
	public static byte Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x478178 Offset: 0x478178 VA: 0x478178
	public static byte Parse(string s) { }

	// RVA: 0x478184 Offset: 0x478184 VA: 0x478184
	public static bool TryParse(string s, out byte result) { }

	// RVA: 0x4781D8 Offset: 0x4781D8 VA: 0x4781D8
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out byte result) { }

	// RVA: 0xEF208 Offset: 0xEF208 VA: 0xEF208 Slot: 3
	public override string ToString() { }

	// RVA: 0xEF210 Offset: 0xEF210 VA: 0xEF210
	public string ToString(string format) { }

	// RVA: 0xEF21C Offset: 0xEF21C VA: 0xEF21C Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xEF224 Offset: 0xEF224 VA: 0xEF224 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x933F8 Offset: 0x933F8 VA: 0x933F8
[CLSCompliantAttribute] // RVA: 0x933F8 Offset: 0x933F8 VA: 0x933F8
[Serializable]
public struct SByte : IFormattable, IConvertible, IComparable, IComparable<sbyte>, IEquatable<sbyte> // TypeDefIndex: 19
{
	// Fields
	internal sbyte m_value; // 0x0

	// Methods

	// RVA: 0xC9C0C Offset: 0xC9C0C VA: 0xC9C0C Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xC9C14 Offset: 0xC9C14 VA: 0xC9C14 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xC9C1C Offset: 0xC9C1C VA: 0xC9C1C Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xC9C24 Offset: 0xC9C24 VA: 0xC9C24 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xC9C38 Offset: 0xC9C38 VA: 0xC9C38 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xC9C4C Offset: 0xC9C4C VA: 0xC9C4C Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xC9C54 Offset: 0xC9C54 VA: 0xC9C54 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xC9C5C Offset: 0xC9C5C VA: 0xC9C5C Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xC9C64 Offset: 0xC9C64 VA: 0xC9C64 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xC9C6C Offset: 0xC9C6C VA: 0xC9C6C Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xC9C74 Offset: 0xC9C74 VA: 0xC9C74 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xC9C7C Offset: 0xC9C7C VA: 0xC9C7C Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xC9C84 Offset: 0xC9C84 VA: 0xC9C84 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xC9C8C Offset: 0xC9C8C VA: 0xC9C8C Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xC9C94 Offset: 0xC9C94 VA: 0xC9C94 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xC9C9C Offset: 0xC9C9C VA: 0xC9C9C Slot: 21
	public int CompareTo(object obj) { }

	// RVA: 0xC9CA4 Offset: 0xC9CA4 VA: 0xC9CA4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xC9CAC Offset: 0xC9CAC VA: 0xC9CAC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xC9CB4 Offset: 0xC9CB4 VA: 0xC9CB4 Slot: 22
	public int CompareTo(sbyte value) { }

	// RVA: 0xC9CD8 Offset: 0xC9CD8 VA: 0xC9CD8 Slot: 23
	public bool Equals(sbyte obj) { }

	// RVA: 0x3C1B4C Offset: 0x3C1B4C VA: 0x3C1B4C
	internal static bool Parse(string s, bool tryParse, out sbyte result, out Exception exc) { }

	[CLSCompliantAttribute] // RVA: 0x9B530 Offset: 0x9B530 VA: 0x9B530
	// RVA: 0x3C1F54 Offset: 0x3C1F54 VA: 0x3C1F54
	public static sbyte Parse(string s, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9B544 Offset: 0x9B544 VA: 0x9B544
	// RVA: 0x3C1F60 Offset: 0x3C1F60 VA: 0x3C1F60
	public static sbyte Parse(string s, NumberStyles style, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9B558 Offset: 0x9B558 VA: 0x9B558
	// RVA: 0x3C2038 Offset: 0x3C2038 VA: 0x3C2038
	public static bool TryParse(string s, out sbyte result) { }

	// RVA: 0xC9CF0 Offset: 0xC9CF0 VA: 0xC9CF0 Slot: 3
	public override string ToString() { }

	// RVA: 0xC9CF8 Offset: 0xC9CF8 VA: 0xC9CF8 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xC9D00 Offset: 0xC9D00 VA: 0xC9D00
	public string ToString(string format) { }

	// RVA: 0xC9D0C Offset: 0xC9D0C VA: 0xC9D0C Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x93430 Offset: 0x93430 VA: 0x93430
[Serializable]
public struct Int16 : IFormattable, IConvertible, IComparable, IComparable<short>, IEquatable<short> // TypeDefIndex: 20
{
	// Fields
	internal short m_value; // 0x0

	// Methods

	// RVA: 0xEEBC0 Offset: 0xEEBC0 VA: 0xEEBC0 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xEEBC8 Offset: 0xEEBC8 VA: 0xEEBC8 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xEEBD0 Offset: 0xEEBD0 VA: 0xEEBD0 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xEEBD8 Offset: 0xEEBD8 VA: 0xEEBD8 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xEEBEC Offset: 0xEEBEC VA: 0xEEBEC Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xEEC00 Offset: 0xEEC00 VA: 0xEEC00 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xEEC08 Offset: 0xEEC08 VA: 0xEEC08 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xEEC10 Offset: 0xEEC10 VA: 0xEEC10 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xEEC18 Offset: 0xEEC18 VA: 0xEEC18 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xEEC20 Offset: 0xEEC20 VA: 0xEEC20 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xEEC28 Offset: 0xEEC28 VA: 0xEEC28 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xEEC30 Offset: 0xEEC30 VA: 0xEEC30 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xEEC38 Offset: 0xEEC38 VA: 0xEEC38 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xEEC40 Offset: 0xEEC40 VA: 0xEEC40 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xEEC48 Offset: 0xEEC48 VA: 0xEEC48 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xEEC50 Offset: 0xEEC50 VA: 0xEEC50 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xEEC58 Offset: 0xEEC58 VA: 0xEEC58 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xEEC60 Offset: 0xEEC60 VA: 0xEEC60 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xEEC68 Offset: 0xEEC68 VA: 0xEEC68 Slot: 22
	public int CompareTo(short value) { }

	// RVA: 0xEEC8C Offset: 0xEEC8C VA: 0xEEC8C Slot: 23
	public bool Equals(short obj) { }

	// RVA: 0x4559D8 Offset: 0x4559D8 VA: 0x4559D8
	internal static bool Parse(string s, bool tryParse, out short result, out Exception exc) { }

	// RVA: 0x455ECC Offset: 0x455ECC VA: 0x455ECC
	public static short Parse(string s, IFormatProvider provider) { }

	// RVA: 0x455ED8 Offset: 0x455ED8 VA: 0x455ED8
	public static short Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x456054 Offset: 0x456054 VA: 0x456054
	public static bool TryParse(string s, out short result) { }

	// RVA: 0xEECA4 Offset: 0xEECA4 VA: 0xEECA4 Slot: 3
	public override string ToString() { }

	// RVA: 0xEECAC Offset: 0xEECAC VA: 0xEECAC Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xEECB4 Offset: 0xEECB4 VA: 0xEECB4
	public string ToString(string format) { }

	// RVA: 0xEECC0 Offset: 0xEECC0 VA: 0xEECC0 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[CLSCompliantAttribute] // RVA: 0x93444 Offset: 0x93444 VA: 0x93444
[ComVisibleAttribute] // RVA: 0x93444 Offset: 0x93444 VA: 0x93444
[Serializable]
public struct UInt16 : IFormattable, IConvertible, IComparable, IComparable<ushort>, IEquatable<ushort> // TypeDefIndex: 21
{
	// Fields
	public const ushort MaxValue = 65535;
	public const ushort MinValue = 0;
	internal ushort m_value; // 0x0

	// Methods

	// RVA: 0xF0E24 Offset: 0xF0E24 VA: 0xF0E24 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xF0E2C Offset: 0xF0E2C VA: 0xF0E2C Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xF0E34 Offset: 0xF0E34 VA: 0xF0E34 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xF0E3C Offset: 0xF0E3C VA: 0xF0E3C Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xF0E50 Offset: 0xF0E50 VA: 0xF0E50 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xF0E64 Offset: 0xF0E64 VA: 0xF0E64 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xF0E6C Offset: 0xF0E6C VA: 0xF0E6C Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xF0E74 Offset: 0xF0E74 VA: 0xF0E74 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xF0E7C Offset: 0xF0E7C VA: 0xF0E7C Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xF0E84 Offset: 0xF0E84 VA: 0xF0E84 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xF0E8C Offset: 0xF0E8C VA: 0xF0E8C Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xF0E94 Offset: 0xF0E94 VA: 0xF0E94 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xF0E9C Offset: 0xF0E9C VA: 0xF0E9C Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xF0EA4 Offset: 0xF0EA4 VA: 0xF0EA4 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xF0EAC Offset: 0xF0EAC VA: 0xF0EAC Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xF0EB4 Offset: 0xF0EB4 VA: 0xF0EB4 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xF0EBC Offset: 0xF0EBC VA: 0xF0EBC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xF0EC4 Offset: 0xF0EC4 VA: 0xF0EC4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xF0ECC Offset: 0xF0ECC VA: 0xF0ECC Slot: 22
	public int CompareTo(ushort value) { }

	// RVA: 0xF0ED8 Offset: 0xF0ED8 VA: 0xF0ED8 Slot: 23
	public bool Equals(ushort obj) { }

	[CLSCompliantAttribute] // RVA: 0x9B56C Offset: 0x9B56C VA: 0x9B56C
	// RVA: 0x5BFDAC Offset: 0x5BFDAC VA: 0x5BFDAC
	public static ushort Parse(string s, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9B580 Offset: 0x9B580 VA: 0x9B580
	// RVA: 0x5BFDB8 Offset: 0x5BFDB8 VA: 0x5BFDB8
	public static ushort Parse(string s, NumberStyles style, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9B594 Offset: 0x9B594 VA: 0x9B594
	// RVA: 0x5BFF40 Offset: 0x5BFF40 VA: 0x5BFF40
	public static bool TryParse(string s, out ushort result) { }

	[CLSCompliantAttribute] // RVA: 0x9B5A8 Offset: 0x9B5A8 VA: 0x9B5A8
	// RVA: 0x5BFF64 Offset: 0x5BFF64 VA: 0x5BFF64
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out ushort result) { }

	// RVA: 0xF0EEC Offset: 0xF0EEC VA: 0xF0EEC Slot: 3
	public override string ToString() { }

	// RVA: 0xF0EF4 Offset: 0xF0EF4 VA: 0xF0EF4 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xF0EFC Offset: 0xF0EFC VA: 0xF0EFC
	public string ToString(string format) { }

	// RVA: 0xF0F08 Offset: 0xF0F08 VA: 0xF0F08 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System.Collections
[GuidAttribute] // RVA: 0x9347C Offset: 0x9347C VA: 0x9347C
[ComVisibleAttribute] // RVA: 0x9347C Offset: 0x9347C VA: 0x9347C
public interface IEnumerator // TypeDefIndex: 22
{
	// Properties
	public abstract object Current { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object get_Current();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool MoveNext();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Reset();
}

// Namespace: System.Collections
[GuidAttribute] // RVA: 0x934E8 Offset: 0x934E8 VA: 0x934E8
[ComVisibleAttribute] // RVA: 0x934E8 Offset: 0x934E8 VA: 0x934E8
public interface IEnumerable // TypeDefIndex: 23
{
	// Methods

	[DispIdAttribute] // RVA: 0x9B5BC Offset: 0x9B5BC VA: 0x9B5BC
	// RVA: -1 Offset: -1 Slot: 0
	public abstract IEnumerator GetEnumerator();
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x93554 Offset: 0x93554 VA: 0x93554
public interface IDisposable // TypeDefIndex: 24
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Dispose();
}

// Namespace: System.Collections.Generic
public interface IEnumerator<T> : IEnumerator, IDisposable // TypeDefIndex: 25
{
	// Properties
	public abstract T Current { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract T get_Current();
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IEnumerator<object>.get_Current
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x93568 Offset: 0x93568 VA: 0x93568
[Serializable]
public struct Char : IConvertible, IComparable, IComparable<char>, IEquatable<char> // TypeDefIndex: 26
{
	// Fields
	public const char MaxValue = '\xffff';
	public const char MinValue = '\x0';
	internal char m_value; // 0x0
	private static readonly byte* category_data; // 0x0
	private static readonly byte* numeric_data; // 0x4
	private static readonly double* numeric_data_values; // 0x8
	private static readonly ushort* to_lower_data_low; // 0xC
	private static readonly ushort* to_lower_data_high; // 0x10
	private static readonly ushort* to_upper_data_low; // 0x14
	private static readonly ushort* to_upper_data_high; // 0x18

	// Methods

	// RVA: 0x478400 Offset: 0x478400 VA: 0x478400
	private static void .cctor() { }

	// RVA: 0xEF22C Offset: 0xEF22C VA: 0xEF22C Slot: 16
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xEF234 Offset: 0xEF234 VA: 0xEF234 Slot: 4
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xEF244 Offset: 0xEF244 VA: 0xEF244 Slot: 5
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xEF24C Offset: 0xEF24C VA: 0xEF24C Slot: 6
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xEF254 Offset: 0xEF254 VA: 0xEF254 Slot: 7
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xEF264 Offset: 0xEF264 VA: 0xEF264 Slot: 8
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xEF274 Offset: 0xEF274 VA: 0xEF274 Slot: 9
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xEF284 Offset: 0xEF284 VA: 0xEF284 Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xEF28C Offset: 0xEF28C VA: 0xEF28C Slot: 11
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xEF294 Offset: 0xEF294 VA: 0xEF294 Slot: 12
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xEF29C Offset: 0xEF29C VA: 0xEF29C Slot: 13
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xEF2A4 Offset: 0xEF2A4 VA: 0xEF2A4 Slot: 14
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xEF2B4 Offset: 0xEF2B4 VA: 0xEF2B4 Slot: 17
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xEF2BC Offset: 0xEF2BC VA: 0xEF2BC Slot: 18
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xEF2C4 Offset: 0xEF2C4 VA: 0xEF2C4 Slot: 19
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x47848C Offset: 0x47848C VA: 0x47848C
	private static void GetDataTablePointers(out byte* category_data, out byte* numeric_data, out double* numeric_data_values, out ushort* to_lower_data_low, out ushort* to_lower_data_high, out ushort* to_upper_data_low, out ushort* to_upper_data_high) { }

	// RVA: 0xEF2CC Offset: 0xEF2CC VA: 0xEF2CC Slot: 20
	public int CompareTo(object value) { }

	// RVA: 0xEF2D4 Offset: 0xEF2D4 VA: 0xEF2D4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xEF2DC Offset: 0xEF2DC VA: 0xEF2DC Slot: 21
	public int CompareTo(char value) { }

	// RVA: 0xEF2F4 Offset: 0xEF2F4 VA: 0xEF2F4 Slot: 22
	public bool Equals(char obj) { }

	// RVA: 0xEF308 Offset: 0xEF308 VA: 0xEF308 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x479088 Offset: 0x479088 VA: 0x479088
	public static UnicodeCategory GetUnicodeCategory(char c) { }

	// RVA: 0x47911C Offset: 0x47911C VA: 0x47911C
	public static bool IsDigit(char c) { }

	// RVA: 0x4791BC Offset: 0x4791BC VA: 0x4791BC
	public static bool IsLetter(char c) { }

	// RVA: 0x47925C Offset: 0x47925C VA: 0x47925C
	public static bool IsLetterOrDigit(char c) { }

	// RVA: 0x47930C Offset: 0x47930C VA: 0x47930C
	public static bool IsLower(char c) { }

	// RVA: 0x4793A8 Offset: 0x4793A8 VA: 0x4793A8
	public static bool IsSurrogate(char c) { }

	// RVA: 0x479448 Offset: 0x479448 VA: 0x479448
	public static bool IsUpper(char c) { }

	// RVA: 0x4794E8 Offset: 0x4794E8 VA: 0x4794E8
	public static bool IsWhiteSpace(char c) { }

	// RVA: 0x4795CC Offset: 0x4795CC VA: 0x4795CC
	public static bool IsWhiteSpace(string s, int index) { }

	// RVA: 0x479678 Offset: 0x479678 VA: 0x479678
	private static void CheckParameter(string s, int index) { }

	// RVA: 0x479798 Offset: 0x479798 VA: 0x479798
	public static char Parse(string s) { }

	// RVA: 0x4798C0 Offset: 0x4798C0 VA: 0x4798C0
	public static char ToLower(char c) { }

	// RVA: 0x479994 Offset: 0x479994 VA: 0x479994
	public static char ToLowerInvariant(char c) { }

	// RVA: 0x479A9C Offset: 0x479A9C VA: 0x479A9C
	public static char ToLower(char c, CultureInfo culture) { }

	// RVA: 0x479BE0 Offset: 0x479BE0 VA: 0x479BE0
	public static char ToUpper(char c) { }

	// RVA: 0x479CB4 Offset: 0x479CB4 VA: 0x479CB4
	public static char ToUpperInvariant(char c) { }

	// RVA: 0xEF310 Offset: 0xEF310 VA: 0xEF310 Slot: 3
	public override string ToString() { }

	// RVA: 0xEF324 Offset: 0xEF324 VA: 0xEF324 Slot: 15
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xEF338 Offset: 0xEF338 VA: 0xEF338 Slot: 23
	public TypeCode GetTypeCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9357C Offset: 0x9357C VA: 0x9357C
[DefaultMemberAttribute] // RVA: 0x9357C Offset: 0x9357C VA: 0x9357C
[Serializable]
public sealed class String : IConvertible, IComparable, IEnumerable, ICloneable, IComparable<string>, IEquatable<string>, IEnumerable<char> // TypeDefIndex: 27
{
	// Fields
	private int length; // 0x8
	private char start_char; // 0xC
	public static readonly string Empty; // 0x0
	private static readonly char[] WhiteChars; // 0x4

	// Properties
	public char Chars { get; }
	public int Length { get; }

	// Methods

	[CLSCompliantAttribute] // RVA: 0x9B5D0 Offset: 0x9B5D0 VA: 0x9B5D0
	// RVA: 0x44831C Offset: 0x44831C VA: 0x44831C
	public void .ctor(char* value, int startIndex, int length) { }

	// RVA: 0x448320 Offset: 0x448320 VA: 0x448320
	public void .ctor(char[] value, int startIndex, int length) { }

	// RVA: 0x448324 Offset: 0x448324 VA: 0x448324
	public void .ctor(char[] value) { }

	// RVA: 0x448328 Offset: 0x448328 VA: 0x448328
	public void .ctor(char c, int count) { }

	// RVA: 0x44832C Offset: 0x44832C VA: 0x44832C
	private static void .cctor() { }

	// RVA: 0x4483E0 Offset: 0x4483E0 VA: 0x4483E0 Slot: 4
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x44846C Offset: 0x44846C VA: 0x44846C Slot: 5
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x4484F8 Offset: 0x4484F8 VA: 0x4484F8 Slot: 6
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x448584 Offset: 0x448584 VA: 0x448584 Slot: 7
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x448618 Offset: 0x448618 VA: 0x448618 Slot: 8
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x4486AC Offset: 0x4486AC VA: 0x4486AC Slot: 9
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x448738 Offset: 0x448738 VA: 0x448738 Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x4487C4 Offset: 0x4487C4 VA: 0x4487C4 Slot: 11
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x448850 Offset: 0x448850 VA: 0x448850 Slot: 12
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x4488DC Offset: 0x4488DC VA: 0x4488DC Slot: 13
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x448968 Offset: 0x448968 VA: 0x448968 Slot: 14
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x4489F4 Offset: 0x4489F4 VA: 0x4489F4 Slot: 16
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0x448AF8 Offset: 0x448AF8 VA: 0x448AF8 Slot: 17
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x448B84 Offset: 0x448B84 VA: 0x448B84 Slot: 18
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x448C10 Offset: 0x448C10 VA: 0x448C10 Slot: 19
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x448C9C Offset: 0x448C9C VA: 0x448C9C Slot: 25
	private IEnumerator<char> System.Collections.Generic.IEnumerable<char>.GetEnumerator() { }

	// RVA: 0x448D10 Offset: 0x448D10 VA: 0x448D10 Slot: 21
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x448D84 Offset: 0x448D84 VA: 0x448D84
	public static bool Equals(string a, string b) { }

	[ReliabilityContractAttribute] // RVA: 0x9B5E4 Offset: 0x9B5E4 VA: 0x9B5E4
	// RVA: 0x448EA0 Offset: 0x448EA0 VA: 0x448EA0 Slot: 0
	public override bool Equals(object obj) { }

	[ReliabilityContractAttribute] // RVA: 0x9B5FC Offset: 0x9B5FC VA: 0x9B5FC
	// RVA: 0x448F54 Offset: 0x448F54 VA: 0x448F54 Slot: 24
	public bool Equals(string value) { }

	// RVA: 0x444710 Offset: 0x444710 VA: 0x444710
	public char get_Chars(int index) { }

	// RVA: 0x448FDC Offset: 0x448FDC VA: 0x448FDC Slot: 22
	public object Clone() { }

	// RVA: 0x448FE0 Offset: 0x448FE0 VA: 0x448FE0
	public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count) { }

	// RVA: 0x4493D8 Offset: 0x4493D8 VA: 0x4493D8
	public char[] ToCharArray() { }

	// RVA: 0x4493E4 Offset: 0x4493E4 VA: 0x4493E4
	public char[] ToCharArray(int startIndex, int length) { }

	// RVA: 0x4495EC Offset: 0x4495EC VA: 0x4495EC
	public string[] Split(char[] separator) { }

	// RVA: 0x4495F4 Offset: 0x4495F4 VA: 0x4495F4
	public string[] Split(char[] separator, int count) { }

	[MonoDocumentationNoteAttribute] // RVA: 0x9B614 Offset: 0x9B614 VA: 0x9B614
	[ComVisibleAttribute] // RVA: 0x9B614 Offset: 0x9B614 VA: 0x9B614
	// RVA: 0x4497C4 Offset: 0x4497C4 VA: 0x4497C4
	public string[] Split(char[] separator, int count, StringSplitOptions options) { }

	[ComVisibleAttribute] // RVA: 0x9B678 Offset: 0x9B678 VA: 0x9B678
	// RVA: 0x449BB8 Offset: 0x449BB8 VA: 0x449BB8
	public string[] Split(string[] separator, int count, StringSplitOptions options) { }

	[ComVisibleAttribute] // RVA: 0x9B68C Offset: 0x9B68C VA: 0x9B68C
	// RVA: 0x44A434 Offset: 0x44A434 VA: 0x44A434
	public string[] Split(string[] separator, StringSplitOptions options) { }

	// RVA: 0x446340 Offset: 0x446340 VA: 0x446340
	public string Substring(int startIndex) { }

	// RVA: 0x44A230 Offset: 0x44A230 VA: 0x44A230
	public string Substring(int startIndex, int length) { }

	// RVA: 0x44A454 Offset: 0x44A454 VA: 0x44A454
	internal string SubstringUnchecked(int startIndex, int length) { }

	// RVA: 0x44A550 Offset: 0x44A550 VA: 0x44A550
	public string Trim() { }

	// RVA: 0x44A788 Offset: 0x44A788 VA: 0x44A788
	public string Trim(char[] trimChars) { }

	// RVA: 0x44A9B4 Offset: 0x44A9B4 VA: 0x44A9B4
	public string TrimStart(char[] trimChars) { }

	// RVA: 0x44AAC0 Offset: 0x44AAC0 VA: 0x44AAC0
	public string TrimEnd(char[] trimChars) { }

	// RVA: 0x44A690 Offset: 0x44A690 VA: 0x44A690
	private int FindNotWhiteSpace(int pos, int target, int change) { }

	// RVA: 0x44A8F4 Offset: 0x44A8F4 VA: 0x44A8F4
	private int FindNotInTable(int pos, int target, int change, char[] table) { }

	// RVA: 0x44ABD4 Offset: 0x44ABD4 VA: 0x44ABD4
	public static int Compare(string strA, string strB) { }

	// RVA: 0x44ACC0 Offset: 0x44ACC0 VA: 0x44ACC0
	public static int Compare(string strA, string strB, bool ignoreCase) { }

	// RVA: 0x44ADB0 Offset: 0x44ADB0 VA: 0x44ADB0
	public static int Compare(string strA, string strB, bool ignoreCase, CultureInfo culture) { }

	// RVA: 0x44AEBC Offset: 0x44AEBC VA: 0x44AEBC
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, bool ignoreCase, CultureInfo culture) { }

	// RVA: 0x44B088 Offset: 0x44B088 VA: 0x44B088 Slot: 20
	public int CompareTo(object value) { }

	// RVA: 0x44B1E4 Offset: 0x44B1E4 VA: 0x44B1E4 Slot: 23
	public int CompareTo(string strB) { }

	// RVA: 0x44B27C Offset: 0x44B27C VA: 0x44B27C
	public static int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length) { }

	// RVA: 0x44B3AC Offset: 0x44B3AC VA: 0x44B3AC
	internal static int CompareOrdinalUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB) { }

	// RVA: 0x44B4B8 Offset: 0x44B4B8 VA: 0x44B4B8
	internal static int CompareOrdinalCaseInsensitiveUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB) { }

	// RVA: 0x44B65C Offset: 0x44B65C VA: 0x44B65C
	public bool EndsWith(string value) { }

	// RVA: 0x44463C Offset: 0x44463C VA: 0x44463C
	public int IndexOfAny(char[] anyOf) { }

	// RVA: 0x44B8BC Offset: 0x44B8BC VA: 0x44B8BC
	public int IndexOfAny(char[] anyOf, int startIndex) { }

	// RVA: 0x44B9B8 Offset: 0x44B9B8 VA: 0x44B9B8
	public int IndexOfAny(char[] anyOf, int startIndex, int count) { }

	// RVA: 0x44B7A8 Offset: 0x44B7A8 VA: 0x44B7A8
	private int IndexOfAnyUnchecked(char[] anyOf, int startIndex, int count) { }

	// RVA: 0x44BCC0 Offset: 0x44BCC0 VA: 0x44BCC0
	public int IndexOf(string value, StringComparison comparisonType) { }

	// RVA: 0x44BCE4 Offset: 0x44BCE4 VA: 0x44BCE4
	public int IndexOf(string value, int startIndex, int count, StringComparison comparisonType) { }

	// RVA: 0x44C010 Offset: 0x44C010 VA: 0x44C010
	internal int IndexOfOrdinal(string value, int startIndex, int count, CompareOptions options) { }

	// RVA: 0x44C1B0 Offset: 0x44C1B0 VA: 0x44C1B0
	internal int IndexOfOrdinalUnchecked(string value, int startIndex, int count) { }

	// RVA: 0x44C2CC Offset: 0x44C2CC VA: 0x44C2CC
	internal int IndexOfOrdinalIgnoreCaseUnchecked(string value, int startIndex, int count) { }

	// RVA: 0x44C45C Offset: 0x44C45C VA: 0x44C45C
	public int IndexOf(char value) { }

	// RVA: 0x44C488 Offset: 0x44C488 VA: 0x44C488
	public int IndexOf(char value, int startIndex) { }

	// RVA: 0x44C5E0 Offset: 0x44C5E0 VA: 0x44C5E0
	public int IndexOf(char value, int startIndex, int count) { }

	// RVA: 0x44BB1C Offset: 0x44BB1C VA: 0x44BB1C
	internal int IndexOfUnchecked(char value, int startIndex, int count) { }

	// RVA: 0x4461BC Offset: 0x4461BC VA: 0x4461BC
	public int IndexOf(string value) { }

	// RVA: 0x44A210 Offset: 0x44A210 VA: 0x44A210
	public int IndexOf(string value, int startIndex) { }

	// RVA: 0x44C7A8 Offset: 0x44C7A8 VA: 0x44C7A8
	public int IndexOf(string value, int startIndex, int count) { }

	// RVA: 0x44CA04 Offset: 0x44CA04 VA: 0x44CA04
	public int LastIndexOfAny(char[] anyOf) { }

	// RVA: 0x44CB94 Offset: 0x44CB94 VA: 0x44CB94
	public int LastIndexOfAny(char[] anyOf, int startIndex) { }

	// RVA: 0x44CABC Offset: 0x44CABC VA: 0x44CABC
	private int LastIndexOfAnyUnchecked(char[] anyOf, int startIndex, int count) { }

	// RVA: 0x44CE74 Offset: 0x44CE74 VA: 0x44CE74
	public int LastIndexOf(char value) { }

	// RVA: 0x44CEA0 Offset: 0x44CEA0 VA: 0x44CEA0
	public int LastIndexOf(char value, int startIndex) { }

	// RVA: 0x44CEBC Offset: 0x44CEBC VA: 0x44CEBC
	public int LastIndexOf(char value, int startIndex, int count) { }

	// RVA: 0x44CCC8 Offset: 0x44CCC8 VA: 0x44CCC8
	internal int LastIndexOfUnchecked(char value, int startIndex, int count) { }

	// RVA: 0x44D080 Offset: 0x44D080 VA: 0x44D080
	public bool Contains(string value) { }

	// RVA: 0x44D0A0 Offset: 0x44D0A0 VA: 0x44D0A0
	public static bool IsNullOrEmpty(string value) { }

	// RVA: 0x44D0C0 Offset: 0x44D0C0 VA: 0x44D0C0
	public string PadRight(int totalWidth, char paddingChar) { }

	// RVA: 0x44D260 Offset: 0x44D260 VA: 0x44D260
	public bool StartsWith(string value) { }

	// RVA: 0x44D3AC Offset: 0x44D3AC VA: 0x44D3AC
	public string Replace(char oldChar, char newChar) { }

	// RVA: 0x44D514 Offset: 0x44D514 VA: 0x44D514
	public string Replace(string oldValue, string newValue) { }

	// RVA: 0x44D688 Offset: 0x44D688 VA: 0x44D688
	private string ReplaceUnchecked(string oldValue, string newValue) { }

	// RVA: 0x44D9A8 Offset: 0x44D9A8 VA: 0x44D9A8
	private string ReplaceFallback(string oldValue, string newValue, int testedCount) { }

	// RVA: 0x44DB5C Offset: 0x44DB5C VA: 0x44DB5C
	public string Remove(int startIndex, int count) { }

	// RVA: 0x44DD5C Offset: 0x44DD5C VA: 0x44DD5C
	public string ToLower() { }

	// RVA: 0x44DDE8 Offset: 0x44DDE8 VA: 0x44DDE8
	public string ToLower(CultureInfo culture) { }

	// RVA: 0x44DF00 Offset: 0x44DF00 VA: 0x44DF00
	public string ToLowerInvariant() { }

	// RVA: 0x44E048 Offset: 0x44E048 VA: 0x44E048
	public string ToUpperInvariant() { }

	// RVA: 0x44E190 Offset: 0x44E190 VA: 0x44E190 Slot: 3
	public override string ToString() { }

	// RVA: 0x44E194 Offset: 0x44E194 VA: 0x44E194 Slot: 15
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x4402AC Offset: 0x4402AC VA: 0x4402AC
	public static string Format(string format, object arg0) { }

	// RVA: 0x44E254 Offset: 0x44E254 VA: 0x44E254
	public static string Format(string format, object arg0, object arg1) { }

	// RVA: 0x44E3B0 Offset: 0x44E3B0 VA: 0x44E3B0
	public static string Format(string format, object arg0, object arg1, object arg2) { }

	// RVA: 0x44E560 Offset: 0x44E560 VA: 0x44E560
	public static string Format(string format, object[] args) { }

	// RVA: 0x44E198 Offset: 0x44E198 VA: 0x44E198
	public static string Format(IFormatProvider provider, string format, object[] args) { }

	// RVA: 0x44E5EC Offset: 0x44E5EC VA: 0x44E5EC
	internal static StringBuilder FormatHelper(StringBuilder result, IFormatProvider provider, string format, object[] args) { }

	// RVA: 0x44F444 Offset: 0x44F444 VA: 0x44F444
	public static string Copy(string str) { }

	// RVA: 0x44F594 Offset: 0x44F594 VA: 0x44F594
	public static string Concat(object arg0, object arg1) { }

	// RVA: 0x4499F0 Offset: 0x4499F0 VA: 0x4499F0
	public static string Concat(object arg0, object arg1, object arg2) { }

	// RVA: 0x44402C Offset: 0x44402C VA: 0x44402C
	public static string Concat(string str0, string str1) { }

	// RVA: 0x443010 Offset: 0x443010 VA: 0x443010
	public static string Concat(string str0, string str1, string str2) { }

	// RVA: 0x44F664 Offset: 0x44F664 VA: 0x44F664
	public static string Concat(string str0, string str1, string str2, string str3) { }

	// RVA: 0x44FAE4 Offset: 0x44FAE4 VA: 0x44FAE4
	public static string Concat(object[] args) { }

	// RVA: 0x44FF24 Offset: 0x44FF24 VA: 0x44FF24
	public static string Concat(string[] values) { }

	// RVA: 0x44FD84 Offset: 0x44FD84 VA: 0x44FD84
	private static string ConcatInternal(string[] values, int length) { }

	// RVA: 0x450060 Offset: 0x450060 VA: 0x450060
	public string Insert(int startIndex, string value) { }

	// RVA: 0x450240 Offset: 0x450240 VA: 0x450240
	public static string Join(string separator, string[] value) { }

	// RVA: 0x4506AC Offset: 0x4506AC VA: 0x4506AC
	public static string Join(string separator, string[] value, int startIndex, int count) { }

	// RVA: 0x450374 Offset: 0x450374 VA: 0x450374
	private static string JoinUnchecked(string separator, string[] value, int startIndex, int count) { }

	// RVA: 0x444708 Offset: 0x444708 VA: 0x444708
	public int get_Length() { }

	// RVA: 0x44EEE0 Offset: 0x44EEE0 VA: 0x44EEE0
	private static void ParseFormatSpecifier(string str, ref int ptr, out int n, out int width, out bool left_align, out string format) { }

	// RVA: 0x450958 Offset: 0x450958 VA: 0x450958
	private static int ParseDecimal(string str, ref int ptr) { }

	// RVA: 0x4509C8 Offset: 0x4509C8 VA: 0x4509C8
	internal void InternalSetChar(int idx, char val) { }

	// RVA: 0x450A84 Offset: 0x450A84 VA: 0x450A84
	internal void InternalSetLength(int newLength) { }

	[ReliabilityContractAttribute] // RVA: 0x9B6A0 Offset: 0x9B6A0 VA: 0x9B6A0
	// RVA: 0x450B70 Offset: 0x450B70 VA: 0x450B70 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x450BF4 Offset: 0x450BF4 VA: 0x450BF4
	internal int GetCaseInsensitiveHashCode() { }

	// RVA: 0x450D3C Offset: 0x450D3C VA: 0x450D3C
	private string CreateString(sbyte* value) { }

	// RVA: 0x4512EC Offset: 0x4512EC VA: 0x4512EC
	private string CreateString(sbyte* value, int startIndex, int length) { }

	// RVA: 0x450E20 Offset: 0x450E20 VA: 0x450E20
	private string CreateString(sbyte* value, int startIndex, int length, Encoding enc) { }

	// RVA: 0x451478 Offset: 0x451478 VA: 0x451478
	private string CreateString(char* value) { }

	// RVA: 0x4515C8 Offset: 0x4515C8 VA: 0x4515C8
	private string CreateString(char* value, int startIndex, int length) { }

	// RVA: 0x4517B8 Offset: 0x4517B8 VA: 0x4517B8
	private string CreateString(char[] val, int startIndex, int length) { }

	// RVA: 0x451A5C Offset: 0x451A5C VA: 0x451A5C
	private string CreateString(char[] val) { }

	// RVA: 0x451BCC Offset: 0x451BCC VA: 0x451BCC
	private string CreateString(char c, int count) { }

	// RVA: 0x451D18 Offset: 0x451D18 VA: 0x451D18
	private static void memcpy4(byte* dest, byte* src, int size) { }

	// RVA: 0x451DA4 Offset: 0x451DA4 VA: 0x451DA4
	private static void memcpy2(byte* dest, byte* src, int size) { }

	// RVA: 0x451E1C Offset: 0x451E1C VA: 0x451E1C
	private static void memcpy1(byte* dest, byte* src, int size) { }

	// RVA: 0x45130C Offset: 0x45130C VA: 0x45130C
	internal static void memcpy(byte* dest, byte* src, int size) { }

	// RVA: 0x4492D4 Offset: 0x4492D4 VA: 0x4492D4
	internal static void CharCopy(char* dest, char* src, int count) { }

	// RVA: 0x451EC4 Offset: 0x451EC4 VA: 0x451EC4
	internal static void CharCopyReverse(char* dest, char* src, int count) { }

	// RVA: 0x451EF4 Offset: 0x451EF4 VA: 0x451EF4
	internal static void CharCopy(string target, int targetIndex, string source, int sourceIndex, int count) { }

	// RVA: 0x451FB4 Offset: 0x451FB4 VA: 0x451FB4
	internal static void CharCopy(string target, int targetIndex, char[] source, int sourceIndex, int count) { }

	// RVA: 0x45207C Offset: 0x45207C VA: 0x45207C
	internal static void CharCopyReverse(string target, int targetIndex, string source, int sourceIndex, int count) { }

	// RVA: 0x4497C0 Offset: 0x4497C0 VA: 0x4497C0
	private string[] InternalSplit(char[] separator, int count, int options) { }

	// RVA: 0x44A54C Offset: 0x44A54C VA: 0x44A54C
	internal static string InternalAllocateStr(int length) { }

	// RVA: 0x442AF4 Offset: 0x442AF4 VA: 0x442AF4
	public static bool op_Equality(string a, string b) { }

	// RVA: 0x4423C8 Offset: 0x4423C8 VA: 0x4423C8
	public static bool op_Inequality(string a, string b) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x935C8 Offset: 0x935C8 VA: 0x935C8
public interface ICloneable // TypeDefIndex: 28
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object Clone();
}

// Namespace: System.Collections.Generic
public interface IEnumerable<T> : IEnumerable // TypeDefIndex: 29
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IEnumerator<T> GetEnumerator();
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IEnumerable<object>.GetEnumerator
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x935DC Offset: 0x935DC VA: 0x935DC
[Serializable]
public struct Single : IFormattable, IConvertible, IComparable, IComparable<float>, IEquatable<float> // TypeDefIndex: 30
{
	// Fields
	public const float Epsilon = 1E-45;
	public const float MaxValue = 3.4028235E+38;
	public const float MinValue = -3.4028235E+38;
	public const float NaN = NaN;
	public const float PositiveInfinity = ∞;
	public const float NegativeInfinity = -∞;
	private const double MaxValueEpsilon = 3.6147112457961776E+29;
	internal float m_value; // 0x0

	// Methods

	// RVA: 0xCA394 Offset: 0xCA394 VA: 0xCA394 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xCA39C Offset: 0xCA39C VA: 0xCA39C Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xCA3A4 Offset: 0xCA3A4 VA: 0xCA3A4 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xCA3AC Offset: 0xCA3AC VA: 0xCA3AC Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xCA3C0 Offset: 0xCA3C0 VA: 0xCA3C0 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xCA3D4 Offset: 0xCA3D4 VA: 0xCA3D4 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xCA3DC Offset: 0xCA3DC VA: 0xCA3DC Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xCA3E4 Offset: 0xCA3E4 VA: 0xCA3E4 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xCA3EC Offset: 0xCA3EC VA: 0xCA3EC Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xCA3F4 Offset: 0xCA3F4 VA: 0xCA3F4 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xCA3FC Offset: 0xCA3FC VA: 0xCA3FC Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xCA404 Offset: 0xCA404 VA: 0xCA404 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xCA40C Offset: 0xCA40C VA: 0xCA40C Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xCA414 Offset: 0xCA414 VA: 0xCA414 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xCA41C Offset: 0xCA41C VA: 0xCA41C Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xCA424 Offset: 0xCA424 VA: 0xCA424 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xCA42C Offset: 0xCA42C VA: 0xCA42C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xCA434 Offset: 0xCA434 VA: 0xCA434 Slot: 22
	public int CompareTo(float value) { }

	// RVA: 0xCA43C Offset: 0xCA43C VA: 0xCA43C Slot: 23
	public bool Equals(float obj) { }

	// RVA: 0xCA474 Offset: 0xCA474 VA: 0xCA474 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x447F44 Offset: 0x447F44 VA: 0x447F44
	public static bool IsInfinity(float f) { }

	[ReliabilityContractAttribute] // RVA: 0x9B6B8 Offset: 0x9B6B8 VA: 0x9B6B8
	// RVA: 0x447D0C Offset: 0x447D0C VA: 0x447D0C
	public static bool IsNaN(float f) { }

	// RVA: 0x447CC4 Offset: 0x447CC4 VA: 0x447CC4
	public static bool IsNegativeInfinity(float f) { }

	// RVA: 0x447C7C Offset: 0x447C7C VA: 0x447C7C
	public static bool IsPositiveInfinity(float f) { }

	// RVA: 0x447F80 Offset: 0x447F80 VA: 0x447F80
	public static float Parse(string s, IFormatProvider provider) { }

	// RVA: 0xCA47C Offset: 0xCA47C VA: 0xCA47C Slot: 3
	public override string ToString() { }

	// RVA: 0xCA484 Offset: 0xCA484 VA: 0xCA484 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xCA48C Offset: 0xCA48C VA: 0xCA48C Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xCA494 Offset: 0xCA494 VA: 0xCA494 Slot: 24
	public TypeCode GetTypeCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x935F0 Offset: 0x935F0 VA: 0x935F0
[Serializable]
public struct Double : IFormattable, IConvertible, IComparable, IComparable<double>, IEquatable<double> // TypeDefIndex: 31
{
	// Fields
	public const double Epsilon = 5E-324;
	public const double MaxValue = 1.7976931348623157E+308;
	public const double MinValue = -1.7976931348623157E+308;
	public const double NaN = NaN;
	public const double NegativeInfinity = -∞;
	public const double PositiveInfinity = ∞;
	private const int State_AllowSign = 1;
	private const int State_Digits = 2;
	private const int State_Decimal = 3;
	private const int State_ExponentSign = 4;
	private const int State_Exponent = 5;
	private const int State_ConsumeWhiteSpace = 6;
	private const int State_Exit = 7;
	internal double m_value; // 0x0

	// Methods

	// RVA: 0xC8DC8 Offset: 0xC8DC8 VA: 0xC8DC8 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xC8DD0 Offset: 0xC8DD0 VA: 0xC8DD0 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xC8DD8 Offset: 0xC8DD8 VA: 0xC8DD8 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xC8DE0 Offset: 0xC8DE0 VA: 0xC8DE0 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xC8DF0 Offset: 0xC8DF0 VA: 0xC8DF0 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xC8E00 Offset: 0xC8E00 VA: 0xC8E00 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xC8E14 Offset: 0xC8E14 VA: 0xC8E14 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xC8E1C Offset: 0xC8E1C VA: 0xC8E1C Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xC8E24 Offset: 0xC8E24 VA: 0xC8E24 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xC8E2C Offset: 0xC8E2C VA: 0xC8E2C Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xC8E34 Offset: 0xC8E34 VA: 0xC8E34 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xC8E3C Offset: 0xC8E3C VA: 0xC8E3C Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xC8E44 Offset: 0xC8E44 VA: 0xC8E44 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xC8E4C Offset: 0xC8E4C VA: 0xC8E4C Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xC8E54 Offset: 0xC8E54 VA: 0xC8E54 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xC8E5C Offset: 0xC8E5C VA: 0xC8E5C Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xC8E64 Offset: 0xC8E64 VA: 0xC8E64 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xC8E6C Offset: 0xC8E6C VA: 0xC8E6C Slot: 22
	public int CompareTo(double value) { }

	// RVA: 0xC8E88 Offset: 0xC8E88 VA: 0xC8E88 Slot: 23
	public bool Equals(double obj) { }

	// RVA: 0xC8EC0 Offset: 0xC8EC0 VA: 0xC8EC0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2F90E0 Offset: 0x2F90E0 VA: 0x2F90E0
	public static bool IsInfinity(double d) { }

	[ReliabilityContractAttribute] // RVA: 0x9B6D0 Offset: 0x9B6D0 VA: 0x9B6D0
	// RVA: 0x2F01A0 Offset: 0x2F01A0 VA: 0x2F01A0
	public static bool IsNaN(double d) { }

	// RVA: 0x2F01B8 Offset: 0x2F01B8 VA: 0x2F01B8
	public static bool IsNegativeInfinity(double d) { }

	// RVA: 0x2F0208 Offset: 0x2F0208 VA: 0x2F0208
	public static bool IsPositiveInfinity(double d) { }

	// RVA: 0x2F9128 Offset: 0x2F9128 VA: 0x2F9128
	public static double Parse(string s) { }

	// RVA: 0x2F91F4 Offset: 0x2F91F4 VA: 0x2F91F4
	public static double Parse(string s, IFormatProvider provider) { }

	// RVA: 0x2F9134 Offset: 0x2F9134 VA: 0x2F9134
	public static double Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x2F9200 Offset: 0x2F9200 VA: 0x2F9200
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out double result, out Exception exc) { }

	// RVA: 0x2FA760 Offset: 0x2FA760 VA: 0x2FA760
	private static bool TryParseStringConstant(string format, string s, int start, int end) { }

	// RVA: 0x2FA864 Offset: 0x2FA864 VA: 0x2FA864
	private static bool ParseImpl(byte* byte_ptr, out double value) { }

	// RVA: 0xC8ECC Offset: 0xC8ECC VA: 0xC8ECC Slot: 3
	public override string ToString() { }

	// RVA: 0xC8ED4 Offset: 0xC8ED4 VA: 0xC8ED4 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xC8EDC Offset: 0xC8EDC VA: 0xC8EDC Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x93604 Offset: 0x93604 VA: 0x93604
[Serializable]
public struct Decimal : IFormattable, IConvertible, IComparable, IComparable<Decimal>, IEquatable<Decimal> // TypeDefIndex: 32
{
	// Fields
	[DecimalConstantAttribute] // RVA: 0x9AFF8 Offset: 0x9AFF8 VA: 0x9AFF8
	public static readonly Decimal MinValue; // 0x0
	[DecimalConstantAttribute] // RVA: 0x9B038 Offset: 0x9B038 VA: 0x9B038
	public static readonly Decimal MaxValue; // 0x10
	[DecimalConstantAttribute] // RVA: 0x9B078 Offset: 0x9B078 VA: 0x9B078
	public static readonly Decimal MinusOne; // 0x20
	[DecimalConstantAttribute] // RVA: 0x9B0B4 Offset: 0x9B0B4 VA: 0x9B0B4
	public static readonly Decimal One; // 0x30
	private static readonly Decimal MaxValueDiv10; // 0x40
	private uint flags; // 0x0
	private uint hi; // 0x4
	private uint lo; // 0x8
	private uint mid; // 0xC

	// Methods

	// RVA: 0xC8B98 Offset: 0xC8B98 VA: 0xC8B98
	public void .ctor(int lo, int mid, int hi, bool isNegative, byte scale) { }

	// RVA: 0xC8BC0 Offset: 0xC8BC0 VA: 0xC8BC0
	public void .ctor(int value) { }

	[CLSCompliantAttribute] // RVA: 0x9B6E8 Offset: 0x9B6E8 VA: 0x9B6E8
	// RVA: 0xC8BE8 Offset: 0xC8BE8 VA: 0xC8BE8
	public void .ctor(uint value) { }

	// RVA: 0xC8C00 Offset: 0xC8C00 VA: 0xC8C00
	public void .ctor(long value) { }

	[CLSCompliantAttribute] // RVA: 0x9B6FC Offset: 0x9B6FC VA: 0x9B6FC
	// RVA: 0xC8C34 Offset: 0xC8C34 VA: 0xC8C34
	public void .ctor(ulong value) { }

	// RVA: 0xC8C48 Offset: 0xC8C48 VA: 0xC8C48
	public void .ctor(float value) { }

	// RVA: 0xC8C50 Offset: 0xC8C50 VA: 0xC8C50
	public void .ctor(double value) { }

	// RVA: 0x2F02F0 Offset: 0x2F02F0 VA: 0x2F02F0
	private static void .cctor() { }

	// RVA: 0xC8C6C Offset: 0xC8C6C VA: 0xC8C6C Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xC8C74 Offset: 0xC8C74 VA: 0xC8C74 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xC8C7C Offset: 0xC8C7C VA: 0xC8C7C Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xC8C84 Offset: 0xC8C84 VA: 0xC8C84 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xC8C94 Offset: 0xC8C94 VA: 0xC8C94 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xC8CA4 Offset: 0xC8CA4 VA: 0xC8CA4 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xC8CB4 Offset: 0xC8CB4 VA: 0xC8CB4 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xC8CBC Offset: 0xC8CBC VA: 0xC8CBC Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xC8CC4 Offset: 0xC8CC4 VA: 0xC8CC4 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xC8CCC Offset: 0xC8CCC VA: 0xC8CCC Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xC8CD4 Offset: 0xC8CD4 VA: 0xC8CD4 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xC8CDC Offset: 0xC8CDC VA: 0xC8CDC Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xC8CE4 Offset: 0xC8CE4 VA: 0xC8CE4 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xC8CEC Offset: 0xC8CEC VA: 0xC8CEC Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xC8CF4 Offset: 0xC8CF4 VA: 0xC8CF4 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x2F0D8C Offset: 0x2F0D8C VA: 0x2F0D8C
	public static int[] GetBits(Decimal d) { }

	// RVA: 0x2F0E94 Offset: 0x2F0E94 VA: 0x2F0E94
	public static Decimal Add(Decimal d1, Decimal d2) { }

	// RVA: 0x2F0FCC Offset: 0x2F0FCC VA: 0x2F0FCC
	public static Decimal Subtract(Decimal d1, Decimal d2) { }

	// RVA: 0xC8CFC Offset: 0xC8CFC VA: 0xC8CFC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2F118C Offset: 0x2F118C VA: 0x2F118C
	private static ulong u64(Decimal value) { }

	// RVA: 0x2F1290 Offset: 0x2F1290 VA: 0x2F1290
	private static long s64(Decimal value) { }

	// RVA: 0x2F1390 Offset: 0x2F1390 VA: 0x2F1390
	public static bool Equals(Decimal d1, Decimal d2) { }

	// RVA: 0xC8D18 Offset: 0xC8D18 VA: 0xC8D18 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0xC8D20 Offset: 0xC8D20 VA: 0xC8D20
	private bool IsZero() { }

	// RVA: 0x2F1614 Offset: 0x2F1614 VA: 0x2F1614
	public static Decimal Floor(Decimal d) { }

	// RVA: 0x2F16BC Offset: 0x2F16BC VA: 0x2F16BC
	public static Decimal Multiply(Decimal d1, Decimal d2) { }

	// RVA: 0x2F17F0 Offset: 0x2F17F0 VA: 0x2F17F0
	public static Decimal Divide(Decimal d1, Decimal d2) { }

	[ReliabilityContractAttribute] // RVA: 0x9B710 Offset: 0x9B710 VA: 0x9B710
	// RVA: 0x2F1460 Offset: 0x2F1460 VA: 0x2F1460
	public static int Compare(Decimal d1, Decimal d2) { }

	// RVA: 0xC8D54 Offset: 0xC8D54 VA: 0xC8D54 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xC8D5C Offset: 0xC8D5C VA: 0xC8D5C Slot: 22
	public int CompareTo(Decimal value) { }

	// RVA: 0xC8D80 Offset: 0xC8D80 VA: 0xC8D80 Slot: 23
	public bool Equals(Decimal value) { }

	// RVA: 0x2F1CAC Offset: 0x2F1CAC VA: 0x2F1CAC
	public static Decimal Parse(string s, IFormatProvider provider) { }

	// RVA: 0x2F1D48 Offset: 0x2F1D48 VA: 0x2F1D48
	private static void ThrowAtPos(int pos) { }

	// RVA: 0x2F1E54 Offset: 0x2F1E54 VA: 0x2F1E54
	private static void ThrowInvalidExp() { }

	// RVA: 0x2F1EF8 Offset: 0x2F1EF8 VA: 0x2F1EF8
	private static string stripStyles(string s, NumberStyles style, NumberFormatInfo nfi, out int decPos, out bool isNegative, out bool expFlag, out int exp, bool throwex) { }

	// RVA: 0x2EFDBC Offset: 0x2EFDBC VA: 0x2EFDBC
	public static Decimal Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x2F30DC Offset: 0x2F30DC VA: 0x2F30DC
	private static bool PerformParse(string s, NumberStyles style, IFormatProvider provider, out Decimal res, bool throwex) { }

	// RVA: 0xC8DA4 Offset: 0xC8DA4 VA: 0xC8DA4 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xC8DAC Offset: 0xC8DAC VA: 0xC8DAC Slot: 3
	public override string ToString() { }

	// RVA: 0xC8DB4 Offset: 0xC8DB4 VA: 0xC8DB4
	public string ToString(string format) { }

	// RVA: 0xC8DC0 Offset: 0xC8DC0 VA: 0xC8DC0 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x2F128C Offset: 0x2F128C VA: 0x2F128C
	private static int decimal2UInt64(ref Decimal val, out ulong result) { }

	// RVA: 0x2F138C Offset: 0x2F138C VA: 0x2F138C
	private static int decimal2Int64(ref Decimal val, out long result) { }

	// RVA: 0x2F0FC8 Offset: 0x2F0FC8 VA: 0x2F0FC8
	private static int decimalIncr(ref Decimal d1, ref Decimal d2) { }

	// RVA: 0x2F376C Offset: 0x2F376C VA: 0x2F376C
	internal static int string2decimal(out Decimal val, string sDigits, uint decPos, int sign) { }

	// RVA: 0x2F3770 Offset: 0x2F3770 VA: 0x2F3770
	internal static int decimalSetExponent(ref Decimal val, int exp) { }

	// RVA: 0x2F3904 Offset: 0x2F3904 VA: 0x2F3904
	private static double decimal2double(ref Decimal val) { }

	// RVA: 0x2F1288 Offset: 0x2F1288 VA: 0x2F1288
	private static void decimalFloorAndTrunc(ref Decimal val, int floorFlag) { }

	// RVA: 0x2F17EC Offset: 0x2F17EC VA: 0x2F17EC
	private static int decimalMult(ref Decimal pd1, ref Decimal pd2) { }

	// RVA: 0x2F19E4 Offset: 0x2F19E4 VA: 0x2F19E4
	private static int decimalDiv(out Decimal pc, ref Decimal pa, ref Decimal pb) { }

	// RVA: 0x2F19E8 Offset: 0x2F19E8 VA: 0x2F19E8
	private static int decimalCompare(ref Decimal d1, ref Decimal d2) { }

	// RVA: 0x2F3908 Offset: 0x2F3908 VA: 0x2F3908
	public static Decimal op_Increment(Decimal d) { }

	// RVA: 0x2F39C8 Offset: 0x2F39C8 VA: 0x2F39C8
	public static Decimal op_Subtraction(Decimal d1, Decimal d2) { }

	// RVA: 0x2F3A94 Offset: 0x2F3A94 VA: 0x2F3A94
	public static Decimal op_Multiply(Decimal d1, Decimal d2) { }

	// RVA: 0x2F3B60 Offset: 0x2F3B60 VA: 0x2F3B60
	public static Decimal op_Division(Decimal d1, Decimal d2) { }

	// RVA: 0x2F3C2C Offset: 0x2F3C2C VA: 0x2F3C2C
	public static byte op_Explicit(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0x9B728 Offset: 0x9B728 VA: 0x9B728
	// RVA: 0x2F3CFC Offset: 0x2F3CFC VA: 0x2F3CFC
	public static sbyte op_Explicit(Decimal value) { }

	// RVA: 0x2F3DCC Offset: 0x2F3DCC VA: 0x2F3DCC
	public static short op_Explicit(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0x9B73C Offset: 0x9B73C VA: 0x9B73C
	// RVA: 0x2F3E9C Offset: 0x2F3E9C VA: 0x2F3E9C
	public static ushort op_Explicit(Decimal value) { }

	// RVA: 0x2F3F6C Offset: 0x2F3F6C VA: 0x2F3F6C
	public static int op_Explicit(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0x9B750 Offset: 0x9B750 VA: 0x9B750
	// RVA: 0x2F4038 Offset: 0x2F4038 VA: 0x2F4038
	public static uint op_Explicit(Decimal value) { }

	// RVA: 0x2F4100 Offset: 0x2F4100 VA: 0x2F4100
	public static long op_Explicit(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0x9B764 Offset: 0x9B764 VA: 0x9B764
	// RVA: 0x2F41A0 Offset: 0x2F41A0 VA: 0x2F41A0
	public static ulong op_Explicit(Decimal value) { }

	// RVA: 0x2F4240 Offset: 0x2F4240 VA: 0x2F4240
	public static Decimal op_Implicit(byte value) { }

	[CLSCompliantAttribute] // RVA: 0x9B778 Offset: 0x9B778 VA: 0x9B778
	// RVA: 0x2F4250 Offset: 0x2F4250 VA: 0x2F4250
	public static Decimal op_Implicit(sbyte value) { }

	// RVA: 0x2F427C Offset: 0x2F427C VA: 0x2F427C
	public static Decimal op_Implicit(short value) { }

	[CLSCompliantAttribute] // RVA: 0x9B78C Offset: 0x9B78C VA: 0x9B78C
	// RVA: 0x2F42A8 Offset: 0x2F42A8 VA: 0x2F42A8
	public static Decimal op_Implicit(ushort value) { }

	// RVA: 0x2F42B8 Offset: 0x2F42B8 VA: 0x2F42B8
	public static Decimal op_Implicit(int value) { }

	[CLSCompliantAttribute] // RVA: 0x9B7A0 Offset: 0x9B7A0 VA: 0x9B7A0
	// RVA: 0x2F42E4 Offset: 0x2F42E4 VA: 0x2F42E4
	public static Decimal op_Implicit(uint value) { }

	// RVA: 0x2F42FC Offset: 0x2F42FC VA: 0x2F42FC
	public static Decimal op_Implicit(long value) { }

	[CLSCompliantAttribute] // RVA: 0x9B7B4 Offset: 0x9B7B4 VA: 0x9B7B4
	// RVA: 0x2F4334 Offset: 0x2F4334 VA: 0x2F4334
	public static Decimal op_Implicit(ulong value) { }

	// RVA: 0x2F4344 Offset: 0x2F4344 VA: 0x2F4344
	public static Decimal op_Explicit(float value) { }

	// RVA: 0x2F435C Offset: 0x2F435C VA: 0x2F435C
	public static Decimal op_Explicit(double value) { }

	// RVA: 0x2F437C Offset: 0x2F437C VA: 0x2F437C
	public static float op_Explicit(Decimal value) { }

	// RVA: 0x2F4428 Offset: 0x2F4428 VA: 0x2F4428
	public static double op_Explicit(Decimal value) { }

	// RVA: 0x2F44B4 Offset: 0x2F44B4 VA: 0x2F44B4
	public static bool op_Inequality(Decimal d1, Decimal d2) { }

	// RVA: 0x2F4578 Offset: 0x2F4578 VA: 0x2F4578
	public static bool op_Equality(Decimal d1, Decimal d2) { }

	// RVA: 0x2F4638 Offset: 0x2F4638 VA: 0x2F4638
	public static bool op_GreaterThan(Decimal d1, Decimal d2) { }

	// RVA: 0x2F4708 Offset: 0x2F4708 VA: 0x2F4708
	public static bool op_LessThan(Decimal d1, Decimal d2) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x93618 Offset: 0x93618 VA: 0x93618
[Serializable]
public struct Boolean : IConvertible, IComparable, IComparable<bool>, IEquatable<bool> // TypeDefIndex: 33
{
	// Fields
	public static readonly string FalseString; // 0x0
	public static readonly string TrueString; // 0x4
	internal bool m_value; // 0x0

	// Methods

	// RVA: 0x474BEC Offset: 0x474BEC VA: 0x474BEC
	private static void .cctor() { }

	// RVA: 0xEF030 Offset: 0xEF030 VA: 0xEF030 Slot: 16
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xEF038 Offset: 0xEF038 VA: 0xEF038 Slot: 4
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xEF048 Offset: 0xEF048 VA: 0xEF048 Slot: 5
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xEF050 Offset: 0xEF050 VA: 0xEF050 Slot: 6
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xEF060 Offset: 0xEF060 VA: 0xEF060 Slot: 7
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xEF070 Offset: 0xEF070 VA: 0xEF070 Slot: 8
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xEF084 Offset: 0xEF084 VA: 0xEF084 Slot: 9
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xEF08C Offset: 0xEF08C VA: 0xEF08C Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xEF094 Offset: 0xEF094 VA: 0xEF094 Slot: 11
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xEF09C Offset: 0xEF09C VA: 0xEF09C Slot: 12
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xEF0A4 Offset: 0xEF0A4 VA: 0xEF0A4 Slot: 13
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xEF0AC Offset: 0xEF0AC VA: 0xEF0AC Slot: 14
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xEF0B4 Offset: 0xEF0B4 VA: 0xEF0B4 Slot: 17
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xEF0BC Offset: 0xEF0BC VA: 0xEF0BC Slot: 18
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xEF0C4 Offset: 0xEF0C4 VA: 0xEF0C4 Slot: 19
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xEF0CC Offset: 0xEF0CC VA: 0xEF0CC Slot: 20
	public int CompareTo(object obj) { }

	// RVA: 0xEF0D4 Offset: 0xEF0D4 VA: 0xEF0D4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xEF0DC Offset: 0xEF0DC VA: 0xEF0DC Slot: 21
	public int CompareTo(bool value) { }

	// RVA: 0xEF0FC Offset: 0xEF0FC VA: 0xEF0FC Slot: 22
	public bool Equals(bool obj) { }

	// RVA: 0xEF110 Offset: 0xEF110 VA: 0xEF110 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x476DAC Offset: 0x476DAC VA: 0x476DAC
	public static bool Parse(string value) { }

	// RVA: 0xEF120 Offset: 0xEF120 VA: 0xEF120 Slot: 3
	public override string ToString() { }

	// RVA: 0xEF128 Offset: 0xEF128 VA: 0xEF128 Slot: 23
	public TypeCode GetTypeCode() { }

	// RVA: 0xEF130 Offset: 0xEF130 VA: 0xEF130 Slot: 15
	public string ToString(IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9362C Offset: 0x9362C VA: 0x9362C
[Serializable]
public struct IntPtr : ISerializable // TypeDefIndex: 34
{
	// Fields
	private void* m_value; // 0x0
	public static readonly IntPtr Zero; // 0x0

	// Properties
	public static int Size { get; }

	// Methods

	[ReliabilityContractAttribute] // RVA: 0x9B7C8 Offset: 0x9B7C8 VA: 0x9B7C8
	// RVA: 0xEEEE8 Offset: 0xEEEE8 VA: 0xEEEE8
	public void .ctor(int value) { }

	[ReliabilityContractAttribute] // RVA: 0x9B7E0 Offset: 0x9B7E0 VA: 0x9B7E0
	// RVA: 0xEEEF0 Offset: 0xEEEF0 VA: 0xEEEF0
	public void .ctor(long value) { }

	[ReliabilityContractAttribute] // RVA: 0x9B7F8 Offset: 0x9B7F8 VA: 0x9B7F8
	[CLSCompliantAttribute] // RVA: 0x9B7F8 Offset: 0x9B7F8 VA: 0x9B7F8
	// RVA: 0xEEEF8 Offset: 0xEEEF8 VA: 0xEEEF8
	public void .ctor(void* value) { }

	// RVA: 0xEEF00 Offset: 0xEEF00 VA: 0xEEF00
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xEEF1C Offset: 0xEEF1C VA: 0xEEF1C Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ReliabilityContractAttribute] // RVA: 0x9B834 Offset: 0x9B834 VA: 0x9B834
	// RVA: 0x45BF88 Offset: 0x45BF88 VA: 0x45BF88
	public static int get_Size() { }

	// RVA: 0xEEF38 Offset: 0xEEF38 VA: 0xEEF38 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xEEF40 Offset: 0xEEF40 VA: 0xEEF40 Slot: 2
	public override int GetHashCode() { }

	[ReliabilityContractAttribute] // RVA: 0x9B84C Offset: 0x9B84C VA: 0x9B84C
	// RVA: 0xEEF48 Offset: 0xEEF48 VA: 0xEEF48
	public long ToInt64() { }

	[CLSCompliantAttribute] // RVA: 0x9B864 Offset: 0x9B864 VA: 0x9B864
	[ReliabilityContractAttribute] // RVA: 0x9B864 Offset: 0x9B864 VA: 0x9B864
	// RVA: 0xEEF54 Offset: 0xEEF54 VA: 0xEEF54
	public void* ToPointer() { }

	// RVA: 0xEEF5C Offset: 0xEEF5C VA: 0xEEF5C Slot: 3
	public override string ToString() { }

	// RVA: 0xEEF88 Offset: 0xEEF88 VA: 0xEEF88
	public string ToString(string format) { }

	[ReliabilityContractAttribute] // RVA: 0x9B8A0 Offset: 0x9B8A0 VA: 0x9B8A0
	// RVA: 0x45C088 Offset: 0x45C088 VA: 0x45C088
	public static bool op_Equality(IntPtr value1, IntPtr value2) { }

	[ReliabilityContractAttribute] // RVA: 0x9B8B8 Offset: 0x9B8B8 VA: 0x9B8B8
	// RVA: 0x45C09C Offset: 0x45C09C VA: 0x45C09C
	public static bool op_Inequality(IntPtr value1, IntPtr value2) { }

	[ReliabilityContractAttribute] // RVA: 0x9B8D0 Offset: 0x9B8D0 VA: 0x9B8D0
	// RVA: 0x45C0B0 Offset: 0x45C0B0 VA: 0x45C0B0
	public static IntPtr op_Explicit(int value) { }

	[ReliabilityContractAttribute] // RVA: 0x9B8E8 Offset: 0x9B8E8 VA: 0x9B8E8
	// RVA: 0x45C0B4 Offset: 0x45C0B4 VA: 0x45C0B4
	public static IntPtr op_Explicit(long value) { }

	[ReliabilityContractAttribute] // RVA: 0x9B900 Offset: 0x9B900 VA: 0x9B900
	[CLSCompliantAttribute] // RVA: 0x9B900 Offset: 0x9B900 VA: 0x9B900
	// RVA: 0x45C0B8 Offset: 0x45C0B8 VA: 0x45C0B8
	public static IntPtr op_Explicit(void* value) { }

	// RVA: 0x45C0BC Offset: 0x45C0BC VA: 0x45C0BC
	public static int op_Explicit(IntPtr value) { }

	[CLSCompliantAttribute] // RVA: 0x9B93C Offset: 0x9B93C VA: 0x9B93C
	// RVA: 0x45C0C0 Offset: 0x45C0C0 VA: 0x45C0C0
	public static void* op_Explicit(IntPtr value) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x93640 Offset: 0x93640 VA: 0x93640
public interface ISerializable // TypeDefIndex: 35
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void GetObjectData(SerializationInfo info, StreamingContext context);
}

// Namespace: System
[CLSCompliantAttribute] // RVA: 0x93654 Offset: 0x93654 VA: 0x93654
[ComVisibleAttribute] // RVA: 0x93654 Offset: 0x93654 VA: 0x93654
[Serializable]
public struct UIntPtr : ISerializable // TypeDefIndex: 36
{
	// Fields
	public static readonly UIntPtr Zero; // 0x0
	private void* _pointer; // 0x0

	// Methods

	// RVA: 0xF1128 Offset: 0xF1128 VA: 0xF1128
	public void .ctor(uint value) { }

	// RVA: 0x5C3D14 Offset: 0x5C3D14 VA: 0x5C3D14
	private static void .cctor() { }

	// RVA: 0xF1130 Offset: 0xF1130 VA: 0xF1130 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xF114C Offset: 0xF114C VA: 0xF114C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xF1154 Offset: 0xF1154 VA: 0xF1154 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xF115C Offset: 0xF115C VA: 0xF115C Slot: 3
	public override string ToString() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9368C Offset: 0x9368C VA: 0x9368C
[Serializable]
public abstract class MulticastDelegate : Delegate // TypeDefIndex: 37
{
	// Fields
	private MulticastDelegate prev; // 0x2C
	private MulticastDelegate kpm_next; // 0x30

	// Methods

	// RVA: 0x463D2C Offset: 0x463D2C VA: 0x463D2C Slot: 7
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x463D4C Offset: 0x463D4C VA: 0x463D4C Slot: 0
	public sealed override bool Equals(object obj) { }

	// RVA: 0x463E58 Offset: 0x463E58 VA: 0x463E58 Slot: 2
	public sealed override int GetHashCode() { }

	// RVA: 0x463E60 Offset: 0x463E60 VA: 0x463E60 Slot: 8
	public sealed override Delegate[] GetInvocationList() { }

	// RVA: 0x464334 Offset: 0x464334 VA: 0x464334 Slot: 9
	protected sealed override Delegate CombineImpl(Delegate follow) { }

	// RVA: 0x464890 Offset: 0x464890 VA: 0x464890
	private bool BaseEquals(MulticastDelegate value) { }

	// RVA: 0x464898 Offset: 0x464898 VA: 0x464898
	private static MulticastDelegate KPM(MulticastDelegate needle, MulticastDelegate haystack, out MulticastDelegate tail) { }

	// RVA: 0x464A04 Offset: 0x464A04 VA: 0x464A04 Slot: 10
	protected sealed override Delegate RemoveImpl(Delegate value) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x936A0 Offset: 0x936A0 VA: 0x936A0
[ClassInterfaceAttribute] // RVA: 0x936A0 Offset: 0x936A0 VA: 0x936A0
[Serializable]
public abstract class Delegate : ICloneable, ISerializable // TypeDefIndex: 38
{
	// Fields
	private IntPtr method_ptr; // 0x8
	private IntPtr invoke_impl; // 0xC
	private object m_target; // 0x10
	private IntPtr method; // 0x14
	private IntPtr delegate_trampoline; // 0x18
	private IntPtr method_code; // 0x1C
	private MethodInfo method_info; // 0x20
	private MethodInfo original_method_info; // 0x24
	private DelegateData data; // 0x28

	// Properties
	public MethodInfo Method { get; }
	public object Target { get; }

	// Methods

	// RVA: 0x2F47CC Offset: 0x2F47CC VA: 0x2F47CC
	public MethodInfo get_Method() { }

	// RVA: 0x2F4910 Offset: 0x2F4910 VA: 0x2F4910
	public object get_Target() { }

	// RVA: 0x2F4918 Offset: 0x2F4918 VA: 0x2F4918
	internal static Delegate CreateDelegate_internal(Type type, object target, MethodInfo info, bool throwOnBindFailure) { }

	// RVA: 0x2F491C Offset: 0x2F491C VA: 0x2F491C
	internal void SetMulticastInvoke() { }

	// RVA: 0x2F4920 Offset: 0x2F4920 VA: 0x2F4920
	private static bool arg_type_match(Type delArgType, Type argType) { }

	// RVA: 0x2F4998 Offset: 0x2F4998 VA: 0x2F4998
	private static bool return_type_match(Type delReturnType, Type returnType) { }

	// RVA: 0x2F4A10 Offset: 0x2F4A10 VA: 0x2F4A10
	public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure) { }

	// RVA: 0x2F53F4 Offset: 0x2F53F4 VA: 0x2F53F4
	public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method) { }

	// RVA: 0x2F5410 Offset: 0x2F5410 VA: 0x2F5410
	public static Delegate CreateDelegate(Type type, MethodInfo method, bool throwOnBindFailure) { }

	// RVA: 0x2F5434 Offset: 0x2F5434 VA: 0x2F5434
	public static Delegate CreateDelegate(Type type, MethodInfo method) { }

	// RVA: 0x2F5458 Offset: 0x2F5458 VA: 0x2F5458
	public static Delegate CreateDelegate(Type type, object target, string method) { }

	// RVA: 0x2F549C Offset: 0x2F549C VA: 0x2F549C
	private static MethodInfo GetCandidateMethod(Type type, Type target, string method, BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure) { }

	// RVA: 0x2F5928 Offset: 0x2F5928 VA: 0x2F5928
	public static Delegate CreateDelegate(Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure) { }

	// RVA: 0x2F5A28 Offset: 0x2F5A28 VA: 0x2F5A28
	public static Delegate CreateDelegate(Type type, Type target, string method) { }

	// RVA: 0x2F5A4C Offset: 0x2F5A4C VA: 0x2F5A4C
	public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) { }

	// RVA: 0x2F547C Offset: 0x2F547C VA: 0x2F547C
	public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase) { }

	// RVA: 0x2F5B5C Offset: 0x2F5B5C VA: 0x2F5B5C Slot: 6
	public virtual object Clone() { }

	// RVA: 0x2F5B64 Offset: 0x2F5B64 VA: 0x2F5B64 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2F5CBC Offset: 0x2F5CBC VA: 0x2F5CBC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2F5D04 Offset: 0x2F5D04 VA: 0x2F5D04 Slot: 7
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2F5FAC Offset: 0x2F5FAC VA: 0x2F5FAC Slot: 8
	public virtual Delegate[] GetInvocationList() { }

	// RVA: 0x2F6078 Offset: 0x2F6078 VA: 0x2F6078
	public static Delegate Combine(Delegate a, Delegate b) { }

	[ComVisibleAttribute] // RVA: 0x9B950 Offset: 0x9B950 VA: 0x9B950
	// RVA: 0x2F6184 Offset: 0x2F6184 VA: 0x2F6184
	public static Delegate Combine(Delegate[] delegates) { }

	// RVA: 0x2F61F4 Offset: 0x2F61F4 VA: 0x2F61F4 Slot: 9
	protected virtual Delegate CombineImpl(Delegate d) { }

	// RVA: 0x2F62C4 Offset: 0x2F62C4 VA: 0x2F62C4
	public static Delegate Remove(Delegate source, Delegate value) { }

	// RVA: 0x2F62E0 Offset: 0x2F62E0 VA: 0x2F62E0 Slot: 10
	protected virtual Delegate RemoveImpl(Delegate d) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x936D8 Offset: 0x936D8 VA: 0x936D8
[Serializable]
public abstract class Enum : ValueType, IFormattable, IConvertible, IComparable // TypeDefIndex: 39
{
	// Fields
	private static char[] split_char; // 0x0

	// Properties
	private object Value { get; }

	// Methods

	// RVA: 0x2FAA48 Offset: 0x2FAA48 VA: 0x2FAA48
	protected void .ctor() { }

	// RVA: 0x2FAA50 Offset: 0x2FAA50 VA: 0x2FAA50
	private static void .cctor() { }

	// RVA: 0x2FAB00 Offset: 0x2FAB00 VA: 0x2FAB00 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x2FAB9C Offset: 0x2FAB9C VA: 0x2FAB9C Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x2FAC34 Offset: 0x2FAC34 VA: 0x2FAC34 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x2FACCC Offset: 0x2FACCC VA: 0x2FACCC Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x2FAD6C Offset: 0x2FAD6C VA: 0x2FAD6C Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x2FAE0C Offset: 0x2FAE0C VA: 0x2FAE0C Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x2FAEA4 Offset: 0x2FAEA4 VA: 0x2FAEA4 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x2FAF3C Offset: 0x2FAF3C VA: 0x2FAF3C Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x2FAFD4 Offset: 0x2FAFD4 VA: 0x2FAFD4 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x2FB06C Offset: 0x2FB06C VA: 0x2FB06C Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x2FB104 Offset: 0x2FB104 VA: 0x2FB104 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x2FB19C Offset: 0x2FB19C VA: 0x2FB19C Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0x2FB374 Offset: 0x2FB374 VA: 0x2FB374 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x2FB40C Offset: 0x2FB40C VA: 0x2FB40C Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x2FB4A4 Offset: 0x2FB4A4 VA: 0x2FB4A4 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x2FB53C Offset: 0x2FB53C VA: 0x2FB53C Slot: 22
	public TypeCode GetTypeCode() { }

	// RVA: 0x2FB750 Offset: 0x2FB750 VA: 0x2FB750
	private object get_value() { }

	// RVA: 0x2FAB98 Offset: 0x2FAB98 VA: 0x2FAB98
	private object get_Value() { }

	// RVA: 0x2FB754 Offset: 0x2FB754 VA: 0x2FB754
	private static int FindPosition(object value, Array values) { }

	[ComVisibleAttribute] // RVA: 0x9B964 Offset: 0x9B964 VA: 0x9B964
	// RVA: 0x2FB9E4 Offset: 0x2FB9E4 VA: 0x2FB9E4
	public static string GetName(Type enumType, object value) { }

	[ComVisibleAttribute] // RVA: 0x9B978 Offset: 0x9B978 VA: 0x9B978
	// RVA: 0x2FBC30 Offset: 0x2FBC30 VA: 0x2FBC30
	public static bool IsDefined(Type enumType, object value) { }

	// RVA: 0x2FBFC4 Offset: 0x2FBFC4 VA: 0x2FBFC4
	private static Type get_underlying_type(Type enumType) { }

	[ComVisibleAttribute] // RVA: 0x9B98C Offset: 0x9B98C VA: 0x9B98C
	// RVA: 0x2FB608 Offset: 0x2FB608 VA: 0x2FB608
	public static Type GetUnderlyingType(Type enumType) { }

	// RVA: 0x2FBFC8 Offset: 0x2FBFC8 VA: 0x2FBFC8
	private static int FindName(Hashtable name_hash, string[] names, string name, bool ignoreCase) { }

	// RVA: 0x2FC1D8 Offset: 0x2FC1D8 VA: 0x2FC1D8
	private static ulong GetValue(object value, TypeCode typeCode) { }

	[ComVisibleAttribute] // RVA: 0x9B9A0 Offset: 0x9B9A0 VA: 0x9B9A0
	// RVA: 0x2FC384 Offset: 0x2FC384 VA: 0x2FC384
	public static object Parse(Type enumType, string value, bool ignoreCase) { }

	// RVA: 0x2FD328 Offset: 0x2FD328 VA: 0x2FD328
	private int compare_value_to(object other) { }

	// RVA: 0x2FD32C Offset: 0x2FD32C VA: 0x2FD32C Slot: 21
	public int CompareTo(object target) { }

	// RVA: 0x2FD464 Offset: 0x2FD464 VA: 0x2FD464 Slot: 3
	public override string ToString() { }

	[ObsoleteAttribute] // RVA: 0x9B9B4 Offset: 0x9B9B4 VA: 0x9B9B4
	// RVA: 0x2FB310 Offset: 0x2FB310 VA: 0x2FB310 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x2FD4C8 Offset: 0x2FD4C8 VA: 0x2FD4C8
	public string ToString(string format) { }

	[ObsoleteAttribute] // RVA: 0x9B9E8 Offset: 0x9B9E8 VA: 0x9B9E8
	// RVA: 0x2FD5E8 Offset: 0x2FD5E8 VA: 0x2FD5E8 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	[ComVisibleAttribute] // RVA: 0x9BA1C Offset: 0x9BA1C VA: 0x9BA1C
	// RVA: 0x2FCF00 Offset: 0x2FCF00 VA: 0x2FCF00
	public static object ToObject(Type enumType, byte value) { }

	[ComVisibleAttribute] // RVA: 0x9BA30 Offset: 0x9BA30 VA: 0x9BA30
	// RVA: 0x2FCFB0 Offset: 0x2FCFB0 VA: 0x2FCFB0
	public static object ToObject(Type enumType, short value) { }

	[ComVisibleAttribute] // RVA: 0x9BA44 Offset: 0x9BA44 VA: 0x9BA44
	// RVA: 0x2FD110 Offset: 0x2FD110 VA: 0x2FD110
	public static object ToObject(Type enumType, int value) { }

	[ComVisibleAttribute] // RVA: 0x9BA58 Offset: 0x9BA58 VA: 0x9BA58
	// RVA: 0x2FD270 Offset: 0x2FD270 VA: 0x2FD270
	public static object ToObject(Type enumType, long value) { }

	[ComVisibleAttribute] // RVA: 0x9BA6C Offset: 0x9BA6C VA: 0x9BA6C
	// RVA: 0x2FBC2C Offset: 0x2FBC2C VA: 0x2FBC2C
	public static object ToObject(Type enumType, object value) { }

	[CLSCompliantAttribute] // RVA: 0x9BA80 Offset: 0x9BA80 VA: 0x9BA80
	[ComVisibleAttribute] // RVA: 0x9BA80 Offset: 0x9BA80 VA: 0x9BA80
	// RVA: 0x2FCE50 Offset: 0x2FCE50 VA: 0x2FCE50
	public static object ToObject(Type enumType, sbyte value) { }

	[ComVisibleAttribute] // RVA: 0x9BAB8 Offset: 0x9BAB8 VA: 0x9BAB8
	[CLSCompliantAttribute] // RVA: 0x9BAB8 Offset: 0x9BAB8 VA: 0x9BAB8
	// RVA: 0x2FD060 Offset: 0x2FD060 VA: 0x2FD060
	public static object ToObject(Type enumType, ushort value) { }

	[CLSCompliantAttribute] // RVA: 0x9BAF0 Offset: 0x9BAF0 VA: 0x9BAF0
	[ComVisibleAttribute] // RVA: 0x9BAF0 Offset: 0x9BAF0 VA: 0x9BAF0
	// RVA: 0x2FD1C0 Offset: 0x2FD1C0 VA: 0x2FD1C0
	public static object ToObject(Type enumType, uint value) { }

	[ComVisibleAttribute] // RVA: 0x9BB28 Offset: 0x9BB28 VA: 0x9BB28
	[CLSCompliantAttribute] // RVA: 0x9BB28 Offset: 0x9BB28 VA: 0x9BB28
	// RVA: 0x2FCD98 Offset: 0x2FCD98 VA: 0x2FCD98
	public static object ToObject(Type enumType, ulong value) { }

	// RVA: 0x2FE074 Offset: 0x2FE074 VA: 0x2FE074 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2FE07C Offset: 0x2FE07C VA: 0x2FE07C
	private int get_hashcode() { }

	// RVA: 0x2FE080 Offset: 0x2FE080 VA: 0x2FE080 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2FE084 Offset: 0x2FE084 VA: 0x2FE084
	private static string FormatSpecifier_X(Type enumType, object value, bool upper) { }

	// RVA: 0x2FE454 Offset: 0x2FE454 VA: 0x2FE454
	private static string FormatFlags(Type enumType, object value) { }

	[ComVisibleAttribute] // RVA: 0x9BB60 Offset: 0x9BB60 VA: 0x9BB60
	// RVA: 0x2FD708 Offset: 0x2FD708 VA: 0x2FD708
	public static string Format(Type enumType, object value, string format) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x936EC Offset: 0x936EC VA: 0x936EC
[Serializable]
public abstract class Array : IEnumerable, ICloneable, ICollection, IList // TypeDefIndex: 40
{
	// Properties
	private object System.Collections.IList.Item { get; set; }
	private int System.Collections.ICollection.Count { get; }
	public int Length { get; }
	[ComVisibleAttribute] // RVA: 0x9DF40 Offset: 0x9DF40 VA: 0x9DF40
	public long LongLength { get; }
	public int Rank { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }
	public bool IsFixedSize { get; }
	public bool IsReadOnly { get; }

	// Methods

	// RVA: 0x2BC200 Offset: 0x2BC200 VA: 0x2BC200
	private void .ctor() { }

	// RVA: 0x2BC208 Offset: 0x2BC208 VA: 0x2BC208 Slot: 12
	private object System.Collections.IList.get_Item(int index) { }

	// RVA: 0x2BC390 Offset: 0x2BC390 VA: 0x2BC390 Slot: 13
	private void System.Collections.IList.set_Item(int index, object value) { }

	// RVA: 0x2BC4C4 Offset: 0x2BC4C4 VA: 0x2BC4C4 Slot: 14
	private int System.Collections.IList.Add(object value) { }

	// RVA: 0x2BC54C Offset: 0x2BC54C VA: 0x2BC54C Slot: 15
	private void System.Collections.IList.Clear() { }

	// RVA: 0x2BC584 Offset: 0x2BC584 VA: 0x2BC584 Slot: 16
	private bool System.Collections.IList.Contains(object value) { }

	[ReliabilityContractAttribute] // RVA: 0x9BB74 Offset: 0x9BB74 VA: 0x9BB74
	// RVA: 0x2BC698 Offset: 0x2BC698 VA: 0x2BC698 Slot: 17
	private int System.Collections.IList.IndexOf(object value) { }

	// RVA: 0x2BC7BC Offset: 0x2BC7BC VA: 0x2BC7BC Slot: 18
	private void System.Collections.IList.Insert(int index, object value) { }

	// RVA: 0x2BC844 Offset: 0x2BC844 VA: 0x2BC844 Slot: 19
	private void System.Collections.IList.Remove(object value) { }

	// RVA: 0x2BC8CC Offset: 0x2BC8CC VA: 0x2BC8CC Slot: 20
	private void System.Collections.IList.RemoveAt(int index) { }

	// RVA: 0x2BC954 Offset: 0x2BC954 VA: 0x2BC954 Slot: 6
	private int System.Collections.ICollection.get_Count() { }

	// RVA: 0x2BC958 Offset: 0x2BC958 VA: 0x2BC958
	internal int InternalArray__ICollection_get_Count() { }

	// RVA: 0x2BC95C Offset: 0x2BC95C VA: 0x2BC95C
	internal bool InternalArray__ICollection_get_IsReadOnly() { }

	// RVA: -1 Offset: -1
	internal IEnumerator<T> InternalArray__IEnumerable_GetEnumerator<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3ABC44 Offset: 0x3ABC44 VA: 0x3ABC44
	|-Array.InternalArray__IEnumerable_GetEnumerator<CodePointIndexer.TableRange>
	|
	|-RVA: 0x3ABCB0 Offset: 0x3ABCB0 VA: 0x3ABCB0
	|-Array.InternalArray__IEnumerable_GetEnumerator<ClientCertificateType>
	|
	|-RVA: 0x3ABD1C Offset: 0x3ABD1C VA: 0x3ABD1C
	|-Array.InternalArray__IEnumerable_GetEnumerator<bool>
	|
	|-RVA: 0x3ABD88 Offset: 0x3ABD88 VA: 0x3ABD88
	|-Array.InternalArray__IEnumerable_GetEnumerator<byte>
	|
	|-RVA: 0x3ABDF4 Offset: 0x3ABDF4 VA: 0x3ABDF4
	|-Array.InternalArray__IEnumerable_GetEnumerator<char>
	|
	|-RVA: 0x3ABE60 Offset: 0x3ABE60 VA: 0x3ABE60
	|-Array.InternalArray__IEnumerable_GetEnumerator<DictionaryEntry>
	|
	|-RVA: 0x3ABECC Offset: 0x3ABECC VA: 0x3ABECC
	|-Array.InternalArray__IEnumerable_GetEnumerator<HashSet.Link<object>>
	|
	|-RVA: 0x3ABF38 Offset: 0x3ABF38 VA: 0x3ABF38
	|-Array.InternalArray__IEnumerable_GetEnumerator<KeyValuePair<int, object>>
	|
	|-RVA: 0x3ABFA4 Offset: 0x3ABFA4 VA: 0x3ABFA4
	|-Array.InternalArray__IEnumerable_GetEnumerator<KeyValuePair<object, bool>>
	|
	|-RVA: 0x3AC010 Offset: 0x3AC010 VA: 0x3AC010
	|-Array.InternalArray__IEnumerable_GetEnumerator<KeyValuePair<object, int>>
	|
	|-RVA: 0x3AC07C Offset: 0x3AC07C VA: 0x3AC07C
	|-Array.InternalArray__IEnumerable_GetEnumerator<KeyValuePair<object, object>>
	|
	|-RVA: 0x3AC0E8 Offset: 0x3AC0E8 VA: 0x3AC0E8
	|-Array.InternalArray__IEnumerable_GetEnumerator<Link>
	|
	|-RVA: 0x3AC154 Offset: 0x3AC154 VA: 0x3AC154
	|-Array.InternalArray__IEnumerable_GetEnumerator<Hashtable.Slot>
	|
	|-RVA: 0x3AC1C0 Offset: 0x3AC1C0 VA: 0x3AC1C0
	|-Array.InternalArray__IEnumerable_GetEnumerator<SortedList.Slot>
	|
	|-RVA: 0x3AC22C Offset: 0x3AC22C VA: 0x3AC22C
	|-Array.InternalArray__IEnumerable_GetEnumerator<DateTime>
	|
	|-RVA: 0x3AC298 Offset: 0x3AC298 VA: 0x3AC298
	|-Array.InternalArray__IEnumerable_GetEnumerator<Decimal>
	|
	|-RVA: 0x3AC304 Offset: 0x3AC304 VA: 0x3AC304
	|-Array.InternalArray__IEnumerable_GetEnumerator<double>
	|
	|-RVA: 0x3AC370 Offset: 0x3AC370 VA: 0x3AC370
	|-Array.InternalArray__IEnumerable_GetEnumerator<short>
	|
	|-RVA: 0x3AC3DC Offset: 0x3AC3DC VA: 0x3AC3DC
	|-Array.InternalArray__IEnumerable_GetEnumerator<int>
	|
	|-RVA: 0x3AC448 Offset: 0x3AC448 VA: 0x3AC448
	|-Array.InternalArray__IEnumerable_GetEnumerator<long>
	|
	|-RVA: 0x3AC4B4 Offset: 0x3AC4B4 VA: 0x3AC4B4
	|-Array.InternalArray__IEnumerable_GetEnumerator<IntPtr>
	|
	|-RVA: 0x3AC520 Offset: 0x3AC520 VA: 0x3AC520
	|-Array.InternalArray__IEnumerable_GetEnumerator<object>
	|
	|-RVA: 0x3AC58C Offset: 0x3AC58C VA: 0x3AC58C
	|-Array.InternalArray__IEnumerable_GetEnumerator<CustomAttributeNamedArgument>
	|
	|-RVA: 0x3AC5F8 Offset: 0x3AC5F8 VA: 0x3AC5F8
	|-Array.InternalArray__IEnumerable_GetEnumerator<CustomAttributeTypedArgument>
	|
	|-RVA: 0x3AC664 Offset: 0x3AC664 VA: 0x3AC664
	|-Array.InternalArray__IEnumerable_GetEnumerator<ILGenerator.LabelData>
	|
	|-RVA: 0x3AC6D0 Offset: 0x3AC6D0 VA: 0x3AC6D0
	|-Array.InternalArray__IEnumerable_GetEnumerator<ILGenerator.LabelFixup>
	|
	|-RVA: 0x3AC73C Offset: 0x3AC73C VA: 0x3AC73C
	|-Array.InternalArray__IEnumerable_GetEnumerator<ILTokenInfo>
	|
	|-RVA: 0x3AC7A8 Offset: 0x3AC7A8 VA: 0x3AC7A8
	|-Array.InternalArray__IEnumerable_GetEnumerator<MonoResource>
	|
	|-RVA: 0x3AC814 Offset: 0x3AC814 VA: 0x3AC814
	|-Array.InternalArray__IEnumerable_GetEnumerator<MonoWin32Resource>
	|
	|-RVA: 0x3AC880 Offset: 0x3AC880 VA: 0x3AC880
	|-Array.InternalArray__IEnumerable_GetEnumerator<RefEmitPermissionSet>
	|
	|-RVA: 0x3AC8EC Offset: 0x3AC8EC VA: 0x3AC8EC
	|-Array.InternalArray__IEnumerable_GetEnumerator<ParameterModifier>
	|
	|-RVA: 0x3AC958 Offset: 0x3AC958 VA: 0x3AC958
	|-Array.InternalArray__IEnumerable_GetEnumerator<ResourceReader.ResourceCacheItem>
	|
	|-RVA: 0x3AC9C4 Offset: 0x3AC9C4 VA: 0x3AC9C4
	|-Array.InternalArray__IEnumerable_GetEnumerator<ResourceReader.ResourceInfo>
	|
	|-RVA: 0x3ACA30 Offset: 0x3ACA30 VA: 0x3ACA30
	|-Array.InternalArray__IEnumerable_GetEnumerator<TypeTag>
	|
	|-RVA: 0x3ACA9C Offset: 0x3ACA9C VA: 0x3ACA9C
	|-Array.InternalArray__IEnumerable_GetEnumerator<sbyte>
	|
	|-RVA: 0x3ACB08 Offset: 0x3ACB08 VA: 0x3ACB08
	|-Array.InternalArray__IEnumerable_GetEnumerator<X509ChainStatus>
	|
	|-RVA: 0x3ACB74 Offset: 0x3ACB74 VA: 0x3ACB74
	|-Array.InternalArray__IEnumerable_GetEnumerator<float>
	|
	|-RVA: 0x3ACBE0 Offset: 0x3ACBE0 VA: 0x3ACBE0
	|-Array.InternalArray__IEnumerable_GetEnumerator<Mark>
	|
	|-RVA: 0x3ACC4C Offset: 0x3ACC4C VA: 0x3ACC4C
	|-Array.InternalArray__IEnumerable_GetEnumerator<TimeSpan>
	|
	|-RVA: 0x3ACCB8 Offset: 0x3ACCB8 VA: 0x3ACCB8
	|-Array.InternalArray__IEnumerable_GetEnumerator<ushort>
	|
	|-RVA: 0x3ACD24 Offset: 0x3ACD24 VA: 0x3ACD24
	|-Array.InternalArray__IEnumerable_GetEnumerator<uint>
	|
	|-RVA: 0x3ACD90 Offset: 0x3ACD90 VA: 0x3ACD90
	|-Array.InternalArray__IEnumerable_GetEnumerator<ulong>
	|
	|-RVA: 0x3ACDFC Offset: 0x3ACDFC VA: 0x3ACDFC
	|-Array.InternalArray__IEnumerable_GetEnumerator<Uri.UriScheme>
	|
	|-RVA: 0x3ACE68 Offset: 0x3ACE68 VA: 0x3ACE68
	|-Array.InternalArray__IEnumerable_GetEnumerator<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x3ACED4 Offset: 0x3ACED4 VA: 0x3ACED4
	|-Array.InternalArray__IEnumerable_GetEnumerator<Color32>
	|
	|-RVA: 0x3ACF40 Offset: 0x3ACF40 VA: 0x3ACF40
	|-Array.InternalArray__IEnumerable_GetEnumerator<ContactPoint2D>
	|
	|-RVA: 0x3ACFAC Offset: 0x3ACFAC VA: 0x3ACFAC
	|-Array.InternalArray__IEnumerable_GetEnumerator<ContactPoint>
	|
	|-RVA: 0x3AD018 Offset: 0x3AD018 VA: 0x3AD018
	|-Array.InternalArray__IEnumerable_GetEnumerator<RaycastResult>
	|
	|-RVA: 0x3AD084 Offset: 0x3AD084 VA: 0x3AD084
	|-Array.InternalArray__IEnumerable_GetEnumerator<PlayerLoopSystem>
	|
	|-RVA: 0x3AD0F0 Offset: 0x3AD0F0 VA: 0x3AD0F0
	|-Array.InternalArray__IEnumerable_GetEnumerator<Keyframe>
	|
	|-RVA: 0x3AD15C Offset: 0x3AD15C VA: 0x3AD15C
	|-Array.InternalArray__IEnumerable_GetEnumerator<PlayableBinding>
	|
	|-RVA: 0x3AD1C8 Offset: 0x3AD1C8 VA: 0x3AD1C8
	|-Array.InternalArray__IEnumerable_GetEnumerator<RaycastHit2D>
	|
	|-RVA: 0x3AD234 Offset: 0x3AD234 VA: 0x3AD234
	|-Array.InternalArray__IEnumerable_GetEnumerator<RaycastHit>
	|
	|-RVA: 0x3AD2A0 Offset: 0x3AD2A0 VA: 0x3AD2A0
	|-Array.InternalArray__IEnumerable_GetEnumerator<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x3AD30C Offset: 0x3AD30C VA: 0x3AD30C
	|-Array.InternalArray__IEnumerable_GetEnumerator<InputField.ContentType>
	|
	|-RVA: 0x3AD378 Offset: 0x3AD378 VA: 0x3AD378
	|-Array.InternalArray__IEnumerable_GetEnumerator<UICharInfo>
	|
	|-RVA: 0x3AD3E4 Offset: 0x3AD3E4 VA: 0x3AD3E4
	|-Array.InternalArray__IEnumerable_GetEnumerator<UILineInfo>
	|
	|-RVA: 0x3AD450 Offset: 0x3AD450 VA: 0x3AD450
	|-Array.InternalArray__IEnumerable_GetEnumerator<UIVertex>
	|
	|-RVA: 0x3AD4BC Offset: 0x3AD4BC VA: 0x3AD4BC
	|-Array.InternalArray__IEnumerable_GetEnumerator<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x3AD528 Offset: 0x3AD528 VA: 0x3AD528
	|-Array.InternalArray__IEnumerable_GetEnumerator<Vector2>
	|
	|-RVA: 0x3AD594 Offset: 0x3AD594 VA: 0x3AD594
	|-Array.InternalArray__IEnumerable_GetEnumerator<Vector3>
	|
	|-RVA: 0x3AD600 Offset: 0x3AD600 VA: 0x3AD600
	|-Array.InternalArray__IEnumerable_GetEnumerator<Vector4>
	|
	|-RVA: 0x3AD66C Offset: 0x3AD66C VA: 0x3AD66C
	|-Array.InternalArray__IEnumerable_GetEnumerator<jvalue>
	*/

	// RVA: 0x2BC964 Offset: 0x2BC964 VA: 0x2BC964
	internal void InternalArray__ICollection_Clear() { }

	// RVA: -1 Offset: -1
	internal void InternalArray__ICollection_Add<T>(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x52451C Offset: 0x52451C VA: 0x52451C
	|-Array.InternalArray__ICollection_Add<CodePointIndexer.TableRange>
	|
	|-RVA: 0x5245B8 Offset: 0x5245B8 VA: 0x5245B8
	|-Array.InternalArray__ICollection_Add<ClientCertificateType>
	|
	|-RVA: 0x524654 Offset: 0x524654 VA: 0x524654
	|-Array.InternalArray__ICollection_Add<bool>
	|
	|-RVA: 0x5246F0 Offset: 0x5246F0 VA: 0x5246F0
	|-Array.InternalArray__ICollection_Add<byte>
	|
	|-RVA: 0x52478C Offset: 0x52478C VA: 0x52478C
	|-Array.InternalArray__ICollection_Add<char>
	|
	|-RVA: 0x524828 Offset: 0x524828 VA: 0x524828
	|-Array.InternalArray__ICollection_Add<DictionaryEntry>
	|
	|-RVA: 0x5248C4 Offset: 0x5248C4 VA: 0x5248C4
	|-Array.InternalArray__ICollection_Add<HashSet.Link<object>>
	|
	|-RVA: 0x524960 Offset: 0x524960 VA: 0x524960
	|-Array.InternalArray__ICollection_Add<KeyValuePair<int, object>>
	|
	|-RVA: 0x5249FC Offset: 0x5249FC VA: 0x5249FC
	|-Array.InternalArray__ICollection_Add<KeyValuePair<object, bool>>
	|
	|-RVA: 0x524A98 Offset: 0x524A98 VA: 0x524A98
	|-Array.InternalArray__ICollection_Add<KeyValuePair<object, int>>
	|
	|-RVA: 0x524B34 Offset: 0x524B34 VA: 0x524B34
	|-Array.InternalArray__ICollection_Add<KeyValuePair<object, object>>
	|
	|-RVA: 0x524BD0 Offset: 0x524BD0 VA: 0x524BD0
	|-Array.InternalArray__ICollection_Add<Link>
	|
	|-RVA: 0x524C6C Offset: 0x524C6C VA: 0x524C6C
	|-Array.InternalArray__ICollection_Add<Hashtable.Slot>
	|
	|-RVA: 0x524D08 Offset: 0x524D08 VA: 0x524D08
	|-Array.InternalArray__ICollection_Add<SortedList.Slot>
	|
	|-RVA: 0x524DA4 Offset: 0x524DA4 VA: 0x524DA4
	|-Array.InternalArray__ICollection_Add<DateTime>
	|
	|-RVA: 0x524E40 Offset: 0x524E40 VA: 0x524E40
	|-Array.InternalArray__ICollection_Add<Decimal>
	|
	|-RVA: 0x524EDC Offset: 0x524EDC VA: 0x524EDC
	|-Array.InternalArray__ICollection_Add<double>
	|
	|-RVA: 0x524F78 Offset: 0x524F78 VA: 0x524F78
	|-Array.InternalArray__ICollection_Add<short>
	|
	|-RVA: 0x525014 Offset: 0x525014 VA: 0x525014
	|-Array.InternalArray__ICollection_Add<int>
	|
	|-RVA: 0x5250B0 Offset: 0x5250B0 VA: 0x5250B0
	|-Array.InternalArray__ICollection_Add<long>
	|
	|-RVA: 0x52514C Offset: 0x52514C VA: 0x52514C
	|-Array.InternalArray__ICollection_Add<IntPtr>
	|
	|-RVA: 0x5251E8 Offset: 0x5251E8 VA: 0x5251E8
	|-Array.InternalArray__ICollection_Add<object>
	|
	|-RVA: 0x525284 Offset: 0x525284 VA: 0x525284
	|-Array.InternalArray__ICollection_Add<CustomAttributeNamedArgument>
	|
	|-RVA: 0x525320 Offset: 0x525320 VA: 0x525320
	|-Array.InternalArray__ICollection_Add<CustomAttributeTypedArgument>
	|
	|-RVA: 0x5253BC Offset: 0x5253BC VA: 0x5253BC
	|-Array.InternalArray__ICollection_Add<ILGenerator.LabelData>
	|
	|-RVA: 0x525458 Offset: 0x525458 VA: 0x525458
	|-Array.InternalArray__ICollection_Add<ILGenerator.LabelFixup>
	|
	|-RVA: 0x5254F4 Offset: 0x5254F4 VA: 0x5254F4
	|-Array.InternalArray__ICollection_Add<ILTokenInfo>
	|
	|-RVA: 0x525590 Offset: 0x525590 VA: 0x525590
	|-Array.InternalArray__ICollection_Add<MonoResource>
	|
	|-RVA: 0x52562C Offset: 0x52562C VA: 0x52562C
	|-Array.InternalArray__ICollection_Add<MonoWin32Resource>
	|
	|-RVA: 0x5256C8 Offset: 0x5256C8 VA: 0x5256C8
	|-Array.InternalArray__ICollection_Add<RefEmitPermissionSet>
	|
	|-RVA: 0x525764 Offset: 0x525764 VA: 0x525764
	|-Array.InternalArray__ICollection_Add<ParameterModifier>
	|
	|-RVA: 0x525800 Offset: 0x525800 VA: 0x525800
	|-Array.InternalArray__ICollection_Add<ResourceReader.ResourceCacheItem>
	|
	|-RVA: 0x52589C Offset: 0x52589C VA: 0x52589C
	|-Array.InternalArray__ICollection_Add<ResourceReader.ResourceInfo>
	|
	|-RVA: 0x525938 Offset: 0x525938 VA: 0x525938
	|-Array.InternalArray__ICollection_Add<TypeTag>
	|
	|-RVA: 0x5259D4 Offset: 0x5259D4 VA: 0x5259D4
	|-Array.InternalArray__ICollection_Add<sbyte>
	|
	|-RVA: 0x525A70 Offset: 0x525A70 VA: 0x525A70
	|-Array.InternalArray__ICollection_Add<X509ChainStatus>
	|
	|-RVA: 0x525B0C Offset: 0x525B0C VA: 0x525B0C
	|-Array.InternalArray__ICollection_Add<float>
	|
	|-RVA: 0x525BA8 Offset: 0x525BA8 VA: 0x525BA8
	|-Array.InternalArray__ICollection_Add<Mark>
	|
	|-RVA: 0x525C44 Offset: 0x525C44 VA: 0x525C44
	|-Array.InternalArray__ICollection_Add<TimeSpan>
	|
	|-RVA: 0x525CE0 Offset: 0x525CE0 VA: 0x525CE0
	|-Array.InternalArray__ICollection_Add<ushort>
	|
	|-RVA: 0x525D7C Offset: 0x525D7C VA: 0x525D7C
	|-Array.InternalArray__ICollection_Add<uint>
	|
	|-RVA: 0x525E18 Offset: 0x525E18 VA: 0x525E18
	|-Array.InternalArray__ICollection_Add<ulong>
	|
	|-RVA: 0x525EB4 Offset: 0x525EB4 VA: 0x525EB4
	|-Array.InternalArray__ICollection_Add<Uri.UriScheme>
	|
	|-RVA: 0x525F50 Offset: 0x525F50 VA: 0x525F50
	|-Array.InternalArray__ICollection_Add<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x525FEC Offset: 0x525FEC VA: 0x525FEC
	|-Array.InternalArray__ICollection_Add<Color32>
	|
	|-RVA: 0x526088 Offset: 0x526088 VA: 0x526088
	|-Array.InternalArray__ICollection_Add<ContactPoint2D>
	|
	|-RVA: 0x526124 Offset: 0x526124 VA: 0x526124
	|-Array.InternalArray__ICollection_Add<ContactPoint>
	|
	|-RVA: 0x5261C0 Offset: 0x5261C0 VA: 0x5261C0
	|-Array.InternalArray__ICollection_Add<RaycastResult>
	|
	|-RVA: 0x52625C Offset: 0x52625C VA: 0x52625C
	|-Array.InternalArray__ICollection_Add<PlayerLoopSystem>
	|
	|-RVA: 0x5262F8 Offset: 0x5262F8 VA: 0x5262F8
	|-Array.InternalArray__ICollection_Add<Keyframe>
	|
	|-RVA: 0x526394 Offset: 0x526394 VA: 0x526394
	|-Array.InternalArray__ICollection_Add<PlayableBinding>
	|
	|-RVA: 0x526430 Offset: 0x526430 VA: 0x526430
	|-Array.InternalArray__ICollection_Add<RaycastHit2D>
	|
	|-RVA: 0x5264CC Offset: 0x5264CC VA: 0x5264CC
	|-Array.InternalArray__ICollection_Add<RaycastHit>
	|
	|-RVA: 0x526568 Offset: 0x526568 VA: 0x526568
	|-Array.InternalArray__ICollection_Add<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x526604 Offset: 0x526604 VA: 0x526604
	|-Array.InternalArray__ICollection_Add<InputField.ContentType>
	|
	|-RVA: 0x5266A0 Offset: 0x5266A0 VA: 0x5266A0
	|-Array.InternalArray__ICollection_Add<UICharInfo>
	|
	|-RVA: 0x52673C Offset: 0x52673C VA: 0x52673C
	|-Array.InternalArray__ICollection_Add<UILineInfo>
	|
	|-RVA: 0x5267D8 Offset: 0x5267D8 VA: 0x5267D8
	|-Array.InternalArray__ICollection_Add<UIVertex>
	|
	|-RVA: 0x526888 Offset: 0x526888 VA: 0x526888
	|-Array.InternalArray__ICollection_Add<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x526924 Offset: 0x526924 VA: 0x526924
	|-Array.InternalArray__ICollection_Add<Vector2>
	|
	|-RVA: 0x5269C0 Offset: 0x5269C0 VA: 0x5269C0
	|-Array.InternalArray__ICollection_Add<Vector3>
	|
	|-RVA: 0x526A5C Offset: 0x526A5C VA: 0x526A5C
	|-Array.InternalArray__ICollection_Add<Vector4>
	|
	|-RVA: 0x526AF8 Offset: 0x526AF8 VA: 0x526AF8
	|-Array.InternalArray__ICollection_Add<jvalue>
	*/

	// RVA: -1 Offset: -1
	internal bool InternalArray__ICollection_Remove<T>(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3A6AD8 Offset: 0x3A6AD8 VA: 0x3A6AD8
	|-Array.InternalArray__ICollection_Remove<CodePointIndexer.TableRange>
	|
	|-RVA: 0x3A6B74 Offset: 0x3A6B74 VA: 0x3A6B74
	|-Array.InternalArray__ICollection_Remove<ClientCertificateType>
	|
	|-RVA: 0x3A6C10 Offset: 0x3A6C10 VA: 0x3A6C10
	|-Array.InternalArray__ICollection_Remove<bool>
	|
	|-RVA: 0x3A6CAC Offset: 0x3A6CAC VA: 0x3A6CAC
	|-Array.InternalArray__ICollection_Remove<byte>
	|
	|-RVA: 0x3A6D48 Offset: 0x3A6D48 VA: 0x3A6D48
	|-Array.InternalArray__ICollection_Remove<char>
	|
	|-RVA: 0x3A6DE4 Offset: 0x3A6DE4 VA: 0x3A6DE4
	|-Array.InternalArray__ICollection_Remove<DictionaryEntry>
	|
	|-RVA: 0x3A6E80 Offset: 0x3A6E80 VA: 0x3A6E80
	|-Array.InternalArray__ICollection_Remove<HashSet.Link<object>>
	|
	|-RVA: 0x3A6F1C Offset: 0x3A6F1C VA: 0x3A6F1C
	|-Array.InternalArray__ICollection_Remove<KeyValuePair<int, object>>
	|
	|-RVA: 0x3A6FB8 Offset: 0x3A6FB8 VA: 0x3A6FB8
	|-Array.InternalArray__ICollection_Remove<KeyValuePair<object, bool>>
	|
	|-RVA: 0x3A7054 Offset: 0x3A7054 VA: 0x3A7054
	|-Array.InternalArray__ICollection_Remove<KeyValuePair<object, int>>
	|
	|-RVA: 0x3A70F0 Offset: 0x3A70F0 VA: 0x3A70F0
	|-Array.InternalArray__ICollection_Remove<KeyValuePair<object, object>>
	|
	|-RVA: 0x3A718C Offset: 0x3A718C VA: 0x3A718C
	|-Array.InternalArray__ICollection_Remove<Link>
	|
	|-RVA: 0x3A7228 Offset: 0x3A7228 VA: 0x3A7228
	|-Array.InternalArray__ICollection_Remove<Hashtable.Slot>
	|
	|-RVA: 0x3A72C4 Offset: 0x3A72C4 VA: 0x3A72C4
	|-Array.InternalArray__ICollection_Remove<SortedList.Slot>
	|
	|-RVA: 0x3A7360 Offset: 0x3A7360 VA: 0x3A7360
	|-Array.InternalArray__ICollection_Remove<DateTime>
	|
	|-RVA: 0x3A73FC Offset: 0x3A73FC VA: 0x3A73FC
	|-Array.InternalArray__ICollection_Remove<Decimal>
	|
	|-RVA: 0x3A7498 Offset: 0x3A7498 VA: 0x3A7498
	|-Array.InternalArray__ICollection_Remove<double>
	|
	|-RVA: 0x3A7534 Offset: 0x3A7534 VA: 0x3A7534
	|-Array.InternalArray__ICollection_Remove<short>
	|
	|-RVA: 0x3A75D0 Offset: 0x3A75D0 VA: 0x3A75D0
	|-Array.InternalArray__ICollection_Remove<int>
	|
	|-RVA: 0x3A766C Offset: 0x3A766C VA: 0x3A766C
	|-Array.InternalArray__ICollection_Remove<long>
	|
	|-RVA: 0x3A7708 Offset: 0x3A7708 VA: 0x3A7708
	|-Array.InternalArray__ICollection_Remove<IntPtr>
	|
	|-RVA: 0x3A77A4 Offset: 0x3A77A4 VA: 0x3A77A4
	|-Array.InternalArray__ICollection_Remove<object>
	|
	|-RVA: 0x3A7840 Offset: 0x3A7840 VA: 0x3A7840
	|-Array.InternalArray__ICollection_Remove<CustomAttributeNamedArgument>
	|
	|-RVA: 0x3A78DC Offset: 0x3A78DC VA: 0x3A78DC
	|-Array.InternalArray__ICollection_Remove<CustomAttributeTypedArgument>
	|
	|-RVA: 0x3A7978 Offset: 0x3A7978 VA: 0x3A7978
	|-Array.InternalArray__ICollection_Remove<ILGenerator.LabelData>
	|
	|-RVA: 0x3A7A14 Offset: 0x3A7A14 VA: 0x3A7A14
	|-Array.InternalArray__ICollection_Remove<ILGenerator.LabelFixup>
	|
	|-RVA: 0x3A7AB0 Offset: 0x3A7AB0 VA: 0x3A7AB0
	|-Array.InternalArray__ICollection_Remove<ILTokenInfo>
	|
	|-RVA: 0x3A7B4C Offset: 0x3A7B4C VA: 0x3A7B4C
	|-Array.InternalArray__ICollection_Remove<MonoResource>
	|
	|-RVA: 0x3A7BE8 Offset: 0x3A7BE8 VA: 0x3A7BE8
	|-Array.InternalArray__ICollection_Remove<MonoWin32Resource>
	|
	|-RVA: 0x3A7C84 Offset: 0x3A7C84 VA: 0x3A7C84
	|-Array.InternalArray__ICollection_Remove<RefEmitPermissionSet>
	|
	|-RVA: 0x3A7D20 Offset: 0x3A7D20 VA: 0x3A7D20
	|-Array.InternalArray__ICollection_Remove<ParameterModifier>
	|
	|-RVA: 0x3A7DBC Offset: 0x3A7DBC VA: 0x3A7DBC
	|-Array.InternalArray__ICollection_Remove<ResourceReader.ResourceCacheItem>
	|
	|-RVA: 0x3A7E58 Offset: 0x3A7E58 VA: 0x3A7E58
	|-Array.InternalArray__ICollection_Remove<ResourceReader.ResourceInfo>
	|
	|-RVA: 0x3A7EF4 Offset: 0x3A7EF4 VA: 0x3A7EF4
	|-Array.InternalArray__ICollection_Remove<TypeTag>
	|
	|-RVA: 0x3A7F90 Offset: 0x3A7F90 VA: 0x3A7F90
	|-Array.InternalArray__ICollection_Remove<sbyte>
	|
	|-RVA: 0x3A802C Offset: 0x3A802C VA: 0x3A802C
	|-Array.InternalArray__ICollection_Remove<X509ChainStatus>
	|
	|-RVA: 0x3A80C8 Offset: 0x3A80C8 VA: 0x3A80C8
	|-Array.InternalArray__ICollection_Remove<float>
	|
	|-RVA: 0x3A8164 Offset: 0x3A8164 VA: 0x3A8164
	|-Array.InternalArray__ICollection_Remove<Mark>
	|
	|-RVA: 0x3A8200 Offset: 0x3A8200 VA: 0x3A8200
	|-Array.InternalArray__ICollection_Remove<TimeSpan>
	|
	|-RVA: 0x3A829C Offset: 0x3A829C VA: 0x3A829C
	|-Array.InternalArray__ICollection_Remove<ushort>
	|
	|-RVA: 0x3A8338 Offset: 0x3A8338 VA: 0x3A8338
	|-Array.InternalArray__ICollection_Remove<uint>
	|
	|-RVA: 0x3A83D4 Offset: 0x3A83D4 VA: 0x3A83D4
	|-Array.InternalArray__ICollection_Remove<ulong>
	|
	|-RVA: 0x3A8470 Offset: 0x3A8470 VA: 0x3A8470
	|-Array.InternalArray__ICollection_Remove<Uri.UriScheme>
	|
	|-RVA: 0x3A850C Offset: 0x3A850C VA: 0x3A850C
	|-Array.InternalArray__ICollection_Remove<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x3A85A8 Offset: 0x3A85A8 VA: 0x3A85A8
	|-Array.InternalArray__ICollection_Remove<Color32>
	|
	|-RVA: 0x3A8644 Offset: 0x3A8644 VA: 0x3A8644
	|-Array.InternalArray__ICollection_Remove<ContactPoint2D>
	|
	|-RVA: 0x3A86E0 Offset: 0x3A86E0 VA: 0x3A86E0
	|-Array.InternalArray__ICollection_Remove<ContactPoint>
	|
	|-RVA: 0x3A877C Offset: 0x3A877C VA: 0x3A877C
	|-Array.InternalArray__ICollection_Remove<RaycastResult>
	|
	|-RVA: 0x3A8818 Offset: 0x3A8818 VA: 0x3A8818
	|-Array.InternalArray__ICollection_Remove<PlayerLoopSystem>
	|
	|-RVA: 0x3A88B4 Offset: 0x3A88B4 VA: 0x3A88B4
	|-Array.InternalArray__ICollection_Remove<Keyframe>
	|
	|-RVA: 0x3A8950 Offset: 0x3A8950 VA: 0x3A8950
	|-Array.InternalArray__ICollection_Remove<PlayableBinding>
	|
	|-RVA: 0x3A89EC Offset: 0x3A89EC VA: 0x3A89EC
	|-Array.InternalArray__ICollection_Remove<RaycastHit2D>
	|
	|-RVA: 0x3A8A88 Offset: 0x3A8A88 VA: 0x3A8A88
	|-Array.InternalArray__ICollection_Remove<RaycastHit>
	|
	|-RVA: 0x3A8B24 Offset: 0x3A8B24 VA: 0x3A8B24
	|-Array.InternalArray__ICollection_Remove<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x3A8BC0 Offset: 0x3A8BC0 VA: 0x3A8BC0
	|-Array.InternalArray__ICollection_Remove<InputField.ContentType>
	|
	|-RVA: 0x3A8C5C Offset: 0x3A8C5C VA: 0x3A8C5C
	|-Array.InternalArray__ICollection_Remove<UICharInfo>
	|
	|-RVA: 0x3A8CF8 Offset: 0x3A8CF8 VA: 0x3A8CF8
	|-Array.InternalArray__ICollection_Remove<UILineInfo>
	|
	|-RVA: 0x3A8D94 Offset: 0x3A8D94 VA: 0x3A8D94
	|-Array.InternalArray__ICollection_Remove<UIVertex>
	|
	|-RVA: 0x3A8E44 Offset: 0x3A8E44 VA: 0x3A8E44
	|-Array.InternalArray__ICollection_Remove<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x3A8EE0 Offset: 0x3A8EE0 VA: 0x3A8EE0
	|-Array.InternalArray__ICollection_Remove<Vector2>
	|
	|-RVA: 0x3A8F7C Offset: 0x3A8F7C VA: 0x3A8F7C
	|-Array.InternalArray__ICollection_Remove<Vector3>
	|
	|-RVA: 0x3A9018 Offset: 0x3A9018 VA: 0x3A9018
	|-Array.InternalArray__ICollection_Remove<Vector4>
	|
	|-RVA: 0x3A90B4 Offset: 0x3A90B4 VA: 0x3A90B4
	|-Array.InternalArray__ICollection_Remove<jvalue>
	*/

	// RVA: -1 Offset: -1
	internal bool InternalArray__ICollection_Contains<T>(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x39E7C8 Offset: 0x39E7C8 VA: 0x39E7C8
	|-Array.InternalArray__ICollection_Contains<CodePointIndexer.TableRange>
	|
	|-RVA: 0x39EA38 Offset: 0x39EA38 VA: 0x39EA38
	|-Array.InternalArray__ICollection_Contains<ClientCertificateType>
	|
	|-RVA: 0x39EC54 Offset: 0x39EC54 VA: 0x39EC54
	|-Array.InternalArray__ICollection_Contains<bool>
	|
	|-RVA: 0x39EE00 Offset: 0x39EE00 VA: 0x39EE00
	|-Array.InternalArray__ICollection_Contains<byte>
	|
	|-RVA: 0x39EFAC Offset: 0x39EFAC VA: 0x39EFAC
	|-Array.InternalArray__ICollection_Contains<char>
	|
	|-RVA: 0x39F158 Offset: 0x39F158 VA: 0x39F158
	|-Array.InternalArray__ICollection_Contains<DictionaryEntry>
	|
	|-RVA: 0x39F38C Offset: 0x39F38C VA: 0x39F38C
	|-Array.InternalArray__ICollection_Contains<HashSet.Link<object>>
	|
	|-RVA: 0x39F5C0 Offset: 0x39F5C0 VA: 0x39F5C0
	|-Array.InternalArray__ICollection_Contains<KeyValuePair<int, object>>
	|
	|-RVA: 0x39F7F4 Offset: 0x39F7F4 VA: 0x39F7F4
	|-Array.InternalArray__ICollection_Contains<KeyValuePair<object, bool>>
	|
	|-RVA: 0x39FA28 Offset: 0x39FA28 VA: 0x39FA28
	|-Array.InternalArray__ICollection_Contains<KeyValuePair<object, int>>
	|
	|-RVA: 0x39FC5C Offset: 0x39FC5C VA: 0x39FC5C
	|-Array.InternalArray__ICollection_Contains<KeyValuePair<object, object>>
	|
	|-RVA: 0x39FE90 Offset: 0x39FE90 VA: 0x39FE90
	|-Array.InternalArray__ICollection_Contains<Link>
	|
	|-RVA: 0x3A00C4 Offset: 0x3A00C4 VA: 0x3A00C4
	|-Array.InternalArray__ICollection_Contains<Hashtable.Slot>
	|
	|-RVA: 0x3A02F8 Offset: 0x3A02F8 VA: 0x3A02F8
	|-Array.InternalArray__ICollection_Contains<SortedList.Slot>
	|
	|-RVA: 0x3A052C Offset: 0x3A052C VA: 0x3A052C
	|-Array.InternalArray__ICollection_Contains<DateTime>
	|
	|-RVA: 0x3A06F0 Offset: 0x3A06F0 VA: 0x3A06F0
	|-Array.InternalArray__ICollection_Contains<Decimal>
	|
	|-RVA: 0x3A08B0 Offset: 0x3A08B0 VA: 0x3A08B0
	|-Array.InternalArray__ICollection_Contains<double>
	|
	|-RVA: 0x3A0A68 Offset: 0x3A0A68 VA: 0x3A0A68
	|-Array.InternalArray__ICollection_Contains<short>
	|
	|-RVA: 0x3A0C14 Offset: 0x3A0C14 VA: 0x3A0C14
	|-Array.InternalArray__ICollection_Contains<int>
	|
	|-RVA: 0x3A0DC0 Offset: 0x3A0DC0 VA: 0x3A0DC0
	|-Array.InternalArray__ICollection_Contains<long>
	|
	|-RVA: 0x3A0F7C Offset: 0x3A0F7C VA: 0x3A0F7C
	|-Array.InternalArray__ICollection_Contains<IntPtr>
	|
	|-RVA: 0x3A1128 Offset: 0x3A1128 VA: 0x3A1128
	|-Array.InternalArray__ICollection_Contains<object>
	|
	|-RVA: 0x3A12C0 Offset: 0x3A12C0 VA: 0x3A12C0
	|-Array.InternalArray__ICollection_Contains<CustomAttributeNamedArgument>
	|
	|-RVA: 0x3A1488 Offset: 0x3A1488 VA: 0x3A1488
	|-Array.InternalArray__ICollection_Contains<CustomAttributeTypedArgument>
	|
	|-RVA: 0x3A1640 Offset: 0x3A1640 VA: 0x3A1640
	|-Array.InternalArray__ICollection_Contains<ILGenerator.LabelData>
	|
	|-RVA: 0x3A1874 Offset: 0x3A1874 VA: 0x3A1874
	|-Array.InternalArray__ICollection_Contains<ILGenerator.LabelFixup>
	|
	|-RVA: 0x3A1AA8 Offset: 0x3A1AA8 VA: 0x3A1AA8
	|-Array.InternalArray__ICollection_Contains<ILTokenInfo>
	|
	|-RVA: 0x3A1CDC Offset: 0x3A1CDC VA: 0x3A1CDC
	|-Array.InternalArray__ICollection_Contains<MonoResource>
	|
	|-RVA: 0x3A1F58 Offset: 0x3A1F58 VA: 0x3A1F58
	|-Array.InternalArray__ICollection_Contains<MonoWin32Resource>
	|
	|-RVA: 0x3A21A0 Offset: 0x3A21A0 VA: 0x3A21A0
	|-Array.InternalArray__ICollection_Contains<RefEmitPermissionSet>
	|
	|-RVA: 0x3A23D4 Offset: 0x3A23D4 VA: 0x3A23D4
	|-Array.InternalArray__ICollection_Contains<ParameterModifier>
	|
	|-RVA: 0x3A25F0 Offset: 0x3A25F0 VA: 0x3A25F0
	|-Array.InternalArray__ICollection_Contains<ResourceReader.ResourceCacheItem>
	|
	|-RVA: 0x3A2824 Offset: 0x3A2824 VA: 0x3A2824
	|-Array.InternalArray__ICollection_Contains<ResourceReader.ResourceInfo>
	|
	|-RVA: 0x3A2A70 Offset: 0x3A2A70 VA: 0x3A2A70
	|-Array.InternalArray__ICollection_Contains<TypeTag>
	|
	|-RVA: 0x3A2C8C Offset: 0x3A2C8C VA: 0x3A2C8C
	|-Array.InternalArray__ICollection_Contains<sbyte>
	|
	|-RVA: 0x3A2E38 Offset: 0x3A2E38 VA: 0x3A2E38
	|-Array.InternalArray__ICollection_Contains<X509ChainStatus>
	|
	|-RVA: 0x3A306C Offset: 0x3A306C VA: 0x3A306C
	|-Array.InternalArray__ICollection_Contains<float>
	|
	|-RVA: 0x3A3218 Offset: 0x3A3218 VA: 0x3A3218
	|-Array.InternalArray__ICollection_Contains<Mark>
	|
	|-RVA: 0x3A344C Offset: 0x3A344C VA: 0x3A344C
	|-Array.InternalArray__ICollection_Contains<TimeSpan>
	|
	|-RVA: 0x3A3608 Offset: 0x3A3608 VA: 0x3A3608
	|-Array.InternalArray__ICollection_Contains<ushort>
	|
	|-RVA: 0x3A37B4 Offset: 0x3A37B4 VA: 0x3A37B4
	|-Array.InternalArray__ICollection_Contains<uint>
	|
	|-RVA: 0x3A3960 Offset: 0x3A3960 VA: 0x3A3960
	|-Array.InternalArray__ICollection_Contains<ulong>
	|
	|-RVA: 0x3A3B1C Offset: 0x3A3B1C VA: 0x3A3B1C
	|-Array.InternalArray__ICollection_Contains<Uri.UriScheme>
	|
	|-RVA: 0x3A3D50 Offset: 0x3A3D50 VA: 0x3A3D50
	|-Array.InternalArray__ICollection_Contains<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x3A3F84 Offset: 0x3A3F84 VA: 0x3A3F84
	|-Array.InternalArray__ICollection_Contains<Color32>
	|
	|-RVA: 0x3A41A0 Offset: 0x3A41A0 VA: 0x3A41A0
	|-Array.InternalArray__ICollection_Contains<ContactPoint2D>
	|
	|-RVA: 0x3A445C Offset: 0x3A445C VA: 0x3A445C
	|-Array.InternalArray__ICollection_Contains<ContactPoint>
	|
	|-RVA: 0x3A46D8 Offset: 0x3A46D8 VA: 0x3A46D8
	|-Array.InternalArray__ICollection_Contains<RaycastResult>
	|
	|-RVA: 0x3A49C4 Offset: 0x3A49C4 VA: 0x3A49C4
	|-Array.InternalArray__ICollection_Contains<PlayerLoopSystem>
	|
	|-RVA: 0x3A4C34 Offset: 0x3A4C34 VA: 0x3A4C34
	|-Array.InternalArray__ICollection_Contains<Keyframe>
	|
	|-RVA: 0x3A4EC0 Offset: 0x3A4EC0 VA: 0x3A4EC0
	|-Array.InternalArray__ICollection_Contains<PlayableBinding>
	|
	|-RVA: 0x3A5108 Offset: 0x3A5108 VA: 0x3A5108
	|-Array.InternalArray__ICollection_Contains<RaycastHit2D>
	|
	|-RVA: 0x3A5384 Offset: 0x3A5384 VA: 0x3A5384
	|-Array.InternalArray__ICollection_Contains<RaycastHit>
	|
	|-RVA: 0x3A5630 Offset: 0x3A5630 VA: 0x3A5630
	|-Array.InternalArray__ICollection_Contains<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x3A5864 Offset: 0x3A5864 VA: 0x3A5864
	|-Array.InternalArray__ICollection_Contains<InputField.ContentType>
	|
	|-RVA: 0x3A5A80 Offset: 0x3A5A80 VA: 0x3A5A80
	|-Array.InternalArray__ICollection_Contains<UICharInfo>
	|
	|-RVA: 0x3A5CB4 Offset: 0x3A5CB4 VA: 0x3A5CB4
	|-Array.InternalArray__ICollection_Contains<UILineInfo>
	|
	|-RVA: 0x3A5EFC Offset: 0x3A5EFC VA: 0x3A5EFC
	|-Array.InternalArray__ICollection_Contains<UIVertex>
	|
	|-RVA: 0x3A6140 Offset: 0x3A6140 VA: 0x3A6140
	|-Array.InternalArray__ICollection_Contains<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x3A6374 Offset: 0x3A6374 VA: 0x3A6374
	|-Array.InternalArray__ICollection_Contains<Vector2>
	|
	|-RVA: 0x3A652C Offset: 0x3A652C VA: 0x3A652C
	|-Array.InternalArray__ICollection_Contains<Vector3>
	|
	|-RVA: 0x3A66F4 Offset: 0x3A66F4 VA: 0x3A66F4
	|-Array.InternalArray__ICollection_Contains<Vector4>
	|
	|-RVA: 0x3A68B4 Offset: 0x3A68B4 VA: 0x3A68B4
	|-Array.InternalArray__ICollection_Contains<jvalue>
	*/

	// RVA: -1 Offset: -1
	internal void InternalArray__ICollection_CopyTo<T>(T[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x526B94 Offset: 0x526B94 VA: 0x526B94
	|-Array.InternalArray__ICollection_CopyTo<CodePointIndexer.TableRange>
	|
	|-RVA: 0x526EA8 Offset: 0x526EA8 VA: 0x526EA8
	|-Array.InternalArray__ICollection_CopyTo<ClientCertificateType>
	|
	|-RVA: 0x5271BC Offset: 0x5271BC VA: 0x5271BC
	|-Array.InternalArray__ICollection_CopyTo<bool>
	|
	|-RVA: 0x5274D0 Offset: 0x5274D0 VA: 0x5274D0
	|-Array.InternalArray__ICollection_CopyTo<byte>
	|
	|-RVA: 0x5277E4 Offset: 0x5277E4 VA: 0x5277E4
	|-Array.InternalArray__ICollection_CopyTo<char>
	|
	|-RVA: 0x527AF8 Offset: 0x527AF8 VA: 0x527AF8
	|-Array.InternalArray__ICollection_CopyTo<DictionaryEntry>
	|
	|-RVA: 0x527E0C Offset: 0x527E0C VA: 0x527E0C
	|-Array.InternalArray__ICollection_CopyTo<HashSet.Link<object>>
	|
	|-RVA: 0x528120 Offset: 0x528120 VA: 0x528120
	|-Array.InternalArray__ICollection_CopyTo<KeyValuePair<int, object>>
	|
	|-RVA: 0x528434 Offset: 0x528434 VA: 0x528434
	|-Array.InternalArray__ICollection_CopyTo<KeyValuePair<object, bool>>
	|
	|-RVA: 0x528748 Offset: 0x528748 VA: 0x528748
	|-Array.InternalArray__ICollection_CopyTo<KeyValuePair<object, int>>
	|
	|-RVA: 0x528A5C Offset: 0x528A5C VA: 0x528A5C
	|-Array.InternalArray__ICollection_CopyTo<KeyValuePair<object, object>>
	|
	|-RVA: 0x528D70 Offset: 0x528D70 VA: 0x528D70
	|-Array.InternalArray__ICollection_CopyTo<Link>
	|
	|-RVA: 0x529084 Offset: 0x529084 VA: 0x529084
	|-Array.InternalArray__ICollection_CopyTo<Hashtable.Slot>
	|
	|-RVA: 0x529398 Offset: 0x529398 VA: 0x529398
	|-Array.InternalArray__ICollection_CopyTo<SortedList.Slot>
	|
	|-RVA: 0x5296AC Offset: 0x5296AC VA: 0x5296AC
	|-Array.InternalArray__ICollection_CopyTo<DateTime>
	|
	|-RVA: 0x5299C0 Offset: 0x5299C0 VA: 0x5299C0
	|-Array.InternalArray__ICollection_CopyTo<Decimal>
	|
	|-RVA: 0x529CD4 Offset: 0x529CD4 VA: 0x529CD4
	|-Array.InternalArray__ICollection_CopyTo<double>
	|
	|-RVA: 0x529FE8 Offset: 0x529FE8 VA: 0x529FE8
	|-Array.InternalArray__ICollection_CopyTo<short>
	|
	|-RVA: 0x52A2FC Offset: 0x52A2FC VA: 0x52A2FC
	|-Array.InternalArray__ICollection_CopyTo<int>
	|
	|-RVA: 0x52A610 Offset: 0x52A610 VA: 0x52A610
	|-Array.InternalArray__ICollection_CopyTo<long>
	|
	|-RVA: 0x52A924 Offset: 0x52A924 VA: 0x52A924
	|-Array.InternalArray__ICollection_CopyTo<IntPtr>
	|
	|-RVA: 0x52AC38 Offset: 0x52AC38 VA: 0x52AC38
	|-Array.InternalArray__ICollection_CopyTo<object>
	|
	|-RVA: 0x52AF4C Offset: 0x52AF4C VA: 0x52AF4C
	|-Array.InternalArray__ICollection_CopyTo<CustomAttributeNamedArgument>
	|
	|-RVA: 0x52B260 Offset: 0x52B260 VA: 0x52B260
	|-Array.InternalArray__ICollection_CopyTo<CustomAttributeTypedArgument>
	|
	|-RVA: 0x52B574 Offset: 0x52B574 VA: 0x52B574
	|-Array.InternalArray__ICollection_CopyTo<ILGenerator.LabelData>
	|
	|-RVA: 0x52B888 Offset: 0x52B888 VA: 0x52B888
	|-Array.InternalArray__ICollection_CopyTo<ILGenerator.LabelFixup>
	|
	|-RVA: 0x52BB9C Offset: 0x52BB9C VA: 0x52BB9C
	|-Array.InternalArray__ICollection_CopyTo<ILTokenInfo>
	|
	|-RVA: 0x52BEB0 Offset: 0x52BEB0 VA: 0x52BEB0
	|-Array.InternalArray__ICollection_CopyTo<MonoResource>
	|
	|-RVA: 0x52C1C4 Offset: 0x52C1C4 VA: 0x52C1C4
	|-Array.InternalArray__ICollection_CopyTo<MonoWin32Resource>
	|
	|-RVA: 0x52C4D8 Offset: 0x52C4D8 VA: 0x52C4D8
	|-Array.InternalArray__ICollection_CopyTo<RefEmitPermissionSet>
	|
	|-RVA: 0x52C7EC Offset: 0x52C7EC VA: 0x52C7EC
	|-Array.InternalArray__ICollection_CopyTo<ParameterModifier>
	|
	|-RVA: 0x52CB00 Offset: 0x52CB00 VA: 0x52CB00
	|-Array.InternalArray__ICollection_CopyTo<ResourceReader.ResourceCacheItem>
	|
	|-RVA: 0x52CE14 Offset: 0x52CE14 VA: 0x52CE14
	|-Array.InternalArray__ICollection_CopyTo<ResourceReader.ResourceInfo>
	|
	|-RVA: 0x52D128 Offset: 0x52D128 VA: 0x52D128
	|-Array.InternalArray__ICollection_CopyTo<TypeTag>
	|
	|-RVA: 0x52D43C Offset: 0x52D43C VA: 0x52D43C
	|-Array.InternalArray__ICollection_CopyTo<sbyte>
	|
	|-RVA: 0x52D750 Offset: 0x52D750 VA: 0x52D750
	|-Array.InternalArray__ICollection_CopyTo<X509ChainStatus>
	|
	|-RVA: 0x52DA64 Offset: 0x52DA64 VA: 0x52DA64
	|-Array.InternalArray__ICollection_CopyTo<float>
	|
	|-RVA: 0x52DD78 Offset: 0x52DD78 VA: 0x52DD78
	|-Array.InternalArray__ICollection_CopyTo<Mark>
	|
	|-RVA: 0x52E08C Offset: 0x52E08C VA: 0x52E08C
	|-Array.InternalArray__ICollection_CopyTo<TimeSpan>
	|
	|-RVA: 0x52E3A0 Offset: 0x52E3A0 VA: 0x52E3A0
	|-Array.InternalArray__ICollection_CopyTo<ushort>
	|
	|-RVA: 0x52E6B4 Offset: 0x52E6B4 VA: 0x52E6B4
	|-Array.InternalArray__ICollection_CopyTo<uint>
	|
	|-RVA: 0x52E9C8 Offset: 0x52E9C8 VA: 0x52E9C8
	|-Array.InternalArray__ICollection_CopyTo<ulong>
	|
	|-RVA: 0x52ECDC Offset: 0x52ECDC VA: 0x52ECDC
	|-Array.InternalArray__ICollection_CopyTo<Uri.UriScheme>
	|
	|-RVA: 0x52EFF0 Offset: 0x52EFF0 VA: 0x52EFF0
	|-Array.InternalArray__ICollection_CopyTo<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x52F304 Offset: 0x52F304 VA: 0x52F304
	|-Array.InternalArray__ICollection_CopyTo<Color32>
	|
	|-RVA: 0x52F618 Offset: 0x52F618 VA: 0x52F618
	|-Array.InternalArray__ICollection_CopyTo<ContactPoint2D>
	|
	|-RVA: 0x52F92C Offset: 0x52F92C VA: 0x52F92C
	|-Array.InternalArray__ICollection_CopyTo<ContactPoint>
	|
	|-RVA: 0x52FC40 Offset: 0x52FC40 VA: 0x52FC40
	|-Array.InternalArray__ICollection_CopyTo<RaycastResult>
	|
	|-RVA: 0x52FF54 Offset: 0x52FF54 VA: 0x52FF54
	|-Array.InternalArray__ICollection_CopyTo<PlayerLoopSystem>
	|
	|-RVA: 0x530268 Offset: 0x530268 VA: 0x530268
	|-Array.InternalArray__ICollection_CopyTo<Keyframe>
	|
	|-RVA: 0x53057C Offset: 0x53057C VA: 0x53057C
	|-Array.InternalArray__ICollection_CopyTo<PlayableBinding>
	|
	|-RVA: 0x530890 Offset: 0x530890 VA: 0x530890
	|-Array.InternalArray__ICollection_CopyTo<RaycastHit2D>
	|
	|-RVA: 0x530BA4 Offset: 0x530BA4 VA: 0x530BA4
	|-Array.InternalArray__ICollection_CopyTo<RaycastHit>
	|
	|-RVA: 0x530EB8 Offset: 0x530EB8 VA: 0x530EB8
	|-Array.InternalArray__ICollection_CopyTo<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x5311CC Offset: 0x5311CC VA: 0x5311CC
	|-Array.InternalArray__ICollection_CopyTo<InputField.ContentType>
	|
	|-RVA: 0x5314E0 Offset: 0x5314E0 VA: 0x5314E0
	|-Array.InternalArray__ICollection_CopyTo<UICharInfo>
	|
	|-RVA: 0x5317F4 Offset: 0x5317F4 VA: 0x5317F4
	|-Array.InternalArray__ICollection_CopyTo<UILineInfo>
	|
	|-RVA: 0x531B08 Offset: 0x531B08 VA: 0x531B08
	|-Array.InternalArray__ICollection_CopyTo<UIVertex>
	|
	|-RVA: 0x531E1C Offset: 0x531E1C VA: 0x531E1C
	|-Array.InternalArray__ICollection_CopyTo<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x532130 Offset: 0x532130 VA: 0x532130
	|-Array.InternalArray__ICollection_CopyTo<Vector2>
	|
	|-RVA: 0x532444 Offset: 0x532444 VA: 0x532444
	|-Array.InternalArray__ICollection_CopyTo<Vector3>
	|
	|-RVA: 0x532758 Offset: 0x532758 VA: 0x532758
	|-Array.InternalArray__ICollection_CopyTo<Vector4>
	|
	|-RVA: 0x532A6C Offset: 0x532A6C VA: 0x532A6C
	|-Array.InternalArray__ICollection_CopyTo<jvalue>
	*/

	// RVA: -1 Offset: -1
	internal void InternalArray__Insert<T>(int index, T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x532D80 Offset: 0x532D80 VA: 0x532D80
	|-Array.InternalArray__Insert<CodePointIndexer.TableRange>
	|
	|-RVA: 0x532E1C Offset: 0x532E1C VA: 0x532E1C
	|-Array.InternalArray__Insert<ClientCertificateType>
	|
	|-RVA: 0x532EB8 Offset: 0x532EB8 VA: 0x532EB8
	|-Array.InternalArray__Insert<bool>
	|
	|-RVA: 0x532F54 Offset: 0x532F54 VA: 0x532F54
	|-Array.InternalArray__Insert<byte>
	|
	|-RVA: 0x532FF0 Offset: 0x532FF0 VA: 0x532FF0
	|-Array.InternalArray__Insert<char>
	|
	|-RVA: 0x53308C Offset: 0x53308C VA: 0x53308C
	|-Array.InternalArray__Insert<DictionaryEntry>
	|
	|-RVA: 0x533128 Offset: 0x533128 VA: 0x533128
	|-Array.InternalArray__Insert<HashSet.Link<object>>
	|
	|-RVA: 0x5331C4 Offset: 0x5331C4 VA: 0x5331C4
	|-Array.InternalArray__Insert<KeyValuePair<int, object>>
	|
	|-RVA: 0x533260 Offset: 0x533260 VA: 0x533260
	|-Array.InternalArray__Insert<KeyValuePair<object, bool>>
	|
	|-RVA: 0x5332FC Offset: 0x5332FC VA: 0x5332FC
	|-Array.InternalArray__Insert<KeyValuePair<object, int>>
	|
	|-RVA: 0x533398 Offset: 0x533398 VA: 0x533398
	|-Array.InternalArray__Insert<KeyValuePair<object, object>>
	|
	|-RVA: 0x533434 Offset: 0x533434 VA: 0x533434
	|-Array.InternalArray__Insert<Link>
	|
	|-RVA: 0x5334D0 Offset: 0x5334D0 VA: 0x5334D0
	|-Array.InternalArray__Insert<Hashtable.Slot>
	|
	|-RVA: 0x53356C Offset: 0x53356C VA: 0x53356C
	|-Array.InternalArray__Insert<SortedList.Slot>
	|
	|-RVA: 0x533608 Offset: 0x533608 VA: 0x533608
	|-Array.InternalArray__Insert<DateTime>
	|
	|-RVA: 0x5336A4 Offset: 0x5336A4 VA: 0x5336A4
	|-Array.InternalArray__Insert<Decimal>
	|
	|-RVA: 0x533740 Offset: 0x533740 VA: 0x533740
	|-Array.InternalArray__Insert<double>
	|
	|-RVA: 0x5337DC Offset: 0x5337DC VA: 0x5337DC
	|-Array.InternalArray__Insert<short>
	|
	|-RVA: 0x533878 Offset: 0x533878 VA: 0x533878
	|-Array.InternalArray__Insert<int>
	|
	|-RVA: 0x533914 Offset: 0x533914 VA: 0x533914
	|-Array.InternalArray__Insert<long>
	|
	|-RVA: 0x5339B0 Offset: 0x5339B0 VA: 0x5339B0
	|-Array.InternalArray__Insert<IntPtr>
	|
	|-RVA: 0x533A4C Offset: 0x533A4C VA: 0x533A4C
	|-Array.InternalArray__Insert<object>
	|
	|-RVA: 0x533AE8 Offset: 0x533AE8 VA: 0x533AE8
	|-Array.InternalArray__Insert<CustomAttributeNamedArgument>
	|
	|-RVA: 0x533B84 Offset: 0x533B84 VA: 0x533B84
	|-Array.InternalArray__Insert<CustomAttributeTypedArgument>
	|
	|-RVA: 0x533C20 Offset: 0x533C20 VA: 0x533C20
	|-Array.InternalArray__Insert<ILGenerator.LabelData>
	|
	|-RVA: 0x533CBC Offset: 0x533CBC VA: 0x533CBC
	|-Array.InternalArray__Insert<ILGenerator.LabelFixup>
	|
	|-RVA: 0x533D58 Offset: 0x533D58 VA: 0x533D58
	|-Array.InternalArray__Insert<ILTokenInfo>
	|
	|-RVA: 0x533DF4 Offset: 0x533DF4 VA: 0x533DF4
	|-Array.InternalArray__Insert<MonoResource>
	|
	|-RVA: 0x533E90 Offset: 0x533E90 VA: 0x533E90
	|-Array.InternalArray__Insert<MonoWin32Resource>
	|
	|-RVA: 0x533F2C Offset: 0x533F2C VA: 0x533F2C
	|-Array.InternalArray__Insert<RefEmitPermissionSet>
	|
	|-RVA: 0x533FC8 Offset: 0x533FC8 VA: 0x533FC8
	|-Array.InternalArray__Insert<ParameterModifier>
	|
	|-RVA: 0x534064 Offset: 0x534064 VA: 0x534064
	|-Array.InternalArray__Insert<ResourceReader.ResourceCacheItem>
	|
	|-RVA: 0x534100 Offset: 0x534100 VA: 0x534100
	|-Array.InternalArray__Insert<ResourceReader.ResourceInfo>
	|
	|-RVA: 0x53419C Offset: 0x53419C VA: 0x53419C
	|-Array.InternalArray__Insert<TypeTag>
	|
	|-RVA: 0x534238 Offset: 0x534238 VA: 0x534238
	|-Array.InternalArray__Insert<sbyte>
	|
	|-RVA: 0x5342D4 Offset: 0x5342D4 VA: 0x5342D4
	|-Array.InternalArray__Insert<X509ChainStatus>
	|
	|-RVA: 0x534370 Offset: 0x534370 VA: 0x534370
	|-Array.InternalArray__Insert<float>
	|
	|-RVA: 0x53440C Offset: 0x53440C VA: 0x53440C
	|-Array.InternalArray__Insert<Mark>
	|
	|-RVA: 0x5344A8 Offset: 0x5344A8 VA: 0x5344A8
	|-Array.InternalArray__Insert<TimeSpan>
	|
	|-RVA: 0x534544 Offset: 0x534544 VA: 0x534544
	|-Array.InternalArray__Insert<ushort>
	|
	|-RVA: 0x5345E0 Offset: 0x5345E0 VA: 0x5345E0
	|-Array.InternalArray__Insert<uint>
	|
	|-RVA: 0x53467C Offset: 0x53467C VA: 0x53467C
	|-Array.InternalArray__Insert<ulong>
	|
	|-RVA: 0x534718 Offset: 0x534718 VA: 0x534718
	|-Array.InternalArray__Insert<Uri.UriScheme>
	|
	|-RVA: 0x5347B4 Offset: 0x5347B4 VA: 0x5347B4
	|-Array.InternalArray__Insert<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x534850 Offset: 0x534850 VA: 0x534850
	|-Array.InternalArray__Insert<Color32>
	|
	|-RVA: 0x5348EC Offset: 0x5348EC VA: 0x5348EC
	|-Array.InternalArray__Insert<ContactPoint2D>
	|
	|-RVA: 0x534988 Offset: 0x534988 VA: 0x534988
	|-Array.InternalArray__Insert<ContactPoint>
	|
	|-RVA: 0x534A24 Offset: 0x534A24 VA: 0x534A24
	|-Array.InternalArray__Insert<RaycastResult>
	|
	|-RVA: 0x4F4B88 Offset: 0x4F4B88 VA: 0x4F4B88
	|-Array.InternalArray__Insert<PlayerLoopSystem>
	|
	|-RVA: 0x4F4C24 Offset: 0x4F4C24 VA: 0x4F4C24
	|-Array.InternalArray__Insert<Keyframe>
	|
	|-RVA: 0x4F4CC0 Offset: 0x4F4CC0 VA: 0x4F4CC0
	|-Array.InternalArray__Insert<PlayableBinding>
	|
	|-RVA: 0x4F4D5C Offset: 0x4F4D5C VA: 0x4F4D5C
	|-Array.InternalArray__Insert<RaycastHit2D>
	|
	|-RVA: 0x4F4DF8 Offset: 0x4F4DF8 VA: 0x4F4DF8
	|-Array.InternalArray__Insert<RaycastHit>
	|
	|-RVA: 0x4F4E94 Offset: 0x4F4E94 VA: 0x4F4E94
	|-Array.InternalArray__Insert<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x4F4F30 Offset: 0x4F4F30 VA: 0x4F4F30
	|-Array.InternalArray__Insert<InputField.ContentType>
	|
	|-RVA: 0x4F4FCC Offset: 0x4F4FCC VA: 0x4F4FCC
	|-Array.InternalArray__Insert<UICharInfo>
	|
	|-RVA: 0x4F5068 Offset: 0x4F5068 VA: 0x4F5068
	|-Array.InternalArray__Insert<UILineInfo>
	|
	|-RVA: 0x4F5104 Offset: 0x4F5104 VA: 0x4F5104
	|-Array.InternalArray__Insert<UIVertex>
	|
	|-RVA: 0x4F51AC Offset: 0x4F51AC VA: 0x4F51AC
	|-Array.InternalArray__Insert<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x4F5248 Offset: 0x4F5248 VA: 0x4F5248
	|-Array.InternalArray__Insert<Vector2>
	|
	|-RVA: 0x4F52E4 Offset: 0x4F52E4 VA: 0x4F52E4
	|-Array.InternalArray__Insert<Vector3>
	|
	|-RVA: 0x4F5380 Offset: 0x4F5380 VA: 0x4F5380
	|-Array.InternalArray__Insert<Vector4>
	|
	|-RVA: 0x4F541C Offset: 0x4F541C VA: 0x4F541C
	|-Array.InternalArray__Insert<jvalue>
	*/

	// RVA: 0x2BCA00 Offset: 0x2BCA00 VA: 0x2BCA00
	internal void InternalArray__RemoveAt(int index) { }

	// RVA: -1 Offset: -1
	internal int InternalArray__IndexOf<T>(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x517250 Offset: 0x517250 VA: 0x517250
	|-Array.InternalArray__IndexOf<CodePointIndexer.TableRange>
	|
	|-RVA: 0x5174D8 Offset: 0x5174D8 VA: 0x5174D8
	|-Array.InternalArray__IndexOf<ClientCertificateType>
	|
	|-RVA: 0x517718 Offset: 0x517718 VA: 0x517718
	|-Array.InternalArray__IndexOf<bool>
	|
	|-RVA: 0x5178D8 Offset: 0x5178D8 VA: 0x5178D8
	|-Array.InternalArray__IndexOf<byte>
	|
	|-RVA: 0x517A98 Offset: 0x517A98 VA: 0x517A98
	|-Array.InternalArray__IndexOf<char>
	|
	|-RVA: 0x517C58 Offset: 0x517C58 VA: 0x517C58
	|-Array.InternalArray__IndexOf<DictionaryEntry>
	|
	|-RVA: 0x517EC0 Offset: 0x517EC0 VA: 0x517EC0
	|-Array.InternalArray__IndexOf<HashSet.Link<object>>
	|
	|-RVA: 0x518128 Offset: 0x518128 VA: 0x518128
	|-Array.InternalArray__IndexOf<KeyValuePair<int, object>>
	|
	|-RVA: 0x518390 Offset: 0x518390 VA: 0x518390
	|-Array.InternalArray__IndexOf<KeyValuePair<object, bool>>
	|
	|-RVA: 0x5185F8 Offset: 0x5185F8 VA: 0x5185F8
	|-Array.InternalArray__IndexOf<KeyValuePair<object, int>>
	|
	|-RVA: 0x518860 Offset: 0x518860 VA: 0x518860
	|-Array.InternalArray__IndexOf<KeyValuePair<object, object>>
	|
	|-RVA: 0x518AC8 Offset: 0x518AC8 VA: 0x518AC8
	|-Array.InternalArray__IndexOf<Link>
	|
	|-RVA: 0x518D30 Offset: 0x518D30 VA: 0x518D30
	|-Array.InternalArray__IndexOf<Hashtable.Slot>
	|
	|-RVA: 0x518F98 Offset: 0x518F98 VA: 0x518F98
	|-Array.InternalArray__IndexOf<SortedList.Slot>
	|
	|-RVA: 0x519200 Offset: 0x519200 VA: 0x519200
	|-Array.InternalArray__IndexOf<DateTime>
	|
	|-RVA: 0x5193E4 Offset: 0x5193E4 VA: 0x5193E4
	|-Array.InternalArray__IndexOf<Decimal>
	|
	|-RVA: 0x5195C0 Offset: 0x5195C0 VA: 0x5195C0
	|-Array.InternalArray__IndexOf<double>
	|
	|-RVA: 0x51979C Offset: 0x51979C VA: 0x51979C
	|-Array.InternalArray__IndexOf<short>
	|
	|-RVA: 0x51995C Offset: 0x51995C VA: 0x51995C
	|-Array.InternalArray__IndexOf<int>
	|
	|-RVA: 0x519B1C Offset: 0x519B1C VA: 0x519B1C
	|-Array.InternalArray__IndexOf<long>
	|
	|-RVA: 0x519CE8 Offset: 0x519CE8 VA: 0x519CE8
	|-Array.InternalArray__IndexOf<IntPtr>
	|
	|-RVA: 0x519EA8 Offset: 0x519EA8 VA: 0x519EA8
	|-Array.InternalArray__IndexOf<object>
	|
	|-RVA: 0x51A074 Offset: 0x51A074 VA: 0x51A074
	|-Array.InternalArray__IndexOf<CustomAttributeNamedArgument>
	|
	|-RVA: 0x51A24C Offset: 0x51A24C VA: 0x51A24C
	|-Array.InternalArray__IndexOf<CustomAttributeTypedArgument>
	|
	|-RVA: 0x51A418 Offset: 0x51A418 VA: 0x51A418
	|-Array.InternalArray__IndexOf<ILGenerator.LabelData>
	|
	|-RVA: 0x51A680 Offset: 0x51A680 VA: 0x51A680
	|-Array.InternalArray__IndexOf<ILGenerator.LabelFixup>
	|
	|-RVA: 0x51A8F0 Offset: 0x51A8F0 VA: 0x51A8F0
	|-Array.InternalArray__IndexOf<ILTokenInfo>
	|
	|-RVA: 0x51AB58 Offset: 0x51AB58 VA: 0x51AB58
	|-Array.InternalArray__IndexOf<MonoResource>
	|
	|-RVA: 0x51ADEC Offset: 0x51ADEC VA: 0x51ADEC
	|-Array.InternalArray__IndexOf<MonoWin32Resource>
	|
	|-RVA: 0x51B054 Offset: 0x51B054 VA: 0x51B054
	|-Array.InternalArray__IndexOf<RefEmitPermissionSet>
	|
	|-RVA: 0x51B2BC Offset: 0x51B2BC VA: 0x51B2BC
	|-Array.InternalArray__IndexOf<ParameterModifier>
	|
	|-RVA: 0x51B4FC Offset: 0x51B4FC VA: 0x51B4FC
	|-Array.InternalArray__IndexOf<ResourceReader.ResourceCacheItem>
	|
	|-RVA: 0x51B764 Offset: 0x51B764 VA: 0x51B764
	|-Array.InternalArray__IndexOf<ResourceReader.ResourceInfo>
	|
	|-RVA: 0x51B9E0 Offset: 0x51B9E0 VA: 0x51B9E0
	|-Array.InternalArray__IndexOf<TypeTag>
	|
	|-RVA: 0x51BC20 Offset: 0x51BC20 VA: 0x51BC20
	|-Array.InternalArray__IndexOf<sbyte>
	|
	|-RVA: 0x51BDE0 Offset: 0x51BDE0 VA: 0x51BDE0
	|-Array.InternalArray__IndexOf<X509ChainStatus>
	|
	|-RVA: 0x51C048 Offset: 0x51C048 VA: 0x51C048
	|-Array.InternalArray__IndexOf<float>
	|
	|-RVA: 0x51C218 Offset: 0x51C218 VA: 0x51C218
	|-Array.InternalArray__IndexOf<Mark>
	|
	|-RVA: 0x51C488 Offset: 0x51C488 VA: 0x51C488
	|-Array.InternalArray__IndexOf<TimeSpan>
	|
	|-RVA: 0x51C654 Offset: 0x51C654 VA: 0x51C654
	|-Array.InternalArray__IndexOf<ushort>
	|
	|-RVA: 0x51C814 Offset: 0x51C814 VA: 0x51C814
	|-Array.InternalArray__IndexOf<uint>
	|
	|-RVA: 0x51C9D4 Offset: 0x51C9D4 VA: 0x51C9D4
	|-Array.InternalArray__IndexOf<ulong>
	|
	|-RVA: 0x51CBA0 Offset: 0x51CBA0 VA: 0x51CBA0
	|-Array.InternalArray__IndexOf<Uri.UriScheme>
	|
	|-RVA: 0x51CE10 Offset: 0x51CE10 VA: 0x51CE10
	|-Array.InternalArray__IndexOf<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x51D078 Offset: 0x51D078 VA: 0x51D078
	|-Array.InternalArray__IndexOf<Color32>
	|
	|-RVA: 0x51D2B8 Offset: 0x51D2B8 VA: 0x51D2B8
	|-Array.InternalArray__IndexOf<ContactPoint2D>
	|
	|-RVA: 0x51D5A0 Offset: 0x51D5A0 VA: 0x51D5A0
	|-Array.InternalArray__IndexOf<ContactPoint>
	|
	|-RVA: 0x51D850 Offset: 0x51D850 VA: 0x51D850
	|-Array.InternalArray__IndexOf<RaycastResult>
	|
	|-RVA: 0x51DB44 Offset: 0x51DB44 VA: 0x51DB44
	|-Array.InternalArray__IndexOf<PlayerLoopSystem>
	|
	|-RVA: 0x51DDCC Offset: 0x51DDCC VA: 0x51DDCC
	|-Array.InternalArray__IndexOf<Keyframe>
	|
	|-RVA: 0x51E068 Offset: 0x51E068 VA: 0x51E068
	|-Array.InternalArray__IndexOf<PlayableBinding>
	|
	|-RVA: 0x51E2D0 Offset: 0x51E2D0 VA: 0x51E2D0
	|-Array.InternalArray__IndexOf<RaycastHit2D>
	|
	|-RVA: 0x51E580 Offset: 0x51E580 VA: 0x51E580
	|-Array.InternalArray__IndexOf<RaycastHit>
	|
	|-RVA: 0x51E840 Offset: 0x51E840 VA: 0x51E840
	|-Array.InternalArray__IndexOf<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x51EAA8 Offset: 0x51EAA8 VA: 0x51EAA8
	|-Array.InternalArray__IndexOf<InputField.ContentType>
	|
	|-RVA: 0x51ECE8 Offset: 0x51ECE8 VA: 0x51ECE8
	|-Array.InternalArray__IndexOf<UICharInfo>
	|
	|-RVA: 0x51EF58 Offset: 0x51EF58 VA: 0x51EF58
	|-Array.InternalArray__IndexOf<UILineInfo>
	|
	|-RVA: 0x51F1C0 Offset: 0x51F1C0 VA: 0x51F1C0
	|-Array.InternalArray__IndexOf<UIVertex>
	|
	|-RVA: 0x51F42C Offset: 0x51F42C VA: 0x51F42C
	|-Array.InternalArray__IndexOf<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x51F69C Offset: 0x51F69C VA: 0x51F69C
	|-Array.InternalArray__IndexOf<Vector2>
	|
	|-RVA: 0x51F868 Offset: 0x51F868 VA: 0x51F868
	|-Array.InternalArray__IndexOf<Vector3>
	|
	|-RVA: 0x51FA40 Offset: 0x51FA40 VA: 0x51FA40
	|-Array.InternalArray__IndexOf<Vector4>
	|
	|-RVA: 0x51FC1C Offset: 0x51FC1C VA: 0x51FC1C
	|-Array.InternalArray__IndexOf<jvalue>
	*/

	// RVA: -1 Offset: -1
	internal T InternalArray__get_Item<T>(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x514A90 Offset: 0x514A90 VA: 0x514A90
	|-Array.InternalArray__get_Item<CodePointIndexer.TableRange>
	|
	|-RVA: 0x514BB8 Offset: 0x514BB8 VA: 0x514BB8
	|-Array.InternalArray__get_Item<ClientCertificateType>
	|
	|-RVA: 0x514CC0 Offset: 0x514CC0 VA: 0x514CC0
	|-Array.InternalArray__get_Item<bool>
	|
	|-RVA: 0x514DD0 Offset: 0x514DD0 VA: 0x514DD0
	|-Array.InternalArray__get_Item<byte>
	|
	|-RVA: 0x514ED8 Offset: 0x514ED8 VA: 0x514ED8
	|-Array.InternalArray__get_Item<char>
	|
	|-RVA: 0x514FE0 Offset: 0x514FE0 VA: 0x514FE0
	|-Array.InternalArray__get_Item<DictionaryEntry>
	|
	|-RVA: 0x5B7F14 Offset: 0x5B7F14 VA: 0x5B7F14
	|-Array.InternalArray__get_Item<HashSet.Link<object>>
	|
	|-RVA: 0x5B8028 Offset: 0x5B8028 VA: 0x5B8028
	|-Array.InternalArray__get_Item<KeyValuePair<int, object>>
	|
	|-RVA: 0x5B813C Offset: 0x5B813C VA: 0x5B813C
	|-Array.InternalArray__get_Item<KeyValuePair<object, bool>>
	|
	|-RVA: 0x5B8250 Offset: 0x5B8250 VA: 0x5B8250
	|-Array.InternalArray__get_Item<KeyValuePair<object, int>>
	|
	|-RVA: 0x5B8364 Offset: 0x5B8364 VA: 0x5B8364
	|-Array.InternalArray__get_Item<KeyValuePair<object, object>>
	|
	|-RVA: 0x5B8478 Offset: 0x5B8478 VA: 0x5B8478
	|-Array.InternalArray__get_Item<Link>
	|
	|-RVA: 0x5B858C Offset: 0x5B858C VA: 0x5B858C
	|-Array.InternalArray__get_Item<Hashtable.Slot>
	|
	|-RVA: 0x5B86A0 Offset: 0x5B86A0 VA: 0x5B86A0
	|-Array.InternalArray__get_Item<SortedList.Slot>
	|
	|-RVA: 0x5B87B4 Offset: 0x5B87B4 VA: 0x5B87B4
	|-Array.InternalArray__get_Item<DateTime>
	|
	|-RVA: 0x5B88C8 Offset: 0x5B88C8 VA: 0x5B88C8
	|-Array.InternalArray__get_Item<Decimal>
	|
	|-RVA: 0x5B89DC Offset: 0x5B89DC VA: 0x5B89DC
	|-Array.InternalArray__get_Item<double>
	|
	|-RVA: 0x5B8AEC Offset: 0x5B8AEC VA: 0x5B8AEC
	|-Array.InternalArray__get_Item<short>
	|
	|-RVA: 0x5B8BF4 Offset: 0x5B8BF4 VA: 0x5B8BF4
	|-Array.InternalArray__get_Item<int>
	|
	|-RVA: 0x5B8CFC Offset: 0x5B8CFC VA: 0x5B8CFC
	|-Array.InternalArray__get_Item<long>
	|
	|-RVA: 0x5B8E08 Offset: 0x5B8E08 VA: 0x5B8E08
	|-Array.InternalArray__get_Item<IntPtr>
	|
	|-RVA: 0x5B8F10 Offset: 0x5B8F10 VA: 0x5B8F10
	|-Array.InternalArray__get_Item<object>
	|
	|-RVA: 0x5B9018 Offset: 0x5B9018 VA: 0x5B9018
	|-Array.InternalArray__get_Item<CustomAttributeNamedArgument>
	|
	|-RVA: 0x5B9138 Offset: 0x5B9138 VA: 0x5B9138
	|-Array.InternalArray__get_Item<CustomAttributeTypedArgument>
	|
	|-RVA: 0x5B924C Offset: 0x5B924C VA: 0x5B924C
	|-Array.InternalArray__get_Item<ILGenerator.LabelData>
	|
	|-RVA: 0x5B9360 Offset: 0x5B9360 VA: 0x5B9360
	|-Array.InternalArray__get_Item<ILGenerator.LabelFixup>
	|
	|-RVA: 0x5B9480 Offset: 0x5B9480 VA: 0x5B9480
	|-Array.InternalArray__get_Item<ILTokenInfo>
	|
	|-RVA: 0x5B9594 Offset: 0x5B9594 VA: 0x5B9594
	|-Array.InternalArray__get_Item<MonoResource>
	|
	|-RVA: 0x5B96C0 Offset: 0x5B96C0 VA: 0x5B96C0
	|-Array.InternalArray__get_Item<MonoWin32Resource>
	|
	|-RVA: 0x5B97D4 Offset: 0x5B97D4 VA: 0x5B97D4
	|-Array.InternalArray__get_Item<RefEmitPermissionSet>
	|
	|-RVA: 0x5B98E8 Offset: 0x5B98E8 VA: 0x5B98E8
	|-Array.InternalArray__get_Item<ParameterModifier>
	|
	|-RVA: 0x5B99F0 Offset: 0x5B99F0 VA: 0x5B99F0
	|-Array.InternalArray__get_Item<ResourceReader.ResourceCacheItem>
	|
	|-RVA: 0x5B9B04 Offset: 0x5B9B04 VA: 0x5B9B04
	|-Array.InternalArray__get_Item<ResourceReader.ResourceInfo>
	|
	|-RVA: 0x5B9C18 Offset: 0x5B9C18 VA: 0x5B9C18
	|-Array.InternalArray__get_Item<TypeTag>
	|
	|-RVA: 0x5B9D20 Offset: 0x5B9D20 VA: 0x5B9D20
	|-Array.InternalArray__get_Item<sbyte>
	|
	|-RVA: 0x5B9E28 Offset: 0x5B9E28 VA: 0x5B9E28
	|-Array.InternalArray__get_Item<X509ChainStatus>
	|
	|-RVA: 0x5B9F3C Offset: 0x5B9F3C VA: 0x5B9F3C
	|-Array.InternalArray__get_Item<float>
	|
	|-RVA: 0x5BA044 Offset: 0x5BA044 VA: 0x5BA044
	|-Array.InternalArray__get_Item<Mark>
	|
	|-RVA: 0x5BA164 Offset: 0x5BA164 VA: 0x5BA164
	|-Array.InternalArray__get_Item<TimeSpan>
	|
	|-RVA: 0x5BA278 Offset: 0x5BA278 VA: 0x5BA278
	|-Array.InternalArray__get_Item<ushort>
	|
	|-RVA: 0x5BA380 Offset: 0x5BA380 VA: 0x5BA380
	|-Array.InternalArray__get_Item<uint>
	|
	|-RVA: 0x5BA488 Offset: 0x5BA488 VA: 0x5BA488
	|-Array.InternalArray__get_Item<ulong>
	|
	|-RVA: 0x5BA594 Offset: 0x5BA594 VA: 0x5BA594
	|-Array.InternalArray__get_Item<Uri.UriScheme>
	|
	|-RVA: 0x5BA6B4 Offset: 0x5BA6B4 VA: 0x5BA6B4
	|-Array.InternalArray__get_Item<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x5BA7C8 Offset: 0x5BA7C8 VA: 0x5BA7C8
	|-Array.InternalArray__get_Item<Color32>
	|
	|-RVA: 0x5BA8D0 Offset: 0x5BA8D0 VA: 0x5BA8D0
	|-Array.InternalArray__get_Item<ContactPoint2D>
	|
	|-RVA: 0x5BAA10 Offset: 0x5BAA10 VA: 0x5BAA10
	|-Array.InternalArray__get_Item<ContactPoint>
	|
	|-RVA: 0x5BAB3C Offset: 0x5BAB3C VA: 0x5BAB3C
	|-Array.InternalArray__get_Item<RaycastResult>
	|
	|-RVA: 0x5BAC78 Offset: 0x5BAC78 VA: 0x5BAC78
	|-Array.InternalArray__get_Item<PlayerLoopSystem>
	|
	|-RVA: 0x5BADA0 Offset: 0x5BADA0 VA: 0x5BADA0
	|-Array.InternalArray__get_Item<Keyframe>
	|
	|-RVA: 0x5BAEC8 Offset: 0x5BAEC8 VA: 0x5BAEC8
	|-Array.InternalArray__get_Item<PlayableBinding>
	|
	|-RVA: 0x5BAFDC Offset: 0x5BAFDC VA: 0x5BAFDC
	|-Array.InternalArray__get_Item<RaycastHit2D>
	|
	|-RVA: 0x5BB108 Offset: 0x5BB108 VA: 0x5BB108
	|-Array.InternalArray__get_Item<RaycastHit>
	|
	|-RVA: 0x5BB234 Offset: 0x5BB234 VA: 0x5BB234
	|-Array.InternalArray__get_Item<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x5BB348 Offset: 0x5BB348 VA: 0x5BB348
	|-Array.InternalArray__get_Item<InputField.ContentType>
	|
	|-RVA: 0x5BB450 Offset: 0x5BB450 VA: 0x5BB450
	|-Array.InternalArray__get_Item<UICharInfo>
	|
	|-RVA: 0x5BB570 Offset: 0x5BB570 VA: 0x5BB570
	|-Array.InternalArray__get_Item<UILineInfo>
	|
	|-RVA: 0x5BB684 Offset: 0x5BB684 VA: 0x5BB684
	|-Array.InternalArray__get_Item<UIVertex>
	|
	|-RVA: 0x5BB7A4 Offset: 0x5BB7A4 VA: 0x5BB7A4
	|-Array.InternalArray__get_Item<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x5BB8C4 Offset: 0x5BB8C4 VA: 0x5BB8C4
	|-Array.InternalArray__get_Item<Vector2>
	|
	|-RVA: 0x5BB9D8 Offset: 0x5BB9D8 VA: 0x5BB9D8
	|-Array.InternalArray__get_Item<Vector3>
	|
	|-RVA: 0x5BBAF8 Offset: 0x5BBAF8 VA: 0x5BBAF8
	|-Array.InternalArray__get_Item<Vector4>
	|
	|-RVA: 0x5BBC0C Offset: 0x5BBC0C VA: 0x5BBC0C
	|-Array.InternalArray__get_Item<jvalue>
	*/

	// RVA: -1 Offset: -1
	internal void InternalArray__set_Item<T>(int index, T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4F54B8 Offset: 0x4F54B8 VA: 0x4F54B8
	|-Array.InternalArray__set_Item<CodePointIndexer.TableRange>
	|
	|-RVA: 0x4F5698 Offset: 0x4F5698 VA: 0x4F5698
	|-Array.InternalArray__set_Item<ClientCertificateType>
	|
	|-RVA: 0x4F584C Offset: 0x4F584C VA: 0x4F584C
	|-Array.InternalArray__set_Item<bool>
	|
	|-RVA: 0x4F5A00 Offset: 0x4F5A00 VA: 0x4F5A00
	|-Array.InternalArray__set_Item<byte>
	|
	|-RVA: 0x4F5BB4 Offset: 0x4F5BB4 VA: 0x4F5BB4
	|-Array.InternalArray__set_Item<char>
	|
	|-RVA: 0x4F5D68 Offset: 0x4F5D68 VA: 0x4F5D68
	|-Array.InternalArray__set_Item<DictionaryEntry>
	|
	|-RVA: 0x4F5F24 Offset: 0x4F5F24 VA: 0x4F5F24
	|-Array.InternalArray__set_Item<HashSet.Link<object>>
	|
	|-RVA: 0x4F60E0 Offset: 0x4F60E0 VA: 0x4F60E0
	|-Array.InternalArray__set_Item<KeyValuePair<int, object>>
	|
	|-RVA: 0x4F629C Offset: 0x4F629C VA: 0x4F629C
	|-Array.InternalArray__set_Item<KeyValuePair<object, bool>>
	|
	|-RVA: 0x4F6458 Offset: 0x4F6458 VA: 0x4F6458
	|-Array.InternalArray__set_Item<KeyValuePair<object, int>>
	|
	|-RVA: 0x4F6614 Offset: 0x4F6614 VA: 0x4F6614
	|-Array.InternalArray__set_Item<KeyValuePair<object, object>>
	|
	|-RVA: 0x4F67D0 Offset: 0x4F67D0 VA: 0x4F67D0
	|-Array.InternalArray__set_Item<Link>
	|
	|-RVA: 0x4F698C Offset: 0x4F698C VA: 0x4F698C
	|-Array.InternalArray__set_Item<Hashtable.Slot>
	|
	|-RVA: 0x4F6B48 Offset: 0x4F6B48 VA: 0x4F6B48
	|-Array.InternalArray__set_Item<SortedList.Slot>
	|
	|-RVA: 0x4F6D04 Offset: 0x4F6D04 VA: 0x4F6D04
	|-Array.InternalArray__set_Item<DateTime>
	|
	|-RVA: 0x4F6ED4 Offset: 0x4F6ED4 VA: 0x4F6ED4
	|-Array.InternalArray__set_Item<Decimal>
	|
	|-RVA: 0x4F70A4 Offset: 0x4F70A4 VA: 0x4F70A4
	|-Array.InternalArray__set_Item<double>
	|
	|-RVA: 0x4F7260 Offset: 0x4F7260 VA: 0x4F7260
	|-Array.InternalArray__set_Item<short>
	|
	|-RVA: 0x4F7414 Offset: 0x4F7414 VA: 0x4F7414
	|-Array.InternalArray__set_Item<int>
	|
	|-RVA: 0x4F75C8 Offset: 0x4F75C8 VA: 0x4F75C8
	|-Array.InternalArray__set_Item<long>
	|
	|-RVA: 0x4F7784 Offset: 0x4F7784 VA: 0x4F7784
	|-Array.InternalArray__set_Item<IntPtr>
	|
	|-RVA: 0x4F7938 Offset: 0x4F7938 VA: 0x4F7938
	|-Array.InternalArray__set_Item<object>
	|
	|-RVA: 0x4F7AB8 Offset: 0x4F7AB8 VA: 0x4F7AB8
	|-Array.InternalArray__set_Item<CustomAttributeNamedArgument>
	|
	|-RVA: 0x4F7C80 Offset: 0x4F7C80 VA: 0x4F7C80
	|-Array.InternalArray__set_Item<CustomAttributeTypedArgument>
	|
	|-RVA: 0x4F7E3C Offset: 0x4F7E3C VA: 0x4F7E3C
	|-Array.InternalArray__set_Item<ILGenerator.LabelData>
	|
	|-RVA: 0x4F7FF8 Offset: 0x4F7FF8 VA: 0x4F7FF8
	|-Array.InternalArray__set_Item<ILGenerator.LabelFixup>
	|
	|-RVA: 0x4F81C0 Offset: 0x4F81C0 VA: 0x4F81C0
	|-Array.InternalArray__set_Item<ILTokenInfo>
	|
	|-RVA: 0x4F837C Offset: 0x4F837C VA: 0x4F837C
	|-Array.InternalArray__set_Item<MonoResource>
	|
	|-RVA: 0x4F8564 Offset: 0x4F8564 VA: 0x4F8564
	|-Array.InternalArray__set_Item<MonoWin32Resource>
	|
	|-RVA: 0x4F8734 Offset: 0x4F8734 VA: 0x4F8734
	|-Array.InternalArray__set_Item<RefEmitPermissionSet>
	|
	|-RVA: 0x4F88F0 Offset: 0x4F88F0 VA: 0x4F88F0
	|-Array.InternalArray__set_Item<ParameterModifier>
	|
	|-RVA: 0x4F8AA4 Offset: 0x4F8AA4 VA: 0x4F8AA4
	|-Array.InternalArray__set_Item<ResourceReader.ResourceCacheItem>
	|
	|-RVA: 0x4F8C60 Offset: 0x4F8C60 VA: 0x4F8C60
	|-Array.InternalArray__set_Item<ResourceReader.ResourceInfo>
	|
	|-RVA: 0x4F8E30 Offset: 0x4F8E30 VA: 0x4F8E30
	|-Array.InternalArray__set_Item<TypeTag>
	|
	|-RVA: 0x4F8FE4 Offset: 0x4F8FE4 VA: 0x4F8FE4
	|-Array.InternalArray__set_Item<sbyte>
	|
	|-RVA: 0x4F9198 Offset: 0x4F9198 VA: 0x4F9198
	|-Array.InternalArray__set_Item<X509ChainStatus>
	|
	|-RVA: 0x4F9354 Offset: 0x4F9354 VA: 0x4F9354
	|-Array.InternalArray__set_Item<float>
	|
	|-RVA: 0x4F950C Offset: 0x4F950C VA: 0x4F950C
	|-Array.InternalArray__set_Item<Mark>
	|
	|-RVA: 0x4F96D4 Offset: 0x4F96D4 VA: 0x4F96D4
	|-Array.InternalArray__set_Item<TimeSpan>
	|
	|-RVA: 0x4F9890 Offset: 0x4F9890 VA: 0x4F9890
	|-Array.InternalArray__set_Item<ushort>
	|
	|-RVA: 0x4F9A44 Offset: 0x4F9A44 VA: 0x4F9A44
	|-Array.InternalArray__set_Item<uint>
	|
	|-RVA: 0x4F9BF8 Offset: 0x4F9BF8 VA: 0x4F9BF8
	|-Array.InternalArray__set_Item<ulong>
	|
	|-RVA: 0x4F9DB4 Offset: 0x4F9DB4 VA: 0x4F9DB4
	|-Array.InternalArray__set_Item<Uri.UriScheme>
	|
	|-RVA: 0x4F9F7C Offset: 0x4F9F7C VA: 0x4F9F7C
	|-Array.InternalArray__set_Item<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x4FA138 Offset: 0x4FA138 VA: 0x4FA138
	|-Array.InternalArray__set_Item<Color32>
	|
	|-RVA: 0x4FA2EC Offset: 0x4FA2EC VA: 0x4FA2EC
	|-Array.InternalArray__set_Item<ContactPoint2D>
	|
	|-RVA: 0x4FA510 Offset: 0x4FA510 VA: 0x4FA510
	|-Array.InternalArray__set_Item<ContactPoint>
	|
	|-RVA: 0x4FA708 Offset: 0x4FA708 VA: 0x4FA708
	|-Array.InternalArray__set_Item<RaycastResult>
	|
	|-RVA: 0x4FA944 Offset: 0x4FA944 VA: 0x4FA944
	|-Array.InternalArray__set_Item<PlayerLoopSystem>
	|
	|-RVA: 0x4FAB24 Offset: 0x4FAB24 VA: 0x4FAB24
	|-Array.InternalArray__set_Item<Keyframe>
	|
	|-RVA: 0x4FAD1C Offset: 0x4FAD1C VA: 0x4FAD1C
	|-Array.InternalArray__set_Item<PlayableBinding>
	|
	|-RVA: 0x4FAEEC Offset: 0x4FAEEC VA: 0x4FAEEC
	|-Array.InternalArray__set_Item<RaycastHit2D>
	|
	|-RVA: 0x4FB0E4 Offset: 0x4FB0E4 VA: 0x4FB0E4
	|-Array.InternalArray__set_Item<RaycastHit>
	|
	|-RVA: 0x4FB2F4 Offset: 0x4FB2F4 VA: 0x4FB2F4
	|-Array.InternalArray__set_Item<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x4FB4B0 Offset: 0x4FB4B0 VA: 0x4FB4B0
	|-Array.InternalArray__set_Item<InputField.ContentType>
	|
	|-RVA: 0x4FB664 Offset: 0x4FB664 VA: 0x4FB664
	|-Array.InternalArray__set_Item<UICharInfo>
	|
	|-RVA: 0x4FB82C Offset: 0x4FB82C VA: 0x4FB82C
	|-Array.InternalArray__set_Item<UILineInfo>
	|
	|-RVA: 0x4FB9FC Offset: 0x4FB9FC VA: 0x4FB9FC
	|-Array.InternalArray__set_Item<UIVertex>
	|
	|-RVA: 0x4FBBCC Offset: 0x4FBBCC VA: 0x4FBBCC
	|-Array.InternalArray__set_Item<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x4FBD94 Offset: 0x4FBD94 VA: 0x4FBD94
	|-Array.InternalArray__set_Item<Vector2>
	|
	|-RVA: 0x4FBF50 Offset: 0x4FBF50 VA: 0x4FBF50
	|-Array.InternalArray__set_Item<Vector3>
	|
	|-RVA: 0x4FC118 Offset: 0x4FC118 VA: 0x4FC118
	|-Array.InternalArray__set_Item<Vector4>
	|
	|-RVA: 0x4FC2E8 Offset: 0x4FC2E8 VA: 0x4FC2E8
	|-Array.InternalArray__set_Item<jvalue>
	*/

	// RVA: -1 Offset: -1
	internal void GetGenericValueImpl<T>(int pos, out T value) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-Array.GetGenericValueImpl<object>
	*/

	// RVA: -1 Offset: -1
	internal void SetGenericValueImpl<T>(int pos, ref T value) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-Array.SetGenericValueImpl<object>
	*/

	[ReliabilityContractAttribute] // RVA: 0x9BB8C Offset: 0x9BB8C VA: 0x9BB8C
	// RVA: 0x2BC330 Offset: 0x2BC330 VA: 0x2BC330
	public int get_Length() { }

	[ReliabilityContractAttribute] // RVA: 0x9BBA4 Offset: 0x9BBA4 VA: 0x9BBA4
	// RVA: 0x2BCAA0 Offset: 0x2BCAA0 VA: 0x2BCAA0
	public long get_LongLength() { }

	[ReliabilityContractAttribute] // RVA: 0x9BBBC Offset: 0x9BBBC VA: 0x9BBBC
	// RVA: 0x2BC388 Offset: 0x2BC388 VA: 0x2BC388
	public int get_Rank() { }

	// RVA: 0x2BCAB4 Offset: 0x2BCAB4 VA: 0x2BCAB4
	private int GetRank() { }

	// RVA: 0x2BCA9C Offset: 0x2BCA9C VA: 0x2BCA9C
	public int GetLength(int dimension) { }

	[ComVisibleAttribute] // RVA: 0x9BBD4 Offset: 0x9BBD4 VA: 0x9BBD4
	// RVA: 0x2BCAB8 Offset: 0x2BCAB8 VA: 0x2BCAB8
	public long GetLongLength(int dimension) { }

	[ReliabilityContractAttribute] // RVA: 0x9BBE8 Offset: 0x9BBE8 VA: 0x9BBE8
	// RVA: 0x2BC580 Offset: 0x2BC580 VA: 0x2BC580
	public int GetLowerBound(int dimension) { }

	// RVA: 0x2BCACC Offset: 0x2BCACC VA: 0x2BCACC
	public object GetValue(int[] indices) { }

	// RVA: 0x2BCAD0 Offset: 0x2BCAD0 VA: 0x2BCAD0
	public void SetValue(object value, int[] indices) { }

	// RVA: 0x2BC38C Offset: 0x2BC38C VA: 0x2BC38C
	internal object GetValueImpl(int pos) { }

	// RVA: 0x2BC4C0 Offset: 0x2BC4C0 VA: 0x2BC4C0
	internal void SetValueImpl(object value, int pos) { }

	// RVA: 0x2BCAD4 Offset: 0x2BCAD4 VA: 0x2BCAD4
	internal static bool FastCopy(Array source, int source_idx, Array dest, int dest_idx, int length) { }

	// RVA: 0x2BCAD8 Offset: 0x2BCAD8 VA: 0x2BCAD8
	internal static Array CreateInstanceImpl(Type elementType, int[] lengths, int[] bounds) { }

	// RVA: 0x2BCADC Offset: 0x2BCADC VA: 0x2BCADC Slot: 7
	public bool get_IsSynchronized() { }

	// RVA: 0x2BCAE4 Offset: 0x2BCAE4 VA: 0x2BCAE4 Slot: 8
	public object get_SyncRoot() { }

	// RVA: 0x2BCAE8 Offset: 0x2BCAE8 VA: 0x2BCAE8 Slot: 10
	public bool get_IsFixedSize() { }

	// RVA: 0x2BCAF0 Offset: 0x2BCAF0 VA: 0x2BCAF0 Slot: 11
	public bool get_IsReadOnly() { }

	// RVA: 0x2BCAF8 Offset: 0x2BCAF8 VA: 0x2BCAF8 Slot: 4
	public IEnumerator GetEnumerator() { }

	[ReliabilityContractAttribute] // RVA: 0x9BC00 Offset: 0x9BC00 VA: 0x9BC00
	// RVA: 0x2BCB6C Offset: 0x2BCB6C VA: 0x2BCB6C
	public int GetUpperBound(int dimension) { }

	// RVA: 0x2BCB9C Offset: 0x2BCB9C VA: 0x2BCB9C
	public object GetValue(int index) { }

	// RVA: 0x2BCD04 Offset: 0x2BCD04 VA: 0x2BCD04
	public object GetValue(int index1, int index2) { }

	// RVA: 0x2BCDD0 Offset: 0x2BCDD0 VA: 0x2BCDD0
	public object GetValue(int index1, int index2, int index3) { }

	[ComVisibleAttribute] // RVA: 0x9BC18 Offset: 0x9BC18 VA: 0x9BC18
	// RVA: 0x2BCEC0 Offset: 0x2BCEC0 VA: 0x2BCEC0
	public object GetValue(long index) { }

	[ComVisibleAttribute] // RVA: 0x9BC2C Offset: 0x9BC2C VA: 0x9BC2C
	// RVA: 0x2BCFA0 Offset: 0x2BCFA0 VA: 0x2BCFA0
	public object GetValue(long index1, long index2) { }

	[ComVisibleAttribute] // RVA: 0x9BC40 Offset: 0x9BC40 VA: 0x9BC40
	// RVA: 0x2BD0F8 Offset: 0x2BD0F8 VA: 0x2BD0F8
	public object GetValue(long index1, long index2, long index3) { }

	[ComVisibleAttribute] // RVA: 0x9BC54 Offset: 0x9BC54 VA: 0x9BC54
	// RVA: 0x2BD2C8 Offset: 0x2BD2C8 VA: 0x2BD2C8
	public void SetValue(object value, long index) { }

	[ComVisibleAttribute] // RVA: 0x9BC68 Offset: 0x9BC68 VA: 0x9BC68
	// RVA: 0x2BD520 Offset: 0x2BD520 VA: 0x2BD520
	public void SetValue(object value, long index1, long index2) { }

	[ComVisibleAttribute] // RVA: 0x9BC7C Offset: 0x9BC7C VA: 0x9BC7C
	// RVA: 0x2BD6E8 Offset: 0x2BD6E8 VA: 0x2BD6E8
	public void SetValue(object value, long index1, long index2, long index3) { }

	// RVA: 0x2BD3B0 Offset: 0x2BD3B0 VA: 0x2BD3B0
	public void SetValue(object value, int index) { }

	// RVA: 0x2BD948 Offset: 0x2BD948 VA: 0x2BD948
	public void SetValue(object value, int index1, int index2) { }

	// RVA: 0x2BDA1C Offset: 0x2BDA1C VA: 0x2BDA1C
	public void SetValue(object value, int index1, int index2, int index3) { }

	// RVA: 0x2BDB14 Offset: 0x2BDB14 VA: 0x2BDB14
	public static Array CreateInstance(Type elementType, int length) { }

	// RVA: 0x2BDEB0 Offset: 0x2BDEB0 VA: 0x2BDEB0
	public static Array CreateInstance(Type elementType, int length1, int length2) { }

	// RVA: 0x2BDF7C Offset: 0x2BDF7C VA: 0x2BDF7C
	public static Array CreateInstance(Type elementType, int length1, int length2, int length3) { }

	// RVA: 0x2BDBBC Offset: 0x2BDBBC VA: 0x2BDBBC
	public static Array CreateInstance(Type elementType, int[] lengths) { }

	// RVA: 0x2BE06C Offset: 0x2BE06C VA: 0x2BE06C
	public static Array CreateInstance(Type elementType, int[] lengths, int[] lowerBounds) { }

	// RVA: 0x2BE5C4 Offset: 0x2BE5C4 VA: 0x2BE5C4
	private static int[] GetIntArray(long[] values) { }

	// RVA: 0x2BE744 Offset: 0x2BE744 VA: 0x2BE744
	public static Array CreateInstance(Type elementType, long[] lengths) { }

	[ComVisibleAttribute] // RVA: 0x9BC90 Offset: 0x9BC90 VA: 0x9BC90
	// RVA: 0x2BE804 Offset: 0x2BE804 VA: 0x2BE804
	public object GetValue(long[] indices) { }

	[ComVisibleAttribute] // RVA: 0x9BCA4 Offset: 0x9BCA4 VA: 0x9BCA4
	// RVA: 0x2BE8C4 Offset: 0x2BE8C4 VA: 0x2BE8C4
	public void SetValue(object value, long[] indices) { }

	[ReliabilityContractAttribute] // RVA: 0x9BCB8 Offset: 0x9BCB8 VA: 0x9BCB8
	// RVA: 0x2BE98C Offset: 0x2BE98C VA: 0x2BE98C
	public static int BinarySearch(Array array, object value) { }

	[ReliabilityContractAttribute] // RVA: 0x9BCD0 Offset: 0x9BCD0 VA: 0x9BCD0
	// RVA: 0x2BEE30 Offset: 0x2BEE30 VA: 0x2BEE30
	public static int BinarySearch(Array array, object value, IComparer comparer) { }

	[ReliabilityContractAttribute] // RVA: 0x9BCE8 Offset: 0x9BCE8 VA: 0x9BCE8
	// RVA: 0x2BF01C Offset: 0x2BF01C VA: 0x2BF01C
	public static int BinarySearch(Array array, int index, int length, object value) { }

	[ReliabilityContractAttribute] // RVA: 0x9BD00 Offset: 0x9BD00 VA: 0x9BD00
	// RVA: 0x2BF340 Offset: 0x2BF340 VA: 0x2BF340
	public static int BinarySearch(Array array, int index, int length, object value, IComparer comparer) { }

	// RVA: 0x2BEB70 Offset: 0x2BEB70 VA: 0x2BEB70
	private static int DoBinarySearch(Array array, int index, int length, object value, IComparer comparer) { }

	[ReliabilityContractAttribute] // RVA: 0x9BD18 Offset: 0x9BD18 VA: 0x9BD18
	// RVA: 0x2A3B74 Offset: 0x2A3B74 VA: 0x2A3B74
	public static void Clear(Array array, int index, int length) { }

	// RVA: 0x2BF66C Offset: 0x2BF66C VA: 0x2BF66C
	private static void ClearInternal(Array a, int index, int count) { }

	// RVA: 0x29FEFC Offset: 0x29FEFC VA: 0x29FEFC Slot: 5
	public object Clone() { }

	[ReliabilityContractAttribute] // RVA: 0x9BD30 Offset: 0x9BD30 VA: 0x9BD30
	// RVA: 0x2B7780 Offset: 0x2B7780 VA: 0x2B7780
	public static void Copy(Array sourceArray, Array destinationArray, int length) { }

	[ReliabilityContractAttribute] // RVA: 0x9BD48 Offset: 0x9BD48 VA: 0x9BD48
	// RVA: 0x2BF670 Offset: 0x2BF670 VA: 0x2BF670
	public static void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length) { }

	[ReliabilityContractAttribute] // RVA: 0x9BD60 Offset: 0x9BD60 VA: 0x9BD60
	// RVA: 0x2BFF58 Offset: 0x2BFF58 VA: 0x2BFF58
	public static void Copy(Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length) { }

	[ReliabilityContractAttribute] // RVA: 0x9BD78 Offset: 0x9BD78 VA: 0x9BD78
	// RVA: 0x2C01C8 Offset: 0x2C01C8 VA: 0x2C01C8
	public static void Copy(Array sourceArray, Array destinationArray, long length) { }

	[ReliabilityContractAttribute] // RVA: 0x9BD90 Offset: 0x9BD90 VA: 0x9BD90
	// RVA: 0x2C02B0 Offset: 0x2C02B0 VA: 0x2C02B0
	public static int IndexOf(Array array, object value) { }

	[ReliabilityContractAttribute] // RVA: 0x9BDA8 Offset: 0x9BDA8 VA: 0x9BDA8
	// RVA: 0x2C0564 Offset: 0x2C0564 VA: 0x2C0564
	public static int IndexOf(Array array, object value, int startIndex) { }

	[ReliabilityContractAttribute] // RVA: 0x9BDC0 Offset: 0x9BDC0 VA: 0x9BDC0
	// RVA: 0x2C0380 Offset: 0x2C0380 VA: 0x2C0380
	public static int IndexOf(Array array, object value, int startIndex, int count) { }

	// RVA: 0x2C0638 Offset: 0x2C0638 VA: 0x2C0638
	public void Initialize() { }

	[ReliabilityContractAttribute] // RVA: 0x9BDD8 Offset: 0x9BDD8 VA: 0x9BDD8
	// RVA: 0x2C063C Offset: 0x2C063C VA: 0x2C063C
	public static int LastIndexOf(Array array, object value) { }

	[ReliabilityContractAttribute] // RVA: 0x9BDF0 Offset: 0x9BDF0 VA: 0x9BDF0
	// RVA: 0x2C0724 Offset: 0x2C0724 VA: 0x2C0724
	public static int LastIndexOf(Array array, object value, int startIndex) { }

	[ReliabilityContractAttribute] // RVA: 0x9BE08 Offset: 0x9BE08 VA: 0x9BE08
	// RVA: 0x2C0800 Offset: 0x2C0800 VA: 0x2C0800
	public static int LastIndexOf(Array array, object value, int startIndex, int count) { }

	// RVA: 0x2C09EC Offset: 0x2C09EC VA: 0x2C09EC
	private static Array.Swapper get_swapper(Array array) { }

	// RVA: -1 Offset: -1
	private static Array.Swapper get_swapper<T>(T[] array) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x39D828 Offset: 0x39D828 VA: 0x39D828
	|-Array.get_swapper<int>
	|
	|-RVA: 0x39D92C Offset: 0x39D92C VA: 0x39D92C
	|-Array.get_swapper<object>
	|
	|-RVA: 0x39DA30 Offset: 0x39DA30 VA: 0x39DA30
	|-Array.get_swapper<CustomAttributeNamedArgument>
	|
	|-RVA: 0x39DB34 Offset: 0x39DB34 VA: 0x39DB34
	|-Array.get_swapper<CustomAttributeTypedArgument>
	|
	|-RVA: 0x39DC38 Offset: 0x39DC38 VA: 0x39DC38
	|-Array.get_swapper<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x39DD3C Offset: 0x39DD3C VA: 0x39DD3C
	|-Array.get_swapper<Color32>
	|
	|-RVA: 0x39DE40 Offset: 0x39DE40 VA: 0x39DE40
	|-Array.get_swapper<RaycastResult>
	|
	|-RVA: 0x39DF44 Offset: 0x39DF44 VA: 0x39DF44
	|-Array.get_swapper<UICharInfo>
	|
	|-RVA: 0x39E048 Offset: 0x39E048 VA: 0x39E048
	|-Array.get_swapper<UILineInfo>
	|
	|-RVA: 0x39E14C Offset: 0x39E14C VA: 0x39E14C
	|-Array.get_swapper<UIVertex>
	|
	|-RVA: 0x39E250 Offset: 0x39E250 VA: 0x39E250
	|-Array.get_swapper<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x39E354 Offset: 0x39E354 VA: 0x39E354
	|-Array.get_swapper<Vector2>
	|
	|-RVA: 0x39E458 Offset: 0x39E458 VA: 0x39E458
	|-Array.get_swapper<Vector3>
	|
	|-RVA: 0x39E55C Offset: 0x39E55C VA: 0x39E55C
	|-Array.get_swapper<Vector4>
	*/

	[ReliabilityContractAttribute] // RVA: 0x9BE20 Offset: 0x9BE20 VA: 0x9BE20
	// RVA: 0x2C0B38 Offset: 0x2C0B38 VA: 0x2C0B38
	public static void Reverse(Array array) { }

	[ReliabilityContractAttribute] // RVA: 0x9BE38 Offset: 0x9BE38 VA: 0x9BE38
	// RVA: 0x2A76FC Offset: 0x2A76FC VA: 0x2A76FC
	public static void Reverse(Array array, int index, int length) { }

	[ReliabilityContractAttribute] // RVA: 0x9BE50 Offset: 0x9BE50 VA: 0x9BE50
	// RVA: 0x2C0C0C Offset: 0x2C0C0C VA: 0x2C0C0C
	public static void Sort(Array array) { }

	[ReliabilityContractAttribute] // RVA: 0x9BE68 Offset: 0x9BE68 VA: 0x9BE68
	// RVA: 0x2C11BC Offset: 0x2C11BC VA: 0x2C11BC
	public static void Sort(Array keys, Array items) { }

	[ReliabilityContractAttribute] // RVA: 0x9BE80 Offset: 0x9BE80 VA: 0x9BE80
	// RVA: 0x2C12A8 Offset: 0x2C12A8 VA: 0x2C12A8
	public static void Sort(Array array, IComparer comparer) { }

	[ReliabilityContractAttribute] // RVA: 0x9BE98 Offset: 0x9BE98 VA: 0x9BE98
	// RVA: 0x2C1390 Offset: 0x2C1390 VA: 0x2C1390
	public static void Sort(Array array, int index, int length) { }

	[ReliabilityContractAttribute] // RVA: 0x9BEB0 Offset: 0x9BEB0 VA: 0x9BEB0
	// RVA: 0x2C13BC Offset: 0x2C13BC VA: 0x2C13BC
	public static void Sort(Array keys, Array items, IComparer comparer) { }

	[ReliabilityContractAttribute] // RVA: 0x9BEC8 Offset: 0x9BEC8 VA: 0x9BEC8
	// RVA: 0x2C14A8 Offset: 0x2C14A8 VA: 0x2C14A8
	public static void Sort(Array keys, Array items, int index, int length) { }

	[ReliabilityContractAttribute] // RVA: 0x9BEE0 Offset: 0x9BEE0 VA: 0x9BEE0
	// RVA: 0x2C14C8 Offset: 0x2C14C8 VA: 0x2C14C8
	public static void Sort(Array array, int index, int length, IComparer comparer) { }

	[ReliabilityContractAttribute] // RVA: 0x9BEF8 Offset: 0x9BEF8 VA: 0x9BEF8
	// RVA: 0x2C0CF4 Offset: 0x2C0CF4 VA: 0x2C0CF4
	public static void Sort(Array keys, Array items, int index, int length, IComparer comparer) { }

	// RVA: 0x2C1C80 Offset: 0x2C1C80 VA: 0x2C1C80
	private void int_swapper(int i, int j) { }

	// RVA: 0x2C1D90 Offset: 0x2C1D90 VA: 0x2C1D90
	private void obj_swapper(int i, int j) { }

	// RVA: 0x2C1F00 Offset: 0x2C1F00 VA: 0x2C1F00
	private void slow_swapper(int i, int j) { }

	// RVA: 0x2C1F4C Offset: 0x2C1F4C VA: 0x2C1F4C
	private void double_swapper(int i, int j) { }

	// RVA: 0x2C2064 Offset: 0x2C2064 VA: 0x2C2064
	private static int new_gap(int gap) { }

	// RVA: 0x2C14F4 Offset: 0x2C14F4 VA: 0x2C14F4
	private static void combsort(double[] array, int start, int size, Array.Swapper swap_items) { }

	// RVA: 0x2C16F4 Offset: 0x2C16F4 VA: 0x2C16F4
	private static void combsort(int[] array, int start, int size, Array.Swapper swap_items) { }

	// RVA: 0x2C1914 Offset: 0x2C1914 VA: 0x2C1914
	private static void combsort(char[] array, int start, int size, Array.Swapper swap_items) { }

	// RVA: 0x2C1B10 Offset: 0x2C1B10 VA: 0x2C1B10
	private static void qsort(Array keys, Array items, int low0, int high0, IComparer comparer) { }

	// RVA: 0x2C232C Offset: 0x2C232C VA: 0x2C232C
	private static void swap(Array keys, Array items, int i, int j) { }

	// RVA: 0x2C20B0 Offset: 0x2C20B0 VA: 0x2C20B0
	private static int compare(object value1, object value2, IComparer comparer) { }

	[ReliabilityContractAttribute] // RVA: 0x9BF10 Offset: 0x9BF10 VA: 0x9BF10
	// RVA: -1 Offset: -1
	public static void Sort<T>(T[] array) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4FE638 Offset: 0x4FE638 VA: 0x4FE638
	|-Array.Sort<object>
	*/

	[ReliabilityContractAttribute] // RVA: 0x9BF28 Offset: 0x9BF28 VA: 0x9BF28
	// RVA: -1 Offset: -1
	public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4FE020 Offset: 0x4FE020 VA: 0x4FE020
	|-Array.Sort<object, object>
	*/

	[ReliabilityContractAttribute] // RVA: 0x9BF40 Offset: 0x9BF40 VA: 0x9BF40
	// RVA: -1 Offset: -1
	public static void Sort<T>(T[] array, IComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4FE71C Offset: 0x4FE71C VA: 0x4FE71C
	|-Array.Sort<object>
	*/

	[ReliabilityContractAttribute] // RVA: 0x9BF58 Offset: 0x9BF58 VA: 0x9BF58
	// RVA: -1 Offset: -1
	public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, IComparer<TKey> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4FE108 Offset: 0x4FE108 VA: 0x4FE108
	|-Array.Sort<object, object>
	*/

	[ReliabilityContractAttribute] // RVA: 0x9BF70 Offset: 0x9BF70 VA: 0x9BF70
	// RVA: -1 Offset: -1
	public static void Sort<T>(T[] array, int index, int length) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4FEAB8 Offset: 0x4FEAB8 VA: 0x4FEAB8
	|-Array.Sort<object>
	*/

	[ReliabilityContractAttribute] // RVA: 0x9BF88 Offset: 0x9BF88 VA: 0x9BF88
	// RVA: -1 Offset: -1
	public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4FE1F0 Offset: 0x4FE1F0 VA: 0x4FE1F0
	|-Array.Sort<object, object>
	*/

	[ReliabilityContractAttribute] // RVA: 0x9BFA0 Offset: 0x9BFA0 VA: 0x9BFA0
	// RVA: -1 Offset: -1
	public static void Sort<T>(T[] array, int index, int length, IComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4FDF34 Offset: 0x4FDF34 VA: 0x4FDF34
	|-Array.Sort<int>
	|
	|-RVA: 0x4FEBA4 Offset: 0x4FEBA4 VA: 0x4FEBA4
	|-Array.Sort<object>
	|
	|-RVA: 0x4FF290 Offset: 0x4FF290 VA: 0x4FF290
	|-Array.Sort<CustomAttributeNamedArgument>
	|
	|-RVA: 0x4FF97C Offset: 0x4FF97C VA: 0x4FF97C
	|-Array.Sort<CustomAttributeTypedArgument>
	|
	|-RVA: 0x500068 Offset: 0x500068 VA: 0x500068
	|-Array.Sort<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x500754 Offset: 0x500754 VA: 0x500754
	|-Array.Sort<Color32>
	|
	|-RVA: 0x500E40 Offset: 0x500E40 VA: 0x500E40
	|-Array.Sort<RaycastResult>
	|
	|-RVA: 0x5017E4 Offset: 0x5017E4 VA: 0x5017E4
	|-Array.Sort<UICharInfo>
	|
	|-RVA: 0x501ED0 Offset: 0x501ED0 VA: 0x501ED0
	|-Array.Sort<UILineInfo>
	|
	|-RVA: 0x5025BC Offset: 0x5025BC VA: 0x5025BC
	|-Array.Sort<UIVertex>
	|
	|-RVA: 0x502CA8 Offset: 0x502CA8 VA: 0x502CA8
	|-Array.Sort<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x503394 Offset: 0x503394 VA: 0x503394
	|-Array.Sort<Vector2>
	|
	|-RVA: 0x503A80 Offset: 0x503A80 VA: 0x503A80
	|-Array.Sort<Vector3>
	|
	|-RVA: 0x50416C Offset: 0x50416C VA: 0x50416C
	|-Array.Sort<Vector4>
	*/

	[ReliabilityContractAttribute] // RVA: 0x9BFB8 Offset: 0x9BFB8 VA: 0x9BFB8
	// RVA: -1 Offset: -1
	public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length, IComparer<TKey> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4FD934 Offset: 0x4FD934 VA: 0x4FD934
	|-Array.Sort<int, int>
	|
	|-RVA: 0x4FE220 Offset: 0x4FE220 VA: 0x4FE220
	|-Array.Sort<object, object>
	|
	|-RVA: 0x4FEC90 Offset: 0x4FEC90 VA: 0x4FEC90
	|-Array.Sort<CustomAttributeNamedArgument, CustomAttributeNamedArgument>
	|
	|-RVA: 0x4FF37C Offset: 0x4FF37C VA: 0x4FF37C
	|-Array.Sort<CustomAttributeTypedArgument, CustomAttributeTypedArgument>
	|
	|-RVA: 0x4FFA68 Offset: 0x4FFA68 VA: 0x4FFA68
	|-Array.Sort<BeforeRenderHelper.OrderBlock, BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x500154 Offset: 0x500154 VA: 0x500154
	|-Array.Sort<Color32, Color32>
	|
	|-RVA: 0x500840 Offset: 0x500840 VA: 0x500840
	|-Array.Sort<RaycastResult, RaycastResult>
	|
	|-RVA: 0x5011E4 Offset: 0x5011E4 VA: 0x5011E4
	|-Array.Sort<UICharInfo, UICharInfo>
	|
	|-RVA: 0x5018D0 Offset: 0x5018D0 VA: 0x5018D0
	|-Array.Sort<UILineInfo, UILineInfo>
	|
	|-RVA: 0x501FBC Offset: 0x501FBC VA: 0x501FBC
	|-Array.Sort<UIVertex, UIVertex>
	|
	|-RVA: 0x5026A8 Offset: 0x5026A8 VA: 0x5026A8
	|-Array.Sort<UnitySynchronizationContext.WorkRequest, UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x502D94 Offset: 0x502D94 VA: 0x502D94
	|-Array.Sort<Vector2, Vector2>
	|
	|-RVA: 0x503480 Offset: 0x503480 VA: 0x503480
	|-Array.Sort<Vector3, Vector3>
	|
	|-RVA: 0x503B6C Offset: 0x503B6C VA: 0x503B6C
	|-Array.Sort<Vector4, Vector4>
	*/

	// RVA: -1 Offset: -1
	public static void Sort<T>(T[] array, Comparison<T> comparison) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4FE800 Offset: 0x4FE800 VA: 0x4FE800
	|-Array.Sort<object>
	|
	|-RVA: 0x500F2C Offset: 0x500F2C VA: 0x500F2C
	|-Array.Sort<RaycastHit>
	*/

	// RVA: -1 Offset: -1
	internal static void Sort<T>(T[] array, int length, Comparison<T> comparison) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4FDD4C Offset: 0x4FDD4C VA: 0x4FDD4C
	|-Array.Sort<int>
	|
	|-RVA: 0x4FE8D0 Offset: 0x4FE8D0 VA: 0x4FE8D0
	|-Array.Sort<object>
	|
	|-RVA: 0x4FF0A8 Offset: 0x4FF0A8 VA: 0x4FF0A8
	|-Array.Sort<CustomAttributeNamedArgument>
	|
	|-RVA: 0x4FF794 Offset: 0x4FF794 VA: 0x4FF794
	|-Array.Sort<CustomAttributeTypedArgument>
	|
	|-RVA: 0x4FFE80 Offset: 0x4FFE80 VA: 0x4FFE80
	|-Array.Sort<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x50056C Offset: 0x50056C VA: 0x50056C
	|-Array.Sort<Color32>
	|
	|-RVA: 0x500C58 Offset: 0x500C58 VA: 0x500C58
	|-Array.Sort<RaycastResult>
	|
	|-RVA: 0x500FFC Offset: 0x500FFC VA: 0x500FFC
	|-Array.Sort<RaycastHit>
	|
	|-RVA: 0x5015FC Offset: 0x5015FC VA: 0x5015FC
	|-Array.Sort<UICharInfo>
	|
	|-RVA: 0x501CE8 Offset: 0x501CE8 VA: 0x501CE8
	|-Array.Sort<UILineInfo>
	|
	|-RVA: 0x5023D4 Offset: 0x5023D4 VA: 0x5023D4
	|-Array.Sort<UIVertex>
	|
	|-RVA: 0x502AC0 Offset: 0x502AC0 VA: 0x502AC0
	|-Array.Sort<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x5031AC Offset: 0x5031AC VA: 0x5031AC
	|-Array.Sort<Vector2>
	|
	|-RVA: 0x503898 Offset: 0x503898 VA: 0x503898
	|-Array.Sort<Vector3>
	|
	|-RVA: 0x503F84 Offset: 0x503F84 VA: 0x503F84
	|-Array.Sort<Vector4>
	*/

	// RVA: -1 Offset: -1
	private static void qsort<K, V>(K[] keys, V[] items, int low0, int high0, IComparer<K> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x504258 Offset: 0x504258 VA: 0x504258
	|-Array.qsort<int, int>
	|
	|-RVA: 0x5046BC Offset: 0x5046BC VA: 0x5046BC
	|-Array.qsort<object, object>
	|
	|-RVA: 0x504B20 Offset: 0x504B20 VA: 0x504B20
	|-Array.qsort<CustomAttributeNamedArgument, CustomAttributeNamedArgument>
	|
	|-RVA: 0x5050F8 Offset: 0x5050F8 VA: 0x5050F8
	|-Array.qsort<CustomAttributeTypedArgument, CustomAttributeTypedArgument>
	|
	|-RVA: 0x505668 Offset: 0x505668 VA: 0x505668
	|-Array.qsort<BeforeRenderHelper.OrderBlock, BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x505BD8 Offset: 0x505BD8 VA: 0x505BD8
	|-Array.qsort<Color32, Color32>
	|
	|-RVA: 0x50603C Offset: 0x50603C VA: 0x50603C
	|-Array.qsort<RaycastResult, RaycastResult>
	|
	|-RVA: 0x506F88 Offset: 0x506F88 VA: 0x506F88
	|-Array.qsort<UICharInfo, UICharInfo>
	|
	|-RVA: 0x507560 Offset: 0x507560 VA: 0x507560
	|-Array.qsort<UILineInfo, UILineInfo>
	|
	|-RVA: 0x507AE8 Offset: 0x507AE8 VA: 0x507AE8
	|-Array.qsort<UIVertex, UIVertex>
	|
	|-RVA: 0x50835C Offset: 0x50835C VA: 0x50835C
	|-Array.qsort<UnitySynchronizationContext.WorkRequest, UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x508934 Offset: 0x508934 VA: 0x508934
	|-Array.qsort<Vector2, Vector2>
	|
	|-RVA: 0x508EA4 Offset: 0x508EA4 VA: 0x508EA4
	|-Array.qsort<Vector3, Vector3>
	|
	|-RVA: 0x50947C Offset: 0x50947C VA: 0x50947C
	|-Array.qsort<Vector4, Vector4>
	*/

	// RVA: -1 Offset: -1
	private static int compare<T>(T value1, T value2, IComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x520298 Offset: 0x520298 VA: 0x520298
	|-Array.compare<int>
	|
	|-RVA: 0x5206BC Offset: 0x5206BC VA: 0x5206BC
	|-Array.compare<object>
	|
	|-RVA: 0x520C18 Offset: 0x520C18 VA: 0x520C18
	|-Array.compare<CustomAttributeNamedArgument>
	|
	|-RVA: 0x520EB0 Offset: 0x520EB0 VA: 0x520EB0
	|-Array.compare<CustomAttributeTypedArgument>
	|
	|-RVA: 0x521110 Offset: 0x521110 VA: 0x521110
	|-Array.compare<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x521370 Offset: 0x521370 VA: 0x521370
	|-Array.compare<Color32>
	|
	|-RVA: 0x5215A8 Offset: 0x5215A8 VA: 0x5215A8
	|-Array.compare<RaycastResult>
	|
	|-RVA: 0x5219EC Offset: 0x5219EC VA: 0x5219EC
	|-Array.compare<UICharInfo>
	|
	|-RVA: 0x521C84 Offset: 0x521C84 VA: 0x521C84
	|-Array.compare<UILineInfo>
	|
	|-RVA: 0x521F40 Offset: 0x521F40 VA: 0x521F40
	|-Array.compare<UIVertex>
	|
	|-RVA: 0x522290 Offset: 0x522290 VA: 0x522290
	|-Array.compare<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x522528 Offset: 0x522528 VA: 0x522528
	|-Array.compare<Vector2>
	|
	|-RVA: 0x522788 Offset: 0x522788 VA: 0x522788
	|-Array.compare<Vector3>
	|
	|-RVA: 0x522A20 Offset: 0x522A20 VA: 0x522A20
	|-Array.compare<Vector4>
	*/

	// RVA: -1 Offset: -1
	private static void qsort<T>(T[] array, int low0, int high0, Comparison<T> comparison) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x50446C Offset: 0x50446C VA: 0x50446C
	|-Array.qsort<int>
	|
	|-RVA: 0x5048D0 Offset: 0x5048D0 VA: 0x5048D0
	|-Array.qsort<object>
	|
	|-RVA: 0x504DC8 Offset: 0x504DC8 VA: 0x504DC8
	|-Array.qsort<CustomAttributeNamedArgument>
	|
	|-RVA: 0x50537C Offset: 0x50537C VA: 0x50537C
	|-Array.qsort<CustomAttributeTypedArgument>
	|
	|-RVA: 0x5058EC Offset: 0x5058EC VA: 0x5058EC
	|-Array.qsort<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x505DEC Offset: 0x505DEC VA: 0x505DEC
	|-Array.qsort<Color32>
	|
	|-RVA: 0x506554 Offset: 0x506554 VA: 0x506554
	|-Array.qsort<RaycastResult>
	|
	|-RVA: 0x506AE0 Offset: 0x506AE0 VA: 0x506AE0
	|-Array.qsort<RaycastHit>
	|
	|-RVA: 0x507230 Offset: 0x507230 VA: 0x507230
	|-Array.qsort<UICharInfo>
	|
	|-RVA: 0x5077EC Offset: 0x5077EC VA: 0x5077EC
	|-Array.qsort<UILineInfo>
	|
	|-RVA: 0x507F04 Offset: 0x507F04 VA: 0x507F04
	|-Array.qsort<UIVertex>
	|
	|-RVA: 0x508604 Offset: 0x508604 VA: 0x508604
	|-Array.qsort<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x508BB8 Offset: 0x508BB8 VA: 0x508BB8
	|-Array.qsort<Vector2>
	|
	|-RVA: 0x50914C Offset: 0x50914C VA: 0x50914C
	|-Array.qsort<Vector3>
	|
	|-RVA: 0x509708 Offset: 0x509708 VA: 0x509708
	|-Array.qsort<Vector4>
	*/

	// RVA: -1 Offset: -1
	private static void swap<K, V>(K[] keys, V[] items, int i, int j) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x509A04 Offset: 0x509A04 VA: 0x509A04
	|-Array.swap<int, int>
	|
	|-RVA: 0x509C10 Offset: 0x509C10 VA: 0x509C10
	|-Array.swap<object, object>
	|
	|-RVA: 0x509E1C Offset: 0x509E1C VA: 0x509E1C
	|-Array.swap<CustomAttributeNamedArgument, CustomAttributeNamedArgument>
	|
	|-RVA: 0x50A1CC Offset: 0x50A1CC VA: 0x50A1CC
	|-Array.swap<CustomAttributeTypedArgument, CustomAttributeTypedArgument>
	|
	|-RVA: 0x50A498 Offset: 0x50A498 VA: 0x50A498
	|-Array.swap<BeforeRenderHelper.OrderBlock, BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x50A6FC Offset: 0x50A6FC VA: 0x50A6FC
	|-Array.swap<Color32, Color32>
	|
	|-RVA: 0x50A908 Offset: 0x50A908 VA: 0x50A908
	|-Array.swap<RaycastResult, RaycastResult>
	|
	|-RVA: 0x50AF48 Offset: 0x50AF48 VA: 0x50AF48
	|-Array.swap<UICharInfo, UICharInfo>
	|
	|-RVA: 0x50B2F8 Offset: 0x50B2F8 VA: 0x50B2F8
	|-Array.swap<UILineInfo, UILineInfo>
	|
	|-RVA: 0x50B514 Offset: 0x50B514 VA: 0x50B514
	|-Array.swap<UIVertex, UIVertex>
	|
	|-RVA: 0x50B820 Offset: 0x50B820 VA: 0x50B820
	|-Array.swap<UnitySynchronizationContext.WorkRequest, UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x50BBD0 Offset: 0x50BBD0 VA: 0x50BBD0
	|-Array.swap<Vector2, Vector2>
	|
	|-RVA: 0x50BE9C Offset: 0x50BE9C VA: 0x50BE9C
	|-Array.swap<Vector3, Vector3>
	|
	|-RVA: 0x50C24C Offset: 0x50C24C VA: 0x50C24C
	|-Array.swap<Vector4, Vector4>
	*/

	// RVA: -1 Offset: -1
	private static void swap<T>(T[] array, int i, int j) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x509B58 Offset: 0x509B58 VA: 0x509B58
	|-Array.swap<int>
	|
	|-RVA: 0x509D64 Offset: 0x509D64 VA: 0x509D64
	|-Array.swap<object>
	|
	|-RVA: 0x50A080 Offset: 0x50A080 VA: 0x50A080
	|-Array.swap<CustomAttributeNamedArgument>
	|
	|-RVA: 0x50A39C Offset: 0x50A39C VA: 0x50A39C
	|-Array.swap<CustomAttributeTypedArgument>
	|
	|-RVA: 0x50A624 Offset: 0x50A624 VA: 0x50A624
	|-Array.swap<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x50A850 Offset: 0x50A850 VA: 0x50A850
	|-Array.swap<Color32>
	|
	|-RVA: 0x50ABFC Offset: 0x50ABFC VA: 0x50ABFC
	|-Array.swap<RaycastResult>
	|
	|-RVA: 0x50AD9C Offset: 0x50AD9C VA: 0x50AD9C
	|-Array.swap<RaycastHit>
	|
	|-RVA: 0x50B1AC Offset: 0x50B1AC VA: 0x50B1AC
	|-Array.swap<UICharInfo>
	|
	|-RVA: 0x50B454 Offset: 0x50B454 VA: 0x50B454
	|-Array.swap<UILineInfo>
	|
	|-RVA: 0x50B710 Offset: 0x50B710 VA: 0x50B710
	|-Array.swap<UIVertex>
	|
	|-RVA: 0x50BA84 Offset: 0x50BA84 VA: 0x50BA84
	|-Array.swap<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x50BDA0 Offset: 0x50BDA0 VA: 0x50BDA0
	|-Array.swap<Vector2>
	|
	|-RVA: 0x50C100 Offset: 0x50C100 VA: 0x50C100
	|-Array.swap<Vector3>
	|
	|-RVA: 0x50C3A8 Offset: 0x50C3A8 VA: 0x50C3A8
	|-Array.swap<Vector4>
	*/

	// RVA: 0x2C2428 Offset: 0x2C2428 VA: 0x2C2428 Slot: 9
	public void CopyTo(Array array, int index) { }

	[ComVisibleAttribute] // RVA: 0x9BFD0 Offset: 0x9BFD0 VA: 0x9BFD0
	// RVA: 0x2C26C0 Offset: 0x2C26C0 VA: 0x2C26C0
	public void CopyTo(Array array, long index) { }

	[ReliabilityContractAttribute] // RVA: 0x9BFE4 Offset: 0x9BFE4 VA: 0x9BFE4
	// RVA: -1 Offset: -1
	public static void Resize<T>(ref T[] array, int newSize) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4FC4A4 Offset: 0x4FC4A4 VA: 0x4FC4A4
	|-Array.Resize<int>
	|
	|-RVA: 0x4FC61C Offset: 0x4FC61C VA: 0x4FC61C
	|-Array.Resize<object>
	|
	|-RVA: 0x4FC794 Offset: 0x4FC794 VA: 0x4FC794
	|-Array.Resize<CustomAttributeNamedArgument>
	|
	|-RVA: 0x4FC90C Offset: 0x4FC90C VA: 0x4FC90C
	|-Array.Resize<CustomAttributeTypedArgument>
	|
	|-RVA: 0x4FCA84 Offset: 0x4FCA84 VA: 0x4FCA84
	|-Array.Resize<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x4FCBFC Offset: 0x4FCBFC VA: 0x4FCBFC
	|-Array.Resize<Color32>
	|
	|-RVA: 0x4FCD74 Offset: 0x4FCD74 VA: 0x4FCD74
	|-Array.Resize<RaycastResult>
	|
	|-RVA: 0x4FCEEC Offset: 0x4FCEEC VA: 0x4FCEEC
	|-Array.Resize<UICharInfo>
	|
	|-RVA: 0x4FD064 Offset: 0x4FD064 VA: 0x4FD064
	|-Array.Resize<UILineInfo>
	|
	|-RVA: 0x4FD1DC Offset: 0x4FD1DC VA: 0x4FD1DC
	|-Array.Resize<UIVertex>
	|
	|-RVA: 0x4FD354 Offset: 0x4FD354 VA: 0x4FD354
	|-Array.Resize<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x4FD4CC Offset: 0x4FD4CC VA: 0x4FD4CC
	|-Array.Resize<Vector2>
	|
	|-RVA: 0x4FD644 Offset: 0x4FD644 VA: 0x4FD644
	|-Array.Resize<Vector3>
	|
	|-RVA: 0x4FD7BC Offset: 0x4FD7BC VA: 0x4FD7BC
	|-Array.Resize<Vector4>
	*/

	// RVA: -1 Offset: -1
	internal static void Resize<T>(ref T[] array, int length, int newSize) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4FC4D8 Offset: 0x4FC4D8 VA: 0x4FC4D8
	|-Array.Resize<int>
	|
	|-RVA: 0x4FC650 Offset: 0x4FC650 VA: 0x4FC650
	|-Array.Resize<object>
	|
	|-RVA: 0x4FC7C8 Offset: 0x4FC7C8 VA: 0x4FC7C8
	|-Array.Resize<CustomAttributeNamedArgument>
	|
	|-RVA: 0x4FC940 Offset: 0x4FC940 VA: 0x4FC940
	|-Array.Resize<CustomAttributeTypedArgument>
	|
	|-RVA: 0x4FCAB8 Offset: 0x4FCAB8 VA: 0x4FCAB8
	|-Array.Resize<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x4FCC30 Offset: 0x4FCC30 VA: 0x4FCC30
	|-Array.Resize<Color32>
	|
	|-RVA: 0x4FCDA8 Offset: 0x4FCDA8 VA: 0x4FCDA8
	|-Array.Resize<RaycastResult>
	|
	|-RVA: 0x4FCF20 Offset: 0x4FCF20 VA: 0x4FCF20
	|-Array.Resize<UICharInfo>
	|
	|-RVA: 0x4FD098 Offset: 0x4FD098 VA: 0x4FD098
	|-Array.Resize<UILineInfo>
	|
	|-RVA: 0x4FD210 Offset: 0x4FD210 VA: 0x4FD210
	|-Array.Resize<UIVertex>
	|
	|-RVA: 0x4FD388 Offset: 0x4FD388 VA: 0x4FD388
	|-Array.Resize<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x4FD500 Offset: 0x4FD500 VA: 0x4FD500
	|-Array.Resize<Vector2>
	|
	|-RVA: 0x4FD678 Offset: 0x4FD678 VA: 0x4FD678
	|-Array.Resize<Vector3>
	|
	|-RVA: 0x4FD7F0 Offset: 0x4FD7F0 VA: 0x4FD7F0
	|-Array.Resize<Vector4>
	*/

	// RVA: -1 Offset: -1
	public static bool TrueForAll<T>(T[] array, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3A9150 Offset: 0x3A9150 VA: 0x3A9150
	|-Array.TrueForAll<object>
	*/

	// RVA: -1 Offset: -1
	public static void ForEach<T>(T[] array, Action<T> action) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5243C8 Offset: 0x5243C8 VA: 0x5243C8
	|-Array.ForEach<object>
	*/

	// RVA: -1 Offset: -1
	public static TOutput[] ConvertAll<TInput, TOutput>(TInput[] array, Converter<TInput, TOutput> converter) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BCFB4 Offset: 0x5BCFB4 VA: 0x5BCFB4
	|-Array.ConvertAll<object, object>
	*/

	// RVA: -1 Offset: -1
	public static int FindLastIndex<T>(T[] array, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3AEC08 Offset: 0x3AEC08 VA: 0x3AEC08
	|-Array.FindLastIndex<object>
	*/

	// RVA: -1 Offset: -1
	public static int FindLastIndex<T>(T[] array, int startIndex, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3AEB34 Offset: 0x3AEB34 VA: 0x3AEB34
	|-Array.FindLastIndex<object>
	*/

	// RVA: -1 Offset: -1
	public static int FindLastIndex<T>(T[] array, int startIndex, int count, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3AE988 Offset: 0x3AE988 VA: 0x3AE988
	|-Array.FindLastIndex<object>
	*/

	// RVA: -1 Offset: -1
	public static int FindIndex<T>(T[] array, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3AE8A8 Offset: 0x3AE8A8 VA: 0x3AE8A8
	|-Array.FindIndex<object>
	*/

	// RVA: -1 Offset: -1
	public static int FindIndex<T>(T[] array, int startIndex, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3AE7C0 Offset: 0x3AE7C0 VA: 0x3AE7C0
	|-Array.FindIndex<object>
	*/

	// RVA: -1 Offset: -1
	public static int FindIndex<T>(T[] array, int startIndex, int count, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3AE60C Offset: 0x3AE60C VA: 0x3AE60C
	|-Array.FindIndex<object>
	*/

	[ReliabilityContractAttribute] // RVA: 0x9BFFC Offset: 0x9BFFC VA: 0x9BFFC
	// RVA: -1 Offset: -1
	public static int BinarySearch<T>(T[] array, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3AE43C Offset: 0x3AE43C VA: 0x3AE43C
	|-Array.BinarySearch<object>
	*/

	[ReliabilityContractAttribute] // RVA: 0x9C014 Offset: 0x9C014 VA: 0x9C014
	// RVA: -1 Offset: -1
	public static int BinarySearch<T>(T[] array, T value, IComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3AE524 Offset: 0x3AE524 VA: 0x3AE524
	|-Array.BinarySearch<object>
	*/

	[ReliabilityContractAttribute] // RVA: 0x9C02C Offset: 0x9C02C VA: 0x9C02C
	// RVA: -1 Offset: -1
	public static int BinarySearch<T>(T[] array, int index, int length, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3ADA74 Offset: 0x3ADA74 VA: 0x3ADA74
	|-Array.BinarySearch<int>
	|
	|-RVA: 0x3ADF58 Offset: 0x3ADF58 VA: 0x3ADF58
	|-Array.BinarySearch<object>
	*/

	[ReliabilityContractAttribute] // RVA: 0x9C044 Offset: 0x9C044 VA: 0x9C044
	// RVA: -1 Offset: -1
	public static int BinarySearch<T>(T[] array, int index, int length, T value, IComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3ADAA4 Offset: 0x3ADAA4 VA: 0x3ADAA4
	|-Array.BinarySearch<int>
	|
	|-RVA: 0x3ADF88 Offset: 0x3ADF88 VA: 0x3ADF88
	|-Array.BinarySearch<object>
	*/

	// RVA: -1 Offset: -1
	public static int IndexOf<T>(T[] array, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3AEF24 Offset: 0x3AEF24 VA: 0x3AEF24
	|-Array.IndexOf<object>
	|-Array.IndexOf<Type>
	|
	|-RVA: 0x5150F4 Offset: 0x5150F4 VA: 0x5150F4
	|-Array.IndexOf<CustomAttributeNamedArgument>
	|
	|-RVA: 0x515474 Offset: 0x515474 VA: 0x515474
	|-Array.IndexOf<CustomAttributeTypedArgument>
	*/

	// RVA: -1 Offset: -1
	public static int IndexOf<T>(T[] array, T value, int startIndex) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3AF004 Offset: 0x3AF004 VA: 0x3AF004
	|-Array.IndexOf<object>
	*/

	// RVA: -1 Offset: -1
	public static int IndexOf<T>(T[] array, T value, int startIndex, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3AECE8 Offset: 0x3AECE8 VA: 0x3AECE8
	|-Array.IndexOf<int>
	|
	|-RVA: 0x3AF0EC Offset: 0x3AF0EC VA: 0x3AF0EC
	|-Array.IndexOf<object>
	|
	|-RVA: 0x5151EC Offset: 0x5151EC VA: 0x5151EC
	|-Array.IndexOf<CustomAttributeNamedArgument>
	|
	|-RVA: 0x515560 Offset: 0x515560 VA: 0x515560
	|-Array.IndexOf<CustomAttributeTypedArgument>
	|
	|-RVA: 0x5157C4 Offset: 0x5157C4 VA: 0x5157C4
	|-Array.IndexOf<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x515A28 Offset: 0x515A28 VA: 0x515A28
	|-Array.IndexOf<Color32>
	|
	|-RVA: 0x515C64 Offset: 0x515C64 VA: 0x515C64
	|-Array.IndexOf<RaycastResult>
	|
	|-RVA: 0x515FF0 Offset: 0x515FF0 VA: 0x515FF0
	|-Array.IndexOf<UICharInfo>
	|
	|-RVA: 0x516278 Offset: 0x516278 VA: 0x516278
	|-Array.IndexOf<UILineInfo>
	|
	|-RVA: 0x516504 Offset: 0x516504 VA: 0x516504
	|-Array.IndexOf<UIVertex>
	|
	|-RVA: 0x516850 Offset: 0x516850 VA: 0x516850
	|-Array.IndexOf<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x516AD8 Offset: 0x516AD8 VA: 0x516AD8
	|-Array.IndexOf<Vector2>
	|
	|-RVA: 0x516D3C Offset: 0x516D3C VA: 0x516D3C
	|-Array.IndexOf<Vector3>
	|
	|-RVA: 0x516FC4 Offset: 0x516FC4 VA: 0x516FC4
	|-Array.IndexOf<Vector4>
	*/

	// RVA: -1 Offset: -1
	public static int LastIndexOf<T>(T[] array, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x51FE80 Offset: 0x51FE80 VA: 0x51FE80
	|-Array.LastIndexOf<object>
	*/

	// RVA: -1 Offset: -1
	public static int LastIndexOf<T>(T[] array, T value, int startIndex) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x51FF64 Offset: 0x51FF64 VA: 0x51FF64
	|-Array.LastIndexOf<object>
	*/

	// RVA: -1 Offset: -1
	public static int LastIndexOf<T>(T[] array, T value, int startIndex, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x520048 Offset: 0x520048 VA: 0x520048
	|-Array.LastIndexOf<object>
	*/

	// RVA: -1 Offset: -1
	public static T[] FindAll<T>(T[] array, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BD5DC Offset: 0x5BD5DC VA: 0x5BD5DC
	|-Array.FindAll<object>
	*/

	// RVA: -1 Offset: -1
	public static bool Exists<T>(T[] array, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x39E660 Offset: 0x39E660 VA: 0x39E660
	|-Array.Exists<object>
	*/

	// RVA: -1 Offset: -1
	public static ReadOnlyCollection<T> AsReadOnly<T>(T[] array) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3AD6D8 Offset: 0x3AD6D8 VA: 0x3AD6D8
	|-Array.AsReadOnly<CustomAttributeData>
	|-Array.AsReadOnly<object>
	|
	|-RVA: 0x3AD80C Offset: 0x3AD80C VA: 0x3AD80C
	|-Array.AsReadOnly<CustomAttributeNamedArgument>
	|
	|-RVA: 0x3AD940 Offset: 0x3AD940 VA: 0x3AD940
	|-Array.AsReadOnly<CustomAttributeTypedArgument>
	*/

	// RVA: -1 Offset: -1
	public static T Find<T>(T[] array, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5147A4 Offset: 0x5147A4 VA: 0x5147A4
	|-Array.Find<object>
	*/

	// RVA: -1 Offset: -1
	public static T FindLast<T>(T[] array, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x51490C Offset: 0x51490C VA: 0x51490C
	|-Array.FindLast<object>
	*/

	[ReliabilityContractAttribute] // RVA: 0x9C05C Offset: 0x9C05C VA: 0x9C05C
	// RVA: 0x2C27A8 Offset: 0x2C27A8 VA: 0x2C27A8
	public static void ConstrainedCopy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length) { }
}

// Namespace: 
internal struct Array.InternalEnumerator<T> : IEnumerator, IDisposable, IEnumerator<T> // TypeDefIndex: 41
{
	// Fields
	private Array array; // 0x0
	private int idx; // 0x0

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(Array array) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC5AB0 Offset: 0xC5AB0 VA: 0xC5AB0
	|-Array.InternalEnumerator<CodePointIndexer.TableRange>..ctor
	|
	|-RVA: 0xC5AFC Offset: 0xC5AFC VA: 0xC5AFC
	|-Array.InternalEnumerator<ClientCertificateType>..ctor
	|
	|-RVA: 0xC5B3C Offset: 0xC5B3C VA: 0xC5B3C
	|-Array.InternalEnumerator<bool>..ctor
	|
	|-RVA: 0xC5B7C Offset: 0xC5B7C VA: 0xC5B7C
	|-Array.InternalEnumerator<byte>..ctor
	|
	|-RVA: 0xC5BBC Offset: 0xC5BBC VA: 0xC5BBC
	|-Array.InternalEnumerator<char>..ctor
	|
	|-RVA: 0xC5BFC Offset: 0xC5BFC VA: 0xC5BFC
	|-Array.InternalEnumerator<DictionaryEntry>..ctor
	|
	|-RVA: 0xC5C48 Offset: 0xC5C48 VA: 0xC5C48
	|-Array.InternalEnumerator<HashSet.Link<object>>..ctor
	|
	|-RVA: 0xC5C94 Offset: 0xC5C94 VA: 0xC5C94
	|-Array.InternalEnumerator<KeyValuePair<int, object>>..ctor
	|
	|-RVA: 0xC5CE0 Offset: 0xC5CE0 VA: 0xC5CE0
	|-Array.InternalEnumerator<KeyValuePair<object, bool>>..ctor
	|
	|-RVA: 0xC5D2C Offset: 0xC5D2C VA: 0xC5D2C
	|-Array.InternalEnumerator<KeyValuePair<object, int>>..ctor
	|
	|-RVA: 0xC5D78 Offset: 0xC5D78 VA: 0xC5D78
	|-Array.InternalEnumerator<KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0xC5DC4 Offset: 0xC5DC4 VA: 0xC5DC4
	|-Array.InternalEnumerator<Link>..ctor
	|
	|-RVA: 0xC5E10 Offset: 0xC5E10 VA: 0xC5E10
	|-Array.InternalEnumerator<Hashtable.Slot>..ctor
	|
	|-RVA: 0xC5E5C Offset: 0xC5E5C VA: 0xC5E5C
	|-Array.InternalEnumerator<SortedList.Slot>..ctor
	|
	|-RVA: 0xC5EA8 Offset: 0xC5EA8 VA: 0xC5EA8
	|-Array.InternalEnumerator<DateTime>..ctor
	|
	|-RVA: 0xC5EF4 Offset: 0xC5EF4 VA: 0xC5EF4
	|-Array.InternalEnumerator<Decimal>..ctor
	|
	|-RVA: 0xC5F40 Offset: 0xC5F40 VA: 0xC5F40
	|-Array.InternalEnumerator<double>..ctor
	|
	|-RVA: 0xC5F80 Offset: 0xC5F80 VA: 0xC5F80
	|-Array.InternalEnumerator<short>..ctor
	|
	|-RVA: 0xC5FC0 Offset: 0xC5FC0 VA: 0xC5FC0
	|-Array.InternalEnumerator<int>..ctor
	|
	|-RVA: 0xC6000 Offset: 0xC6000 VA: 0xC6000
	|-Array.InternalEnumerator<long>..ctor
	|
	|-RVA: 0xC6040 Offset: 0xC6040 VA: 0xC6040
	|-Array.InternalEnumerator<IntPtr>..ctor
	|
	|-RVA: 0xC6080 Offset: 0xC6080 VA: 0xC6080
	|-Array.InternalEnumerator<object>..ctor
	|
	|-RVA: 0xC60C0 Offset: 0xC60C0 VA: 0xC60C0
	|-Array.InternalEnumerator<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0xC610C Offset: 0xC610C VA: 0xC610C
	|-Array.InternalEnumerator<CustomAttributeTypedArgument>..ctor
	|
	|-RVA: 0xC6158 Offset: 0xC6158 VA: 0xC6158
	|-Array.InternalEnumerator<ILGenerator.LabelData>..ctor
	|
	|-RVA: 0xC61A4 Offset: 0xC61A4 VA: 0xC61A4
	|-Array.InternalEnumerator<ILGenerator.LabelFixup>..ctor
	|
	|-RVA: 0xC61F0 Offset: 0xC61F0 VA: 0xC61F0
	|-Array.InternalEnumerator<ILTokenInfo>..ctor
	|
	|-RVA: 0xC623C Offset: 0xC623C VA: 0xC623C
	|-Array.InternalEnumerator<MonoResource>..ctor
	|
	|-RVA: 0xC6288 Offset: 0xC6288 VA: 0xC6288
	|-Array.InternalEnumerator<MonoWin32Resource>..ctor
	|
	|-RVA: 0xC62D4 Offset: 0xC62D4 VA: 0xC62D4
	|-Array.InternalEnumerator<RefEmitPermissionSet>..ctor
	|
	|-RVA: 0xC6320 Offset: 0xC6320 VA: 0xC6320
	|-Array.InternalEnumerator<ParameterModifier>..ctor
	|
	|-RVA: 0xC6360 Offset: 0xC6360 VA: 0xC6360
	|-Array.InternalEnumerator<ResourceReader.ResourceCacheItem>..ctor
	|
	|-RVA: 0xC63AC Offset: 0xC63AC VA: 0xC63AC
	|-Array.InternalEnumerator<ResourceReader.ResourceInfo>..ctor
	|
	|-RVA: 0xC63F8 Offset: 0xC63F8 VA: 0xC63F8
	|-Array.InternalEnumerator<TypeTag>..ctor
	|
	|-RVA: 0xC6438 Offset: 0xC6438 VA: 0xC6438
	|-Array.InternalEnumerator<sbyte>..ctor
	|
	|-RVA: 0xC6478 Offset: 0xC6478 VA: 0xC6478
	|-Array.InternalEnumerator<X509ChainStatus>..ctor
	|
	|-RVA: 0xC64C4 Offset: 0xC64C4 VA: 0xC64C4
	|-Array.InternalEnumerator<float>..ctor
	|
	|-RVA: 0xC6504 Offset: 0xC6504 VA: 0xC6504
	|-Array.InternalEnumerator<Mark>..ctor
	|
	|-RVA: 0xC6550 Offset: 0xC6550 VA: 0xC6550
	|-Array.InternalEnumerator<TimeSpan>..ctor
	|
	|-RVA: 0xC659C Offset: 0xC659C VA: 0xC659C
	|-Array.InternalEnumerator<ushort>..ctor
	|
	|-RVA: 0xC65DC Offset: 0xC65DC VA: 0xC65DC
	|-Array.InternalEnumerator<uint>..ctor
	|
	|-RVA: 0xC661C Offset: 0xC661C VA: 0xC661C
	|-Array.InternalEnumerator<ulong>..ctor
	|
	|-RVA: 0xC665C Offset: 0xC665C VA: 0xC665C
	|-Array.InternalEnumerator<Uri.UriScheme>..ctor
	|
	|-RVA: 0xC66A8 Offset: 0xC66A8 VA: 0xC66A8
	|-Array.InternalEnumerator<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0xC66F4 Offset: 0xC66F4 VA: 0xC66F4
	|-Array.InternalEnumerator<Color32>..ctor
	|
	|-RVA: 0xC6734 Offset: 0xC6734 VA: 0xC6734
	|-Array.InternalEnumerator<ContactPoint2D>..ctor
	|
	|-RVA: 0xC6780 Offset: 0xC6780 VA: 0xC6780
	|-Array.InternalEnumerator<ContactPoint>..ctor
	|
	|-RVA: 0xC67CC Offset: 0xC67CC VA: 0xC67CC
	|-Array.InternalEnumerator<RaycastResult>..ctor
	|
	|-RVA: 0xC6818 Offset: 0xC6818 VA: 0xC6818
	|-Array.InternalEnumerator<PlayerLoopSystem>..ctor
	|
	|-RVA: 0xC6864 Offset: 0xC6864 VA: 0xC6864
	|-Array.InternalEnumerator<Keyframe>..ctor
	|
	|-RVA: 0xC68B0 Offset: 0xC68B0 VA: 0xC68B0
	|-Array.InternalEnumerator<PlayableBinding>..ctor
	|
	|-RVA: 0xC68FC Offset: 0xC68FC VA: 0xC68FC
	|-Array.InternalEnumerator<RaycastHit2D>..ctor
	|
	|-RVA: 0xC6948 Offset: 0xC6948 VA: 0xC6948
	|-Array.InternalEnumerator<RaycastHit>..ctor
	|
	|-RVA: 0xC6994 Offset: 0xC6994 VA: 0xC6994
	|-Array.InternalEnumerator<SendMouseEvents.HitInfo>..ctor
	|
	|-RVA: 0xC69E0 Offset: 0xC69E0 VA: 0xC69E0
	|-Array.InternalEnumerator<InputField.ContentType>..ctor
	|
	|-RVA: 0xC6A20 Offset: 0xC6A20 VA: 0xC6A20
	|-Array.InternalEnumerator<UICharInfo>..ctor
	|
	|-RVA: 0xC6A6C Offset: 0xC6A6C VA: 0xC6A6C
	|-Array.InternalEnumerator<UILineInfo>..ctor
	|
	|-RVA: 0xC6AB8 Offset: 0xC6AB8 VA: 0xC6AB8
	|-Array.InternalEnumerator<UIVertex>..ctor
	|
	|-RVA: 0xC6B04 Offset: 0xC6B04 VA: 0xC6B04
	|-Array.InternalEnumerator<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0xC6B50 Offset: 0xC6B50 VA: 0xC6B50
	|-Array.InternalEnumerator<Vector2>..ctor
	|
	|-RVA: 0xC6B9C Offset: 0xC6B9C VA: 0xC6B9C
	|-Array.InternalEnumerator<Vector3>..ctor
	|
	|-RVA: 0xC6BE8 Offset: 0xC6BE8 VA: 0xC6BE8
	|-Array.InternalEnumerator<Vector4>..ctor
	|
	|-RVA: 0xC6C34 Offset: 0xC6C34 VA: 0xC6C34
	|-Array.InternalEnumerator<jvalue>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private void System.Collections.IEnumerator.Reset() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC5AC0 Offset: 0xC5AC0 VA: 0xC5AC0
	|-Array.InternalEnumerator<CodePointIndexer.TableRange>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5B0C Offset: 0xC5B0C VA: 0xC5B0C
	|-Array.InternalEnumerator<ClientCertificateType>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5B4C Offset: 0xC5B4C VA: 0xC5B4C
	|-Array.InternalEnumerator<bool>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5B8C Offset: 0xC5B8C VA: 0xC5B8C
	|-Array.InternalEnumerator<byte>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5BCC Offset: 0xC5BCC VA: 0xC5BCC
	|-Array.InternalEnumerator<char>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5C0C Offset: 0xC5C0C VA: 0xC5C0C
	|-Array.InternalEnumerator<DictionaryEntry>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5C58 Offset: 0xC5C58 VA: 0xC5C58
	|-Array.InternalEnumerator<HashSet.Link<object>>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5CA4 Offset: 0xC5CA4 VA: 0xC5CA4
	|-Array.InternalEnumerator<KeyValuePair<int, object>>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5CF0 Offset: 0xC5CF0 VA: 0xC5CF0
	|-Array.InternalEnumerator<KeyValuePair<object, bool>>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5D3C Offset: 0xC5D3C VA: 0xC5D3C
	|-Array.InternalEnumerator<KeyValuePair<object, int>>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5D88 Offset: 0xC5D88 VA: 0xC5D88
	|-Array.InternalEnumerator<KeyValuePair<object, object>>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5DD4 Offset: 0xC5DD4 VA: 0xC5DD4
	|-Array.InternalEnumerator<Link>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5E20 Offset: 0xC5E20 VA: 0xC5E20
	|-Array.InternalEnumerator<Hashtable.Slot>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5E6C Offset: 0xC5E6C VA: 0xC5E6C
	|-Array.InternalEnumerator<SortedList.Slot>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5EB8 Offset: 0xC5EB8 VA: 0xC5EB8
	|-Array.InternalEnumerator<DateTime>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5F04 Offset: 0xC5F04 VA: 0xC5F04
	|-Array.InternalEnumerator<Decimal>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5F50 Offset: 0xC5F50 VA: 0xC5F50
	|-Array.InternalEnumerator<double>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5F90 Offset: 0xC5F90 VA: 0xC5F90
	|-Array.InternalEnumerator<short>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC5FD0 Offset: 0xC5FD0 VA: 0xC5FD0
	|-Array.InternalEnumerator<int>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6010 Offset: 0xC6010 VA: 0xC6010
	|-Array.InternalEnumerator<long>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6050 Offset: 0xC6050 VA: 0xC6050
	|-Array.InternalEnumerator<IntPtr>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6090 Offset: 0xC6090 VA: 0xC6090
	|-Array.InternalEnumerator<object>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC60D0 Offset: 0xC60D0 VA: 0xC60D0
	|-Array.InternalEnumerator<CustomAttributeNamedArgument>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC611C Offset: 0xC611C VA: 0xC611C
	|-Array.InternalEnumerator<CustomAttributeTypedArgument>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6168 Offset: 0xC6168 VA: 0xC6168
	|-Array.InternalEnumerator<ILGenerator.LabelData>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC61B4 Offset: 0xC61B4 VA: 0xC61B4
	|-Array.InternalEnumerator<ILGenerator.LabelFixup>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6200 Offset: 0xC6200 VA: 0xC6200
	|-Array.InternalEnumerator<ILTokenInfo>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC624C Offset: 0xC624C VA: 0xC624C
	|-Array.InternalEnumerator<MonoResource>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6298 Offset: 0xC6298 VA: 0xC6298
	|-Array.InternalEnumerator<MonoWin32Resource>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC62E4 Offset: 0xC62E4 VA: 0xC62E4
	|-Array.InternalEnumerator<RefEmitPermissionSet>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6330 Offset: 0xC6330 VA: 0xC6330
	|-Array.InternalEnumerator<ParameterModifier>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6370 Offset: 0xC6370 VA: 0xC6370
	|-Array.InternalEnumerator<ResourceReader.ResourceCacheItem>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC63BC Offset: 0xC63BC VA: 0xC63BC
	|-Array.InternalEnumerator<ResourceReader.ResourceInfo>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6408 Offset: 0xC6408 VA: 0xC6408
	|-Array.InternalEnumerator<TypeTag>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6448 Offset: 0xC6448 VA: 0xC6448
	|-Array.InternalEnumerator<sbyte>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6488 Offset: 0xC6488 VA: 0xC6488
	|-Array.InternalEnumerator<X509ChainStatus>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC64D4 Offset: 0xC64D4 VA: 0xC64D4
	|-Array.InternalEnumerator<float>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6514 Offset: 0xC6514 VA: 0xC6514
	|-Array.InternalEnumerator<Mark>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6560 Offset: 0xC6560 VA: 0xC6560
	|-Array.InternalEnumerator<TimeSpan>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC65AC Offset: 0xC65AC VA: 0xC65AC
	|-Array.InternalEnumerator<ushort>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC65EC Offset: 0xC65EC VA: 0xC65EC
	|-Array.InternalEnumerator<uint>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC662C Offset: 0xC662C VA: 0xC662C
	|-Array.InternalEnumerator<ulong>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC666C Offset: 0xC666C VA: 0xC666C
	|-Array.InternalEnumerator<Uri.UriScheme>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC66B8 Offset: 0xC66B8 VA: 0xC66B8
	|-Array.InternalEnumerator<BeforeRenderHelper.OrderBlock>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6704 Offset: 0xC6704 VA: 0xC6704
	|-Array.InternalEnumerator<Color32>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6744 Offset: 0xC6744 VA: 0xC6744
	|-Array.InternalEnumerator<ContactPoint2D>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6790 Offset: 0xC6790 VA: 0xC6790
	|-Array.InternalEnumerator<ContactPoint>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC67DC Offset: 0xC67DC VA: 0xC67DC
	|-Array.InternalEnumerator<RaycastResult>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6828 Offset: 0xC6828 VA: 0xC6828
	|-Array.InternalEnumerator<PlayerLoopSystem>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6874 Offset: 0xC6874 VA: 0xC6874
	|-Array.InternalEnumerator<Keyframe>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC68C0 Offset: 0xC68C0 VA: 0xC68C0
	|-Array.InternalEnumerator<PlayableBinding>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC690C Offset: 0xC690C VA: 0xC690C
	|-Array.InternalEnumerator<RaycastHit2D>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6958 Offset: 0xC6958 VA: 0xC6958
	|-Array.InternalEnumerator<RaycastHit>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC69A4 Offset: 0xC69A4 VA: 0xC69A4
	|-Array.InternalEnumerator<SendMouseEvents.HitInfo>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC69F0 Offset: 0xC69F0 VA: 0xC69F0
	|-Array.InternalEnumerator<InputField.ContentType>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6A30 Offset: 0xC6A30 VA: 0xC6A30
	|-Array.InternalEnumerator<UICharInfo>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6A7C Offset: 0xC6A7C VA: 0xC6A7C
	|-Array.InternalEnumerator<UILineInfo>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6AC8 Offset: 0xC6AC8 VA: 0xC6AC8
	|-Array.InternalEnumerator<UIVertex>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6B14 Offset: 0xC6B14 VA: 0xC6B14
	|-Array.InternalEnumerator<UnitySynchronizationContext.WorkRequest>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6B60 Offset: 0xC6B60 VA: 0xC6B60
	|-Array.InternalEnumerator<Vector2>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6BAC Offset: 0xC6BAC VA: 0xC6BAC
	|-Array.InternalEnumerator<Vector3>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6BF8 Offset: 0xC6BF8 VA: 0xC6BF8
	|-Array.InternalEnumerator<Vector4>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6C44 Offset: 0xC6C44 VA: 0xC6C44
	|-Array.InternalEnumerator<jvalue>.System.Collections.IEnumerator.Reset
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC5ACC Offset: 0xC5ACC VA: 0xC5ACC
	|-Array.InternalEnumerator<CodePointIndexer.TableRange>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5B18 Offset: 0xC5B18 VA: 0xC5B18
	|-Array.InternalEnumerator<ClientCertificateType>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5B58 Offset: 0xC5B58 VA: 0xC5B58
	|-Array.InternalEnumerator<bool>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5B98 Offset: 0xC5B98 VA: 0xC5B98
	|-Array.InternalEnumerator<byte>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5BD8 Offset: 0xC5BD8 VA: 0xC5BD8
	|-Array.InternalEnumerator<char>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5C18 Offset: 0xC5C18 VA: 0xC5C18
	|-Array.InternalEnumerator<DictionaryEntry>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5C64 Offset: 0xC5C64 VA: 0xC5C64
	|-Array.InternalEnumerator<HashSet.Link<object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5CB0 Offset: 0xC5CB0 VA: 0xC5CB0
	|-Array.InternalEnumerator<KeyValuePair<int, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5CFC Offset: 0xC5CFC VA: 0xC5CFC
	|-Array.InternalEnumerator<KeyValuePair<object, bool>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5D48 Offset: 0xC5D48 VA: 0xC5D48
	|-Array.InternalEnumerator<KeyValuePair<object, int>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5D94 Offset: 0xC5D94 VA: 0xC5D94
	|-Array.InternalEnumerator<KeyValuePair<object, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5DE0 Offset: 0xC5DE0 VA: 0xC5DE0
	|-Array.InternalEnumerator<Link>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5E2C Offset: 0xC5E2C VA: 0xC5E2C
	|-Array.InternalEnumerator<Hashtable.Slot>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5E78 Offset: 0xC5E78 VA: 0xC5E78
	|-Array.InternalEnumerator<SortedList.Slot>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5EC4 Offset: 0xC5EC4 VA: 0xC5EC4
	|-Array.InternalEnumerator<DateTime>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5F10 Offset: 0xC5F10 VA: 0xC5F10
	|-Array.InternalEnumerator<Decimal>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5F5C Offset: 0xC5F5C VA: 0xC5F5C
	|-Array.InternalEnumerator<double>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5F9C Offset: 0xC5F9C VA: 0xC5F9C
	|-Array.InternalEnumerator<short>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC5FDC Offset: 0xC5FDC VA: 0xC5FDC
	|-Array.InternalEnumerator<int>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC601C Offset: 0xC601C VA: 0xC601C
	|-Array.InternalEnumerator<long>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC605C Offset: 0xC605C VA: 0xC605C
	|-Array.InternalEnumerator<IntPtr>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC609C Offset: 0xC609C VA: 0xC609C
	|-Array.InternalEnumerator<object>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC60DC Offset: 0xC60DC VA: 0xC60DC
	|-Array.InternalEnumerator<CustomAttributeNamedArgument>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6128 Offset: 0xC6128 VA: 0xC6128
	|-Array.InternalEnumerator<CustomAttributeTypedArgument>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6174 Offset: 0xC6174 VA: 0xC6174
	|-Array.InternalEnumerator<ILGenerator.LabelData>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC61C0 Offset: 0xC61C0 VA: 0xC61C0
	|-Array.InternalEnumerator<ILGenerator.LabelFixup>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC620C Offset: 0xC620C VA: 0xC620C
	|-Array.InternalEnumerator<ILTokenInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6258 Offset: 0xC6258 VA: 0xC6258
	|-Array.InternalEnumerator<MonoResource>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC62A4 Offset: 0xC62A4 VA: 0xC62A4
	|-Array.InternalEnumerator<MonoWin32Resource>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC62F0 Offset: 0xC62F0 VA: 0xC62F0
	|-Array.InternalEnumerator<RefEmitPermissionSet>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC633C Offset: 0xC633C VA: 0xC633C
	|-Array.InternalEnumerator<ParameterModifier>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC637C Offset: 0xC637C VA: 0xC637C
	|-Array.InternalEnumerator<ResourceReader.ResourceCacheItem>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC63C8 Offset: 0xC63C8 VA: 0xC63C8
	|-Array.InternalEnumerator<ResourceReader.ResourceInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6414 Offset: 0xC6414 VA: 0xC6414
	|-Array.InternalEnumerator<TypeTag>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6454 Offset: 0xC6454 VA: 0xC6454
	|-Array.InternalEnumerator<sbyte>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6494 Offset: 0xC6494 VA: 0xC6494
	|-Array.InternalEnumerator<X509ChainStatus>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC64E0 Offset: 0xC64E0 VA: 0xC64E0
	|-Array.InternalEnumerator<float>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6520 Offset: 0xC6520 VA: 0xC6520
	|-Array.InternalEnumerator<Mark>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC656C Offset: 0xC656C VA: 0xC656C
	|-Array.InternalEnumerator<TimeSpan>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC65B8 Offset: 0xC65B8 VA: 0xC65B8
	|-Array.InternalEnumerator<ushort>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC65F8 Offset: 0xC65F8 VA: 0xC65F8
	|-Array.InternalEnumerator<uint>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6638 Offset: 0xC6638 VA: 0xC6638
	|-Array.InternalEnumerator<ulong>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6678 Offset: 0xC6678 VA: 0xC6678
	|-Array.InternalEnumerator<Uri.UriScheme>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC66C4 Offset: 0xC66C4 VA: 0xC66C4
	|-Array.InternalEnumerator<BeforeRenderHelper.OrderBlock>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6710 Offset: 0xC6710 VA: 0xC6710
	|-Array.InternalEnumerator<Color32>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6750 Offset: 0xC6750 VA: 0xC6750
	|-Array.InternalEnumerator<ContactPoint2D>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC679C Offset: 0xC679C VA: 0xC679C
	|-Array.InternalEnumerator<ContactPoint>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC67E8 Offset: 0xC67E8 VA: 0xC67E8
	|-Array.InternalEnumerator<RaycastResult>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6834 Offset: 0xC6834 VA: 0xC6834
	|-Array.InternalEnumerator<PlayerLoopSystem>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6880 Offset: 0xC6880 VA: 0xC6880
	|-Array.InternalEnumerator<Keyframe>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC68CC Offset: 0xC68CC VA: 0xC68CC
	|-Array.InternalEnumerator<PlayableBinding>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6918 Offset: 0xC6918 VA: 0xC6918
	|-Array.InternalEnumerator<RaycastHit2D>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6964 Offset: 0xC6964 VA: 0xC6964
	|-Array.InternalEnumerator<RaycastHit>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC69B0 Offset: 0xC69B0 VA: 0xC69B0
	|-Array.InternalEnumerator<SendMouseEvents.HitInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC69FC Offset: 0xC69FC VA: 0xC69FC
	|-Array.InternalEnumerator<InputField.ContentType>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6A3C Offset: 0xC6A3C VA: 0xC6A3C
	|-Array.InternalEnumerator<UICharInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6A88 Offset: 0xC6A88 VA: 0xC6A88
	|-Array.InternalEnumerator<UILineInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6AD4 Offset: 0xC6AD4 VA: 0xC6AD4
	|-Array.InternalEnumerator<UIVertex>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6B20 Offset: 0xC6B20 VA: 0xC6B20
	|-Array.InternalEnumerator<UnitySynchronizationContext.WorkRequest>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6B6C Offset: 0xC6B6C VA: 0xC6B6C
	|-Array.InternalEnumerator<Vector2>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6BB8 Offset: 0xC6BB8 VA: 0xC6BB8
	|-Array.InternalEnumerator<Vector3>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6C04 Offset: 0xC6C04 VA: 0xC6C04
	|-Array.InternalEnumerator<Vector4>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6C50 Offset: 0xC6C50 VA: 0xC6C50
	|-Array.InternalEnumerator<jvalue>.System.Collections.IEnumerator.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC5AD4 Offset: 0xC5AD4 VA: 0xC5AD4
	|-Array.InternalEnumerator<CodePointIndexer.TableRange>.Dispose
	|
	|-RVA: 0xC5B20 Offset: 0xC5B20 VA: 0xC5B20
	|-Array.InternalEnumerator<ClientCertificateType>.Dispose
	|
	|-RVA: 0xC5B60 Offset: 0xC5B60 VA: 0xC5B60
	|-Array.InternalEnumerator<bool>.Dispose
	|
	|-RVA: 0xC5BA0 Offset: 0xC5BA0 VA: 0xC5BA0
	|-Array.InternalEnumerator<byte>.Dispose
	|
	|-RVA: 0xC5BE0 Offset: 0xC5BE0 VA: 0xC5BE0
	|-Array.InternalEnumerator<char>.Dispose
	|
	|-RVA: 0xC5C20 Offset: 0xC5C20 VA: 0xC5C20
	|-Array.InternalEnumerator<DictionaryEntry>.Dispose
	|
	|-RVA: 0xC5C6C Offset: 0xC5C6C VA: 0xC5C6C
	|-Array.InternalEnumerator<HashSet.Link<object>>.Dispose
	|
	|-RVA: 0xC5CB8 Offset: 0xC5CB8 VA: 0xC5CB8
	|-Array.InternalEnumerator<KeyValuePair<int, object>>.Dispose
	|
	|-RVA: 0xC5D04 Offset: 0xC5D04 VA: 0xC5D04
	|-Array.InternalEnumerator<KeyValuePair<object, bool>>.Dispose
	|
	|-RVA: 0xC5D50 Offset: 0xC5D50 VA: 0xC5D50
	|-Array.InternalEnumerator<KeyValuePair<object, int>>.Dispose
	|
	|-RVA: 0xC5D9C Offset: 0xC5D9C VA: 0xC5D9C
	|-Array.InternalEnumerator<KeyValuePair<object, object>>.Dispose
	|
	|-RVA: 0xC5DE8 Offset: 0xC5DE8 VA: 0xC5DE8
	|-Array.InternalEnumerator<Link>.Dispose
	|
	|-RVA: 0xC5E34 Offset: 0xC5E34 VA: 0xC5E34
	|-Array.InternalEnumerator<Hashtable.Slot>.Dispose
	|
	|-RVA: 0xC5E80 Offset: 0xC5E80 VA: 0xC5E80
	|-Array.InternalEnumerator<SortedList.Slot>.Dispose
	|
	|-RVA: 0xC5ECC Offset: 0xC5ECC VA: 0xC5ECC
	|-Array.InternalEnumerator<DateTime>.Dispose
	|
	|-RVA: 0xC5F18 Offset: 0xC5F18 VA: 0xC5F18
	|-Array.InternalEnumerator<Decimal>.Dispose
	|
	|-RVA: 0xC5F64 Offset: 0xC5F64 VA: 0xC5F64
	|-Array.InternalEnumerator<double>.Dispose
	|
	|-RVA: 0xC5FA4 Offset: 0xC5FA4 VA: 0xC5FA4
	|-Array.InternalEnumerator<short>.Dispose
	|
	|-RVA: 0xC5FE4 Offset: 0xC5FE4 VA: 0xC5FE4
	|-Array.InternalEnumerator<int>.Dispose
	|
	|-RVA: 0xC6024 Offset: 0xC6024 VA: 0xC6024
	|-Array.InternalEnumerator<long>.Dispose
	|
	|-RVA: 0xC6064 Offset: 0xC6064 VA: 0xC6064
	|-Array.InternalEnumerator<IntPtr>.Dispose
	|
	|-RVA: 0xC60A4 Offset: 0xC60A4 VA: 0xC60A4
	|-Array.InternalEnumerator<object>.Dispose
	|
	|-RVA: 0xC60E4 Offset: 0xC60E4 VA: 0xC60E4
	|-Array.InternalEnumerator<CustomAttributeNamedArgument>.Dispose
	|
	|-RVA: 0xC6130 Offset: 0xC6130 VA: 0xC6130
	|-Array.InternalEnumerator<CustomAttributeTypedArgument>.Dispose
	|
	|-RVA: 0xC617C Offset: 0xC617C VA: 0xC617C
	|-Array.InternalEnumerator<ILGenerator.LabelData>.Dispose
	|
	|-RVA: 0xC61C8 Offset: 0xC61C8 VA: 0xC61C8
	|-Array.InternalEnumerator<ILGenerator.LabelFixup>.Dispose
	|
	|-RVA: 0xC6214 Offset: 0xC6214 VA: 0xC6214
	|-Array.InternalEnumerator<ILTokenInfo>.Dispose
	|
	|-RVA: 0xC6260 Offset: 0xC6260 VA: 0xC6260
	|-Array.InternalEnumerator<MonoResource>.Dispose
	|
	|-RVA: 0xC62AC Offset: 0xC62AC VA: 0xC62AC
	|-Array.InternalEnumerator<MonoWin32Resource>.Dispose
	|
	|-RVA: 0xC62F8 Offset: 0xC62F8 VA: 0xC62F8
	|-Array.InternalEnumerator<RefEmitPermissionSet>.Dispose
	|
	|-RVA: 0xC6344 Offset: 0xC6344 VA: 0xC6344
	|-Array.InternalEnumerator<ParameterModifier>.Dispose
	|
	|-RVA: 0xC6384 Offset: 0xC6384 VA: 0xC6384
	|-Array.InternalEnumerator<ResourceReader.ResourceCacheItem>.Dispose
	|
	|-RVA: 0xC63D0 Offset: 0xC63D0 VA: 0xC63D0
	|-Array.InternalEnumerator<ResourceReader.ResourceInfo>.Dispose
	|
	|-RVA: 0xC641C Offset: 0xC641C VA: 0xC641C
	|-Array.InternalEnumerator<TypeTag>.Dispose
	|
	|-RVA: 0xC645C Offset: 0xC645C VA: 0xC645C
	|-Array.InternalEnumerator<sbyte>.Dispose
	|
	|-RVA: 0xC649C Offset: 0xC649C VA: 0xC649C
	|-Array.InternalEnumerator<X509ChainStatus>.Dispose
	|
	|-RVA: 0xC64E8 Offset: 0xC64E8 VA: 0xC64E8
	|-Array.InternalEnumerator<float>.Dispose
	|
	|-RVA: 0xC6528 Offset: 0xC6528 VA: 0xC6528
	|-Array.InternalEnumerator<Mark>.Dispose
	|
	|-RVA: 0xC6574 Offset: 0xC6574 VA: 0xC6574
	|-Array.InternalEnumerator<TimeSpan>.Dispose
	|
	|-RVA: 0xC65C0 Offset: 0xC65C0 VA: 0xC65C0
	|-Array.InternalEnumerator<ushort>.Dispose
	|
	|-RVA: 0xC6600 Offset: 0xC6600 VA: 0xC6600
	|-Array.InternalEnumerator<uint>.Dispose
	|
	|-RVA: 0xC6640 Offset: 0xC6640 VA: 0xC6640
	|-Array.InternalEnumerator<ulong>.Dispose
	|
	|-RVA: 0xC6680 Offset: 0xC6680 VA: 0xC6680
	|-Array.InternalEnumerator<Uri.UriScheme>.Dispose
	|
	|-RVA: 0xC66CC Offset: 0xC66CC VA: 0xC66CC
	|-Array.InternalEnumerator<BeforeRenderHelper.OrderBlock>.Dispose
	|
	|-RVA: 0xC6718 Offset: 0xC6718 VA: 0xC6718
	|-Array.InternalEnumerator<Color32>.Dispose
	|
	|-RVA: 0xC6758 Offset: 0xC6758 VA: 0xC6758
	|-Array.InternalEnumerator<ContactPoint2D>.Dispose
	|
	|-RVA: 0xC67A4 Offset: 0xC67A4 VA: 0xC67A4
	|-Array.InternalEnumerator<ContactPoint>.Dispose
	|
	|-RVA: 0xC67F0 Offset: 0xC67F0 VA: 0xC67F0
	|-Array.InternalEnumerator<RaycastResult>.Dispose
	|
	|-RVA: 0xC683C Offset: 0xC683C VA: 0xC683C
	|-Array.InternalEnumerator<PlayerLoopSystem>.Dispose
	|
	|-RVA: 0xC6888 Offset: 0xC6888 VA: 0xC6888
	|-Array.InternalEnumerator<Keyframe>.Dispose
	|
	|-RVA: 0xC68D4 Offset: 0xC68D4 VA: 0xC68D4
	|-Array.InternalEnumerator<PlayableBinding>.Dispose
	|
	|-RVA: 0xC6920 Offset: 0xC6920 VA: 0xC6920
	|-Array.InternalEnumerator<RaycastHit2D>.Dispose
	|
	|-RVA: 0xC696C Offset: 0xC696C VA: 0xC696C
	|-Array.InternalEnumerator<RaycastHit>.Dispose
	|
	|-RVA: 0xC69B8 Offset: 0xC69B8 VA: 0xC69B8
	|-Array.InternalEnumerator<SendMouseEvents.HitInfo>.Dispose
	|
	|-RVA: 0xC6A04 Offset: 0xC6A04 VA: 0xC6A04
	|-Array.InternalEnumerator<InputField.ContentType>.Dispose
	|
	|-RVA: 0xC6A44 Offset: 0xC6A44 VA: 0xC6A44
	|-Array.InternalEnumerator<UICharInfo>.Dispose
	|
	|-RVA: 0xC6A90 Offset: 0xC6A90 VA: 0xC6A90
	|-Array.InternalEnumerator<UILineInfo>.Dispose
	|
	|-RVA: 0xC6ADC Offset: 0xC6ADC VA: 0xC6ADC
	|-Array.InternalEnumerator<UIVertex>.Dispose
	|
	|-RVA: 0xC6B28 Offset: 0xC6B28 VA: 0xC6B28
	|-Array.InternalEnumerator<UnitySynchronizationContext.WorkRequest>.Dispose
	|
	|-RVA: 0xC6B74 Offset: 0xC6B74 VA: 0xC6B74
	|-Array.InternalEnumerator<Vector2>.Dispose
	|
	|-RVA: 0xC6BC0 Offset: 0xC6BC0 VA: 0xC6BC0
	|-Array.InternalEnumerator<Vector3>.Dispose
	|
	|-RVA: 0xC6C0C Offset: 0xC6C0C VA: 0xC6C0C
	|-Array.InternalEnumerator<Vector4>.Dispose
	|
	|-RVA: 0xC6C58 Offset: 0xC6C58 VA: 0xC6C58
	|-Array.InternalEnumerator<jvalue>.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC5AE0 Offset: 0xC5AE0 VA: 0xC5AE0
	|-Array.InternalEnumerator<CodePointIndexer.TableRange>.MoveNext
	|
	|-RVA: 0xC5B2C Offset: 0xC5B2C VA: 0xC5B2C
	|-Array.InternalEnumerator<ClientCertificateType>.MoveNext
	|
	|-RVA: 0xC5B6C Offset: 0xC5B6C VA: 0xC5B6C
	|-Array.InternalEnumerator<bool>.MoveNext
	|
	|-RVA: 0xC5BAC Offset: 0xC5BAC VA: 0xC5BAC
	|-Array.InternalEnumerator<byte>.MoveNext
	|
	|-RVA: 0xC5BEC Offset: 0xC5BEC VA: 0xC5BEC
	|-Array.InternalEnumerator<char>.MoveNext
	|
	|-RVA: 0xC5C2C Offset: 0xC5C2C VA: 0xC5C2C
	|-Array.InternalEnumerator<DictionaryEntry>.MoveNext
	|
	|-RVA: 0xC5C78 Offset: 0xC5C78 VA: 0xC5C78
	|-Array.InternalEnumerator<HashSet.Link<object>>.MoveNext
	|
	|-RVA: 0xC5CC4 Offset: 0xC5CC4 VA: 0xC5CC4
	|-Array.InternalEnumerator<KeyValuePair<int, object>>.MoveNext
	|
	|-RVA: 0xC5D10 Offset: 0xC5D10 VA: 0xC5D10
	|-Array.InternalEnumerator<KeyValuePair<object, bool>>.MoveNext
	|
	|-RVA: 0xC5D5C Offset: 0xC5D5C VA: 0xC5D5C
	|-Array.InternalEnumerator<KeyValuePair<object, int>>.MoveNext
	|
	|-RVA: 0xC5DA8 Offset: 0xC5DA8 VA: 0xC5DA8
	|-Array.InternalEnumerator<KeyValuePair<object, object>>.MoveNext
	|
	|-RVA: 0xC5DF4 Offset: 0xC5DF4 VA: 0xC5DF4
	|-Array.InternalEnumerator<Link>.MoveNext
	|
	|-RVA: 0xC5E40 Offset: 0xC5E40 VA: 0xC5E40
	|-Array.InternalEnumerator<Hashtable.Slot>.MoveNext
	|
	|-RVA: 0xC5E8C Offset: 0xC5E8C VA: 0xC5E8C
	|-Array.InternalEnumerator<SortedList.Slot>.MoveNext
	|
	|-RVA: 0xC5ED8 Offset: 0xC5ED8 VA: 0xC5ED8
	|-Array.InternalEnumerator<DateTime>.MoveNext
	|
	|-RVA: 0xC5F24 Offset: 0xC5F24 VA: 0xC5F24
	|-Array.InternalEnumerator<Decimal>.MoveNext
	|
	|-RVA: 0xC5F70 Offset: 0xC5F70 VA: 0xC5F70
	|-Array.InternalEnumerator<double>.MoveNext
	|
	|-RVA: 0xC5FB0 Offset: 0xC5FB0 VA: 0xC5FB0
	|-Array.InternalEnumerator<short>.MoveNext
	|
	|-RVA: 0xC5FF0 Offset: 0xC5FF0 VA: 0xC5FF0
	|-Array.InternalEnumerator<int>.MoveNext
	|
	|-RVA: 0xC6030 Offset: 0xC6030 VA: 0xC6030
	|-Array.InternalEnumerator<long>.MoveNext
	|
	|-RVA: 0xC6070 Offset: 0xC6070 VA: 0xC6070
	|-Array.InternalEnumerator<IntPtr>.MoveNext
	|
	|-RVA: 0xC60B0 Offset: 0xC60B0 VA: 0xC60B0
	|-Array.InternalEnumerator<object>.MoveNext
	|
	|-RVA: 0xC60F0 Offset: 0xC60F0 VA: 0xC60F0
	|-Array.InternalEnumerator<CustomAttributeNamedArgument>.MoveNext
	|
	|-RVA: 0xC613C Offset: 0xC613C VA: 0xC613C
	|-Array.InternalEnumerator<CustomAttributeTypedArgument>.MoveNext
	|
	|-RVA: 0xC6188 Offset: 0xC6188 VA: 0xC6188
	|-Array.InternalEnumerator<ILGenerator.LabelData>.MoveNext
	|
	|-RVA: 0xC61D4 Offset: 0xC61D4 VA: 0xC61D4
	|-Array.InternalEnumerator<ILGenerator.LabelFixup>.MoveNext
	|
	|-RVA: 0xC6220 Offset: 0xC6220 VA: 0xC6220
	|-Array.InternalEnumerator<ILTokenInfo>.MoveNext
	|
	|-RVA: 0xC626C Offset: 0xC626C VA: 0xC626C
	|-Array.InternalEnumerator<MonoResource>.MoveNext
	|
	|-RVA: 0xC62B8 Offset: 0xC62B8 VA: 0xC62B8
	|-Array.InternalEnumerator<MonoWin32Resource>.MoveNext
	|
	|-RVA: 0xC6304 Offset: 0xC6304 VA: 0xC6304
	|-Array.InternalEnumerator<RefEmitPermissionSet>.MoveNext
	|
	|-RVA: 0xC6350 Offset: 0xC6350 VA: 0xC6350
	|-Array.InternalEnumerator<ParameterModifier>.MoveNext
	|
	|-RVA: 0xC6390 Offset: 0xC6390 VA: 0xC6390
	|-Array.InternalEnumerator<ResourceReader.ResourceCacheItem>.MoveNext
	|
	|-RVA: 0xC63DC Offset: 0xC63DC VA: 0xC63DC
	|-Array.InternalEnumerator<ResourceReader.ResourceInfo>.MoveNext
	|
	|-RVA: 0xC6428 Offset: 0xC6428 VA: 0xC6428
	|-Array.InternalEnumerator<TypeTag>.MoveNext
	|
	|-RVA: 0xC6468 Offset: 0xC6468 VA: 0xC6468
	|-Array.InternalEnumerator<sbyte>.MoveNext
	|
	|-RVA: 0xC64A8 Offset: 0xC64A8 VA: 0xC64A8
	|-Array.InternalEnumerator<X509ChainStatus>.MoveNext
	|
	|-RVA: 0xC64F4 Offset: 0xC64F4 VA: 0xC64F4
	|-Array.InternalEnumerator<float>.MoveNext
	|
	|-RVA: 0xC6534 Offset: 0xC6534 VA: 0xC6534
	|-Array.InternalEnumerator<Mark>.MoveNext
	|
	|-RVA: 0xC6580 Offset: 0xC6580 VA: 0xC6580
	|-Array.InternalEnumerator<TimeSpan>.MoveNext
	|
	|-RVA: 0xC65CC Offset: 0xC65CC VA: 0xC65CC
	|-Array.InternalEnumerator<ushort>.MoveNext
	|
	|-RVA: 0xC660C Offset: 0xC660C VA: 0xC660C
	|-Array.InternalEnumerator<uint>.MoveNext
	|
	|-RVA: 0xC664C Offset: 0xC664C VA: 0xC664C
	|-Array.InternalEnumerator<ulong>.MoveNext
	|
	|-RVA: 0xC668C Offset: 0xC668C VA: 0xC668C
	|-Array.InternalEnumerator<Uri.UriScheme>.MoveNext
	|
	|-RVA: 0xC66D8 Offset: 0xC66D8 VA: 0xC66D8
	|-Array.InternalEnumerator<BeforeRenderHelper.OrderBlock>.MoveNext
	|
	|-RVA: 0xC6724 Offset: 0xC6724 VA: 0xC6724
	|-Array.InternalEnumerator<Color32>.MoveNext
	|
	|-RVA: 0xC6764 Offset: 0xC6764 VA: 0xC6764
	|-Array.InternalEnumerator<ContactPoint2D>.MoveNext
	|
	|-RVA: 0xC67B0 Offset: 0xC67B0 VA: 0xC67B0
	|-Array.InternalEnumerator<ContactPoint>.MoveNext
	|
	|-RVA: 0xC67FC Offset: 0xC67FC VA: 0xC67FC
	|-Array.InternalEnumerator<RaycastResult>.MoveNext
	|
	|-RVA: 0xC6848 Offset: 0xC6848 VA: 0xC6848
	|-Array.InternalEnumerator<PlayerLoopSystem>.MoveNext
	|
	|-RVA: 0xC6894 Offset: 0xC6894 VA: 0xC6894
	|-Array.InternalEnumerator<Keyframe>.MoveNext
	|
	|-RVA: 0xC68E0 Offset: 0xC68E0 VA: 0xC68E0
	|-Array.InternalEnumerator<PlayableBinding>.MoveNext
	|
	|-RVA: 0xC692C Offset: 0xC692C VA: 0xC692C
	|-Array.InternalEnumerator<RaycastHit2D>.MoveNext
	|
	|-RVA: 0xC6978 Offset: 0xC6978 VA: 0xC6978
	|-Array.InternalEnumerator<RaycastHit>.MoveNext
	|
	|-RVA: 0xC69C4 Offset: 0xC69C4 VA: 0xC69C4
	|-Array.InternalEnumerator<SendMouseEvents.HitInfo>.MoveNext
	|
	|-RVA: 0xC6A10 Offset: 0xC6A10 VA: 0xC6A10
	|-Array.InternalEnumerator<InputField.ContentType>.MoveNext
	|
	|-RVA: 0xC6A50 Offset: 0xC6A50 VA: 0xC6A50
	|-Array.InternalEnumerator<UICharInfo>.MoveNext
	|
	|-RVA: 0xC6A9C Offset: 0xC6A9C VA: 0xC6A9C
	|-Array.InternalEnumerator<UILineInfo>.MoveNext
	|
	|-RVA: 0xC6AE8 Offset: 0xC6AE8 VA: 0xC6AE8
	|-Array.InternalEnumerator<UIVertex>.MoveNext
	|
	|-RVA: 0xC6B34 Offset: 0xC6B34 VA: 0xC6B34
	|-Array.InternalEnumerator<UnitySynchronizationContext.WorkRequest>.MoveNext
	|
	|-RVA: 0xC6B80 Offset: 0xC6B80 VA: 0xC6B80
	|-Array.InternalEnumerator<Vector2>.MoveNext
	|
	|-RVA: 0xC6BCC Offset: 0xC6BCC VA: 0xC6BCC
	|-Array.InternalEnumerator<Vector3>.MoveNext
	|
	|-RVA: 0xC6C18 Offset: 0xC6C18 VA: 0xC6C18
	|-Array.InternalEnumerator<Vector4>.MoveNext
	|
	|-RVA: 0xC6C64 Offset: 0xC6C64 VA: 0xC6C64
	|-Array.InternalEnumerator<jvalue>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public T get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC5AE8 Offset: 0xC5AE8 VA: 0xC5AE8
	|-Array.InternalEnumerator<CodePointIndexer.TableRange>.get_Current
	|
	|-RVA: 0xC5B34 Offset: 0xC5B34 VA: 0xC5B34
	|-Array.InternalEnumerator<ClientCertificateType>.get_Current
	|
	|-RVA: 0xC5B74 Offset: 0xC5B74 VA: 0xC5B74
	|-Array.InternalEnumerator<bool>.get_Current
	|
	|-RVA: 0xC5BB4 Offset: 0xC5BB4 VA: 0xC5BB4
	|-Array.InternalEnumerator<byte>.get_Current
	|
	|-RVA: 0xC5BF4 Offset: 0xC5BF4 VA: 0xC5BF4
	|-Array.InternalEnumerator<char>.get_Current
	|
	|-RVA: 0xC5C34 Offset: 0xC5C34 VA: 0xC5C34
	|-Array.InternalEnumerator<DictionaryEntry>.get_Current
	|
	|-RVA: 0xC5C80 Offset: 0xC5C80 VA: 0xC5C80
	|-Array.InternalEnumerator<HashSet.Link<object>>.get_Current
	|
	|-RVA: 0xC5CCC Offset: 0xC5CCC VA: 0xC5CCC
	|-Array.InternalEnumerator<KeyValuePair<int, object>>.get_Current
	|
	|-RVA: 0xC5D18 Offset: 0xC5D18 VA: 0xC5D18
	|-Array.InternalEnumerator<KeyValuePair<object, bool>>.get_Current
	|
	|-RVA: 0xC5D64 Offset: 0xC5D64 VA: 0xC5D64
	|-Array.InternalEnumerator<KeyValuePair<object, int>>.get_Current
	|
	|-RVA: 0xC5DB0 Offset: 0xC5DB0 VA: 0xC5DB0
	|-Array.InternalEnumerator<KeyValuePair<object, object>>.get_Current
	|
	|-RVA: 0xC5DFC Offset: 0xC5DFC VA: 0xC5DFC
	|-Array.InternalEnumerator<Link>.get_Current
	|
	|-RVA: 0xC5E48 Offset: 0xC5E48 VA: 0xC5E48
	|-Array.InternalEnumerator<Hashtable.Slot>.get_Current
	|
	|-RVA: 0xC5E94 Offset: 0xC5E94 VA: 0xC5E94
	|-Array.InternalEnumerator<SortedList.Slot>.get_Current
	|
	|-RVA: 0xC5EE0 Offset: 0xC5EE0 VA: 0xC5EE0
	|-Array.InternalEnumerator<DateTime>.get_Current
	|
	|-RVA: 0xC5F2C Offset: 0xC5F2C VA: 0xC5F2C
	|-Array.InternalEnumerator<Decimal>.get_Current
	|
	|-RVA: 0xC5F78 Offset: 0xC5F78 VA: 0xC5F78
	|-Array.InternalEnumerator<double>.get_Current
	|
	|-RVA: 0xC5FB8 Offset: 0xC5FB8 VA: 0xC5FB8
	|-Array.InternalEnumerator<short>.get_Current
	|
	|-RVA: 0xC5FF8 Offset: 0xC5FF8 VA: 0xC5FF8
	|-Array.InternalEnumerator<int>.get_Current
	|
	|-RVA: 0xC6038 Offset: 0xC6038 VA: 0xC6038
	|-Array.InternalEnumerator<long>.get_Current
	|
	|-RVA: 0xC6078 Offset: 0xC6078 VA: 0xC6078
	|-Array.InternalEnumerator<IntPtr>.get_Current
	|
	|-RVA: 0xC60B8 Offset: 0xC60B8 VA: 0xC60B8
	|-Array.InternalEnumerator<object>.get_Current
	|
	|-RVA: 0xC60F8 Offset: 0xC60F8 VA: 0xC60F8
	|-Array.InternalEnumerator<CustomAttributeNamedArgument>.get_Current
	|
	|-RVA: 0xC6144 Offset: 0xC6144 VA: 0xC6144
	|-Array.InternalEnumerator<CustomAttributeTypedArgument>.get_Current
	|
	|-RVA: 0xC6190 Offset: 0xC6190 VA: 0xC6190
	|-Array.InternalEnumerator<ILGenerator.LabelData>.get_Current
	|
	|-RVA: 0xC61DC Offset: 0xC61DC VA: 0xC61DC
	|-Array.InternalEnumerator<ILGenerator.LabelFixup>.get_Current
	|
	|-RVA: 0xC6228 Offset: 0xC6228 VA: 0xC6228
	|-Array.InternalEnumerator<ILTokenInfo>.get_Current
	|
	|-RVA: 0xC6274 Offset: 0xC6274 VA: 0xC6274
	|-Array.InternalEnumerator<MonoResource>.get_Current
	|
	|-RVA: 0xC62C0 Offset: 0xC62C0 VA: 0xC62C0
	|-Array.InternalEnumerator<MonoWin32Resource>.get_Current
	|
	|-RVA: 0xC630C Offset: 0xC630C VA: 0xC630C
	|-Array.InternalEnumerator<RefEmitPermissionSet>.get_Current
	|
	|-RVA: 0xC6358 Offset: 0xC6358 VA: 0xC6358
	|-Array.InternalEnumerator<ParameterModifier>.get_Current
	|
	|-RVA: 0xC6398 Offset: 0xC6398 VA: 0xC6398
	|-Array.InternalEnumerator<ResourceReader.ResourceCacheItem>.get_Current
	|
	|-RVA: 0xC63E4 Offset: 0xC63E4 VA: 0xC63E4
	|-Array.InternalEnumerator<ResourceReader.ResourceInfo>.get_Current
	|
	|-RVA: 0xC6430 Offset: 0xC6430 VA: 0xC6430
	|-Array.InternalEnumerator<TypeTag>.get_Current
	|
	|-RVA: 0xC6470 Offset: 0xC6470 VA: 0xC6470
	|-Array.InternalEnumerator<sbyte>.get_Current
	|
	|-RVA: 0xC64B0 Offset: 0xC64B0 VA: 0xC64B0
	|-Array.InternalEnumerator<X509ChainStatus>.get_Current
	|
	|-RVA: 0xC64FC Offset: 0xC64FC VA: 0xC64FC
	|-Array.InternalEnumerator<float>.get_Current
	|
	|-RVA: 0xC653C Offset: 0xC653C VA: 0xC653C
	|-Array.InternalEnumerator<Mark>.get_Current
	|
	|-RVA: 0xC6588 Offset: 0xC6588 VA: 0xC6588
	|-Array.InternalEnumerator<TimeSpan>.get_Current
	|
	|-RVA: 0xC65D4 Offset: 0xC65D4 VA: 0xC65D4
	|-Array.InternalEnumerator<ushort>.get_Current
	|
	|-RVA: 0xC6614 Offset: 0xC6614 VA: 0xC6614
	|-Array.InternalEnumerator<uint>.get_Current
	|
	|-RVA: 0xC6654 Offset: 0xC6654 VA: 0xC6654
	|-Array.InternalEnumerator<ulong>.get_Current
	|
	|-RVA: 0xC6694 Offset: 0xC6694 VA: 0xC6694
	|-Array.InternalEnumerator<Uri.UriScheme>.get_Current
	|
	|-RVA: 0xC66E0 Offset: 0xC66E0 VA: 0xC66E0
	|-Array.InternalEnumerator<BeforeRenderHelper.OrderBlock>.get_Current
	|
	|-RVA: 0xC672C Offset: 0xC672C VA: 0xC672C
	|-Array.InternalEnumerator<Color32>.get_Current
	|
	|-RVA: 0xC676C Offset: 0xC676C VA: 0xC676C
	|-Array.InternalEnumerator<ContactPoint2D>.get_Current
	|
	|-RVA: 0xC67B8 Offset: 0xC67B8 VA: 0xC67B8
	|-Array.InternalEnumerator<ContactPoint>.get_Current
	|
	|-RVA: 0xC6804 Offset: 0xC6804 VA: 0xC6804
	|-Array.InternalEnumerator<RaycastResult>.get_Current
	|
	|-RVA: 0xC6850 Offset: 0xC6850 VA: 0xC6850
	|-Array.InternalEnumerator<PlayerLoopSystem>.get_Current
	|
	|-RVA: 0xC689C Offset: 0xC689C VA: 0xC689C
	|-Array.InternalEnumerator<Keyframe>.get_Current
	|
	|-RVA: 0xC68E8 Offset: 0xC68E8 VA: 0xC68E8
	|-Array.InternalEnumerator<PlayableBinding>.get_Current
	|
	|-RVA: 0xC6934 Offset: 0xC6934 VA: 0xC6934
	|-Array.InternalEnumerator<RaycastHit2D>.get_Current
	|
	|-RVA: 0xC6980 Offset: 0xC6980 VA: 0xC6980
	|-Array.InternalEnumerator<RaycastHit>.get_Current
	|
	|-RVA: 0xC69CC Offset: 0xC69CC VA: 0xC69CC
	|-Array.InternalEnumerator<SendMouseEvents.HitInfo>.get_Current
	|
	|-RVA: 0xC6A18 Offset: 0xC6A18 VA: 0xC6A18
	|-Array.InternalEnumerator<InputField.ContentType>.get_Current
	|
	|-RVA: 0xC6A58 Offset: 0xC6A58 VA: 0xC6A58
	|-Array.InternalEnumerator<UICharInfo>.get_Current
	|
	|-RVA: 0xC6AA4 Offset: 0xC6AA4 VA: 0xC6AA4
	|-Array.InternalEnumerator<UILineInfo>.get_Current
	|
	|-RVA: 0xC6AF0 Offset: 0xC6AF0 VA: 0xC6AF0
	|-Array.InternalEnumerator<UIVertex>.get_Current
	|
	|-RVA: 0xC6B3C Offset: 0xC6B3C VA: 0xC6B3C
	|-Array.InternalEnumerator<UnitySynchronizationContext.WorkRequest>.get_Current
	|
	|-RVA: 0xC6B88 Offset: 0xC6B88 VA: 0xC6B88
	|-Array.InternalEnumerator<Vector2>.get_Current
	|
	|-RVA: 0xC6BD4 Offset: 0xC6BD4 VA: 0xC6BD4
	|-Array.InternalEnumerator<Vector3>.get_Current
	|
	|-RVA: 0xC6C20 Offset: 0xC6C20 VA: 0xC6C20
	|-Array.InternalEnumerator<Vector4>.get_Current
	|
	|-RVA: 0xC6C6C Offset: 0xC6C6C VA: 0xC6C6C
	|-Array.InternalEnumerator<jvalue>.get_Current
	*/
}

// Namespace: 
internal class Array.SimpleEnumerator : IEnumerator, ICloneable // TypeDefIndex: 42
{
	// Fields
	private Array enumeratee; // 0x8
	private int currentpos; // 0xC
	private int length; // 0x10

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x472D00 Offset: 0x472D00 VA: 0x472D00
	public void .ctor(Array arrayToEnumerate) { }

	// RVA: 0x472D48 Offset: 0x472D48 VA: 0x472D48 Slot: 4
	public object get_Current() { }

	// RVA: 0x472E84 Offset: 0x472E84 VA: 0x472E84 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x472EA8 Offset: 0x472EA8 VA: 0x472EA8 Slot: 6
	public void Reset() { }

	// RVA: 0x472EB4 Offset: 0x472EB4 VA: 0x472EB4 Slot: 7
	public object Clone() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0x93700 Offset: 0x93700 VA: 0x93700
private class Array.ArrayReadOnlyList<T> : IEnumerable, IList<T>, ICollection<T>, IEnumerable<T> // TypeDefIndex: 43
{
	// Fields
	private T[] array; // 0x0

	// Properties
	public T Item { get; set; }
	public int Count { get; }
	public bool IsReadOnly { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(T[] array) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FCF20 Offset: 0x1FCF20 VA: 0x1FCF20
	|-Array.ArrayReadOnlyList<object>..ctor
	|
	|-RVA: 0x1FD51C Offset: 0x1FD51C VA: 0x1FD51C
	|-Array.ArrayReadOnlyList<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0x1FDB58 Offset: 0x1FDB58 VA: 0x1FDB58
	|-Array.ArrayReadOnlyList<CustomAttributeTypedArgument>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FCF54 Offset: 0x1FCF54 VA: 0x1FCF54
	|-Array.ArrayReadOnlyList<object>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1FD550 Offset: 0x1FD550 VA: 0x1FD550
	|-Array.ArrayReadOnlyList<CustomAttributeNamedArgument>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1FDB8C Offset: 0x1FDB8C VA: 0x1FDB8C
	|-Array.ArrayReadOnlyList<CustomAttributeTypedArgument>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public T get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FCF90 Offset: 0x1FCF90 VA: 0x1FCF90
	|-Array.ArrayReadOnlyList<object>.get_Item
	|
	|-RVA: 0x1FD58C Offset: 0x1FD58C VA: 0x1FD58C
	|-Array.ArrayReadOnlyList<CustomAttributeNamedArgument>.get_Item
	|
	|-RVA: 0x1FDBC8 Offset: 0x1FDBC8 VA: 0x1FDBC8
	|-Array.ArrayReadOnlyList<CustomAttributeTypedArgument>.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 9
	public void set_Item(int index, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FD090 Offset: 0x1FD090 VA: 0x1FD090
	|-Array.ArrayReadOnlyList<object>.set_Item
	|
	|-RVA: 0x1FD6A0 Offset: 0x1FD6A0 VA: 0x1FD6A0
	|-Array.ArrayReadOnlyList<CustomAttributeNamedArgument>.set_Item
	|
	|-RVA: 0x1FDCD8 Offset: 0x1FDCD8 VA: 0x1FDCD8
	|-Array.ArrayReadOnlyList<CustomAttributeTypedArgument>.set_Item
	*/

	// RVA: -1 Offset: -1 Slot: 10
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FD10C Offset: 0x1FD10C VA: 0x1FD10C
	|-Array.ArrayReadOnlyList<object>.get_Count
	|
	|-RVA: 0x1FD71C Offset: 0x1FD71C VA: 0x1FD71C
	|-Array.ArrayReadOnlyList<CustomAttributeNamedArgument>.get_Count
	|
	|-RVA: 0x1FDD54 Offset: 0x1FDD54 VA: 0x1FDD54
	|-Array.ArrayReadOnlyList<CustomAttributeTypedArgument>.get_Count
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public bool get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FD130 Offset: 0x1FD130 VA: 0x1FD130
	|-Array.ArrayReadOnlyList<object>.get_IsReadOnly
	|
	|-RVA: 0x1FD740 Offset: 0x1FD740 VA: 0x1FD740
	|-Array.ArrayReadOnlyList<CustomAttributeNamedArgument>.get_IsReadOnly
	|
	|-RVA: 0x1FDD78 Offset: 0x1FDD78 VA: 0x1FDD78
	|-Array.ArrayReadOnlyList<CustomAttributeTypedArgument>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public void Add(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FD138 Offset: 0x1FD138 VA: 0x1FD138
	|-Array.ArrayReadOnlyList<object>.Add
	|
	|-RVA: 0x1FD748 Offset: 0x1FD748 VA: 0x1FD748
	|-Array.ArrayReadOnlyList<CustomAttributeNamedArgument>.Add
	|
	|-RVA: 0x1FDD80 Offset: 0x1FDD80 VA: 0x1FDD80
	|-Array.ArrayReadOnlyList<CustomAttributeTypedArgument>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public void Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FD1B4 Offset: 0x1FD1B4 VA: 0x1FD1B4
	|-Array.ArrayReadOnlyList<object>.Clear
	|
	|-RVA: 0x1FD7C4 Offset: 0x1FD7C4 VA: 0x1FD7C4
	|-Array.ArrayReadOnlyList<CustomAttributeNamedArgument>.Clear
	|
	|-RVA: 0x1FDDFC Offset: 0x1FDDFC VA: 0x1FDDFC
	|-Array.ArrayReadOnlyList<CustomAttributeTypedArgument>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public bool Contains(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FD230 Offset: 0x1FD230 VA: 0x1FD230
	|-Array.ArrayReadOnlyList<object>.Contains
	|
	|-RVA: 0x1FD840 Offset: 0x1FD840 VA: 0x1FD840
	|-Array.ArrayReadOnlyList<CustomAttributeNamedArgument>.Contains
	|
	|-RVA: 0x1FDE78 Offset: 0x1FDE78 VA: 0x1FDE78
	|-Array.ArrayReadOnlyList<CustomAttributeTypedArgument>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 15
	public void CopyTo(T[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FD264 Offset: 0x1FD264 VA: 0x1FD264
	|-Array.ArrayReadOnlyList<object>.CopyTo
	|
	|-RVA: 0x1FD884 Offset: 0x1FD884 VA: 0x1FD884
	|-Array.ArrayReadOnlyList<CustomAttributeNamedArgument>.CopyTo
	|
	|-RVA: 0x1FDEAC Offset: 0x1FDEAC VA: 0x1FDEAC
	|-Array.ArrayReadOnlyList<CustomAttributeTypedArgument>.CopyTo
	*/

	[DebuggerHiddenAttribute] // RVA: 0x9C074 Offset: 0x9C074 VA: 0x9C074
	// RVA: -1 Offset: -1 Slot: 17
	public IEnumerator<T> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FD2A0 Offset: 0x1FD2A0 VA: 0x1FD2A0
	|-Array.ArrayReadOnlyList<object>.GetEnumerator
	|
	|-RVA: 0x1FD8C0 Offset: 0x1FD8C0 VA: 0x1FD8C0
	|-Array.ArrayReadOnlyList<CustomAttributeNamedArgument>.GetEnumerator
	|
	|-RVA: 0x1FDEE8 Offset: 0x1FDEE8 VA: 0x1FDEE8
	|-Array.ArrayReadOnlyList<CustomAttributeTypedArgument>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public int IndexOf(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FD310 Offset: 0x1FD310 VA: 0x1FD310
	|-Array.ArrayReadOnlyList<object>.IndexOf
	|
	|-RVA: 0x1FD930 Offset: 0x1FD930 VA: 0x1FD930
	|-Array.ArrayReadOnlyList<CustomAttributeNamedArgument>.IndexOf
	|
	|-RVA: 0x1FDF58 Offset: 0x1FDF58 VA: 0x1FDF58
	|-Array.ArrayReadOnlyList<CustomAttributeTypedArgument>.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public void Insert(int index, T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FD328 Offset: 0x1FD328 VA: 0x1FD328
	|-Array.ArrayReadOnlyList<object>.Insert
	|
	|-RVA: 0x1FD964 Offset: 0x1FD964 VA: 0x1FD964
	|-Array.ArrayReadOnlyList<CustomAttributeNamedArgument>.Insert
	|
	|-RVA: 0x1FDF70 Offset: 0x1FDF70 VA: 0x1FDF70
	|-Array.ArrayReadOnlyList<CustomAttributeTypedArgument>.Insert
	*/

	// RVA: -1 Offset: -1 Slot: 16
	public bool Remove(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FD3A4 Offset: 0x1FD3A4 VA: 0x1FD3A4
	|-Array.ArrayReadOnlyList<object>.Remove
	|
	|-RVA: 0x1FD9E0 Offset: 0x1FD9E0 VA: 0x1FD9E0
	|-Array.ArrayReadOnlyList<CustomAttributeNamedArgument>.Remove
	|
	|-RVA: 0x1FDFEC Offset: 0x1FDFEC VA: 0x1FDFEC
	|-Array.ArrayReadOnlyList<CustomAttributeTypedArgument>.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public void RemoveAt(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FD420 Offset: 0x1FD420 VA: 0x1FD420
	|-Array.ArrayReadOnlyList<object>.RemoveAt
	|
	|-RVA: 0x1FDA5C Offset: 0x1FDA5C VA: 0x1FDA5C
	|-Array.ArrayReadOnlyList<CustomAttributeNamedArgument>.RemoveAt
	|
	|-RVA: 0x1FE068 Offset: 0x1FE068 VA: 0x1FE068
	|-Array.ArrayReadOnlyList<CustomAttributeTypedArgument>.RemoveAt
	*/

	// RVA: -1 Offset: -1
	private static Exception ReadOnlyError() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FD49C Offset: 0x1FD49C VA: 0x1FD49C
	|-Array.ArrayReadOnlyList<object>.ReadOnlyError
	|
	|-RVA: 0x1FDAD8 Offset: 0x1FDAD8 VA: 0x1FDAD8
	|-Array.ArrayReadOnlyList<CustomAttributeNamedArgument>.ReadOnlyError
	|
	|-RVA: 0x1FE0E4 Offset: 0x1FE0E4 VA: 0x1FE0E4
	|-Array.ArrayReadOnlyList<CustomAttributeTypedArgument>.ReadOnlyError
	*/
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x93734 Offset: 0x93734 VA: 0x93734
private sealed class Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<T> : IEnumerator, IDisposable, IEnumerator<T> // TypeDefIndex: 44
{
	// Fields
	internal int <i>__0; // 0x0
	internal int $PC; // 0x0
	internal T $current; // 0x0
	internal Array.ArrayReadOnlyList<T> <>f__this; // 0x0

	// Properties
	private T System.Collections.Generic.IEnumerator<T>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FC8E0 Offset: 0x1FC8E0 VA: 0x1FC8E0
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<object>..ctor
	|
	|-RVA: 0x1FCAB4 Offset: 0x1FCAB4 VA: 0x1FCAB4
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0x1FCCF0 Offset: 0x1FCCF0 VA: 0x1FCCF0
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<CustomAttributeTypedArgument>..ctor
	*/

	[DebuggerHiddenAttribute] // RVA: 0x9C084 Offset: 0x9C084 VA: 0x9C084
	// RVA: -1 Offset: -1 Slot: 8
	private T System.Collections.Generic.IEnumerator<T>.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FC90C Offset: 0x1FC90C VA: 0x1FC90C
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<object>.System.Collections.Generic.IEnumerator<T>.get_Current
	|
	|-RVA: 0x1FCAE0 Offset: 0x1FCAE0 VA: 0x1FCAE0
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<CustomAttributeNamedArgument>.System.Collections.Generic.IEnumerator<T>.get_Current
	|
	|-RVA: 0x1FCD1C Offset: 0x1FCD1C VA: 0x1FCD1C
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<CustomAttributeTypedArgument>.System.Collections.Generic.IEnumerator<T>.get_Current
	*/

	[DebuggerHiddenAttribute] // RVA: 0x9C094 Offset: 0x9C094 VA: 0x9C094
	// RVA: -1 Offset: -1 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FC914 Offset: 0x1FC914 VA: 0x1FC914
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<object>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x1FCAF4 Offset: 0x1FCAF4 VA: 0x1FCAF4
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<CustomAttributeNamedArgument>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x1FCD30 Offset: 0x1FCD30 VA: 0x1FCD30
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<CustomAttributeTypedArgument>.System.Collections.IEnumerator.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FC91C Offset: 0x1FC91C VA: 0x1FC91C
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<object>.MoveNext
	|
	|-RVA: 0x1FCB44 Offset: 0x1FCB44 VA: 0x1FCB44
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<CustomAttributeNamedArgument>.MoveNext
	|
	|-RVA: 0x1FCD80 Offset: 0x1FCD80 VA: 0x1FCD80
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<CustomAttributeTypedArgument>.MoveNext
	*/

	[DebuggerHiddenAttribute] // RVA: 0x9C0A4 Offset: 0x9C0A4 VA: 0x9C0A4
	// RVA: -1 Offset: -1 Slot: 7
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FCA20 Offset: 0x1FCA20 VA: 0x1FCA20
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<object>.Dispose
	|
	|-RVA: 0x1FCC5C Offset: 0x1FCC5C VA: 0x1FCC5C
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<CustomAttributeNamedArgument>.Dispose
	|
	|-RVA: 0x1FCE8C Offset: 0x1FCE8C VA: 0x1FCE8C
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<CustomAttributeTypedArgument>.Dispose
	*/

	[DebuggerHiddenAttribute] // RVA: 0x9C0B4 Offset: 0x9C0B4 VA: 0x9C0B4
	// RVA: -1 Offset: -1 Slot: 6
	public void Reset() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FCA2C Offset: 0x1FCA2C VA: 0x1FCA2C
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<object>.Reset
	|
	|-RVA: 0x1FCC68 Offset: 0x1FCC68 VA: 0x1FCC68
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<CustomAttributeNamedArgument>.Reset
	|
	|-RVA: 0x1FCE98 Offset: 0x1FCE98 VA: 0x1FCE98
	|-Array.ArrayReadOnlyList.<GetEnumerator>c__Iterator0<CustomAttributeTypedArgument>.Reset
	*/
}

// Namespace: 
private sealed class Array.Swapper : MulticastDelegate // TypeDefIndex: 45
{
	// Methods

	// RVA: 0x472EBC Offset: 0x472EBC VA: 0x472EBC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x472ED0 Offset: 0x472ED0 VA: 0x472ED0 Slot: 11
	public virtual void Invoke(int i, int j) { }

	// RVA: 0x473118 Offset: 0x473118 VA: 0x473118 Slot: 12
	public virtual IAsyncResult BeginInvoke(int i, int j, AsyncCallback callback, object object) { }

	// RVA: 0x4731C8 Offset: 0x4731C8 VA: 0x4731C8 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x93744 Offset: 0x93744 VA: 0x93744
public interface ICollection : IEnumerable // TypeDefIndex: 46
{
	// Properties
	public abstract int Count { get; }
	public abstract bool IsSynchronized { get; }
	public abstract object SyncRoot { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int get_Count();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_IsSynchronized();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract object get_SyncRoot();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void CopyTo(Array array, int index);
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x93758 Offset: 0x93758 VA: 0x93758
[DefaultMemberAttribute] // RVA: 0x93758 Offset: 0x93758 VA: 0x93758
public interface IList : IEnumerable, ICollection // TypeDefIndex: 47
{
	// Properties
	public abstract bool IsFixedSize { get; }
	public abstract bool IsReadOnly { get; }
	public abstract object Item { get; set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_IsFixedSize();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_IsReadOnly();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract object get_Item(int index);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void set_Item(int index, object value);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int Add(object value);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void Clear();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool Contains(object value);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract int IndexOf(object value);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract void Insert(int index, object value);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract void Remove(object value);

	// RVA: -1 Offset: -1 Slot: 10
	public abstract void RemoveAt(int index);
}

// Namespace: System.Collections.Generic
[DefaultMemberAttribute] // RVA: 0x937A4 Offset: 0x937A4 VA: 0x937A4
public interface IList<T> : IEnumerable, ICollection<T>, IEnumerable<T> // TypeDefIndex: 48
{
	// Properties
	public abstract T Item { get; set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int IndexOf(T item);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IList<object>.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Insert(int index, T item);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IList<object>.Insert
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void RemoveAt(int index);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IList<object>.RemoveAt
	*/

	// RVA: -1 Offset: -1 Slot: 3
	public abstract T get_Item(int index);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IList<object>.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void set_Item(int index, T value);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IList<object>.set_Item
	*/
}

// Namespace: System.Collections.Generic
public interface ICollection<T> : IEnumerable, IEnumerable<T> // TypeDefIndex: 49
{
	// Properties
	public abstract int Count { get; }
	public abstract bool IsReadOnly { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int get_Count();
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-ICollection<object>.get_Count
	*/

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_IsReadOnly();
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-ICollection<object>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Add(T item);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-ICollection<object>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void Clear();
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-ICollection<object>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool Contains(T item);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-ICollection<object>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void CopyTo(T[] array, int arrayIndex);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-ICollection<object>.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool Remove(T item);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-ICollection<object>.Remove
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x937D8 Offset: 0x937D8 VA: 0x937D8
[Serializable]
public struct Void // TypeDefIndex: 50
{}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x937EC Offset: 0x937EC VA: 0x937EC
[ComDefaultInterfaceAttribute] // RVA: 0x937EC Offset: 0x937EC VA: 0x937EC
[ClassInterfaceAttribute] // RVA: 0x937EC Offset: 0x937EC VA: 0x937EC
[Serializable]
public abstract class Type : MemberInfo, IReflect, _Type // TypeDefIndex: 51
{
	// Fields
	internal const BindingFlags DefaultBindingFlags = 28;
	internal RuntimeTypeHandle _impl; // 0x8
	public static readonly char Delimiter; // 0x0
	public static readonly Type[] EmptyTypes; // 0x4
	public static readonly MemberFilter FilterAttribute; // 0x8
	public static readonly MemberFilter FilterName; // 0xC
	public static readonly MemberFilter FilterNameIgnoreCase; // 0x10
	public static readonly object Missing; // 0x14

	// Properties
	public abstract Assembly Assembly { get; }
	public abstract string AssemblyQualifiedName { get; }
	public TypeAttributes Attributes { get; }
	public abstract Type BaseType { get; }
	public override Type DeclaringType { get; }
	public abstract string FullName { get; }
	public bool HasElementType { get; }
	public bool IsAbstract { get; }
	public bool IsArray { get; }
	public bool IsByRef { get; }
	public bool IsClass { get; }
	public bool IsContextful { get; }
	public bool IsEnum { get; }
	public bool IsExplicitLayout { get; }
	public bool IsInterface { get; }
	public bool IsMarshalByRef { get; }
	public bool IsPointer { get; }
	public bool IsPrimitive { get; }
	public bool IsSealed { get; }
	public bool IsSerializable { get; }
	public bool IsValueType { get; }
	public override MemberTypes MemberType { get; }
	public abstract override Module Module { get; }
	public abstract string Namespace { get; }
	public override Type ReflectedType { get; }
	public virtual RuntimeTypeHandle TypeHandle { get; }
	public abstract Type UnderlyingSystemType { get; }
	internal bool IsSystemType { get; }
	public virtual bool ContainsGenericParameters { get; }
	public virtual bool IsGenericTypeDefinition { get; }
	public virtual bool IsGenericType { get; }
	public virtual bool IsGenericParameter { get; }
	public bool IsNested { get; }
	internal bool IsUserType { get; }

	// Methods

	// RVA: 0x4325D0 Offset: 0x4325D0 VA: 0x4325D0
	protected void .ctor() { }

	// RVA: 0x4325D8 Offset: 0x4325D8 VA: 0x4325D8
	private static void .cctor() { }

	// RVA: 0x432770 Offset: 0x432770 VA: 0x432770
	private static bool FilterName_impl(MemberInfo m, object filterCriteria) { }

	// RVA: 0x43296C Offset: 0x43296C VA: 0x43296C
	private static bool FilterNameIgnoreCase_impl(MemberInfo m, object filterCriteria) { }

	// RVA: 0x432BDC Offset: 0x432BDC VA: 0x432BDC
	private static bool FilterAttribute_impl(MemberInfo m, object filterCriteria) { }

	// RVA: -1 Offset: -1 Slot: 14
	public abstract Assembly get_Assembly();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract string get_AssemblyQualifiedName();

	// RVA: 0x432F1C Offset: 0x432F1C VA: 0x432F1C Slot: 16
	public TypeAttributes get_Attributes() { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract Type get_BaseType();

	// RVA: 0x432F2C Offset: 0x432F2C VA: 0x432F2C Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: -1 Offset: -1 Slot: 18
	public abstract string get_FullName();

	// RVA: 0x432F34 Offset: 0x432F34 VA: 0x432F34 Slot: 19
	public bool get_HasElementType() { }

	// RVA: 0x432F44 Offset: 0x432F44 VA: 0x432F44 Slot: 20
	public bool get_IsAbstract() { }

	// RVA: 0x432F64 Offset: 0x432F64 VA: 0x432F64 Slot: 21
	public bool get_IsArray() { }

	// RVA: 0x432F74 Offset: 0x432F74 VA: 0x432F74 Slot: 22
	public bool get_IsByRef() { }

	// RVA: 0x432F84 Offset: 0x432F84 VA: 0x432F84 Slot: 23
	public bool get_IsClass() { }

	// RVA: 0x433000 Offset: 0x433000 VA: 0x433000 Slot: 24
	public bool get_IsContextful() { }

	// RVA: 0x433010 Offset: 0x433010 VA: 0x433010 Slot: 25
	public bool get_IsEnum() { }

	// RVA: 0x43317C Offset: 0x43317C VA: 0x43317C Slot: 26
	public bool get_IsExplicitLayout() { }

	// RVA: 0x432FD0 Offset: 0x432FD0 VA: 0x432FD0 Slot: 27
	public bool get_IsInterface() { }

	// RVA: 0x4331A8 Offset: 0x4331A8 VA: 0x4331A8 Slot: 28
	public bool get_IsMarshalByRef() { }

	// RVA: 0x4331B8 Offset: 0x4331B8 VA: 0x4331B8 Slot: 29
	public bool get_IsPointer() { }

	// RVA: 0x4331C8 Offset: 0x4331C8 VA: 0x4331C8 Slot: 30
	public bool get_IsPrimitive() { }

	// RVA: 0x4331D8 Offset: 0x4331D8 VA: 0x4331D8 Slot: 31
	public bool get_IsSealed() { }

	// RVA: 0x4331F8 Offset: 0x4331F8 VA: 0x4331F8 Slot: 32
	public bool get_IsSerializable() { }

	// RVA: 0x432FF0 Offset: 0x432FF0 VA: 0x432FF0 Slot: 33
	public bool get_IsValueType() { }

	// RVA: 0x43347C Offset: 0x43347C VA: 0x43347C Slot: 7
	public override MemberTypes get_MemberType() { }

	// RVA: -1 Offset: -1 Slot: 10
	public abstract override Module get_Module();

	// RVA: -1 Offset: -1 Slot: 34
	public abstract string get_Namespace();

	// RVA: 0x433484 Offset: 0x433484 VA: 0x433484 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x43348C Offset: 0x43348C VA: 0x43348C Slot: 35
	public virtual RuntimeTypeHandle get_TypeHandle() { }

	// RVA: -1 Offset: -1 Slot: 36
	public abstract Type get_UnderlyingSystemType();

	// RVA: 0x433494 Offset: 0x433494 VA: 0x433494 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x433538 Offset: 0x433538 VA: 0x433538 Slot: 37
	public bool Equals(Type o) { }

	// RVA: 0x4335A0 Offset: 0x4335A0 VA: 0x4335A0
	internal bool EqualsInternal(Type type) { }

	// RVA: 0x4335A4 Offset: 0x4335A4 VA: 0x4335A4
	private static Type internal_from_handle(IntPtr handle) { }

	// RVA: 0x4335A8 Offset: 0x4335A8 VA: 0x4335A8
	private static Type internal_from_name(string name, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x419CE8 Offset: 0x419CE8 VA: 0x419CE8
	public static Type GetType(string typeName) { }

	// RVA: 0x4335AC Offset: 0x4335AC VA: 0x4335AC
	public static Type GetType(string typeName, bool throwOnError) { }

	// RVA: 0x43373C Offset: 0x43373C VA: 0x43373C
	internal static TypeCode GetTypeCodeInternal(Type type) { }

	// RVA: 0x433740 Offset: 0x433740 VA: 0x433740
	public static TypeCode GetTypeCode(Type type) { }

	// RVA: 0x4330B8 Offset: 0x4330B8 VA: 0x4330B8
	public static Type GetTypeFromHandle(RuntimeTypeHandle handle) { }

	// RVA: 0x433854 Offset: 0x433854 VA: 0x433854
	public static RuntimeTypeHandle GetTypeHandle(object o) { }

	// RVA: 0x433478 Offset: 0x433478 VA: 0x433478
	internal static bool type_is_subtype_of(Type a, Type b, bool check_interfaces) { }

	// RVA: 0x433920 Offset: 0x433920 VA: 0x433920
	internal static bool type_is_assignable_from(Type a, Type b) { }

	// RVA: 0x433924 Offset: 0x433924 VA: 0x433924 Slot: 38
	public Type GetType() { }

	[ComVisibleAttribute] // RVA: 0x9C0C4 Offset: 0x9C0C4 VA: 0x9C0C4
	// RVA: 0x43392C Offset: 0x43392C VA: 0x43392C Slot: 39
	public virtual bool IsSubclassOf(Type c) { }

	// RVA: -1 Offset: -1 Slot: 40
	public abstract Type[] GetInterfaces();

	// RVA: 0x433A1C Offset: 0x433A1C VA: 0x433A1C Slot: 41
	public virtual bool IsAssignableFrom(Type c) { }

	// RVA: 0x433BC8 Offset: 0x433BC8 VA: 0x433BC8 Slot: 42
	public virtual bool IsInstanceOfType(object o) { }

	// RVA: 0x433BCC Offset: 0x433BCC VA: 0x433BCC Slot: 43
	public virtual int GetArrayRank() { }

	// RVA: -1 Offset: -1 Slot: 44
	public abstract Type GetElementType();

	// RVA: -1 Offset: -1 Slot: 45
	public abstract EventInfo GetEvent(string name, BindingFlags bindingAttr);

	// RVA: -1 Offset: -1 Slot: 46
	public abstract FieldInfo GetField(string name, BindingFlags bindingAttr);

	// RVA: -1 Offset: -1 Slot: 47
	public abstract FieldInfo[] GetFields(BindingFlags bindingAttr);

	// RVA: 0x433C54 Offset: 0x433C54 VA: 0x433C54 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x433CAC Offset: 0x433CAC VA: 0x433CAC Slot: 48
	public MethodInfo GetMethod(string name) { }

	// RVA: 0x433D9C Offset: 0x433D9C VA: 0x433D9C Slot: 49
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr) { }

	// RVA: 0x433E90 Offset: 0x433E90 VA: 0x433E90 Slot: 50
	public MethodInfo GetMethod(string name, Type[] types) { }

	// RVA: 0x434090 Offset: 0x434090 VA: 0x434090 Slot: 51
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x433EC0 Offset: 0x433EC0 VA: 0x433EC0 Slot: 52
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: -1 Offset: -1 Slot: 53
	protected abstract MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);

	// RVA: 0x4340B8 Offset: 0x4340B8 VA: 0x4340B8
	internal MethodInfo GetMethodImplInternal(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: -1 Offset: -1 Slot: 54
	public abstract MethodInfo[] GetMethods(BindingFlags bindingAttr);

	// RVA: 0x4340F4 Offset: 0x4340F4 VA: 0x4340F4 Slot: 55
	public PropertyInfo GetProperty(string name) { }

	// RVA: 0x4341E0 Offset: 0x4341E0 VA: 0x4341E0 Slot: 56
	public PropertyInfo GetProperty(string name, BindingFlags bindingAttr) { }

	// RVA: 0x4342D0 Offset: 0x4342D0 VA: 0x4342D0 Slot: 57
	public PropertyInfo GetProperty(string name, Type returnType) { }

	// RVA: 0x4343C0 Offset: 0x4343C0 VA: 0x4343C0 Slot: 58
	public PropertyInfo GetProperty(string name, Type returnType, Type[] types) { }

	// RVA: 0x4343E8 Offset: 0x4343E8 VA: 0x4343E8 Slot: 59
	public PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: -1 Offset: -1 Slot: 60
	protected abstract PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);

	// RVA: 0x4345B8 Offset: 0x4345B8 VA: 0x4345B8
	internal PropertyInfo GetPropertyImplInternal(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: -1 Offset: -1 Slot: 61
	protected abstract ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);

	// RVA: -1 Offset: -1 Slot: 62
	protected abstract TypeAttributes GetAttributeFlagsImpl();

	// RVA: -1 Offset: -1 Slot: 63
	protected abstract bool HasElementTypeImpl();

	// RVA: -1 Offset: -1 Slot: 64
	protected abstract bool IsArrayImpl();

	// RVA: -1 Offset: -1 Slot: 65
	protected abstract bool IsByRefImpl();

	// RVA: -1 Offset: -1 Slot: 66
	protected abstract bool IsPointerImpl();

	// RVA: -1 Offset: -1 Slot: 67
	protected abstract bool IsPrimitiveImpl();

	// RVA: 0x4345F4 Offset: 0x4345F4 VA: 0x4345F4
	internal static bool IsArrayImpl(Type type) { }

	// RVA: 0x4345F8 Offset: 0x4345F8 VA: 0x4345F8 Slot: 68
	protected virtual bool IsValueTypeImpl() { }

	// RVA: 0x434740 Offset: 0x434740 VA: 0x434740 Slot: 69
	protected virtual bool IsContextfulImpl() { }

	// RVA: 0x4347FC Offset: 0x4347FC VA: 0x4347FC Slot: 70
	protected virtual bool IsMarshalByRefImpl() { }

	[ComVisibleAttribute] // RVA: 0x9C0D8 Offset: 0x9C0D8 VA: 0x9C0D8
	// RVA: 0x4348B8 Offset: 0x4348B8 VA: 0x4348B8 Slot: 71
	public ConstructorInfo GetConstructor(Type[] types) { }

	[ComVisibleAttribute] // RVA: 0x9C0EC Offset: 0x9C0EC VA: 0x9C0EC
	// RVA: 0x434A60 Offset: 0x434A60 VA: 0x434A60 Slot: 72
	public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0x9C100 Offset: 0x9C100 VA: 0x9C100
	// RVA: 0x4348E4 Offset: 0x4348E4 VA: 0x4348E4 Slot: 73
	public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0x9C114 Offset: 0x9C114 VA: 0x9C114
	// RVA: -1 Offset: -1 Slot: 74
	public abstract ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);

	// RVA: -1 Offset: -1 Slot: 75
	public abstract object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters);

	// RVA: 0x434A84 Offset: 0x434A84 VA: 0x434A84 Slot: 3
	public override string ToString() { }

	// RVA: 0x433414 Offset: 0x433414 VA: 0x433414
	internal bool get_IsSystemType() { }

	// RVA: 0x434A94 Offset: 0x434A94 VA: 0x434A94 Slot: 76
	public virtual Type[] GetGenericArguments() { }

	// RVA: 0x434B1C Offset: 0x434B1C VA: 0x434B1C Slot: 77
	public virtual bool get_ContainsGenericParameters() { }

	// RVA: 0x434B24 Offset: 0x434B24 VA: 0x434B24 Slot: 78
	public virtual bool get_IsGenericTypeDefinition() { }

	// RVA: 0x434B28 Offset: 0x434B28 VA: 0x434B28
	internal Type GetGenericTypeDefinition_impl() { }

	// RVA: 0x434B2C Offset: 0x434B2C VA: 0x434B2C Slot: 79
	public virtual Type GetGenericTypeDefinition() { }

	// RVA: 0x434BC8 Offset: 0x434BC8 VA: 0x434BC8 Slot: 80
	public virtual bool get_IsGenericType() { }

	// RVA: 0x434BCC Offset: 0x434BCC VA: 0x434BCC
	private static Type MakeGenericType(Type gt, Type[] types) { }

	// RVA: 0x434BD0 Offset: 0x434BD0 VA: 0x434BD0 Slot: 81
	public virtual Type MakeGenericType(Type[] typeArguments) { }

	// RVA: 0x435040 Offset: 0x435040 VA: 0x435040 Slot: 82
	public virtual bool get_IsGenericParameter() { }

	// RVA: 0x435048 Offset: 0x435048 VA: 0x435048
	public bool get_IsNested() { }

	// RVA: 0x43506C Offset: 0x43506C VA: 0x43506C
	private Type make_byref_type() { }

	// RVA: 0x435070 Offset: 0x435070 VA: 0x435070 Slot: 83
	public virtual Type MakeByRefType() { }

	// RVA: 0x435074 Offset: 0x435074 VA: 0x435074
	internal object[] GetPseudoCustomAttributes() { }

	// RVA: 0x435278 Offset: 0x435278 VA: 0x435278
	internal bool get_IsUserType() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x9388C Offset: 0x9388C VA: 0x9388C
[ClassInterfaceAttribute] // RVA: 0x9388C Offset: 0x9388C VA: 0x9388C
[ComDefaultInterfaceAttribute] // RVA: 0x9388C Offset: 0x9388C VA: 0x9388C
[Serializable]
public abstract class MemberInfo : ICustomAttributeProvider, _MemberInfo // TypeDefIndex: 52
{
	// Properties
	public abstract Type DeclaringType { get; }
	public abstract MemberTypes MemberType { get; }
	public abstract string Name { get; }
	public abstract Type ReflectedType { get; }
	public virtual Module Module { get; }

	// Methods

	// RVA: 0x2970CC Offset: 0x2970CC VA: 0x2970CC
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract Type get_DeclaringType();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract MemberTypes get_MemberType();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract string get_Name();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract Type get_ReflectedType();

	// RVA: 0x283160 Offset: 0x283160 VA: 0x283160 Slot: 10
	public virtual Module get_Module() { }

	// RVA: -1 Offset: -1 Slot: 11
	public abstract bool IsDefined(Type attributeType, bool inherit);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract object[] GetCustomAttributes(bool inherit);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract object[] GetCustomAttributes(Type attributeType, bool inherit);
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x9392C Offset: 0x9392C VA: 0x9392C
public interface ICustomAttributeProvider // TypeDefIndex: 53
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object[] GetCustomAttributes(Type attributeType, bool inherit);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool IsDefined(Type attributeType, bool inherit);
}

// Namespace: System.Runtime.InteropServices
[GuidAttribute] // RVA: 0x93940 Offset: 0x93940 VA: 0x93940
[InterfaceTypeAttribute] // RVA: 0x93940 Offset: 0x93940 VA: 0x93940
[CLSCompliantAttribute] // RVA: 0x93940 Offset: 0x93940 VA: 0x93940
[ComVisibleAttribute] // RVA: 0x93940 Offset: 0x93940 VA: 0x93940
[TypeLibImportClassAttribute] // RVA: 0x93940 Offset: 0x93940 VA: 0x93940
public interface _MemberInfo // TypeDefIndex: 54
{}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x93A3C Offset: 0x93A3C VA: 0x93A3C
[GuidAttribute] // RVA: 0x93A3C Offset: 0x93A3C VA: 0x93A3C
public interface IReflect // TypeDefIndex: 55
{}

// Namespace: System.Runtime.InteropServices
[CLSCompliantAttribute] // RVA: 0x93AA8 Offset: 0x93AA8 VA: 0x93AA8
[GuidAttribute] // RVA: 0x93AA8 Offset: 0x93AA8 VA: 0x93AA8
[ComVisibleAttribute] // RVA: 0x93AA8 Offset: 0x93AA8 VA: 0x93AA8
[TypeLibImportClassAttribute] // RVA: 0x93AA8 Offset: 0x93AA8 VA: 0x93AA8
[InterfaceTypeAttribute] // RVA: 0x93AA8 Offset: 0x93AA8 VA: 0x93AA8
public interface _Type // TypeDefIndex: 56
{}

// Namespace: System
[ComDefaultInterfaceAttribute] // RVA: 0x93BA4 Offset: 0x93BA4 VA: 0x93BA4
[ClassInterfaceAttribute] // RVA: 0x93BA4 Offset: 0x93BA4 VA: 0x93BA4
[ComVisibleAttribute] // RVA: 0x93BA4 Offset: 0x93BA4 VA: 0x93BA4
[Serializable]
public class Exception : ISerializable, _Exception // TypeDefIndex: 57
{
	// Fields
	private IntPtr[] trace_ips; // 0x8
	private Exception inner_exception; // 0xC
	internal string message; // 0x10
	private string help_link; // 0x14
	private string class_name; // 0x18
	private string stack_trace; // 0x1C
	private string _remoteStackTraceString; // 0x20
	private int remote_stack_index; // 0x24
	internal int hresult; // 0x28
	private string source; // 0x2C
	private IDictionary _data; // 0x30

	// Properties
	public Exception InnerException { get; }
	protected int HResult { get; set; }
	private string ClassName { get; }
	public virtual string Message { get; }
	public virtual string Source { get; }
	public virtual string StackTrace { get; }

	// Methods

	// RVA: 0x300898 Offset: 0x300898 VA: 0x300898
	public void .ctor() { }

	// RVA: 0x2F373C Offset: 0x2F373C VA: 0x2F373C
	public void .ctor(string message) { }

	// RVA: 0x3008AC Offset: 0x3008AC VA: 0x3008AC
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x300D04 Offset: 0x300D04 VA: 0x300D04
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x300D3C Offset: 0x300D3C VA: 0x300D3C Slot: 5
	public Exception get_InnerException() { }

	// RVA: 0x300D44 Offset: 0x300D44 VA: 0x300D44
	protected int get_HResult() { }

	// RVA: 0x2F82D0 Offset: 0x2F82D0 VA: 0x2F82D0
	protected void set_HResult(int value) { }

	// RVA: 0x300D4C Offset: 0x300D4C VA: 0x300D4C
	private string get_ClassName() { }

	// RVA: 0x300DA8 Offset: 0x300DA8 VA: 0x300DA8 Slot: 6
	public virtual string get_Message() { }

	// RVA: 0x300E68 Offset: 0x300E68 VA: 0x300E68 Slot: 7
	public virtual string get_Source() { }

	// RVA: 0x300FFC Offset: 0x300FFC VA: 0x300FFC Slot: 8
	public virtual string get_StackTrace() { }

	// RVA: 0x301B18 Offset: 0x301B18 VA: 0x301B18 Slot: 9
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x301DB4 Offset: 0x301DB4 VA: 0x301DB4 Slot: 3
	public override string ToString() { }

	// RVA: 0x301508 Offset: 0x301508 VA: 0x301508
	internal void GetFullNameForStackTrace(StringBuilder sb, MethodBase mi) { }

	// RVA: 0x300DA0 Offset: 0x300DA0 VA: 0x300DA0 Slot: 10
	public Type GetType() { }
}

// Namespace: System.Runtime.InteropServices
[GuidAttribute] // RVA: 0x93C44 Offset: 0x93C44 VA: 0x93C44
[CLSCompliantAttribute] // RVA: 0x93C44 Offset: 0x93C44 VA: 0x93C44
[ComVisibleAttribute] // RVA: 0x93C44 Offset: 0x93C44 VA: 0x93C44
[InterfaceTypeAttribute] // RVA: 0x93C44 Offset: 0x93C44 VA: 0x93C44
public interface _Exception // TypeDefIndex: 58
{}

// Namespace: System
[MonoTODOAttribute] // RVA: 0x93CD8 Offset: 0x93CD8 VA: 0x93CD8
[ComVisibleAttribute] // RVA: 0x93CD8 Offset: 0x93CD8 VA: 0x93CD8
[Serializable]
public struct RuntimeFieldHandle : ISerializable // TypeDefIndex: 59
{
	// Fields
	private IntPtr value; // 0x0

	// Properties
	public IntPtr Value { get; }

	// Methods

	// RVA: 0xC9B08 Offset: 0xC9B08 VA: 0xC9B08
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xC9B24 Offset: 0xC9B24 VA: 0xC9B24
	public IntPtr get_Value() { }

	// RVA: 0xC9B2C Offset: 0xC9B2C VA: 0xC9B2C Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ReliabilityContractAttribute] // RVA: 0x9C128 Offset: 0x9C128 VA: 0x9C128
	// RVA: 0xC9B48 Offset: 0xC9B48 VA: 0xC9B48 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xC9B50 Offset: 0xC9B50 VA: 0xC9B50 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x93D24 Offset: 0x93D24 VA: 0x93D24
[MonoTODOAttribute] // RVA: 0x93D24 Offset: 0x93D24 VA: 0x93D24
[Serializable]
public struct RuntimeTypeHandle : ISerializable // TypeDefIndex: 60
{
	// Fields
	private IntPtr value; // 0x0

	// Properties
	public IntPtr Value { get; }

	// Methods

	// RVA: 0xC9BB8 Offset: 0xC9BB8 VA: 0xC9BB8
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xC9BD4 Offset: 0xC9BD4 VA: 0xC9BD4
	public IntPtr get_Value() { }

	// RVA: 0xC9BDC Offset: 0xC9BDC VA: 0xC9BDC Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ReliabilityContractAttribute] // RVA: 0x9C140 Offset: 0x9C140 VA: 0x9C140
	// RVA: 0xC9BF8 Offset: 0xC9BF8 VA: 0xC9BF8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xC9C00 Offset: 0xC9C00 VA: 0xC9C00 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x93D70 Offset: 0x93D70 VA: 0x93D70
[ComVisibleAttribute] // RVA: 0x93D70 Offset: 0x93D70 VA: 0x93D70
public sealed class ParamArrayAttribute : Attribute // TypeDefIndex: 61
{
	// Methods

	// RVA: 0x46DC50 Offset: 0x46DC50 VA: 0x46DC50
	public void .ctor() { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x93DA8 Offset: 0x93DA8 VA: 0x93DA8
[AttributeUsageAttribute] // RVA: 0x93DA8 Offset: 0x93DA8 VA: 0x93DA8
public sealed class OutAttribute : Attribute // TypeDefIndex: 62
{
	// Methods

	// RVA: 0x1D49D4 Offset: 0x1D49D4 VA: 0x1D49D4
	public void .ctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x93DF4 Offset: 0x93DF4 VA: 0x93DF4
[AttributeUsageAttribute] // RVA: 0x93DF4 Offset: 0x93DF4 VA: 0x93DF4
[Serializable]
public sealed class ObsoleteAttribute : Attribute // TypeDefIndex: 63
{
	// Fields
	private string _message; // 0x8
	private bool _error; // 0xC

	// Methods

	// RVA: 0x46D314 Offset: 0x46D314 VA: 0x46D314
	public void .ctor() { }

	// RVA: 0x46D31C Offset: 0x46D31C VA: 0x46D31C
	public void .ctor(string message) { }

	// RVA: 0x46D33C Offset: 0x46D33C VA: 0x46D33C
	public void .ctor(string message, bool error) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x93E40 Offset: 0x93E40 VA: 0x93E40
[ComVisibleAttribute] // RVA: 0x93E40 Offset: 0x93E40 VA: 0x93E40
public sealed class DllImportAttribute : Attribute // TypeDefIndex: 64
{
	// Fields
	public CallingConvention CallingConvention; // 0x8
	public CharSet CharSet; // 0xC
	private string Dll; // 0x10
	public string EntryPoint; // 0x14
	public bool ExactSpelling; // 0x18
	public bool PreserveSig; // 0x19
	public bool SetLastError; // 0x1A
	public bool BestFitMapping; // 0x1B
	public bool ThrowOnUnmappableChar; // 0x1C

	// Properties
	public string Value { get; }

	// Methods

	// RVA: 0x1DB9F0 Offset: 0x1DB9F0 VA: 0x1DB9F0
	public void .ctor(string dllName) { }

	// RVA: 0x1DBA10 Offset: 0x1DBA10 VA: 0x1DBA10
	public string get_Value() { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x93E8C Offset: 0x93E8C VA: 0x93E8C
[ComVisibleAttribute] // RVA: 0x93E8C Offset: 0x93E8C VA: 0x93E8C
public sealed class MarshalAsAttribute : Attribute // TypeDefIndex: 65
{
	// Fields
	private UnmanagedType utype; // 0x8
	public UnmanagedType ArraySubType; // 0xC
	public string MarshalCookie; // 0x10
	[ComVisibleAttribute] // RVA: 0x9B0F0 Offset: 0x9B0F0 VA: 0x9B0F0
	public string MarshalType; // 0x14
	[ComVisibleAttribute] // RVA: 0x9B104 Offset: 0x9B104 VA: 0x9B104
	public Type MarshalTypeRef; // 0x18
	public int SizeConst; // 0x1C
	public short SizeParamIndex; // 0x20

	// Methods

	// RVA: 0x1DBE34 Offset: 0x1DBE34 VA: 0x1DBE34
	public void .ctor(UnmanagedType unmanagedType) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x93ED8 Offset: 0x93ED8 VA: 0x93ED8
[ComVisibleAttribute] // RVA: 0x93ED8 Offset: 0x93ED8 VA: 0x93ED8
public sealed class InAttribute : Attribute // TypeDefIndex: 66
{
	// Methods

	// RVA: 0x1D49C4 Offset: 0x1D49C4 VA: 0x1D49C4
	public void .ctor() { }
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0x93F24 Offset: 0x93F24 VA: 0x93F24
[ComVisibleAttribute] // RVA: 0x93F24 Offset: 0x93F24 VA: 0x93F24
[Serializable]
public sealed class ConditionalAttribute : Attribute // TypeDefIndex: 67
{
	// Fields
	private string myCondition; // 0x8

	// Methods

	// RVA: 0x2F6B28 Offset: 0x2F6B28 VA: 0x2F6B28
	public void .ctor(string conditionString) { }
}

// Namespace: System.Security.Permissions
[AttributeUsageAttribute] // RVA: 0x93F70 Offset: 0x93F70 VA: 0x93F70
[ComVisibleAttribute] // RVA: 0x93F70 Offset: 0x93F70 VA: 0x93F70
[ObsoleteAttribute] // RVA: 0x93F70 Offset: 0x93F70 VA: 0x93F70
[Serializable]
public abstract class SecurityAttribute : Attribute // TypeDefIndex: 68
{}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x93FF4 Offset: 0x93FF4 VA: 0x93FF4
[ComVisibleAttribute] // RVA: 0x93FF4 Offset: 0x93FF4 VA: 0x93FF4
public sealed class GuidAttribute : Attribute // TypeDefIndex: 69
{
	// Fields
	private string guidValue; // 0x8

	// Methods

	// RVA: 0x1DBC0C Offset: 0x1DBC0C VA: 0x1DBC0C
	public void .ctor(string guid) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x94040 Offset: 0x94040 VA: 0x94040
[AttributeUsageAttribute] // RVA: 0x94040 Offset: 0x94040 VA: 0x94040
public sealed class ComImportAttribute : Attribute // TypeDefIndex: 70
{
	// Methods

	// RVA: 0x1DB9A8 Offset: 0x1DB9A8 VA: 0x1DB9A8
	public void .ctor() { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x9408C Offset: 0x9408C VA: 0x9408C
[AttributeUsageAttribute] // RVA: 0x9408C Offset: 0x9408C VA: 0x9408C
public sealed class OptionalAttribute : Attribute // TypeDefIndex: 71
{
	// Methods

	// RVA: 0x1D49CC Offset: 0x1D49CC VA: 0x1D49CC
	public void .ctor() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x940D8 Offset: 0x940D8 VA: 0x940D8
public sealed class FixedBufferAttribute : Attribute // TypeDefIndex: 72
{
	// Fields
	private Type elementType; // 0x8
	private int length; // 0xC

	// Properties
	public Type ElementType { get; }
	public int Length { get; }

	// Methods

	// RVA: 0x1DB2E4 Offset: 0x1DB2E4 VA: 0x1DB2E4
	public void .ctor(Type elementType, int length) { }

	// RVA: 0x1DB30C Offset: 0x1DB30C VA: 0x1DB30C
	public Type get_ElementType() { }

	// RVA: 0x1DB314 Offset: 0x1DB314 VA: 0x1DB314
	public int get_Length() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x9410C Offset: 0x9410C VA: 0x9410C
[Serializable]
public sealed class CompilerGeneratedAttribute : Attribute // TypeDefIndex: 73
{
	// Methods

	// RVA: 0x1DB204 Offset: 0x1DB204 VA: 0x1DB204
	public void .ctor() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x94120 Offset: 0x94120 VA: 0x94120
public sealed class InternalsVisibleToAttribute : Attribute // TypeDefIndex: 74
{
	// Fields
	private string assemblyName; // 0x8
	private bool all_visible; // 0xC

	// Methods

	// RVA: 0x1DB31C Offset: 0x1DB31C VA: 0x1DB31C
	public void .ctor(string assemblyName) { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x94164 Offset: 0x94164 VA: 0x94164
[Serializable]
public sealed class RuntimeCompatibilityAttribute : Attribute // TypeDefIndex: 75
{
	// Fields
	private bool wrap_non_exception_throws; // 0x8

	// Properties
	public bool WrapNonExceptionThrows { set; }

	// Methods

	// RVA: 0x1DB348 Offset: 0x1DB348 VA: 0x1DB348
	public void .ctor() { }

	// RVA: 0x1DB350 Offset: 0x1DB350 VA: 0x1DB350
	public void set_WrapNonExceptionThrows(bool value) { }
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0x941A8 Offset: 0x941A8 VA: 0x941A8
[AttributeUsageAttribute] // RVA: 0x941A8 Offset: 0x941A8 VA: 0x941A8
[Serializable]
public sealed class DebuggerHiddenAttribute : Attribute // TypeDefIndex: 76
{
	// Methods

	// RVA: 0x2F6DB0 Offset: 0x2F6DB0 VA: 0x2F6DB0
	public void .ctor() { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0x941F4 Offset: 0x941F4 VA: 0x941F4
[ComVisibleAttribute] // RVA: 0x941F4 Offset: 0x941F4 VA: 0x941F4
[Serializable]
public sealed class DefaultMemberAttribute : Attribute // TypeDefIndex: 77
{
	// Fields
	private string member_name; // 0x8

	// Properties
	public string MemberName { get; }

	// Methods

	// RVA: 0x27FF14 Offset: 0x27FF14 VA: 0x27FF14
	public void .ctor(string memberName) { }

	// RVA: 0x27FF34 Offset: 0x27FF34 VA: 0x27FF34
	public string get_MemberName() { }
}

// Namespace: System.Runtime.CompilerServices
[ComVisibleAttribute] // RVA: 0x9422C Offset: 0x9422C VA: 0x9422C
[AttributeUsageAttribute] // RVA: 0x9422C Offset: 0x9422C VA: 0x9422C
[Serializable]
public sealed class DecimalConstantAttribute : Attribute // TypeDefIndex: 78
{
	// Fields
	private byte scale; // 0x8
	private bool sign; // 0x9
	private int hi; // 0xC
	private int mid; // 0x10
	private int low; // 0x14

	// Methods

	[CLSCompliantAttribute] // RVA: 0x9C158 Offset: 0x9C158 VA: 0x9C158
	// RVA: 0x1DB20C Offset: 0x1DB20C VA: 0x1DB20C
	public void .ctor(byte scale, byte sign, uint hi, uint mid, uint low) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x94278 Offset: 0x94278 VA: 0x94278
[ComVisibleAttribute] // RVA: 0x94278 Offset: 0x94278 VA: 0x94278
public sealed class FieldOffsetAttribute : Attribute // TypeDefIndex: 79
{
	// Fields
	private int val; // 0x8

	// Methods

	// RVA: 0x1DBA18 Offset: 0x1DBA18 VA: 0x1DBA18
	public void .ctor(int offset) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x942C4 Offset: 0x942C4 VA: 0x942C4
public struct RuntimeArgumentHandle // TypeDefIndex: 80
{
	// Fields
	internal IntPtr args; // 0x0
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x942D8 Offset: 0x942D8 VA: 0x942D8
[Serializable]
public sealed class AsyncCallback : MulticastDelegate // TypeDefIndex: 81
{
	// Methods

	// RVA: 0x4736DC Offset: 0x4736DC VA: 0x4736DC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x4736F0 Offset: 0x4736F0 VA: 0x4736F0 Slot: 11
	public virtual void Invoke(IAsyncResult ar) { }

	// RVA: 0x473AAC Offset: 0x473AAC VA: 0x473AAC Slot: 12
	public virtual IAsyncResult BeginInvoke(IAsyncResult ar, AsyncCallback callback, object object) { }

	// RVA: 0x473AD8 Offset: 0x473AD8 VA: 0x473AD8 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x942EC Offset: 0x942EC VA: 0x942EC
public interface IAsyncResult // TypeDefIndex: 82
{
	// Properties
	public abstract object AsyncState { get; }
	public abstract WaitHandle AsyncWaitHandle { get; }
	public abstract bool IsCompleted { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object get_AsyncState();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract WaitHandle get_AsyncWaitHandle();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract bool get_IsCompleted();
}

// Namespace: System
[CLSCompliantAttribute] // RVA: 0x94300 Offset: 0x94300 VA: 0x94300
[ComVisibleAttribute] // RVA: 0x94300 Offset: 0x94300 VA: 0x94300
public struct TypedReference // TypeDefIndex: 83
{
	// Fields
	private RuntimeTypeHandle type; // 0x0
	private IntPtr value; // 0x4
	private IntPtr klass; // 0x8

	// Methods

	// RVA: 0xF0E0C Offset: 0xF0E0C VA: 0xF0E0C Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0xF0E1C Offset: 0xF0E1C VA: 0xF0E1C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
public struct ArgIterator // TypeDefIndex: 84
{
	// Fields
	private IntPtr sig; // 0x0
	private IntPtr args; // 0x4
	private int next_arg; // 0x8
	private int num_args; // 0xC

	// Methods

	// RVA: 0xC799C Offset: 0xC799C VA: 0xC799C Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0xC79AC Offset: 0xC79AC VA: 0xC79AC Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x94338 Offset: 0x94338 VA: 0x94338
[Serializable]
public abstract class MarshalByRefObject // TypeDefIndex: 85
{
	// Fields
	private ServerIdentity _identity; // 0x8

	// Properties
	internal ServerIdentity ObjectIdentity { get; set; }

	// Methods

	// RVA: 0x45C928 Offset: 0x45C928 VA: 0x45C928
	protected void .ctor() { }

	// RVA: 0x45C92C Offset: 0x45C92C VA: 0x45C92C
	internal ServerIdentity get_ObjectIdentity() { }

	// RVA: 0x45C934 Offset: 0x45C934 VA: 0x45C934
	internal void set_ObjectIdentity(ServerIdentity value) { }

	// RVA: 0x45C93C Offset: 0x45C93C VA: 0x45C93C Slot: 4
	public virtual ObjRef CreateObjRef(Type requestedType) { }

	// RVA: 0x45CA10 Offset: 0x45CA10 VA: 0x45CA10 Slot: 5
	public virtual object InitializeLifetimeService() { }
}

// Namespace: System
[Serializable]
public struct Nullable<T> // TypeDefIndex: 86
{
	// Fields
	internal T value; // 0x0
	internal bool has_value; // 0x0

	// Properties
	public bool HasValue { get; }
	public T Value { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0A94 Offset: 0xF0A94 VA: 0xF0A94
	|-Nullable<TimeSpan>..ctor
	*/

	// RVA: -1 Offset: -1
	public bool get_HasValue() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0AA4 Offset: 0xF0AA4 VA: 0xF0AA4
	|-Nullable<TimeSpan>.get_HasValue
	*/

	// RVA: -1 Offset: -1
	public T get_Value() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0AC8 Offset: 0xF0AC8 VA: 0xF0AC8
	|-Nullable<TimeSpan>.get_Value
	*/

	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object other) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0B0C Offset: 0xF0B0C VA: 0xF0B0C
	|-Nullable<TimeSpan>.Equals
	*/

	// RVA: -1 Offset: -1
	private bool Equals(Nullable<T> other) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0B58 Offset: 0xF0B58 VA: 0xF0B58
	|-Nullable<TimeSpan>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0BAC Offset: 0xF0BAC VA: 0xF0BAC
	|-Nullable<TimeSpan>.GetHashCode
	*/

	// RVA: -1 Offset: -1 Slot: 3
	public override string ToString() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0C14 Offset: 0xF0C14 VA: 0xF0C14
	|-Nullable<TimeSpan>.ToString
	*/
}

// Namespace: System.Runtime.CompilerServices
public static class RuntimeHelpers // TypeDefIndex: 87
{
	// Properties
	public static int OffsetToStringData { get; }

	// Methods

	// RVA: 0x1DB358 Offset: 0x1DB358 VA: 0x1DB358
	private static void InitializeArray(Array array, IntPtr fldHandle) { }

	// RVA: 0x1DB35C Offset: 0x1DB35C VA: 0x1DB35C
	public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle) { }

	// RVA: 0x1DB438 Offset: 0x1DB438 VA: 0x1DB438
	public static int get_OffsetToStringData() { }
}

// Namespace: 
internal sealed class Locale // TypeDefIndex: 88
{
	// Methods

	// RVA: 0x495FBC Offset: 0x495FBC VA: 0x495FBC
	public static string GetText(string msg) { }

	// RVA: 0x495FC0 Offset: 0x495FC0 VA: 0x495FC0
	public static string GetText(string fmt, object[] args) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x9434C Offset: 0x9434C VA: 0x9434C
internal class MonoTODOAttribute : Attribute // TypeDefIndex: 89
{
	// Fields
	private string comment; // 0x8

	// Methods

	// RVA: 0x460F18 Offset: 0x460F18 VA: 0x460F18
	public void .ctor() { }

	// RVA: 0x460114 Offset: 0x460114 VA: 0x460114
	public void .ctor(string comment) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x94380 Offset: 0x94380 VA: 0x94380
internal class MonoDocumentationNoteAttribute : MonoTODOAttribute // TypeDefIndex: 90
{
	// Methods

	// RVA: 0x4600F4 Offset: 0x4600F4 VA: 0x4600F4
	public void .ctor(string comment) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x943B4 Offset: 0x943B4 VA: 0x943B4
internal class MonoLimitationAttribute : MonoTODOAttribute // TypeDefIndex: 91
{
	// Methods

	// RVA: 0x460EF8 Offset: 0x460EF8 VA: 0x460EF8
	public void .ctor(string comment) { }
}

// Namespace: Microsoft.Win32.SafeHandles
public abstract class SafeHandleZeroOrMinusOneIsInvalid : SafeHandle, IDisposable // TypeDefIndex: 92
{
	// Properties
	public override bool IsInvalid { get; }

	// Methods

	[ReliabilityContractAttribute] // RVA: 0x9C16C Offset: 0x9C16C VA: 0x9C16C
	// RVA: 0x49604C Offset: 0x49604C VA: 0x49604C
	protected void .ctor(bool ownsHandle) { }

	// RVA: 0x496080 Offset: 0x496080 VA: 0x496080 Slot: 7
	public override bool get_IsInvalid() { }
}

// Namespace: Microsoft.Win32.SafeHandles
public sealed class SafeWaitHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 93
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0x9C184 Offset: 0x9C184 VA: 0x9C184
	// RVA: 0x4960DC Offset: 0x4960DC VA: 0x4960DC
	public void .ctor(IntPtr existingHandle, bool ownsHandle) { }

	// RVA: 0x496124 Offset: 0x496124 VA: 0x496124 Slot: 6
	protected override bool ReleaseHandle() { }
}

// Namespace: Mono.Globalization.Unicode
internal class CodePointIndexer // TypeDefIndex: 94
{
	// Fields
	private readonly CodePointIndexer.TableRange[] ranges; // 0x8
	public readonly int TotalCount; // 0xC
	private int defaultIndex; // 0x10
	private int defaultCP; // 0x14

	// Methods

	// RVA: 0x496140 Offset: 0x496140 VA: 0x496140
	public void .ctor(int[] starts, int[] ends, int defaultIndex, int defaultCP) { }

	// RVA: 0x496448 Offset: 0x496448 VA: 0x496448
	public int ToIndex(int cp) { }
}

// Namespace: 
[Serializable]
internal struct CodePointIndexer.TableRange // TypeDefIndex: 95
{
	// Fields
	public readonly int Start; // 0x0
	public readonly int End; // 0x4
	public readonly int Count; // 0x8
	public readonly int IndexStart; // 0xC
	public readonly int IndexEnd; // 0x10

	// Methods

	// RVA: 0xEFE48 Offset: 0xEFE48 VA: 0xEFE48
	public void .ctor(int start, int end, int indexStart) { }
}

// Namespace: Mono.Globalization.Unicode
internal class TailoringInfo // TypeDefIndex: 96
{
	// Fields
	public readonly int LCID; // 0x8
	public readonly int TailoringIndex; // 0xC
	public readonly int TailoringCount; // 0x10
	public readonly bool FrenchSort; // 0x14

	// Methods

	// RVA: 0x497020 Offset: 0x497020 VA: 0x497020
	public void .ctor(int lcid, int tailoringIndex, int tailoringCount, bool frenchSort) { }
}

// Namespace: Mono.Globalization.Unicode
internal class Contraction // TypeDefIndex: 97
{
	// Fields
	public readonly char[] Source; // 0x8
	public readonly string Replacement; // 0xC
	public readonly byte[] SortKey; // 0x10

	// Methods

	// RVA: 0x496590 Offset: 0x496590 VA: 0x496590
	public void .ctor(char[] source, string replacement, byte[] sortkey) { }
}

// Namespace: Mono.Globalization.Unicode
internal class ContractionComparer : IComparer // TypeDefIndex: 98
{
	// Fields
	public static readonly ContractionComparer Instance; // 0x0

	// Methods

	// RVA: 0x4965C0 Offset: 0x4965C0 VA: 0x4965C0
	public void .ctor() { }

	// RVA: 0x4965C8 Offset: 0x4965C8 VA: 0x4965C8
	private static void .cctor() { }

	// RVA: 0x49663C Offset: 0x49663C VA: 0x49663C Slot: 4
	public int Compare(object o1, object o2) { }
}

// Namespace: Mono.Globalization.Unicode
internal class Level2Map // TypeDefIndex: 99
{
	// Fields
	public byte Source; // 0x8
	public byte Replace; // 0x9

	// Methods

	// RVA: 0x4968D4 Offset: 0x4968D4 VA: 0x4968D4
	public void .ctor(byte source, byte replace) { }
}

// Namespace: Mono.Globalization.Unicode
internal class Level2MapComparer : IComparer // TypeDefIndex: 100
{
	// Fields
	public static readonly Level2MapComparer Instance; // 0x0

	// Methods

	// RVA: 0x4968FC Offset: 0x4968FC VA: 0x4968FC
	public void .ctor() { }

	// RVA: 0x496904 Offset: 0x496904 VA: 0x496904
	private static void .cctor() { }

	// RVA: 0x496978 Offset: 0x496978 VA: 0x496978 Slot: 4
	public int Compare(object o1, object o2) { }
}

// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTable // TypeDefIndex: 101
{
	// Fields
	public static int MaxExpansionLength; // 0x0
	private static readonly byte* ignorableFlags; // 0x4
	private static readonly byte* categories; // 0x8
	private static readonly byte* level1; // 0xC
	private static readonly byte* level2; // 0x10
	private static readonly byte* level3; // 0x14
	private static byte* cjkCHScategory; // 0x18
	private static byte* cjkCHTcategory; // 0x1C
	private static byte* cjkJAcategory; // 0x20
	private static byte* cjkKOcategory; // 0x24
	private static byte* cjkCHSlv1; // 0x28
	private static byte* cjkCHTlv1; // 0x2C
	private static byte* cjkJAlv1; // 0x30
	private static byte* cjkKOlv1; // 0x34
	private static byte* cjkKOlv2; // 0x38
	private static readonly char[] tailoringArr; // 0x3C
	private static readonly TailoringInfo[] tailoringInfos; // 0x40
	private static object forLock; // 0x44
	public static readonly bool isReady; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0x9B118 Offset: 0x9B118 VA: 0x9B118
	private static Dictionary<string, int> <>f__switch$map2; // 0x4C
	[CompilerGeneratedAttribute] // RVA: 0x9B128 Offset: 0x9B128 VA: 0x9B128
	private static Dictionary<string, int> <>f__switch$map3; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0x9B138 Offset: 0x9B138 VA: 0x9B138
	private static Dictionary<string, int> <>f__switch$map4; // 0x54

	// Properties
	public static bool IsReady { get; }

	// Methods

	// RVA: 0x496B24 Offset: 0x496B24 VA: 0x496B24
	private static void .cctor() { }

	// RVA: 0x497058 Offset: 0x497058 VA: 0x497058
	public static TailoringInfo GetTailoringInfo(int lcid) { }

	// RVA: 0x497238 Offset: 0x497238 VA: 0x497238
	public static void BuildTailoringTables(CultureInfo culture, TailoringInfo t, ref Contraction[] contractions, ref Level2Map[] diacriticals) { }

	// RVA: 0x497AD4 Offset: 0x497AD4 VA: 0x497AD4
	private static void SetCJKReferences(string name, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table) { }

	// RVA: 0x4980C0 Offset: 0x4980C0 VA: 0x4980C0
	public static byte Category(int cp) { }

	// RVA: 0x4981B4 Offset: 0x4981B4 VA: 0x4981B4
	public static byte Level1(int cp) { }

	// RVA: 0x4982A8 Offset: 0x4982A8 VA: 0x4982A8
	public static byte Level2(int cp) { }

	// RVA: 0x49839C Offset: 0x49839C VA: 0x49839C
	public static byte Level3(int cp) { }

	// RVA: 0x498490 Offset: 0x498490 VA: 0x498490
	public static bool IsIgnorable(int cp, byte flag) { }

	// RVA: 0x49860C Offset: 0x49860C VA: 0x49860C
	public static bool IsIgnorableNonSpacing(int cp) { }

	// RVA: 0x498690 Offset: 0x498690 VA: 0x498690
	public static int ToKanaTypeInsensitive(int i) { }

	// RVA: 0x4986A8 Offset: 0x4986A8 VA: 0x4986A8
	public static int ToWidthCompat(int i) { }

	// RVA: 0x498840 Offset: 0x498840 VA: 0x498840
	public static bool HasSpecialWeight(char c) { }

	// RVA: 0x4988CC Offset: 0x4988CC VA: 0x4988CC
	public static bool IsHalfWidthKana(char c) { }

	// RVA: 0x4988E4 Offset: 0x4988E4 VA: 0x4988E4
	public static bool IsHiragana(char c) { }

	// RVA: 0x498900 Offset: 0x498900 VA: 0x498900
	public static bool IsJapaneseSmallLetter(char c) { }

	// RVA: 0x4989FC Offset: 0x4989FC VA: 0x4989FC
	public static bool get_IsReady() { }

	// RVA: 0x496F6C Offset: 0x496F6C VA: 0x496F6C
	private static IntPtr GetResource(string name) { }

	// RVA: 0x497018 Offset: 0x497018 VA: 0x497018
	private static uint UInt32FromBytePtr(byte* raw, uint idx) { }

	// RVA: 0x498A88 Offset: 0x498A88 VA: 0x498A88
	public static void FillCJK(string culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table) { }

	// RVA: 0x498BFC Offset: 0x498BFC VA: 0x498BFC
	private static void FillCJKCore(string culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer cjkLv2Indexer, ref byte* lv2Table) { }
}

// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTableUtil // TypeDefIndex: 102
{
	// Fields
	public static readonly CodePointIndexer Ignorable; // 0x0
	public static readonly CodePointIndexer Category; // 0x4
	public static readonly CodePointIndexer Level1; // 0x8
	public static readonly CodePointIndexer Level2; // 0xC
	public static readonly CodePointIndexer Level3; // 0x10
	public static readonly CodePointIndexer CjkCHS; // 0x14
	public static readonly CodePointIndexer Cjk; // 0x18

	// Methods

	// RVA: 0x499710 Offset: 0x499710 VA: 0x499710
	private static void .cctor() { }
}

// Namespace: Mono.Globalization.Unicode
internal class SimpleCollator // TypeDefIndex: 103
{
	// Fields
	private static bool QuickCheckDisabled; // 0x0
	private static SimpleCollator invariant; // 0x4
	private readonly TextInfo textInfo; // 0x8
	private readonly bool frenchSort; // 0xC
	private readonly byte* cjkCatTable; // 0x10
	private readonly byte* cjkLv1Table; // 0x14
	private readonly CodePointIndexer cjkIndexer; // 0x18
	private readonly byte* cjkLv2Table; // 0x1C
	private readonly CodePointIndexer cjkLv2Indexer; // 0x20
	private readonly int lcid; // 0x24
	private readonly Contraction[] contractions; // 0x28
	private readonly Level2Map[] level2Maps; // 0x2C
	private readonly byte[] unsafeFlags; // 0x30

	// Methods

	// RVA: 0x499E54 Offset: 0x499E54 VA: 0x499E54
	public void .ctor(CultureInfo culture) { }

	// RVA: 0x49A454 Offset: 0x49A454 VA: 0x49A454
	private static void .cctor() { }

	// RVA: 0x49A348 Offset: 0x49A348 VA: 0x49A348
	private void SetCJKTable(CultureInfo culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table) { }

	// RVA: 0x49A57C Offset: 0x49A57C VA: 0x49A57C
	private static CultureInfo GetNeutralCulture(CultureInfo info) { }

	// RVA: 0x49A618 Offset: 0x49A618 VA: 0x49A618
	private byte Category(int cp) { }

	// RVA: 0x49A6F0 Offset: 0x49A6F0 VA: 0x49A6F0
	private byte Level1(int cp) { }

	// RVA: 0x49A7C8 Offset: 0x49A7C8 VA: 0x49A7C8
	private byte Level2(int cp, SimpleCollator.ExtenderType ext) { }

	// RVA: 0x49A9F8 Offset: 0x49A9F8 VA: 0x49A9F8
	private static bool IsHalfKana(int cp, CompareOptions opt) { }

	// RVA: 0x49AA94 Offset: 0x49AA94 VA: 0x49AA94
	private Contraction GetContraction(string s, int start, int end) { }

	// RVA: 0x49AB90 Offset: 0x49AB90 VA: 0x49AB90
	private Contraction GetContraction(string s, int start, int end, Contraction[] clist) { }

	// RVA: 0x49AD38 Offset: 0x49AD38 VA: 0x49AD38
	private Contraction GetTailContraction(string s, int start, int end) { }

	// RVA: 0x49AE34 Offset: 0x49AE34 VA: 0x49AE34
	private Contraction GetTailContraction(string s, int start, int end, Contraction[] clist) { }

	// RVA: 0x49B144 Offset: 0x49B144 VA: 0x49B144
	private int FilterOptions(int i, CompareOptions opt) { }

	// RVA: 0x49B2AC Offset: 0x49B2AC VA: 0x49B2AC
	private SimpleCollator.ExtenderType GetExtenderType(int i) { }

	// RVA: 0x49B3AC Offset: 0x49B3AC VA: 0x49B3AC
	private static byte ToDashTypeValue(SimpleCollator.ExtenderType ext, CompareOptions opt) { }

	// RVA: 0x49B3E4 Offset: 0x49B3E4 VA: 0x49B3E4
	private int FilterExtender(int i, SimpleCollator.ExtenderType ext, CompareOptions opt) { }

	// RVA: 0x49B624 Offset: 0x49B624 VA: 0x49B624
	private static bool IsIgnorable(int i, CompareOptions opt) { }

	// RVA: 0x49B6CC Offset: 0x49B6CC VA: 0x49B6CC
	private bool IsSafe(int i) { }

	// RVA: 0x49B764 Offset: 0x49B764 VA: 0x49B764
	public SortKey GetSortKey(string s, CompareOptions options) { }

	// RVA: 0x49B7B8 Offset: 0x49B7B8 VA: 0x49B7B8
	public SortKey GetSortKey(string s, int start, int length, CompareOptions options) { }

	// RVA: 0x49BB18 Offset: 0x49BB18 VA: 0x49BB18
	private void GetSortKey(string s, int start, int end, SortKeyBuffer buf, CompareOptions opt) { }

	// RVA: 0x49C06C Offset: 0x49C06C VA: 0x49C06C
	private void FillSortKeyRaw(int i, SimpleCollator.ExtenderType ext, SortKeyBuffer buf, CompareOptions opt) { }

	// RVA: 0x49C760 Offset: 0x49C760 VA: 0x49C760
	private void FillSurrogateSortKeyRaw(int i, SortKeyBuffer buf) { }

	// RVA: 0x49C90C Offset: 0x49C90C VA: 0x49C90C
	private int CompareOrdinal(string s1, int idx1, int len1, string s2, int idx2, int len2) { }

	// RVA: 0x49CE60 Offset: 0x49CE60 VA: 0x49CE60
	private int CompareQuick(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool sourceConsumed, out bool targetConsumed, bool immediateBreakup) { }

	// RVA: 0x49D86C Offset: 0x49D86C VA: 0x49D86C
	private int CompareOrdinalIgnoreCase(string s1, int idx1, int len1, string s2, int idx2, int len2) { }

	// RVA: 0x49DE90 Offset: 0x49DE90 VA: 0x49DE90
	public int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, CompareOptions options) { }

	// RVA: 0x49C01C Offset: 0x49C01C VA: 0x49C01C
	private void ClearBuffer(byte* buffer, int size) { }

	// RVA: 0x49E058 Offset: 0x49E058 VA: 0x49E058
	private bool QuickCheckPossible(string s1, int idx1, int end1, string s2, int idx2, int end2) { }

	// RVA: 0x49E060 Offset: 0x49E060 VA: 0x49E060
	private int CompareInternal(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool targetConsumed, out bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, ref SimpleCollator.Context ctx) { }

	// RVA: 0x49FCF4 Offset: 0x49FCF4 VA: 0x49FCF4
	private int CompareFlagPair(bool b1, bool b2) { }

	// RVA: 0x49FD14 Offset: 0x49FD14 VA: 0x49FD14
	public bool IsPrefix(string src, string target, CompareOptions opt) { }

	// RVA: 0x49FD6C Offset: 0x49FD6C VA: 0x49FD6C
	public bool IsPrefix(string s, string target, int start, int length, CompareOptions opt) { }

	// RVA: 0x49FEDC Offset: 0x49FEDC VA: 0x49FEDC
	private bool IsPrefix(string s, string target, int start, int length, bool skipHeadingExtenders, ref SimpleCollator.Context ctx) { }

	// RVA: 0x49FF70 Offset: 0x49FF70 VA: 0x49FF70
	public bool IsSuffix(string src, string target, CompareOptions opt) { }

	// RVA: 0x49FFF4 Offset: 0x49FFF4 VA: 0x49FFF4
	public bool IsSuffix(string s, string target, int start, int length, CompareOptions opt) { }

	// RVA: 0x4A02C4 Offset: 0x4A02C4 VA: 0x4A02C4
	private int QuickIndexOf(string s, string target, int start, int length, out bool testWasUnable) { }

	// RVA: 0x4A04A4 Offset: 0x4A04A4 VA: 0x4A04A4
	public int IndexOf(string s, string target, int start, int length, CompareOptions opt) { }

	// RVA: 0x4A06CC Offset: 0x4A06CC VA: 0x4A06CC
	private int IndexOfOrdinal(string s, string target, int start, int length) { }

	// RVA: 0x4A0800 Offset: 0x4A0800 VA: 0x4A0800
	private int IndexOfOrdinalIgnoreCase(string s, string target, int start, int length) { }

	// RVA: 0x4A0FFC Offset: 0x4A0FFC VA: 0x4A0FFC
	private int IndexOfSortKey(string s, int start, int length, byte* sortkey, char target, int ti, bool noLv4, ref SimpleCollator.Context ctx) { }

	// RVA: 0x4A09B0 Offset: 0x4A09B0 VA: 0x4A09B0
	private int IndexOf(string s, string target, int start, int length, byte* targetSortKey, ref SimpleCollator.Context ctx) { }

	// RVA: 0x4A00E0 Offset: 0x4A00E0 VA: 0x4A00E0
	public int LastIndexOf(string s, string target, int start, int length, CompareOptions opt) { }

	// RVA: 0x4A123C Offset: 0x4A123C VA: 0x4A123C
	private int LastIndexOfOrdinal(string s, string target, int start, int length) { }

	// RVA: 0x4A14AC Offset: 0x4A14AC VA: 0x4A14AC
	private int LastIndexOfOrdinalIgnoreCase(string s, string target, int start, int length) { }

	// RVA: 0x4A1ED0 Offset: 0x4A1ED0 VA: 0x4A1ED0
	private int LastIndexOfSortKey(string s, int start, int orgStart, int length, byte* sortkey, int ti, bool noLv4, ref SimpleCollator.Context ctx) { }

	// RVA: 0x4A17F8 Offset: 0x4A17F8 VA: 0x4A17F8
	private int LastIndexOf(string s, string target, int start, int length, byte* targetSortKey, ref SimpleCollator.Context ctx) { }

	// RVA: 0x4A107C Offset: 0x4A107C VA: 0x4A107C
	private bool MatchesForward(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, ref SimpleCollator.Context ctx) { }

	// RVA: 0x4A2124 Offset: 0x4A2124 VA: 0x4A2124
	private bool MatchesForwardCore(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, SimpleCollator.ExtenderType ext, ref Contraction ct, ref SimpleCollator.Context ctx) { }

	// RVA: 0x4A25E4 Offset: 0x4A25E4 VA: 0x4A25E4
	private bool MatchesPrimitive(CompareOptions opt, byte* source, int si, SimpleCollator.ExtenderType ext, byte* target, int ti, bool noLv4) { }

	// RVA: 0x4A1F5C Offset: 0x4A1F5C VA: 0x4A1F5C
	private bool MatchesBackward(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, ref SimpleCollator.Context ctx) { }

	// RVA: 0x4A2A8C Offset: 0x4A2A8C VA: 0x4A2A8C
	private bool MatchesBackwardCore(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, SimpleCollator.ExtenderType ext, ref Contraction ct, ref SimpleCollator.Context ctx) { }
}

// Namespace: 
internal struct SimpleCollator.Context // TypeDefIndex: 104
{
	// Fields
	public readonly CompareOptions Option; // 0x0
	public readonly byte* NeverMatchFlags; // 0x4
	public readonly byte* AlwaysMatchFlags; // 0x8
	public byte* Buffer1; // 0xC
	public byte* Buffer2; // 0x10
	public int PrevCode; // 0x14
	public byte* PrevSortKey; // 0x18
	public readonly bool QuickCheckPossible; // 0x1C

	// Methods

	// RVA: 0xEFF04 Offset: 0xEFF04 VA: 0xEFF04
	public void .ctor(CompareOptions opt, byte* alwaysMatchFlags, byte* neverMatchFlags, byte* buffer1, byte* buffer2, byte* prev1, bool quickCheckPossible) { }
}

// Namespace: 
private struct SimpleCollator.PreviousInfo // TypeDefIndex: 105
{
	// Fields
	public int Code; // 0x0
	public byte* SortKey; // 0x4

	// Methods

	// RVA: 0xEFFE0 Offset: 0xEFFE0 VA: 0xEFFE0
	public void .ctor(bool dummy) { }
}

// Namespace: 
private struct SimpleCollator.Escape // TypeDefIndex: 106
{
	// Fields
	public string Source; // 0x0
	public int Index; // 0x4
	public int Start; // 0x8
	public int End; // 0xC
	public int Optional; // 0x10
}

// Namespace: 
private enum SimpleCollator.ExtenderType // TypeDefIndex: 107
{
	// Fields
	public int value__; // 0x0
	public const SimpleCollator.ExtenderType None = 0;
	public const SimpleCollator.ExtenderType Simple = 1;
	public const SimpleCollator.ExtenderType Voiced = 2;
	public const SimpleCollator.ExtenderType Conditional = 3;
	public const SimpleCollator.ExtenderType Buggy = 4;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x943E8 Offset: 0x943E8 VA: 0x943E8
[Serializable]
public class SortKey // TypeDefIndex: 108
{
	// Fields
	private readonly string source; // 0x8
	private readonly CompareOptions options; // 0xC
	private readonly byte[] key; // 0x10
	private readonly int lcid; // 0x14

	// Properties
	public virtual string OriginalString { get; }
	public virtual byte[] KeyData { get; }

	// Methods

	// RVA: 0x3F709C Offset: 0x3F709C VA: 0x3F709C
	internal void .ctor(int lcid, string source, CompareOptions opt) { }

	// RVA: 0x3F70CC Offset: 0x3F70CC VA: 0x3F70CC
	internal void .ctor(int lcid, string source, byte[] buffer, CompareOptions opt, int lv1Length, int lv2Length, int lv3Length, int kanaSmallLength, int markTypeLength, int katakanaLength, int kanaWidthLength, int identLength) { }

	// RVA: 0x3F7100 Offset: 0x3F7100 VA: 0x3F7100
	public static int Compare(SortKey sortkey1, SortKey sortkey2) { }

	// RVA: 0x3F737C Offset: 0x3F737C VA: 0x3F737C Slot: 4
	public virtual string get_OriginalString() { }

	// RVA: 0x3F7384 Offset: 0x3F7384 VA: 0x3F7384 Slot: 5
	public virtual byte[] get_KeyData() { }

	// RVA: 0x3F738C Offset: 0x3F738C VA: 0x3F738C Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x3F745C Offset: 0x3F745C VA: 0x3F745C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x3F7538 Offset: 0x3F7538 VA: 0x3F7538 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Globalization.Unicode
internal class SortKeyBuffer // TypeDefIndex: 109
{
	// Fields
	private int l1; // 0x8
	private int l2; // 0xC
	private int l3; // 0x10
	private int l4s; // 0x14
	private int l4t; // 0x18
	private int l4k; // 0x1C
	private int l4w; // 0x20
	private int l5; // 0x24
	private byte[] l1b; // 0x28
	private byte[] l2b; // 0x2C
	private byte[] l3b; // 0x30
	private byte[] l4sb; // 0x34
	private byte[] l4tb; // 0x38
	private byte[] l4kb; // 0x3C
	private byte[] l4wb; // 0x40
	private byte[] l5b; // 0x44
	private string source; // 0x48
	private bool processLevel2; // 0x4C
	private bool frenchSort; // 0x4D
	private bool frenchSorted; // 0x4E
	private int lcid; // 0x50
	private CompareOptions options; // 0x54

	// Methods

	// RVA: 0x49B904 Offset: 0x49B904 VA: 0x49B904
	public void .ctor(int lcid) { }

	// RVA: 0x4A30E8 Offset: 0x4A30E8 VA: 0x4A30E8
	public void Reset() { }

	// RVA: 0x49B90C Offset: 0x49B90C VA: 0x49B90C
	internal void Initialize(CompareOptions options, int lcid, string s, bool frenchSort) { }

	// RVA: 0x49C6CC Offset: 0x49C6CC VA: 0x49C6CC
	internal void AppendCJKExtension(byte lv1msb, byte lv1lsb) { }

	// RVA: 0x49C82C Offset: 0x49C82C VA: 0x49C82C
	internal void AppendKana(byte category, byte lv1, byte lv2, byte lv3, bool isSmallKana, byte markType, bool isKatakana, bool isHalfWidth) { }

	// RVA: 0x49C558 Offset: 0x49C558 VA: 0x49C558
	internal void AppendNormal(byte category, byte lv1, byte lv2, byte lv3) { }

	// RVA: 0x4A3210 Offset: 0x4A3210 VA: 0x4A3210
	private void AppendLevel5(byte category, byte lv1) { }

	// RVA: 0x4A3108 Offset: 0x4A3108 VA: 0x4A3108
	private void AppendBufferPrimitive(byte value, ref byte[] buf, ref int bidx) { }

	// RVA: 0x49BFEC Offset: 0x49BFEC VA: 0x49BFEC
	public SortKey GetResultAndReset() { }

	// RVA: 0x4A3820 Offset: 0x4A3820 VA: 0x4A3820
	private int GetOptimizedLength(byte[] data, int len, byte defaultValue) { }

	// RVA: 0x4A32A4 Offset: 0x4A32A4 VA: 0x4A32A4
	public SortKey GetResult() { }
}

// Namespace: Mono.Math.Prime.Generator
internal abstract class PrimeGeneratorBase // TypeDefIndex: 110
{
	// Properties
	public virtual ConfidenceFactor Confidence { get; }
	public virtual PrimalityTest PrimalityTest { get; }
	public virtual int TrialDivisionBounds { get; }

	// Methods

	// RVA: 0x4AA2AC Offset: 0x4AA2AC VA: 0x4AA2AC
	protected void .ctor() { }

	// RVA: 0x4AA2B4 Offset: 0x4AA2B4 VA: 0x4AA2B4 Slot: 4
	public virtual ConfidenceFactor get_Confidence() { }

	// RVA: 0x4AA2BC Offset: 0x4AA2BC VA: 0x4AA2BC Slot: 5
	public virtual PrimalityTest get_PrimalityTest() { }

	// RVA: 0x4AA350 Offset: 0x4AA350 VA: 0x4AA350 Slot: 6
	public virtual int get_TrialDivisionBounds() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract BigInteger GenerateNewPrime(int bits);
}

// Namespace: Mono.Math.Prime.Generator
internal class SequentialSearchPrimeGeneratorBase : PrimeGeneratorBase // TypeDefIndex: 111
{
	// Methods

	// RVA: 0x4A6A40 Offset: 0x4A6A40 VA: 0x4A6A40
	public void .ctor() { }

	// RVA: 0x4AA358 Offset: 0x4AA358 VA: 0x4AA358 Slot: 8
	protected virtual BigInteger GenerateSearchBase(int bits, object context) { }

	// RVA: 0x4AA400 Offset: 0x4AA400 VA: 0x4AA400 Slot: 7
	public override BigInteger GenerateNewPrime(int bits) { }

	// RVA: 0x4AA414 Offset: 0x4AA414 VA: 0x4AA414 Slot: 9
	public virtual BigInteger GenerateNewPrime(int bits, object context) { }

	// RVA: 0x4AABBC Offset: 0x4AABBC VA: 0x4AABBC Slot: 10
	protected virtual bool IsPrimeAcceptable(BigInteger bi, object context) { }
}

// Namespace: Mono.Math.Prime
internal enum ConfidenceFactor // TypeDefIndex: 112
{
	// Fields
	public int value__; // 0x0
	public const ConfidenceFactor ExtraLow = 0;
	public const ConfidenceFactor Low = 1;
	public const ConfidenceFactor Medium = 2;
	public const ConfidenceFactor High = 3;
	public const ConfidenceFactor ExtraHigh = 4;
	public const ConfidenceFactor Provable = 5;
}

// Namespace: Mono.Math.Prime
internal sealed class PrimalityTests // TypeDefIndex: 113
{
	// Methods

	// RVA: 0x4AAC9C Offset: 0x4AAC9C VA: 0x4AAC9C
	private static int GetSPPRounds(BigInteger bi, ConfidenceFactor confidence) { }

	// RVA: 0x4A695C Offset: 0x4A695C VA: 0x4A695C
	public static bool Test(BigInteger n, ConfidenceFactor confidence) { }

	// RVA: 0x4AB120 Offset: 0x4AB120 VA: 0x4AB120
	public static bool RabinMillerTest(BigInteger n, ConfidenceFactor confidence) { }

	// RVA: 0x4AAE8C Offset: 0x4AAE8C VA: 0x4AAE8C
	public static bool SmallPrimeSppTest(BigInteger bi, ConfidenceFactor confidence) { }
}

// Namespace: Mono.Math
internal class BigInteger // TypeDefIndex: 114
{
	// Fields
	private uint length; // 0x8
	private uint[] data; // 0xC
	internal static readonly uint[] smallPrimes; // 0x0
	private static RandomNumberGenerator rng; // 0x4

	// Properties
	private static RandomNumberGenerator Rng { get; }

	// Methods

	// RVA: 0x4A389C Offset: 0x4A389C VA: 0x4A389C
	public void .ctor(BigInteger.Sign sign, uint len) { }

	// RVA: 0x4A3920 Offset: 0x4A3920 VA: 0x4A3920
	public void .ctor(BigInteger bi) { }

	// RVA: 0x4A3A58 Offset: 0x4A3A58 VA: 0x4A3A58
	public void .ctor(BigInteger bi, uint len) { }

	// RVA: 0x4A3B74 Offset: 0x4A3B74 VA: 0x4A3B74
	public void .ctor(byte[] inData) { }

	// RVA: 0x4A40D8 Offset: 0x4A40D8 VA: 0x4A40D8
	public void .ctor(uint ui) { }

	// RVA: 0x4A418C Offset: 0x4A418C VA: 0x4A418C
	private static void .cctor() { }

	// RVA: 0x4A4224 Offset: 0x4A4224 VA: 0x4A4224
	private static RandomNumberGenerator get_Rng() { }

	// RVA: 0x4A433C Offset: 0x4A433C VA: 0x4A433C
	public static BigInteger GenerateRandom(int bits, RandomNumberGenerator rng) { }

	// RVA: 0x4A4538 Offset: 0x4A4538 VA: 0x4A4538
	public static BigInteger GenerateRandom(int bits) { }

	// RVA: 0x4A45C0 Offset: 0x4A45C0 VA: 0x4A45C0
	public void Randomize(RandomNumberGenerator rng) { }

	// RVA: 0x4A48F8 Offset: 0x4A48F8 VA: 0x4A48F8
	public void Randomize() { }

	// RVA: 0x4A4864 Offset: 0x4A4864 VA: 0x4A4864
	public int BitCount() { }

	// RVA: 0x4A4980 Offset: 0x4A4980 VA: 0x4A4980
	public bool TestBit(uint bitNum) { }

	// RVA: 0x4A49DC Offset: 0x4A49DC VA: 0x4A49DC
	public bool TestBit(int bitNum) { }

	// RVA: 0x4A4B1C Offset: 0x4A4B1C VA: 0x4A4B1C
	public void SetBit(uint bitNum) { }

	// RVA: 0x4A4B24 Offset: 0x4A4B24 VA: 0x4A4B24
	public void SetBit(uint bitNum, bool value) { }

	// RVA: 0x4A4B98 Offset: 0x4A4B98 VA: 0x4A4B98
	public int LowestSetBit() { }

	// RVA: 0x4A4C48 Offset: 0x4A4C48 VA: 0x4A4C48
	public byte[] GetBytes() { }

	// RVA: 0x4A4E0C Offset: 0x4A4E0C VA: 0x4A4E0C
	public string ToString(uint radix) { }

	// RVA: 0x4A4E78 Offset: 0x4A4E78 VA: 0x4A4E78
	public string ToString(uint radix, string characterSet) { }

	// RVA: 0x4A4054 Offset: 0x4A4054 VA: 0x4A4054
	private void Normalize() { }

	// RVA: 0x4A5330 Offset: 0x4A5330 VA: 0x4A5330
	public void Clear() { }

	// RVA: 0x4A53A0 Offset: 0x4A53A0 VA: 0x4A53A0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x4A5414 Offset: 0x4A5414 VA: 0x4A5414 Slot: 3
	public override string ToString() { }

	// RVA: 0x4A541C Offset: 0x4A541C VA: 0x4A541C Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x4A59E0 Offset: 0x4A59E0 VA: 0x4A59E0
	public BigInteger ModInverse(BigInteger modulus) { }

	// RVA: 0x4A62C8 Offset: 0x4A62C8 VA: 0x4A62C8
	public BigInteger ModPow(BigInteger exp, BigInteger n) { }

	// RVA: 0x4A65D8 Offset: 0x4A65D8 VA: 0x4A65D8
	public bool IsProbablePrime() { }

	// RVA: 0x4A69AC Offset: 0x4A69AC VA: 0x4A69AC
	public static BigInteger GeneratePseudoPrime(int bits) { }

	// RVA: 0x4A6A48 Offset: 0x4A6A48 VA: 0x4A6A48
	public void Incr2() { }

	// RVA: 0x4A68C8 Offset: 0x4A68C8 VA: 0x4A68C8
	public static BigInteger op_Implicit(uint value) { }

	// RVA: 0x4A6BB4 Offset: 0x4A6BB4 VA: 0x4A6BB4
	public static BigInteger op_Implicit(int value) { }

	// RVA: 0x4A6C84 Offset: 0x4A6C84 VA: 0x4A6C84
	public static BigInteger op_Addition(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x4A70BC Offset: 0x4A70BC VA: 0x4A70BC
	public static BigInteger op_Subtraction(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x4A6958 Offset: 0x4A6958 VA: 0x4A6958
	public static uint op_Modulus(BigInteger bi, uint ui) { }

	// RVA: 0x4A7688 Offset: 0x4A7688 VA: 0x4A7688
	public static BigInteger op_Modulus(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x4A80DC Offset: 0x4A80DC VA: 0x4A80DC
	public static BigInteger op_Division(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x4A8120 Offset: 0x4A8120 VA: 0x4A8120
	public static BigInteger op_Multiply(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x4A8530 Offset: 0x4A8530 VA: 0x4A8530
	public static BigInteger op_Multiply(BigInteger bi, int i) { }

	// RVA: 0x4A87F0 Offset: 0x4A87F0 VA: 0x4A87F0
	public static BigInteger op_LeftShift(BigInteger bi1, int shiftVal) { }

	// RVA: 0x4A8B7C Offset: 0x4A8B7C VA: 0x4A8B7C
	public static BigInteger op_RightShift(BigInteger bi1, int shiftVal) { }

	// RVA: 0x4A47DC Offset: 0x4A47DC VA: 0x4A47DC
	public static bool op_Equality(BigInteger bi1, uint ui) { }

	// RVA: 0x4A52A8 Offset: 0x4A52A8 VA: 0x4A52A8
	public static bool op_Inequality(BigInteger bi1, uint ui) { }

	// RVA: 0x4A55F4 Offset: 0x4A55F4 VA: 0x4A55F4
	public static bool op_Equality(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x4A8E40 Offset: 0x4A8E40 VA: 0x4A8E40
	public static bool op_Inequality(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x4A8F40 Offset: 0x4A8F40 VA: 0x4A8F40
	public static bool op_GreaterThan(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x4A8F60 Offset: 0x4A8F60 VA: 0x4A8F60
	public static bool op_LessThan(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x4A8F74 Offset: 0x4A8F74 VA: 0x4A8F74
	public static bool op_GreaterThanOrEqual(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x4A6938 Offset: 0x4A6938 VA: 0x4A6938
	public static bool op_LessThanOrEqual(BigInteger bi1, BigInteger bi2) { }
}

// Namespace: 
public enum BigInteger.Sign // TypeDefIndex: 115
{
	// Fields
	public int value__; // 0x0
	public const BigInteger.Sign Negative = -1;
	public const BigInteger.Sign Zero = 0;
	public const BigInteger.Sign Positive = 1;
}

// Namespace: 
internal sealed class BigInteger.ModulusRing // TypeDefIndex: 116
{
	// Fields
	private BigInteger mod; // 0x8
	private BigInteger constant; // 0xC

	// Methods

	// RVA: 0x4A635C Offset: 0x4A635C VA: 0x4A635C
	public void .ctor(BigInteger modulus) { }

	// RVA: 0x4A9BF0 Offset: 0x4A9BF0 VA: 0x4A9BF0
	public void BarrettReduction(BigInteger x) { }

	// RVA: 0x4A9FC8 Offset: 0x4A9FC8 VA: 0x4A9FC8
	public BigInteger Multiply(BigInteger a, BigInteger b) { }

	// RVA: 0x4A9974 Offset: 0x4A9974 VA: 0x4A9974
	public BigInteger Difference(BigInteger a, BigInteger b) { }

	// RVA: 0x4A6490 Offset: 0x4A6490 VA: 0x4A6490
	public BigInteger Pow(BigInteger a, BigInteger k) { }

	// RVA: 0x4AA228 Offset: 0x4AA228 VA: 0x4AA228
	public BigInteger Pow(uint b, BigInteger exp) { }
}

// Namespace: 
private sealed class BigInteger.Kernel // TypeDefIndex: 117
{
	// Methods

	// RVA: 0x4A6D9C Offset: 0x4A6D9C VA: 0x4A6D9C
	public static BigInteger AddSameSign(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x4A72DC Offset: 0x4A72DC VA: 0x4A72DC
	public static BigInteger Subtract(BigInteger big, BigInteger small) { }

	// RVA: 0x4A8F94 Offset: 0x4A8F94 VA: 0x4A8F94
	public static void MinusEq(BigInteger big, BigInteger small) { }

	// RVA: 0x4A91A4 Offset: 0x4A91A4 VA: 0x4A91A4
	public static void PlusEq(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x4A56F8 Offset: 0x4A56F8 VA: 0x4A56F8
	public static BigInteger.Sign Compare(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x4A51B0 Offset: 0x4A51B0 VA: 0x4A51B0
	public static uint SingleByteDivideInPlace(BigInteger n, uint d) { }

	// RVA: 0x4A75EC Offset: 0x4A75EC VA: 0x4A75EC
	public static uint DwordMod(BigInteger n, uint d) { }

	// RVA: 0x4A94AC Offset: 0x4A94AC VA: 0x4A94AC
	public static BigInteger[] DwordDivMod(BigInteger n, uint d) { }

	// RVA: 0x4A76CC Offset: 0x4A76CC VA: 0x4A76CC
	public static BigInteger[] multiByteDivide(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x4A87F4 Offset: 0x4A87F4 VA: 0x4A87F4
	public static BigInteger LeftShift(BigInteger bi, int n) { }

	// RVA: 0x4A8B80 Offset: 0x4A8B80 VA: 0x4A8B80
	public static BigInteger RightShift(BigInteger bi, int n) { }

	// RVA: 0x4A865C Offset: 0x4A865C VA: 0x4A865C
	public static BigInteger MultiplyByDword(BigInteger n, uint f) { }

	// RVA: 0x4A83FC Offset: 0x4A83FC VA: 0x4A83FC
	public static void Multiply(uint[] x, uint xOffset, uint xLen, uint[] y, uint yOffset, uint yLen, uint[] d, uint dOffset) { }

	// RVA: 0x4A9754 Offset: 0x4A9754 VA: 0x4A9754
	public static void MultiplyMod2p32pmod(uint[] x, int xOffset, int xLen, uint[] y, int yOffest, int yLen, uint[] d, int dOffset, int mod) { }

	// RVA: 0x4A9880 Offset: 0x4A9880 VA: 0x4A9880
	public static uint modInverse(BigInteger bi, uint modulus) { }

	// RVA: 0x4A59E4 Offset: 0x4A59E4 VA: 0x4A59E4
	public static BigInteger modInverse(BigInteger bi, BigInteger modulus) { }
}

// Namespace: Mono.Security.Cryptography
internal sealed class CryptoConvert // TypeDefIndex: 118
{
	// Methods

	// RVA: 0x4AEE34 Offset: 0x4AEE34 VA: 0x4AEE34
	private static int ToInt32LE(byte[] bytes, int offset) { }

	// RVA: 0x4AEF04 Offset: 0x4AEF04 VA: 0x4AEF04
	private static uint ToUInt32LE(byte[] bytes, int offset) { }

	// RVA: 0x4AEFD4 Offset: 0x4AEFD4 VA: 0x4AEFD4
	private static byte[] GetBytesLE(int val) { }

	// RVA: 0x4AF0DC Offset: 0x4AF0DC VA: 0x4AF0DC
	private static byte[] Trim(byte[] array) { }

	// RVA: 0x4AF1DC Offset: 0x4AF1DC VA: 0x4AF1DC
	public static RSA FromCapiPrivateKeyBlob(byte[] blob, int offset) { }

	// RVA: 0x4AF87C Offset: 0x4AF87C VA: 0x4AF87C
	public static byte[] ToCapiPrivateKeyBlob(RSA rsa) { }

	// RVA: 0x4AFE1C Offset: 0x4AFE1C VA: 0x4AFE1C
	public static RSA FromCapiPublicKeyBlob(byte[] blob) { }

	// RVA: 0x4AFE24 Offset: 0x4AFE24 VA: 0x4AFE24
	public static RSA FromCapiPublicKeyBlob(byte[] blob, int offset) { }

	// RVA: 0x4B032C Offset: 0x4B032C VA: 0x4B032C
	public static byte[] ToCapiPublicKeyBlob(RSA rsa) { }

	// RVA: 0x4B06D4 Offset: 0x4B06D4 VA: 0x4B06D4
	public static RSA FromCapiKeyBlob(byte[] blob) { }

	// RVA: 0x4B06DC Offset: 0x4B06DC VA: 0x4B06DC
	public static RSA FromCapiKeyBlob(byte[] blob, int offset) { }

	// RVA: 0x4B08A0 Offset: 0x4B08A0 VA: 0x4B08A0
	public static byte[] ToCapiKeyBlob(RSA rsa, bool includePrivateKey) { }
}

// Namespace: Mono.Security.Cryptography
internal sealed class KeyBuilder // TypeDefIndex: 119
{
	// Fields
	private static RandomNumberGenerator rng; // 0x0

	// Properties
	private static RandomNumberGenerator Rng { get; }

	// Methods

	// RVA: 0x4B31C0 Offset: 0x4B31C0 VA: 0x4B31C0
	private static RandomNumberGenerator get_Rng() { }

	// RVA: 0x4B3254 Offset: 0x4B3254 VA: 0x4B3254
	public static byte[] Key(int size) { }

	// RVA: 0x4B32F0 Offset: 0x4B32F0 VA: 0x4B32F0
	public static byte[] IV(int size) { }
}

// Namespace: Mono.Security.Cryptography
internal class BlockProcessor // TypeDefIndex: 120
{
	// Fields
	private ICryptoTransform transform; // 0x8
	private byte[] block; // 0xC
	private int blockSize; // 0x10
	private int blockCount; // 0x14

	// Methods

	// RVA: 0x4AE92C Offset: 0x4AE92C VA: 0x4AE92C
	public void .ctor(ICryptoTransform transform, int blockSize) { }

	// RVA: 0x4AE9B0 Offset: 0x4AE9B0 VA: 0x4AE9B0 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x4AEA24 Offset: 0x4AEA24 VA: 0x4AEA24
	public void Initialize() { }

	// RVA: 0x4AEA50 Offset: 0x4AEA50 VA: 0x4AEA50
	public void Core(byte[] rgb) { }

	// RVA: 0x4AEA90 Offset: 0x4AEA90 VA: 0x4AEA90
	public void Core(byte[] rgb, int ib, int cb) { }

	// RVA: 0x4AED3C Offset: 0x4AED3C VA: 0x4AED3C
	public byte[] Final() { }
}

// Namespace: Mono.Security.Cryptography
internal class DSAManaged : DSA // TypeDefIndex: 121
{
	// Fields
	private bool keypairGenerated; // 0x10
	private bool m_disposed; // 0x11
	private BigInteger p; // 0x14
	private BigInteger q; // 0x18
	private BigInteger g; // 0x1C
	private BigInteger x; // 0x20
	private BigInteger y; // 0x24
	private BigInteger j; // 0x28
	private BigInteger seed; // 0x2C
	private int counter; // 0x30
	private bool j_missing; // 0x34
	private RandomNumberGenerator rng; // 0x38
	private DSAManaged.KeyGeneratedEventHandler KeyGenerated; // 0x3C

	// Properties
	private RandomNumberGenerator Random { get; }
	public override int KeySize { get; }
	public bool PublicOnly { get; }

	// Methods

	// RVA: 0x4B0968 Offset: 0x4B0968 VA: 0x4B0968
	public void .ctor(int dwKeySize) { }

	// RVA: 0x4B0A80 Offset: 0x4B0A80 VA: 0x4B0A80
	public void add_KeyGenerated(DSAManaged.KeyGeneratedEventHandler value) { }

	// RVA: 0x4B0B6C Offset: 0x4B0B6C VA: 0x4B0B6C
	public void remove_KeyGenerated(DSAManaged.KeyGeneratedEventHandler value) { }

	// RVA: 0x4B0C58 Offset: 0x4B0C58 VA: 0x4B0C58 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x4B0CD0 Offset: 0x4B0CD0 VA: 0x4B0CD0
	private void Generate() { }

	// RVA: 0x4B14F0 Offset: 0x4B14F0 VA: 0x4B14F0
	private void GenerateKeyPair() { }

	// RVA: 0x4B1A30 Offset: 0x4B1A30 VA: 0x4B1A30
	private void add(byte[] a, byte[] b, int value) { }

	// RVA: 0x4B0D20 Offset: 0x4B0D20 VA: 0x4B0D20
	private void GenerateParams(int keyLength) { }

	// RVA: 0x4B1B3C Offset: 0x4B1B3C VA: 0x4B1B3C
	private RandomNumberGenerator get_Random() { }

	// RVA: 0x4B1B64 Offset: 0x4B1B64 VA: 0x4B1B64 Slot: 5
	public override int get_KeySize() { }

	// RVA: 0x4B1BA0 Offset: 0x4B1BA0 VA: 0x4B1BA0
	public bool get_PublicOnly() { }

	// RVA: 0x4B1C3C Offset: 0x4B1C3C VA: 0x4B1C3C
	private byte[] NormalizeArray(byte[] array) { }

	// RVA: 0x4B1D08 Offset: 0x4B1D08 VA: 0x4B1D08 Slot: 11
	public override DSAParameters ExportParameters(bool includePrivateParameters) { }

	// RVA: 0x4B2044 Offset: 0x4B2044 VA: 0x4B2044 Slot: 12
	public override void ImportParameters(DSAParameters parameters) { }

	// RVA: 0x4B23A4 Offset: 0x4B23A4 VA: 0x4B23A4 Slot: 10
	public override byte[] CreateSignature(byte[] rgbHash) { }

	// RVA: 0x4B27F8 Offset: 0x4B27F8 VA: 0x4B27F8 Slot: 13
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature) { }

	// RVA: 0x4B2E24 Offset: 0x4B2E24 VA: 0x4B2E24 Slot: 7
	protected override void Dispose(bool disposing) { }
}

// Namespace: 
public sealed class DSAManaged.KeyGeneratedEventHandler : MulticastDelegate // TypeDefIndex: 122
{
	// Methods

	// RVA: 0x4B3168 Offset: 0x4B3168 VA: 0x4B3168
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x4B1654 Offset: 0x4B1654 VA: 0x4B1654 Slot: 11
	public virtual void Invoke(object sender, EventArgs e) { }

	// RVA: 0x4B317C Offset: 0x4B317C VA: 0x4B317C Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x4B31B4 Offset: 0x4B31B4 VA: 0x4B31B4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: Mono.Security.Cryptography
internal class KeyPairPersistence // TypeDefIndex: 123
{
	// Fields
	private static bool _userPathExists; // 0x0
	private static string _userPath; // 0x4
	private static bool _machinePathExists; // 0x8
	private static string _machinePath; // 0xC
	private CspParameters _params; // 0x8
	private string _keyvalue; // 0xC
	private string _filename; // 0x10
	private string _container; // 0x14
	private static object lockobj; // 0x10

	// Properties
	public string Filename { get; }
	public string KeyValue { get; set; }
	private static string UserPath { get; }
	private static string MachinePath { get; }
	private bool CanChange { get; }
	private bool UseDefaultKeyContainer { get; }
	private bool UseMachineKeyStore { get; }
	private string ContainerName { get; }

	// Methods

	// RVA: 0x4B338C Offset: 0x4B338C VA: 0x4B338C
	public void .ctor(CspParameters parameters) { }

	// RVA: 0x4B3394 Offset: 0x4B3394 VA: 0x4B3394
	public void .ctor(CspParameters parameters, string keyPair) { }

	// RVA: 0x4B359C Offset: 0x4B359C VA: 0x4B359C
	private static void .cctor() { }

	// RVA: 0x4B3638 Offset: 0x4B3638 VA: 0x4B3638
	public string get_Filename() { }

	// RVA: 0x4B47B8 Offset: 0x4B47B8 VA: 0x4B47B8
	public string get_KeyValue() { }

	// RVA: 0x4B47C0 Offset: 0x4B47C0 VA: 0x4B47C0
	public void set_KeyValue(string value) { }

	// RVA: 0x4B47E4 Offset: 0x4B47E4 VA: 0x4B47E4
	public bool Load() { }

	// RVA: 0x4B4B9C Offset: 0x4B4B9C VA: 0x4B4B9C
	public void Save() { }

	// RVA: 0x4B52DC Offset: 0x4B52DC VA: 0x4B52DC
	public void Remove() { }

	// RVA: 0x4B41B4 Offset: 0x4B41B4 VA: 0x4B41B4
	private static string get_UserPath() { }

	// RVA: 0x4B3BB0 Offset: 0x4B3BB0 VA: 0x4B3BB0
	private static string get_MachinePath() { }

	// RVA: 0x4B548C Offset: 0x4B548C VA: 0x4B548C
	internal static bool _CanSecure(string root) { }

	// RVA: 0x4B5490 Offset: 0x4B5490 VA: 0x4B5490
	internal static bool _ProtectUser(string path) { }

	// RVA: 0x4B5494 Offset: 0x4B5494 VA: 0x4B5494
	internal static bool _ProtectMachine(string path) { }

	// RVA: 0x4B5498 Offset: 0x4B5498 VA: 0x4B5498
	internal static bool _IsUserProtected(string path) { }

	// RVA: 0x4B549C Offset: 0x4B549C VA: 0x4B549C
	internal static bool _IsMachineProtected(string path) { }

	// RVA: 0x4B54A0 Offset: 0x4B54A0 VA: 0x4B54A0
	private static bool CanSecure(string path) { }

	// RVA: 0x4B521C Offset: 0x4B521C VA: 0x4B521C
	private static bool ProtectUser(string path) { }

	// RVA: 0x4B515C Offset: 0x4B515C VA: 0x4B515C
	private static bool ProtectMachine(string path) { }

	// RVA: 0x4B530C Offset: 0x4B530C VA: 0x4B530C
	private static bool IsUserProtected(string path) { }

	// RVA: 0x4B53CC Offset: 0x4B53CC VA: 0x4B53CC
	private static bool IsMachineProtected(string path) { }

	// RVA: 0x4B47D0 Offset: 0x4B47D0 VA: 0x4B47D0
	private bool get_CanChange() { }

	// RVA: 0x4B55A0 Offset: 0x4B55A0 VA: 0x4B55A0
	private bool get_UseDefaultKeyContainer() { }

	// RVA: 0x4B3B80 Offset: 0x4B3B80 VA: 0x4B3B80
	private bool get_UseMachineKeyStore() { }

	// RVA: 0x4B3978 Offset: 0x4B3978 VA: 0x4B3978
	private string get_ContainerName() { }

	// RVA: 0x4B3464 Offset: 0x4B3464 VA: 0x4B3464
	private CspParameters Copy(CspParameters p) { }

	// RVA: 0x4B4980 Offset: 0x4B4980 VA: 0x4B4980
	private void FromXml(string xml) { }

	// RVA: 0x4B4E30 Offset: 0x4B4E30 VA: 0x4B4E30
	private string ToXml() { }
}

// Namespace: Mono.Security.Cryptography
internal class MACAlgorithm // TypeDefIndex: 124
{
	// Fields
	private SymmetricAlgorithm algo; // 0x8
	private ICryptoTransform enc; // 0xC
	private byte[] block; // 0x10
	private int blockSize; // 0x14
	private int blockCount; // 0x18

	// Methods

	// RVA: 0x4B55D0 Offset: 0x4B55D0 VA: 0x4B55D0
	public void .ctor(SymmetricAlgorithm algorithm) { }

	// RVA: 0x4B56E8 Offset: 0x4B56E8 VA: 0x4B56E8
	public void Initialize(byte[] key) { }

	// RVA: 0x4B577C Offset: 0x4B577C VA: 0x4B577C
	public void Core(byte[] rgb, int ib, int cb) { }

	// RVA: 0x4B5A14 Offset: 0x4B5A14 VA: 0x4B5A14
	public byte[] Final() { }
}

// Namespace: Mono.Security.Cryptography
internal sealed class PKCS1 // TypeDefIndex: 125
{
	// Fields
	private static byte[] emptySHA1; // 0x0
	private static byte[] emptySHA256; // 0x4
	private static byte[] emptySHA384; // 0x8
	private static byte[] emptySHA512; // 0xC

	// Methods

	// RVA: 0x29E9C8 Offset: 0x29E9C8 VA: 0x29E9C8
	private static void .cctor() { }

	// RVA: 0x29EB08 Offset: 0x29EB08 VA: 0x29EB08
	private static bool Compare(byte[] array1, byte[] array2) { }

	// RVA: 0x29EBD0 Offset: 0x29EBD0 VA: 0x29EBD0
	public static byte[] I2OSP(byte[] x, int size) { }

	// RVA: 0x29EC94 Offset: 0x29EC94 VA: 0x29EC94
	public static byte[] OS2IP(byte[] x) { }

	// RVA: 0x29EDA0 Offset: 0x29EDA0 VA: 0x29EDA0
	public static byte[] RSAEP(RSA rsa, byte[] m) { }

	// RVA: 0x29EDDC Offset: 0x29EDDC VA: 0x29EDDC
	public static byte[] RSASP1(RSA rsa, byte[] m) { }

	// RVA: 0x29EE18 Offset: 0x29EE18 VA: 0x29EE18
	public static byte[] RSAVP1(RSA rsa, byte[] s) { }

	// RVA: 0x29EE54 Offset: 0x29EE54 VA: 0x29EE54
	public static byte[] Encrypt_v15(RSA rsa, RandomNumberGenerator rng, byte[] M) { }

	// RVA: 0x29F094 Offset: 0x29F094 VA: 0x29F094
	public static byte[] Sign_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue) { }

	// RVA: 0x29F5D4 Offset: 0x29F5D4 VA: 0x29F5D4
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature) { }

	// RVA: 0x29F67C Offset: 0x29F67C VA: 0x29F67C
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature, bool tryNonStandardEncoding) { }

	// RVA: 0x29F174 Offset: 0x29F174 VA: 0x29F174
	public static byte[] Encode_v15(HashAlgorithm hash, byte[] hashValue, int emLength) { }
}

// Namespace: Mono.Security.Cryptography
internal sealed class PKCS8 // TypeDefIndex: 126
{}

// Namespace: 
public class PKCS8.PrivateKeyInfo // TypeDefIndex: 127
{
	// Fields
	private int _version; // 0x8
	private string _algorithm; // 0xC
	private byte[] _key; // 0x10
	private ArrayList _list; // 0x14

	// Properties
	public byte[] PrivateKey { get; }

	// Methods

	// RVA: 0x2A0070 Offset: 0x2A0070 VA: 0x2A0070
	public void .ctor() { }

	// RVA: 0x2A00F4 Offset: 0x2A00F4 VA: 0x2A00F4
	public void .ctor(byte[] data) { }

	// RVA: 0x2A051C Offset: 0x2A051C VA: 0x2A051C
	public byte[] get_PrivateKey() { }

	// RVA: 0x2A0118 Offset: 0x2A0118 VA: 0x2A0118
	private void Decode(byte[] data) { }

	// RVA: 0x2A0618 Offset: 0x2A0618 VA: 0x2A0618
	private static byte[] RemoveLeadingZero(byte[] bigInt) { }

	// RVA: 0x2A0704 Offset: 0x2A0704 VA: 0x2A0704
	private static byte[] Normalize(byte[] bigInt, int length) { }

	// RVA: 0x2A07D4 Offset: 0x2A07D4 VA: 0x2A07D4
	public static RSA DecodeRSA(byte[] keypair) { }

	// RVA: 0x2A0DCC Offset: 0x2A0DCC VA: 0x2A0DCC
	public static DSA DecodeDSA(byte[] privateKey, DSAParameters dsaParameters) { }
}

// Namespace: 
public class PKCS8.EncryptedPrivateKeyInfo // TypeDefIndex: 128
{
	// Fields
	private string _algorithm; // 0x8
	private byte[] _salt; // 0xC
	private int _iterations; // 0x10
	private byte[] _data; // 0x14

	// Properties
	public string Algorithm { get; }
	public byte[] EncryptedData { get; }
	public byte[] Salt { get; }
	public int IterationCount { get; }

	// Methods

	// RVA: 0x29F90C Offset: 0x29F90C VA: 0x29F90C
	public void .ctor() { }

	// RVA: 0x29F914 Offset: 0x29F914 VA: 0x29F914
	public void .ctor(byte[] data) { }

	// RVA: 0x29FDF8 Offset: 0x29FDF8 VA: 0x29FDF8
	public string get_Algorithm() { }

	// RVA: 0x29FE00 Offset: 0x29FE00 VA: 0x29FE00
	public byte[] get_EncryptedData() { }

	// RVA: 0x29FF00 Offset: 0x29FF00 VA: 0x29FF00
	public byte[] get_Salt() { }

	// RVA: 0x2A0068 Offset: 0x2A0068 VA: 0x2A0068
	public int get_IterationCount() { }

	// RVA: 0x29F93C Offset: 0x29F93C VA: 0x29F93C
	private void Decode(byte[] data) { }
}

// Namespace: Mono.Security.Cryptography
internal class RSAManaged : RSA // TypeDefIndex: 129
{
	// Fields
	private bool isCRTpossible; // 0x10
	private bool keyBlinding; // 0x11
	private bool keypairGenerated; // 0x12
	private bool m_disposed; // 0x13
	private BigInteger d; // 0x14
	private BigInteger p; // 0x18
	private BigInteger q; // 0x1C
	private BigInteger dp; // 0x20
	private BigInteger dq; // 0x24
	private BigInteger qInv; // 0x28
	private BigInteger n; // 0x2C
	private BigInteger e; // 0x30
	private RSAManaged.KeyGeneratedEventHandler KeyGenerated; // 0x34

	// Properties
	public override int KeySize { get; }
	public bool PublicOnly { get; }
	public bool IsCrtPossible { get; }

	// Methods

	// RVA: 0x2A0F5C Offset: 0x2A0F5C VA: 0x2A0F5C
	public void .ctor(int keySize) { }

	// RVA: 0x2A1088 Offset: 0x2A1088 VA: 0x2A1088
	public void add_KeyGenerated(RSAManaged.KeyGeneratedEventHandler value) { }

	// RVA: 0x2A1174 Offset: 0x2A1174 VA: 0x2A1174
	public void remove_KeyGenerated(RSAManaged.KeyGeneratedEventHandler value) { }

	// RVA: 0x2A1260 Offset: 0x2A1260 VA: 0x2A1260 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x2A12D8 Offset: 0x2A12D8 VA: 0x2A12D8
	private void GenerateKeyPair() { }

	// RVA: 0x2A1A80 Offset: 0x2A1A80 VA: 0x2A1A80 Slot: 5
	public override int get_KeySize() { }

	// RVA: 0x2A1AD0 Offset: 0x2A1AD0 VA: 0x2A1AD0
	public bool get_PublicOnly() { }

	// RVA: 0x2A1BC0 Offset: 0x2A1BC0 VA: 0x2A1BC0 Slot: 11
	public override byte[] DecryptValue(byte[] rgb) { }

	// RVA: 0x2A217C Offset: 0x2A217C VA: 0x2A217C Slot: 10
	public override byte[] EncryptValue(byte[] rgb) { }

	// RVA: 0x2A22F4 Offset: 0x2A22F4 VA: 0x2A22F4 Slot: 12
	public override RSAParameters ExportParameters(bool includePrivateParameters) { }

	// RVA: 0x2A27A4 Offset: 0x2A27A4 VA: 0x2A27A4 Slot: 13
	public override void ImportParameters(RSAParameters parameters) { }

	// RVA: 0x2A2ED4 Offset: 0x2A2ED4 VA: 0x2A2ED4 Slot: 7
	protected override void Dispose(bool disposing) { }

	// RVA: 0x2A32C0 Offset: 0x2A32C0 VA: 0x2A32C0 Slot: 9
	public override string ToXmlString(bool includePrivateParameters) { }

	// RVA: 0x2A3D34 Offset: 0x2A3D34 VA: 0x2A3D34
	public bool get_IsCrtPossible() { }

	// RVA: 0x2A2090 Offset: 0x2A2090 VA: 0x2A2090
	private byte[] GetPaddedValue(BigInteger value, int length) { }
}

// Namespace: 
public sealed class RSAManaged.KeyGeneratedEventHandler : MulticastDelegate // TypeDefIndex: 130
{
	// Methods

	// RVA: 0x2A3D54 Offset: 0x2A3D54 VA: 0x2A3D54
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x2A16A4 Offset: 0x2A16A4 VA: 0x2A16A4 Slot: 11
	public virtual void Invoke(object sender, EventArgs e) { }

	// RVA: 0x2A3D68 Offset: 0x2A3D68 VA: 0x2A3D68 Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x2A3DA0 Offset: 0x2A3DA0 VA: 0x2A3DA0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: Mono.Security.Cryptography
internal abstract class SymmetricTransform : IDisposable, ICryptoTransform // TypeDefIndex: 131
{
	// Fields
	protected SymmetricAlgorithm algo; // 0x8
	protected bool encrypt; // 0xC
	private int BlockSizeByte; // 0x10
	private byte[] temp; // 0x14
	private byte[] temp2; // 0x18
	private byte[] workBuff; // 0x1C
	private byte[] workout; // 0x20
	private int FeedBackByte; // 0x24
	private int FeedBackIter; // 0x28
	private bool m_disposed; // 0x2C
	private bool lastBlock; // 0x2D
	private RandomNumberGenerator _rng; // 0x30

	// Properties
	public virtual bool CanReuseTransform { get; }
	private bool KeepLastBlock { get; }

	// Methods

	// RVA: 0x2A3DAC Offset: 0x2A3DAC VA: 0x2A3DAC
	public void .ctor(SymmetricAlgorithm symmAlgo, bool encryption, byte[] rgbIV) { }

	// RVA: 0x2A4108 Offset: 0x2A4108 VA: 0x2A4108 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x2A413C Offset: 0x2A413C VA: 0x2A413C Slot: 1
	protected override void Finalize() { }

	// RVA: 0x2A41B4 Offset: 0x2A41B4 VA: 0x2A41B4 Slot: 8
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x2A420C Offset: 0x2A420C VA: 0x2A420C Slot: 9
	public virtual bool get_CanReuseTransform() { }

	// RVA: 0x2A4214 Offset: 0x2A4214 VA: 0x2A4214 Slot: 10
	protected virtual void Transform(byte[] input, byte[] output) { }

	// RVA: -1 Offset: -1 Slot: 11
	protected abstract void ECB(byte[] input, byte[] output);

	// RVA: 0x2A442C Offset: 0x2A442C VA: 0x2A442C Slot: 12
	protected virtual void CBC(byte[] input, byte[] output) { }

	// RVA: 0x2A461C Offset: 0x2A461C VA: 0x2A461C Slot: 13
	protected virtual void CFB(byte[] input, byte[] output) { }

	// RVA: 0x2A4954 Offset: 0x2A4954 VA: 0x2A4954 Slot: 14
	protected virtual void OFB(byte[] input, byte[] output) { }

	// RVA: 0x2A49F0 Offset: 0x2A49F0 VA: 0x2A49F0 Slot: 15
	protected virtual void CTS(byte[] input, byte[] output) { }

	// RVA: 0x2A4A8C Offset: 0x2A4A8C VA: 0x2A4A8C
	private void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x2A4D84 Offset: 0x2A4D84 VA: 0x2A4D84 Slot: 16
	public virtual int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x2A5128 Offset: 0x2A5128 VA: 0x2A5128
	private bool get_KeepLastBlock() { }

	// RVA: 0x2A51B0 Offset: 0x2A51B0 VA: 0x2A51B0
	private int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x2A53D8 Offset: 0x2A53D8 VA: 0x2A53D8
	private void Random(byte[] buffer, int start, int length) { }

	// RVA: 0x2A54B8 Offset: 0x2A54B8 VA: 0x2A54B8
	private void ThrowBadPaddingException(PaddingMode padding, int length, int position) { }

	// RVA: 0x2A56F8 Offset: 0x2A56F8 VA: 0x2A56F8
	private byte[] FinalEncrypt(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x2A5AC4 Offset: 0x2A5AC4 VA: 0x2A5AC4
	private byte[] FinalDecrypt(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x2A5EC4 Offset: 0x2A5EC4 VA: 0x2A5EC4 Slot: 17
	public virtual byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: Mono.Security.X509
internal class SafeBag // TypeDefIndex: 132
{
	// Fields
	private string _bagOID; // 0x8
	private ASN1 _asn1; // 0xC

	// Properties
	public string BagOID { get; }
	public ASN1 ASN1 { get; }

	// Methods

	// RVA: 0x2AC474 Offset: 0x2AC474 VA: 0x2AC474
	public void .ctor(string bagOID, ASN1 asn1) { }

	// RVA: 0x2AA61C Offset: 0x2AA61C VA: 0x2AA61C
	public string get_BagOID() { }

	// RVA: 0x2AA624 Offset: 0x2AA624 VA: 0x2AA624
	public ASN1 get_ASN1() { }
}

// Namespace: Mono.Security.X509
internal class PKCS12 : ICloneable // TypeDefIndex: 133
{
	// Fields
	private static int recommendedIterationCount; // 0x0
	private byte[] _password; // 0x8
	private ArrayList _keyBags; // 0xC
	private ArrayList _secretBags; // 0x10
	private X509CertificateCollection _certs; // 0x14
	private bool _keyBagsChanged; // 0x18
	private bool _secretBagsChanged; // 0x19
	private bool _certsChanged; // 0x1A
	private int _iterations; // 0x1C
	private ArrayList _safeBags; // 0x20
	private RandomNumberGenerator _rng; // 0x24
	private static int password_max_length; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0x9B148 Offset: 0x9B148 VA: 0x9B148
	private static Dictionary<string, int> <>f__switch$map8; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0x9B158 Offset: 0x9B158 VA: 0x9B158
	private static Dictionary<string, int> <>f__switch$map9; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0x9B168 Offset: 0x9B168 VA: 0x9B168
	private static Dictionary<string, int> <>f__switch$mapA; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0x9B178 Offset: 0x9B178 VA: 0x9B178
	private static Dictionary<string, int> <>f__switch$mapB; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0x9B188 Offset: 0x9B188 VA: 0x9B188
	private static Dictionary<string, int> <>f__switch$mapF; // 0x18

	// Properties
	public string Password { set; }
	public int IterationCount { get; set; }
	public X509CertificateCollection Certificates { get; }
	internal RandomNumberGenerator RNG { get; }
	public static int MaximumPasswordLength { get; }

	// Methods

	// RVA: 0x2A7CC4 Offset: 0x2A7CC4 VA: 0x2A7CC4
	public void .ctor() { }

	// RVA: 0x2A7DF0 Offset: 0x2A7DF0 VA: 0x2A7DF0
	public void .ctor(byte[] data) { }

	// RVA: 0x2A8CF8 Offset: 0x2A8CF8 VA: 0x2A8CF8
	public void .ctor(byte[] data, string password) { }

	// RVA: 0x2A8D2C Offset: 0x2A8D2C VA: 0x2A8D2C
	private static void .cctor() { }

	// RVA: 0x2A8028 Offset: 0x2A8028 VA: 0x2A8028
	private void Decode(byte[] data) { }

	// RVA: 0x2A9FF8 Offset: 0x2A9FF8 VA: 0x2A9FF8 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x2A7E58 Offset: 0x2A7E58 VA: 0x2A7E58
	public void set_Password(string value) { }

	// RVA: 0x2AA104 Offset: 0x2AA104 VA: 0x2AA104
	public int get_IterationCount() { }

	// RVA: 0x2AA10C Offset: 0x2AA10C VA: 0x2AA10C
	public void set_IterationCount(int value) { }

	// RVA: 0x2AA114 Offset: 0x2AA114 VA: 0x2AA114
	public X509CertificateCollection get_Certificates() { }

	// RVA: 0x2AA8F4 Offset: 0x2AA8F4 VA: 0x2AA8F4
	internal RandomNumberGenerator get_RNG() { }

	// RVA: 0x2A8FB0 Offset: 0x2A8FB0 VA: 0x2A8FB0
	private bool Compare(byte[] expected, byte[] actual) { }

	// RVA: 0x2AA91C Offset: 0x2AA91C VA: 0x2AA91C
	private SymmetricAlgorithm GetSymmetricAlgorithm(string algorithmOid, byte[] salt, int iterationCount) { }

	// RVA: 0x2AB568 Offset: 0x2AB568 VA: 0x2AB568
	public byte[] Decrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] encryptedData) { }

	// RVA: 0x2A9EEC Offset: 0x2A9EEC VA: 0x2A9EEC
	public byte[] Decrypt(PKCS7.EncryptedData ed) { }

	// RVA: 0x2AB738 Offset: 0x2AB738 VA: 0x2AB738
	public byte[] Encrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] data) { }

	// RVA: 0x2AB97C Offset: 0x2AB97C VA: 0x2AB97C
	private DSAParameters GetExistingParameters(out bool found) { }

	// RVA: 0x2AC2AC Offset: 0x2AC2AC VA: 0x2AC2AC
	private void AddPrivateKey(PKCS8.PrivateKeyInfo pki) { }

	// RVA: 0x2A9078 Offset: 0x2A9078 VA: 0x2A9078
	private void ReadSafeBag(ASN1 safeBag) { }

	// RVA: 0x2AC49C Offset: 0x2AC49C VA: 0x2AC49C
	private ASN1 CertificateSafeBag(X509Certificate x509, IDictionary attributes) { }

	// RVA: 0x2A8DA4 Offset: 0x2A8DA4 VA: 0x2A8DA4
	private byte[] MAC(byte[] password, byte[] salt, int iterations, byte[] data) { }

	// RVA: 0x2AD838 Offset: 0x2AD838 VA: 0x2AD838
	public byte[] GetBytes() { }

	// RVA: 0x2B02B8 Offset: 0x2B02B8 VA: 0x2B02B8
	private PKCS7.ContentInfo EncryptedContentInfo(ASN1 safeBags, string algorithmOid) { }

	// RVA: 0x2B02B0 Offset: 0x2B02B0 VA: 0x2B02B0
	public void AddCertificate(X509Certificate cert) { }

	// RVA: 0x2B06CC Offset: 0x2B06CC VA: 0x2B06CC
	public void AddCertificate(X509Certificate cert, IDictionary attributes) { }

	// RVA: 0x2B02A8 Offset: 0x2B02A8 VA: 0x2B02A8
	public void RemoveCertificate(X509Certificate cert) { }

	// RVA: 0x2B0A30 Offset: 0x2B0A30 VA: 0x2B0A30
	public void RemoveCertificate(X509Certificate cert, IDictionary attrs) { }

	// RVA: 0x2B11B8 Offset: 0x2B11B8 VA: 0x2B11B8 Slot: 4
	public object Clone() { }

	// RVA: 0x2AA078 Offset: 0x2AA078 VA: 0x2AA078
	public static int get_MaximumPasswordLength() { }
}

// Namespace: 
public class PKCS12.DeriveBytes // TypeDefIndex: 134
{
	// Fields
	private static byte[] keyDiversifier; // 0x0
	private static byte[] ivDiversifier; // 0x4
	private static byte[] macDiversifier; // 0x8
	private string _hashName; // 0x8
	private int _iterations; // 0xC
	private byte[] _password; // 0x10
	private byte[] _salt; // 0x14

	// Properties
	public string HashName { set; }
	public int IterationCount { set; }
	public byte[] Password { set; }
	public byte[] Salt { set; }

	// Methods

	// RVA: 0x2AB1F0 Offset: 0x2AB1F0 VA: 0x2AB1F0
	public void .ctor() { }

	// RVA: 0x2B12E8 Offset: 0x2B12E8 VA: 0x2B12E8
	private static void .cctor() { }

	// RVA: 0x2AB420 Offset: 0x2AB420 VA: 0x2AB420
	public void set_HashName(string value) { }

	// RVA: 0x2AB418 Offset: 0x2AB418 VA: 0x2AB418
	public void set_IterationCount(int value) { }

	// RVA: 0x2AB1F8 Offset: 0x2AB1F8 VA: 0x2AB1F8
	public void set_Password(byte[] value) { }

	// RVA: 0x2AB318 Offset: 0x2AB318 VA: 0x2AB318
	public void set_Salt(byte[] value) { }

	// RVA: 0x2B13F0 Offset: 0x2B13F0 VA: 0x2B13F0
	private void Adjust(byte[] a, int aOff, byte[] b) { }

	// RVA: 0x2B1584 Offset: 0x2B1584 VA: 0x2B1584
	private byte[] Derive(byte[] diversifier, int n) { }

	// RVA: 0x2AB428 Offset: 0x2AB428 VA: 0x2AB428
	public byte[] DeriveKey(int size) { }

	// RVA: 0x2AB4C8 Offset: 0x2AB4C8 VA: 0x2AB4C8
	public byte[] DeriveIV(int size) { }

	// RVA: 0x2AD798 Offset: 0x2AD798 VA: 0x2AD798
	public byte[] DeriveMAC(int size) { }
}

// Namespace: Mono.Security.X509
internal sealed class X501 // TypeDefIndex: 135
{
	// Fields
	private static byte[] countryName; // 0x0
	private static byte[] organizationName; // 0x4
	private static byte[] organizationalUnitName; // 0x8
	private static byte[] commonName; // 0xC
	private static byte[] localityName; // 0x10
	private static byte[] stateOrProvinceName; // 0x14
	private static byte[] streetAddress; // 0x18
	private static byte[] domainComponent; // 0x1C
	private static byte[] userid; // 0x20
	private static byte[] email; // 0x24
	private static byte[] dnQualifier; // 0x28
	private static byte[] title; // 0x2C
	private static byte[] surname; // 0x30
	private static byte[] givenName; // 0x34
	private static byte[] initial; // 0x38

	// Methods

	// RVA: 0x2B1C44 Offset: 0x2B1C44 VA: 0x2B1C44
	private static void .cctor() { }

	// RVA: 0x2B2570 Offset: 0x2B2570 VA: 0x2B2570
	public static string ToString(ASN1 seq) { }

	// RVA: 0x2B34B8 Offset: 0x2B34B8 VA: 0x2B34B8
	public static string ToString(ASN1 seq, bool reversed, string separator, bool quotes) { }

	// RVA: 0x2B26DC Offset: 0x2B26DC VA: 0x2B26DC
	private static void AppendEntry(StringBuilder sb, ASN1 entry, bool quotes) { }
}

// Namespace: Mono.Security.X509
internal class X509Certificate : ISerializable // TypeDefIndex: 136
{
	// Fields
	private ASN1 decoder; // 0x8
	private byte[] m_encodedcert; // 0xC
	private DateTime m_from; // 0x10
	private DateTime m_until; // 0x20
	private ASN1 issuer; // 0x30
	private string m_issuername; // 0x34
	private string m_keyalgo; // 0x38
	private byte[] m_keyalgoparams; // 0x3C
	private ASN1 subject; // 0x40
	private string m_subject; // 0x44
	private byte[] m_publickey; // 0x48
	private byte[] signature; // 0x4C
	private string m_signaturealgo; // 0x50
	private byte[] m_signaturealgoparams; // 0x54
	private DSA _dsa; // 0x58
	private int version; // 0x5C
	private byte[] serialnumber; // 0x60
	private byte[] issuerUniqueID; // 0x64
	private byte[] subjectUniqueID; // 0x68
	private X509ExtensionCollection extensions; // 0x6C
	private static string encoding_error; // 0x0

	// Properties
	public DSA DSA { get; }
	public virtual string IssuerName { get; }
	public virtual byte[] KeyAlgorithmParameters { get; }
	public virtual byte[] PublicKey { get; }
	public virtual byte[] RawData { get; }
	public virtual string SubjectName { get; }
	public virtual DateTime ValidFrom { get; }
	public virtual DateTime ValidUntil { get; }

	// Methods

	// RVA: 0x2AA62C Offset: 0x2AA62C VA: 0x2AA62C
	public void .ctor(byte[] data) { }

	// RVA: 0x2B45AC Offset: 0x2B45AC VA: 0x2B45AC
	private static void .cctor() { }

	// RVA: 0x2B38F4 Offset: 0x2B38F4 VA: 0x2B38F4
	private void Parse(byte[] data) { }

	// RVA: 0x2B4798 Offset: 0x2B4798 VA: 0x2B4798
	private byte[] GetUnsignedBigInteger(byte[] integer) { }

	// RVA: 0x2ABE48 Offset: 0x2ABE48 VA: 0x2ABE48
	public DSA get_DSA() { }

	// RVA: 0x2B4874 Offset: 0x2B4874 VA: 0x2B4874 Slot: 5
	public virtual string get_IssuerName() { }

	// RVA: 0x2B487C Offset: 0x2B487C VA: 0x2B487C Slot: 6
	public virtual byte[] get_KeyAlgorithmParameters() { }

	// RVA: 0x2B4978 Offset: 0x2B4978 VA: 0x2B4978 Slot: 7
	public virtual byte[] get_PublicKey() { }

	// RVA: 0x2B4A74 Offset: 0x2B4A74 VA: 0x2B4A74 Slot: 8
	public virtual byte[] get_RawData() { }

	// RVA: 0x2B4B70 Offset: 0x2B4B70 VA: 0x2B4B70 Slot: 9
	public virtual string get_SubjectName() { }

	// RVA: 0x2B4B78 Offset: 0x2B4B78 VA: 0x2B4B78 Slot: 10
	public virtual DateTime get_ValidFrom() { }

	// RVA: 0x2B4B88 Offset: 0x2B4B88 VA: 0x2B4B88 Slot: 11
	public virtual DateTime get_ValidUntil() { }

	// RVA: 0x2B4B98 Offset: 0x2B4B98 VA: 0x2B4B98
	public ASN1 GetIssuerName() { }

	// RVA: 0x2B4BA0 Offset: 0x2B4BA0 VA: 0x2B4BA0
	public ASN1 GetSubjectName() { }

	// RVA: 0x2B4BA8 Offset: 0x2B4BA8 VA: 0x2B4BA8 Slot: 12
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2B36F4 Offset: 0x2B36F4 VA: 0x2B36F4
	private static byte[] PEM(string type, byte[] data) { }
}

// Namespace: Mono.Security.X509
[DefaultMemberAttribute] // RVA: 0x943FC Offset: 0x943FC VA: 0x943FC
[Serializable]
internal class X509CertificateCollection : CollectionBase, IEnumerable // TypeDefIndex: 137
{
	// Properties
	public X509Certificate Item { get; }

	// Methods

	// RVA: 0x2A7DE8 Offset: 0x2A7DE8 VA: 0x2A7DE8
	public void .ctor() { }

	// RVA: 0x2B4C2C Offset: 0x2B4C2C VA: 0x2B4C2C Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x2B4C68 Offset: 0x2B4C68 VA: 0x2B4C68
	public X509Certificate get_Item(int index) { }

	// RVA: 0x2AA810 Offset: 0x2AA810 VA: 0x2AA810
	public int Add(X509Certificate value) { }

	// RVA: 0x2ABC58 Offset: 0x2ABC58 VA: 0x2ABC58
	public X509CertificateCollection.X509CertificateEnumerator GetEnumerator() { }

	// RVA: 0x2B4E7C Offset: 0x2B4E7C VA: 0x2B4E7C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: 
public class X509CertificateCollection.X509CertificateEnumerator : IEnumerator // TypeDefIndex: 138
{
	// Fields
	private IEnumerator enumerator; // 0x8

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public X509Certificate Current { get; }

	// Methods

	// RVA: 0x2B4D94 Offset: 0x2B4D94 VA: 0x2B4D94
	public void .ctor(X509CertificateCollection mappings) { }

	// RVA: 0x2B4EB8 Offset: 0x2B4EB8 VA: 0x2B4EB8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x2B4F90 Offset: 0x2B4F90 VA: 0x2B4F90 Slot: 5
	private bool System.Collections.IEnumerator.MoveNext() { }

	// RVA: 0x2B5068 Offset: 0x2B5068 VA: 0x2B5068 Slot: 6
	private void System.Collections.IEnumerator.Reset() { }

	// RVA: 0x2ABCC8 Offset: 0x2ABCC8 VA: 0x2ABCC8
	public X509Certificate get_Current() { }

	// RVA: 0x2AC1D4 Offset: 0x2AC1D4 VA: 0x2AC1D4 Slot: 7
	public bool MoveNext() { }

	// RVA: 0x2B5140 Offset: 0x2B5140 VA: 0x2B5140 Slot: 8
	public void Reset() { }
}

// Namespace: Mono.Security.X509
internal class X509Extension // TypeDefIndex: 139
{
	// Fields
	protected string extnOid; // 0x8
	protected bool extnCritical; // 0xC
	protected ASN1 extnValue; // 0x10

	// Methods

	// RVA: 0x2B5218 Offset: 0x2B5218 VA: 0x2B5218
	public void .ctor(ASN1 asn1) { }

	// RVA: 0x2B56CC Offset: 0x2B56CC VA: 0x2B56CC Slot: 4
	protected virtual void Decode() { }

	// RVA: 0x2B56D0 Offset: 0x2B56D0 VA: 0x2B56D0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2B58D0 Offset: 0x2B58D0 VA: 0x2B58D0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2B58FC Offset: 0x2B58FC VA: 0x2B58FC
	private void WriteLine(StringBuilder sb, int n, int pos) { }

	// RVA: 0x2B5BF8 Offset: 0x2B5BF8 VA: 0x2B5BF8 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509
[DefaultMemberAttribute] // RVA: 0x94430 Offset: 0x94430 VA: 0x94430
internal sealed class X509ExtensionCollection : CollectionBase, IEnumerable // TypeDefIndex: 140
{
	// Fields
	private bool readOnly; // 0xC

	// Methods

	// RVA: 0x2B5D18 Offset: 0x2B5D18 VA: 0x2B5D18
	public void .ctor() { }

	// RVA: 0x2B4624 Offset: 0x2B4624 VA: 0x2B4624
	public void .ctor(ASN1 asn1) { }

	// RVA: 0x2B5D20 Offset: 0x2B5D20 VA: 0x2B5D20 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: Mono.Security
[DefaultMemberAttribute] // RVA: 0x94464 Offset: 0x94464 VA: 0x94464
internal class ASN1 // TypeDefIndex: 141
{
	// Fields
	private byte m_nTag; // 0x8
	private byte[] m_aValue; // 0xC
	private ArrayList elist; // 0x10

	// Properties
	public int Count { get; }
	public byte Tag { get; }
	public int Length { get; }
	public byte[] Value { get; set; }
	public ASN1 Item { get; }

	// Methods

	// RVA: 0x4AB540 Offset: 0x4AB540 VA: 0x4AB540
	public void .ctor(byte tag) { }

	// RVA: 0x4AB568 Offset: 0x4AB568 VA: 0x4AB568
	public void .ctor(byte tag, byte[] data) { }

	// RVA: 0x4AB590 Offset: 0x4AB590 VA: 0x4AB590
	public void .ctor(byte[] data) { }

	// RVA: 0x4AB8C0 Offset: 0x4AB8C0 VA: 0x4AB8C0
	public int get_Count() { }

	// RVA: 0x4AB8E0 Offset: 0x4AB8E0 VA: 0x4AB8E0
	public byte get_Tag() { }

	// RVA: 0x4AB8E8 Offset: 0x4AB8E8 VA: 0x4AB8E8
	public int get_Length() { }

	// RVA: 0x4AB8FC Offset: 0x4AB8FC VA: 0x4AB8FC
	public byte[] get_Value() { }

	// RVA: 0x4ABA24 Offset: 0x4ABA24 VA: 0x4ABA24
	public void set_Value(byte[] value) { }

	// RVA: 0x4ABB24 Offset: 0x4ABB24 VA: 0x4ABB24
	private bool CompareArray(byte[] array1, byte[] array2) { }

	// RVA: 0x4ABBEC Offset: 0x4ABBEC VA: 0x4ABBEC
	public bool CompareValue(byte[] value) { }

	// RVA: 0x4ABBF8 Offset: 0x4ABBF8 VA: 0x4ABBF8
	public ASN1 Add(ASN1 asn1) { }

	// RVA: 0x4ABCB0 Offset: 0x4ABCB0 VA: 0x4ABCB0 Slot: 4
	public virtual byte[] GetBytes() { }

	// RVA: 0x4AB770 Offset: 0x4AB770 VA: 0x4AB770
	protected void Decode(byte[] asn1, ref int anPos, int anLength) { }

	// RVA: 0x4AC5BC Offset: 0x4AC5BC VA: 0x4AC5BC
	protected void DecodeTLV(byte[] asn1, ref int pos, out byte tag, out int length, out byte[] content) { }

	// RVA: 0x4AC734 Offset: 0x4AC734 VA: 0x4AC734
	public ASN1 get_Item(int index) { }

	// RVA: 0x4AC908 Offset: 0x4AC908 VA: 0x4AC908
	public ASN1 Element(int index, byte anTag) { }

	// RVA: 0x4ACAFC Offset: 0x4ACAFC VA: 0x4ACAFC Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security
internal static class ASN1Convert // TypeDefIndex: 142
{
	// Methods

	// RVA: 0x4ACE08 Offset: 0x4ACE08 VA: 0x4ACE08
	public static ASN1 FromInt32(int value) { }

	// RVA: 0x4ACFC8 Offset: 0x4ACFC8 VA: 0x4ACFC8
	public static ASN1 FromOid(string oid) { }

	// RVA: 0x4AD0D4 Offset: 0x4AD0D4 VA: 0x4AD0D4
	public static int ToInt32(ASN1 asn1) { }

	// RVA: 0x4AD250 Offset: 0x4AD250 VA: 0x4AD250
	public static string ToOid(ASN1 asn1) { }

	// RVA: 0x4AD660 Offset: 0x4AD660 VA: 0x4AD660
	public static DateTime ToDateTime(ASN1 time) { }
}

// Namespace: Mono.Security
internal sealed class BitConverterLE // TypeDefIndex: 143
{
	// Methods

	// RVA: 0x4ADEF0 Offset: 0x4ADEF0 VA: 0x4ADEF0
	private static byte[] GetUIntBytes(byte* bytes) { }

	// RVA: 0x4AE0D0 Offset: 0x4AE0D0 VA: 0x4AE0D0
	private static byte[] GetULongBytes(byte* bytes) { }

	// RVA: 0x4ACFA8 Offset: 0x4ACFA8 VA: 0x4ACFA8
	internal static byte[] GetBytes(int value) { }

	// RVA: 0x4AE3D0 Offset: 0x4AE3D0 VA: 0x4AE3D0
	internal static byte[] GetBytes(float value) { }

	// RVA: 0x4AE3F0 Offset: 0x4AE3F0 VA: 0x4AE3F0
	internal static byte[] GetBytes(double value) { }

	// RVA: 0x4AE40C Offset: 0x4AE40C VA: 0x4AE40C
	private static void UShortFromBytes(byte* dst, byte[] src, int startIndex) { }

	// RVA: 0x4AE53C Offset: 0x4AE53C VA: 0x4AE53C
	private static void UIntFromBytes(byte* dst, byte[] src, int startIndex) { }

	// RVA: 0x4AE71C Offset: 0x4AE71C VA: 0x4AE71C
	private static void ULongFromBytes(byte* dst, byte[] src, int startIndex) { }

	// RVA: 0x4AE864 Offset: 0x4AE864 VA: 0x4AE864
	internal static short ToInt16(byte[] value, int startIndex) { }

	// RVA: 0x4AE894 Offset: 0x4AE894 VA: 0x4AE894
	internal static int ToInt32(byte[] value, int startIndex) { }

	// RVA: 0x4AE8C4 Offset: 0x4AE8C4 VA: 0x4AE8C4
	internal static float ToSingle(byte[] value, int startIndex) { }

	// RVA: 0x4AE8F4 Offset: 0x4AE8F4 VA: 0x4AE8F4
	internal static double ToDouble(byte[] value, int startIndex) { }
}

// Namespace: Mono.Security
internal sealed class PKCS7 // TypeDefIndex: 144
{}

// Namespace: 
public class PKCS7.ContentInfo // TypeDefIndex: 145
{
	// Fields
	private string contentType; // 0x8
	private ASN1 content; // 0xC

	// Properties
	public ASN1 ASN1 { get; }
	public ASN1 Content { get; set; }
	public string ContentType { get; set; }

	// Methods

	// RVA: 0x2A5FD4 Offset: 0x2A5FD4 VA: 0x2A5FD4
	public void .ctor() { }

	// RVA: 0x2A6054 Offset: 0x2A6054 VA: 0x2A6054
	public void .ctor(string oid) { }

	// RVA: 0x2A6070 Offset: 0x2A6070 VA: 0x2A6070
	public void .ctor(byte[] data) { }

	// RVA: 0x2A60F0 Offset: 0x2A60F0 VA: 0x2A60F0
	public void .ctor(ASN1 asn1) { }

	// RVA: 0x2A63D4 Offset: 0x2A63D4 VA: 0x2A63D4
	public ASN1 get_ASN1() { }

	// RVA: 0x2A64BC Offset: 0x2A64BC VA: 0x2A64BC
	public ASN1 get_Content() { }

	// RVA: 0x2A64C4 Offset: 0x2A64C4 VA: 0x2A64C4
	public void set_Content(ASN1 value) { }

	// RVA: 0x2A64CC Offset: 0x2A64CC VA: 0x2A64CC
	public string get_ContentType() { }

	// RVA: 0x2A64D4 Offset: 0x2A64D4 VA: 0x2A64D4
	public void set_ContentType(string value) { }

	// RVA: 0x2A63D8 Offset: 0x2A63D8 VA: 0x2A63D8
	internal ASN1 GetASN1() { }
}

// Namespace: 
public class PKCS7.EncryptedData // TypeDefIndex: 146
{
	// Fields
	private byte _version; // 0x8
	private PKCS7.ContentInfo _content; // 0xC
	private PKCS7.ContentInfo _encryptionAlgorithm; // 0x10
	private byte[] _encrypted; // 0x14

	// Properties
	public PKCS7.ContentInfo EncryptionAlgorithm { get; }
	public byte[] EncryptedContent { get; }

	// Methods

	// RVA: 0x2A64DC Offset: 0x2A64DC VA: 0x2A64DC
	public void .ctor() { }

	// RVA: 0x2A64FC Offset: 0x2A64FC VA: 0x2A64FC
	public void .ctor(ASN1 asn1) { }

	// RVA: 0x2A69F8 Offset: 0x2A69F8 VA: 0x2A69F8
	public PKCS7.ContentInfo get_EncryptionAlgorithm() { }

	// RVA: 0x2A6A00 Offset: 0x2A6A00 VA: 0x2A6A00
	public byte[] get_EncryptedContent() { }
}

// Namespace: Mono.Security
internal sealed class StrongName // TypeDefIndex: 147
{
	// Fields
	private RSA rsa; // 0x8
	private byte[] publicKey; // 0xC
	private byte[] keyToken; // 0x10
	private string tokenAlgorithm; // 0x14
	private static object lockObject; // 0x0
	private static bool initialized; // 0x4

	// Properties
	public RSA RSA { set; }
	public byte[] PublicKey { get; }
	public byte[] PublicKeyToken { get; }
	public string TokenAlgorithm { get; }

	// Methods

	// RVA: 0x2A6AFC Offset: 0x2A6AFC VA: 0x2A6AFC
	public void .ctor(byte[] data) { }

	// RVA: 0x2A6D2C Offset: 0x2A6D2C VA: 0x2A6D2C
	public void .ctor(RSA rsa) { }

	// RVA: 0x2A6DF0 Offset: 0x2A6DF0 VA: 0x2A6DF0
	private static void .cctor() { }

	// RVA: 0x2A6E80 Offset: 0x2A6E80 VA: 0x2A6E80
	private void InvalidateCache() { }

	// RVA: 0x2A6D18 Offset: 0x2A6D18 VA: 0x2A6D18
	public void set_RSA(RSA value) { }

	// RVA: 0x2A6E90 Offset: 0x2A6E90 VA: 0x2A6E90
	public byte[] get_PublicKey() { }

	// RVA: 0x2A7474 Offset: 0x2A7474 VA: 0x2A7474
	public byte[] get_PublicKeyToken() { }

	// RVA: 0x2A7690 Offset: 0x2A7690 VA: 0x2A7690
	public string get_TokenAlgorithm() { }
}

// Namespace: Mono.Xml
internal class SecurityParser : SmallXmlParser, SmallXmlParser.IContentHandler // TypeDefIndex: 148
{
	// Fields
	private SecurityElement root; // 0x38
	private SecurityElement current; // 0x3C
	private Stack stack; // 0x40

	// Methods

	// RVA: 0x2B5D5C Offset: 0x2B5D5C VA: 0x2B5D5C
	public void .ctor() { }

	// RVA: 0x2B5ED4 Offset: 0x2B5ED4 VA: 0x2B5ED4
	public void LoadXml(string xml) { }

	// RVA: 0x2B6218 Offset: 0x2B6218 VA: 0x2B6218
	public SecurityElement ToXml() { }

	// RVA: 0x2B6220 Offset: 0x2B6220 VA: 0x2B6220 Slot: 4
	public void OnStartParsing(SmallXmlParser parser) { }

	// RVA: 0x2B6224 Offset: 0x2B6224 VA: 0x2B6224 Slot: 8
	public void OnProcessingInstruction(string name, string text) { }

	// RVA: 0x2B6228 Offset: 0x2B6228 VA: 0x2B6228 Slot: 10
	public void OnIgnorableWhitespace(string s) { }

	// RVA: 0x2B622C Offset: 0x2B622C VA: 0x2B622C Slot: 6
	public void OnStartElement(string name, SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x2B6600 Offset: 0x2B6600 VA: 0x2B6600 Slot: 7
	public void OnEndElement(string name) { }

	// RVA: 0x2B6700 Offset: 0x2B6700 VA: 0x2B6700 Slot: 9
	public void OnChars(string ch) { }

	// RVA: 0x2B67B0 Offset: 0x2B67B0 VA: 0x2B67B0 Slot: 5
	public void OnEndParsing(SmallXmlParser parser) { }
}

// Namespace: Mono.Xml
internal class SmallXmlParser // TypeDefIndex: 149
{
	// Fields
	private SmallXmlParser.IContentHandler handler; // 0x8
	private TextReader reader; // 0xC
	private Stack elementNames; // 0x10
	private Stack xmlSpaces; // 0x14
	private string xmlSpace; // 0x18
	private StringBuilder buffer; // 0x1C
	private char[] nameBuffer; // 0x20
	private bool isWhitespace; // 0x24
	private SmallXmlParser.AttrListImpl attributes; // 0x28
	private int line; // 0x2C
	private int column; // 0x30
	private bool resetColumn; // 0x34
	[CompilerGeneratedAttribute] // RVA: 0x9B198 Offset: 0x9B198 VA: 0x9B198
	private static Dictionary<string, int> <>f__switch$map18; // 0x0

	// Methods

	// RVA: 0x2B5DD4 Offset: 0x2B5DD4 VA: 0x2B5DD4
	public void .ctor() { }

	// RVA: 0x2B6848 Offset: 0x2B6848 VA: 0x2B6848
	private Exception Error(string msg) { }

	// RVA: 0x2B69D4 Offset: 0x2B69D4 VA: 0x2B69D4
	private Exception UnexpectedEndError() { }

	// RVA: 0x2B6B04 Offset: 0x2B6B04 VA: 0x2B6B04
	private bool IsNameChar(char c, bool start) { }

	// RVA: 0x2B6C10 Offset: 0x2B6C10 VA: 0x2B6C10
	private bool IsWhitespace(int c) { }

	// RVA: 0x2B6C3C Offset: 0x2B6C3C VA: 0x2B6C3C
	public void SkipWhitespaces() { }

	// RVA: 0x2B6D28 Offset: 0x2B6D28 VA: 0x2B6D28
	private void HandleWhitespaces() { }

	// RVA: 0x2B6C44 Offset: 0x2B6C44 VA: 0x2B6C44
	public void SkipWhitespaces(bool expected) { }

	// RVA: 0x2B6E9C Offset: 0x2B6E9C VA: 0x2B6E9C
	private int Peek() { }

	// RVA: 0x2B6E18 Offset: 0x2B6E18 VA: 0x2B6E18
	private int Read() { }

	// RVA: 0x2B6ED0 Offset: 0x2B6ED0 VA: 0x2B6ED0
	public void Expect(int c) { }

	// RVA: 0x2B7004 Offset: 0x2B7004 VA: 0x2B7004
	private string ReadUntil(char until, bool handleReferences) { }

	// RVA: 0x2B754C Offset: 0x2B754C VA: 0x2B754C
	public string ReadName() { }

	// RVA: 0x2B5F88 Offset: 0x2B5F88 VA: 0x2B5F88
	public void Parse(TextReader input, SmallXmlParser.IContentHandler handler) { }

	// RVA: 0x2B8574 Offset: 0x2B8574 VA: 0x2B8574
	private void Cleanup() { }

	// RVA: 0x2B78B4 Offset: 0x2B78B4 VA: 0x2B78B4
	public void ReadContent() { }

	// RVA: 0x2B83C4 Offset: 0x2B83C4 VA: 0x2B83C4
	private void HandleBufferedContent() { }

	// RVA: 0x2B8A88 Offset: 0x2B8A88 VA: 0x2B8A88
	private void ReadCharacters() { }

	// RVA: 0x2B7150 Offset: 0x2B7150 VA: 0x2B7150
	private void ReadReference() { }

	// RVA: 0x2B8B24 Offset: 0x2B8B24 VA: 0x2B8B24
	private int ReadCharacterReference() { }

	// RVA: 0x2B88BC Offset: 0x2B88BC VA: 0x2B88BC
	private void ReadAttribute(SmallXmlParser.AttrListImpl a) { }

	// RVA: 0x2B8698 Offset: 0x2B8698 VA: 0x2B8698
	private void ReadCDATASection() { }

	// RVA: 0x2B87F4 Offset: 0x2B87F4 VA: 0x2B87F4
	private void ReadComment() { }
}

// Namespace: 
public interface SmallXmlParser.IContentHandler // TypeDefIndex: 150
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnStartParsing(SmallXmlParser parser);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void OnEndParsing(SmallXmlParser parser);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void OnStartElement(string name, SmallXmlParser.IAttrList attrs);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void OnEndElement(string name);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void OnProcessingInstruction(string name, string text);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void OnChars(string text);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void OnIgnorableWhitespace(string text);
}

// Namespace: 
public interface SmallXmlParser.IAttrList // TypeDefIndex: 151
{
	// Properties
	public abstract int Length { get; }
	public abstract string[] Names { get; }
	public abstract string[] Values { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int get_Length();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract string GetName(int i);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract string GetValue(int i);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract string GetValue(string name);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract string[] get_Names();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract string[] get_Values();
}

// Namespace: 
private class SmallXmlParser.AttrListImpl : SmallXmlParser.IAttrList // TypeDefIndex: 152
{
	// Fields
	private ArrayList attrNames; // 0x8
	private ArrayList attrValues; // 0xC

	// Properties
	public int Length { get; }
	public string[] Names { get; }
	public string[] Values { get; }

	// Methods

	// RVA: 0x2B67B4 Offset: 0x2B67B4 VA: 0x2B67B4
	public void .ctor() { }

	// RVA: 0x2B8CB8 Offset: 0x2B8CB8 VA: 0x2B8CB8 Slot: 4
	public int get_Length() { }

	// RVA: 0x2B8CEC Offset: 0x2B8CEC VA: 0x2B8CEC Slot: 5
	public string GetName(int i) { }

	// RVA: 0x2B8DF4 Offset: 0x2B8DF4 VA: 0x2B8DF4 Slot: 6
	public string GetValue(int i) { }

	// RVA: 0x2B8EFC Offset: 0x2B8EFC VA: 0x2B8EFC Slot: 7
	public string GetValue(string name) { }

	// RVA: 0x2B912C Offset: 0x2B912C VA: 0x2B912C Slot: 8
	public string[] get_Names() { }

	// RVA: 0x2B928C Offset: 0x2B928C VA: 0x2B928C Slot: 9
	public string[] get_Values() { }

	// RVA: 0x2B8638 Offset: 0x2B8638 VA: 0x2B8638
	internal void Clear() { }

	// RVA: 0x2B8C48 Offset: 0x2B8C48 VA: 0x2B8C48
	internal void Add(string name, string value) { }
}

// Namespace: Mono.Xml
internal class SmallXmlParserException : SystemException // TypeDefIndex: 153
{
	// Fields
	private int line; // 0x34
	private int column; // 0x38

	// Methods

	// RVA: 0x2B68D4 Offset: 0x2B68D4 VA: 0x2B68D4
	public void .ctor(string msg, int line, int column) { }
}

// Namespace: Mono
internal class Runtime // TypeDefIndex: 154
{
	// Methods

	// RVA: 0x4AB53C Offset: 0x4AB53C VA: 0x4AB53C
	internal static string GetDisplayName() { }
}

// Namespace: System.Collections.Generic
internal sealed class CollectionDebuggerView<T> // TypeDefIndex: 155
{}

// Namespace: System.Collections.Generic
internal sealed class CollectionDebuggerView<T, U> // TypeDefIndex: 156
{}

// Namespace: System.Collections.Generic
[Serializable]
public abstract class Comparer<T> : IComparer<T>, IComparer // TypeDefIndex: 157
{
	// Fields
	private static readonly Comparer<T> _default; // 0x0

	// Properties
	public static Comparer<T> Default { get; }

	// Methods

	// RVA: -1 Offset: -1
	protected void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x20B8E0 Offset: 0x20B8E0 VA: 0x20B8E0
	|-Comparer<DateTime>..ctor
	|
	|-RVA: 0x20BFEC Offset: 0x20BFEC VA: 0x20BFEC
	|-Comparer<DateTimeOffset>..ctor
	|
	|-RVA: 0x20C728 Offset: 0x20C728 VA: 0x20C728
	|-Comparer<Guid>..ctor
	|
	|-RVA: 0x20CE34 Offset: 0x20CE34 VA: 0x20CE34
	|-Comparer<int>..ctor
	|
	|-RVA: 0x20D50C Offset: 0x20D50C VA: 0x20D50C
	|-Comparer<object>..ctor
	|
	|-RVA: 0x20DCA8 Offset: 0x20DCA8 VA: 0x20DCA8
	|-Comparer<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0x20E3A8 Offset: 0x20E3A8 VA: 0x20E3A8
	|-Comparer<CustomAttributeTypedArgument>..ctor
	|
	|-RVA: 0x20EA9C Offset: 0x20EA9C VA: 0x20EA9C
	|-Comparer<TimeSpan>..ctor
	|
	|-RVA: 0x20F190 Offset: 0x20F190 VA: 0x20F190
	|-Comparer<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0x20F884 Offset: 0x20F884 VA: 0x20F884
	|-Comparer<Color32>..ctor
	|
	|-RVA: 0x20FF5C Offset: 0x20FF5C VA: 0x20FF5C
	|-Comparer<RaycastResult>..ctor
	|
	|-RVA: 0x2107DC Offset: 0x2107DC VA: 0x2107DC
	|-Comparer<UICharInfo>..ctor
	|
	|-RVA: 0x210EDC Offset: 0x210EDC VA: 0x210EDC
	|-Comparer<UILineInfo>..ctor
	|
	|-RVA: 0x2115E8 Offset: 0x2115E8 VA: 0x2115E8
	|-Comparer<UIVertex>..ctor
	|
	|-RVA: 0x211D90 Offset: 0x211D90 VA: 0x211D90
	|-Comparer<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0x212490 Offset: 0x212490 VA: 0x212490
	|-Comparer<Vector2>..ctor
	|
	|-RVA: 0x212B84 Offset: 0x212B84 VA: 0x212B84
	|-Comparer<Vector3>..ctor
	|
	|-RVA: 0x213284 Offset: 0x213284 VA: 0x213284
	|-Comparer<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x20B90C Offset: 0x20B90C VA: 0x20B90C
	|-Comparer<DateTime>..cctor
	|
	|-RVA: 0x20C018 Offset: 0x20C018 VA: 0x20C018
	|-Comparer<DateTimeOffset>..cctor
	|
	|-RVA: 0x20C754 Offset: 0x20C754 VA: 0x20C754
	|-Comparer<Guid>..cctor
	|
	|-RVA: 0x20CE60 Offset: 0x20CE60 VA: 0x20CE60
	|-Comparer<int>..cctor
	|
	|-RVA: 0x20D538 Offset: 0x20D538 VA: 0x20D538
	|-Comparer<object>..cctor
	|
	|-RVA: 0x20DCD4 Offset: 0x20DCD4 VA: 0x20DCD4
	|-Comparer<CustomAttributeNamedArgument>..cctor
	|
	|-RVA: 0x20E3D4 Offset: 0x20E3D4 VA: 0x20E3D4
	|-Comparer<CustomAttributeTypedArgument>..cctor
	|
	|-RVA: 0x20EAC8 Offset: 0x20EAC8 VA: 0x20EAC8
	|-Comparer<TimeSpan>..cctor
	|
	|-RVA: 0x20F1BC Offset: 0x20F1BC VA: 0x20F1BC
	|-Comparer<BeforeRenderHelper.OrderBlock>..cctor
	|
	|-RVA: 0x20F8B0 Offset: 0x20F8B0 VA: 0x20F8B0
	|-Comparer<Color32>..cctor
	|
	|-RVA: 0x20FF88 Offset: 0x20FF88 VA: 0x20FF88
	|-Comparer<RaycastResult>..cctor
	|
	|-RVA: 0x210808 Offset: 0x210808 VA: 0x210808
	|-Comparer<UICharInfo>..cctor
	|
	|-RVA: 0x210F08 Offset: 0x210F08 VA: 0x210F08
	|-Comparer<UILineInfo>..cctor
	|
	|-RVA: 0x211614 Offset: 0x211614 VA: 0x211614
	|-Comparer<UIVertex>..cctor
	|
	|-RVA: 0x211DBC Offset: 0x211DBC VA: 0x211DBC
	|-Comparer<UnitySynchronizationContext.WorkRequest>..cctor
	|
	|-RVA: 0x2124BC Offset: 0x2124BC VA: 0x2124BC
	|-Comparer<Vector2>..cctor
	|
	|-RVA: 0x212BB0 Offset: 0x212BB0 VA: 0x212BB0
	|-Comparer<Vector3>..cctor
	|
	|-RVA: 0x2132B0 Offset: 0x2132B0 VA: 0x2132B0
	|-Comparer<Vector4>..cctor
	*/

	// RVA: -1 Offset: -1 Slot: 5
	private int System.Collections.IComparer.Compare(object x, object y) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x20BCFC Offset: 0x20BCFC VA: 0x20BCFC
	|-Comparer<DateTime>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x20C408 Offset: 0x20C408 VA: 0x20C408
	|-Comparer<DateTimeOffset>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x20CB44 Offset: 0x20CB44 VA: 0x20CB44
	|-Comparer<Guid>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x20D250 Offset: 0x20D250 VA: 0x20D250
	|-Comparer<int>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x20D928 Offset: 0x20D928 VA: 0x20D928
	|-Comparer<object>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x20E0C4 Offset: 0x20E0C4 VA: 0x20E0C4
	|-Comparer<CustomAttributeNamedArgument>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x20E7C4 Offset: 0x20E7C4 VA: 0x20E7C4
	|-Comparer<CustomAttributeTypedArgument>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x20EEB8 Offset: 0x20EEB8 VA: 0x20EEB8
	|-Comparer<TimeSpan>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x20F5AC Offset: 0x20F5AC VA: 0x20F5AC
	|-Comparer<BeforeRenderHelper.OrderBlock>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x20FCA0 Offset: 0x20FCA0 VA: 0x20FCA0
	|-Comparer<Color32>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x210378 Offset: 0x210378 VA: 0x210378
	|-Comparer<RaycastResult>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x210BF8 Offset: 0x210BF8 VA: 0x210BF8
	|-Comparer<UICharInfo>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x2112F8 Offset: 0x2112F8 VA: 0x2112F8
	|-Comparer<UILineInfo>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x211A04 Offset: 0x211A04 VA: 0x211A04
	|-Comparer<UIVertex>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x2121AC Offset: 0x2121AC VA: 0x2121AC
	|-Comparer<UnitySynchronizationContext.WorkRequest>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x2128AC Offset: 0x2128AC VA: 0x2128AC
	|-Comparer<Vector2>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x212FA0 Offset: 0x212FA0 VA: 0x212FA0
	|-Comparer<Vector3>.System.Collections.IComparer.Compare
	|
	|-RVA: 0x2136A0 Offset: 0x2136A0 VA: 0x2136A0
	|-Comparer<Vector4>.System.Collections.IComparer.Compare
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public abstract int Compare(T x, T y);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-Comparer<object>.Compare
	*/

	// RVA: -1 Offset: -1
	public static Comparer<T> get_Default() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x20BEE4 Offset: 0x20BEE4 VA: 0x20BEE4
	|-Comparer<DateTime>.get_Default
	|
	|-RVA: 0x20C620 Offset: 0x20C620 VA: 0x20C620
	|-Comparer<DateTimeOffset>.get_Default
	|
	|-RVA: 0x20CD2C Offset: 0x20CD2C VA: 0x20CD2C
	|-Comparer<Guid>.get_Default
	|
	|-RVA: 0x20D404 Offset: 0x20D404 VA: 0x20D404
	|-Comparer<int>.get_Default
	|
	|-RVA: 0x20DBA0 Offset: 0x20DBA0 VA: 0x20DBA0
	|-Comparer<object>.get_Default
	|
	|-RVA: 0x20E2A0 Offset: 0x20E2A0 VA: 0x20E2A0
	|-Comparer<CustomAttributeNamedArgument>.get_Default
	|
	|-RVA: 0x20E994 Offset: 0x20E994 VA: 0x20E994
	|-Comparer<CustomAttributeTypedArgument>.get_Default
	|
	|-RVA: 0x20F088 Offset: 0x20F088 VA: 0x20F088
	|-Comparer<TimeSpan>.get_Default
	|
	|-RVA: 0x20F77C Offset: 0x20F77C VA: 0x20F77C
	|-Comparer<BeforeRenderHelper.OrderBlock>.get_Default
	|
	|-RVA: 0x20FE54 Offset: 0x20FE54 VA: 0x20FE54
	|-Comparer<Color32>.get_Default
	|
	|-RVA: 0x2106D4 Offset: 0x2106D4 VA: 0x2106D4
	|-Comparer<RaycastResult>.get_Default
	|
	|-RVA: 0x210DD4 Offset: 0x210DD4 VA: 0x210DD4
	|-Comparer<UICharInfo>.get_Default
	|
	|-RVA: 0x2114E0 Offset: 0x2114E0 VA: 0x2114E0
	|-Comparer<UILineInfo>.get_Default
	|
	|-RVA: 0x211C88 Offset: 0x211C88 VA: 0x211C88
	|-Comparer<UIVertex>.get_Default
	|
	|-RVA: 0x212388 Offset: 0x212388 VA: 0x212388
	|-Comparer<UnitySynchronizationContext.WorkRequest>.get_Default
	|
	|-RVA: 0x212A7C Offset: 0x212A7C VA: 0x212A7C
	|-Comparer<Vector2>.get_Default
	|
	|-RVA: 0x21317C Offset: 0x21317C VA: 0x21317C
	|-Comparer<Vector3>.get_Default
	|
	|-RVA: 0x213888 Offset: 0x213888 VA: 0x213888
	|-Comparer<Vector4>.get_Default
	*/
}

// Namespace: 
private sealed class Comparer.DefaultComparer<T> : Comparer<T> // TypeDefIndex: 158
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x209090 Offset: 0x209090 VA: 0x209090
	|-Comparer.DefaultComparer<DateTime>..ctor
	|
	|-RVA: 0x2093B8 Offset: 0x2093B8 VA: 0x2093B8
	|-Comparer.DefaultComparer<DateTimeOffset>..ctor
	|
	|-RVA: 0x20973C Offset: 0x20973C VA: 0x20973C
	|-Comparer.DefaultComparer<Guid>..ctor
	|
	|-RVA: 0x209A44 Offset: 0x209A44 VA: 0x209A44
	|-Comparer.DefaultComparer<int>..ctor
	|
	|-RVA: 0x209D04 Offset: 0x209D04 VA: 0x209D04
	|-Comparer.DefaultComparer<object>..ctor
	|
	|-RVA: 0x20A12C Offset: 0x20A12C VA: 0x20A12C
	|-Comparer.DefaultComparer<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0x20A2D8 Offset: 0x20A2D8 VA: 0x20A2D8
	|-Comparer.DefaultComparer<CustomAttributeTypedArgument>..ctor
	|
	|-RVA: 0x20A478 Offset: 0x20A478 VA: 0x20A478
	|-Comparer.DefaultComparer<TimeSpan>..ctor
	|
	|-RVA: 0x20A75C Offset: 0x20A75C VA: 0x20A75C
	|-Comparer.DefaultComparer<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0x20A8FC Offset: 0x20A8FC VA: 0x20A8FC
	|-Comparer.DefaultComparer<Color32>..ctor
	|
	|-RVA: 0x20AA98 Offset: 0x20AA98 VA: 0x20AA98
	|-Comparer.DefaultComparer<RaycastResult>..ctor
	|
	|-RVA: 0x20AD04 Offset: 0x20AD04 VA: 0x20AD04
	|-Comparer.DefaultComparer<UICharInfo>..ctor
	|
	|-RVA: 0x20AEB0 Offset: 0x20AEB0 VA: 0x20AEB0
	|-Comparer.DefaultComparer<UILineInfo>..ctor
	|
	|-RVA: 0x20B068 Offset: 0x20B068 VA: 0x20B068
	|-Comparer.DefaultComparer<UIVertex>..ctor
	|
	|-RVA: 0x20B230 Offset: 0x20B230 VA: 0x20B230
	|-Comparer.DefaultComparer<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0x20B3DC Offset: 0x20B3DC VA: 0x20B3DC
	|-Comparer.DefaultComparer<Vector2>..ctor
	|
	|-RVA: 0x20B57C Offset: 0x20B57C VA: 0x20B57C
	|-Comparer.DefaultComparer<Vector3>..ctor
	|
	|-RVA: 0x20B728 Offset: 0x20B728 VA: 0x20B728
	|-Comparer.DefaultComparer<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override int Compare(T x, T y) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x20914C Offset: 0x20914C VA: 0x20914C
	|-Comparer.DefaultComparer<DateTime>.Compare
	|
	|-RVA: 0x209474 Offset: 0x209474 VA: 0x209474
	|-Comparer.DefaultComparer<DateTimeOffset>.Compare
	|
	|-RVA: 0x2097F8 Offset: 0x2097F8 VA: 0x2097F8
	|-Comparer.DefaultComparer<Guid>.Compare
	|
	|-RVA: 0x209B00 Offset: 0x209B00 VA: 0x209B00
	|-Comparer.DefaultComparer<int>.Compare
	|
	|-RVA: 0x209DC0 Offset: 0x209DC0 VA: 0x209DC0
	|-Comparer.DefaultComparer<object>.Compare
	|
	|-RVA: 0x20A1E8 Offset: 0x20A1E8 VA: 0x20A1E8
	|-Comparer.DefaultComparer<CustomAttributeNamedArgument>.Compare
	|
	|-RVA: 0x20A394 Offset: 0x20A394 VA: 0x20A394
	|-Comparer.DefaultComparer<CustomAttributeTypedArgument>.Compare
	|
	|-RVA: 0x20A534 Offset: 0x20A534 VA: 0x20A534
	|-Comparer.DefaultComparer<TimeSpan>.Compare
	|
	|-RVA: 0x20A818 Offset: 0x20A818 VA: 0x20A818
	|-Comparer.DefaultComparer<BeforeRenderHelper.OrderBlock>.Compare
	|
	|-RVA: 0x20A9B8 Offset: 0x20A9B8 VA: 0x20A9B8
	|-Comparer.DefaultComparer<Color32>.Compare
	|
	|-RVA: 0x20AB54 Offset: 0x20AB54 VA: 0x20AB54
	|-Comparer.DefaultComparer<RaycastResult>.Compare
	|
	|-RVA: 0x20ADC0 Offset: 0x20ADC0 VA: 0x20ADC0
	|-Comparer.DefaultComparer<UICharInfo>.Compare
	|
	|-RVA: 0x20AF6C Offset: 0x20AF6C VA: 0x20AF6C
	|-Comparer.DefaultComparer<UILineInfo>.Compare
	|
	|-RVA: 0x20B124 Offset: 0x20B124 VA: 0x20B124
	|-Comparer.DefaultComparer<UIVertex>.Compare
	|
	|-RVA: 0x20B2EC Offset: 0x20B2EC VA: 0x20B2EC
	|-Comparer.DefaultComparer<UnitySynchronizationContext.WorkRequest>.Compare
	|
	|-RVA: 0x20B498 Offset: 0x20B498 VA: 0x20B498
	|-Comparer.DefaultComparer<Vector2>.Compare
	|
	|-RVA: 0x20B638 Offset: 0x20B638 VA: 0x20B638
	|-Comparer.DefaultComparer<Vector3>.Compare
	|
	|-RVA: 0x20B7E4 Offset: 0x20B7E4 VA: 0x20B7E4
	|-Comparer.DefaultComparer<Vector4>.Compare
	*/
}

// Namespace: System.Collections.Generic
[Serializable]
internal sealed class GenericComparer<T> : Comparer<T> // TypeDefIndex: 159
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4D8C38 Offset: 0x4D8C38 VA: 0x4D8C38
	|-GenericComparer<DateTime>..ctor
	|
	|-RVA: 0x4D8D50 Offset: 0x4D8D50 VA: 0x4D8D50
	|-GenericComparer<DateTimeOffset>..ctor
	|
	|-RVA: 0x4D8E7C Offset: 0x4D8E7C VA: 0x4D8E7C
	|-GenericComparer<Guid>..ctor
	|
	|-RVA: 0x4D8F88 Offset: 0x4D8F88 VA: 0x4D8F88
	|-GenericComparer<int>..ctor
	|
	|-RVA: 0x4D906C Offset: 0x4D906C VA: 0x4D906C
	|-GenericComparer<object>..ctor
	|
	|-RVA: 0x4D91F4 Offset: 0x4D91F4 VA: 0x4D91F4
	|-GenericComparer<TimeSpan>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override int Compare(T x, T y) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4D8CF4 Offset: 0x4D8CF4 VA: 0x4D8CF4
	|-GenericComparer<DateTime>.Compare
	|
	|-RVA: 0x4D8E0C Offset: 0x4D8E0C VA: 0x4D8E0C
	|-GenericComparer<DateTimeOffset>.Compare
	|
	|-RVA: 0x4D8F38 Offset: 0x4D8F38 VA: 0x4D8F38
	|-GenericComparer<Guid>.Compare
	|
	|-RVA: 0x4D9044 Offset: 0x4D9044 VA: 0x4D9044
	|-GenericComparer<int>.Compare
	|
	|-RVA: 0x4D9128 Offset: 0x4D9128 VA: 0x4D9128
	|-GenericComparer<object>.Compare
	|
	|-RVA: 0x4D92B0 Offset: 0x4D92B0 VA: 0x4D92B0
	|-GenericComparer<TimeSpan>.Compare
	*/
}

// Namespace: System.Collections.Generic
internal struct Link // TypeDefIndex: 160
{
	// Fields
	public int HashCode; // 0x0
	public int Next; // 0x4
}

// Namespace: System.Collections.Generic
[DebuggerTypeProxyAttribute] // RVA: 0x94498 Offset: 0x94498 VA: 0x94498
[DebuggerDisplayAttribute] // RVA: 0x94498 Offset: 0x94498 VA: 0x94498
[ComVisibleAttribute] // RVA: 0x94498 Offset: 0x94498 VA: 0x94498
[DefaultMemberAttribute] // RVA: 0x94498 Offset: 0x94498 VA: 0x94498
[Serializable]
public class Dictionary<TKey, TValue> : IEnumerable, ISerializable, ICollection, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>, IDictionary, IDeserializationCallback // TypeDefIndex: 161
{
	// Fields
	private const int INITIAL_SIZE = 10;
	private const float DEFAULT_LOAD_FACTOR = 0.9;
	private const int NO_SLOT = -1;
	private const int HASH_FLAG = -2147483648;
	private int[] table; // 0x0
	private Link[] linkSlots; // 0x0
	private TKey[] keySlots; // 0x0
	private TValue[] valueSlots; // 0x0
	private int touchedSlots; // 0x0
	private int emptySlot; // 0x0
	private int count; // 0x0
	private int threshold; // 0x0
	private IEqualityComparer<TKey> hcp; // 0x0
	private SerializationInfo serialization_info; // 0x0
	private int generation; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0x9B1A8 Offset: 0x9B1A8 VA: 0x9B1A8
	private static Dictionary.Transform<TKey, TValue, DictionaryEntry> <>f__am$cacheB; // 0x0

	// Properties
	private object System.Collections.IDictionary.Item { get; set; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
	public int Count { get; }
	public TValue Item { get; set; }
	public Dictionary.ValueCollection<TKey, TValue> Values { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53A9E0 Offset: 0x53A9E0 VA: 0x53A9E0
	|-Dictionary<int, object>..ctor
	|-Dictionary<int, PointerEventData>..ctor
	|-Dictionary<int, GUILayoutUtility.LayoutCache>..ctor
	|
	|-RVA: 0x53EA28 Offset: 0x53EA28 VA: 0x53EA28
	|-Dictionary<object, bool>..ctor
	|
	|-RVA: 0x542DD0 Offset: 0x542DD0 VA: 0x542DD0
	|-Dictionary<object, int>..ctor
	|-Dictionary<Graphic, int>..ctor
	|-Dictionary<ICanvasElement, int>..ctor
	|-Dictionary<IClipper, int>..ctor
	|
	|-RVA: 0x547160 Offset: 0x547160 VA: 0x547160
	|-Dictionary<object, object>..ctor
	|-Dictionary<Canvas, IndexedSet<Graphic>>..ctor
	|-Dictionary<Font, HashSet<Text>>..ctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor(IEqualityComparer<TKey> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53AA48 Offset: 0x53AA48 VA: 0x53AA48
	|-Dictionary<int, object>..ctor
	|
	|-RVA: 0x53EA90 Offset: 0x53EA90 VA: 0x53EA90
	|-Dictionary<object, bool>..ctor
	|-Dictionary<string, bool>..ctor
	|
	|-RVA: 0x542E38 Offset: 0x542E38 VA: 0x542E38
	|-Dictionary<object, int>..ctor
	|
	|-RVA: 0x5471C8 Offset: 0x5471C8 VA: 0x5471C8
	|-Dictionary<object, object>..ctor
	|-Dictionary<string, GUIStyle>..ctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor(int capacity) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53AAB4 Offset: 0x53AAB4 VA: 0x53AAB4
	|-Dictionary<int, object>..ctor
	|
	|-RVA: 0x53EAFC Offset: 0x53EAFC VA: 0x53EAFC
	|-Dictionary<object, bool>..ctor
	|
	|-RVA: 0x542EA4 Offset: 0x542EA4 VA: 0x542EA4
	|-Dictionary<object, int>..ctor
	|-Dictionary<string, int>..ctor
	|
	|-RVA: 0x547234 Offset: 0x547234 VA: 0x547234
	|-Dictionary<object, object>..ctor
	*/

	// RVA: -1 Offset: -1
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53AB20 Offset: 0x53AB20 VA: 0x53AB20
	|-Dictionary<int, object>..ctor
	|
	|-RVA: 0x53EB68 Offset: 0x53EB68 VA: 0x53EB68
	|-Dictionary<object, bool>..ctor
	|
	|-RVA: 0x542F10 Offset: 0x542F10 VA: 0x542F10
	|-Dictionary<object, int>..ctor
	|
	|-RVA: 0x5472A0 Offset: 0x5472A0 VA: 0x5472A0
	|-Dictionary<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 18
	private object System.Collections.IDictionary.get_Item(object key) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53AB54 Offset: 0x53AB54 VA: 0x53AB54
	|-Dictionary<int, object>.System.Collections.IDictionary.get_Item
	|
	|-RVA: 0x53EB9C Offset: 0x53EB9C VA: 0x53EB9C
	|-Dictionary<object, bool>.System.Collections.IDictionary.get_Item
	|
	|-RVA: 0x542F44 Offset: 0x542F44 VA: 0x542F44
	|-Dictionary<object, int>.System.Collections.IDictionary.get_Item
	|
	|-RVA: 0x5472D4 Offset: 0x5472D4 VA: 0x5472D4
	|-Dictionary<object, object>.System.Collections.IDictionary.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 19
	private void System.Collections.IDictionary.set_Item(object key, object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53AC68 Offset: 0x53AC68 VA: 0x53AC68
	|-Dictionary<int, object>.System.Collections.IDictionary.set_Item
	|
	|-RVA: 0x53ED64 Offset: 0x53ED64 VA: 0x53ED64
	|-Dictionary<object, bool>.System.Collections.IDictionary.set_Item
	|
	|-RVA: 0x54310C Offset: 0x54310C VA: 0x54310C
	|-Dictionary<object, int>.System.Collections.IDictionary.set_Item
	|
	|-RVA: 0x54746C Offset: 0x54746C VA: 0x54746C
	|-Dictionary<object, object>.System.Collections.IDictionary.set_Item
	*/

	// RVA: -1 Offset: -1 Slot: 20
	private void System.Collections.IDictionary.Add(object key, object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53AD14 Offset: 0x53AD14 VA: 0x53AD14
	|-Dictionary<int, object>.System.Collections.IDictionary.Add
	|
	|-RVA: 0x53EE10 Offset: 0x53EE10 VA: 0x53EE10
	|-Dictionary<object, bool>.System.Collections.IDictionary.Add
	|
	|-RVA: 0x5431B8 Offset: 0x5431B8 VA: 0x5431B8
	|-Dictionary<object, int>.System.Collections.IDictionary.Add
	|
	|-RVA: 0x547518 Offset: 0x547518 VA: 0x547518
	|-Dictionary<object, object>.System.Collections.IDictionary.Add
	*/

	// RVA: -1 Offset: -1 Slot: 22
	private void System.Collections.IDictionary.Remove(object key) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53ADC0 Offset: 0x53ADC0 VA: 0x53ADC0
	|-Dictionary<int, object>.System.Collections.IDictionary.Remove
	|
	|-RVA: 0x53EEBC Offset: 0x53EEBC VA: 0x53EEBC
	|-Dictionary<object, bool>.System.Collections.IDictionary.Remove
	|
	|-RVA: 0x543264 Offset: 0x543264 VA: 0x543264
	|-Dictionary<object, int>.System.Collections.IDictionary.Remove
	|
	|-RVA: 0x5475C4 Offset: 0x5475C4 VA: 0x5475C4
	|-Dictionary<object, object>.System.Collections.IDictionary.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private bool System.Collections.ICollection.get_IsSynchronized() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53AF04 Offset: 0x53AF04 VA: 0x53AF04
	|-Dictionary<int, object>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x53F06C Offset: 0x53F06C VA: 0x53F06C
	|-Dictionary<object, bool>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x543414 Offset: 0x543414 VA: 0x543414
	|-Dictionary<object, int>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x547774 Offset: 0x547774 VA: 0x547774
	|-Dictionary<object, object>.System.Collections.ICollection.get_IsSynchronized
	*/

	// RVA: -1 Offset: -1 Slot: 8
	private object System.Collections.ICollection.get_SyncRoot() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53AF0C Offset: 0x53AF0C VA: 0x53AF0C
	|-Dictionary<int, object>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x53F074 Offset: 0x53F074 VA: 0x53F074
	|-Dictionary<object, bool>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x54341C Offset: 0x54341C VA: 0x54341C
	|-Dictionary<object, int>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x54777C Offset: 0x54777C VA: 0x54777C
	|-Dictionary<object, object>.System.Collections.ICollection.get_SyncRoot
	*/

	// RVA: -1 Offset: -1 Slot: 11
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53AF10 Offset: 0x53AF10 VA: 0x53AF10
	|-Dictionary<int, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly
	|
	|-RVA: 0x53F078 Offset: 0x53F078 VA: 0x53F078
	|-Dictionary<object, bool>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly
	|
	|-RVA: 0x543420 Offset: 0x543420 VA: 0x543420
	|-Dictionary<object, int>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly
	|
	|-RVA: 0x547780 Offset: 0x547780 VA: 0x547780
	|-Dictionary<object, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 12
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53AF18 Offset: 0x53AF18 VA: 0x53AF18
	|-Dictionary<int, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
	|
	|-RVA: 0x53F080 Offset: 0x53F080 VA: 0x53F080
	|-Dictionary<object, bool>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
	|
	|-RVA: 0x543428 Offset: 0x543428 VA: 0x543428
	|-Dictionary<object, int>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
	|
	|-RVA: 0x547788 Offset: 0x547788 VA: 0x547788
	|-Dictionary<object, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 14
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53AF9C Offset: 0x53AF9C VA: 0x53AF9C
	|-Dictionary<int, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
	|
	|-RVA: 0x53F104 Offset: 0x53F104 VA: 0x53F104
	|-Dictionary<object, bool>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
	|
	|-RVA: 0x5434AC Offset: 0x5434AC VA: 0x5434AC
	|-Dictionary<object, int>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
	|
	|-RVA: 0x54780C Offset: 0x54780C VA: 0x54780C
	|-Dictionary<object, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 15
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53AFE8 Offset: 0x53AFE8 VA: 0x53AFE8
	|-Dictionary<int, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
	|
	|-RVA: 0x53F150 Offset: 0x53F150 VA: 0x53F150
	|-Dictionary<object, bool>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
	|
	|-RVA: 0x5434F8 Offset: 0x5434F8 VA: 0x5434F8
	|-Dictionary<object, int>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
	|
	|-RVA: 0x547858 Offset: 0x547858 VA: 0x547858
	|-Dictionary<object, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 16
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53B034 Offset: 0x53B034 VA: 0x53B034
	|-Dictionary<int, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
	|
	|-RVA: 0x53F19C Offset: 0x53F19C VA: 0x53F19C
	|-Dictionary<object, bool>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
	|
	|-RVA: 0x543544 Offset: 0x543544 VA: 0x543544
	|-Dictionary<object, int>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
	|
	|-RVA: 0x5478A4 Offset: 0x5478A4 VA: 0x5478A4
	|-Dictionary<object, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 9
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53B0E4 Offset: 0x53B0E4 VA: 0x53B0E4
	|-Dictionary<int, object>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x53F24C Offset: 0x53F24C VA: 0x53F24C
	|-Dictionary<object, bool>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5435F4 Offset: 0x5435F4 VA: 0x5435F4
	|-Dictionary<object, int>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x547954 Offset: 0x547954 VA: 0x547954
	|-Dictionary<object, object>.System.Collections.ICollection.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53B378 Offset: 0x53B378 VA: 0x53B378
	|-Dictionary<int, object>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x53F4E0 Offset: 0x53F4E0 VA: 0x53F4E0
	|-Dictionary<object, bool>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x543888 Offset: 0x543888 VA: 0x543888
	|-Dictionary<object, int>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x547BE8 Offset: 0x547BE8 VA: 0x547BE8
	|-Dictionary<object, object>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 17
	private IEnumerator<KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53B400 Offset: 0x53B400 VA: 0x53B400
	|-Dictionary<int, object>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
	|
	|-RVA: 0x53F568 Offset: 0x53F568 VA: 0x53F568
	|-Dictionary<object, bool>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
	|
	|-RVA: 0x543910 Offset: 0x543910 VA: 0x543910
	|-Dictionary<object, int>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
	|
	|-RVA: 0x547C70 Offset: 0x547C70 VA: 0x547C70
	|-Dictionary<object, object>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 21
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53B488 Offset: 0x53B488 VA: 0x53B488
	|-Dictionary<int, object>.System.Collections.IDictionary.GetEnumerator
	|
	|-RVA: 0x53F5F0 Offset: 0x53F5F0 VA: 0x53F5F0
	|-Dictionary<object, bool>.System.Collections.IDictionary.GetEnumerator
	|
	|-RVA: 0x543998 Offset: 0x543998 VA: 0x543998
	|-Dictionary<object, int>.System.Collections.IDictionary.GetEnumerator
	|
	|-RVA: 0x547CF8 Offset: 0x547CF8 VA: 0x547CF8
	|-Dictionary<object, object>.System.Collections.IDictionary.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 10
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53B4E8 Offset: 0x53B4E8 VA: 0x53B4E8
	|-Dictionary<int, object>.get_Count
	|
	|-RVA: 0x53F650 Offset: 0x53F650 VA: 0x53F650
	|-Dictionary<object, bool>.get_Count
	|
	|-RVA: 0x5439F8 Offset: 0x5439F8 VA: 0x5439F8
	|-Dictionary<object, int>.get_Count
	|
	|-RVA: 0x547D58 Offset: 0x547D58 VA: 0x547D58
	|-Dictionary<object, object>.get_Count
	|-Dictionary<Font, HashSet<Text>>.get_Count
	*/

	// RVA: -1 Offset: -1 Slot: 24
	public TValue get_Item(TKey key) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53B4F0 Offset: 0x53B4F0 VA: 0x53B4F0
	|-Dictionary<int, object>.get_Item
	|
	|-RVA: 0x53F658 Offset: 0x53F658 VA: 0x53F658
	|-Dictionary<object, bool>.get_Item
	|
	|-RVA: 0x543A00 Offset: 0x543A00 VA: 0x543A00
	|-Dictionary<object, int>.get_Item
	|
	|-RVA: 0x547D60 Offset: 0x547D60 VA: 0x547D60
	|-Dictionary<object, object>.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 25
	public void set_Item(TKey key, TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53B844 Offset: 0x53B844 VA: 0x53B844
	|-Dictionary<int, object>.set_Item
	|-Dictionary<int, GUILayoutUtility.LayoutCache>.set_Item
	|
	|-RVA: 0x53FA00 Offset: 0x53FA00 VA: 0x53FA00
	|-Dictionary<object, bool>.set_Item
	|
	|-RVA: 0x543DA8 Offset: 0x543DA8 VA: 0x543DA8
	|-Dictionary<object, int>.set_Item
	|
	|-RVA: 0x548108 Offset: 0x548108 VA: 0x548108
	|-Dictionary<object, object>.set_Item
	|-Dictionary<string, GUIStyle>.set_Item
	*/

	// RVA: -1 Offset: -1
	private void Init(int capacity, IEqualityComparer<TKey> hcp) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53BED8 Offset: 0x53BED8 VA: 0x53BED8
	|-Dictionary<int, object>.Init
	|
	|-RVA: 0x5400F4 Offset: 0x5400F4 VA: 0x5400F4
	|-Dictionary<object, bool>.Init
	|
	|-RVA: 0x54449C Offset: 0x54449C VA: 0x54449C
	|-Dictionary<object, int>.Init
	|
	|-RVA: 0x5487FC Offset: 0x5487FC VA: 0x5487FC
	|-Dictionary<object, object>.Init
	*/

	// RVA: -1 Offset: -1
	private void InitArrays(int size) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53C0A0 Offset: 0x53C0A0 VA: 0x53C0A0
	|-Dictionary<int, object>.InitArrays
	|
	|-RVA: 0x5402BC Offset: 0x5402BC VA: 0x5402BC
	|-Dictionary<object, bool>.InitArrays
	|
	|-RVA: 0x544664 Offset: 0x544664 VA: 0x544664
	|-Dictionary<object, int>.InitArrays
	|
	|-RVA: 0x5489C4 Offset: 0x5489C4 VA: 0x5489C4
	|-Dictionary<object, object>.InitArrays
	*/

	// RVA: -1 Offset: -1
	private void CopyToCheck(Array array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53C200 Offset: 0x53C200 VA: 0x53C200
	|-Dictionary<int, object>.CopyToCheck
	|
	|-RVA: 0x54041C Offset: 0x54041C VA: 0x54041C
	|-Dictionary<object, bool>.CopyToCheck
	|
	|-RVA: 0x5447C4 Offset: 0x5447C4 VA: 0x5447C4
	|-Dictionary<object, int>.CopyToCheck
	|
	|-RVA: 0x548B24 Offset: 0x548B24 VA: 0x548B24
	|-Dictionary<object, object>.CopyToCheck
	*/

	// RVA: -1 Offset: -1
	private void Do_CopyTo<TRet, TElem>(TElem[] array, int index, Dictionary.Transform<TKey, TValue, TRet> transform) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x50C468 Offset: 0x50C468 VA: 0x50C468
	|-Dictionary<int, object>.Do_CopyTo<DictionaryEntry, DictionaryEntry>
	|
	|-RVA: 0x50C654 Offset: 0x50C654 VA: 0x50C654
	|-Dictionary<int, object>.Do_CopyTo<KeyValuePair<int, object>, KeyValuePair<int, object>>
	|
	|-RVA: 0x50C840 Offset: 0x50C840 VA: 0x50C840
	|-Dictionary<int, object>.Do_CopyTo<KeyValuePair<int, object>, object>
	|
	|-RVA: 0x50CA98 Offset: 0x50CA98 VA: 0x50CA98
	|-Dictionary<int, object>.Do_CopyTo<object, object>
	|
	|-RVA: 0x50D3A4 Offset: 0x50D3A4 VA: 0x50D3A4
	|-Dictionary<object, bool>.Do_CopyTo<bool, bool>
	|
	|-RVA: 0x50D588 Offset: 0x50D588 VA: 0x50D588
	|-Dictionary<object, bool>.Do_CopyTo<bool, object>
	|
	|-RVA: 0x50D7E4 Offset: 0x50D7E4 VA: 0x50D7E4
	|-Dictionary<object, bool>.Do_CopyTo<DictionaryEntry, DictionaryEntry>
	|
	|-RVA: 0x50D9D8 Offset: 0x50D9D8 VA: 0x50D9D8
	|-Dictionary<object, bool>.Do_CopyTo<KeyValuePair<object, bool>, KeyValuePair<object, bool>>
	|
	|-RVA: 0x50DBCC Offset: 0x50DBCC VA: 0x50DBCC
	|-Dictionary<object, bool>.Do_CopyTo<KeyValuePair<object, bool>, object>
	|
	|-RVA: 0x50E51C Offset: 0x50E51C VA: 0x50E51C
	|-Dictionary<object, int>.Do_CopyTo<DictionaryEntry, DictionaryEntry>
	|
	|-RVA: 0x50E708 Offset: 0x50E708 VA: 0x50E708
	|-Dictionary<object, int>.Do_CopyTo<KeyValuePair<object, int>, KeyValuePair<object, int>>
	|
	|-RVA: 0x50E8F4 Offset: 0x50E8F4 VA: 0x50E8F4
	|-Dictionary<object, int>.Do_CopyTo<KeyValuePair<object, int>, object>
	|
	|-RVA: 0x50EB4C Offset: 0x50EB4C VA: 0x50EB4C
	|-Dictionary<object, int>.Do_CopyTo<int, int>
	|
	|-RVA: 0x50ED28 Offset: 0x50ED28 VA: 0x50ED28
	|-Dictionary<object, int>.Do_CopyTo<int, object>
	|
	|-RVA: 0x50F66C Offset: 0x50F66C VA: 0x50F66C
	|-Dictionary<object, object>.Do_CopyTo<DictionaryEntry, DictionaryEntry>
	|
	|-RVA: 0x50F858 Offset: 0x50F858 VA: 0x50F858
	|-Dictionary<object, object>.Do_CopyTo<KeyValuePair<object, object>, KeyValuePair<object, object>>
	|
	|-RVA: 0x50FA44 Offset: 0x50FA44 VA: 0x50FA44
	|-Dictionary<object, object>.Do_CopyTo<KeyValuePair<object, object>, object>
	|
	|-RVA: 0x50FC9C Offset: 0x50FC9C VA: 0x50FC9C
	|-Dictionary<object, object>.Do_CopyTo<object, object>
	*/

	// RVA: -1 Offset: -1
	private static KeyValuePair<TKey, TValue> make_pair(TKey key, TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53C3E0 Offset: 0x53C3E0 VA: 0x53C3E0
	|-Dictionary<int, object>.make_pair
	|
	|-RVA: 0x5405FC Offset: 0x5405FC VA: 0x5405FC
	|-Dictionary<object, bool>.make_pair
	|
	|-RVA: 0x5449A4 Offset: 0x5449A4 VA: 0x5449A4
	|-Dictionary<object, int>.make_pair
	|
	|-RVA: 0x548D04 Offset: 0x548D04 VA: 0x548D04
	|-Dictionary<object, object>.make_pair
	*/

	// RVA: -1 Offset: -1
	private static TValue pick_value(TKey key, TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53C434 Offset: 0x53C434 VA: 0x53C434
	|-Dictionary<int, object>.pick_value
	|
	|-RVA: 0x540650 Offset: 0x540650 VA: 0x540650
	|-Dictionary<object, bool>.pick_value
	|
	|-RVA: 0x5449F8 Offset: 0x5449F8 VA: 0x5449F8
	|-Dictionary<object, int>.pick_value
	|
	|-RVA: 0x548D58 Offset: 0x548D58 VA: 0x548D58
	|-Dictionary<object, object>.pick_value
	*/

	// RVA: -1 Offset: -1
	private void CopyTo(KeyValuePair<TKey, TValue>[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53C43C Offset: 0x53C43C VA: 0x53C43C
	|-Dictionary<int, object>.CopyTo
	|
	|-RVA: 0x540658 Offset: 0x540658 VA: 0x540658
	|-Dictionary<object, bool>.CopyTo
	|
	|-RVA: 0x544A00 Offset: 0x544A00 VA: 0x544A00
	|-Dictionary<object, int>.CopyTo
	|
	|-RVA: 0x548D60 Offset: 0x548D60 VA: 0x548D60
	|-Dictionary<object, object>.CopyTo
	*/

	// RVA: -1 Offset: -1
	private void Do_ICollectionCopyTo<TRet>(Array array, int index, Dictionary.Transform<TKey, TValue, TRet> transform) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x50CCB4 Offset: 0x50CCB4 VA: 0x50CCB4
	|-Dictionary<int, object>.Do_ICollectionCopyTo<KeyValuePair<int, object>>
	|
	|-RVA: 0x50D02C Offset: 0x50D02C VA: 0x50D02C
	|-Dictionary<int, object>.Do_ICollectionCopyTo<object>
	|
	|-RVA: 0x50DE2C Offset: 0x50DE2C VA: 0x50DE2C
	|-Dictionary<object, bool>.Do_ICollectionCopyTo<bool>
	|
	|-RVA: 0x50E1A4 Offset: 0x50E1A4 VA: 0x50E1A4
	|-Dictionary<object, bool>.Do_ICollectionCopyTo<KeyValuePair<object, bool>>
	|
	|-RVA: 0x50EF7C Offset: 0x50EF7C VA: 0x50EF7C
	|-Dictionary<object, int>.Do_ICollectionCopyTo<KeyValuePair<object, int>>
	|
	|-RVA: 0x50F2F4 Offset: 0x50F2F4 VA: 0x50F2F4
	|-Dictionary<object, int>.Do_ICollectionCopyTo<int>
	|
	|-RVA: 0x50FEB8 Offset: 0x50FEB8 VA: 0x50FEB8
	|-Dictionary<object, object>.Do_ICollectionCopyTo<KeyValuePair<object, object>>
	|
	|-RVA: 0x510230 Offset: 0x510230 VA: 0x510230
	|-Dictionary<object, object>.Do_ICollectionCopyTo<object>
	*/

	// RVA: -1 Offset: -1
	private void Resize() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53C514 Offset: 0x53C514 VA: 0x53C514
	|-Dictionary<int, object>.Resize
	|
	|-RVA: 0x540730 Offset: 0x540730 VA: 0x540730
	|-Dictionary<object, bool>.Resize
	|
	|-RVA: 0x544AD8 Offset: 0x544AD8 VA: 0x544AD8
	|-Dictionary<object, int>.Resize
	|
	|-RVA: 0x548E38 Offset: 0x548E38 VA: 0x548E38
	|-Dictionary<object, object>.Resize
	*/

	// RVA: -1 Offset: -1 Slot: 26
	public void Add(TKey key, TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53C954 Offset: 0x53C954 VA: 0x53C954
	|-Dictionary<int, object>.Add
	|-Dictionary<int, PointerEventData>.Add
	|
	|-RVA: 0x540B70 Offset: 0x540B70 VA: 0x540B70
	|-Dictionary<object, bool>.Add
	|-Dictionary<string, bool>.Add
	|
	|-RVA: 0x544F18 Offset: 0x544F18 VA: 0x544F18
	|-Dictionary<object, int>.Add
	|-Dictionary<string, int>.Add
	|
	|-RVA: 0x549278 Offset: 0x549278 VA: 0x549278
	|-Dictionary<object, object>.Add
	|-Dictionary<Canvas, IndexedSet<Graphic>>.Add
	|-Dictionary<Font, HashSet<Text>>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public void Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53CEF4 Offset: 0x53CEF4 VA: 0x53CEF4
	|-Dictionary<int, object>.Clear
	|-Dictionary<int, PointerEventData>.Clear
	|
	|-RVA: 0x54115C Offset: 0x54115C VA: 0x54115C
	|-Dictionary<object, bool>.Clear
	|
	|-RVA: 0x545504 Offset: 0x545504 VA: 0x545504
	|-Dictionary<object, int>.Clear
	|
	|-RVA: 0x549864 Offset: 0x549864 VA: 0x549864
	|-Dictionary<object, object>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 27
	public bool ContainsKey(TKey key) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53CFC8 Offset: 0x53CFC8 VA: 0x53CFC8
	|-Dictionary<int, object>.ContainsKey
	|
	|-RVA: 0x541230 Offset: 0x541230 VA: 0x541230
	|-Dictionary<object, bool>.ContainsKey
	|
	|-RVA: 0x5455D8 Offset: 0x5455D8 VA: 0x5455D8
	|-Dictionary<object, int>.ContainsKey
	|
	|-RVA: 0x549938 Offset: 0x549938 VA: 0x549938
	|-Dictionary<object, object>.ContainsKey
	*/

	// RVA: -1 Offset: -1
	public bool ContainsValue(TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53D2B4 Offset: 0x53D2B4 VA: 0x53D2B4
	|-Dictionary<int, object>.ContainsValue
	|
	|-RVA: 0x541584 Offset: 0x541584 VA: 0x541584
	|-Dictionary<object, bool>.ContainsValue
	|
	|-RVA: 0x54592C Offset: 0x54592C VA: 0x54592C
	|-Dictionary<object, int>.ContainsValue
	|
	|-RVA: 0x549C8C Offset: 0x549C8C VA: 0x549C8C
	|-Dictionary<object, object>.ContainsValue
	*/

	// RVA: -1 Offset: -1 Slot: 28
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53D524 Offset: 0x53D524 VA: 0x53D524
	|-Dictionary<int, object>.GetObjectData
	|
	|-RVA: 0x5417FC Offset: 0x5417FC VA: 0x5417FC
	|-Dictionary<object, bool>.GetObjectData
	|
	|-RVA: 0x545B9C Offset: 0x545B9C VA: 0x545B9C
	|-Dictionary<object, int>.GetObjectData
	|
	|-RVA: 0x549EFC Offset: 0x549EFC VA: 0x549EFC
	|-Dictionary<object, object>.GetObjectData
	*/

	// RVA: -1 Offset: -1 Slot: 29
	public virtual void OnDeserialization(object sender) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53D6CC Offset: 0x53D6CC VA: 0x53D6CC
	|-Dictionary<int, object>.OnDeserialization
	|
	|-RVA: 0x5419A4 Offset: 0x5419A4 VA: 0x5419A4
	|-Dictionary<object, bool>.OnDeserialization
	|
	|-RVA: 0x545D44 Offset: 0x545D44 VA: 0x545D44
	|-Dictionary<object, int>.OnDeserialization
	|
	|-RVA: 0x54A0A4 Offset: 0x54A0A4 VA: 0x54A0A4
	|-Dictionary<object, object>.OnDeserialization
	*/

	// RVA: -1 Offset: -1 Slot: 30
	public bool Remove(TKey key) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53DA74 Offset: 0x53DA74 VA: 0x53DA74
	|-Dictionary<int, object>.Remove
	|-Dictionary<int, PointerEventData>.Remove
	|
	|-RVA: 0x541D4C Offset: 0x541D4C VA: 0x541D4C
	|-Dictionary<object, bool>.Remove
	|
	|-RVA: 0x5460EC Offset: 0x5460EC VA: 0x5460EC
	|-Dictionary<object, int>.Remove
	|
	|-RVA: 0x54A44C Offset: 0x54A44C VA: 0x54A44C
	|-Dictionary<object, object>.Remove
	|-Dictionary<Canvas, IndexedSet<Graphic>>.Remove
	|-Dictionary<Font, HashSet<Text>>.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 31
	public bool TryGetValue(TKey key, out TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53DFB4 Offset: 0x53DFB4 VA: 0x53DFB4
	|-Dictionary<int, object>.TryGetValue
	|-Dictionary<int, PointerEventData>.TryGetValue
	|-Dictionary<int, GUILayoutUtility.LayoutCache>.TryGetValue
	|
	|-RVA: 0x5422F0 Offset: 0x5422F0 VA: 0x5422F0
	|-Dictionary<object, bool>.TryGetValue
	|
	|-RVA: 0x546690 Offset: 0x546690 VA: 0x546690
	|-Dictionary<object, int>.TryGetValue
	|-Dictionary<string, int>.TryGetValue
	|
	|-RVA: 0x54A9F0 Offset: 0x54A9F0 VA: 0x54A9F0
	|-Dictionary<object, object>.TryGetValue
	|-Dictionary<string, GUIStyle>.TryGetValue
	|-Dictionary<Canvas, IndexedSet<Graphic>>.TryGetValue
	|-Dictionary<Font, HashSet<Text>>.TryGetValue
	*/

	// RVA: -1 Offset: -1
	public Dictionary.ValueCollection<TKey, TValue> get_Values() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53E2E4 Offset: 0x53E2E4 VA: 0x53E2E4
	|-Dictionary<int, PointerEventData>.get_Values
	|-Dictionary<int, object>.get_Values
	|
	|-RVA: 0x54AD88 Offset: 0x54AD88 VA: 0x54AD88
	|-Dictionary<string, GUIStyle>.get_Values
	|-Dictionary<object, object>.get_Values
	|
	|-RVA: 0x542688 Offset: 0x542688 VA: 0x542688
	|-Dictionary<object, bool>.get_Values
	|
	|-RVA: 0x546A28 Offset: 0x546A28 VA: 0x546A28
	|-Dictionary<object, int>.get_Values
	*/

	// RVA: -1 Offset: -1
	private TKey ToTKey(object key) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53E344 Offset: 0x53E344 VA: 0x53E344
	|-Dictionary<int, object>.ToTKey
	|
	|-RVA: 0x5426E8 Offset: 0x5426E8 VA: 0x5426E8
	|-Dictionary<object, bool>.ToTKey
	|
	|-RVA: 0x546A88 Offset: 0x546A88 VA: 0x546A88
	|-Dictionary<object, int>.ToTKey
	|
	|-RVA: 0x54ADE8 Offset: 0x54ADE8 VA: 0x54ADE8
	|-Dictionary<object, object>.ToTKey
	*/

	// RVA: -1 Offset: -1
	private TValue ToTValue(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53E55C Offset: 0x53E55C VA: 0x53E55C
	|-Dictionary<int, object>.ToTValue
	|
	|-RVA: 0x54296C Offset: 0x54296C VA: 0x54296C
	|-Dictionary<object, bool>.ToTValue
	|
	|-RVA: 0x546D0C Offset: 0x546D0C VA: 0x546D0C
	|-Dictionary<object, int>.ToTValue
	|
	|-RVA: 0x54B06C Offset: 0x54B06C VA: 0x54B06C
	|-Dictionary<object, object>.ToTValue
	*/

	// RVA: -1 Offset: -1
	private bool ContainsKeyValuePair(KeyValuePair<TKey, TValue> pair) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53E814 Offset: 0x53E814 VA: 0x53E814
	|-Dictionary<int, object>.ContainsKeyValuePair
	|
	|-RVA: 0x542BB4 Offset: 0x542BB4 VA: 0x542BB4
	|-Dictionary<object, bool>.ContainsKeyValuePair
	|
	|-RVA: 0x546F4C Offset: 0x546F4C VA: 0x546F4C
	|-Dictionary<object, int>.ContainsKeyValuePair
	|
	|-RVA: 0x54B324 Offset: 0x54B324 VA: 0x54B324
	|-Dictionary<object, object>.ContainsKeyValuePair
	*/

	// RVA: -1 Offset: -1
	public Dictionary.Enumerator<TKey, TValue> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53E978 Offset: 0x53E978 VA: 0x53E978
	|-Dictionary<int, PointerEventData>.GetEnumerator
	|-Dictionary<int, object>.GetEnumerator
	|
	|-RVA: 0x542D20 Offset: 0x542D20 VA: 0x542D20
	|-Dictionary<object, bool>.GetEnumerator
	|
	|-RVA: 0x5470B0 Offset: 0x5470B0 VA: 0x5470B0
	|-Dictionary<object, int>.GetEnumerator
	|
	|-RVA: 0x54B488 Offset: 0x54B488 VA: 0x54B488
	|-Dictionary<object, object>.GetEnumerator
	*/

	[CompilerGeneratedAttribute] // RVA: 0x9C19C Offset: 0x9C19C VA: 0x9C19C
	// RVA: -1 Offset: -1
	private static DictionaryEntry <CopyTo>m__0(TKey key, TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53E9A8 Offset: 0x53E9A8 VA: 0x53E9A8
	|-Dictionary<int, object>.<CopyTo>m__0
	|
	|-RVA: 0x542D50 Offset: 0x542D50 VA: 0x542D50
	|-Dictionary<object, bool>.<CopyTo>m__0
	|
	|-RVA: 0x5470E0 Offset: 0x5470E0 VA: 0x5470E0
	|-Dictionary<object, int>.<CopyTo>m__0
	|
	|-RVA: 0x54B4B8 Offset: 0x54B4B8 VA: 0x54B4B8
	|-Dictionary<object, object>.<CopyTo>m__0
	*/
}

// Namespace: 
[Serializable]
private class Dictionary.ShimEnumerator<TKey, TValue> : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 162
{
	// Fields
	private Dictionary.Enumerator<TKey, TValue> host_enumerator; // 0x0

	// Properties
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }
	public object Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(Dictionary<TKey, TValue> host) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21565C Offset: 0x21565C VA: 0x21565C
	|-Dictionary.ShimEnumerator<int, object>..ctor
	|
	|-RVA: 0x215970 Offset: 0x215970 VA: 0x215970
	|-Dictionary.ShimEnumerator<object, bool>..ctor
	|
	|-RVA: 0x215C84 Offset: 0x215C84 VA: 0x215C84
	|-Dictionary.ShimEnumerator<object, int>..ctor
	|
	|-RVA: 0x534AC0 Offset: 0x534AC0 VA: 0x534AC0
	|-Dictionary.ShimEnumerator<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2156DC Offset: 0x2156DC VA: 0x2156DC
	|-Dictionary.ShimEnumerator<int, object>.MoveNext
	|
	|-RVA: 0x2159F0 Offset: 0x2159F0 VA: 0x2159F0
	|-Dictionary.ShimEnumerator<object, bool>.MoveNext
	|
	|-RVA: 0x215D04 Offset: 0x215D04 VA: 0x215D04
	|-Dictionary.ShimEnumerator<object, int>.MoveNext
	|
	|-RVA: 0x534B40 Offset: 0x534B40 VA: 0x534B40
	|-Dictionary.ShimEnumerator<object, object>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public DictionaryEntry get_Entry() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2156F0 Offset: 0x2156F0 VA: 0x2156F0
	|-Dictionary.ShimEnumerator<int, object>.get_Entry
	|
	|-RVA: 0x215A04 Offset: 0x215A04 VA: 0x215A04
	|-Dictionary.ShimEnumerator<object, bool>.get_Entry
	|
	|-RVA: 0x215D18 Offset: 0x215D18 VA: 0x215D18
	|-Dictionary.ShimEnumerator<object, int>.get_Entry
	|
	|-RVA: 0x534B54 Offset: 0x534B54 VA: 0x534B54
	|-Dictionary.ShimEnumerator<object, object>.get_Entry
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public object get_Key() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x215810 Offset: 0x215810 VA: 0x215810
	|-Dictionary.ShimEnumerator<int, object>.get_Key
	|
	|-RVA: 0x215B24 Offset: 0x215B24 VA: 0x215B24
	|-Dictionary.ShimEnumerator<object, bool>.get_Key
	|
	|-RVA: 0x215E38 Offset: 0x215E38 VA: 0x215E38
	|-Dictionary.ShimEnumerator<object, int>.get_Key
	|
	|-RVA: 0x534C74 Offset: 0x534C74 VA: 0x534C74
	|-Dictionary.ShimEnumerator<object, object>.get_Key
	*/

	// RVA: -1 Offset: -1 Slot: 9
	public object get_Value() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21587C Offset: 0x21587C VA: 0x21587C
	|-Dictionary.ShimEnumerator<int, object>.get_Value
	|
	|-RVA: 0x215B5C Offset: 0x215B5C VA: 0x215B5C
	|-Dictionary.ShimEnumerator<object, bool>.get_Value
	|
	|-RVA: 0x215E70 Offset: 0x215E70 VA: 0x215E70
	|-Dictionary.ShimEnumerator<object, int>.get_Value
	|
	|-RVA: 0x534CC8 Offset: 0x534CC8 VA: 0x534CC8
	|-Dictionary.ShimEnumerator<object, object>.get_Value
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public object get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2158B4 Offset: 0x2158B4 VA: 0x2158B4
	|-Dictionary.ShimEnumerator<int, object>.get_Current
	|
	|-RVA: 0x215BC8 Offset: 0x215BC8 VA: 0x215BC8
	|-Dictionary.ShimEnumerator<object, bool>.get_Current
	|
	|-RVA: 0x215EDC Offset: 0x215EDC VA: 0x215EDC
	|-Dictionary.ShimEnumerator<object, int>.get_Current
	|
	|-RVA: 0x534D1C Offset: 0x534D1C VA: 0x534D1C
	|-Dictionary.ShimEnumerator<object, object>.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public void Reset() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21595C Offset: 0x21595C VA: 0x21595C
	|-Dictionary.ShimEnumerator<int, object>.Reset
	|
	|-RVA: 0x215C70 Offset: 0x215C70 VA: 0x215C70
	|-Dictionary.ShimEnumerator<object, bool>.Reset
	|
	|-RVA: 0x215F84 Offset: 0x215F84 VA: 0x215F84
	|-Dictionary.ShimEnumerator<object, int>.Reset
	|
	|-RVA: 0x534DC4 Offset: 0x534DC4 VA: 0x534DC4
	|-Dictionary.ShimEnumerator<object, object>.Reset
	*/
}

// Namespace: 
[Serializable]
public struct Dictionary.Enumerator<TKey, TValue> : IEnumerator, IDisposable, IEnumerator<KeyValuePair<TKey, TValue>>, IDictionaryEnumerator // TypeDefIndex: 163
{
	// Fields
	private Dictionary<TKey, TValue> dictionary; // 0x0
	private int next; // 0x0
	private int stamp; // 0x0
	internal KeyValuePair<TKey, TValue> current; // 0x0

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	private DictionaryEntry System.Collections.IDictionaryEnumerator.Entry { get; }
	private object System.Collections.IDictionaryEnumerator.Key { get; }
	private object System.Collections.IDictionaryEnumerator.Value { get; }
	public KeyValuePair<TKey, TValue> Current { get; }
	internal TKey CurrentKey { get; }
	internal TValue CurrentValue { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(Dictionary<TKey, TValue> dictionary) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC6C80 Offset: 0xC6C80 VA: 0xC6C80
	|-Dictionary.Enumerator<int, object>..ctor
	|
	|-RVA: 0xC6D34 Offset: 0xC6D34 VA: 0xC6D34
	|-Dictionary.Enumerator<object, bool>..ctor
	|
	|-RVA: 0xC6DE8 Offset: 0xC6DE8 VA: 0xC6DE8
	|-Dictionary.Enumerator<object, int>..ctor
	|
	|-RVA: 0xC6E9C Offset: 0xC6E9C VA: 0xC6E9C
	|-Dictionary.Enumerator<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC6CB0 Offset: 0xC6CB0 VA: 0xC6CB0
	|-Dictionary.Enumerator<int, object>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6D64 Offset: 0xC6D64 VA: 0xC6D64
	|-Dictionary.Enumerator<object, bool>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6E18 Offset: 0xC6E18 VA: 0xC6E18
	|-Dictionary.Enumerator<object, int>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xC6ECC Offset: 0xC6ECC VA: 0xC6ECC
	|-Dictionary.Enumerator<object, object>.System.Collections.IEnumerator.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private void System.Collections.IEnumerator.Reset() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC6CB8 Offset: 0xC6CB8 VA: 0xC6CB8
	|-Dictionary.Enumerator<int, object>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6D6C Offset: 0xC6D6C VA: 0xC6D6C
	|-Dictionary.Enumerator<object, bool>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6E20 Offset: 0xC6E20 VA: 0xC6E20
	|-Dictionary.Enumerator<object, int>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xC6ED4 Offset: 0xC6ED4 VA: 0xC6ED4
	|-Dictionary.Enumerator<object, object>.System.Collections.IEnumerator.Reset
	*/

	// RVA: -1 Offset: -1 Slot: 9
	private DictionaryEntry System.Collections.IDictionaryEnumerator.get_Entry() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC6CC0 Offset: 0xC6CC0 VA: 0xC6CC0
	|-Dictionary.Enumerator<int, object>.System.Collections.IDictionaryEnumerator.get_Entry
	|
	|-RVA: 0xC6D74 Offset: 0xC6D74 VA: 0xC6D74
	|-Dictionary.Enumerator<object, bool>.System.Collections.IDictionaryEnumerator.get_Entry
	|
	|-RVA: 0xC6E28 Offset: 0xC6E28 VA: 0xC6E28
	|-Dictionary.Enumerator<object, int>.System.Collections.IDictionaryEnumerator.get_Entry
	|
	|-RVA: 0xC6EDC Offset: 0xC6EDC VA: 0xC6EDC
	|-Dictionary.Enumerator<object, object>.System.Collections.IDictionaryEnumerator.get_Entry
	*/

	// RVA: -1 Offset: -1 Slot: 10
	private object System.Collections.IDictionaryEnumerator.get_Key() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC6CD4 Offset: 0xC6CD4 VA: 0xC6CD4
	|-Dictionary.Enumerator<int, object>.System.Collections.IDictionaryEnumerator.get_Key
	|
	|-RVA: 0xC6D88 Offset: 0xC6D88 VA: 0xC6D88
	|-Dictionary.Enumerator<object, bool>.System.Collections.IDictionaryEnumerator.get_Key
	|
	|-RVA: 0xC6E3C Offset: 0xC6E3C VA: 0xC6E3C
	|-Dictionary.Enumerator<object, int>.System.Collections.IDictionaryEnumerator.get_Key
	|
	|-RVA: 0xC6EF0 Offset: 0xC6EF0 VA: 0xC6EF0
	|-Dictionary.Enumerator<object, object>.System.Collections.IDictionaryEnumerator.get_Key
	*/

	// RVA: -1 Offset: -1 Slot: 11
	private object System.Collections.IDictionaryEnumerator.get_Value() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC6CDC Offset: 0xC6CDC VA: 0xC6CDC
	|-Dictionary.Enumerator<int, object>.System.Collections.IDictionaryEnumerator.get_Value
	|
	|-RVA: 0xC6D90 Offset: 0xC6D90 VA: 0xC6D90
	|-Dictionary.Enumerator<object, bool>.System.Collections.IDictionaryEnumerator.get_Value
	|
	|-RVA: 0xC6E44 Offset: 0xC6E44 VA: 0xC6E44
	|-Dictionary.Enumerator<object, int>.System.Collections.IDictionaryEnumerator.get_Value
	|
	|-RVA: 0xC6EF8 Offset: 0xC6EF8 VA: 0xC6EF8
	|-Dictionary.Enumerator<object, object>.System.Collections.IDictionaryEnumerator.get_Value
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC6CE4 Offset: 0xC6CE4 VA: 0xC6CE4
	|-Dictionary.Enumerator<int, object>.MoveNext
	|-Dictionary.Enumerator<int, PointerEventData>.MoveNext
	|
	|-RVA: 0xC6D98 Offset: 0xC6D98 VA: 0xC6D98
	|-Dictionary.Enumerator<object, bool>.MoveNext
	|
	|-RVA: 0xC6E4C Offset: 0xC6E4C VA: 0xC6E4C
	|-Dictionary.Enumerator<object, int>.MoveNext
	|
	|-RVA: 0xC6F00 Offset: 0xC6F00 VA: 0xC6F00
	|-Dictionary.Enumerator<object, object>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public KeyValuePair<TKey, TValue> get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC6CEC Offset: 0xC6CEC VA: 0xC6CEC
	|-Dictionary.Enumerator<int, PointerEventData>.get_Current
	|-Dictionary.Enumerator<int, object>.get_Current
	|
	|-RVA: 0xC6DA0 Offset: 0xC6DA0 VA: 0xC6DA0
	|-Dictionary.Enumerator<object, bool>.get_Current
	|
	|-RVA: 0xC6E54 Offset: 0xC6E54 VA: 0xC6E54
	|-Dictionary.Enumerator<object, int>.get_Current
	|
	|-RVA: 0xC6F08 Offset: 0xC6F08 VA: 0xC6F08
	|-Dictionary.Enumerator<object, object>.get_Current
	*/

	// RVA: -1 Offset: -1
	internal TKey get_CurrentKey() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC6D00 Offset: 0xC6D00 VA: 0xC6D00
	|-Dictionary.Enumerator<int, object>.get_CurrentKey
	|
	|-RVA: 0xC6DB4 Offset: 0xC6DB4 VA: 0xC6DB4
	|-Dictionary.Enumerator<object, bool>.get_CurrentKey
	|
	|-RVA: 0xC6E68 Offset: 0xC6E68 VA: 0xC6E68
	|-Dictionary.Enumerator<object, int>.get_CurrentKey
	|
	|-RVA: 0xC6F1C Offset: 0xC6F1C VA: 0xC6F1C
	|-Dictionary.Enumerator<object, object>.get_CurrentKey
	*/

	// RVA: -1 Offset: -1
	internal TValue get_CurrentValue() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC6D08 Offset: 0xC6D08 VA: 0xC6D08
	|-Dictionary.Enumerator<int, object>.get_CurrentValue
	|
	|-RVA: 0xC6DBC Offset: 0xC6DBC VA: 0xC6DBC
	|-Dictionary.Enumerator<object, bool>.get_CurrentValue
	|
	|-RVA: 0xC6E70 Offset: 0xC6E70 VA: 0xC6E70
	|-Dictionary.Enumerator<object, int>.get_CurrentValue
	|
	|-RVA: 0xC6F24 Offset: 0xC6F24 VA: 0xC6F24
	|-Dictionary.Enumerator<object, object>.get_CurrentValue
	*/

	// RVA: -1 Offset: -1
	internal void Reset() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC6D10 Offset: 0xC6D10 VA: 0xC6D10
	|-Dictionary.Enumerator<int, object>.Reset
	|
	|-RVA: 0xC6DC4 Offset: 0xC6DC4 VA: 0xC6DC4
	|-Dictionary.Enumerator<object, bool>.Reset
	|
	|-RVA: 0xC6E78 Offset: 0xC6E78 VA: 0xC6E78
	|-Dictionary.Enumerator<object, int>.Reset
	|
	|-RVA: 0xC6F2C Offset: 0xC6F2C VA: 0xC6F2C
	|-Dictionary.Enumerator<object, object>.Reset
	*/

	// RVA: -1 Offset: -1
	private void VerifyState() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC6D18 Offset: 0xC6D18 VA: 0xC6D18
	|-Dictionary.Enumerator<int, object>.VerifyState
	|
	|-RVA: 0xC6DCC Offset: 0xC6DCC VA: 0xC6DCC
	|-Dictionary.Enumerator<object, bool>.VerifyState
	|
	|-RVA: 0xC6E80 Offset: 0xC6E80 VA: 0xC6E80
	|-Dictionary.Enumerator<object, int>.VerifyState
	|
	|-RVA: 0xC6F34 Offset: 0xC6F34 VA: 0xC6F34
	|-Dictionary.Enumerator<object, object>.VerifyState
	*/

	// RVA: -1 Offset: -1
	private void VerifyCurrent() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC6D20 Offset: 0xC6D20 VA: 0xC6D20
	|-Dictionary.Enumerator<int, object>.VerifyCurrent
	|
	|-RVA: 0xC6DD4 Offset: 0xC6DD4 VA: 0xC6DD4
	|-Dictionary.Enumerator<object, bool>.VerifyCurrent
	|
	|-RVA: 0xC6E88 Offset: 0xC6E88 VA: 0xC6E88
	|-Dictionary.Enumerator<object, int>.VerifyCurrent
	|
	|-RVA: 0xC6F3C Offset: 0xC6F3C VA: 0xC6F3C
	|-Dictionary.Enumerator<object, object>.VerifyCurrent
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC6D28 Offset: 0xC6D28 VA: 0xC6D28
	|-Dictionary.Enumerator<int, object>.Dispose
	|-Dictionary.Enumerator<int, PointerEventData>.Dispose
	|
	|-RVA: 0xC6DDC Offset: 0xC6DDC VA: 0xC6DDC
	|-Dictionary.Enumerator<object, bool>.Dispose
	|
	|-RVA: 0xC6E90 Offset: 0xC6E90 VA: 0xC6E90
	|-Dictionary.Enumerator<object, int>.Dispose
	|
	|-RVA: 0xC6F44 Offset: 0xC6F44 VA: 0xC6F44
	|-Dictionary.Enumerator<object, object>.Dispose
	*/
}

// Namespace: 
[DebuggerDisplayAttribute] // RVA: 0x94574 Offset: 0x94574 VA: 0x94574
[DebuggerTypeProxyAttribute] // RVA: 0x94574 Offset: 0x94574 VA: 0x94574
[Serializable]
public sealed class Dictionary.ValueCollection<TKey, TValue> : IEnumerable, ICollection, ICollection<TValue>, IEnumerable<TValue> // TypeDefIndex: 164
{
	// Fields
	private Dictionary<TKey, TValue> dictionary; // 0x0

	// Properties
	private bool System.Collections.Generic.ICollection<TValue>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	public int Count { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(Dictionary<TKey, TValue> dictionary) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x538BD0 Offset: 0x538BD0 VA: 0x538BD0
	|-Dictionary.ValueCollection<int, object>..ctor
	|
	|-RVA: 0x539354 Offset: 0x539354 VA: 0x539354
	|-Dictionary.ValueCollection<object, bool>..ctor
	|
	|-RVA: 0x539AD8 Offset: 0x539AD8 VA: 0x539AD8
	|-Dictionary.ValueCollection<object, int>..ctor
	|
	|-RVA: 0x53A25C Offset: 0x53A25C VA: 0x53A25C
	|-Dictionary.ValueCollection<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	private void System.Collections.Generic.ICollection<TValue>.Add(TValue item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x538C9C Offset: 0x538C9C VA: 0x538C9C
	|-Dictionary.ValueCollection<int, object>.System.Collections.Generic.ICollection<TValue>.Add
	|
	|-RVA: 0x539420 Offset: 0x539420 VA: 0x539420
	|-Dictionary.ValueCollection<object, bool>.System.Collections.Generic.ICollection<TValue>.Add
	|
	|-RVA: 0x539BA4 Offset: 0x539BA4 VA: 0x539BA4
	|-Dictionary.ValueCollection<object, int>.System.Collections.Generic.ICollection<TValue>.Add
	|
	|-RVA: 0x53A328 Offset: 0x53A328 VA: 0x53A328
	|-Dictionary.ValueCollection<object, object>.System.Collections.Generic.ICollection<TValue>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 12
	private void System.Collections.Generic.ICollection<TValue>.Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x538D38 Offset: 0x538D38 VA: 0x538D38
	|-Dictionary.ValueCollection<int, object>.System.Collections.Generic.ICollection<TValue>.Clear
	|
	|-RVA: 0x5394BC Offset: 0x5394BC VA: 0x5394BC
	|-Dictionary.ValueCollection<object, bool>.System.Collections.Generic.ICollection<TValue>.Clear
	|
	|-RVA: 0x539C40 Offset: 0x539C40 VA: 0x539C40
	|-Dictionary.ValueCollection<object, int>.System.Collections.Generic.ICollection<TValue>.Clear
	|
	|-RVA: 0x53A3C4 Offset: 0x53A3C4 VA: 0x53A3C4
	|-Dictionary.ValueCollection<object, object>.System.Collections.Generic.ICollection<TValue>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 13
	private bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x538DD4 Offset: 0x538DD4 VA: 0x538DD4
	|-Dictionary.ValueCollection<int, object>.System.Collections.Generic.ICollection<TValue>.Contains
	|
	|-RVA: 0x539558 Offset: 0x539558 VA: 0x539558
	|-Dictionary.ValueCollection<object, bool>.System.Collections.Generic.ICollection<TValue>.Contains
	|
	|-RVA: 0x539CDC Offset: 0x539CDC VA: 0x539CDC
	|-Dictionary.ValueCollection<object, int>.System.Collections.Generic.ICollection<TValue>.Contains
	|
	|-RVA: 0x53A460 Offset: 0x53A460 VA: 0x53A460
	|-Dictionary.ValueCollection<object, object>.System.Collections.Generic.ICollection<TValue>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 15
	private bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x538E18 Offset: 0x538E18 VA: 0x538E18
	|-Dictionary.ValueCollection<int, object>.System.Collections.Generic.ICollection<TValue>.Remove
	|
	|-RVA: 0x53959C Offset: 0x53959C VA: 0x53959C
	|-Dictionary.ValueCollection<object, bool>.System.Collections.Generic.ICollection<TValue>.Remove
	|
	|-RVA: 0x539D20 Offset: 0x539D20 VA: 0x539D20
	|-Dictionary.ValueCollection<object, int>.System.Collections.Generic.ICollection<TValue>.Remove
	|
	|-RVA: 0x53A4A4 Offset: 0x53A4A4 VA: 0x53A4A4
	|-Dictionary.ValueCollection<object, object>.System.Collections.Generic.ICollection<TValue>.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 16
	private IEnumerator<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x538EB4 Offset: 0x538EB4 VA: 0x538EB4
	|-Dictionary.ValueCollection<int, object>.System.Collections.Generic.IEnumerable<TValue>.GetEnumerator
	|
	|-RVA: 0x539638 Offset: 0x539638 VA: 0x539638
	|-Dictionary.ValueCollection<object, bool>.System.Collections.Generic.IEnumerable<TValue>.GetEnumerator
	|
	|-RVA: 0x539DBC Offset: 0x539DBC VA: 0x539DBC
	|-Dictionary.ValueCollection<object, int>.System.Collections.Generic.IEnumerable<TValue>.GetEnumerator
	|
	|-RVA: 0x53A540 Offset: 0x53A540 VA: 0x53A540
	|-Dictionary.ValueCollection<object, object>.System.Collections.Generic.IEnumerable<TValue>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 8
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x538F40 Offset: 0x538F40 VA: 0x538F40
	|-Dictionary.ValueCollection<int, object>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5396C4 Offset: 0x5396C4 VA: 0x5396C4
	|-Dictionary.ValueCollection<object, bool>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x539E48 Offset: 0x539E48 VA: 0x539E48
	|-Dictionary.ValueCollection<object, int>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x53A5CC Offset: 0x53A5CC VA: 0x53A5CC
	|-Dictionary.ValueCollection<object, object>.System.Collections.ICollection.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x539090 Offset: 0x539090 VA: 0x539090
	|-Dictionary.ValueCollection<int, object>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x539814 Offset: 0x539814 VA: 0x539814
	|-Dictionary.ValueCollection<object, bool>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x539F98 Offset: 0x539F98 VA: 0x539F98
	|-Dictionary.ValueCollection<object, int>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x53A71C Offset: 0x53A71C VA: 0x53A71C
	|-Dictionary.ValueCollection<object, object>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 10
	private bool System.Collections.Generic.ICollection<TValue>.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53911C Offset: 0x53911C VA: 0x53911C
	|-Dictionary.ValueCollection<int, object>.System.Collections.Generic.ICollection<TValue>.get_IsReadOnly
	|
	|-RVA: 0x5398A0 Offset: 0x5398A0 VA: 0x5398A0
	|-Dictionary.ValueCollection<object, bool>.System.Collections.Generic.ICollection<TValue>.get_IsReadOnly
	|
	|-RVA: 0x53A024 Offset: 0x53A024 VA: 0x53A024
	|-Dictionary.ValueCollection<object, int>.System.Collections.Generic.ICollection<TValue>.get_IsReadOnly
	|
	|-RVA: 0x53A7A8 Offset: 0x53A7A8 VA: 0x53A7A8
	|-Dictionary.ValueCollection<object, object>.System.Collections.Generic.ICollection<TValue>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private bool System.Collections.ICollection.get_IsSynchronized() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x539124 Offset: 0x539124 VA: 0x539124
	|-Dictionary.ValueCollection<int, object>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x5398A8 Offset: 0x5398A8 VA: 0x5398A8
	|-Dictionary.ValueCollection<object, bool>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x53A02C Offset: 0x53A02C VA: 0x53A02C
	|-Dictionary.ValueCollection<object, int>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x53A7B0 Offset: 0x53A7B0 VA: 0x53A7B0
	|-Dictionary.ValueCollection<object, object>.System.Collections.ICollection.get_IsSynchronized
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private object System.Collections.ICollection.get_SyncRoot() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x53912C Offset: 0x53912C VA: 0x53912C
	|-Dictionary.ValueCollection<int, object>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x5398B0 Offset: 0x5398B0 VA: 0x5398B0
	|-Dictionary.ValueCollection<object, bool>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x53A034 Offset: 0x53A034 VA: 0x53A034
	|-Dictionary.ValueCollection<object, int>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x53A7B8 Offset: 0x53A7B8 VA: 0x53A7B8
	|-Dictionary.ValueCollection<object, object>.System.Collections.ICollection.get_SyncRoot
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public void CopyTo(TValue[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x539204 Offset: 0x539204 VA: 0x539204
	|-Dictionary.ValueCollection<int, object>.CopyTo
	|
	|-RVA: 0x539988 Offset: 0x539988 VA: 0x539988
	|-Dictionary.ValueCollection<object, bool>.CopyTo
	|
	|-RVA: 0x53A10C Offset: 0x53A10C VA: 0x53A10C
	|-Dictionary.ValueCollection<object, int>.CopyTo
	|
	|-RVA: 0x53A890 Offset: 0x53A890 VA: 0x53A890
	|-Dictionary.ValueCollection<object, object>.CopyTo
	*/

	// RVA: -1 Offset: -1
	public Dictionary.ValueCollection.Enumerator<TKey, TValue> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5392E4 Offset: 0x5392E4 VA: 0x5392E4
	|-Dictionary.ValueCollection<int, PointerEventData>.GetEnumerator
	|-Dictionary.ValueCollection<int, object>.GetEnumerator
	|
	|-RVA: 0x53A970 Offset: 0x53A970 VA: 0x53A970
	|-Dictionary.ValueCollection<string, GUIStyle>.GetEnumerator
	|-Dictionary.ValueCollection<object, object>.GetEnumerator
	|
	|-RVA: 0x539A68 Offset: 0x539A68 VA: 0x539A68
	|-Dictionary.ValueCollection<object, bool>.GetEnumerator
	|
	|-RVA: 0x53A1EC Offset: 0x53A1EC VA: 0x53A1EC
	|-Dictionary.ValueCollection<object, int>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 9
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x539318 Offset: 0x539318 VA: 0x539318
	|-Dictionary.ValueCollection<int, object>.get_Count
	|
	|-RVA: 0x539A9C Offset: 0x539A9C VA: 0x539A9C
	|-Dictionary.ValueCollection<object, bool>.get_Count
	|
	|-RVA: 0x53A220 Offset: 0x53A220 VA: 0x53A220
	|-Dictionary.ValueCollection<object, int>.get_Count
	|
	|-RVA: 0x53A9A4 Offset: 0x53A9A4 VA: 0x53A9A4
	|-Dictionary.ValueCollection<object, object>.get_Count
	*/
}

// Namespace: 
[Serializable]
public struct Dictionary.ValueCollection.Enumerator<TKey, TValue> : IEnumerator, IDisposable, IEnumerator<TValue> // TypeDefIndex: 165
{
	// Fields
	private Dictionary.Enumerator<TKey, TValue> host_enumerator; // 0x0

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public TValue Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(Dictionary<TKey, TValue> host) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF09D4 Offset: 0xF09D4 VA: 0xF09D4
	|-Dictionary.ValueCollection.Enumerator<int, object>..ctor
	|
	|-RVA: 0xF0A04 Offset: 0xF0A04 VA: 0xF0A04
	|-Dictionary.ValueCollection.Enumerator<object, bool>..ctor
	|
	|-RVA: 0xF0A34 Offset: 0xF0A34 VA: 0xF0A34
	|-Dictionary.ValueCollection.Enumerator<object, int>..ctor
	|
	|-RVA: 0xF0A64 Offset: 0xF0A64 VA: 0xF0A64
	|-Dictionary.ValueCollection.Enumerator<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF09DC Offset: 0xF09DC VA: 0xF09DC
	|-Dictionary.ValueCollection.Enumerator<int, object>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF0A0C Offset: 0xF0A0C VA: 0xF0A0C
	|-Dictionary.ValueCollection.Enumerator<object, bool>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF0A3C Offset: 0xF0A3C VA: 0xF0A3C
	|-Dictionary.ValueCollection.Enumerator<object, int>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF0A6C Offset: 0xF0A6C VA: 0xF0A6C
	|-Dictionary.ValueCollection.Enumerator<object, object>.System.Collections.IEnumerator.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private void System.Collections.IEnumerator.Reset() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF09E4 Offset: 0xF09E4 VA: 0xF09E4
	|-Dictionary.ValueCollection.Enumerator<int, object>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xF0A14 Offset: 0xF0A14 VA: 0xF0A14
	|-Dictionary.ValueCollection.Enumerator<object, bool>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xF0A44 Offset: 0xF0A44 VA: 0xF0A44
	|-Dictionary.ValueCollection.Enumerator<object, int>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xF0A74 Offset: 0xF0A74 VA: 0xF0A74
	|-Dictionary.ValueCollection.Enumerator<object, object>.System.Collections.IEnumerator.Reset
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF09EC Offset: 0xF09EC VA: 0xF09EC
	|-Dictionary.ValueCollection.Enumerator<int, object>.Dispose
	|-Dictionary.ValueCollection.Enumerator<int, PointerEventData>.Dispose
	|
	|-RVA: 0xF0A1C Offset: 0xF0A1C VA: 0xF0A1C
	|-Dictionary.ValueCollection.Enumerator<object, bool>.Dispose
	|
	|-RVA: 0xF0A4C Offset: 0xF0A4C VA: 0xF0A4C
	|-Dictionary.ValueCollection.Enumerator<object, int>.Dispose
	|
	|-RVA: 0xF0A7C Offset: 0xF0A7C VA: 0xF0A7C
	|-Dictionary.ValueCollection.Enumerator<object, object>.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF09F4 Offset: 0xF09F4 VA: 0xF09F4
	|-Dictionary.ValueCollection.Enumerator<int, object>.MoveNext
	|-Dictionary.ValueCollection.Enumerator<int, PointerEventData>.MoveNext
	|
	|-RVA: 0xF0A24 Offset: 0xF0A24 VA: 0xF0A24
	|-Dictionary.ValueCollection.Enumerator<object, bool>.MoveNext
	|
	|-RVA: 0xF0A54 Offset: 0xF0A54 VA: 0xF0A54
	|-Dictionary.ValueCollection.Enumerator<object, int>.MoveNext
	|
	|-RVA: 0xF0A84 Offset: 0xF0A84 VA: 0xF0A84
	|-Dictionary.ValueCollection.Enumerator<object, object>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public TValue get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF09FC Offset: 0xF09FC VA: 0xF09FC
	|-Dictionary.ValueCollection.Enumerator<int, PointerEventData>.get_Current
	|-Dictionary.ValueCollection.Enumerator<int, object>.get_Current
	|
	|-RVA: 0xF0A2C Offset: 0xF0A2C VA: 0xF0A2C
	|-Dictionary.ValueCollection.Enumerator<object, bool>.get_Current
	|
	|-RVA: 0xF0A5C Offset: 0xF0A5C VA: 0xF0A5C
	|-Dictionary.ValueCollection.Enumerator<object, int>.get_Current
	|
	|-RVA: 0xF0A8C Offset: 0xF0A8C VA: 0xF0A8C
	|-Dictionary.ValueCollection.Enumerator<object, object>.get_Current
	*/
}

// Namespace: 
private sealed class Dictionary.Transform<TKey, TValue, TRet> : MulticastDelegate // TypeDefIndex: 166
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x534DD8 Offset: 0x534DD8 VA: 0x534DD8
	|-Dictionary.Transform<int, object, DictionaryEntry>..ctor
	|
	|-RVA: 0x535148 Offset: 0x535148 VA: 0x535148
	|-Dictionary.Transform<int, object, KeyValuePair<int, object>>..ctor
	|
	|-RVA: 0x5354B8 Offset: 0x5354B8 VA: 0x5354B8
	|-Dictionary.Transform<int, object, object>..ctor
	|
	|-RVA: 0x5357C0 Offset: 0x5357C0 VA: 0x5357C0
	|-Dictionary.Transform<object, bool, bool>..ctor
	|
	|-RVA: 0x535C8C Offset: 0x535C8C VA: 0x535C8C
	|-Dictionary.Transform<object, bool, DictionaryEntry>..ctor
	|
	|-RVA: 0x5361D4 Offset: 0x5361D4 VA: 0x5361D4
	|-Dictionary.Transform<object, bool, KeyValuePair<object, bool>>..ctor
	|
	|-RVA: 0x53671C Offset: 0x53671C VA: 0x53671C
	|-Dictionary.Transform<object, int, DictionaryEntry>..ctor
	|
	|-RVA: 0x536C64 Offset: 0x536C64 VA: 0x536C64
	|-Dictionary.Transform<object, int, KeyValuePair<object, int>>..ctor
	|
	|-RVA: 0x5371AC Offset: 0x5371AC VA: 0x5371AC
	|-Dictionary.Transform<object, int, int>..ctor
	|
	|-RVA: 0x537678 Offset: 0x537678 VA: 0x537678
	|-Dictionary.Transform<object, object, DictionaryEntry>..ctor
	|
	|-RVA: 0x537B58 Offset: 0x537B58 VA: 0x537B58
	|-Dictionary.Transform<object, object, KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0x538038 Offset: 0x538038 VA: 0x538038
	|-Dictionary.Transform<object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual TRet Invoke(TKey key, TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x534DEC Offset: 0x534DEC VA: 0x534DEC
	|-Dictionary.Transform<int, object, DictionaryEntry>.Invoke
	|
	|-RVA: 0x53515C Offset: 0x53515C VA: 0x53515C
	|-Dictionary.Transform<int, object, KeyValuePair<int, object>>.Invoke
	|
	|-RVA: 0x5354CC Offset: 0x5354CC VA: 0x5354CC
	|-Dictionary.Transform<int, object, object>.Invoke
	|
	|-RVA: 0x5357D4 Offset: 0x5357D4 VA: 0x5357D4
	|-Dictionary.Transform<object, bool, bool>.Invoke
	|
	|-RVA: 0x535CA0 Offset: 0x535CA0 VA: 0x535CA0
	|-Dictionary.Transform<object, bool, DictionaryEntry>.Invoke
	|
	|-RVA: 0x5361E8 Offset: 0x5361E8 VA: 0x5361E8
	|-Dictionary.Transform<object, bool, KeyValuePair<object, bool>>.Invoke
	|
	|-RVA: 0x536730 Offset: 0x536730 VA: 0x536730
	|-Dictionary.Transform<object, int, DictionaryEntry>.Invoke
	|
	|-RVA: 0x536C78 Offset: 0x536C78 VA: 0x536C78
	|-Dictionary.Transform<object, int, KeyValuePair<object, int>>.Invoke
	|
	|-RVA: 0x5371C0 Offset: 0x5371C0 VA: 0x5371C0
	|-Dictionary.Transform<object, int, int>.Invoke
	|
	|-RVA: 0x53768C Offset: 0x53768C VA: 0x53768C
	|-Dictionary.Transform<object, object, DictionaryEntry>.Invoke
	|
	|-RVA: 0x537B6C Offset: 0x537B6C VA: 0x537B6C
	|-Dictionary.Transform<object, object, KeyValuePair<object, object>>.Invoke
	|
	|-RVA: 0x53804C Offset: 0x53804C VA: 0x53804C
	|-Dictionary.Transform<object, object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(TKey key, TValue value, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x535064 Offset: 0x535064 VA: 0x535064
	|-Dictionary.Transform<int, object, DictionaryEntry>.BeginInvoke
	|
	|-RVA: 0x5353D4 Offset: 0x5353D4 VA: 0x5353D4
	|-Dictionary.Transform<int, object, KeyValuePair<int, object>>.BeginInvoke
	|
	|-RVA: 0x535718 Offset: 0x535718 VA: 0x535718
	|-Dictionary.Transform<int, object, object>.BeginInvoke
	|
	|-RVA: 0x535BB4 Offset: 0x535BB4 VA: 0x535BB4
	|-Dictionary.Transform<object, bool, bool>.BeginInvoke
	|
	|-RVA: 0x5360EC Offset: 0x5360EC VA: 0x5360EC
	|-Dictionary.Transform<object, bool, DictionaryEntry>.BeginInvoke
	|
	|-RVA: 0x536634 Offset: 0x536634 VA: 0x536634
	|-Dictionary.Transform<object, bool, KeyValuePair<object, bool>>.BeginInvoke
	|
	|-RVA: 0x536B7C Offset: 0x536B7C VA: 0x536B7C
	|-Dictionary.Transform<object, int, DictionaryEntry>.BeginInvoke
	|
	|-RVA: 0x5370C4 Offset: 0x5370C4 VA: 0x5370C4
	|-Dictionary.Transform<object, int, KeyValuePair<object, int>>.BeginInvoke
	|
	|-RVA: 0x5375A0 Offset: 0x5375A0 VA: 0x5375A0
	|-Dictionary.Transform<object, int, int>.BeginInvoke
	|
	|-RVA: 0x537AD8 Offset: 0x537AD8 VA: 0x537AD8
	|-Dictionary.Transform<object, object, DictionaryEntry>.BeginInvoke
	|
	|-RVA: 0x537FB8 Offset: 0x537FB8 VA: 0x537FB8
	|-Dictionary.Transform<object, object, KeyValuePair<object, object>>.BeginInvoke
	|
	|-RVA: 0x53842C Offset: 0x53842C VA: 0x53842C
	|-Dictionary.Transform<object, object, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual TRet EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x535100 Offset: 0x535100 VA: 0x535100
	|-Dictionary.Transform<int, object, DictionaryEntry>.EndInvoke
	|
	|-RVA: 0x535470 Offset: 0x535470 VA: 0x535470
	|-Dictionary.Transform<int, object, KeyValuePair<int, object>>.EndInvoke
	|
	|-RVA: 0x5357B4 Offset: 0x5357B4 VA: 0x5357B4
	|-Dictionary.Transform<int, object, object>.EndInvoke
	|
	|-RVA: 0x535C54 Offset: 0x535C54 VA: 0x535C54
	|-Dictionary.Transform<object, bool, bool>.EndInvoke
	|
	|-RVA: 0x53618C Offset: 0x53618C VA: 0x53618C
	|-Dictionary.Transform<object, bool, DictionaryEntry>.EndInvoke
	|
	|-RVA: 0x5366D4 Offset: 0x5366D4 VA: 0x5366D4
	|-Dictionary.Transform<object, bool, KeyValuePair<object, bool>>.EndInvoke
	|
	|-RVA: 0x536C1C Offset: 0x536C1C VA: 0x536C1C
	|-Dictionary.Transform<object, int, DictionaryEntry>.EndInvoke
	|
	|-RVA: 0x537164 Offset: 0x537164 VA: 0x537164
	|-Dictionary.Transform<object, int, KeyValuePair<object, int>>.EndInvoke
	|
	|-RVA: 0x537640 Offset: 0x537640 VA: 0x537640
	|-Dictionary.Transform<object, int, int>.EndInvoke
	|
	|-RVA: 0x537B10 Offset: 0x537B10 VA: 0x537B10
	|-Dictionary.Transform<object, object, DictionaryEntry>.EndInvoke
	|
	|-RVA: 0x537FF0 Offset: 0x537FF0 VA: 0x537FF0
	|-Dictionary.Transform<object, object, KeyValuePair<object, object>>.EndInvoke
	|
	|-RVA: 0x538464 Offset: 0x538464 VA: 0x538464
	|-Dictionary.Transform<object, object, object>.EndInvoke
	*/
}

// Namespace: System.Collections.Generic
[Serializable]
public abstract class EqualityComparer<T> : IEqualityComparer<T>, IEqualityComparer // TypeDefIndex: 167
{
	// Fields
	private static readonly EqualityComparer<T> _default; // 0x0

	// Properties
	public static EqualityComparer<T> Default { get; }

	// Methods

	// RVA: -1 Offset: -1
	protected void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x54F114 Offset: 0x54F114 VA: 0x54F114
	|-EqualityComparer<bool>..ctor
	|
	|-RVA: 0x54F750 Offset: 0x54F750 VA: 0x54F750
	|-EqualityComparer<char>..ctor
	|
	|-RVA: 0x54FD84 Offset: 0x54FD84 VA: 0x54FD84
	|-EqualityComparer<DateTime>..ctor
	|
	|-RVA: 0x5503FC Offset: 0x5503FC VA: 0x5503FC
	|-EqualityComparer<DateTimeOffset>..ctor
	|
	|-RVA: 0x550AB8 Offset: 0x550AB8 VA: 0x550AB8
	|-EqualityComparer<Guid>..ctor
	|
	|-RVA: 0x551128 Offset: 0x551128 VA: 0x551128
	|-EqualityComparer<int>..ctor
	|
	|-RVA: 0x55175C Offset: 0x55175C VA: 0x55175C
	|-EqualityComparer<object>..ctor
	|
	|-RVA: 0x551EF0 Offset: 0x551EF0 VA: 0x551EF0
	|-EqualityComparer<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0x552550 Offset: 0x552550 VA: 0x552550
	|-EqualityComparer<CustomAttributeTypedArgument>..ctor
	|
	|-RVA: 0x552B98 Offset: 0x552B98 VA: 0x552B98
	|-EqualityComparer<float>..ctor
	|
	|-RVA: 0x5531D4 Offset: 0x5531D4 VA: 0x5531D4
	|-EqualityComparer<TimeSpan>..ctor
	|
	|-RVA: 0x55382C Offset: 0x55382C VA: 0x55382C
	|-EqualityComparer<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0x553E74 Offset: 0x553E74 VA: 0x553E74
	|-EqualityComparer<Color32>..ctor
	|
	|-RVA: 0x5544A8 Offset: 0x5544A8 VA: 0x5544A8
	|-EqualityComparer<RaycastResult>..ctor
	|
	|-RVA: 0x554D1C Offset: 0x554D1C VA: 0x554D1C
	|-EqualityComparer<TouchScreenKeyboardType>..ctor
	|
	|-RVA: 0x555350 Offset: 0x555350 VA: 0x555350
	|-EqualityComparer<AspectRatioFitter.AspectMode>..ctor
	|
	|-RVA: 0x555984 Offset: 0x555984 VA: 0x555984
	|-EqualityComparer<ColorBlock>..ctor
	|
	|-RVA: 0x556124 Offset: 0x556124 VA: 0x556124
	|-EqualityComparer<ContentSizeFitter.FitMode>..ctor
	|
	|-RVA: 0x556758 Offset: 0x556758 VA: 0x556758
	|-EqualityComparer<Image.FillMethod>..ctor
	|
	|-RVA: 0x556D8C Offset: 0x556D8C VA: 0x556D8C
	|-EqualityComparer<Image.Type>..ctor
	|
	|-RVA: 0x5573C0 Offset: 0x5573C0 VA: 0x5573C0
	|-EqualityComparer<InputField.CharacterValidation>..ctor
	|
	|-RVA: 0x5579F4 Offset: 0x5579F4 VA: 0x5579F4
	|-EqualityComparer<InputField.ContentType>..ctor
	|
	|-RVA: 0x558028 Offset: 0x558028 VA: 0x558028
	|-EqualityComparer<InputField.InputType>..ctor
	|
	|-RVA: 0x55865C Offset: 0x55865C VA: 0x55865C
	|-EqualityComparer<InputField.LineType>..ctor
	|
	|-RVA: 0x558C90 Offset: 0x558C90 VA: 0x558C90
	|-EqualityComparer<Navigation>..ctor
	|
	|-RVA: 0x55931C Offset: 0x55931C VA: 0x55931C
	|-EqualityComparer<Scrollbar.Direction>..ctor
	|
	|-RVA: 0x559950 Offset: 0x559950 VA: 0x559950
	|-EqualityComparer<Selectable.Transition>..ctor
	|
	|-RVA: 0x559F84 Offset: 0x559F84 VA: 0x559F84
	|-EqualityComparer<Slider.Direction>..ctor
	|
	|-RVA: 0x55A5B8 Offset: 0x55A5B8 VA: 0x55A5B8
	|-EqualityComparer<SpriteState>..ctor
	|
	|-RVA: 0x55AC18 Offset: 0x55AC18 VA: 0x55AC18
	|-EqualityComparer<UICharInfo>..ctor
	|
	|-RVA: 0x55B278 Offset: 0x55B278 VA: 0x55B278
	|-EqualityComparer<UILineInfo>..ctor
	|
	|-RVA: 0x55B8E8 Offset: 0x55B8E8 VA: 0x55B8E8
	|-EqualityComparer<UIVertex>..ctor
	|
	|-RVA: 0x55C098 Offset: 0x55C098 VA: 0x55C098
	|-EqualityComparer<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0x55C6F8 Offset: 0x55C6F8 VA: 0x55C6F8
	|-EqualityComparer<Vector2>..ctor
	|
	|-RVA: 0x4D7F68 Offset: 0x4D7F68 VA: 0x4D7F68
	|-EqualityComparer<Vector3>..ctor
	|
	|-RVA: 0x4D85C8 Offset: 0x4D85C8 VA: 0x4D85C8
	|-EqualityComparer<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x54F140 Offset: 0x54F140 VA: 0x54F140
	|-EqualityComparer<bool>..cctor
	|
	|-RVA: 0x54F77C Offset: 0x54F77C VA: 0x54F77C
	|-EqualityComparer<char>..cctor
	|
	|-RVA: 0x54FDB0 Offset: 0x54FDB0 VA: 0x54FDB0
	|-EqualityComparer<DateTime>..cctor
	|
	|-RVA: 0x550428 Offset: 0x550428 VA: 0x550428
	|-EqualityComparer<DateTimeOffset>..cctor
	|
	|-RVA: 0x550AE4 Offset: 0x550AE4 VA: 0x550AE4
	|-EqualityComparer<Guid>..cctor
	|
	|-RVA: 0x551154 Offset: 0x551154 VA: 0x551154
	|-EqualityComparer<int>..cctor
	|
	|-RVA: 0x551788 Offset: 0x551788 VA: 0x551788
	|-EqualityComparer<object>..cctor
	|
	|-RVA: 0x551F1C Offset: 0x551F1C VA: 0x551F1C
	|-EqualityComparer<CustomAttributeNamedArgument>..cctor
	|
	|-RVA: 0x55257C Offset: 0x55257C VA: 0x55257C
	|-EqualityComparer<CustomAttributeTypedArgument>..cctor
	|
	|-RVA: 0x552BC4 Offset: 0x552BC4 VA: 0x552BC4
	|-EqualityComparer<float>..cctor
	|
	|-RVA: 0x553200 Offset: 0x553200 VA: 0x553200
	|-EqualityComparer<TimeSpan>..cctor
	|
	|-RVA: 0x553858 Offset: 0x553858 VA: 0x553858
	|-EqualityComparer<BeforeRenderHelper.OrderBlock>..cctor
	|
	|-RVA: 0x553EA0 Offset: 0x553EA0 VA: 0x553EA0
	|-EqualityComparer<Color32>..cctor
	|
	|-RVA: 0x5544D4 Offset: 0x5544D4 VA: 0x5544D4
	|-EqualityComparer<RaycastResult>..cctor
	|
	|-RVA: 0x554D48 Offset: 0x554D48 VA: 0x554D48
	|-EqualityComparer<TouchScreenKeyboardType>..cctor
	|
	|-RVA: 0x55537C Offset: 0x55537C VA: 0x55537C
	|-EqualityComparer<AspectRatioFitter.AspectMode>..cctor
	|
	|-RVA: 0x5559B0 Offset: 0x5559B0 VA: 0x5559B0
	|-EqualityComparer<ColorBlock>..cctor
	|
	|-RVA: 0x556150 Offset: 0x556150 VA: 0x556150
	|-EqualityComparer<ContentSizeFitter.FitMode>..cctor
	|
	|-RVA: 0x556784 Offset: 0x556784 VA: 0x556784
	|-EqualityComparer<Image.FillMethod>..cctor
	|
	|-RVA: 0x556DB8 Offset: 0x556DB8 VA: 0x556DB8
	|-EqualityComparer<Image.Type>..cctor
	|
	|-RVA: 0x5573EC Offset: 0x5573EC VA: 0x5573EC
	|-EqualityComparer<InputField.CharacterValidation>..cctor
	|
	|-RVA: 0x557A20 Offset: 0x557A20 VA: 0x557A20
	|-EqualityComparer<InputField.ContentType>..cctor
	|
	|-RVA: 0x558054 Offset: 0x558054 VA: 0x558054
	|-EqualityComparer<InputField.InputType>..cctor
	|
	|-RVA: 0x558688 Offset: 0x558688 VA: 0x558688
	|-EqualityComparer<InputField.LineType>..cctor
	|
	|-RVA: 0x558CBC Offset: 0x558CBC VA: 0x558CBC
	|-EqualityComparer<Navigation>..cctor
	|
	|-RVA: 0x559348 Offset: 0x559348 VA: 0x559348
	|-EqualityComparer<Scrollbar.Direction>..cctor
	|
	|-RVA: 0x55997C Offset: 0x55997C VA: 0x55997C
	|-EqualityComparer<Selectable.Transition>..cctor
	|
	|-RVA: 0x559FB0 Offset: 0x559FB0 VA: 0x559FB0
	|-EqualityComparer<Slider.Direction>..cctor
	|
	|-RVA: 0x55A5E4 Offset: 0x55A5E4 VA: 0x55A5E4
	|-EqualityComparer<SpriteState>..cctor
	|
	|-RVA: 0x55AC44 Offset: 0x55AC44 VA: 0x55AC44
	|-EqualityComparer<UICharInfo>..cctor
	|
	|-RVA: 0x55B2A4 Offset: 0x55B2A4 VA: 0x55B2A4
	|-EqualityComparer<UILineInfo>..cctor
	|
	|-RVA: 0x55B914 Offset: 0x55B914 VA: 0x55B914
	|-EqualityComparer<UIVertex>..cctor
	|
	|-RVA: 0x55C0C4 Offset: 0x55C0C4 VA: 0x55C0C4
	|-EqualityComparer<UnitySynchronizationContext.WorkRequest>..cctor
	|
	|-RVA: 0x55C724 Offset: 0x55C724 VA: 0x55C724
	|-EqualityComparer<Vector2>..cctor
	|
	|-RVA: 0x4D7F94 Offset: 0x4D7F94 VA: 0x4D7F94
	|-EqualityComparer<Vector3>..cctor
	|
	|-RVA: 0x4D85F4 Offset: 0x4D85F4 VA: 0x4D85F4
	|-EqualityComparer<Vector4>..cctor
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private int System.Collections.IEqualityComparer.GetHashCode(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x54F530 Offset: 0x54F530 VA: 0x54F530
	|-EqualityComparer<bool>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x54FB6C Offset: 0x54FB6C VA: 0x54FB6C
	|-EqualityComparer<char>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x5501A0 Offset: 0x5501A0 VA: 0x5501A0
	|-EqualityComparer<DateTime>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x550818 Offset: 0x550818 VA: 0x550818
	|-EqualityComparer<DateTimeOffset>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x550ED4 Offset: 0x550ED4 VA: 0x550ED4
	|-EqualityComparer<Guid>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x551544 Offset: 0x551544 VA: 0x551544
	|-EqualityComparer<int>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x551B78 Offset: 0x551B78 VA: 0x551B78
	|-EqualityComparer<object>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x55230C Offset: 0x55230C VA: 0x55230C
	|-EqualityComparer<CustomAttributeNamedArgument>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x55296C Offset: 0x55296C VA: 0x55296C
	|-EqualityComparer<CustomAttributeTypedArgument>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x552FB4 Offset: 0x552FB4 VA: 0x552FB4
	|-EqualityComparer<float>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x5535F0 Offset: 0x5535F0 VA: 0x5535F0
	|-EqualityComparer<TimeSpan>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x553C48 Offset: 0x553C48 VA: 0x553C48
	|-EqualityComparer<BeforeRenderHelper.OrderBlock>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x554290 Offset: 0x554290 VA: 0x554290
	|-EqualityComparer<Color32>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x5548C4 Offset: 0x5548C4 VA: 0x5548C4
	|-EqualityComparer<RaycastResult>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x555138 Offset: 0x555138 VA: 0x555138
	|-EqualityComparer<TouchScreenKeyboardType>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x55576C Offset: 0x55576C VA: 0x55576C
	|-EqualityComparer<AspectRatioFitter.AspectMode>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x555DA0 Offset: 0x555DA0 VA: 0x555DA0
	|-EqualityComparer<ColorBlock>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x556540 Offset: 0x556540 VA: 0x556540
	|-EqualityComparer<ContentSizeFitter.FitMode>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x556B74 Offset: 0x556B74 VA: 0x556B74
	|-EqualityComparer<Image.FillMethod>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x5571A8 Offset: 0x5571A8 VA: 0x5571A8
	|-EqualityComparer<Image.Type>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x5577DC Offset: 0x5577DC VA: 0x5577DC
	|-EqualityComparer<InputField.CharacterValidation>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x557E10 Offset: 0x557E10 VA: 0x557E10
	|-EqualityComparer<InputField.ContentType>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x558444 Offset: 0x558444 VA: 0x558444
	|-EqualityComparer<InputField.InputType>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x558A78 Offset: 0x558A78 VA: 0x558A78
	|-EqualityComparer<InputField.LineType>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x5590AC Offset: 0x5590AC VA: 0x5590AC
	|-EqualityComparer<Navigation>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x559738 Offset: 0x559738 VA: 0x559738
	|-EqualityComparer<Scrollbar.Direction>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x559D6C Offset: 0x559D6C VA: 0x559D6C
	|-EqualityComparer<Selectable.Transition>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x55A3A0 Offset: 0x55A3A0 VA: 0x55A3A0
	|-EqualityComparer<Slider.Direction>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x55A9D4 Offset: 0x55A9D4 VA: 0x55A9D4
	|-EqualityComparer<SpriteState>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x55B034 Offset: 0x55B034 VA: 0x55B034
	|-EqualityComparer<UICharInfo>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x55B694 Offset: 0x55B694 VA: 0x55B694
	|-EqualityComparer<UILineInfo>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x55BD04 Offset: 0x55BD04 VA: 0x55BD04
	|-EqualityComparer<UIVertex>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x55C4B4 Offset: 0x55C4B4 VA: 0x55C4B4
	|-EqualityComparer<UnitySynchronizationContext.WorkRequest>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x55CB14 Offset: 0x55CB14 VA: 0x55CB14
	|-EqualityComparer<Vector2>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x4D8384 Offset: 0x4D8384 VA: 0x4D8384
	|-EqualityComparer<Vector3>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x4D89E4 Offset: 0x4D89E4 VA: 0x4D89E4
	|-EqualityComparer<Vector4>.System.Collections.IEqualityComparer.GetHashCode
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private bool System.Collections.IEqualityComparer.Equals(object x, object y) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x54F59C Offset: 0x54F59C VA: 0x54F59C
	|-EqualityComparer<bool>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x54FBD8 Offset: 0x54FBD8 VA: 0x54FBD8
	|-EqualityComparer<char>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x550220 Offset: 0x550220 VA: 0x550220
	|-EqualityComparer<DateTime>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x5508AC Offset: 0x5508AC VA: 0x5508AC
	|-EqualityComparer<DateTimeOffset>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x550F50 Offset: 0x550F50 VA: 0x550F50
	|-EqualityComparer<Guid>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x5515B0 Offset: 0x5515B0 VA: 0x5515B0
	|-EqualityComparer<int>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x551C60 Offset: 0x551C60 VA: 0x551C60
	|-EqualityComparer<object>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x552384 Offset: 0x552384 VA: 0x552384
	|-EqualityComparer<CustomAttributeNamedArgument>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x5529D8 Offset: 0x5529D8 VA: 0x5529D8
	|-EqualityComparer<CustomAttributeTypedArgument>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x553020 Offset: 0x553020 VA: 0x553020
	|-EqualityComparer<float>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x553668 Offset: 0x553668 VA: 0x553668
	|-EqualityComparer<TimeSpan>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x553CB4 Offset: 0x553CB4 VA: 0x553CB4
	|-EqualityComparer<BeforeRenderHelper.OrderBlock>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x5542FC Offset: 0x5542FC VA: 0x5542FC
	|-EqualityComparer<Color32>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x5549C8 Offset: 0x5549C8 VA: 0x5549C8
	|-EqualityComparer<RaycastResult>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x5551A4 Offset: 0x5551A4 VA: 0x5551A4
	|-EqualityComparer<TouchScreenKeyboardType>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x5557D8 Offset: 0x5557D8 VA: 0x5557D8
	|-EqualityComparer<AspectRatioFitter.AspectMode>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x555EB0 Offset: 0x555EB0 VA: 0x555EB0
	|-EqualityComparer<ColorBlock>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x5565AC Offset: 0x5565AC VA: 0x5565AC
	|-EqualityComparer<ContentSizeFitter.FitMode>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x556BE0 Offset: 0x556BE0 VA: 0x556BE0
	|-EqualityComparer<Image.FillMethod>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x557214 Offset: 0x557214 VA: 0x557214
	|-EqualityComparer<Image.Type>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x557848 Offset: 0x557848 VA: 0x557848
	|-EqualityComparer<InputField.CharacterValidation>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x557E7C Offset: 0x557E7C VA: 0x557E7C
	|-EqualityComparer<InputField.ContentType>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x5584B0 Offset: 0x5584B0 VA: 0x5584B0
	|-EqualityComparer<InputField.InputType>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x558AE4 Offset: 0x558AE4 VA: 0x558AE4
	|-EqualityComparer<InputField.LineType>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x55912C Offset: 0x55912C VA: 0x55912C
	|-EqualityComparer<Navigation>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x5597A4 Offset: 0x5597A4 VA: 0x5597A4
	|-EqualityComparer<Scrollbar.Direction>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x559DD8 Offset: 0x559DD8 VA: 0x559DD8
	|-EqualityComparer<Selectable.Transition>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x55A40C Offset: 0x55A40C VA: 0x55A40C
	|-EqualityComparer<Slider.Direction>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x55AA4C Offset: 0x55AA4C VA: 0x55AA4C
	|-EqualityComparer<SpriteState>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x55B0AC Offset: 0x55B0AC VA: 0x55B0AC
	|-EqualityComparer<UICharInfo>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x55B710 Offset: 0x55B710 VA: 0x55B710
	|-EqualityComparer<UILineInfo>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x55BE1C Offset: 0x55BE1C VA: 0x55BE1C
	|-EqualityComparer<UIVertex>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x55C52C Offset: 0x55C52C VA: 0x55C52C
	|-EqualityComparer<UnitySynchronizationContext.WorkRequest>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x55CB80 Offset: 0x55CB80 VA: 0x55CB80
	|-EqualityComparer<Vector2>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x4D83FC Offset: 0x4D83FC VA: 0x4D83FC
	|-EqualityComparer<Vector3>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0x4D8A60 Offset: 0x4D8A60 VA: 0x4D8A60
	|-EqualityComparer<Vector4>.System.Collections.IEqualityComparer.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public abstract int GetHashCode(T obj);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-EqualityComparer<object>.GetHashCode
	*/

	// RVA: -1 Offset: -1 Slot: 9
	public abstract bool Equals(T x, T y);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-EqualityComparer<object>.Equals
	*/

	// RVA: -1 Offset: -1
	public static EqualityComparer<T> get_Default() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x54F648 Offset: 0x54F648 VA: 0x54F648
	|-EqualityComparer<bool>.get_Default
	|
	|-RVA: 0x54FC7C Offset: 0x54FC7C VA: 0x54FC7C
	|-EqualityComparer<char>.get_Default
	|
	|-RVA: 0x5502F4 Offset: 0x5502F4 VA: 0x5502F4
	|-EqualityComparer<DateTime>.get_Default
	|
	|-RVA: 0x5509B0 Offset: 0x5509B0 VA: 0x5509B0
	|-EqualityComparer<DateTimeOffset>.get_Default
	|
	|-RVA: 0x551020 Offset: 0x551020 VA: 0x551020
	|-EqualityComparer<Guid>.get_Default
	|
	|-RVA: 0x551654 Offset: 0x551654 VA: 0x551654
	|-EqualityComparer<int>.get_Default
	|
	|-RVA: 0x551DE8 Offset: 0x551DE8 VA: 0x551DE8
	|-EqualityComparer<object>.get_Default
	|
	|-RVA: 0x552448 Offset: 0x552448 VA: 0x552448
	|-EqualityComparer<CustomAttributeNamedArgument>.get_Default
	|
	|-RVA: 0x552A90 Offset: 0x552A90 VA: 0x552A90
	|-EqualityComparer<CustomAttributeTypedArgument>.get_Default
	|
	|-RVA: 0x5530CC Offset: 0x5530CC VA: 0x5530CC
	|-EqualityComparer<float>.get_Default
	|
	|-RVA: 0x553724 Offset: 0x553724 VA: 0x553724
	|-EqualityComparer<TimeSpan>.get_Default
	|
	|-RVA: 0x553D6C Offset: 0x553D6C VA: 0x553D6C
	|-EqualityComparer<BeforeRenderHelper.OrderBlock>.get_Default
	|
	|-RVA: 0x5543A0 Offset: 0x5543A0 VA: 0x5543A0
	|-EqualityComparer<Color32>.get_Default
	|
	|-RVA: 0x554C14 Offset: 0x554C14 VA: 0x554C14
	|-EqualityComparer<RaycastResult>.get_Default
	|
	|-RVA: 0x555248 Offset: 0x555248 VA: 0x555248
	|-EqualityComparer<TouchScreenKeyboardType>.get_Default
	|
	|-RVA: 0x55587C Offset: 0x55587C VA: 0x55587C
	|-EqualityComparer<AspectRatioFitter.AspectMode>.get_Default
	|
	|-RVA: 0x55601C Offset: 0x55601C VA: 0x55601C
	|-EqualityComparer<ColorBlock>.get_Default
	|
	|-RVA: 0x556650 Offset: 0x556650 VA: 0x556650
	|-EqualityComparer<ContentSizeFitter.FitMode>.get_Default
	|
	|-RVA: 0x556C84 Offset: 0x556C84 VA: 0x556C84
	|-EqualityComparer<Image.FillMethod>.get_Default
	|
	|-RVA: 0x5572B8 Offset: 0x5572B8 VA: 0x5572B8
	|-EqualityComparer<Image.Type>.get_Default
	|
	|-RVA: 0x5578EC Offset: 0x5578EC VA: 0x5578EC
	|-EqualityComparer<InputField.CharacterValidation>.get_Default
	|
	|-RVA: 0x557F20 Offset: 0x557F20 VA: 0x557F20
	|-EqualityComparer<InputField.ContentType>.get_Default
	|
	|-RVA: 0x558554 Offset: 0x558554 VA: 0x558554
	|-EqualityComparer<InputField.InputType>.get_Default
	|
	|-RVA: 0x558B88 Offset: 0x558B88 VA: 0x558B88
	|-EqualityComparer<InputField.LineType>.get_Default
	|
	|-RVA: 0x559214 Offset: 0x559214 VA: 0x559214
	|-EqualityComparer<Navigation>.get_Default
	|
	|-RVA: 0x559848 Offset: 0x559848 VA: 0x559848
	|-EqualityComparer<Scrollbar.Direction>.get_Default
	|
	|-RVA: 0x559E7C Offset: 0x559E7C VA: 0x559E7C
	|-EqualityComparer<Selectable.Transition>.get_Default
	|
	|-RVA: 0x55A4B0 Offset: 0x55A4B0 VA: 0x55A4B0
	|-EqualityComparer<Slider.Direction>.get_Default
	|
	|-RVA: 0x55AB10 Offset: 0x55AB10 VA: 0x55AB10
	|-EqualityComparer<SpriteState>.get_Default
	|
	|-RVA: 0x55B170 Offset: 0x55B170 VA: 0x55B170
	|-EqualityComparer<UICharInfo>.get_Default
	|
	|-RVA: 0x55B7E0 Offset: 0x55B7E0 VA: 0x55B7E0
	|-EqualityComparer<UILineInfo>.get_Default
	|
	|-RVA: 0x55BF90 Offset: 0x55BF90 VA: 0x55BF90
	|-EqualityComparer<UIVertex>.get_Default
	|
	|-RVA: 0x55C5F0 Offset: 0x55C5F0 VA: 0x55C5F0
	|-EqualityComparer<UnitySynchronizationContext.WorkRequest>.get_Default
	|
	|-RVA: 0x55CC38 Offset: 0x55CC38 VA: 0x55CC38
	|-EqualityComparer<Vector2>.get_Default
	|
	|-RVA: 0x4D84C0 Offset: 0x4D84C0 VA: 0x4D84C0
	|-EqualityComparer<Vector3>.get_Default
	|
	|-RVA: 0x4D8B30 Offset: 0x4D8B30 VA: 0x4D8B30
	|-EqualityComparer<Vector4>.get_Default
	*/
}

// Namespace: 
[Serializable]
private sealed class EqualityComparer.DefaultComparer<T> : EqualityComparer<T> // TypeDefIndex: 168
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x54B4D8 Offset: 0x54B4D8 VA: 0x54B4D8
	|-EqualityComparer.DefaultComparer<bool>..ctor
	|
	|-RVA: 0x54B610 Offset: 0x54B610 VA: 0x54B610
	|-EqualityComparer.DefaultComparer<char>..ctor
	|
	|-RVA: 0x54B748 Offset: 0x54B748 VA: 0x54B748
	|-EqualityComparer.DefaultComparer<DateTime>..ctor
	|
	|-RVA: 0x54B8C0 Offset: 0x54B8C0 VA: 0x54B8C0
	|-EqualityComparer.DefaultComparer<DateTimeOffset>..ctor
	|
	|-RVA: 0x54BA6C Offset: 0x54BA6C VA: 0x54BA6C
	|-EqualityComparer.DefaultComparer<Guid>..ctor
	|
	|-RVA: 0x54BBCC Offset: 0x54BBCC VA: 0x54BBCC
	|-EqualityComparer.DefaultComparer<int>..ctor
	|
	|-RVA: 0x54BD04 Offset: 0x54BD04 VA: 0x54BD04
	|-EqualityComparer.DefaultComparer<object>..ctor
	|
	|-RVA: 0x54BE18 Offset: 0x54BE18 VA: 0x54BE18
	|-EqualityComparer.DefaultComparer<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0x54BF68 Offset: 0x54BF68 VA: 0x54BF68
	|-EqualityComparer.DefaultComparer<CustomAttributeTypedArgument>..ctor
	|
	|-RVA: 0x54C0A8 Offset: 0x54C0A8 VA: 0x54C0A8
	|-EqualityComparer.DefaultComparer<float>..ctor
	|
	|-RVA: 0x54C1E0 Offset: 0x54C1E0 VA: 0x54C1E0
	|-EqualityComparer.DefaultComparer<TimeSpan>..ctor
	|
	|-RVA: 0x54C324 Offset: 0x54C324 VA: 0x54C324
	|-EqualityComparer.DefaultComparer<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0x54C534 Offset: 0x54C534 VA: 0x54C534
	|-EqualityComparer.DefaultComparer<Color32>..ctor
	|
	|-RVA: 0x54C744 Offset: 0x54C744 VA: 0x54C744
	|-EqualityComparer.DefaultComparer<RaycastResult>..ctor
	|
	|-RVA: 0x54CAA4 Offset: 0x54CAA4 VA: 0x54CAA4
	|-EqualityComparer.DefaultComparer<TouchScreenKeyboardType>..ctor
	|
	|-RVA: 0x54CC4C Offset: 0x54CC4C VA: 0x54CC4C
	|-EqualityComparer.DefaultComparer<AspectRatioFitter.AspectMode>..ctor
	|
	|-RVA: 0x54CDF4 Offset: 0x54CDF4 VA: 0x54CDF4
	|-EqualityComparer.DefaultComparer<ColorBlock>..ctor
	|
	|-RVA: 0x54CF60 Offset: 0x54CF60 VA: 0x54CF60
	|-EqualityComparer.DefaultComparer<ContentSizeFitter.FitMode>..ctor
	|
	|-RVA: 0x54D108 Offset: 0x54D108 VA: 0x54D108
	|-EqualityComparer.DefaultComparer<Image.FillMethod>..ctor
	|
	|-RVA: 0x54D2B0 Offset: 0x54D2B0 VA: 0x54D2B0
	|-EqualityComparer.DefaultComparer<Image.Type>..ctor
	|
	|-RVA: 0x54D458 Offset: 0x54D458 VA: 0x54D458
	|-EqualityComparer.DefaultComparer<InputField.CharacterValidation>..ctor
	|
	|-RVA: 0x54D600 Offset: 0x54D600 VA: 0x54D600
	|-EqualityComparer.DefaultComparer<InputField.ContentType>..ctor
	|
	|-RVA: 0x54D7A8 Offset: 0x54D7A8 VA: 0x54D7A8
	|-EqualityComparer.DefaultComparer<InputField.InputType>..ctor
	|
	|-RVA: 0x54D950 Offset: 0x54D950 VA: 0x54D950
	|-EqualityComparer.DefaultComparer<InputField.LineType>..ctor
	|
	|-RVA: 0x54DAF8 Offset: 0x54DAF8 VA: 0x54DAF8
	|-EqualityComparer.DefaultComparer<Navigation>..ctor
	|
	|-RVA: 0x54DD40 Offset: 0x54DD40 VA: 0x54DD40
	|-EqualityComparer.DefaultComparer<Scrollbar.Direction>..ctor
	|
	|-RVA: 0x54DEE8 Offset: 0x54DEE8 VA: 0x54DEE8
	|-EqualityComparer.DefaultComparer<Selectable.Transition>..ctor
	|
	|-RVA: 0x54E090 Offset: 0x54E090 VA: 0x54E090
	|-EqualityComparer.DefaultComparer<Slider.Direction>..ctor
	|
	|-RVA: 0x54E238 Offset: 0x54E238 VA: 0x54E238
	|-EqualityComparer.DefaultComparer<SpriteState>..ctor
	|
	|-RVA: 0x54E460 Offset: 0x54E460 VA: 0x54E460
	|-EqualityComparer.DefaultComparer<UICharInfo>..ctor
	|
	|-RVA: 0x54E688 Offset: 0x54E688 VA: 0x54E688
	|-EqualityComparer.DefaultComparer<UILineInfo>..ctor
	|
	|-RVA: 0x54E8B4 Offset: 0x54E8B4 VA: 0x54E8B4
	|-EqualityComparer.DefaultComparer<UIVertex>..ctor
	|
	|-RVA: 0x54EAFC Offset: 0x54EAFC VA: 0x54EAFC
	|-EqualityComparer.DefaultComparer<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0x54ED24 Offset: 0x54ED24 VA: 0x54ED24
	|-EqualityComparer.DefaultComparer<Vector2>..ctor
	|
	|-RVA: 0x54EE64 Offset: 0x54EE64 VA: 0x54EE64
	|-EqualityComparer.DefaultComparer<Vector3>..ctor
	|
	|-RVA: 0x54EFB4 Offset: 0x54EFB4 VA: 0x54EFB4
	|-EqualityComparer.DefaultComparer<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public override int GetHashCode(T obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x54B594 Offset: 0x54B594 VA: 0x54B594
	|-EqualityComparer.DefaultComparer<bool>.GetHashCode
	|
	|-RVA: 0x54B6CC Offset: 0x54B6CC VA: 0x54B6CC
	|-EqualityComparer.DefaultComparer<char>.GetHashCode
	|
	|-RVA: 0x54B804 Offset: 0x54B804 VA: 0x54B804
	|-EqualityComparer.DefaultComparer<DateTime>.GetHashCode
	|
	|-RVA: 0x54B97C Offset: 0x54B97C VA: 0x54B97C
	|-EqualityComparer.DefaultComparer<DateTimeOffset>.GetHashCode
	|
	|-RVA: 0x54BB28 Offset: 0x54BB28 VA: 0x54BB28
	|-EqualityComparer.DefaultComparer<Guid>.GetHashCode
	|
	|-RVA: 0x54BC88 Offset: 0x54BC88 VA: 0x54BC88
	|-EqualityComparer.DefaultComparer<int>.GetHashCode
	|
	|-RVA: 0x54BDC0 Offset: 0x54BDC0 VA: 0x54BDC0
	|-EqualityComparer.DefaultComparer<object>.GetHashCode
	|
	|-RVA: 0x54BED4 Offset: 0x54BED4 VA: 0x54BED4
	|-EqualityComparer.DefaultComparer<CustomAttributeNamedArgument>.GetHashCode
	|
	|-RVA: 0x54C024 Offset: 0x54C024 VA: 0x54C024
	|-EqualityComparer.DefaultComparer<CustomAttributeTypedArgument>.GetHashCode
	|
	|-RVA: 0x54C164 Offset: 0x54C164 VA: 0x54C164
	|-EqualityComparer.DefaultComparer<float>.GetHashCode
	|
	|-RVA: 0x54C29C Offset: 0x54C29C VA: 0x54C29C
	|-EqualityComparer.DefaultComparer<TimeSpan>.GetHashCode
	|
	|-RVA: 0x54C3E0 Offset: 0x54C3E0 VA: 0x54C3E0
	|-EqualityComparer.DefaultComparer<BeforeRenderHelper.OrderBlock>.GetHashCode
	|
	|-RVA: 0x54C5F0 Offset: 0x54C5F0 VA: 0x54C5F0
	|-EqualityComparer.DefaultComparer<Color32>.GetHashCode
	|
	|-RVA: 0x54C800 Offset: 0x54C800 VA: 0x54C800
	|-EqualityComparer.DefaultComparer<RaycastResult>.GetHashCode
	|
	|-RVA: 0x54CB60 Offset: 0x54CB60 VA: 0x54CB60
	|-EqualityComparer.DefaultComparer<TouchScreenKeyboardType>.GetHashCode
	|
	|-RVA: 0x54CD08 Offset: 0x54CD08 VA: 0x54CD08
	|-EqualityComparer.DefaultComparer<AspectRatioFitter.AspectMode>.GetHashCode
	|
	|-RVA: 0x54CEB0 Offset: 0x54CEB0 VA: 0x54CEB0
	|-EqualityComparer.DefaultComparer<ColorBlock>.GetHashCode
	|
	|-RVA: 0x54D01C Offset: 0x54D01C VA: 0x54D01C
	|-EqualityComparer.DefaultComparer<ContentSizeFitter.FitMode>.GetHashCode
	|
	|-RVA: 0x54D1C4 Offset: 0x54D1C4 VA: 0x54D1C4
	|-EqualityComparer.DefaultComparer<Image.FillMethod>.GetHashCode
	|
	|-RVA: 0x54D36C Offset: 0x54D36C VA: 0x54D36C
	|-EqualityComparer.DefaultComparer<Image.Type>.GetHashCode
	|
	|-RVA: 0x54D514 Offset: 0x54D514 VA: 0x54D514
	|-EqualityComparer.DefaultComparer<InputField.CharacterValidation>.GetHashCode
	|
	|-RVA: 0x54D6BC Offset: 0x54D6BC VA: 0x54D6BC
	|-EqualityComparer.DefaultComparer<InputField.ContentType>.GetHashCode
	|
	|-RVA: 0x54D864 Offset: 0x54D864 VA: 0x54D864
	|-EqualityComparer.DefaultComparer<InputField.InputType>.GetHashCode
	|
	|-RVA: 0x54DA0C Offset: 0x54DA0C VA: 0x54DA0C
	|-EqualityComparer.DefaultComparer<InputField.LineType>.GetHashCode
	|
	|-RVA: 0x54DBB4 Offset: 0x54DBB4 VA: 0x54DBB4
	|-EqualityComparer.DefaultComparer<Navigation>.GetHashCode
	|
	|-RVA: 0x54DDFC Offset: 0x54DDFC VA: 0x54DDFC
	|-EqualityComparer.DefaultComparer<Scrollbar.Direction>.GetHashCode
	|
	|-RVA: 0x54DFA4 Offset: 0x54DFA4 VA: 0x54DFA4
	|-EqualityComparer.DefaultComparer<Selectable.Transition>.GetHashCode
	|
	|-RVA: 0x54E14C Offset: 0x54E14C VA: 0x54E14C
	|-EqualityComparer.DefaultComparer<Slider.Direction>.GetHashCode
	|
	|-RVA: 0x54E2F4 Offset: 0x54E2F4 VA: 0x54E2F4
	|-EqualityComparer.DefaultComparer<SpriteState>.GetHashCode
	|
	|-RVA: 0x54E51C Offset: 0x54E51C VA: 0x54E51C
	|-EqualityComparer.DefaultComparer<UICharInfo>.GetHashCode
	|
	|-RVA: 0x54E744 Offset: 0x54E744 VA: 0x54E744
	|-EqualityComparer.DefaultComparer<UILineInfo>.GetHashCode
	|
	|-RVA: 0x54E970 Offset: 0x54E970 VA: 0x54E970
	|-EqualityComparer.DefaultComparer<UIVertex>.GetHashCode
	|
	|-RVA: 0x54EBB8 Offset: 0x54EBB8 VA: 0x54EBB8
	|-EqualityComparer.DefaultComparer<UnitySynchronizationContext.WorkRequest>.GetHashCode
	|
	|-RVA: 0x54EDE0 Offset: 0x54EDE0 VA: 0x54EDE0
	|-EqualityComparer.DefaultComparer<Vector2>.GetHashCode
	|
	|-RVA: 0x54EF20 Offset: 0x54EF20 VA: 0x54EF20
	|-EqualityComparer.DefaultComparer<Vector3>.GetHashCode
	|
	|-RVA: 0x54F070 Offset: 0x54F070 VA: 0x54F070
	|-EqualityComparer.DefaultComparer<Vector4>.GetHashCode
	*/

	// RVA: -1 Offset: -1 Slot: 9
	public override bool Equals(T x, T y) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x54B5B8 Offset: 0x54B5B8 VA: 0x54B5B8
	|-EqualityComparer.DefaultComparer<bool>.Equals
	|
	|-RVA: 0x54B6F0 Offset: 0x54B6F0 VA: 0x54B6F0
	|-EqualityComparer.DefaultComparer<char>.Equals
	|
	|-RVA: 0x54B838 Offset: 0x54B838 VA: 0x54B838
	|-EqualityComparer.DefaultComparer<DateTime>.Equals
	|
	|-RVA: 0x54B9C0 Offset: 0x54B9C0 VA: 0x54B9C0
	|-EqualityComparer.DefaultComparer<DateTimeOffset>.Equals
	|
	|-RVA: 0x54BB54 Offset: 0x54BB54 VA: 0x54BB54
	|-EqualityComparer.DefaultComparer<Guid>.Equals
	|
	|-RVA: 0x54BCAC Offset: 0x54BCAC VA: 0x54BCAC
	|-EqualityComparer.DefaultComparer<int>.Equals
	|
	|-RVA: 0x54BDE4 Offset: 0x54BDE4 VA: 0x54BDE4
	|-EqualityComparer.DefaultComparer<object>.Equals
	|
	|-RVA: 0x54BEF8 Offset: 0x54BEF8 VA: 0x54BEF8
	|-EqualityComparer.DefaultComparer<CustomAttributeNamedArgument>.Equals
	|
	|-RVA: 0x54C044 Offset: 0x54C044 VA: 0x54C044
	|-EqualityComparer.DefaultComparer<CustomAttributeTypedArgument>.Equals
	|
	|-RVA: 0x54C188 Offset: 0x54C188 VA: 0x54C188
	|-EqualityComparer.DefaultComparer<float>.Equals
	|
	|-RVA: 0x54C2BC Offset: 0x54C2BC VA: 0x54C2BC
	|-EqualityComparer.DefaultComparer<TimeSpan>.Equals
	|
	|-RVA: 0x54C468 Offset: 0x54C468 VA: 0x54C468
	|-EqualityComparer.DefaultComparer<BeforeRenderHelper.OrderBlock>.Equals
	|
	|-RVA: 0x54C67C Offset: 0x54C67C VA: 0x54C67C
	|-EqualityComparer.DefaultComparer<Color32>.Equals
	|
	|-RVA: 0x54C8F0 Offset: 0x54C8F0 VA: 0x54C8F0
	|-EqualityComparer.DefaultComparer<RaycastResult>.Equals
	|
	|-RVA: 0x54CB84 Offset: 0x54CB84 VA: 0x54CB84
	|-EqualityComparer.DefaultComparer<TouchScreenKeyboardType>.Equals
	|
	|-RVA: 0x54CD2C Offset: 0x54CD2C VA: 0x54CD2C
	|-EqualityComparer.DefaultComparer<AspectRatioFitter.AspectMode>.Equals
	|
	|-RVA: 0x54CEE4 Offset: 0x54CEE4 VA: 0x54CEE4
	|-EqualityComparer.DefaultComparer<ColorBlock>.Equals
	|
	|-RVA: 0x54D040 Offset: 0x54D040 VA: 0x54D040
	|-EqualityComparer.DefaultComparer<ContentSizeFitter.FitMode>.Equals
	|
	|-RVA: 0x54D1E8 Offset: 0x54D1E8 VA: 0x54D1E8
	|-EqualityComparer.DefaultComparer<Image.FillMethod>.Equals
	|
	|-RVA: 0x54D390 Offset: 0x54D390 VA: 0x54D390
	|-EqualityComparer.DefaultComparer<Image.Type>.Equals
	|
	|-RVA: 0x54D538 Offset: 0x54D538 VA: 0x54D538
	|-EqualityComparer.DefaultComparer<InputField.CharacterValidation>.Equals
	|
	|-RVA: 0x54D6E0 Offset: 0x54D6E0 VA: 0x54D6E0
	|-EqualityComparer.DefaultComparer<InputField.ContentType>.Equals
	|
	|-RVA: 0x54D888 Offset: 0x54D888 VA: 0x54D888
	|-EqualityComparer.DefaultComparer<InputField.InputType>.Equals
	|
	|-RVA: 0x54DA30 Offset: 0x54DA30 VA: 0x54DA30
	|-EqualityComparer.DefaultComparer<InputField.LineType>.Equals
	|
	|-RVA: 0x54DC4C Offset: 0x54DC4C VA: 0x54DC4C
	|-EqualityComparer.DefaultComparer<Navigation>.Equals
	|
	|-RVA: 0x54DE20 Offset: 0x54DE20 VA: 0x54DE20
	|-EqualityComparer.DefaultComparer<Scrollbar.Direction>.Equals
	|
	|-RVA: 0x54DFC8 Offset: 0x54DFC8 VA: 0x54DFC8
	|-EqualityComparer.DefaultComparer<Selectable.Transition>.Equals
	|
	|-RVA: 0x54E170 Offset: 0x54E170 VA: 0x54E170
	|-EqualityComparer.DefaultComparer<Slider.Direction>.Equals
	|
	|-RVA: 0x54E384 Offset: 0x54E384 VA: 0x54E384
	|-EqualityComparer.DefaultComparer<SpriteState>.Equals
	|
	|-RVA: 0x54E5AC Offset: 0x54E5AC VA: 0x54E5AC
	|-EqualityComparer.DefaultComparer<UICharInfo>.Equals
	|
	|-RVA: 0x54E7D8 Offset: 0x54E7D8 VA: 0x54E7D8
	|-EqualityComparer.DefaultComparer<UILineInfo>.Equals
	|
	|-RVA: 0x54EA14 Offset: 0x54EA14 VA: 0x54EA14
	|-EqualityComparer.DefaultComparer<UIVertex>.Equals
	|
	|-RVA: 0x54EC48 Offset: 0x54EC48 VA: 0x54EC48
	|-EqualityComparer.DefaultComparer<UnitySynchronizationContext.WorkRequest>.Equals
	|
	|-RVA: 0x54EE00 Offset: 0x54EE00 VA: 0x54EE00
	|-EqualityComparer.DefaultComparer<Vector2>.Equals
	|
	|-RVA: 0x54EF44 Offset: 0x54EF44 VA: 0x54EF44
	|-EqualityComparer.DefaultComparer<Vector3>.Equals
	|
	|-RVA: 0x54F09C Offset: 0x54F09C VA: 0x54F09C
	|-EqualityComparer.DefaultComparer<Vector4>.Equals
	*/
}

// Namespace: System.Collections.Generic
[Serializable]
internal sealed class GenericEqualityComparer<T> : EqualityComparer<T> // TypeDefIndex: 169
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4D92EC Offset: 0x4D92EC VA: 0x4D92EC
	|-GenericEqualityComparer<bool>..ctor
	|
	|-RVA: 0x4D93F4 Offset: 0x4D93F4 VA: 0x4D93F4
	|-GenericEqualityComparer<char>..ctor
	|
	|-RVA: 0x4D94FC Offset: 0x4D94FC VA: 0x4D94FC
	|-GenericEqualityComparer<DateTime>..ctor
	|
	|-RVA: 0x4D9648 Offset: 0x4D9648 VA: 0x4D9648
	|-GenericEqualityComparer<DateTimeOffset>..ctor
	|
	|-RVA: 0x4D97B8 Offset: 0x4D97B8 VA: 0x4D97B8
	|-GenericEqualityComparer<Guid>..ctor
	|
	|-RVA: 0x4D98F0 Offset: 0x4D98F0 VA: 0x4D98F0
	|-GenericEqualityComparer<int>..ctor
	|
	|-RVA: 0x4D99F8 Offset: 0x4D99F8 VA: 0x4D99F8
	|-GenericEqualityComparer<object>..ctor
	|
	|-RVA: 0x4D9B94 Offset: 0x4D9B94 VA: 0x4D9B94
	|-GenericEqualityComparer<float>..ctor
	|
	|-RVA: 0x4D9C9C Offset: 0x4D9C9C VA: 0x4D9C9C
	|-GenericEqualityComparer<TimeSpan>..ctor
	|
	|-RVA: 0x4D9DB4 Offset: 0x4D9DB4 VA: 0x4D9DB4
	|-GenericEqualityComparer<ColorBlock>..ctor
	|
	|-RVA: 0x4D9F68 Offset: 0x4D9F68 VA: 0x4D9F68
	|-GenericEqualityComparer<Navigation>..ctor
	|
	|-RVA: 0x4DA120 Offset: 0x4DA120 VA: 0x4DA120
	|-GenericEqualityComparer<SpriteState>..ctor
	|
	|-RVA: 0x4DA2AC Offset: 0x4DA2AC VA: 0x4DA2AC
	|-GenericEqualityComparer<Vector2>..ctor
	|
	|-RVA: 0x4DA3B8 Offset: 0x4DA3B8 VA: 0x4DA3B8
	|-GenericEqualityComparer<Vector3>..ctor
	|
	|-RVA: 0x4DA4D8 Offset: 0x4DA4D8 VA: 0x4DA4D8
	|-GenericEqualityComparer<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public override int GetHashCode(T obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4D93A8 Offset: 0x4D93A8 VA: 0x4D93A8
	|-GenericEqualityComparer<bool>.GetHashCode
	|
	|-RVA: 0x4D94B0 Offset: 0x4D94B0 VA: 0x4D94B0
	|-GenericEqualityComparer<char>.GetHashCode
	|
	|-RVA: 0x4D95B8 Offset: 0x4D95B8 VA: 0x4D95B8
	|-GenericEqualityComparer<DateTime>.GetHashCode
	|
	|-RVA: 0x4D9704 Offset: 0x4D9704 VA: 0x4D9704
	|-GenericEqualityComparer<DateTimeOffset>.GetHashCode
	|
	|-RVA: 0x4D9874 Offset: 0x4D9874 VA: 0x4D9874
	|-GenericEqualityComparer<Guid>.GetHashCode
	|
	|-RVA: 0x4D99AC Offset: 0x4D99AC VA: 0x4D99AC
	|-GenericEqualityComparer<int>.GetHashCode
	|
	|-RVA: 0x4D9AB4 Offset: 0x4D9AB4 VA: 0x4D9AB4
	|-GenericEqualityComparer<object>.GetHashCode
	|
	|-RVA: 0x4D9C50 Offset: 0x4D9C50 VA: 0x4D9C50
	|-GenericEqualityComparer<float>.GetHashCode
	|
	|-RVA: 0x4D9D58 Offset: 0x4D9D58 VA: 0x4D9D58
	|-GenericEqualityComparer<TimeSpan>.GetHashCode
	|
	|-RVA: 0x4D9E70 Offset: 0x4D9E70 VA: 0x4D9E70
	|-GenericEqualityComparer<ColorBlock>.GetHashCode
	|
	|-RVA: 0x4DA024 Offset: 0x4DA024 VA: 0x4DA024
	|-GenericEqualityComparer<Navigation>.GetHashCode
	|
	|-RVA: 0x4DA1DC Offset: 0x4DA1DC VA: 0x4DA1DC
	|-GenericEqualityComparer<SpriteState>.GetHashCode
	|
	|-RVA: 0x4DA368 Offset: 0x4DA368 VA: 0x4DA368
	|-GenericEqualityComparer<Vector2>.GetHashCode
	|
	|-RVA: 0x4DA474 Offset: 0x4DA474 VA: 0x4DA474
	|-GenericEqualityComparer<Vector3>.GetHashCode
	|
	|-RVA: 0x4DA594 Offset: 0x4DA594 VA: 0x4DA594
	|-GenericEqualityComparer<Vector4>.GetHashCode
	*/

	// RVA: -1 Offset: -1 Slot: 9
	public override bool Equals(T x, T y) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4D93CC Offset: 0x4D93CC VA: 0x4D93CC
	|-GenericEqualityComparer<bool>.Equals
	|
	|-RVA: 0x4D94D4 Offset: 0x4D94D4 VA: 0x4D94D4
	|-GenericEqualityComparer<char>.Equals
	|
	|-RVA: 0x4D95EC Offset: 0x4D95EC VA: 0x4D95EC
	|-GenericEqualityComparer<DateTime>.Equals
	|
	|-RVA: 0x4D9748 Offset: 0x4D9748 VA: 0x4D9748
	|-GenericEqualityComparer<DateTimeOffset>.Equals
	|
	|-RVA: 0x4D98A0 Offset: 0x4D98A0 VA: 0x4D98A0
	|-GenericEqualityComparer<Guid>.Equals
	|
	|-RVA: 0x4D99D0 Offset: 0x4D99D0 VA: 0x4D99D0
	|-GenericEqualityComparer<int>.Equals
	|
	|-RVA: 0x4D9AD8 Offset: 0x4D9AD8 VA: 0x4D9AD8
	|-GenericEqualityComparer<object>.Equals
	|
	|-RVA: 0x4D9C74 Offset: 0x4D9C74 VA: 0x4D9C74
	|-GenericEqualityComparer<float>.Equals
	|
	|-RVA: 0x4D9D78 Offset: 0x4D9D78 VA: 0x4D9D78
	|-GenericEqualityComparer<TimeSpan>.Equals
	|
	|-RVA: 0x4D9EA4 Offset: 0x4D9EA4 VA: 0x4D9EA4
	|-GenericEqualityComparer<ColorBlock>.Equals
	|
	|-RVA: 0x4DA0BC Offset: 0x4DA0BC VA: 0x4DA0BC
	|-GenericEqualityComparer<Navigation>.Equals
	|
	|-RVA: 0x4DA26C Offset: 0x4DA26C VA: 0x4DA26C
	|-GenericEqualityComparer<SpriteState>.Equals
	|
	|-RVA: 0x4DA388 Offset: 0x4DA388 VA: 0x4DA388
	|-GenericEqualityComparer<Vector2>.Equals
	|
	|-RVA: 0x4DA498 Offset: 0x4DA498 VA: 0x4DA498
	|-GenericEqualityComparer<Vector3>.Equals
	|
	|-RVA: 0x4DA5C0 Offset: 0x4DA5C0 VA: 0x4DA5C0
	|-GenericEqualityComparer<Vector4>.Equals
	*/
}

// Namespace: System.Collections.Generic
public interface IComparer<T> // TypeDefIndex: 170
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int Compare(T x, T y);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IComparer<object>.Compare
	*/
}

// Namespace: System.Collections.Generic
[DefaultMemberAttribute] // RVA: 0x94614 Offset: 0x94614 VA: 0x94614
public interface IDictionary<TKey, TValue> : IEnumerable, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>> // TypeDefIndex: 171
{}

// Namespace: System.Collections.Generic
public interface IEqualityComparer<T> // TypeDefIndex: 172
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Equals(T x, T y);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IEqualityComparer<object>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int GetHashCode(T obj);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IEqualityComparer<object>.GetHashCode
	*/
}

// Namespace: System.Collections.Generic
[ComVisibleAttribute] // RVA: 0x94648 Offset: 0x94648 VA: 0x94648
[Serializable]
public class KeyNotFoundException : SystemException, ISerializable // TypeDefIndex: 173
{
	// Methods

	// RVA: 0x48100C Offset: 0x48100C VA: 0x48100C
	public void .ctor() { }

	// RVA: 0x481074 Offset: 0x481074 VA: 0x481074
	public void .ctor(string message) { }

	// RVA: 0x48107C Offset: 0x48107C VA: 0x48107C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Collections.Generic
[DebuggerDisplayAttribute] // RVA: 0x9465C Offset: 0x9465C VA: 0x9465C
[Serializable]
public struct KeyValuePair<TKey, TValue> // TypeDefIndex: 174
{
	// Fields
	private TKey key; // 0x0
	private TValue value; // 0x0

	// Properties
	public TKey Key { get; set; }
	public TValue Value { get; set; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(TKey key, TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0308 Offset: 0xF0308 VA: 0xF0308
	|-KeyValuePair<int, object>..ctor
	|
	|-RVA: 0xF0338 Offset: 0xF0338 VA: 0xF0338
	|-KeyValuePair<object, bool>..ctor
	|
	|-RVA: 0xF0368 Offset: 0xF0368 VA: 0xF0368
	|-KeyValuePair<object, int>..ctor
	|
	|-RVA: 0xF0398 Offset: 0xF0398 VA: 0xF0398
	|-KeyValuePair<object, object>..ctor
	*/

	// RVA: -1 Offset: -1
	public TKey get_Key() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0310 Offset: 0xF0310 VA: 0xF0310
	|-KeyValuePair<int, PointerEventData>.get_Key
	|-KeyValuePair<int, object>.get_Key
	|
	|-RVA: 0xF0340 Offset: 0xF0340 VA: 0xF0340
	|-KeyValuePair<object, bool>.get_Key
	|
	|-RVA: 0xF0370 Offset: 0xF0370 VA: 0xF0370
	|-KeyValuePair<object, int>.get_Key
	|
	|-RVA: 0xF03A0 Offset: 0xF03A0 VA: 0xF03A0
	|-KeyValuePair<object, object>.get_Key
	*/

	// RVA: -1 Offset: -1
	private void set_Key(TKey value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0318 Offset: 0xF0318 VA: 0xF0318
	|-KeyValuePair<int, object>.set_Key
	|
	|-RVA: 0xF0348 Offset: 0xF0348 VA: 0xF0348
	|-KeyValuePair<object, bool>.set_Key
	|
	|-RVA: 0xF0378 Offset: 0xF0378 VA: 0xF0378
	|-KeyValuePair<object, int>.set_Key
	|
	|-RVA: 0xF03A8 Offset: 0xF03A8 VA: 0xF03A8
	|-KeyValuePair<object, object>.set_Key
	*/

	// RVA: -1 Offset: -1
	public TValue get_Value() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0320 Offset: 0xF0320 VA: 0xF0320
	|-KeyValuePair<int, PointerEventData>.get_Value
	|-KeyValuePair<int, object>.get_Value
	|
	|-RVA: 0xF0350 Offset: 0xF0350 VA: 0xF0350
	|-KeyValuePair<object, bool>.get_Value
	|
	|-RVA: 0xF0380 Offset: 0xF0380 VA: 0xF0380
	|-KeyValuePair<object, int>.get_Value
	|
	|-RVA: 0xF03B0 Offset: 0xF03B0 VA: 0xF03B0
	|-KeyValuePair<object, object>.get_Value
	*/

	// RVA: -1 Offset: -1
	private void set_Value(TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0328 Offset: 0xF0328 VA: 0xF0328
	|-KeyValuePair<int, object>.set_Value
	|
	|-RVA: 0xF0358 Offset: 0xF0358 VA: 0xF0358
	|-KeyValuePair<object, bool>.set_Value
	|
	|-RVA: 0xF0388 Offset: 0xF0388 VA: 0xF0388
	|-KeyValuePair<object, int>.set_Value
	|
	|-RVA: 0xF03B8 Offset: 0xF03B8 VA: 0xF03B8
	|-KeyValuePair<object, object>.set_Value
	*/

	// RVA: -1 Offset: -1 Slot: 3
	public override string ToString() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0330 Offset: 0xF0330 VA: 0xF0330
	|-KeyValuePair<int, object>.ToString
	|-KeyValuePair<int, PointerEventData>.ToString
	|
	|-RVA: 0xF0360 Offset: 0xF0360 VA: 0xF0360
	|-KeyValuePair<object, bool>.ToString
	|
	|-RVA: 0xF0390 Offset: 0xF0390 VA: 0xF0390
	|-KeyValuePair<object, int>.ToString
	|
	|-RVA: 0xF03C0 Offset: 0xF03C0 VA: 0xF03C0
	|-KeyValuePair<object, object>.ToString
	*/
}

// Namespace: System.Collections.Generic
[DebuggerDisplayAttribute] // RVA: 0x946B0 Offset: 0x946B0 VA: 0x946B0
[DefaultMemberAttribute] // RVA: 0x946B0 Offset: 0x946B0 VA: 0x946B0
[DebuggerTypeProxyAttribute] // RVA: 0x946B0 Offset: 0x946B0 VA: 0x946B0
[Serializable]
public class List<T> : IEnumerable, ICollection, IList, ICollection<T>, IEnumerable<T>, IList<T> // TypeDefIndex: 175
{
	// Fields
	private const int DefaultCapacity = 4;
	private T[] _items; // 0x0
	private int _size; // 0x0
	private int _version; // 0x0
	private static readonly T[] EmptyArray; // 0x0

	// Properties
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private object System.Collections.IList.Item { get; set; }
	public int Capacity { get; set; }
	public int Count { get; }
	public T Item { get; set; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E11B0 Offset: 0x4E11B0 VA: 0x4E11B0
	|-List<int>..ctor
	|
	|-RVA: 0x4E3674 Offset: 0x4E3674 VA: 0x4E3674
	|-List<object>..ctor
	|-List<string>..ctor
	|-List<Type>..ctor
	|-List<AudioAmbisonicExtensionDefinition>..ctor
	|-List<AudioSourceExtension>..ctor
	|-List<AudioSpatializerExtensionDefinition>..ctor
	|-List<CanvasGroup>..ctor
	|-List<BaseInputModule>..ctor
	|-List<BaseRaycaster>..ctor
	|-List<EventSystem>..ctor
	|-List<EventTrigger.Entry>..ctor
	|-List<PointerInputModule.ButtonState>..ctor
	|-List<BaseInvokableCall>..ctor
	|-List<PersistentCall>..ctor
	|-List<GUILayoutEntry>..ctor
	|-List<GameObject>..ctor
	|-List<PlayerEditorConnectionEvents.MessageTypeSubscribers>..ctor
	|-List<RectTransform>..ctor
	|-List<Rigidbody2D>..ctor
	|-List<Dropdown.DropdownItem>..ctor
	|-List<Dropdown.OptionData>..ctor
	|-List<Graphic>..ctor
	|-List<Image>..ctor
	|-List<RectMask2D>..ctor
	|-List<Selectable>..ctor
	|-List<StencilMaterial.MatEntry>..ctor
	|-List<Toggle>..ctor
	|
	|-RVA: 0x4E5DA0 Offset: 0x4E5DA0 VA: 0x4E5DA0
	|-List<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0x4E846C Offset: 0x4E846C VA: 0x4E846C
	|-List<CustomAttributeTypedArgument>..ctor
	|
	|-RVA: 0x4EAA14 Offset: 0x4EAA14 VA: 0x4EAA14
	|-List<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0x4ECFBC Offset: 0x4ECFBC VA: 0x4ECFBC
	|-List<Color32>..ctor
	|
	|-RVA: 0x4EF480 Offset: 0x4EF480 VA: 0x4EF480
	|-List<RaycastResult>..ctor
	|
	|-RVA: 0x4F24BC Offset: 0x4F24BC VA: 0x4F24BC
	|-List<UICharInfo>..ctor
	|
	|-RVA: 0x581A24 Offset: 0x581A24 VA: 0x581A24
	|-List<UILineInfo>..ctor
	|
	|-RVA: 0x58411C Offset: 0x58411C VA: 0x58411C
	|-List<UIVertex>..ctor
	|
	|-RVA: 0x586F44 Offset: 0x586F44 VA: 0x586F44
	|-List<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0x589600 Offset: 0x589600 VA: 0x589600
	|-List<Vector2>..ctor
	|
	|-RVA: 0x58BBA0 Offset: 0x58BBA0 VA: 0x58BBA0
	|-List<Vector3>..ctor
	|
	|-RVA: 0x58E25C Offset: 0x58E25C VA: 0x58E25C
	|-List<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor(int capacity) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E128C Offset: 0x4E128C VA: 0x4E128C
	|-List<int>..ctor
	|
	|-RVA: 0x4E3750 Offset: 0x4E3750 VA: 0x4E3750
	|-List<object>..ctor
	|-List<StrongName>..ctor
	|-List<Transform>..ctor
	|
	|-RVA: 0x4E5E7C Offset: 0x4E5E7C VA: 0x4E5E7C
	|-List<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0x4E8548 Offset: 0x4E8548 VA: 0x4E8548
	|-List<CustomAttributeTypedArgument>..ctor
	|
	|-RVA: 0x4EAAF0 Offset: 0x4EAAF0 VA: 0x4EAAF0
	|-List<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0x4ED098 Offset: 0x4ED098 VA: 0x4ED098
	|-List<Color32>..ctor
	|
	|-RVA: 0x4EF55C Offset: 0x4EF55C VA: 0x4EF55C
	|-List<RaycastResult>..ctor
	|
	|-RVA: 0x4F2598 Offset: 0x4F2598 VA: 0x4F2598
	|-List<UICharInfo>..ctor
	|
	|-RVA: 0x581B00 Offset: 0x581B00 VA: 0x581B00
	|-List<UILineInfo>..ctor
	|
	|-RVA: 0x5841F8 Offset: 0x5841F8 VA: 0x5841F8
	|-List<UIVertex>..ctor
	|
	|-RVA: 0x587020 Offset: 0x587020 VA: 0x587020
	|-List<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0x5896DC Offset: 0x5896DC VA: 0x5896DC
	|-List<Vector2>..ctor
	|
	|-RVA: 0x58BC7C Offset: 0x58BC7C VA: 0x58BC7C
	|-List<Vector3>..ctor
	|
	|-RVA: 0x58E338 Offset: 0x58E338 VA: 0x58E338
	|-List<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E138C Offset: 0x4E138C VA: 0x4E138C
	|-List<int>..cctor
	|
	|-RVA: 0x4E3850 Offset: 0x4E3850 VA: 0x4E3850
	|-List<object>..cctor
	|
	|-RVA: 0x4E5F7C Offset: 0x4E5F7C VA: 0x4E5F7C
	|-List<CustomAttributeNamedArgument>..cctor
	|
	|-RVA: 0x4E8648 Offset: 0x4E8648 VA: 0x4E8648
	|-List<CustomAttributeTypedArgument>..cctor
	|
	|-RVA: 0x4EABF0 Offset: 0x4EABF0 VA: 0x4EABF0
	|-List<BeforeRenderHelper.OrderBlock>..cctor
	|
	|-RVA: 0x4ED198 Offset: 0x4ED198 VA: 0x4ED198
	|-List<Color32>..cctor
	|
	|-RVA: 0x4EF65C Offset: 0x4EF65C VA: 0x4EF65C
	|-List<RaycastResult>..cctor
	|
	|-RVA: 0x4F2698 Offset: 0x4F2698 VA: 0x4F2698
	|-List<UICharInfo>..cctor
	|
	|-RVA: 0x581C00 Offset: 0x581C00 VA: 0x581C00
	|-List<UILineInfo>..cctor
	|
	|-RVA: 0x5842F8 Offset: 0x5842F8 VA: 0x5842F8
	|-List<UIVertex>..cctor
	|
	|-RVA: 0x587120 Offset: 0x587120 VA: 0x587120
	|-List<UnitySynchronizationContext.WorkRequest>..cctor
	|
	|-RVA: 0x5897DC Offset: 0x5897DC VA: 0x5897DC
	|-List<Vector2>..cctor
	|
	|-RVA: 0x58BD7C Offset: 0x58BD7C VA: 0x58BD7C
	|-List<Vector3>..cctor
	|
	|-RVA: 0x58E438 Offset: 0x58E438 VA: 0x58E438
	|-List<Vector4>..cctor
	*/

	// RVA: -1 Offset: -1 Slot: 27
	private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E141C Offset: 0x4E141C VA: 0x4E141C
	|-List<int>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x4E38E0 Offset: 0x4E38E0 VA: 0x4E38E0
	|-List<object>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x4E600C Offset: 0x4E600C VA: 0x4E600C
	|-List<CustomAttributeNamedArgument>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x4E86D8 Offset: 0x4E86D8 VA: 0x4E86D8
	|-List<CustomAttributeTypedArgument>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x4EAC80 Offset: 0x4EAC80 VA: 0x4EAC80
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x4ED228 Offset: 0x4ED228 VA: 0x4ED228
	|-List<Color32>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x4EF6EC Offset: 0x4EF6EC VA: 0x4EF6EC
	|-List<RaycastResult>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x4F2728 Offset: 0x4F2728 VA: 0x4F2728
	|-List<UICharInfo>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x581C90 Offset: 0x581C90 VA: 0x581C90
	|-List<UILineInfo>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x584388 Offset: 0x584388 VA: 0x584388
	|-List<UIVertex>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x5871B0 Offset: 0x5871B0 VA: 0x5871B0
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x58986C Offset: 0x58986C VA: 0x58986C
	|-List<Vector2>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x58BE0C Offset: 0x58BE0C VA: 0x58BE0C
	|-List<Vector3>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x58E4C8 Offset: 0x58E4C8 VA: 0x58E4C8
	|-List<Vector4>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 8
	private void System.Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E14A0 Offset: 0x4E14A0 VA: 0x4E14A0
	|-List<int>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x4E3964 Offset: 0x4E3964 VA: 0x4E3964
	|-List<object>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x4E6098 Offset: 0x4E6098 VA: 0x4E6098
	|-List<CustomAttributeNamedArgument>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x4E8764 Offset: 0x4E8764 VA: 0x4E8764
	|-List<CustomAttributeTypedArgument>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x4EAD0C Offset: 0x4EAD0C VA: 0x4EAD0C
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x4ED2AC Offset: 0x4ED2AC VA: 0x4ED2AC
	|-List<Color32>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x4EF774 Offset: 0x4EF774 VA: 0x4EF774
	|-List<RaycastResult>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x4F27B4 Offset: 0x4F27B4 VA: 0x4F27B4
	|-List<UICharInfo>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x581D24 Offset: 0x581D24 VA: 0x581D24
	|-List<UILineInfo>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x584410 Offset: 0x584410 VA: 0x584410
	|-List<UIVertex>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x58723C Offset: 0x58723C VA: 0x58723C
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5898F8 Offset: 0x5898F8 VA: 0x5898F8
	|-List<Vector2>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x58BE98 Offset: 0x58BE98 VA: 0x58BE98
	|-List<Vector3>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x58E55C Offset: 0x58E55C VA: 0x58E55C
	|-List<Vector4>.System.Collections.ICollection.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E14D8 Offset: 0x4E14D8 VA: 0x4E14D8
	|-List<int>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x4E399C Offset: 0x4E399C VA: 0x4E399C
	|-List<object>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x4E60D0 Offset: 0x4E60D0 VA: 0x4E60D0
	|-List<CustomAttributeNamedArgument>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x4E879C Offset: 0x4E879C VA: 0x4E879C
	|-List<CustomAttributeTypedArgument>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x4EAD44 Offset: 0x4EAD44 VA: 0x4EAD44
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x4ED2E4 Offset: 0x4ED2E4 VA: 0x4ED2E4
	|-List<Color32>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x4EF7AC Offset: 0x4EF7AC VA: 0x4EF7AC
	|-List<RaycastResult>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x4F27EC Offset: 0x4F27EC VA: 0x4F27EC
	|-List<UICharInfo>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x581D5C Offset: 0x581D5C VA: 0x581D5C
	|-List<UILineInfo>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x584448 Offset: 0x584448 VA: 0x584448
	|-List<UIVertex>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x587274 Offset: 0x587274 VA: 0x587274
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x589930 Offset: 0x589930 VA: 0x589930
	|-List<Vector2>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x58BED0 Offset: 0x58BED0 VA: 0x58BED0
	|-List<Vector3>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x58E594 Offset: 0x58E594 VA: 0x58E594
	|-List<Vector4>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 13
	private int System.Collections.IList.Add(object item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E155C Offset: 0x4E155C VA: 0x4E155C
	|-List<int>.System.Collections.IList.Add
	|
	|-RVA: 0x4E3A20 Offset: 0x4E3A20 VA: 0x4E3A20
	|-List<object>.System.Collections.IList.Add
	|
	|-RVA: 0x4E615C Offset: 0x4E615C VA: 0x4E615C
	|-List<CustomAttributeNamedArgument>.System.Collections.IList.Add
	|
	|-RVA: 0x4E8828 Offset: 0x4E8828 VA: 0x4E8828
	|-List<CustomAttributeTypedArgument>.System.Collections.IList.Add
	|
	|-RVA: 0x4EADD0 Offset: 0x4EADD0 VA: 0x4EADD0
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Add
	|
	|-RVA: 0x4ED368 Offset: 0x4ED368 VA: 0x4ED368
	|-List<Color32>.System.Collections.IList.Add
	|
	|-RVA: 0x4EF834 Offset: 0x4EF834 VA: 0x4EF834
	|-List<RaycastResult>.System.Collections.IList.Add
	|
	|-RVA: 0x4F2878 Offset: 0x4F2878 VA: 0x4F2878
	|-List<UICharInfo>.System.Collections.IList.Add
	|
	|-RVA: 0x581DF0 Offset: 0x581DF0 VA: 0x581DF0
	|-List<UILineInfo>.System.Collections.IList.Add
	|
	|-RVA: 0x5844D0 Offset: 0x5844D0 VA: 0x5844D0
	|-List<UIVertex>.System.Collections.IList.Add
	|
	|-RVA: 0x587300 Offset: 0x587300 VA: 0x587300
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Add
	|
	|-RVA: 0x5899BC Offset: 0x5899BC VA: 0x5899BC
	|-List<Vector2>.System.Collections.IList.Add
	|
	|-RVA: 0x58BF5C Offset: 0x58BF5C VA: 0x58BF5C
	|-List<Vector3>.System.Collections.IList.Add
	|
	|-RVA: 0x58E628 Offset: 0x58E628 VA: 0x58E628
	|-List<Vector4>.System.Collections.IList.Add
	*/

	// RVA: -1 Offset: -1 Slot: 15
	private bool System.Collections.IList.Contains(object item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E1714 Offset: 0x4E1714 VA: 0x4E1714
	|-List<int>.System.Collections.IList.Contains
	|
	|-RVA: 0x4E3C48 Offset: 0x4E3C48 VA: 0x4E3C48
	|-List<object>.System.Collections.IList.Contains
	|
	|-RVA: 0x4E6320 Offset: 0x4E6320 VA: 0x4E6320
	|-List<CustomAttributeNamedArgument>.System.Collections.IList.Contains
	|
	|-RVA: 0x4E89E0 Offset: 0x4E89E0 VA: 0x4E89E0
	|-List<CustomAttributeTypedArgument>.System.Collections.IList.Contains
	|
	|-RVA: 0x4EAF88 Offset: 0x4EAF88 VA: 0x4EAF88
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Contains
	|
	|-RVA: 0x4ED520 Offset: 0x4ED520 VA: 0x4ED520
	|-List<Color32>.System.Collections.IList.Contains
	|
	|-RVA: 0x4EFA94 Offset: 0x4EFA94 VA: 0x4EFA94
	|-List<RaycastResult>.System.Collections.IList.Contains
	|
	|-RVA: 0x4F2A3C Offset: 0x4F2A3C VA: 0x4F2A3C
	|-List<UICharInfo>.System.Collections.IList.Contains
	|
	|-RVA: 0x581FB8 Offset: 0x581FB8 VA: 0x581FB8
	|-List<UILineInfo>.System.Collections.IList.Contains
	|
	|-RVA: 0x584734 Offset: 0x584734 VA: 0x584734
	|-List<UIVertex>.System.Collections.IList.Contains
	|
	|-RVA: 0x5874C4 Offset: 0x5874C4 VA: 0x5874C4
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Contains
	|
	|-RVA: 0x589B74 Offset: 0x589B74 VA: 0x589B74
	|-List<Vector2>.System.Collections.IList.Contains
	|
	|-RVA: 0x58C120 Offset: 0x58C120 VA: 0x58C120
	|-List<Vector3>.System.Collections.IList.Contains
	|
	|-RVA: 0x58E7F0 Offset: 0x58E7F0 VA: 0x58E7F0
	|-List<Vector4>.System.Collections.IList.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 16
	private int System.Collections.IList.IndexOf(object item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E1874 Offset: 0x4E1874 VA: 0x4E1874
	|-List<int>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x4E3E18 Offset: 0x4E3E18 VA: 0x4E3E18
	|-List<object>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x4E648C Offset: 0x4E648C VA: 0x4E648C
	|-List<CustomAttributeNamedArgument>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x4E8B40 Offset: 0x4E8B40 VA: 0x4E8B40
	|-List<CustomAttributeTypedArgument>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x4EB0E8 Offset: 0x4EB0E8 VA: 0x4EB0E8
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x4ED680 Offset: 0x4ED680 VA: 0x4ED680
	|-List<Color32>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x4EFC9C Offset: 0x4EFC9C VA: 0x4EFC9C
	|-List<RaycastResult>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x4F2BA8 Offset: 0x4F2BA8 VA: 0x4F2BA8
	|-List<UICharInfo>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x582128 Offset: 0x582128 VA: 0x582128
	|-List<UILineInfo>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x584940 Offset: 0x584940 VA: 0x584940
	|-List<UIVertex>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x587630 Offset: 0x587630 VA: 0x587630
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x589CD4 Offset: 0x589CD4 VA: 0x589CD4
	|-List<Vector2>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x58C28C Offset: 0x58C28C VA: 0x58C28C
	|-List<Vector3>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x58E960 Offset: 0x58E960 VA: 0x58E960
	|-List<Vector4>.System.Collections.IList.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 17
	private void System.Collections.IList.Insert(int index, object item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E19D4 Offset: 0x4E19D4 VA: 0x4E19D4
	|-List<int>.System.Collections.IList.Insert
	|
	|-RVA: 0x4E3FE8 Offset: 0x4E3FE8 VA: 0x4E3FE8
	|-List<object>.System.Collections.IList.Insert
	|
	|-RVA: 0x4E65F8 Offset: 0x4E65F8 VA: 0x4E65F8
	|-List<CustomAttributeNamedArgument>.System.Collections.IList.Insert
	|
	|-RVA: 0x4E8CA0 Offset: 0x4E8CA0 VA: 0x4E8CA0
	|-List<CustomAttributeTypedArgument>.System.Collections.IList.Insert
	|
	|-RVA: 0x4EB248 Offset: 0x4EB248 VA: 0x4EB248
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Insert
	|
	|-RVA: 0x4ED7E0 Offset: 0x4ED7E0 VA: 0x4ED7E0
	|-List<Color32>.System.Collections.IList.Insert
	|
	|-RVA: 0x4EFEA4 Offset: 0x4EFEA4 VA: 0x4EFEA4
	|-List<RaycastResult>.System.Collections.IList.Insert
	|
	|-RVA: 0x4F2D14 Offset: 0x4F2D14 VA: 0x4F2D14
	|-List<UICharInfo>.System.Collections.IList.Insert
	|
	|-RVA: 0x582298 Offset: 0x582298 VA: 0x582298
	|-List<UILineInfo>.System.Collections.IList.Insert
	|
	|-RVA: 0x584B4C Offset: 0x584B4C VA: 0x584B4C
	|-List<UIVertex>.System.Collections.IList.Insert
	|
	|-RVA: 0x58779C Offset: 0x58779C VA: 0x58779C
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Insert
	|
	|-RVA: 0x589E34 Offset: 0x589E34 VA: 0x589E34
	|-List<Vector2>.System.Collections.IList.Insert
	|
	|-RVA: 0x58C3F8 Offset: 0x58C3F8 VA: 0x58C3F8
	|-List<Vector3>.System.Collections.IList.Insert
	|
	|-RVA: 0x58EAD0 Offset: 0x58EAD0 VA: 0x58EAD0
	|-List<Vector4>.System.Collections.IList.Insert
	*/

	// RVA: -1 Offset: -1 Slot: 18
	private void System.Collections.IList.Remove(object item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E1BB8 Offset: 0x4E1BB8 VA: 0x4E1BB8
	|-List<int>.System.Collections.IList.Remove
	|
	|-RVA: 0x4E423C Offset: 0x4E423C VA: 0x4E423C
	|-List<object>.System.Collections.IList.Remove
	|
	|-RVA: 0x4E67EC Offset: 0x4E67EC VA: 0x4E67EC
	|-List<CustomAttributeNamedArgument>.System.Collections.IList.Remove
	|
	|-RVA: 0x4E8E90 Offset: 0x4E8E90 VA: 0x4E8E90
	|-List<CustomAttributeTypedArgument>.System.Collections.IList.Remove
	|
	|-RVA: 0x4EB438 Offset: 0x4EB438 VA: 0x4EB438
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Remove
	|
	|-RVA: 0x4ED9C4 Offset: 0x4ED9C4 VA: 0x4ED9C4
	|-List<Color32>.System.Collections.IList.Remove
	|
	|-RVA: 0x4F0134 Offset: 0x4F0134 VA: 0x4F0134
	|-List<RaycastResult>.System.Collections.IList.Remove
	|
	|-RVA: 0x4F2F08 Offset: 0x4F2F08 VA: 0x4F2F08
	|-List<UICharInfo>.System.Collections.IList.Remove
	|
	|-RVA: 0x582490 Offset: 0x582490 VA: 0x582490
	|-List<UILineInfo>.System.Collections.IList.Remove
	|
	|-RVA: 0x584D70 Offset: 0x584D70 VA: 0x584D70
	|-List<UIVertex>.System.Collections.IList.Remove
	|
	|-RVA: 0x587990 Offset: 0x587990 VA: 0x587990
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Remove
	|
	|-RVA: 0x58A024 Offset: 0x58A024 VA: 0x58A024
	|-List<Vector2>.System.Collections.IList.Remove
	|
	|-RVA: 0x58C5EC Offset: 0x58C5EC VA: 0x58C5EC
	|-List<Vector3>.System.Collections.IList.Remove
	|
	|-RVA: 0x58ECC8 Offset: 0x58ECC8 VA: 0x58ECC8
	|-List<Vector4>.System.Collections.IList.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 21
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E1D14 Offset: 0x4E1D14 VA: 0x4E1D14
	|-List<int>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x4E4408 Offset: 0x4E4408 VA: 0x4E4408
	|-List<object>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x4E6958 Offset: 0x4E6958 VA: 0x4E6958
	|-List<CustomAttributeNamedArgument>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x4E8FEC Offset: 0x4E8FEC VA: 0x4E8FEC
	|-List<CustomAttributeTypedArgument>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x4EB594 Offset: 0x4EB594 VA: 0x4EB594
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x4EDB20 Offset: 0x4EDB20 VA: 0x4EDB20
	|-List<Color32>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x4F033C Offset: 0x4F033C VA: 0x4F033C
	|-List<RaycastResult>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x4F3074 Offset: 0x4F3074 VA: 0x4F3074
	|-List<UICharInfo>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x582600 Offset: 0x582600 VA: 0x582600
	|-List<UILineInfo>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x584F78 Offset: 0x584F78 VA: 0x584F78
	|-List<UIVertex>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x587AFC Offset: 0x587AFC VA: 0x587AFC
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x58A180 Offset: 0x58A180 VA: 0x58A180
	|-List<Vector2>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x58C758 Offset: 0x58C758 VA: 0x58C758
	|-List<Vector3>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x58EE38 Offset: 0x58EE38 VA: 0x58EE38
	|-List<Vector4>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private bool System.Collections.ICollection.get_IsSynchronized() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E1D1C Offset: 0x4E1D1C VA: 0x4E1D1C
	|-List<int>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x4E4410 Offset: 0x4E4410 VA: 0x4E4410
	|-List<object>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x4E6960 Offset: 0x4E6960 VA: 0x4E6960
	|-List<CustomAttributeNamedArgument>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x4E8FF4 Offset: 0x4E8FF4 VA: 0x4E8FF4
	|-List<CustomAttributeTypedArgument>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x4EB59C Offset: 0x4EB59C VA: 0x4EB59C
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x4EDB28 Offset: 0x4EDB28 VA: 0x4EDB28
	|-List<Color32>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x4F0344 Offset: 0x4F0344 VA: 0x4F0344
	|-List<RaycastResult>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x4F307C Offset: 0x4F307C VA: 0x4F307C
	|-List<UICharInfo>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x582608 Offset: 0x582608 VA: 0x582608
	|-List<UILineInfo>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x584F80 Offset: 0x584F80 VA: 0x584F80
	|-List<UIVertex>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x587B04 Offset: 0x587B04 VA: 0x587B04
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x58A188 Offset: 0x58A188 VA: 0x58A188
	|-List<Vector2>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x58C760 Offset: 0x58C760 VA: 0x58C760
	|-List<Vector3>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x58EE40 Offset: 0x58EE40 VA: 0x58EE40
	|-List<Vector4>.System.Collections.ICollection.get_IsSynchronized
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private object System.Collections.ICollection.get_SyncRoot() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E1D24 Offset: 0x4E1D24 VA: 0x4E1D24
	|-List<int>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x4E4418 Offset: 0x4E4418 VA: 0x4E4418
	|-List<object>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x4E6968 Offset: 0x4E6968 VA: 0x4E6968
	|-List<CustomAttributeNamedArgument>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x4E8FFC Offset: 0x4E8FFC VA: 0x4E8FFC
	|-List<CustomAttributeTypedArgument>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x4EB5A4 Offset: 0x4EB5A4 VA: 0x4EB5A4
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x4EDB30 Offset: 0x4EDB30 VA: 0x4EDB30
	|-List<Color32>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x4F034C Offset: 0x4F034C VA: 0x4F034C
	|-List<RaycastResult>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x4F3084 Offset: 0x4F3084 VA: 0x4F3084
	|-List<UICharInfo>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x582610 Offset: 0x582610 VA: 0x582610
	|-List<UILineInfo>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x584F88 Offset: 0x584F88 VA: 0x584F88
	|-List<UIVertex>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x587B0C Offset: 0x587B0C VA: 0x587B0C
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x58A190 Offset: 0x58A190 VA: 0x58A190
	|-List<Vector2>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x58C768 Offset: 0x58C768 VA: 0x58C768
	|-List<Vector3>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x58EE48 Offset: 0x58EE48 VA: 0x58EE48
	|-List<Vector4>.System.Collections.ICollection.get_SyncRoot
	*/

	// RVA: -1 Offset: -1 Slot: 9
	private bool System.Collections.IList.get_IsFixedSize() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E1D28 Offset: 0x4E1D28 VA: 0x4E1D28
	|-List<int>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x4E441C Offset: 0x4E441C VA: 0x4E441C
	|-List<object>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x4E696C Offset: 0x4E696C VA: 0x4E696C
	|-List<CustomAttributeNamedArgument>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x4E9000 Offset: 0x4E9000 VA: 0x4E9000
	|-List<CustomAttributeTypedArgument>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x4EB5A8 Offset: 0x4EB5A8 VA: 0x4EB5A8
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x4EDB34 Offset: 0x4EDB34 VA: 0x4EDB34
	|-List<Color32>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x4F0350 Offset: 0x4F0350 VA: 0x4F0350
	|-List<RaycastResult>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x4F3088 Offset: 0x4F3088 VA: 0x4F3088
	|-List<UICharInfo>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x582614 Offset: 0x582614 VA: 0x582614
	|-List<UILineInfo>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x584F8C Offset: 0x584F8C VA: 0x584F8C
	|-List<UIVertex>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x587B10 Offset: 0x587B10 VA: 0x587B10
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x58A194 Offset: 0x58A194 VA: 0x58A194
	|-List<Vector2>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x58C76C Offset: 0x58C76C VA: 0x58C76C
	|-List<Vector3>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x58EE4C Offset: 0x58EE4C VA: 0x58EE4C
	|-List<Vector4>.System.Collections.IList.get_IsFixedSize
	*/

	// RVA: -1 Offset: -1 Slot: 10
	private bool System.Collections.IList.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E1D30 Offset: 0x4E1D30 VA: 0x4E1D30
	|-List<int>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x4E4424 Offset: 0x4E4424 VA: 0x4E4424
	|-List<object>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x4E6974 Offset: 0x4E6974 VA: 0x4E6974
	|-List<CustomAttributeNamedArgument>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x4E9008 Offset: 0x4E9008 VA: 0x4E9008
	|-List<CustomAttributeTypedArgument>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x4EB5B0 Offset: 0x4EB5B0 VA: 0x4EB5B0
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x4EDB3C Offset: 0x4EDB3C VA: 0x4EDB3C
	|-List<Color32>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x4F0358 Offset: 0x4F0358 VA: 0x4F0358
	|-List<RaycastResult>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x4F3090 Offset: 0x4F3090 VA: 0x4F3090
	|-List<UICharInfo>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x58261C Offset: 0x58261C VA: 0x58261C
	|-List<UILineInfo>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x584F94 Offset: 0x584F94 VA: 0x584F94
	|-List<UIVertex>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x587B18 Offset: 0x587B18 VA: 0x587B18
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x58A19C Offset: 0x58A19C VA: 0x58A19C
	|-List<Vector2>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x58C774 Offset: 0x58C774 VA: 0x58C774
	|-List<Vector3>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x58EE54 Offset: 0x58EE54 VA: 0x58EE54
	|-List<Vector4>.System.Collections.IList.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 11
	private object System.Collections.IList.get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E1D38 Offset: 0x4E1D38 VA: 0x4E1D38
	|-List<int>.System.Collections.IList.get_Item
	|
	|-RVA: 0x4E442C Offset: 0x4E442C VA: 0x4E442C
	|-List<object>.System.Collections.IList.get_Item
	|
	|-RVA: 0x4E697C Offset: 0x4E697C VA: 0x4E697C
	|-List<CustomAttributeNamedArgument>.System.Collections.IList.get_Item
	|
	|-RVA: 0x4E9010 Offset: 0x4E9010 VA: 0x4E9010
	|-List<CustomAttributeTypedArgument>.System.Collections.IList.get_Item
	|
	|-RVA: 0x4EB5B8 Offset: 0x4EB5B8 VA: 0x4EB5B8
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.get_Item
	|
	|-RVA: 0x4EDB44 Offset: 0x4EDB44 VA: 0x4EDB44
	|-List<Color32>.System.Collections.IList.get_Item
	|
	|-RVA: 0x4F0360 Offset: 0x4F0360 VA: 0x4F0360
	|-List<RaycastResult>.System.Collections.IList.get_Item
	|
	|-RVA: 0x4F3098 Offset: 0x4F3098 VA: 0x4F3098
	|-List<UICharInfo>.System.Collections.IList.get_Item
	|
	|-RVA: 0x582624 Offset: 0x582624 VA: 0x582624
	|-List<UILineInfo>.System.Collections.IList.get_Item
	|
	|-RVA: 0x584F9C Offset: 0x584F9C VA: 0x584F9C
	|-List<UIVertex>.System.Collections.IList.get_Item
	|
	|-RVA: 0x587B20 Offset: 0x587B20 VA: 0x587B20
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.get_Item
	|
	|-RVA: 0x58A1A4 Offset: 0x58A1A4 VA: 0x58A1A4
	|-List<Vector2>.System.Collections.IList.get_Item
	|
	|-RVA: 0x58C77C Offset: 0x58C77C VA: 0x58C77C
	|-List<Vector3>.System.Collections.IList.get_Item
	|
	|-RVA: 0x58EE5C Offset: 0x58EE5C VA: 0x58EE5C
	|-List<Vector4>.System.Collections.IList.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 12
	private void System.Collections.IList.set_Item(int index, object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E1DB4 Offset: 0x4E1DB4 VA: 0x4E1DB4
	|-List<int>.System.Collections.IList.set_Item
	|
	|-RVA: 0x4E4470 Offset: 0x4E4470 VA: 0x4E4470
	|-List<object>.System.Collections.IList.set_Item
	|
	|-RVA: 0x4E6A08 Offset: 0x4E6A08 VA: 0x4E6A08
	|-List<CustomAttributeNamedArgument>.System.Collections.IList.set_Item
	|
	|-RVA: 0x4E9098 Offset: 0x4E9098 VA: 0x4E9098
	|-List<CustomAttributeTypedArgument>.System.Collections.IList.set_Item
	|
	|-RVA: 0x4EB640 Offset: 0x4EB640 VA: 0x4EB640
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.set_Item
	|
	|-RVA: 0x4EDBC0 Offset: 0x4EDBC0 VA: 0x4EDBC0
	|-List<Color32>.System.Collections.IList.set_Item
	|
	|-RVA: 0x4F03FC Offset: 0x4F03FC VA: 0x4F03FC
	|-List<RaycastResult>.System.Collections.IList.set_Item
	|
	|-RVA: 0x4F3124 Offset: 0x4F3124 VA: 0x4F3124
	|-List<UICharInfo>.System.Collections.IList.set_Item
	|
	|-RVA: 0x5826B0 Offset: 0x5826B0 VA: 0x5826B0
	|-List<UILineInfo>.System.Collections.IList.set_Item
	|
	|-RVA: 0x58502C Offset: 0x58502C VA: 0x58502C
	|-List<UIVertex>.System.Collections.IList.set_Item
	|
	|-RVA: 0x587BAC Offset: 0x587BAC VA: 0x587BAC
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.set_Item
	|
	|-RVA: 0x58A22C Offset: 0x58A22C VA: 0x58A22C
	|-List<Vector2>.System.Collections.IList.set_Item
	|
	|-RVA: 0x58C808 Offset: 0x58C808 VA: 0x58C808
	|-List<Vector3>.System.Collections.IList.set_Item
	|
	|-RVA: 0x58EEE8 Offset: 0x58EEE8 VA: 0x58EEE8
	|-List<Vector4>.System.Collections.IList.set_Item
	*/

	// RVA: -1 Offset: -1 Slot: 22
	public void Add(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E1F6C Offset: 0x4E1F6C VA: 0x4E1F6C
	|-List<int>.Add
	|
	|-RVA: 0x4E4698 Offset: 0x4E4698 VA: 0x4E4698
	|-List<object>.Add
	|-List<string>.Add
	|-List<Type>.Add
	|-List<AudioSourceExtension>.Add
	|-List<BaseRaycaster>.Add
	|-List<EventSystem>.Add
	|-List<PointerInputModule.ButtonState>.Add
	|-List<BaseInvokableCall>.Add
	|-List<GameObject>.Add
	|-List<PlayerEditorConnectionEvents.MessageTypeSubscribers>.Add
	|-List<RectTransform>.Add
	|-List<Dropdown.DropdownItem>.Add
	|-List<Dropdown.OptionData>.Add
	|-List<Graphic>.Add
	|-List<Image>.Add
	|-List<RectMask2D>.Add
	|-List<Selectable>.Add
	|-List<StencilMaterial.MatEntry>.Add
	|-List<Toggle>.Add
	|
	|-RVA: 0x4E6BD0 Offset: 0x4E6BD0 VA: 0x4E6BD0
	|-List<CustomAttributeNamedArgument>.Add
	|
	|-RVA: 0x4E925C Offset: 0x4E925C VA: 0x4E925C
	|-List<CustomAttributeTypedArgument>.Add
	|
	|-RVA: 0x4EB804 Offset: 0x4EB804 VA: 0x4EB804
	|-List<BeforeRenderHelper.OrderBlock>.Add
	|
	|-RVA: 0x4EDD78 Offset: 0x4EDD78 VA: 0x4EDD78
	|-List<Color32>.Add
	|
	|-RVA: 0x4F065C Offset: 0x4F065C VA: 0x4F065C
	|-List<RaycastResult>.Add
	|
	|-RVA: 0x4F32EC Offset: 0x4F32EC VA: 0x4F32EC
	|-List<UICharInfo>.Add
	|
	|-RVA: 0x58287C Offset: 0x58287C VA: 0x58287C
	|-List<UILineInfo>.Add
	|
	|-RVA: 0x585224 Offset: 0x585224 VA: 0x585224
	|-List<UIVertex>.Add
	|
	|-RVA: 0x587D74 Offset: 0x587D74 VA: 0x587D74
	|-List<UnitySynchronizationContext.WorkRequest>.Add
	|
	|-RVA: 0x58A3F0 Offset: 0x58A3F0 VA: 0x58A3F0
	|-List<Vector2>.Add
	|
	|-RVA: 0x58C9D0 Offset: 0x58C9D0 VA: 0x58C9D0
	|-List<Vector3>.Add
	|
	|-RVA: 0x58F0B4 Offset: 0x58F0B4 VA: 0x58F0B4
	|-List<Vector4>.Add
	*/

	// RVA: -1 Offset: -1
	private void GrowIfNeeded(int newCount) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E2014 Offset: 0x4E2014 VA: 0x4E2014
	|-List<int>.GrowIfNeeded
	|
	|-RVA: 0x4E4740 Offset: 0x4E4740 VA: 0x4E4740
	|-List<object>.GrowIfNeeded
	|
	|-RVA: 0x4E6C8C Offset: 0x4E6C8C VA: 0x4E6C8C
	|-List<CustomAttributeNamedArgument>.GrowIfNeeded
	|
	|-RVA: 0x4E930C Offset: 0x4E930C VA: 0x4E930C
	|-List<CustomAttributeTypedArgument>.GrowIfNeeded
	|
	|-RVA: 0x4EB8B4 Offset: 0x4EB8B4 VA: 0x4EB8B4
	|-List<BeforeRenderHelper.OrderBlock>.GrowIfNeeded
	|
	|-RVA: 0x4EDE20 Offset: 0x4EDE20 VA: 0x4EDE20
	|-List<Color32>.GrowIfNeeded
	|
	|-RVA: 0x4F07A4 Offset: 0x4F07A4 VA: 0x4F07A4
	|-List<RaycastResult>.GrowIfNeeded
	|
	|-RVA: 0x4F33A8 Offset: 0x4F33A8 VA: 0x4F33A8
	|-List<UICharInfo>.GrowIfNeeded
	|
	|-RVA: 0x582944 Offset: 0x582944 VA: 0x582944
	|-List<UILineInfo>.GrowIfNeeded
	|
	|-RVA: 0x585318 Offset: 0x585318 VA: 0x585318
	|-List<UIVertex>.GrowIfNeeded
	|
	|-RVA: 0x587E30 Offset: 0x587E30 VA: 0x587E30
	|-List<UnitySynchronizationContext.WorkRequest>.GrowIfNeeded
	|
	|-RVA: 0x58A4A0 Offset: 0x58A4A0 VA: 0x58A4A0
	|-List<Vector2>.GrowIfNeeded
	|
	|-RVA: 0x58CA8C Offset: 0x58CA8C VA: 0x58CA8C
	|-List<Vector3>.GrowIfNeeded
	|
	|-RVA: 0x58F17C Offset: 0x58F17C VA: 0x58F17C
	|-List<Vector4>.GrowIfNeeded
	*/

	// RVA: -1 Offset: -1
	private void AddCollection(ICollection<T> collection) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E20A0 Offset: 0x4E20A0 VA: 0x4E20A0
	|-List<int>.AddCollection
	|
	|-RVA: 0x4E47CC Offset: 0x4E47CC VA: 0x4E47CC
	|-List<object>.AddCollection
	|
	|-RVA: 0x4E6D18 Offset: 0x4E6D18 VA: 0x4E6D18
	|-List<CustomAttributeNamedArgument>.AddCollection
	|
	|-RVA: 0x4E9398 Offset: 0x4E9398 VA: 0x4E9398
	|-List<CustomAttributeTypedArgument>.AddCollection
	|
	|-RVA: 0x4EB940 Offset: 0x4EB940 VA: 0x4EB940
	|-List<BeforeRenderHelper.OrderBlock>.AddCollection
	|
	|-RVA: 0x4EDEAC Offset: 0x4EDEAC VA: 0x4EDEAC
	|-List<Color32>.AddCollection
	|
	|-RVA: 0x4F0830 Offset: 0x4F0830 VA: 0x4F0830
	|-List<RaycastResult>.AddCollection
	|
	|-RVA: 0x4F3434 Offset: 0x4F3434 VA: 0x4F3434
	|-List<UICharInfo>.AddCollection
	|
	|-RVA: 0x5829D0 Offset: 0x5829D0 VA: 0x5829D0
	|-List<UILineInfo>.AddCollection
	|
	|-RVA: 0x5853A4 Offset: 0x5853A4 VA: 0x5853A4
	|-List<UIVertex>.AddCollection
	|
	|-RVA: 0x587EBC Offset: 0x587EBC VA: 0x587EBC
	|-List<UnitySynchronizationContext.WorkRequest>.AddCollection
	|
	|-RVA: 0x58A52C Offset: 0x58A52C VA: 0x58A52C
	|-List<Vector2>.AddCollection
	|
	|-RVA: 0x58CB18 Offset: 0x58CB18 VA: 0x58CB18
	|-List<Vector3>.AddCollection
	|
	|-RVA: 0x58F208 Offset: 0x58F208 VA: 0x58F208
	|-List<Vector4>.AddCollection
	*/

	// RVA: -1 Offset: -1
	private void AddEnumerable(IEnumerable<T> enumerable) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E2254 Offset: 0x4E2254 VA: 0x4E2254
	|-List<int>.AddEnumerable
	|
	|-RVA: 0x4E4980 Offset: 0x4E4980 VA: 0x4E4980
	|-List<object>.AddEnumerable
	|
	|-RVA: 0x4E6ECC Offset: 0x4E6ECC VA: 0x4E6ECC
	|-List<CustomAttributeNamedArgument>.AddEnumerable
	|
	|-RVA: 0x4E954C Offset: 0x4E954C VA: 0x4E954C
	|-List<CustomAttributeTypedArgument>.AddEnumerable
	|
	|-RVA: 0x4EBAF4 Offset: 0x4EBAF4 VA: 0x4EBAF4
	|-List<BeforeRenderHelper.OrderBlock>.AddEnumerable
	|
	|-RVA: 0x4EE060 Offset: 0x4EE060 VA: 0x4EE060
	|-List<Color32>.AddEnumerable
	|
	|-RVA: 0x4F09E4 Offset: 0x4F09E4 VA: 0x4F09E4
	|-List<RaycastResult>.AddEnumerable
	|
	|-RVA: 0x4F35E8 Offset: 0x4F35E8 VA: 0x4F35E8
	|-List<UICharInfo>.AddEnumerable
	|
	|-RVA: 0x582B84 Offset: 0x582B84 VA: 0x582B84
	|-List<UILineInfo>.AddEnumerable
	|
	|-RVA: 0x585558 Offset: 0x585558 VA: 0x585558
	|-List<UIVertex>.AddEnumerable
	|
	|-RVA: 0x588070 Offset: 0x588070 VA: 0x588070
	|-List<UnitySynchronizationContext.WorkRequest>.AddEnumerable
	|
	|-RVA: 0x58A6E0 Offset: 0x58A6E0 VA: 0x58A6E0
	|-List<Vector2>.AddEnumerable
	|
	|-RVA: 0x58CCCC Offset: 0x58CCCC VA: 0x58CCCC
	|-List<Vector3>.AddEnumerable
	|
	|-RVA: 0x58F3BC Offset: 0x58F3BC VA: 0x58F3BC
	|-List<Vector4>.AddEnumerable
	*/

	// RVA: -1 Offset: -1
	public void AddRange(IEnumerable<T> collection) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E2594 Offset: 0x4E2594 VA: 0x4E2594
	|-List<int>.AddRange
	|
	|-RVA: 0x4E4CC0 Offset: 0x4E4CC0 VA: 0x4E4CC0
	|-List<object>.AddRange
	|-List<BaseInvokableCall>.AddRange
	|-List<Dropdown.OptionData>.AddRange
	|
	|-RVA: 0x4E7224 Offset: 0x4E7224 VA: 0x4E7224
	|-List<CustomAttributeNamedArgument>.AddRange
	|
	|-RVA: 0x4E9890 Offset: 0x4E9890 VA: 0x4E9890
	|-List<CustomAttributeTypedArgument>.AddRange
	|
	|-RVA: 0x4EBE38 Offset: 0x4EBE38 VA: 0x4EBE38
	|-List<BeforeRenderHelper.OrderBlock>.AddRange
	|
	|-RVA: 0x4EE3A0 Offset: 0x4EE3A0 VA: 0x4EE3A0
	|-List<Color32>.AddRange
	|
	|-RVA: 0x4F0E04 Offset: 0x4F0E04 VA: 0x4F0E04
	|-List<RaycastResult>.AddRange
	|
	|-RVA: 0x4F3940 Offset: 0x4F3940 VA: 0x4F3940
	|-List<UICharInfo>.AddRange
	|
	|-RVA: 0x582EE8 Offset: 0x582EE8 VA: 0x582EE8
	|-List<UILineInfo>.AddRange
	|
	|-RVA: 0x585934 Offset: 0x585934 VA: 0x585934
	|-List<UIVertex>.AddRange
	|
	|-RVA: 0x5883C8 Offset: 0x5883C8 VA: 0x5883C8
	|-List<UnitySynchronizationContext.WorkRequest>.AddRange
	|
	|-RVA: 0x58AA24 Offset: 0x58AA24 VA: 0x58AA24
	|-List<Vector2>.AddRange
	|
	|-RVA: 0x58D024 Offset: 0x58D024 VA: 0x58D024
	|-List<Vector3>.AddRange
	|
	|-RVA: 0x58F720 Offset: 0x58F720 VA: 0x58F720
	|-List<Vector4>.AddRange
	*/

	// RVA: -1 Offset: -1
	public ReadOnlyCollection<T> AsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E2658 Offset: 0x4E2658 VA: 0x4E2658
	|-List<int>.AsReadOnly
	|
	|-RVA: 0x4E4D84 Offset: 0x4E4D84 VA: 0x4E4D84
	|-List<object>.AsReadOnly
	|
	|-RVA: 0x4E72E8 Offset: 0x4E72E8 VA: 0x4E72E8
	|-List<CustomAttributeNamedArgument>.AsReadOnly
	|
	|-RVA: 0x4E9954 Offset: 0x4E9954 VA: 0x4E9954
	|-List<CustomAttributeTypedArgument>.AsReadOnly
	|
	|-RVA: 0x4EBEFC Offset: 0x4EBEFC VA: 0x4EBEFC
	|-List<BeforeRenderHelper.OrderBlock>.AsReadOnly
	|
	|-RVA: 0x4EE464 Offset: 0x4EE464 VA: 0x4EE464
	|-List<Color32>.AsReadOnly
	|
	|-RVA: 0x4F0EC8 Offset: 0x4F0EC8 VA: 0x4F0EC8
	|-List<RaycastResult>.AsReadOnly
	|
	|-RVA: 0x4F3A04 Offset: 0x4F3A04 VA: 0x4F3A04
	|-List<UICharInfo>.AsReadOnly
	|
	|-RVA: 0x582FAC Offset: 0x582FAC VA: 0x582FAC
	|-List<UILineInfo>.AsReadOnly
	|
	|-RVA: 0x5859F8 Offset: 0x5859F8 VA: 0x5859F8
	|-List<UIVertex>.AsReadOnly
	|
	|-RVA: 0x58848C Offset: 0x58848C VA: 0x58848C
	|-List<UnitySynchronizationContext.WorkRequest>.AsReadOnly
	|
	|-RVA: 0x58AAE8 Offset: 0x58AAE8 VA: 0x58AAE8
	|-List<Vector2>.AsReadOnly
	|
	|-RVA: 0x58D0E8 Offset: 0x58D0E8 VA: 0x58D0E8
	|-List<Vector3>.AsReadOnly
	|
	|-RVA: 0x58F7E4 Offset: 0x58F7E4 VA: 0x58F7E4
	|-List<Vector4>.AsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 23
	public void Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E26B8 Offset: 0x4E26B8 VA: 0x4E26B8
	|-List<int>.Clear
	|
	|-RVA: 0x4E4DE4 Offset: 0x4E4DE4 VA: 0x4E4DE4
	|-List<object>.Clear
	|-List<IEventSystemHandler>.Clear
	|-List<BaseInvokableCall>.Clear
	|-List<GameObject>.Clear
	|-List<RectTransform>.Clear
	|-List<Dropdown.DropdownItem>.Clear
	|-List<Dropdown.OptionData>.Clear
	|-List<Graphic>.Clear
	|-List<RectMask2D>.Clear
	|-List<StencilMaterial.MatEntry>.Clear
	|
	|-RVA: 0x4E7348 Offset: 0x4E7348 VA: 0x4E7348
	|-List<CustomAttributeNamedArgument>.Clear
	|
	|-RVA: 0x4E99B4 Offset: 0x4E99B4 VA: 0x4E99B4
	|-List<CustomAttributeTypedArgument>.Clear
	|
	|-RVA: 0x4EBF5C Offset: 0x4EBF5C VA: 0x4EBF5C
	|-List<BeforeRenderHelper.OrderBlock>.Clear
	|
	|-RVA: 0x4EE4C4 Offset: 0x4EE4C4 VA: 0x4EE4C4
	|-List<Color32>.Clear
	|
	|-RVA: 0x4F0F28 Offset: 0x4F0F28 VA: 0x4F0F28
	|-List<RaycastResult>.Clear
	|
	|-RVA: 0x4F3A64 Offset: 0x4F3A64 VA: 0x4F3A64
	|-List<UICharInfo>.Clear
	|
	|-RVA: 0x58300C Offset: 0x58300C VA: 0x58300C
	|-List<UILineInfo>.Clear
	|
	|-RVA: 0x585A58 Offset: 0x585A58 VA: 0x585A58
	|-List<UIVertex>.Clear
	|
	|-RVA: 0x5884EC Offset: 0x5884EC VA: 0x5884EC
	|-List<UnitySynchronizationContext.WorkRequest>.Clear
	|
	|-RVA: 0x58AB48 Offset: 0x58AB48 VA: 0x58AB48
	|-List<Vector2>.Clear
	|
	|-RVA: 0x58D148 Offset: 0x58D148 VA: 0x58D148
	|-List<Vector3>.Clear
	|
	|-RVA: 0x58F844 Offset: 0x58F844 VA: 0x58F844
	|-List<Vector4>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 24
	public bool Contains(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E2704 Offset: 0x4E2704 VA: 0x4E2704
	|-List<int>.Contains
	|
	|-RVA: 0x4E4E30 Offset: 0x4E4E30 VA: 0x4E4E30
	|-List<object>.Contains
	|-List<BaseRaycaster>.Contains
	|-List<BaseInvokableCall>.Contains
	|-List<Toggle>.Contains
	|
	|-RVA: 0x4E7394 Offset: 0x4E7394 VA: 0x4E7394
	|-List<CustomAttributeNamedArgument>.Contains
	|
	|-RVA: 0x4E9A00 Offset: 0x4E9A00 VA: 0x4E9A00
	|-List<CustomAttributeTypedArgument>.Contains
	|
	|-RVA: 0x4EBFA8 Offset: 0x4EBFA8 VA: 0x4EBFA8
	|-List<BeforeRenderHelper.OrderBlock>.Contains
	|
	|-RVA: 0x4EE510 Offset: 0x4EE510 VA: 0x4EE510
	|-List<Color32>.Contains
	|
	|-RVA: 0x4F0F74 Offset: 0x4F0F74 VA: 0x4F0F74
	|-List<RaycastResult>.Contains
	|
	|-RVA: 0x4F3AB0 Offset: 0x4F3AB0 VA: 0x4F3AB0
	|-List<UICharInfo>.Contains
	|
	|-RVA: 0x583058 Offset: 0x583058 VA: 0x583058
	|-List<UILineInfo>.Contains
	|
	|-RVA: 0x585AA4 Offset: 0x585AA4 VA: 0x585AA4
	|-List<UIVertex>.Contains
	|
	|-RVA: 0x588538 Offset: 0x588538 VA: 0x588538
	|-List<UnitySynchronizationContext.WorkRequest>.Contains
	|
	|-RVA: 0x58AB94 Offset: 0x58AB94 VA: 0x58AB94
	|-List<Vector2>.Contains
	|
	|-RVA: 0x58D194 Offset: 0x58D194 VA: 0x58D194
	|-List<Vector3>.Contains
	|
	|-RVA: 0x58F890 Offset: 0x58F890 VA: 0x58F890
	|-List<Vector4>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 25
	public void CopyTo(T[] array, int arrayIndex) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E2750 Offset: 0x4E2750 VA: 0x4E2750
	|-List<int>.CopyTo
	|
	|-RVA: 0x4E4E7C Offset: 0x4E4E7C VA: 0x4E4E7C
	|-List<object>.CopyTo
	|
	|-RVA: 0x4E73E4 Offset: 0x4E73E4 VA: 0x4E73E4
	|-List<CustomAttributeNamedArgument>.CopyTo
	|
	|-RVA: 0x4E9A4C Offset: 0x4E9A4C VA: 0x4E9A4C
	|-List<CustomAttributeTypedArgument>.CopyTo
	|
	|-RVA: 0x4EBFF4 Offset: 0x4EBFF4 VA: 0x4EBFF4
	|-List<BeforeRenderHelper.OrderBlock>.CopyTo
	|
	|-RVA: 0x4EE55C Offset: 0x4EE55C VA: 0x4EE55C
	|-List<Color32>.CopyTo
	|
	|-RVA: 0x4F102C Offset: 0x4F102C VA: 0x4F102C
	|-List<RaycastResult>.CopyTo
	|
	|-RVA: 0x4F3B00 Offset: 0x4F3B00 VA: 0x4F3B00
	|-List<UICharInfo>.CopyTo
	|
	|-RVA: 0x5830B4 Offset: 0x5830B4 VA: 0x5830B4
	|-List<UILineInfo>.CopyTo
	|
	|-RVA: 0x585BA0 Offset: 0x585BA0 VA: 0x585BA0
	|-List<UIVertex>.CopyTo
	|
	|-RVA: 0x588588 Offset: 0x588588 VA: 0x588588
	|-List<UnitySynchronizationContext.WorkRequest>.CopyTo
	|
	|-RVA: 0x58ABE0 Offset: 0x58ABE0 VA: 0x58ABE0
	|-List<Vector2>.CopyTo
	|
	|-RVA: 0x58D1E4 Offset: 0x58D1E4 VA: 0x58D1E4
	|-List<Vector3>.CopyTo
	|
	|-RVA: 0x58F8EC Offset: 0x58F8EC VA: 0x58F8EC
	|-List<Vector4>.CopyTo
	*/

	// RVA: -1 Offset: -1
	public T Find(Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E4EB4 Offset: 0x4E4EB4 VA: 0x4E4EB4
	|-List<Toggle>.Find
	|-List<object>.Find
	|
	|-RVA: 0x4E2788 Offset: 0x4E2788 VA: 0x4E2788
	|-List<int>.Find
	|
	|-RVA: 0x4E741C Offset: 0x4E741C VA: 0x4E741C
	|-List<CustomAttributeNamedArgument>.Find
	|
	|-RVA: 0x4E9A84 Offset: 0x4E9A84 VA: 0x4E9A84
	|-List<CustomAttributeTypedArgument>.Find
	|
	|-RVA: 0x4EC02C Offset: 0x4EC02C VA: 0x4EC02C
	|-List<BeforeRenderHelper.OrderBlock>.Find
	|
	|-RVA: 0x4EE594 Offset: 0x4EE594 VA: 0x4EE594
	|-List<Color32>.Find
	|
	|-RVA: 0x4F1064 Offset: 0x4F1064 VA: 0x4F1064
	|-List<RaycastResult>.Find
	|
	|-RVA: 0x4F3B38 Offset: 0x4F3B38 VA: 0x4F3B38
	|-List<UICharInfo>.Find
	|
	|-RVA: 0x5830EC Offset: 0x5830EC VA: 0x5830EC
	|-List<UILineInfo>.Find
	|
	|-RVA: 0x585BD8 Offset: 0x585BD8 VA: 0x585BD8
	|-List<UIVertex>.Find
	|
	|-RVA: 0x5885C0 Offset: 0x5885C0 VA: 0x5885C0
	|-List<UnitySynchronizationContext.WorkRequest>.Find
	|
	|-RVA: 0x58AC18 Offset: 0x58AC18 VA: 0x58AC18
	|-List<Vector2>.Find
	|
	|-RVA: 0x58D21C Offset: 0x58D21C VA: 0x58D21C
	|-List<Vector3>.Find
	|
	|-RVA: 0x58F924 Offset: 0x58F924 VA: 0x58F924
	|-List<Vector4>.Find
	*/

	// RVA: -1 Offset: -1
	private static void CheckMatch(Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E28C8 Offset: 0x4E28C8 VA: 0x4E28C8
	|-List<int>.CheckMatch
	|
	|-RVA: 0x4E4FF4 Offset: 0x4E4FF4 VA: 0x4E4FF4
	|-List<object>.CheckMatch
	|
	|-RVA: 0x4E758C Offset: 0x4E758C VA: 0x4E758C
	|-List<CustomAttributeNamedArgument>.CheckMatch
	|
	|-RVA: 0x4E9BE4 Offset: 0x4E9BE4 VA: 0x4E9BE4
	|-List<CustomAttributeTypedArgument>.CheckMatch
	|
	|-RVA: 0x4EC18C Offset: 0x4EC18C VA: 0x4EC18C
	|-List<BeforeRenderHelper.OrderBlock>.CheckMatch
	|
	|-RVA: 0x4EE6D4 Offset: 0x4EE6D4 VA: 0x4EE6D4
	|-List<Color32>.CheckMatch
	|
	|-RVA: 0x4F11EC Offset: 0x4F11EC VA: 0x4F11EC
	|-List<RaycastResult>.CheckMatch
	|
	|-RVA: 0x4F3CA8 Offset: 0x4F3CA8 VA: 0x4F3CA8
	|-List<UICharInfo>.CheckMatch
	|
	|-RVA: 0x583240 Offset: 0x583240 VA: 0x583240
	|-List<UILineInfo>.CheckMatch
	|
	|-RVA: 0x585D3C Offset: 0x585D3C VA: 0x585D3C
	|-List<UIVertex>.CheckMatch
	|
	|-RVA: 0x588730 Offset: 0x588730 VA: 0x588730
	|-List<UnitySynchronizationContext.WorkRequest>.CheckMatch
	|
	|-RVA: 0x58AD78 Offset: 0x58AD78 VA: 0x58AD78
	|-List<Vector2>.CheckMatch
	|
	|-RVA: 0x58D38C Offset: 0x58D38C VA: 0x58D38C
	|-List<Vector3>.CheckMatch
	|
	|-RVA: 0x58FA78 Offset: 0x58FA78 VA: 0x58FA78
	|-List<Vector4>.CheckMatch
	*/

	// RVA: -1 Offset: -1
	private int GetIndex(int startIndex, int count, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E2970 Offset: 0x4E2970 VA: 0x4E2970
	|-List<int>.GetIndex
	|
	|-RVA: 0x4E509C Offset: 0x4E509C VA: 0x4E509C
	|-List<object>.GetIndex
	|
	|-RVA: 0x4E7634 Offset: 0x4E7634 VA: 0x4E7634
	|-List<CustomAttributeNamedArgument>.GetIndex
	|
	|-RVA: 0x4E9C8C Offset: 0x4E9C8C VA: 0x4E9C8C
	|-List<CustomAttributeTypedArgument>.GetIndex
	|
	|-RVA: 0x4EC234 Offset: 0x4EC234 VA: 0x4EC234
	|-List<BeforeRenderHelper.OrderBlock>.GetIndex
	|
	|-RVA: 0x4EE77C Offset: 0x4EE77C VA: 0x4EE77C
	|-List<Color32>.GetIndex
	|
	|-RVA: 0x4F1294 Offset: 0x4F1294 VA: 0x4F1294
	|-List<RaycastResult>.GetIndex
	|
	|-RVA: 0x4F3D50 Offset: 0x4F3D50 VA: 0x4F3D50
	|-List<UICharInfo>.GetIndex
	|
	|-RVA: 0x5832E8 Offset: 0x5832E8 VA: 0x5832E8
	|-List<UILineInfo>.GetIndex
	|
	|-RVA: 0x585DE4 Offset: 0x585DE4 VA: 0x585DE4
	|-List<UIVertex>.GetIndex
	|
	|-RVA: 0x5887D8 Offset: 0x5887D8 VA: 0x5887D8
	|-List<UnitySynchronizationContext.WorkRequest>.GetIndex
	|
	|-RVA: 0x58AE20 Offset: 0x58AE20 VA: 0x58AE20
	|-List<Vector2>.GetIndex
	|
	|-RVA: 0x58D434 Offset: 0x58D434 VA: 0x58D434
	|-List<Vector3>.GetIndex
	|
	|-RVA: 0x58FB20 Offset: 0x58FB20 VA: 0x58FB20
	|-List<Vector4>.GetIndex
	*/

	// RVA: -1 Offset: -1
	public List.Enumerator<T> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E2A28 Offset: 0x4E2A28 VA: 0x4E2A28
	|-List<int>.GetEnumerator
	|
	|-RVA: 0x4E5154 Offset: 0x4E5154 VA: 0x4E5154
	|-List<AudioAmbisonicExtensionDefinition>.GetEnumerator
	|-List<AudioSpatializerExtensionDefinition>.GetEnumerator
	|-List<PersistentCall>.GetEnumerator
	|-List<GUILayoutEntry>.GetEnumerator
	|-List<object>.GetEnumerator
	|
	|-RVA: 0x5888BC Offset: 0x5888BC VA: 0x5888BC
	|-List<UnitySynchronizationContext.WorkRequest>.GetEnumerator
	|
	|-RVA: 0x4E7718 Offset: 0x4E7718 VA: 0x4E7718
	|-List<CustomAttributeNamedArgument>.GetEnumerator
	|
	|-RVA: 0x4E9D58 Offset: 0x4E9D58 VA: 0x4E9D58
	|-List<CustomAttributeTypedArgument>.GetEnumerator
	|
	|-RVA: 0x4EC300 Offset: 0x4EC300 VA: 0x4EC300
	|-List<BeforeRenderHelper.OrderBlock>.GetEnumerator
	|
	|-RVA: 0x4EE834 Offset: 0x4EE834 VA: 0x4EE834
	|-List<Color32>.GetEnumerator
	|
	|-RVA: 0x4F1410 Offset: 0x4F1410 VA: 0x4F1410
	|-List<RaycastResult>.GetEnumerator
	|
	|-RVA: 0x4F3E34 Offset: 0x4F3E34 VA: 0x4F3E34
	|-List<UICharInfo>.GetEnumerator
	|
	|-RVA: 0x5833C8 Offset: 0x5833C8 VA: 0x5833C8
	|-List<UILineInfo>.GetEnumerator
	|
	|-RVA: 0x585F5C Offset: 0x585F5C VA: 0x585F5C
	|-List<UIVertex>.GetEnumerator
	|
	|-RVA: 0x58AEEC Offset: 0x58AEEC VA: 0x58AEEC
	|-List<Vector2>.GetEnumerator
	|
	|-RVA: 0x58D518 Offset: 0x58D518 VA: 0x58D518
	|-List<Vector3>.GetEnumerator
	|
	|-RVA: 0x58FC00 Offset: 0x58FC00 VA: 0x58FC00
	|-List<Vector4>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 28
	public int IndexOf(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E2A68 Offset: 0x4E2A68 VA: 0x4E2A68
	|-List<int>.IndexOf
	|
	|-RVA: 0x4E5194 Offset: 0x4E5194 VA: 0x4E5194
	|-List<object>.IndexOf
	|-List<EventSystem>.IndexOf
	|
	|-RVA: 0x4E775C Offset: 0x4E775C VA: 0x4E775C
	|-List<CustomAttributeNamedArgument>.IndexOf
	|
	|-RVA: 0x4E9D90 Offset: 0x4E9D90 VA: 0x4E9D90
	|-List<CustomAttributeTypedArgument>.IndexOf
	|
	|-RVA: 0x4EC338 Offset: 0x4EC338 VA: 0x4EC338
	|-List<BeforeRenderHelper.OrderBlock>.IndexOf
	|
	|-RVA: 0x4EE874 Offset: 0x4EE874 VA: 0x4EE874
	|-List<Color32>.IndexOf
	|
	|-RVA: 0x4F144C Offset: 0x4F144C VA: 0x4F144C
	|-List<RaycastResult>.IndexOf
	|
	|-RVA: 0x4F3E78 Offset: 0x4F3E78 VA: 0x4F3E78
	|-List<UICharInfo>.IndexOf
	|
	|-RVA: 0x5833F4 Offset: 0x5833F4 VA: 0x5833F4
	|-List<UILineInfo>.IndexOf
	|
	|-RVA: 0x585F94 Offset: 0x585F94 VA: 0x585F94
	|-List<UIVertex>.IndexOf
	|
	|-RVA: 0x5888F0 Offset: 0x5888F0 VA: 0x5888F0
	|-List<UnitySynchronizationContext.WorkRequest>.IndexOf
	|
	|-RVA: 0x58AF1C Offset: 0x58AF1C VA: 0x58AF1C
	|-List<Vector2>.IndexOf
	|
	|-RVA: 0x58D54C Offset: 0x58D54C VA: 0x58D54C
	|-List<Vector3>.IndexOf
	|
	|-RVA: 0x58FC2C Offset: 0x58FC2C VA: 0x58FC2C
	|-List<Vector4>.IndexOf
	*/

	// RVA: -1 Offset: -1
	private void Shift(int start, int delta) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E2AA4 Offset: 0x4E2AA4 VA: 0x4E2AA4
	|-List<int>.Shift
	|
	|-RVA: 0x4E51D0 Offset: 0x4E51D0 VA: 0x4E51D0
	|-List<object>.Shift
	|
	|-RVA: 0x4E77A0 Offset: 0x4E77A0 VA: 0x4E77A0
	|-List<CustomAttributeNamedArgument>.Shift
	|
	|-RVA: 0x4E9DCC Offset: 0x4E9DCC VA: 0x4E9DCC
	|-List<CustomAttributeTypedArgument>.Shift
	|
	|-RVA: 0x4EC374 Offset: 0x4EC374 VA: 0x4EC374
	|-List<BeforeRenderHelper.OrderBlock>.Shift
	|
	|-RVA: 0x4EE8B0 Offset: 0x4EE8B0 VA: 0x4EE8B0
	|-List<Color32>.Shift
	|
	|-RVA: 0x4F14F8 Offset: 0x4F14F8 VA: 0x4F14F8
	|-List<RaycastResult>.Shift
	|
	|-RVA: 0x4F3EBC Offset: 0x4F3EBC VA: 0x4F3EBC
	|-List<UICharInfo>.Shift
	|
	|-RVA: 0x583440 Offset: 0x583440 VA: 0x583440
	|-List<UILineInfo>.Shift
	|
	|-RVA: 0x586084 Offset: 0x586084 VA: 0x586084
	|-List<UIVertex>.Shift
	|
	|-RVA: 0x588934 Offset: 0x588934 VA: 0x588934
	|-List<UnitySynchronizationContext.WorkRequest>.Shift
	|
	|-RVA: 0x58AF58 Offset: 0x58AF58 VA: 0x58AF58
	|-List<Vector2>.Shift
	|
	|-RVA: 0x58D590 Offset: 0x58D590 VA: 0x58D590
	|-List<Vector3>.Shift
	|
	|-RVA: 0x58FC78 Offset: 0x58FC78 VA: 0x58FC78
	|-List<Vector4>.Shift
	*/

	// RVA: -1 Offset: -1
	private void CheckIndex(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E2B18 Offset: 0x4E2B18 VA: 0x4E2B18
	|-List<int>.CheckIndex
	|
	|-RVA: 0x4E5244 Offset: 0x4E5244 VA: 0x4E5244
	|-List<object>.CheckIndex
	|
	|-RVA: 0x4E7814 Offset: 0x4E7814 VA: 0x4E7814
	|-List<CustomAttributeNamedArgument>.CheckIndex
	|
	|-RVA: 0x4E9E40 Offset: 0x4E9E40 VA: 0x4E9E40
	|-List<CustomAttributeTypedArgument>.CheckIndex
	|
	|-RVA: 0x4EC3E8 Offset: 0x4EC3E8 VA: 0x4EC3E8
	|-List<BeforeRenderHelper.OrderBlock>.CheckIndex
	|
	|-RVA: 0x4EE924 Offset: 0x4EE924 VA: 0x4EE924
	|-List<Color32>.CheckIndex
	|
	|-RVA: 0x4F156C Offset: 0x4F156C VA: 0x4F156C
	|-List<RaycastResult>.CheckIndex
	|
	|-RVA: 0x4F3F30 Offset: 0x4F3F30 VA: 0x4F3F30
	|-List<UICharInfo>.CheckIndex
	|
	|-RVA: 0x5834B4 Offset: 0x5834B4 VA: 0x5834B4
	|-List<UILineInfo>.CheckIndex
	|
	|-RVA: 0x5860F8 Offset: 0x5860F8 VA: 0x5860F8
	|-List<UIVertex>.CheckIndex
	|
	|-RVA: 0x5889A8 Offset: 0x5889A8 VA: 0x5889A8
	|-List<UnitySynchronizationContext.WorkRequest>.CheckIndex
	|
	|-RVA: 0x58AFCC Offset: 0x58AFCC VA: 0x58AFCC
	|-List<Vector2>.CheckIndex
	|
	|-RVA: 0x58D604 Offset: 0x58D604 VA: 0x58D604
	|-List<Vector3>.CheckIndex
	|
	|-RVA: 0x58FCEC Offset: 0x58FCEC VA: 0x58FCEC
	|-List<Vector4>.CheckIndex
	*/

	// RVA: -1 Offset: -1 Slot: 29
	public void Insert(int index, T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E2BD0 Offset: 0x4E2BD0 VA: 0x4E2BD0
	|-List<int>.Insert
	|
	|-RVA: 0x4E52FC Offset: 0x4E52FC VA: 0x4E52FC
	|-List<object>.Insert
	|-List<EventSystem>.Insert
	|
	|-RVA: 0x4E78CC Offset: 0x4E78CC VA: 0x4E78CC
	|-List<CustomAttributeNamedArgument>.Insert
	|
	|-RVA: 0x4E9EF8 Offset: 0x4E9EF8 VA: 0x4E9EF8
	|-List<CustomAttributeTypedArgument>.Insert
	|
	|-RVA: 0x4EC4A0 Offset: 0x4EC4A0 VA: 0x4EC4A0
	|-List<BeforeRenderHelper.OrderBlock>.Insert
	|
	|-RVA: 0x4EE9DC Offset: 0x4EE9DC VA: 0x4EE9DC
	|-List<Color32>.Insert
	|
	|-RVA: 0x4F1624 Offset: 0x4F1624 VA: 0x4F1624
	|-List<RaycastResult>.Insert
	|
	|-RVA: 0x4F3FE8 Offset: 0x4F3FE8 VA: 0x4F3FE8
	|-List<UICharInfo>.Insert
	|
	|-RVA: 0x58356C Offset: 0x58356C VA: 0x58356C
	|-List<UILineInfo>.Insert
	|
	|-RVA: 0x5861B0 Offset: 0x5861B0 VA: 0x5861B0
	|-List<UIVertex>.Insert
	|
	|-RVA: 0x588A60 Offset: 0x588A60 VA: 0x588A60
	|-List<UnitySynchronizationContext.WorkRequest>.Insert
	|
	|-RVA: 0x58B084 Offset: 0x58B084 VA: 0x58B084
	|-List<Vector2>.Insert
	|
	|-RVA: 0x58D6BC Offset: 0x58D6BC VA: 0x58D6BC
	|-List<Vector3>.Insert
	|
	|-RVA: 0x58FDA4 Offset: 0x58FDA4 VA: 0x58FDA4
	|-List<Vector4>.Insert
	*/

	// RVA: -1 Offset: -1
	private void CheckCollection(IEnumerable<T> collection) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E2CBC Offset: 0x4E2CBC VA: 0x4E2CBC
	|-List<int>.CheckCollection
	|
	|-RVA: 0x4E53E8 Offset: 0x4E53E8 VA: 0x4E53E8
	|-List<object>.CheckCollection
	|
	|-RVA: 0x4E79D4 Offset: 0x4E79D4 VA: 0x4E79D4
	|-List<CustomAttributeNamedArgument>.CheckCollection
	|
	|-RVA: 0x4E9FF4 Offset: 0x4E9FF4 VA: 0x4E9FF4
	|-List<CustomAttributeTypedArgument>.CheckCollection
	|
	|-RVA: 0x4EC59C Offset: 0x4EC59C VA: 0x4EC59C
	|-List<BeforeRenderHelper.OrderBlock>.CheckCollection
	|
	|-RVA: 0x4EEAC8 Offset: 0x4EEAC8 VA: 0x4EEAC8
	|-List<Color32>.CheckCollection
	|
	|-RVA: 0x4F17B4 Offset: 0x4F17B4 VA: 0x4F17B4
	|-List<RaycastResult>.CheckCollection
	|
	|-RVA: 0x4F40F0 Offset: 0x4F40F0 VA: 0x4F40F0
	|-List<UICharInfo>.CheckCollection
	|
	|-RVA: 0x583678 Offset: 0x583678 VA: 0x583678
	|-List<UILineInfo>.CheckCollection
	|
	|-RVA: 0x5862E8 Offset: 0x5862E8 VA: 0x5862E8
	|-List<UIVertex>.CheckCollection
	|
	|-RVA: 0x588B68 Offset: 0x588B68 VA: 0x588B68
	|-List<UnitySynchronizationContext.WorkRequest>.CheckCollection
	|
	|-RVA: 0x58B180 Offset: 0x58B180 VA: 0x58B180
	|-List<Vector2>.CheckCollection
	|
	|-RVA: 0x58D7C4 Offset: 0x58D7C4 VA: 0x58D7C4
	|-List<Vector3>.CheckCollection
	|
	|-RVA: 0x58FEB0 Offset: 0x58FEB0 VA: 0x58FEB0
	|-List<Vector4>.CheckCollection
	*/

	// RVA: -1 Offset: -1 Slot: 26
	public bool Remove(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E2D64 Offset: 0x4E2D64 VA: 0x4E2D64
	|-List<int>.Remove
	|
	|-RVA: 0x4E5490 Offset: 0x4E5490 VA: 0x4E5490
	|-List<object>.Remove
	|-List<BaseRaycaster>.Remove
	|-List<EventSystem>.Remove
	|-List<GameObject>.Remove
	|-List<PlayerEditorConnectionEvents.MessageTypeSubscribers>.Remove
	|-List<Image>.Remove
	|-List<Selectable>.Remove
	|-List<Toggle>.Remove
	|
	|-RVA: 0x4E7A7C Offset: 0x4E7A7C VA: 0x4E7A7C
	|-List<CustomAttributeNamedArgument>.Remove
	|
	|-RVA: 0x4EA09C Offset: 0x4EA09C VA: 0x4EA09C
	|-List<CustomAttributeTypedArgument>.Remove
	|
	|-RVA: 0x4EC644 Offset: 0x4EC644 VA: 0x4EC644
	|-List<BeforeRenderHelper.OrderBlock>.Remove
	|
	|-RVA: 0x4EEB70 Offset: 0x4EEB70 VA: 0x4EEB70
	|-List<Color32>.Remove
	|
	|-RVA: 0x4F185C Offset: 0x4F185C VA: 0x4F185C
	|-List<RaycastResult>.Remove
	|
	|-RVA: 0x4F4198 Offset: 0x4F4198 VA: 0x4F4198
	|-List<UICharInfo>.Remove
	|
	|-RVA: 0x583720 Offset: 0x583720 VA: 0x583720
	|-List<UILineInfo>.Remove
	|
	|-RVA: 0x586390 Offset: 0x586390 VA: 0x586390
	|-List<UIVertex>.Remove
	|
	|-RVA: 0x588C10 Offset: 0x588C10 VA: 0x588C10
	|-List<UnitySynchronizationContext.WorkRequest>.Remove
	|
	|-RVA: 0x58B228 Offset: 0x58B228 VA: 0x58B228
	|-List<Vector2>.Remove
	|
	|-RVA: 0x58D86C Offset: 0x58D86C VA: 0x58D86C
	|-List<Vector3>.Remove
	|
	|-RVA: 0x58FF58 Offset: 0x58FF58 VA: 0x58FF58
	|-List<Vector4>.Remove
	*/

	// RVA: -1 Offset: -1
	public int RemoveAll(Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E2DEC Offset: 0x4E2DEC VA: 0x4E2DEC
	|-List<int>.RemoveAll
	|
	|-RVA: 0x4E5518 Offset: 0x4E5518 VA: 0x4E5518
	|-List<object>.RemoveAll
	|-List<Component>.RemoveAll
	|-List<BaseInvokableCall>.RemoveAll
	|
	|-RVA: 0x4E7B20 Offset: 0x4E7B20 VA: 0x4E7B20
	|-List<CustomAttributeNamedArgument>.RemoveAll
	|
	|-RVA: 0x4EA12C Offset: 0x4EA12C VA: 0x4EA12C
	|-List<CustomAttributeTypedArgument>.RemoveAll
	|
	|-RVA: 0x4EC6D4 Offset: 0x4EC6D4 VA: 0x4EC6D4
	|-List<BeforeRenderHelper.OrderBlock>.RemoveAll
	|
	|-RVA: 0x4EEBF8 Offset: 0x4EEBF8 VA: 0x4EEBF8
	|-List<Color32>.RemoveAll
	|
	|-RVA: 0x4F1984 Offset: 0x4F1984 VA: 0x4F1984
	|-List<RaycastResult>.RemoveAll
	|
	|-RVA: 0x4F423C Offset: 0x4F423C VA: 0x4F423C
	|-List<UICharInfo>.RemoveAll
	|
	|-RVA: 0x5837CC Offset: 0x5837CC VA: 0x5837CC
	|-List<UILineInfo>.RemoveAll
	|
	|-RVA: 0x5864D4 Offset: 0x5864D4 VA: 0x5864D4
	|-List<UIVertex>.RemoveAll
	|
	|-RVA: 0x588CB4 Offset: 0x588CB4 VA: 0x588CB4
	|-List<UnitySynchronizationContext.WorkRequest>.RemoveAll
	|
	|-RVA: 0x58B2B8 Offset: 0x58B2B8 VA: 0x58B2B8
	|-List<Vector2>.RemoveAll
	|
	|-RVA: 0x58D910 Offset: 0x58D910 VA: 0x58D910
	|-List<Vector3>.RemoveAll
	|
	|-RVA: 0x590004 Offset: 0x590004 VA: 0x590004
	|-List<Vector4>.RemoveAll
	*/

	// RVA: -1 Offset: -1 Slot: 30
	public void RemoveAt(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E3080 Offset: 0x4E3080 VA: 0x4E3080
	|-List<int>.RemoveAt
	|
	|-RVA: 0x4E57AC Offset: 0x4E57AC VA: 0x4E57AC
	|-List<object>.RemoveAt
	|-List<AudioSourceExtension>.RemoveAt
	|-List<BaseInputModule>.RemoveAt
	|-List<EventSystem>.RemoveAt
	|-List<Image>.RemoveAt
	|-List<StencilMaterial.MatEntry>.RemoveAt
	|
	|-RVA: 0x4E7E50 Offset: 0x4E7E50 VA: 0x4E7E50
	|-List<CustomAttributeNamedArgument>.RemoveAt
	|
	|-RVA: 0x4EA408 Offset: 0x4EA408 VA: 0x4EA408
	|-List<CustomAttributeTypedArgument>.RemoveAt
	|
	|-RVA: 0x4EC9B0 Offset: 0x4EC9B0 VA: 0x4EC9B0
	|-List<BeforeRenderHelper.OrderBlock>.RemoveAt
	|
	|-RVA: 0x4EEE8C Offset: 0x4EEE8C VA: 0x4EEE8C
	|-List<Color32>.RemoveAt
	|
	|-RVA: 0x4F1E14 Offset: 0x4F1E14 VA: 0x4F1E14
	|-List<RaycastResult>.RemoveAt
	|
	|-RVA: 0x4F456C Offset: 0x4F456C VA: 0x4F456C
	|-List<UICharInfo>.RemoveAt
	|
	|-RVA: 0x583B04 Offset: 0x583B04 VA: 0x583B04
	|-List<UILineInfo>.RemoveAt
	|
	|-RVA: 0x5868F4 Offset: 0x5868F4 VA: 0x5868F4
	|-List<UIVertex>.RemoveAt
	|
	|-RVA: 0x588FE4 Offset: 0x588FE4 VA: 0x588FE4
	|-List<UnitySynchronizationContext.WorkRequest>.RemoveAt
	|
	|-RVA: 0x58B594 Offset: 0x58B594 VA: 0x58B594
	|-List<Vector2>.RemoveAt
	|
	|-RVA: 0x58DC40 Offset: 0x58DC40 VA: 0x58DC40
	|-List<Vector3>.RemoveAt
	|
	|-RVA: 0x59033C Offset: 0x59033C VA: 0x59033C
	|-List<Vector4>.RemoveAt
	*/

	// RVA: -1 Offset: -1
	public void Reverse() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E3180 Offset: 0x4E3180 VA: 0x4E3180
	|-List<int>.Reverse
	|
	|-RVA: 0x4E58AC Offset: 0x4E58AC VA: 0x4E58AC
	|-List<object>.Reverse
	|
	|-RVA: 0x4E7F50 Offset: 0x4E7F50 VA: 0x4E7F50
	|-List<CustomAttributeNamedArgument>.Reverse
	|
	|-RVA: 0x4EA508 Offset: 0x4EA508 VA: 0x4EA508
	|-List<CustomAttributeTypedArgument>.Reverse
	|
	|-RVA: 0x4ECAB0 Offset: 0x4ECAB0 VA: 0x4ECAB0
	|-List<BeforeRenderHelper.OrderBlock>.Reverse
	|
	|-RVA: 0x4EEF8C Offset: 0x4EEF8C VA: 0x4EEF8C
	|-List<Color32>.Reverse
	|
	|-RVA: 0x4F1F14 Offset: 0x4F1F14 VA: 0x4F1F14
	|-List<RaycastResult>.Reverse
	|
	|-RVA: 0x4F466C Offset: 0x4F466C VA: 0x4F466C
	|-List<UICharInfo>.Reverse
	|
	|-RVA: 0x583C04 Offset: 0x583C04 VA: 0x583C04
	|-List<UILineInfo>.Reverse
	|
	|-RVA: 0x5869F4 Offset: 0x5869F4 VA: 0x5869F4
	|-List<UIVertex>.Reverse
	|
	|-RVA: 0x5890E4 Offset: 0x5890E4 VA: 0x5890E4
	|-List<UnitySynchronizationContext.WorkRequest>.Reverse
	|
	|-RVA: 0x58B694 Offset: 0x58B694 VA: 0x58B694
	|-List<Vector2>.Reverse
	|
	|-RVA: 0x58DD40 Offset: 0x58DD40 VA: 0x58DD40
	|-List<Vector3>.Reverse
	|
	|-RVA: 0x59043C Offset: 0x59043C VA: 0x59043C
	|-List<Vector4>.Reverse
	*/

	// RVA: -1 Offset: -1
	public void Sort() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E31B0 Offset: 0x4E31B0 VA: 0x4E31B0
	|-List<int>.Sort
	|
	|-RVA: 0x4E58DC Offset: 0x4E58DC VA: 0x4E58DC
	|-List<object>.Sort
	|
	|-RVA: 0x4E7F80 Offset: 0x4E7F80 VA: 0x4E7F80
	|-List<CustomAttributeNamedArgument>.Sort
	|
	|-RVA: 0x4EA538 Offset: 0x4EA538 VA: 0x4EA538
	|-List<CustomAttributeTypedArgument>.Sort
	|
	|-RVA: 0x4ECAE0 Offset: 0x4ECAE0 VA: 0x4ECAE0
	|-List<BeforeRenderHelper.OrderBlock>.Sort
	|
	|-RVA: 0x4EEFBC Offset: 0x4EEFBC VA: 0x4EEFBC
	|-List<Color32>.Sort
	|
	|-RVA: 0x4F1F44 Offset: 0x4F1F44 VA: 0x4F1F44
	|-List<RaycastResult>.Sort
	|
	|-RVA: 0x4F469C Offset: 0x4F469C VA: 0x4F469C
	|-List<UICharInfo>.Sort
	|
	|-RVA: 0x583C34 Offset: 0x583C34 VA: 0x583C34
	|-List<UILineInfo>.Sort
	|
	|-RVA: 0x586A24 Offset: 0x586A24 VA: 0x586A24
	|-List<UIVertex>.Sort
	|
	|-RVA: 0x589114 Offset: 0x589114 VA: 0x589114
	|-List<UnitySynchronizationContext.WorkRequest>.Sort
	|
	|-RVA: 0x58B6C4 Offset: 0x58B6C4 VA: 0x58B6C4
	|-List<Vector2>.Sort
	|
	|-RVA: 0x58DD70 Offset: 0x58DD70 VA: 0x58DD70
	|-List<Vector3>.Sort
	|
	|-RVA: 0x59046C Offset: 0x59046C VA: 0x59046C
	|-List<Vector4>.Sort
	*/

	// RVA: -1 Offset: -1
	public void Sort(Comparison<T> comparison) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E329C Offset: 0x4E329C VA: 0x4E329C
	|-List<int>.Sort
	|
	|-RVA: 0x4E59C8 Offset: 0x4E59C8 VA: 0x4E59C8
	|-List<object>.Sort
	|-List<Graphic>.Sort
	|
	|-RVA: 0x4E806C Offset: 0x4E806C VA: 0x4E806C
	|-List<CustomAttributeNamedArgument>.Sort
	|
	|-RVA: 0x4EA624 Offset: 0x4EA624 VA: 0x4EA624
	|-List<CustomAttributeTypedArgument>.Sort
	|
	|-RVA: 0x4ECBCC Offset: 0x4ECBCC VA: 0x4ECBCC
	|-List<BeforeRenderHelper.OrderBlock>.Sort
	|
	|-RVA: 0x4EF0A8 Offset: 0x4EF0A8 VA: 0x4EF0A8
	|-List<Color32>.Sort
	|
	|-RVA: 0x4F2030 Offset: 0x4F2030 VA: 0x4F2030
	|-List<RaycastResult>.Sort
	|
	|-RVA: 0x4F4788 Offset: 0x4F4788 VA: 0x4F4788
	|-List<UICharInfo>.Sort
	|
	|-RVA: 0x583D20 Offset: 0x583D20 VA: 0x583D20
	|-List<UILineInfo>.Sort
	|
	|-RVA: 0x586B10 Offset: 0x586B10 VA: 0x586B10
	|-List<UIVertex>.Sort
	|
	|-RVA: 0x589200 Offset: 0x589200 VA: 0x589200
	|-List<UnitySynchronizationContext.WorkRequest>.Sort
	|
	|-RVA: 0x58B7B0 Offset: 0x58B7B0 VA: 0x58B7B0
	|-List<Vector2>.Sort
	|
	|-RVA: 0x58DE5C Offset: 0x58DE5C VA: 0x58DE5C
	|-List<Vector3>.Sort
	|
	|-RVA: 0x590558 Offset: 0x590558 VA: 0x590558
	|-List<Vector4>.Sort
	*/

	// RVA: -1 Offset: -1
	public T[] ToArray() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E5A08 Offset: 0x4E5A08 VA: 0x4E5A08
	|-List<Type>.ToArray
	|-List<object>.ToArray
	|-List<string>.ToArray
	|
	|-RVA: 0x4E32DC Offset: 0x4E32DC VA: 0x4E32DC
	|-List<int>.ToArray
	|
	|-RVA: 0x4E80AC Offset: 0x4E80AC VA: 0x4E80AC
	|-List<CustomAttributeNamedArgument>.ToArray
	|
	|-RVA: 0x4EA664 Offset: 0x4EA664 VA: 0x4EA664
	|-List<CustomAttributeTypedArgument>.ToArray
	|
	|-RVA: 0x4ECC0C Offset: 0x4ECC0C VA: 0x4ECC0C
	|-List<BeforeRenderHelper.OrderBlock>.ToArray
	|
	|-RVA: 0x4EF0E8 Offset: 0x4EF0E8 VA: 0x4EF0E8
	|-List<Color32>.ToArray
	|
	|-RVA: 0x4F2070 Offset: 0x4F2070 VA: 0x4F2070
	|-List<RaycastResult>.ToArray
	|
	|-RVA: 0x4F47C8 Offset: 0x4F47C8 VA: 0x4F47C8
	|-List<UICharInfo>.ToArray
	|
	|-RVA: 0x583D60 Offset: 0x583D60 VA: 0x583D60
	|-List<UILineInfo>.ToArray
	|
	|-RVA: 0x586B50 Offset: 0x586B50 VA: 0x586B50
	|-List<UIVertex>.ToArray
	|
	|-RVA: 0x589240 Offset: 0x589240 VA: 0x589240
	|-List<UnitySynchronizationContext.WorkRequest>.ToArray
	|
	|-RVA: 0x58B7F0 Offset: 0x58B7F0 VA: 0x58B7F0
	|-List<Vector2>.ToArray
	|
	|-RVA: 0x58DE9C Offset: 0x58DE9C VA: 0x58DE9C
	|-List<Vector3>.ToArray
	|
	|-RVA: 0x590598 Offset: 0x590598 VA: 0x590598
	|-List<Vector4>.ToArray
	*/

	// RVA: -1 Offset: -1
	public void TrimExcess() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E3338 Offset: 0x4E3338 VA: 0x4E3338
	|-List<int>.TrimExcess
	|
	|-RVA: 0x4E5A64 Offset: 0x4E5A64 VA: 0x4E5A64
	|-List<object>.TrimExcess
	|
	|-RVA: 0x4E8108 Offset: 0x4E8108 VA: 0x4E8108
	|-List<CustomAttributeNamedArgument>.TrimExcess
	|
	|-RVA: 0x4EA6C0 Offset: 0x4EA6C0 VA: 0x4EA6C0
	|-List<CustomAttributeTypedArgument>.TrimExcess
	|
	|-RVA: 0x4ECC68 Offset: 0x4ECC68 VA: 0x4ECC68
	|-List<BeforeRenderHelper.OrderBlock>.TrimExcess
	|
	|-RVA: 0x4EF144 Offset: 0x4EF144 VA: 0x4EF144
	|-List<Color32>.TrimExcess
	|
	|-RVA: 0x4F20CC Offset: 0x4F20CC VA: 0x4F20CC
	|-List<RaycastResult>.TrimExcess
	|
	|-RVA: 0x4F4824 Offset: 0x4F4824 VA: 0x4F4824
	|-List<UICharInfo>.TrimExcess
	|
	|-RVA: 0x583DBC Offset: 0x583DBC VA: 0x583DBC
	|-List<UILineInfo>.TrimExcess
	|
	|-RVA: 0x586BAC Offset: 0x586BAC VA: 0x586BAC
	|-List<UIVertex>.TrimExcess
	|
	|-RVA: 0x58929C Offset: 0x58929C VA: 0x58929C
	|-List<UnitySynchronizationContext.WorkRequest>.TrimExcess
	|
	|-RVA: 0x58B84C Offset: 0x58B84C VA: 0x58B84C
	|-List<Vector2>.TrimExcess
	|
	|-RVA: 0x58DEF8 Offset: 0x58DEF8 VA: 0x58DEF8
	|-List<Vector3>.TrimExcess
	|
	|-RVA: 0x5905F4 Offset: 0x5905F4 VA: 0x5905F4
	|-List<Vector4>.TrimExcess
	*/

	// RVA: -1 Offset: -1
	public int get_Capacity() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E337C Offset: 0x4E337C VA: 0x4E337C
	|-List<int>.get_Capacity
	|
	|-RVA: 0x4E5AA8 Offset: 0x4E5AA8 VA: 0x4E5AA8
	|-List<object>.get_Capacity
	|
	|-RVA: 0x4E814C Offset: 0x4E814C VA: 0x4E814C
	|-List<CustomAttributeNamedArgument>.get_Capacity
	|
	|-RVA: 0x4EA704 Offset: 0x4EA704 VA: 0x4EA704
	|-List<CustomAttributeTypedArgument>.get_Capacity
	|
	|-RVA: 0x4ECCAC Offset: 0x4ECCAC VA: 0x4ECCAC
	|-List<BeforeRenderHelper.OrderBlock>.get_Capacity
	|
	|-RVA: 0x4EF188 Offset: 0x4EF188 VA: 0x4EF188
	|-List<Color32>.get_Capacity
	|
	|-RVA: 0x4F2110 Offset: 0x4F2110 VA: 0x4F2110
	|-List<RaycastResult>.get_Capacity
	|
	|-RVA: 0x4F4868 Offset: 0x4F4868 VA: 0x4F4868
	|-List<UICharInfo>.get_Capacity
	|
	|-RVA: 0x583E00 Offset: 0x583E00 VA: 0x583E00
	|-List<UILineInfo>.get_Capacity
	|
	|-RVA: 0x586BF0 Offset: 0x586BF0 VA: 0x586BF0
	|-List<UIVertex>.get_Capacity
	|
	|-RVA: 0x5892E0 Offset: 0x5892E0 VA: 0x5892E0
	|-List<UnitySynchronizationContext.WorkRequest>.get_Capacity
	|
	|-RVA: 0x58B890 Offset: 0x58B890 VA: 0x58B890
	|-List<Vector2>.get_Capacity
	|
	|-RVA: 0x58DF3C Offset: 0x58DF3C VA: 0x58DF3C
	|-List<Vector3>.get_Capacity
	|
	|-RVA: 0x590638 Offset: 0x590638 VA: 0x590638
	|-List<Vector4>.get_Capacity
	*/

	// RVA: -1 Offset: -1
	public void set_Capacity(int value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E33A0 Offset: 0x4E33A0 VA: 0x4E33A0
	|-List<int>.set_Capacity
	|
	|-RVA: 0x4E5ACC Offset: 0x4E5ACC VA: 0x4E5ACC
	|-List<object>.set_Capacity
	|
	|-RVA: 0x4E8170 Offset: 0x4E8170 VA: 0x4E8170
	|-List<CustomAttributeNamedArgument>.set_Capacity
	|
	|-RVA: 0x4EA728 Offset: 0x4EA728 VA: 0x4EA728
	|-List<CustomAttributeTypedArgument>.set_Capacity
	|
	|-RVA: 0x4ECCD0 Offset: 0x4ECCD0 VA: 0x4ECCD0
	|-List<BeforeRenderHelper.OrderBlock>.set_Capacity
	|
	|-RVA: 0x4EF1AC Offset: 0x4EF1AC VA: 0x4EF1AC
	|-List<Color32>.set_Capacity
	|
	|-RVA: 0x4F2134 Offset: 0x4F2134 VA: 0x4F2134
	|-List<RaycastResult>.set_Capacity
	|
	|-RVA: 0x4F488C Offset: 0x4F488C VA: 0x4F488C
	|-List<UICharInfo>.set_Capacity
	|
	|-RVA: 0x583E24 Offset: 0x583E24 VA: 0x583E24
	|-List<UILineInfo>.set_Capacity
	|
	|-RVA: 0x586C14 Offset: 0x586C14 VA: 0x586C14
	|-List<UIVertex>.set_Capacity
	|
	|-RVA: 0x589304 Offset: 0x589304 VA: 0x589304
	|-List<UnitySynchronizationContext.WorkRequest>.set_Capacity
	|
	|-RVA: 0x58B8B4 Offset: 0x58B8B4 VA: 0x58B8B4
	|-List<Vector2>.set_Capacity
	|
	|-RVA: 0x58DF60 Offset: 0x58DF60 VA: 0x58DF60
	|-List<Vector3>.set_Capacity
	|
	|-RVA: 0x59065C Offset: 0x59065C VA: 0x59065C
	|-List<Vector4>.set_Capacity
	*/

	// RVA: -1 Offset: -1 Slot: 20
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E3460 Offset: 0x4E3460 VA: 0x4E3460
	|-List<int>.get_Count
	|
	|-RVA: 0x4E5B8C Offset: 0x4E5B8C VA: 0x4E5B8C
	|-List<object>.get_Count
	|-List<string>.get_Count
	|-List<AudioSourceExtension>.get_Count
	|-List<Canvas>.get_Count
	|-List<CanvasGroup>.get_Count
	|-List<Component>.get_Count
	|-List<BaseInputModule>.get_Count
	|-List<BaseRaycaster>.get_Count
	|-List<EventSystem>.get_Count
	|-List<EventTrigger.Entry>.get_Count
	|-List<IEventSystemHandler>.get_Count
	|-List<PointerInputModule.ButtonState>.get_Count
	|-List<BaseInvokableCall>.get_Count
	|-List<GUILayoutEntry>.get_Count
	|-List<GameObject>.get_Count
	|-List<RectTransform>.get_Count
	|-List<Sprite>.get_Count
	|-List<Transform>.get_Count
	|-List<Dropdown.DropdownItem>.get_Count
	|-List<Dropdown.OptionData>.get_Count
	|-List<Graphic>.get_Count
	|-List<Image>.get_Count
	|-List<Mask>.get_Count
	|-List<RectMask2D>.get_Count
	|-List<Selectable>.get_Count
	|-List<StencilMaterial.MatEntry>.get_Count
	|-List<Toggle>.get_Count
	|
	|-RVA: 0x4E8230 Offset: 0x4E8230 VA: 0x4E8230
	|-List<CustomAttributeNamedArgument>.get_Count
	|
	|-RVA: 0x4EA7E8 Offset: 0x4EA7E8 VA: 0x4EA7E8
	|-List<CustomAttributeTypedArgument>.get_Count
	|
	|-RVA: 0x4ECD90 Offset: 0x4ECD90 VA: 0x4ECD90
	|-List<BeforeRenderHelper.OrderBlock>.get_Count
	|
	|-RVA: 0x4EF26C Offset: 0x4EF26C VA: 0x4EF26C
	|-List<Color32>.get_Count
	|
	|-RVA: 0x4F21F4 Offset: 0x4F21F4 VA: 0x4F21F4
	|-List<RaycastResult>.get_Count
	|
	|-RVA: 0x4F494C Offset: 0x4F494C VA: 0x4F494C
	|-List<UICharInfo>.get_Count
	|
	|-RVA: 0x583EE4 Offset: 0x583EE4 VA: 0x583EE4
	|-List<UILineInfo>.get_Count
	|
	|-RVA: 0x586CD4 Offset: 0x586CD4 VA: 0x586CD4
	|-List<UIVertex>.get_Count
	|
	|-RVA: 0x5893C4 Offset: 0x5893C4 VA: 0x5893C4
	|-List<UnitySynchronizationContext.WorkRequest>.get_Count
	|
	|-RVA: 0x58B974 Offset: 0x58B974 VA: 0x58B974
	|-List<Vector2>.get_Count
	|
	|-RVA: 0x58E020 Offset: 0x58E020 VA: 0x58E020
	|-List<Vector3>.get_Count
	|
	|-RVA: 0x59071C Offset: 0x59071C VA: 0x59071C
	|-List<Vector4>.get_Count
	*/

	// RVA: -1 Offset: -1 Slot: 31
	public T get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E5B94 Offset: 0x4E5B94 VA: 0x4E5B94
	|-List<string>.get_Item
	|-List<AudioSourceExtension>.get_Item
	|-List<Canvas>.get_Item
	|-List<CanvasGroup>.get_Item
	|-List<Component>.get_Item
	|-List<BaseInputModule>.get_Item
	|-List<BaseRaycaster>.get_Item
	|-List<EventSystem>.get_Item
	|-List<EventTrigger.Entry>.get_Item
	|-List<IEventSystemHandler>.get_Item
	|-List<PointerInputModule.ButtonState>.get_Item
	|-List<BaseInvokableCall>.get_Item
	|-List<GUILayoutEntry>.get_Item
	|-List<GameObject>.get_Item
	|-List<RectTransform>.get_Item
	|-List<Sprite>.get_Item
	|-List<Transform>.get_Item
	|-List<Dropdown.DropdownItem>.get_Item
	|-List<Dropdown.OptionData>.get_Item
	|-List<Graphic>.get_Item
	|-List<Image>.get_Item
	|-List<Mask>.get_Item
	|-List<RectMask2D>.get_Item
	|-List<Selectable>.get_Item
	|-List<StencilMaterial.MatEntry>.get_Item
	|-List<Toggle>.get_Item
	|-List<object>.get_Item
	|
	|-RVA: 0x4ECD98 Offset: 0x4ECD98 VA: 0x4ECD98
	|-List<BeforeRenderHelper.OrderBlock>.get_Item
	|
	|-RVA: 0x4EF274 Offset: 0x4EF274 VA: 0x4EF274
	|-List<Color32>.get_Item
	|
	|-RVA: 0x4F21FC Offset: 0x4F21FC VA: 0x4F21FC
	|-List<RaycastResult>.get_Item
	|
	|-RVA: 0x586CDC Offset: 0x586CDC VA: 0x586CDC
	|-List<UIVertex>.get_Item
	|
	|-RVA: 0x58B97C Offset: 0x58B97C VA: 0x58B97C
	|-List<Vector2>.get_Item
	|
	|-RVA: 0x58E028 Offset: 0x58E028 VA: 0x58E028
	|-List<Vector3>.get_Item
	|
	|-RVA: 0x590724 Offset: 0x590724 VA: 0x590724
	|-List<Vector4>.get_Item
	|
	|-RVA: 0x4E3468 Offset: 0x4E3468 VA: 0x4E3468
	|-List<int>.get_Item
	|
	|-RVA: 0x4E8238 Offset: 0x4E8238 VA: 0x4E8238
	|-List<CustomAttributeNamedArgument>.get_Item
	|
	|-RVA: 0x4EA7F0 Offset: 0x4EA7F0 VA: 0x4EA7F0
	|-List<CustomAttributeTypedArgument>.get_Item
	|
	|-RVA: 0x4F4954 Offset: 0x4F4954 VA: 0x4F4954
	|-List<UICharInfo>.get_Item
	|
	|-RVA: 0x583EEC Offset: 0x583EEC VA: 0x583EEC
	|-List<UILineInfo>.get_Item
	|
	|-RVA: 0x5893CC Offset: 0x5893CC VA: 0x5893CC
	|-List<UnitySynchronizationContext.WorkRequest>.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 32
	public void set_Item(int index, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4E3554 Offset: 0x4E3554 VA: 0x4E3554
	|-List<int>.set_Item
	|
	|-RVA: 0x4E5C80 Offset: 0x4E5C80 VA: 0x4E5C80
	|-List<object>.set_Item
	|-List<AudioSourceExtension>.set_Item
	|
	|-RVA: 0x4E8338 Offset: 0x4E8338 VA: 0x4E8338
	|-List<CustomAttributeNamedArgument>.set_Item
	|
	|-RVA: 0x4EA8EC Offset: 0x4EA8EC VA: 0x4EA8EC
	|-List<CustomAttributeTypedArgument>.set_Item
	|
	|-RVA: 0x4ECE94 Offset: 0x4ECE94 VA: 0x4ECE94
	|-List<BeforeRenderHelper.OrderBlock>.set_Item
	|
	|-RVA: 0x4EF360 Offset: 0x4EF360 VA: 0x4EF360
	|-List<Color32>.set_Item
	|
	|-RVA: 0x4F2304 Offset: 0x4F2304 VA: 0x4F2304
	|-List<RaycastResult>.set_Item
	|
	|-RVA: 0x4F4A54 Offset: 0x4F4A54 VA: 0x4F4A54
	|-List<UICharInfo>.set_Item
	|
	|-RVA: 0x583FE4 Offset: 0x583FE4 VA: 0x583FE4
	|-List<UILineInfo>.set_Item
	|
	|-RVA: 0x586DDC Offset: 0x586DDC VA: 0x586DDC
	|-List<UIVertex>.set_Item
	|
	|-RVA: 0x5894CC Offset: 0x5894CC VA: 0x5894CC
	|-List<UnitySynchronizationContext.WorkRequest>.set_Item
	|
	|-RVA: 0x58BA78 Offset: 0x58BA78 VA: 0x58BA78
	|-List<Vector2>.set_Item
	|
	|-RVA: 0x58E128 Offset: 0x58E128 VA: 0x58E128
	|-List<Vector3>.set_Item
	|
	|-RVA: 0x59081C Offset: 0x59081C VA: 0x59081C
	|-List<Vector4>.set_Item
	*/
}

// Namespace: 
[Serializable]
public struct List.Enumerator<T> : IEnumerator, IDisposable, IEnumerator<T> // TypeDefIndex: 176
{
	// Fields
	private List<T> l; // 0x0
	private int next; // 0x0
	private int ver; // 0x0
	private T current; // 0x0

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(List<T> l) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF03C8 Offset: 0xF03C8 VA: 0xF03C8
	|-List.Enumerator<int>..ctor
	|
	|-RVA: 0xF042C Offset: 0xF042C VA: 0xF042C
	|-List.Enumerator<object>..ctor
	|
	|-RVA: 0xF0490 Offset: 0xF0490 VA: 0xF0490
	|-List.Enumerator<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0xF0500 Offset: 0xF0500 VA: 0xF0500
	|-List.Enumerator<CustomAttributeTypedArgument>..ctor
	|
	|-RVA: 0xF0570 Offset: 0xF0570 VA: 0xF0570
	|-List.Enumerator<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0xF05E0 Offset: 0xF05E0 VA: 0xF05E0
	|-List.Enumerator<Color32>..ctor
	|
	|-RVA: 0xF0644 Offset: 0xF0644 VA: 0xF0644
	|-List.Enumerator<RaycastResult>..ctor
	|
	|-RVA: 0xF06C8 Offset: 0xF06C8 VA: 0xF06C8
	|-List.Enumerator<UICharInfo>..ctor
	|
	|-RVA: 0xF0738 Offset: 0xF0738 VA: 0xF0738
	|-List.Enumerator<UILineInfo>..ctor
	|
	|-RVA: 0xF07A4 Offset: 0xF07A4 VA: 0xF07A4
	|-List.Enumerator<UIVertex>..ctor
	|
	|-RVA: 0xF0818 Offset: 0xF0818 VA: 0xF0818
	|-List.Enumerator<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0xF0888 Offset: 0xF0888 VA: 0xF0888
	|-List.Enumerator<Vector2>..ctor
	|
	|-RVA: 0xF08F8 Offset: 0xF08F8 VA: 0xF08F8
	|-List.Enumerator<Vector3>..ctor
	|
	|-RVA: 0xF0968 Offset: 0xF0968 VA: 0xF0968
	|-List.Enumerator<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private void System.Collections.IEnumerator.Reset() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF03F8 Offset: 0xF03F8 VA: 0xF03F8
	|-List.Enumerator<int>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xF045C Offset: 0xF045C VA: 0xF045C
	|-List.Enumerator<object>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xF04C0 Offset: 0xF04C0 VA: 0xF04C0
	|-List.Enumerator<CustomAttributeNamedArgument>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xF0530 Offset: 0xF0530 VA: 0xF0530
	|-List.Enumerator<CustomAttributeTypedArgument>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xF05A0 Offset: 0xF05A0 VA: 0xF05A0
	|-List.Enumerator<BeforeRenderHelper.OrderBlock>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xF0610 Offset: 0xF0610 VA: 0xF0610
	|-List.Enumerator<Color32>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xF0674 Offset: 0xF0674 VA: 0xF0674
	|-List.Enumerator<RaycastResult>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xF06F8 Offset: 0xF06F8 VA: 0xF06F8
	|-List.Enumerator<UICharInfo>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xF0768 Offset: 0xF0768 VA: 0xF0768
	|-List.Enumerator<UILineInfo>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xF07D4 Offset: 0xF07D4 VA: 0xF07D4
	|-List.Enumerator<UIVertex>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xF0848 Offset: 0xF0848 VA: 0xF0848
	|-List.Enumerator<UnitySynchronizationContext.WorkRequest>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xF08B8 Offset: 0xF08B8 VA: 0xF08B8
	|-List.Enumerator<Vector2>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xF0928 Offset: 0xF0928 VA: 0xF0928
	|-List.Enumerator<Vector3>.System.Collections.IEnumerator.Reset
	|
	|-RVA: 0xF0998 Offset: 0xF0998 VA: 0xF0998
	|-List.Enumerator<Vector4>.System.Collections.IEnumerator.Reset
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0400 Offset: 0xF0400 VA: 0xF0400
	|-List.Enumerator<int>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF0464 Offset: 0xF0464 VA: 0xF0464
	|-List.Enumerator<object>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF04C8 Offset: 0xF04C8 VA: 0xF04C8
	|-List.Enumerator<CustomAttributeNamedArgument>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF0538 Offset: 0xF0538 VA: 0xF0538
	|-List.Enumerator<CustomAttributeTypedArgument>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF05A8 Offset: 0xF05A8 VA: 0xF05A8
	|-List.Enumerator<BeforeRenderHelper.OrderBlock>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF0618 Offset: 0xF0618 VA: 0xF0618
	|-List.Enumerator<Color32>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF067C Offset: 0xF067C VA: 0xF067C
	|-List.Enumerator<RaycastResult>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF0700 Offset: 0xF0700 VA: 0xF0700
	|-List.Enumerator<UICharInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF0770 Offset: 0xF0770 VA: 0xF0770
	|-List.Enumerator<UILineInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF07DC Offset: 0xF07DC VA: 0xF07DC
	|-List.Enumerator<UIVertex>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF0850 Offset: 0xF0850 VA: 0xF0850
	|-List.Enumerator<UnitySynchronizationContext.WorkRequest>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF08C0 Offset: 0xF08C0 VA: 0xF08C0
	|-List.Enumerator<Vector2>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF0930 Offset: 0xF0930 VA: 0xF0930
	|-List.Enumerator<Vector3>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF09A0 Offset: 0xF09A0 VA: 0xF09A0
	|-List.Enumerator<Vector4>.System.Collections.IEnumerator.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0408 Offset: 0xF0408 VA: 0xF0408
	|-List.Enumerator<int>.Dispose
	|
	|-RVA: 0xF046C Offset: 0xF046C VA: 0xF046C
	|-List.Enumerator<object>.Dispose
	|-List.Enumerator<AudioAmbisonicExtensionDefinition>.Dispose
	|-List.Enumerator<AudioSpatializerExtensionDefinition>.Dispose
	|-List.Enumerator<PersistentCall>.Dispose
	|-List.Enumerator<GUILayoutEntry>.Dispose
	|
	|-RVA: 0xF04D0 Offset: 0xF04D0 VA: 0xF04D0
	|-List.Enumerator<CustomAttributeNamedArgument>.Dispose
	|
	|-RVA: 0xF0540 Offset: 0xF0540 VA: 0xF0540
	|-List.Enumerator<CustomAttributeTypedArgument>.Dispose
	|
	|-RVA: 0xF05B0 Offset: 0xF05B0 VA: 0xF05B0
	|-List.Enumerator<BeforeRenderHelper.OrderBlock>.Dispose
	|
	|-RVA: 0xF0620 Offset: 0xF0620 VA: 0xF0620
	|-List.Enumerator<Color32>.Dispose
	|
	|-RVA: 0xF0684 Offset: 0xF0684 VA: 0xF0684
	|-List.Enumerator<RaycastResult>.Dispose
	|
	|-RVA: 0xF0708 Offset: 0xF0708 VA: 0xF0708
	|-List.Enumerator<UICharInfo>.Dispose
	|
	|-RVA: 0xF0778 Offset: 0xF0778 VA: 0xF0778
	|-List.Enumerator<UILineInfo>.Dispose
	|
	|-RVA: 0xF07E4 Offset: 0xF07E4 VA: 0xF07E4
	|-List.Enumerator<UIVertex>.Dispose
	|
	|-RVA: 0xF0858 Offset: 0xF0858 VA: 0xF0858
	|-List.Enumerator<UnitySynchronizationContext.WorkRequest>.Dispose
	|
	|-RVA: 0xF08C8 Offset: 0xF08C8 VA: 0xF08C8
	|-List.Enumerator<Vector2>.Dispose
	|
	|-RVA: 0xF0938 Offset: 0xF0938 VA: 0xF0938
	|-List.Enumerator<Vector3>.Dispose
	|
	|-RVA: 0xF09A8 Offset: 0xF09A8 VA: 0xF09A8
	|-List.Enumerator<Vector4>.Dispose
	*/

	// RVA: -1 Offset: -1
	private void VerifyState() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0414 Offset: 0xF0414 VA: 0xF0414
	|-List.Enumerator<int>.VerifyState
	|
	|-RVA: 0xF0478 Offset: 0xF0478 VA: 0xF0478
	|-List.Enumerator<object>.VerifyState
	|
	|-RVA: 0xF04DC Offset: 0xF04DC VA: 0xF04DC
	|-List.Enumerator<CustomAttributeNamedArgument>.VerifyState
	|
	|-RVA: 0xF054C Offset: 0xF054C VA: 0xF054C
	|-List.Enumerator<CustomAttributeTypedArgument>.VerifyState
	|
	|-RVA: 0xF05BC Offset: 0xF05BC VA: 0xF05BC
	|-List.Enumerator<BeforeRenderHelper.OrderBlock>.VerifyState
	|
	|-RVA: 0xF062C Offset: 0xF062C VA: 0xF062C
	|-List.Enumerator<Color32>.VerifyState
	|
	|-RVA: 0xF0690 Offset: 0xF0690 VA: 0xF0690
	|-List.Enumerator<RaycastResult>.VerifyState
	|
	|-RVA: 0xF0714 Offset: 0xF0714 VA: 0xF0714
	|-List.Enumerator<UICharInfo>.VerifyState
	|
	|-RVA: 0xF0784 Offset: 0xF0784 VA: 0xF0784
	|-List.Enumerator<UILineInfo>.VerifyState
	|
	|-RVA: 0xF07F0 Offset: 0xF07F0 VA: 0xF07F0
	|-List.Enumerator<UIVertex>.VerifyState
	|
	|-RVA: 0xF0864 Offset: 0xF0864 VA: 0xF0864
	|-List.Enumerator<UnitySynchronizationContext.WorkRequest>.VerifyState
	|
	|-RVA: 0xF08D4 Offset: 0xF08D4 VA: 0xF08D4
	|-List.Enumerator<Vector2>.VerifyState
	|
	|-RVA: 0xF0944 Offset: 0xF0944 VA: 0xF0944
	|-List.Enumerator<Vector3>.VerifyState
	|
	|-RVA: 0xF09B4 Offset: 0xF09B4 VA: 0xF09B4
	|-List.Enumerator<Vector4>.VerifyState
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF041C Offset: 0xF041C VA: 0xF041C
	|-List.Enumerator<int>.MoveNext
	|
	|-RVA: 0xF0480 Offset: 0xF0480 VA: 0xF0480
	|-List.Enumerator<object>.MoveNext
	|-List.Enumerator<AudioAmbisonicExtensionDefinition>.MoveNext
	|-List.Enumerator<AudioSpatializerExtensionDefinition>.MoveNext
	|-List.Enumerator<PersistentCall>.MoveNext
	|-List.Enumerator<GUILayoutEntry>.MoveNext
	|
	|-RVA: 0xF04E4 Offset: 0xF04E4 VA: 0xF04E4
	|-List.Enumerator<CustomAttributeNamedArgument>.MoveNext
	|
	|-RVA: 0xF0554 Offset: 0xF0554 VA: 0xF0554
	|-List.Enumerator<CustomAttributeTypedArgument>.MoveNext
	|
	|-RVA: 0xF05C4 Offset: 0xF05C4 VA: 0xF05C4
	|-List.Enumerator<BeforeRenderHelper.OrderBlock>.MoveNext
	|
	|-RVA: 0xF0634 Offset: 0xF0634 VA: 0xF0634
	|-List.Enumerator<Color32>.MoveNext
	|
	|-RVA: 0xF0698 Offset: 0xF0698 VA: 0xF0698
	|-List.Enumerator<RaycastResult>.MoveNext
	|
	|-RVA: 0xF071C Offset: 0xF071C VA: 0xF071C
	|-List.Enumerator<UICharInfo>.MoveNext
	|
	|-RVA: 0xF078C Offset: 0xF078C VA: 0xF078C
	|-List.Enumerator<UILineInfo>.MoveNext
	|
	|-RVA: 0xF07F8 Offset: 0xF07F8 VA: 0xF07F8
	|-List.Enumerator<UIVertex>.MoveNext
	|
	|-RVA: 0xF086C Offset: 0xF086C VA: 0xF086C
	|-List.Enumerator<UnitySynchronizationContext.WorkRequest>.MoveNext
	|
	|-RVA: 0xF08DC Offset: 0xF08DC VA: 0xF08DC
	|-List.Enumerator<Vector2>.MoveNext
	|
	|-RVA: 0xF094C Offset: 0xF094C VA: 0xF094C
	|-List.Enumerator<Vector3>.MoveNext
	|
	|-RVA: 0xF09BC Offset: 0xF09BC VA: 0xF09BC
	|-List.Enumerator<Vector4>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public T get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0424 Offset: 0xF0424 VA: 0xF0424
	|-List.Enumerator<int>.get_Current
	|
	|-RVA: 0xF0488 Offset: 0xF0488 VA: 0xF0488
	|-List.Enumerator<AudioAmbisonicExtensionDefinition>.get_Current
	|-List.Enumerator<AudioSpatializerExtensionDefinition>.get_Current
	|-List.Enumerator<PersistentCall>.get_Current
	|-List.Enumerator<GUILayoutEntry>.get_Current
	|-List.Enumerator<object>.get_Current
	|
	|-RVA: 0xF0874 Offset: 0xF0874 VA: 0xF0874
	|-List.Enumerator<UnitySynchronizationContext.WorkRequest>.get_Current
	|
	|-RVA: 0xF04EC Offset: 0xF04EC VA: 0xF04EC
	|-List.Enumerator<CustomAttributeNamedArgument>.get_Current
	|
	|-RVA: 0xF055C Offset: 0xF055C VA: 0xF055C
	|-List.Enumerator<CustomAttributeTypedArgument>.get_Current
	|
	|-RVA: 0xF05CC Offset: 0xF05CC VA: 0xF05CC
	|-List.Enumerator<BeforeRenderHelper.OrderBlock>.get_Current
	|
	|-RVA: 0xF063C Offset: 0xF063C VA: 0xF063C
	|-List.Enumerator<Color32>.get_Current
	|
	|-RVA: 0xF06A0 Offset: 0xF06A0 VA: 0xF06A0
	|-List.Enumerator<RaycastResult>.get_Current
	|
	|-RVA: 0xF0724 Offset: 0xF0724 VA: 0xF0724
	|-List.Enumerator<UICharInfo>.get_Current
	|
	|-RVA: 0xF0794 Offset: 0xF0794 VA: 0xF0794
	|-List.Enumerator<UILineInfo>.get_Current
	|
	|-RVA: 0xF0800 Offset: 0xF0800 VA: 0xF0800
	|-List.Enumerator<UIVertex>.get_Current
	|
	|-RVA: 0xF08E4 Offset: 0xF08E4 VA: 0xF08E4
	|-List.Enumerator<Vector2>.get_Current
	|
	|-RVA: 0xF0954 Offset: 0xF0954 VA: 0xF0954
	|-List.Enumerator<Vector3>.get_Current
	|
	|-RVA: 0xF09C4 Offset: 0xF09C4 VA: 0xF09C4
	|-List.Enumerator<Vector4>.get_Current
	*/
}

// Namespace: System.Collections.ObjectModel
[DefaultMemberAttribute] // RVA: 0x94778 Offset: 0x94778 VA: 0x94778
[ComVisibleAttribute] // RVA: 0x94778 Offset: 0x94778 VA: 0x94778
[Serializable]
public class Collection<T> : IEnumerable, ICollection, IList, ICollection<T>, IList<T>, IEnumerable<T> // TypeDefIndex: 177
{
	// Fields
	private IList<T> list; // 0x0
	private object syncRoot; // 0x0

	// Properties
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private object System.Collections.IList.Item { get; set; }
	public int Count { get; }
	public T Item { get; set; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5911DC Offset: 0x5911DC VA: 0x5911DC
	|-Collection<int>..ctor
	|
	|-RVA: 0x592BE0 Offset: 0x592BE0 VA: 0x592BE0
	|-Collection<object>..ctor
	|
	|-RVA: 0x594718 Offset: 0x594718 VA: 0x594718
	|-Collection<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0x5962C0 Offset: 0x5962C0 VA: 0x5962C0
	|-Collection<CustomAttributeTypedArgument>..ctor
	|
	|-RVA: 0x597DA0 Offset: 0x597DA0 VA: 0x597DA0
	|-Collection<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0x599880 Offset: 0x599880 VA: 0x599880
	|-Collection<Color32>..ctor
	|
	|-RVA: 0x59B284 Offset: 0x59B284 VA: 0x59B284
	|-Collection<RaycastResult>..ctor
	|
	|-RVA: 0x59D5AC Offset: 0x59D5AC VA: 0x59D5AC
	|-Collection<UICharInfo>..ctor
	|
	|-RVA: 0x59F154 Offset: 0x59F154 VA: 0x59F154
	|-Collection<UILineInfo>..ctor
	|
	|-RVA: 0x5A0D98 Offset: 0x5A0D98 VA: 0x5A0D98
	|-Collection<UIVertex>..ctor
	|
	|-RVA: 0x5A2E90 Offset: 0x5A2E90 VA: 0x5A2E90
	|-Collection<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0x5A4A38 Offset: 0x5A4A38 VA: 0x5A4A38
	|-Collection<Vector2>..ctor
	|
	|-RVA: 0x5A6518 Offset: 0x5A6518 VA: 0x5A6518
	|-Collection<Vector3>..ctor
	|
	|-RVA: 0x5A80C0 Offset: 0x5A80C0 VA: 0x5A80C0
	|-Collection<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 21
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x59131C Offset: 0x59131C VA: 0x59131C
	|-Collection<int>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x592D20 Offset: 0x592D20 VA: 0x592D20
	|-Collection<object>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x594858 Offset: 0x594858 VA: 0x594858
	|-Collection<CustomAttributeNamedArgument>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x596400 Offset: 0x596400 VA: 0x596400
	|-Collection<CustomAttributeTypedArgument>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x597EE0 Offset: 0x597EE0 VA: 0x597EE0
	|-Collection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x5999C0 Offset: 0x5999C0 VA: 0x5999C0
	|-Collection<Color32>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x59B3C4 Offset: 0x59B3C4 VA: 0x59B3C4
	|-Collection<RaycastResult>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x59D6EC Offset: 0x59D6EC VA: 0x59D6EC
	|-Collection<UICharInfo>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x59F294 Offset: 0x59F294 VA: 0x59F294
	|-Collection<UILineInfo>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x5A0ED8 Offset: 0x5A0ED8 VA: 0x5A0ED8
	|-Collection<UIVertex>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x5A2FD0 Offset: 0x5A2FD0 VA: 0x5A2FD0
	|-Collection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x5A4B78 Offset: 0x5A4B78 VA: 0x5A4B78
	|-Collection<Vector2>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x5A6658 Offset: 0x5A6658 VA: 0x5A6658
	|-Collection<Vector3>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x5A8200 Offset: 0x5A8200 VA: 0x5A8200
	|-Collection<Vector4>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 8
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5913CC Offset: 0x5913CC VA: 0x5913CC
	|-Collection<int>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x592DD0 Offset: 0x592DD0 VA: 0x592DD0
	|-Collection<object>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x594908 Offset: 0x594908 VA: 0x594908
	|-Collection<CustomAttributeNamedArgument>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5964B0 Offset: 0x5964B0 VA: 0x5964B0
	|-Collection<CustomAttributeTypedArgument>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x597F90 Offset: 0x597F90 VA: 0x597F90
	|-Collection<BeforeRenderHelper.OrderBlock>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x599A70 Offset: 0x599A70 VA: 0x599A70
	|-Collection<Color32>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x59B474 Offset: 0x59B474 VA: 0x59B474
	|-Collection<RaycastResult>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x59D79C Offset: 0x59D79C VA: 0x59D79C
	|-Collection<UICharInfo>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x59F344 Offset: 0x59F344 VA: 0x59F344
	|-Collection<UILineInfo>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5A0F88 Offset: 0x5A0F88 VA: 0x5A0F88
	|-Collection<UIVertex>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5A3080 Offset: 0x5A3080 VA: 0x5A3080
	|-Collection<UnitySynchronizationContext.WorkRequest>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5A4C28 Offset: 0x5A4C28 VA: 0x5A4C28
	|-Collection<Vector2>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5A6708 Offset: 0x5A6708 VA: 0x5A6708
	|-Collection<Vector3>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5A82B0 Offset: 0x5A82B0 VA: 0x5A82B0
	|-Collection<Vector4>.System.Collections.ICollection.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x59159C Offset: 0x59159C VA: 0x59159C
	|-Collection<int>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x592FA0 Offset: 0x592FA0 VA: 0x592FA0
	|-Collection<object>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x594AD8 Offset: 0x594AD8 VA: 0x594AD8
	|-Collection<CustomAttributeNamedArgument>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x596680 Offset: 0x596680 VA: 0x596680
	|-Collection<CustomAttributeTypedArgument>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x598160 Offset: 0x598160 VA: 0x598160
	|-Collection<BeforeRenderHelper.OrderBlock>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x599C40 Offset: 0x599C40 VA: 0x599C40
	|-Collection<Color32>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x59B644 Offset: 0x59B644 VA: 0x59B644
	|-Collection<RaycastResult>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x59D96C Offset: 0x59D96C VA: 0x59D96C
	|-Collection<UICharInfo>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x59F514 Offset: 0x59F514 VA: 0x59F514
	|-Collection<UILineInfo>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x5A1158 Offset: 0x5A1158 VA: 0x5A1158
	|-Collection<UIVertex>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x5A3250 Offset: 0x5A3250 VA: 0x5A3250
	|-Collection<UnitySynchronizationContext.WorkRequest>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x5A4DF8 Offset: 0x5A4DF8 VA: 0x5A4DF8
	|-Collection<Vector2>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x5A68D8 Offset: 0x5A68D8 VA: 0x5A68D8
	|-Collection<Vector3>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x5A8480 Offset: 0x5A8480 VA: 0x5A8480
	|-Collection<Vector4>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 13
	private int System.Collections.IList.Add(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x59164C Offset: 0x59164C VA: 0x59164C
	|-Collection<int>.System.Collections.IList.Add
	|
	|-RVA: 0x593050 Offset: 0x593050 VA: 0x593050
	|-Collection<object>.System.Collections.IList.Add
	|
	|-RVA: 0x594B88 Offset: 0x594B88 VA: 0x594B88
	|-Collection<CustomAttributeNamedArgument>.System.Collections.IList.Add
	|
	|-RVA: 0x596730 Offset: 0x596730 VA: 0x596730
	|-Collection<CustomAttributeTypedArgument>.System.Collections.IList.Add
	|
	|-RVA: 0x598210 Offset: 0x598210 VA: 0x598210
	|-Collection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Add
	|
	|-RVA: 0x599CF0 Offset: 0x599CF0 VA: 0x599CF0
	|-Collection<Color32>.System.Collections.IList.Add
	|
	|-RVA: 0x59B6F4 Offset: 0x59B6F4 VA: 0x59B6F4
	|-Collection<RaycastResult>.System.Collections.IList.Add
	|
	|-RVA: 0x59DA1C Offset: 0x59DA1C VA: 0x59DA1C
	|-Collection<UICharInfo>.System.Collections.IList.Add
	|
	|-RVA: 0x59F5C4 Offset: 0x59F5C4 VA: 0x59F5C4
	|-Collection<UILineInfo>.System.Collections.IList.Add
	|
	|-RVA: 0x5A1208 Offset: 0x5A1208 VA: 0x5A1208
	|-Collection<UIVertex>.System.Collections.IList.Add
	|
	|-RVA: 0x5A3300 Offset: 0x5A3300 VA: 0x5A3300
	|-Collection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Add
	|
	|-RVA: 0x5A4EA8 Offset: 0x5A4EA8 VA: 0x5A4EA8
	|-Collection<Vector2>.System.Collections.IList.Add
	|
	|-RVA: 0x5A6988 Offset: 0x5A6988 VA: 0x5A6988
	|-Collection<Vector3>.System.Collections.IList.Add
	|
	|-RVA: 0x5A8530 Offset: 0x5A8530 VA: 0x5A8530
	|-Collection<Vector4>.System.Collections.IList.Add
	*/

	// RVA: -1 Offset: -1 Slot: 15
	private bool System.Collections.IList.Contains(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x59175C Offset: 0x59175C VA: 0x59175C
	|-Collection<int>.System.Collections.IList.Contains
	|
	|-RVA: 0x593160 Offset: 0x593160 VA: 0x593160
	|-Collection<object>.System.Collections.IList.Contains
	|
	|-RVA: 0x594CA8 Offset: 0x594CA8 VA: 0x594CA8
	|-Collection<CustomAttributeNamedArgument>.System.Collections.IList.Contains
	|
	|-RVA: 0x596844 Offset: 0x596844 VA: 0x596844
	|-Collection<CustomAttributeTypedArgument>.System.Collections.IList.Contains
	|
	|-RVA: 0x598324 Offset: 0x598324 VA: 0x598324
	|-Collection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Contains
	|
	|-RVA: 0x599E00 Offset: 0x599E00 VA: 0x599E00
	|-Collection<Color32>.System.Collections.IList.Contains
	|
	|-RVA: 0x59B898 Offset: 0x59B898 VA: 0x59B898
	|-Collection<RaycastResult>.System.Collections.IList.Contains
	|
	|-RVA: 0x59DB3C Offset: 0x59DB3C VA: 0x59DB3C
	|-Collection<UICharInfo>.System.Collections.IList.Contains
	|
	|-RVA: 0x59F6E8 Offset: 0x59F6E8 VA: 0x59F6E8
	|-Collection<UILineInfo>.System.Collections.IList.Contains
	|
	|-RVA: 0x5A1350 Offset: 0x5A1350 VA: 0x5A1350
	|-Collection<UIVertex>.System.Collections.IList.Contains
	|
	|-RVA: 0x5A3420 Offset: 0x5A3420 VA: 0x5A3420
	|-Collection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Contains
	|
	|-RVA: 0x5A4FBC Offset: 0x5A4FBC VA: 0x5A4FBC
	|-Collection<Vector2>.System.Collections.IList.Contains
	|
	|-RVA: 0x5A6AA8 Offset: 0x5A6AA8 VA: 0x5A6AA8
	|-Collection<Vector3>.System.Collections.IList.Contains
	|
	|-RVA: 0x5A8654 Offset: 0x5A8654 VA: 0x5A8654
	|-Collection<Vector4>.System.Collections.IList.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 16
	private int System.Collections.IList.IndexOf(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x591870 Offset: 0x591870 VA: 0x591870
	|-Collection<int>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x5932EC Offset: 0x5932EC VA: 0x5932EC
	|-Collection<object>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x594DD8 Offset: 0x594DD8 VA: 0x594DD8
	|-Collection<CustomAttributeNamedArgument>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x59695C Offset: 0x59695C VA: 0x59695C
	|-Collection<CustomAttributeTypedArgument>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x59843C Offset: 0x59843C VA: 0x59843C
	|-Collection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x599F14 Offset: 0x599F14 VA: 0x599F14
	|-Collection<Color32>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x59BA9C Offset: 0x59BA9C VA: 0x59BA9C
	|-Collection<RaycastResult>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x59DC6C Offset: 0x59DC6C VA: 0x59DC6C
	|-Collection<UICharInfo>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x59F830 Offset: 0x59F830 VA: 0x59F830
	|-Collection<UILineInfo>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x5A150C Offset: 0x5A150C VA: 0x5A150C
	|-Collection<UIVertex>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x5A3550 Offset: 0x5A3550 VA: 0x5A3550
	|-Collection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x5A50D4 Offset: 0x5A50D4 VA: 0x5A50D4
	|-Collection<Vector2>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x5A6BD8 Offset: 0x5A6BD8 VA: 0x5A6BD8
	|-Collection<Vector3>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x5A879C Offset: 0x5A879C VA: 0x5A879C
	|-Collection<Vector4>.System.Collections.IList.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 17
	private void System.Collections.IList.Insert(int index, object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x591984 Offset: 0x591984 VA: 0x591984
	|-Collection<int>.System.Collections.IList.Insert
	|
	|-RVA: 0x593478 Offset: 0x593478 VA: 0x593478
	|-Collection<object>.System.Collections.IList.Insert
	|
	|-RVA: 0x594F08 Offset: 0x594F08 VA: 0x594F08
	|-Collection<CustomAttributeNamedArgument>.System.Collections.IList.Insert
	|
	|-RVA: 0x596A74 Offset: 0x596A74 VA: 0x596A74
	|-Collection<CustomAttributeTypedArgument>.System.Collections.IList.Insert
	|
	|-RVA: 0x598554 Offset: 0x598554 VA: 0x598554
	|-Collection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Insert
	|
	|-RVA: 0x59A028 Offset: 0x59A028 VA: 0x59A028
	|-Collection<Color32>.System.Collections.IList.Insert
	|
	|-RVA: 0x59BCA0 Offset: 0x59BCA0 VA: 0x59BCA0
	|-Collection<RaycastResult>.System.Collections.IList.Insert
	|
	|-RVA: 0x59DD9C Offset: 0x59DD9C VA: 0x59DD9C
	|-Collection<UICharInfo>.System.Collections.IList.Insert
	|
	|-RVA: 0x59F978 Offset: 0x59F978 VA: 0x59F978
	|-Collection<UILineInfo>.System.Collections.IList.Insert
	|
	|-RVA: 0x5A16C8 Offset: 0x5A16C8 VA: 0x5A16C8
	|-Collection<UIVertex>.System.Collections.IList.Insert
	|
	|-RVA: 0x5A3680 Offset: 0x5A3680 VA: 0x5A3680
	|-Collection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Insert
	|
	|-RVA: 0x5A51EC Offset: 0x5A51EC VA: 0x5A51EC
	|-Collection<Vector2>.System.Collections.IList.Insert
	|
	|-RVA: 0x5A6D08 Offset: 0x5A6D08 VA: 0x5A6D08
	|-Collection<Vector3>.System.Collections.IList.Insert
	|
	|-RVA: 0x5A88E4 Offset: 0x5A88E4 VA: 0x5A88E4
	|-Collection<Vector4>.System.Collections.IList.Insert
	*/

	// RVA: -1 Offset: -1 Slot: 18
	private void System.Collections.IList.Remove(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5919E0 Offset: 0x5919E0 VA: 0x5919E0
	|-Collection<int>.System.Collections.IList.Remove
	|
	|-RVA: 0x5934D4 Offset: 0x5934D4 VA: 0x5934D4
	|-Collection<object>.System.Collections.IList.Remove
	|
	|-RVA: 0x594F80 Offset: 0x594F80 VA: 0x594F80
	|-Collection<CustomAttributeNamedArgument>.System.Collections.IList.Remove
	|
	|-RVA: 0x596AE4 Offset: 0x596AE4 VA: 0x596AE4
	|-Collection<CustomAttributeTypedArgument>.System.Collections.IList.Remove
	|
	|-RVA: 0x5985C4 Offset: 0x5985C4 VA: 0x5985C4
	|-Collection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Remove
	|
	|-RVA: 0x59A084 Offset: 0x59A084 VA: 0x59A084
	|-Collection<Color32>.System.Collections.IList.Remove
	|
	|-RVA: 0x59BD98 Offset: 0x59BD98 VA: 0x59BD98
	|-Collection<RaycastResult>.System.Collections.IList.Remove
	|
	|-RVA: 0x59DE14 Offset: 0x59DE14 VA: 0x59DE14
	|-Collection<UICharInfo>.System.Collections.IList.Remove
	|
	|-RVA: 0x59F9F4 Offset: 0x59F9F4 VA: 0x59F9F4
	|-Collection<UILineInfo>.System.Collections.IList.Remove
	|
	|-RVA: 0x5A1768 Offset: 0x5A1768 VA: 0x5A1768
	|-Collection<UIVertex>.System.Collections.IList.Remove
	|
	|-RVA: 0x5A36F8 Offset: 0x5A36F8 VA: 0x5A36F8
	|-Collection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Remove
	|
	|-RVA: 0x5A525C Offset: 0x5A525C VA: 0x5A525C
	|-Collection<Vector2>.System.Collections.IList.Remove
	|
	|-RVA: 0x5A6D80 Offset: 0x5A6D80 VA: 0x5A6D80
	|-Collection<Vector3>.System.Collections.IList.Remove
	|
	|-RVA: 0x5A8960 Offset: 0x5A8960 VA: 0x5A8960
	|-Collection<Vector4>.System.Collections.IList.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private bool System.Collections.ICollection.get_IsSynchronized() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x591A84 Offset: 0x591A84 VA: 0x591A84
	|-Collection<int>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x593578 Offset: 0x593578 VA: 0x593578
	|-Collection<object>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x595030 Offset: 0x595030 VA: 0x595030
	|-Collection<CustomAttributeNamedArgument>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x596B90 Offset: 0x596B90 VA: 0x596B90
	|-Collection<CustomAttributeTypedArgument>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x598670 Offset: 0x598670 VA: 0x598670
	|-Collection<BeforeRenderHelper.OrderBlock>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x59A128 Offset: 0x59A128 VA: 0x59A128
	|-Collection<Color32>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x59BEC8 Offset: 0x59BEC8 VA: 0x59BEC8
	|-Collection<RaycastResult>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x59DEC4 Offset: 0x59DEC4 VA: 0x59DEC4
	|-Collection<UICharInfo>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x59FAAC Offset: 0x59FAAC VA: 0x59FAAC
	|-Collection<UILineInfo>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x5A18BC Offset: 0x5A18BC VA: 0x5A18BC
	|-Collection<UIVertex>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x5A37A8 Offset: 0x5A37A8 VA: 0x5A37A8
	|-Collection<UnitySynchronizationContext.WorkRequest>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x5A5308 Offset: 0x5A5308 VA: 0x5A5308
	|-Collection<Vector2>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x5A6E30 Offset: 0x5A6E30 VA: 0x5A6E30
	|-Collection<Vector3>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x5A8A18 Offset: 0x5A8A18 VA: 0x5A8A18
	|-Collection<Vector4>.System.Collections.ICollection.get_IsSynchronized
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private object System.Collections.ICollection.get_SyncRoot() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x591A9C Offset: 0x591A9C VA: 0x591A9C
	|-Collection<int>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x593590 Offset: 0x593590 VA: 0x593590
	|-Collection<object>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x595048 Offset: 0x595048 VA: 0x595048
	|-Collection<CustomAttributeNamedArgument>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x596BA8 Offset: 0x596BA8 VA: 0x596BA8
	|-Collection<CustomAttributeTypedArgument>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x598688 Offset: 0x598688 VA: 0x598688
	|-Collection<BeforeRenderHelper.OrderBlock>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x59A140 Offset: 0x59A140 VA: 0x59A140
	|-Collection<Color32>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x59BEE0 Offset: 0x59BEE0 VA: 0x59BEE0
	|-Collection<RaycastResult>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x59DEDC Offset: 0x59DEDC VA: 0x59DEDC
	|-Collection<UICharInfo>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x59FAC4 Offset: 0x59FAC4 VA: 0x59FAC4
	|-Collection<UILineInfo>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x5A18D4 Offset: 0x5A18D4 VA: 0x5A18D4
	|-Collection<UIVertex>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x5A37C0 Offset: 0x5A37C0 VA: 0x5A37C0
	|-Collection<UnitySynchronizationContext.WorkRequest>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x5A5320 Offset: 0x5A5320 VA: 0x5A5320
	|-Collection<Vector2>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x5A6E48 Offset: 0x5A6E48 VA: 0x5A6E48
	|-Collection<Vector3>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x5A8A30 Offset: 0x5A8A30 VA: 0x5A8A30
	|-Collection<Vector4>.System.Collections.ICollection.get_SyncRoot
	*/

	// RVA: -1 Offset: -1 Slot: 9
	private bool System.Collections.IList.get_IsFixedSize() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x591AA4 Offset: 0x591AA4 VA: 0x591AA4
	|-Collection<int>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x593598 Offset: 0x593598 VA: 0x593598
	|-Collection<object>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x595050 Offset: 0x595050 VA: 0x595050
	|-Collection<CustomAttributeNamedArgument>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x596BB0 Offset: 0x596BB0 VA: 0x596BB0
	|-Collection<CustomAttributeTypedArgument>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x598690 Offset: 0x598690 VA: 0x598690
	|-Collection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x59A148 Offset: 0x59A148 VA: 0x59A148
	|-Collection<Color32>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x59BEE8 Offset: 0x59BEE8 VA: 0x59BEE8
	|-Collection<RaycastResult>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x59DEE4 Offset: 0x59DEE4 VA: 0x59DEE4
	|-Collection<UICharInfo>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x59FACC Offset: 0x59FACC VA: 0x59FACC
	|-Collection<UILineInfo>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x5A18DC Offset: 0x5A18DC VA: 0x5A18DC
	|-Collection<UIVertex>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x5A37C8 Offset: 0x5A37C8 VA: 0x5A37C8
	|-Collection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x5A5328 Offset: 0x5A5328 VA: 0x5A5328
	|-Collection<Vector2>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x5A6E50 Offset: 0x5A6E50 VA: 0x5A6E50
	|-Collection<Vector3>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x5A8A38 Offset: 0x5A8A38 VA: 0x5A8A38
	|-Collection<Vector4>.System.Collections.IList.get_IsFixedSize
	*/

	// RVA: -1 Offset: -1 Slot: 10
	private bool System.Collections.IList.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x591ABC Offset: 0x591ABC VA: 0x591ABC
	|-Collection<int>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x5935B0 Offset: 0x5935B0 VA: 0x5935B0
	|-Collection<object>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x595068 Offset: 0x595068 VA: 0x595068
	|-Collection<CustomAttributeNamedArgument>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x596BC8 Offset: 0x596BC8 VA: 0x596BC8
	|-Collection<CustomAttributeTypedArgument>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x5986A8 Offset: 0x5986A8 VA: 0x5986A8
	|-Collection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x59A160 Offset: 0x59A160 VA: 0x59A160
	|-Collection<Color32>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x59BF00 Offset: 0x59BF00 VA: 0x59BF00
	|-Collection<RaycastResult>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x59DEFC Offset: 0x59DEFC VA: 0x59DEFC
	|-Collection<UICharInfo>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x59FAE4 Offset: 0x59FAE4 VA: 0x59FAE4
	|-Collection<UILineInfo>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x5A18F4 Offset: 0x5A18F4 VA: 0x5A18F4
	|-Collection<UIVertex>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x5A37E0 Offset: 0x5A37E0 VA: 0x5A37E0
	|-Collection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x5A5340 Offset: 0x5A5340 VA: 0x5A5340
	|-Collection<Vector2>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x5A6E68 Offset: 0x5A6E68 VA: 0x5A6E68
	|-Collection<Vector3>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x5A8A50 Offset: 0x5A8A50 VA: 0x5A8A50
	|-Collection<Vector4>.System.Collections.IList.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 11
	private object System.Collections.IList.get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x591B6C Offset: 0x591B6C VA: 0x591B6C
	|-Collection<int>.System.Collections.IList.get_Item
	|
	|-RVA: 0x593660 Offset: 0x593660 VA: 0x593660
	|-Collection<object>.System.Collections.IList.get_Item
	|
	|-RVA: 0x595118 Offset: 0x595118 VA: 0x595118
	|-Collection<CustomAttributeNamedArgument>.System.Collections.IList.get_Item
	|
	|-RVA: 0x596C78 Offset: 0x596C78 VA: 0x596C78
	|-Collection<CustomAttributeTypedArgument>.System.Collections.IList.get_Item
	|
	|-RVA: 0x598758 Offset: 0x598758 VA: 0x598758
	|-Collection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.get_Item
	|
	|-RVA: 0x59A210 Offset: 0x59A210 VA: 0x59A210
	|-Collection<Color32>.System.Collections.IList.get_Item
	|
	|-RVA: 0x59BFB0 Offset: 0x59BFB0 VA: 0x59BFB0
	|-Collection<RaycastResult>.System.Collections.IList.get_Item
	|
	|-RVA: 0x59DFAC Offset: 0x59DFAC VA: 0x59DFAC
	|-Collection<UICharInfo>.System.Collections.IList.get_Item
	|
	|-RVA: 0x59FB94 Offset: 0x59FB94 VA: 0x59FB94
	|-Collection<UILineInfo>.System.Collections.IList.get_Item
	|
	|-RVA: 0x5A19A4 Offset: 0x5A19A4 VA: 0x5A19A4
	|-Collection<UIVertex>.System.Collections.IList.get_Item
	|
	|-RVA: 0x5A3890 Offset: 0x5A3890 VA: 0x5A3890
	|-Collection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.get_Item
	|
	|-RVA: 0x5A53F0 Offset: 0x5A53F0 VA: 0x5A53F0
	|-Collection<Vector2>.System.Collections.IList.get_Item
	|
	|-RVA: 0x5A6F18 Offset: 0x5A6F18 VA: 0x5A6F18
	|-Collection<Vector3>.System.Collections.IList.get_Item
	|
	|-RVA: 0x5A8B00 Offset: 0x5A8B00 VA: 0x5A8B00
	|-Collection<Vector4>.System.Collections.IList.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 12
	private void System.Collections.IList.set_Item(int index, object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x591C5C Offset: 0x591C5C VA: 0x591C5C
	|-Collection<int>.System.Collections.IList.set_Item
	|
	|-RVA: 0x593718 Offset: 0x593718 VA: 0x593718
	|-Collection<object>.System.Collections.IList.set_Item
	|
	|-RVA: 0x595218 Offset: 0x595218 VA: 0x595218
	|-Collection<CustomAttributeNamedArgument>.System.Collections.IList.set_Item
	|
	|-RVA: 0x596D74 Offset: 0x596D74 VA: 0x596D74
	|-Collection<CustomAttributeTypedArgument>.System.Collections.IList.set_Item
	|
	|-RVA: 0x598854 Offset: 0x598854 VA: 0x598854
	|-Collection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.set_Item
	|
	|-RVA: 0x59A300 Offset: 0x59A300 VA: 0x59A300
	|-Collection<Color32>.System.Collections.IList.set_Item
	|
	|-RVA: 0x59C0C0 Offset: 0x59C0C0 VA: 0x59C0C0
	|-Collection<RaycastResult>.System.Collections.IList.set_Item
	|
	|-RVA: 0x59E0AC Offset: 0x59E0AC VA: 0x59E0AC
	|-Collection<UICharInfo>.System.Collections.IList.set_Item
	|
	|-RVA: 0x59FC94 Offset: 0x59FC94 VA: 0x59FC94
	|-Collection<UILineInfo>.System.Collections.IList.set_Item
	|
	|-RVA: 0x5A1AA8 Offset: 0x5A1AA8 VA: 0x5A1AA8
	|-Collection<UIVertex>.System.Collections.IList.set_Item
	|
	|-RVA: 0x5A3990 Offset: 0x5A3990 VA: 0x5A3990
	|-Collection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.set_Item
	|
	|-RVA: 0x5A54EC Offset: 0x5A54EC VA: 0x5A54EC
	|-Collection<Vector2>.System.Collections.IList.set_Item
	|
	|-RVA: 0x5A7018 Offset: 0x5A7018 VA: 0x5A7018
	|-Collection<Vector3>.System.Collections.IList.set_Item
	|
	|-RVA: 0x5A8C00 Offset: 0x5A8C00 VA: 0x5A8C00
	|-Collection<Vector4>.System.Collections.IList.set_Item
	*/

	// RVA: -1 Offset: -1 Slot: 22
	public void Add(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x591CB8 Offset: 0x591CB8 VA: 0x591CB8
	|-Collection<int>.Add
	|
	|-RVA: 0x593774 Offset: 0x593774 VA: 0x593774
	|-Collection<object>.Add
	|
	|-RVA: 0x595290 Offset: 0x595290 VA: 0x595290
	|-Collection<CustomAttributeNamedArgument>.Add
	|
	|-RVA: 0x596DE4 Offset: 0x596DE4 VA: 0x596DE4
	|-Collection<CustomAttributeTypedArgument>.Add
	|
	|-RVA: 0x5988C4 Offset: 0x5988C4 VA: 0x5988C4
	|-Collection<BeforeRenderHelper.OrderBlock>.Add
	|
	|-RVA: 0x59A35C Offset: 0x59A35C VA: 0x59A35C
	|-Collection<Color32>.Add
	|
	|-RVA: 0x59C1B8 Offset: 0x59C1B8 VA: 0x59C1B8
	|-Collection<RaycastResult>.Add
	|
	|-RVA: 0x59E124 Offset: 0x59E124 VA: 0x59E124
	|-Collection<UICharInfo>.Add
	|
	|-RVA: 0x59FD10 Offset: 0x59FD10 VA: 0x59FD10
	|-Collection<UILineInfo>.Add
	|
	|-RVA: 0x5A1B48 Offset: 0x5A1B48 VA: 0x5A1B48
	|-Collection<UIVertex>.Add
	|
	|-RVA: 0x5A3A08 Offset: 0x5A3A08 VA: 0x5A3A08
	|-Collection<UnitySynchronizationContext.WorkRequest>.Add
	|
	|-RVA: 0x5A555C Offset: 0x5A555C VA: 0x5A555C
	|-Collection<Vector2>.Add
	|
	|-RVA: 0x5A7090 Offset: 0x5A7090 VA: 0x5A7090
	|-Collection<Vector3>.Add
	|
	|-RVA: 0x5A8C7C Offset: 0x5A8C7C VA: 0x5A8C7C
	|-Collection<Vector4>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 23
	public void Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x591DA0 Offset: 0x591DA0 VA: 0x591DA0
	|-Collection<int>.Clear
	|
	|-RVA: 0x59385C Offset: 0x59385C VA: 0x59385C
	|-Collection<object>.Clear
	|
	|-RVA: 0x595394 Offset: 0x595394 VA: 0x595394
	|-Collection<CustomAttributeNamedArgument>.Clear
	|
	|-RVA: 0x596EE0 Offset: 0x596EE0 VA: 0x596EE0
	|-Collection<CustomAttributeTypedArgument>.Clear
	|
	|-RVA: 0x5989C0 Offset: 0x5989C0 VA: 0x5989C0
	|-Collection<BeforeRenderHelper.OrderBlock>.Clear
	|
	|-RVA: 0x59A444 Offset: 0x59A444 VA: 0x59A444
	|-Collection<Color32>.Clear
	|
	|-RVA: 0x59C320 Offset: 0x59C320 VA: 0x59C320
	|-Collection<RaycastResult>.Clear
	|
	|-RVA: 0x59E228 Offset: 0x59E228 VA: 0x59E228
	|-Collection<UICharInfo>.Clear
	|
	|-RVA: 0x59FE1C Offset: 0x59FE1C VA: 0x59FE1C
	|-Collection<UILineInfo>.Clear
	|
	|-RVA: 0x5A1C84 Offset: 0x5A1C84 VA: 0x5A1C84
	|-Collection<UIVertex>.Clear
	|
	|-RVA: 0x5A3B0C Offset: 0x5A3B0C VA: 0x5A3B0C
	|-Collection<UnitySynchronizationContext.WorkRequest>.Clear
	|
	|-RVA: 0x5A5658 Offset: 0x5A5658 VA: 0x5A5658
	|-Collection<Vector2>.Clear
	|
	|-RVA: 0x5A7194 Offset: 0x5A7194 VA: 0x5A7194
	|-Collection<Vector3>.Clear
	|
	|-RVA: 0x5A8D88 Offset: 0x5A8D88 VA: 0x5A8D88
	|-Collection<Vector4>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 33
	protected virtual void ClearItems() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x591DD4 Offset: 0x591DD4 VA: 0x591DD4
	|-Collection<int>.ClearItems
	|
	|-RVA: 0x593890 Offset: 0x593890 VA: 0x593890
	|-Collection<object>.ClearItems
	|
	|-RVA: 0x5953C8 Offset: 0x5953C8 VA: 0x5953C8
	|-Collection<CustomAttributeNamedArgument>.ClearItems
	|
	|-RVA: 0x596F14 Offset: 0x596F14 VA: 0x596F14
	|-Collection<CustomAttributeTypedArgument>.ClearItems
	|
	|-RVA: 0x5989F4 Offset: 0x5989F4 VA: 0x5989F4
	|-Collection<BeforeRenderHelper.OrderBlock>.ClearItems
	|
	|-RVA: 0x59A478 Offset: 0x59A478 VA: 0x59A478
	|-Collection<Color32>.ClearItems
	|
	|-RVA: 0x59C354 Offset: 0x59C354 VA: 0x59C354
	|-Collection<RaycastResult>.ClearItems
	|
	|-RVA: 0x59E25C Offset: 0x59E25C VA: 0x59E25C
	|-Collection<UICharInfo>.ClearItems
	|
	|-RVA: 0x59FE50 Offset: 0x59FE50 VA: 0x59FE50
	|-Collection<UILineInfo>.ClearItems
	|
	|-RVA: 0x5A1CB8 Offset: 0x5A1CB8 VA: 0x5A1CB8
	|-Collection<UIVertex>.ClearItems
	|
	|-RVA: 0x5A3B40 Offset: 0x5A3B40 VA: 0x5A3B40
	|-Collection<UnitySynchronizationContext.WorkRequest>.ClearItems
	|
	|-RVA: 0x5A568C Offset: 0x5A568C VA: 0x5A568C
	|-Collection<Vector2>.ClearItems
	|
	|-RVA: 0x5A71C8 Offset: 0x5A71C8 VA: 0x5A71C8
	|-Collection<Vector3>.ClearItems
	|
	|-RVA: 0x5A8DBC Offset: 0x5A8DBC VA: 0x5A8DBC
	|-Collection<Vector4>.ClearItems
	*/

	// RVA: -1 Offset: -1 Slot: 24
	public bool Contains(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x591E84 Offset: 0x591E84 VA: 0x591E84
	|-Collection<int>.Contains
	|
	|-RVA: 0x593940 Offset: 0x593940 VA: 0x593940
	|-Collection<object>.Contains
	|
	|-RVA: 0x595478 Offset: 0x595478 VA: 0x595478
	|-Collection<CustomAttributeNamedArgument>.Contains
	|
	|-RVA: 0x596FC4 Offset: 0x596FC4 VA: 0x596FC4
	|-Collection<CustomAttributeTypedArgument>.Contains
	|
	|-RVA: 0x598AA4 Offset: 0x598AA4 VA: 0x598AA4
	|-Collection<BeforeRenderHelper.OrderBlock>.Contains
	|
	|-RVA: 0x59A528 Offset: 0x59A528 VA: 0x59A528
	|-Collection<Color32>.Contains
	|
	|-RVA: 0x59C404 Offset: 0x59C404 VA: 0x59C404
	|-Collection<RaycastResult>.Contains
	|
	|-RVA: 0x59E30C Offset: 0x59E30C VA: 0x59E30C
	|-Collection<UICharInfo>.Contains
	|
	|-RVA: 0x59FF00 Offset: 0x59FF00 VA: 0x59FF00
	|-Collection<UILineInfo>.Contains
	|
	|-RVA: 0x5A1D68 Offset: 0x5A1D68 VA: 0x5A1D68
	|-Collection<UIVertex>.Contains
	|
	|-RVA: 0x5A3BF0 Offset: 0x5A3BF0 VA: 0x5A3BF0
	|-Collection<UnitySynchronizationContext.WorkRequest>.Contains
	|
	|-RVA: 0x5A573C Offset: 0x5A573C VA: 0x5A573C
	|-Collection<Vector2>.Contains
	|
	|-RVA: 0x5A7278 Offset: 0x5A7278 VA: 0x5A7278
	|-Collection<Vector3>.Contains
	|
	|-RVA: 0x5A8E6C Offset: 0x5A8E6C VA: 0x5A8E6C
	|-Collection<Vector4>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 25
	public void CopyTo(T[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x591F3C Offset: 0x591F3C VA: 0x591F3C
	|-Collection<int>.CopyTo
	|
	|-RVA: 0x5939F8 Offset: 0x5939F8 VA: 0x5939F8
	|-Collection<object>.CopyTo
	|
	|-RVA: 0x59554C Offset: 0x59554C VA: 0x59554C
	|-Collection<CustomAttributeNamedArgument>.CopyTo
	|
	|-RVA: 0x597084 Offset: 0x597084 VA: 0x597084
	|-Collection<CustomAttributeTypedArgument>.CopyTo
	|
	|-RVA: 0x598B64 Offset: 0x598B64 VA: 0x598B64
	|-Collection<BeforeRenderHelper.OrderBlock>.CopyTo
	|
	|-RVA: 0x59A5E0 Offset: 0x59A5E0 VA: 0x59A5E0
	|-Collection<Color32>.CopyTo
	|
	|-RVA: 0x59C550 Offset: 0x59C550 VA: 0x59C550
	|-Collection<RaycastResult>.CopyTo
	|
	|-RVA: 0x59E3E0 Offset: 0x59E3E0 VA: 0x59E3E0
	|-Collection<UICharInfo>.CopyTo
	|
	|-RVA: 0x59FFE4 Offset: 0x59FFE4 VA: 0x59FFE4
	|-Collection<UILineInfo>.CopyTo
	|
	|-RVA: 0x5A1EEC Offset: 0x5A1EEC VA: 0x5A1EEC
	|-Collection<UIVertex>.CopyTo
	|
	|-RVA: 0x5A3CC4 Offset: 0x5A3CC4 VA: 0x5A3CC4
	|-Collection<UnitySynchronizationContext.WorkRequest>.CopyTo
	|
	|-RVA: 0x5A57FC Offset: 0x5A57FC VA: 0x5A57FC
	|-Collection<Vector2>.CopyTo
	|
	|-RVA: 0x5A734C Offset: 0x5A734C VA: 0x5A734C
	|-Collection<Vector3>.CopyTo
	|
	|-RVA: 0x5A8F50 Offset: 0x5A8F50 VA: 0x5A8F50
	|-Collection<Vector4>.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 27
	public IEnumerator<T> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x591FFC Offset: 0x591FFC VA: 0x591FFC
	|-Collection<int>.GetEnumerator
	|
	|-RVA: 0x593AB8 Offset: 0x593AB8 VA: 0x593AB8
	|-Collection<object>.GetEnumerator
	|
	|-RVA: 0x59560C Offset: 0x59560C VA: 0x59560C
	|-Collection<CustomAttributeNamedArgument>.GetEnumerator
	|
	|-RVA: 0x597144 Offset: 0x597144 VA: 0x597144
	|-Collection<CustomAttributeTypedArgument>.GetEnumerator
	|
	|-RVA: 0x598C24 Offset: 0x598C24 VA: 0x598C24
	|-Collection<BeforeRenderHelper.OrderBlock>.GetEnumerator
	|
	|-RVA: 0x59A6A0 Offset: 0x59A6A0 VA: 0x59A6A0
	|-Collection<Color32>.GetEnumerator
	|
	|-RVA: 0x59C610 Offset: 0x59C610 VA: 0x59C610
	|-Collection<RaycastResult>.GetEnumerator
	|
	|-RVA: 0x59E4A0 Offset: 0x59E4A0 VA: 0x59E4A0
	|-Collection<UICharInfo>.GetEnumerator
	|
	|-RVA: 0x5A00A4 Offset: 0x5A00A4 VA: 0x5A00A4
	|-Collection<UILineInfo>.GetEnumerator
	|
	|-RVA: 0x5A1FAC Offset: 0x5A1FAC VA: 0x5A1FAC
	|-Collection<UIVertex>.GetEnumerator
	|
	|-RVA: 0x5A3D84 Offset: 0x5A3D84 VA: 0x5A3D84
	|-Collection<UnitySynchronizationContext.WorkRequest>.GetEnumerator
	|
	|-RVA: 0x5A58BC Offset: 0x5A58BC VA: 0x5A58BC
	|-Collection<Vector2>.GetEnumerator
	|
	|-RVA: 0x5A740C Offset: 0x5A740C VA: 0x5A740C
	|-Collection<Vector3>.GetEnumerator
	|
	|-RVA: 0x5A9010 Offset: 0x5A9010 VA: 0x5A9010
	|-Collection<Vector4>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 28
	public int IndexOf(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5920AC Offset: 0x5920AC VA: 0x5920AC
	|-Collection<int>.IndexOf
	|
	|-RVA: 0x593B68 Offset: 0x593B68 VA: 0x593B68
	|-Collection<object>.IndexOf
	|
	|-RVA: 0x5956BC Offset: 0x5956BC VA: 0x5956BC
	|-Collection<CustomAttributeNamedArgument>.IndexOf
	|
	|-RVA: 0x5971F4 Offset: 0x5971F4 VA: 0x5971F4
	|-Collection<CustomAttributeTypedArgument>.IndexOf
	|
	|-RVA: 0x598CD4 Offset: 0x598CD4 VA: 0x598CD4
	|-Collection<BeforeRenderHelper.OrderBlock>.IndexOf
	|
	|-RVA: 0x59A750 Offset: 0x59A750 VA: 0x59A750
	|-Collection<Color32>.IndexOf
	|
	|-RVA: 0x59C6C0 Offset: 0x59C6C0 VA: 0x59C6C0
	|-Collection<RaycastResult>.IndexOf
	|
	|-RVA: 0x59E550 Offset: 0x59E550 VA: 0x59E550
	|-Collection<UICharInfo>.IndexOf
	|
	|-RVA: 0x5A0154 Offset: 0x5A0154 VA: 0x5A0154
	|-Collection<UILineInfo>.IndexOf
	|
	|-RVA: 0x5A205C Offset: 0x5A205C VA: 0x5A205C
	|-Collection<UIVertex>.IndexOf
	|
	|-RVA: 0x5A3E34 Offset: 0x5A3E34 VA: 0x5A3E34
	|-Collection<UnitySynchronizationContext.WorkRequest>.IndexOf
	|
	|-RVA: 0x5A596C Offset: 0x5A596C VA: 0x5A596C
	|-Collection<Vector2>.IndexOf
	|
	|-RVA: 0x5A74BC Offset: 0x5A74BC VA: 0x5A74BC
	|-Collection<Vector3>.IndexOf
	|
	|-RVA: 0x5A90C0 Offset: 0x5A90C0 VA: 0x5A90C0
	|-Collection<Vector4>.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 29
	public void Insert(int index, T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x592164 Offset: 0x592164 VA: 0x592164
	|-Collection<int>.Insert
	|
	|-RVA: 0x593C20 Offset: 0x593C20 VA: 0x593C20
	|-Collection<object>.Insert
	|
	|-RVA: 0x595790 Offset: 0x595790 VA: 0x595790
	|-Collection<CustomAttributeNamedArgument>.Insert
	|
	|-RVA: 0x5972B4 Offset: 0x5972B4 VA: 0x5972B4
	|-Collection<CustomAttributeTypedArgument>.Insert
	|
	|-RVA: 0x598D94 Offset: 0x598D94 VA: 0x598D94
	|-Collection<BeforeRenderHelper.OrderBlock>.Insert
	|
	|-RVA: 0x59A808 Offset: 0x59A808 VA: 0x59A808
	|-Collection<Color32>.Insert
	|
	|-RVA: 0x59C80C Offset: 0x59C80C VA: 0x59C80C
	|-Collection<RaycastResult>.Insert
	|
	|-RVA: 0x59E624 Offset: 0x59E624 VA: 0x59E624
	|-Collection<UICharInfo>.Insert
	|
	|-RVA: 0x5A0238 Offset: 0x5A0238 VA: 0x5A0238
	|-Collection<UILineInfo>.Insert
	|
	|-RVA: 0x5A21E0 Offset: 0x5A21E0 VA: 0x5A21E0
	|-Collection<UIVertex>.Insert
	|
	|-RVA: 0x5A3F08 Offset: 0x5A3F08 VA: 0x5A3F08
	|-Collection<UnitySynchronizationContext.WorkRequest>.Insert
	|
	|-RVA: 0x5A5A2C Offset: 0x5A5A2C VA: 0x5A5A2C
	|-Collection<Vector2>.Insert
	|
	|-RVA: 0x5A7590 Offset: 0x5A7590 VA: 0x5A7590
	|-Collection<Vector3>.Insert
	|
	|-RVA: 0x5A91A4 Offset: 0x5A91A4 VA: 0x5A91A4
	|-Collection<Vector4>.Insert
	*/

	// RVA: -1 Offset: -1 Slot: 34
	protected virtual void InsertItem(int index, T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5921A8 Offset: 0x5921A8 VA: 0x5921A8
	|-Collection<int>.InsertItem
	|
	|-RVA: 0x593C64 Offset: 0x593C64 VA: 0x593C64
	|-Collection<object>.InsertItem
	|
	|-RVA: 0x5957F0 Offset: 0x5957F0 VA: 0x5957F0
	|-Collection<CustomAttributeNamedArgument>.InsertItem
	|
	|-RVA: 0x59730C Offset: 0x59730C VA: 0x59730C
	|-Collection<CustomAttributeTypedArgument>.InsertItem
	|
	|-RVA: 0x598DEC Offset: 0x598DEC VA: 0x598DEC
	|-Collection<BeforeRenderHelper.OrderBlock>.InsertItem
	|
	|-RVA: 0x59A84C Offset: 0x59A84C VA: 0x59A84C
	|-Collection<Color32>.InsertItem
	|
	|-RVA: 0x59C8EC Offset: 0x59C8EC VA: 0x59C8EC
	|-Collection<RaycastResult>.InsertItem
	|
	|-RVA: 0x59E684 Offset: 0x59E684 VA: 0x59E684
	|-Collection<UICharInfo>.InsertItem
	|
	|-RVA: 0x5A02A0 Offset: 0x5A02A0 VA: 0x5A02A0
	|-Collection<UILineInfo>.InsertItem
	|
	|-RVA: 0x5A2274 Offset: 0x5A2274 VA: 0x5A2274
	|-Collection<UIVertex>.InsertItem
	|
	|-RVA: 0x5A3F68 Offset: 0x5A3F68 VA: 0x5A3F68
	|-Collection<UnitySynchronizationContext.WorkRequest>.InsertItem
	|
	|-RVA: 0x5A5A84 Offset: 0x5A5A84 VA: 0x5A5A84
	|-Collection<Vector2>.InsertItem
	|
	|-RVA: 0x5A75F0 Offset: 0x5A75F0 VA: 0x5A75F0
	|-Collection<Vector3>.InsertItem
	|
	|-RVA: 0x5A920C Offset: 0x5A920C VA: 0x5A920C
	|-Collection<Vector4>.InsertItem
	*/

	// RVA: -1 Offset: -1 Slot: 26
	public bool Remove(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x592268 Offset: 0x592268 VA: 0x592268
	|-Collection<int>.Remove
	|
	|-RVA: 0x593D24 Offset: 0x593D24 VA: 0x593D24
	|-Collection<object>.Remove
	|
	|-RVA: 0x5958D4 Offset: 0x5958D4 VA: 0x5958D4
	|-Collection<CustomAttributeNamedArgument>.Remove
	|
	|-RVA: 0x5973E0 Offset: 0x5973E0 VA: 0x5973E0
	|-Collection<CustomAttributeTypedArgument>.Remove
	|
	|-RVA: 0x598EC0 Offset: 0x598EC0 VA: 0x598EC0
	|-Collection<BeforeRenderHelper.OrderBlock>.Remove
	|
	|-RVA: 0x59A90C Offset: 0x59A90C VA: 0x59A90C
	|-Collection<Color32>.Remove
	|
	|-RVA: 0x59CA40 Offset: 0x59CA40 VA: 0x59CA40
	|-Collection<RaycastResult>.Remove
	|
	|-RVA: 0x59E768 Offset: 0x59E768 VA: 0x59E768
	|-Collection<UICharInfo>.Remove
	|
	|-RVA: 0x5A0394 Offset: 0x5A0394 VA: 0x5A0394
	|-Collection<UILineInfo>.Remove
	|
	|-RVA: 0x5A2394 Offset: 0x5A2394 VA: 0x5A2394
	|-Collection<UIVertex>.Remove
	|
	|-RVA: 0x5A404C Offset: 0x5A404C VA: 0x5A404C
	|-Collection<UnitySynchronizationContext.WorkRequest>.Remove
	|
	|-RVA: 0x5A5B58 Offset: 0x5A5B58 VA: 0x5A5B58
	|-Collection<Vector2>.Remove
	|
	|-RVA: 0x5A76D4 Offset: 0x5A76D4 VA: 0x5A76D4
	|-Collection<Vector3>.Remove
	|
	|-RVA: 0x5A9300 Offset: 0x5A9300 VA: 0x5A9300
	|-Collection<Vector4>.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 30
	public void RemoveAt(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5922EC Offset: 0x5922EC VA: 0x5922EC
	|-Collection<int>.RemoveAt
	|
	|-RVA: 0x593DA8 Offset: 0x593DA8 VA: 0x593DA8
	|-Collection<object>.RemoveAt
	|
	|-RVA: 0x595974 Offset: 0x595974 VA: 0x595974
	|-Collection<CustomAttributeNamedArgument>.RemoveAt
	|
	|-RVA: 0x59746C Offset: 0x59746C VA: 0x59746C
	|-Collection<CustomAttributeTypedArgument>.RemoveAt
	|
	|-RVA: 0x598F4C Offset: 0x598F4C VA: 0x598F4C
	|-Collection<BeforeRenderHelper.OrderBlock>.RemoveAt
	|
	|-RVA: 0x59A990 Offset: 0x59A990 VA: 0x59A990
	|-Collection<Color32>.RemoveAt
	|
	|-RVA: 0x59CB68 Offset: 0x59CB68 VA: 0x59CB68
	|-Collection<RaycastResult>.RemoveAt
	|
	|-RVA: 0x59E808 Offset: 0x59E808 VA: 0x59E808
	|-Collection<UICharInfo>.RemoveAt
	|
	|-RVA: 0x5A043C Offset: 0x5A043C VA: 0x5A043C
	|-Collection<UILineInfo>.RemoveAt
	|
	|-RVA: 0x5A24D4 Offset: 0x5A24D4 VA: 0x5A24D4
	|-Collection<UIVertex>.RemoveAt
	|
	|-RVA: 0x5A40EC Offset: 0x5A40EC VA: 0x5A40EC
	|-Collection<UnitySynchronizationContext.WorkRequest>.RemoveAt
	|
	|-RVA: 0x5A5BE4 Offset: 0x5A5BE4 VA: 0x5A5BE4
	|-Collection<Vector2>.RemoveAt
	|
	|-RVA: 0x5A7774 Offset: 0x5A7774 VA: 0x5A7774
	|-Collection<Vector3>.RemoveAt
	|
	|-RVA: 0x5A93A8 Offset: 0x5A93A8 VA: 0x5A93A8
	|-Collection<Vector4>.RemoveAt
	*/

	// RVA: -1 Offset: -1 Slot: 35
	protected virtual void RemoveItem(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x592328 Offset: 0x592328 VA: 0x592328
	|-Collection<int>.RemoveItem
	|
	|-RVA: 0x593DE4 Offset: 0x593DE4 VA: 0x593DE4
	|-Collection<object>.RemoveItem
	|
	|-RVA: 0x5959B0 Offset: 0x5959B0 VA: 0x5959B0
	|-Collection<CustomAttributeNamedArgument>.RemoveItem
	|
	|-RVA: 0x5974A8 Offset: 0x5974A8 VA: 0x5974A8
	|-Collection<CustomAttributeTypedArgument>.RemoveItem
	|
	|-RVA: 0x598F88 Offset: 0x598F88 VA: 0x598F88
	|-Collection<BeforeRenderHelper.OrderBlock>.RemoveItem
	|
	|-RVA: 0x59A9CC Offset: 0x59A9CC VA: 0x59A9CC
	|-Collection<Color32>.RemoveItem
	|
	|-RVA: 0x59CBA4 Offset: 0x59CBA4 VA: 0x59CBA4
	|-Collection<RaycastResult>.RemoveItem
	|
	|-RVA: 0x59E844 Offset: 0x59E844 VA: 0x59E844
	|-Collection<UICharInfo>.RemoveItem
	|
	|-RVA: 0x5A0478 Offset: 0x5A0478 VA: 0x5A0478
	|-Collection<UILineInfo>.RemoveItem
	|
	|-RVA: 0x5A2510 Offset: 0x5A2510 VA: 0x5A2510
	|-Collection<UIVertex>.RemoveItem
	|
	|-RVA: 0x5A4128 Offset: 0x5A4128 VA: 0x5A4128
	|-Collection<UnitySynchronizationContext.WorkRequest>.RemoveItem
	|
	|-RVA: 0x5A5C20 Offset: 0x5A5C20 VA: 0x5A5C20
	|-Collection<Vector2>.RemoveItem
	|
	|-RVA: 0x5A77B0 Offset: 0x5A77B0 VA: 0x5A77B0
	|-Collection<Vector3>.RemoveItem
	|
	|-RVA: 0x5A93E4 Offset: 0x5A93E4 VA: 0x5A93E4
	|-Collection<Vector4>.RemoveItem
	*/

	// RVA: -1 Offset: -1 Slot: 20
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5923E0 Offset: 0x5923E0 VA: 0x5923E0
	|-Collection<int>.get_Count
	|
	|-RVA: 0x593E9C Offset: 0x593E9C VA: 0x593E9C
	|-Collection<object>.get_Count
	|
	|-RVA: 0x595A68 Offset: 0x595A68 VA: 0x595A68
	|-Collection<CustomAttributeNamedArgument>.get_Count
	|
	|-RVA: 0x597560 Offset: 0x597560 VA: 0x597560
	|-Collection<CustomAttributeTypedArgument>.get_Count
	|
	|-RVA: 0x599040 Offset: 0x599040 VA: 0x599040
	|-Collection<BeforeRenderHelper.OrderBlock>.get_Count
	|
	|-RVA: 0x59AA84 Offset: 0x59AA84 VA: 0x59AA84
	|-Collection<Color32>.get_Count
	|
	|-RVA: 0x59CC5C Offset: 0x59CC5C VA: 0x59CC5C
	|-Collection<RaycastResult>.get_Count
	|
	|-RVA: 0x59E8FC Offset: 0x59E8FC VA: 0x59E8FC
	|-Collection<UICharInfo>.get_Count
	|
	|-RVA: 0x5A0530 Offset: 0x5A0530 VA: 0x5A0530
	|-Collection<UILineInfo>.get_Count
	|
	|-RVA: 0x5A25C8 Offset: 0x5A25C8 VA: 0x5A25C8
	|-Collection<UIVertex>.get_Count
	|
	|-RVA: 0x5A41E0 Offset: 0x5A41E0 VA: 0x5A41E0
	|-Collection<UnitySynchronizationContext.WorkRequest>.get_Count
	|
	|-RVA: 0x5A5CD8 Offset: 0x5A5CD8 VA: 0x5A5CD8
	|-Collection<Vector2>.get_Count
	|
	|-RVA: 0x5A7868 Offset: 0x5A7868 VA: 0x5A7868
	|-Collection<Vector3>.get_Count
	|
	|-RVA: 0x5A949C Offset: 0x5A949C VA: 0x5A949C
	|-Collection<Vector4>.get_Count
	*/

	// RVA: -1 Offset: -1 Slot: 31
	public T get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x592490 Offset: 0x592490 VA: 0x592490
	|-Collection<int>.get_Item
	|
	|-RVA: 0x593F4C Offset: 0x593F4C VA: 0x593F4C
	|-Collection<object>.get_Item
	|
	|-RVA: 0x595B18 Offset: 0x595B18 VA: 0x595B18
	|-Collection<CustomAttributeNamedArgument>.get_Item
	|
	|-RVA: 0x597610 Offset: 0x597610 VA: 0x597610
	|-Collection<CustomAttributeTypedArgument>.get_Item
	|
	|-RVA: 0x5990F0 Offset: 0x5990F0 VA: 0x5990F0
	|-Collection<BeforeRenderHelper.OrderBlock>.get_Item
	|
	|-RVA: 0x59AB34 Offset: 0x59AB34 VA: 0x59AB34
	|-Collection<Color32>.get_Item
	|
	|-RVA: 0x59CD0C Offset: 0x59CD0C VA: 0x59CD0C
	|-Collection<RaycastResult>.get_Item
	|
	|-RVA: 0x59E9AC Offset: 0x59E9AC VA: 0x59E9AC
	|-Collection<UICharInfo>.get_Item
	|
	|-RVA: 0x5A05E0 Offset: 0x5A05E0 VA: 0x5A05E0
	|-Collection<UILineInfo>.get_Item
	|
	|-RVA: 0x5A2678 Offset: 0x5A2678 VA: 0x5A2678
	|-Collection<UIVertex>.get_Item
	|
	|-RVA: 0x5A4290 Offset: 0x5A4290 VA: 0x5A4290
	|-Collection<UnitySynchronizationContext.WorkRequest>.get_Item
	|
	|-RVA: 0x5A5D88 Offset: 0x5A5D88 VA: 0x5A5D88
	|-Collection<Vector2>.get_Item
	|
	|-RVA: 0x5A7918 Offset: 0x5A7918 VA: 0x5A7918
	|-Collection<Vector3>.get_Item
	|
	|-RVA: 0x5A954C Offset: 0x5A954C VA: 0x5A954C
	|-Collection<Vector4>.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 32
	public void set_Item(int index, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x592548 Offset: 0x592548 VA: 0x592548
	|-Collection<int>.set_Item
	|
	|-RVA: 0x594004 Offset: 0x594004 VA: 0x594004
	|-Collection<object>.set_Item
	|
	|-RVA: 0x595BD8 Offset: 0x595BD8 VA: 0x595BD8
	|-Collection<CustomAttributeNamedArgument>.set_Item
	|
	|-RVA: 0x5976D0 Offset: 0x5976D0 VA: 0x5976D0
	|-Collection<CustomAttributeTypedArgument>.set_Item
	|
	|-RVA: 0x5991B0 Offset: 0x5991B0 VA: 0x5991B0
	|-Collection<BeforeRenderHelper.OrderBlock>.set_Item
	|
	|-RVA: 0x59ABEC Offset: 0x59ABEC VA: 0x59ABEC
	|-Collection<Color32>.set_Item
	|
	|-RVA: 0x59CDCC Offset: 0x59CDCC VA: 0x59CDCC
	|-Collection<RaycastResult>.set_Item
	|
	|-RVA: 0x59EA6C Offset: 0x59EA6C VA: 0x59EA6C
	|-Collection<UICharInfo>.set_Item
	|
	|-RVA: 0x5A06A0 Offset: 0x5A06A0 VA: 0x5A06A0
	|-Collection<UILineInfo>.set_Item
	|
	|-RVA: 0x5A2738 Offset: 0x5A2738 VA: 0x5A2738
	|-Collection<UIVertex>.set_Item
	|
	|-RVA: 0x5A4350 Offset: 0x5A4350 VA: 0x5A4350
	|-Collection<UnitySynchronizationContext.WorkRequest>.set_Item
	|
	|-RVA: 0x5A5E48 Offset: 0x5A5E48 VA: 0x5A5E48
	|-Collection<Vector2>.set_Item
	|
	|-RVA: 0x5A79D8 Offset: 0x5A79D8 VA: 0x5A79D8
	|-Collection<Vector3>.set_Item
	|
	|-RVA: 0x5A960C Offset: 0x5A960C VA: 0x5A960C
	|-Collection<Vector4>.set_Item
	*/

	// RVA: -1 Offset: -1 Slot: 36
	protected virtual void SetItem(int index, T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x59258C Offset: 0x59258C VA: 0x59258C
	|-Collection<int>.SetItem
	|
	|-RVA: 0x594048 Offset: 0x594048 VA: 0x594048
	|-Collection<object>.SetItem
	|
	|-RVA: 0x595C38 Offset: 0x595C38 VA: 0x595C38
	|-Collection<CustomAttributeNamedArgument>.SetItem
	|
	|-RVA: 0x597728 Offset: 0x597728 VA: 0x597728
	|-Collection<CustomAttributeTypedArgument>.SetItem
	|
	|-RVA: 0x599208 Offset: 0x599208 VA: 0x599208
	|-Collection<BeforeRenderHelper.OrderBlock>.SetItem
	|
	|-RVA: 0x59AC30 Offset: 0x59AC30 VA: 0x59AC30
	|-Collection<Color32>.SetItem
	|
	|-RVA: 0x59CEAC Offset: 0x59CEAC VA: 0x59CEAC
	|-Collection<RaycastResult>.SetItem
	|
	|-RVA: 0x59EACC Offset: 0x59EACC VA: 0x59EACC
	|-Collection<UICharInfo>.SetItem
	|
	|-RVA: 0x5A0708 Offset: 0x5A0708 VA: 0x5A0708
	|-Collection<UILineInfo>.SetItem
	|
	|-RVA: 0x5A27CC Offset: 0x5A27CC VA: 0x5A27CC
	|-Collection<UIVertex>.SetItem
	|
	|-RVA: 0x5A43B0 Offset: 0x5A43B0 VA: 0x5A43B0
	|-Collection<UnitySynchronizationContext.WorkRequest>.SetItem
	|
	|-RVA: 0x5A5EA0 Offset: 0x5A5EA0 VA: 0x5A5EA0
	|-Collection<Vector2>.SetItem
	|
	|-RVA: 0x5A7A38 Offset: 0x5A7A38 VA: 0x5A7A38
	|-Collection<Vector3>.SetItem
	|
	|-RVA: 0x5A9674 Offset: 0x5A9674 VA: 0x5A9674
	|-Collection<Vector4>.SetItem
	*/

	// RVA: -1 Offset: -1
	internal static bool IsValidItem(object item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x59264C Offset: 0x59264C VA: 0x59264C
	|-Collection<int>.IsValidItem
	|
	|-RVA: 0x594108 Offset: 0x594108 VA: 0x594108
	|-Collection<object>.IsValidItem
	|
	|-RVA: 0x595D1C Offset: 0x595D1C VA: 0x595D1C
	|-Collection<CustomAttributeNamedArgument>.IsValidItem
	|
	|-RVA: 0x5977FC Offset: 0x5977FC VA: 0x5977FC
	|-Collection<CustomAttributeTypedArgument>.IsValidItem
	|
	|-RVA: 0x5992DC Offset: 0x5992DC VA: 0x5992DC
	|-Collection<BeforeRenderHelper.OrderBlock>.IsValidItem
	|
	|-RVA: 0x59ACF0 Offset: 0x59ACF0 VA: 0x59ACF0
	|-Collection<Color32>.IsValidItem
	|
	|-RVA: 0x59D000 Offset: 0x59D000 VA: 0x59D000
	|-Collection<RaycastResult>.IsValidItem
	|
	|-RVA: 0x59EBB0 Offset: 0x59EBB0 VA: 0x59EBB0
	|-Collection<UICharInfo>.IsValidItem
	|
	|-RVA: 0x5A07FC Offset: 0x5A07FC VA: 0x5A07FC
	|-Collection<UILineInfo>.IsValidItem
	|
	|-RVA: 0x5A28EC Offset: 0x5A28EC VA: 0x5A28EC
	|-Collection<UIVertex>.IsValidItem
	|
	|-RVA: 0x5A4494 Offset: 0x5A4494 VA: 0x5A4494
	|-Collection<UnitySynchronizationContext.WorkRequest>.IsValidItem
	|
	|-RVA: 0x5A5F74 Offset: 0x5A5F74 VA: 0x5A5F74
	|-Collection<Vector2>.IsValidItem
	|
	|-RVA: 0x5A7B1C Offset: 0x5A7B1C VA: 0x5A7B1C
	|-Collection<Vector3>.IsValidItem
	|
	|-RVA: 0x5A9768 Offset: 0x5A9768 VA: 0x5A9768
	|-Collection<Vector4>.IsValidItem
	*/

	// RVA: -1 Offset: -1
	internal static T ConvertItem(object item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x592774 Offset: 0x592774 VA: 0x592774
	|-Collection<int>.ConvertItem
	|
	|-RVA: 0x594230 Offset: 0x594230 VA: 0x594230
	|-Collection<object>.ConvertItem
	|
	|-RVA: 0x595E44 Offset: 0x595E44 VA: 0x595E44
	|-Collection<CustomAttributeNamedArgument>.ConvertItem
	|
	|-RVA: 0x597924 Offset: 0x597924 VA: 0x597924
	|-Collection<CustomAttributeTypedArgument>.ConvertItem
	|
	|-RVA: 0x599404 Offset: 0x599404 VA: 0x599404
	|-Collection<BeforeRenderHelper.OrderBlock>.ConvertItem
	|
	|-RVA: 0x59AE18 Offset: 0x59AE18 VA: 0x59AE18
	|-Collection<Color32>.ConvertItem
	|
	|-RVA: 0x59D128 Offset: 0x59D128 VA: 0x59D128
	|-Collection<RaycastResult>.ConvertItem
	|
	|-RVA: 0x59ECD8 Offset: 0x59ECD8 VA: 0x59ECD8
	|-Collection<UICharInfo>.ConvertItem
	|
	|-RVA: 0x5A0924 Offset: 0x5A0924 VA: 0x5A0924
	|-Collection<UILineInfo>.ConvertItem
	|
	|-RVA: 0x5A2A14 Offset: 0x5A2A14 VA: 0x5A2A14
	|-Collection<UIVertex>.ConvertItem
	|
	|-RVA: 0x5A45BC Offset: 0x5A45BC VA: 0x5A45BC
	|-Collection<UnitySynchronizationContext.WorkRequest>.ConvertItem
	|
	|-RVA: 0x5A609C Offset: 0x5A609C VA: 0x5A609C
	|-Collection<Vector2>.ConvertItem
	|
	|-RVA: 0x5A7C44 Offset: 0x5A7C44 VA: 0x5A7C44
	|-Collection<Vector3>.ConvertItem
	|
	|-RVA: 0x5A9890 Offset: 0x5A9890 VA: 0x5A9890
	|-Collection<Vector4>.ConvertItem
	*/

	// RVA: -1 Offset: -1
	internal static void CheckWritable(IList<T> list) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5928B8 Offset: 0x5928B8 VA: 0x5928B8
	|-Collection<int>.CheckWritable
	|
	|-RVA: 0x5943F0 Offset: 0x5943F0 VA: 0x5943F0
	|-Collection<object>.CheckWritable
	|
	|-RVA: 0x595F98 Offset: 0x595F98 VA: 0x595F98
	|-Collection<CustomAttributeNamedArgument>.CheckWritable
	|
	|-RVA: 0x597A78 Offset: 0x597A78 VA: 0x597A78
	|-Collection<CustomAttributeTypedArgument>.CheckWritable
	|
	|-RVA: 0x599558 Offset: 0x599558 VA: 0x599558
	|-Collection<BeforeRenderHelper.OrderBlock>.CheckWritable
	|
	|-RVA: 0x59AF5C Offset: 0x59AF5C VA: 0x59AF5C
	|-Collection<Color32>.CheckWritable
	|
	|-RVA: 0x59D284 Offset: 0x59D284 VA: 0x59D284
	|-Collection<RaycastResult>.CheckWritable
	|
	|-RVA: 0x59EE2C Offset: 0x59EE2C VA: 0x59EE2C
	|-Collection<UICharInfo>.CheckWritable
	|
	|-RVA: 0x5A0A70 Offset: 0x5A0A70 VA: 0x5A0A70
	|-Collection<UILineInfo>.CheckWritable
	|
	|-RVA: 0x5A2B68 Offset: 0x5A2B68 VA: 0x5A2B68
	|-Collection<UIVertex>.CheckWritable
	|
	|-RVA: 0x5A4710 Offset: 0x5A4710 VA: 0x5A4710
	|-Collection<UnitySynchronizationContext.WorkRequest>.CheckWritable
	|
	|-RVA: 0x5A61F0 Offset: 0x5A61F0 VA: 0x5A61F0
	|-Collection<Vector2>.CheckWritable
	|
	|-RVA: 0x5A7D98 Offset: 0x5A7D98 VA: 0x5A7D98
	|-Collection<Vector3>.CheckWritable
	|
	|-RVA: 0x5A99DC Offset: 0x5A99DC VA: 0x5A99DC
	|-Collection<Vector4>.CheckWritable
	*/

	// RVA: -1 Offset: -1
	internal static bool IsSynchronized(IList<T> list) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x592A00 Offset: 0x592A00 VA: 0x592A00
	|-Collection<int>.IsSynchronized
	|
	|-RVA: 0x594538 Offset: 0x594538 VA: 0x594538
	|-Collection<object>.IsSynchronized
	|
	|-RVA: 0x5960E0 Offset: 0x5960E0 VA: 0x5960E0
	|-Collection<CustomAttributeNamedArgument>.IsSynchronized
	|
	|-RVA: 0x597BC0 Offset: 0x597BC0 VA: 0x597BC0
	|-Collection<CustomAttributeTypedArgument>.IsSynchronized
	|
	|-RVA: 0x5996A0 Offset: 0x5996A0 VA: 0x5996A0
	|-Collection<BeforeRenderHelper.OrderBlock>.IsSynchronized
	|
	|-RVA: 0x59B0A4 Offset: 0x59B0A4 VA: 0x59B0A4
	|-Collection<Color32>.IsSynchronized
	|
	|-RVA: 0x59D3CC Offset: 0x59D3CC VA: 0x59D3CC
	|-Collection<RaycastResult>.IsSynchronized
	|
	|-RVA: 0x59EF74 Offset: 0x59EF74 VA: 0x59EF74
	|-Collection<UICharInfo>.IsSynchronized
	|
	|-RVA: 0x5A0BB8 Offset: 0x5A0BB8 VA: 0x5A0BB8
	|-Collection<UILineInfo>.IsSynchronized
	|
	|-RVA: 0x5A2CB0 Offset: 0x5A2CB0 VA: 0x5A2CB0
	|-Collection<UIVertex>.IsSynchronized
	|
	|-RVA: 0x5A4858 Offset: 0x5A4858 VA: 0x5A4858
	|-Collection<UnitySynchronizationContext.WorkRequest>.IsSynchronized
	|
	|-RVA: 0x5A6338 Offset: 0x5A6338 VA: 0x5A6338
	|-Collection<Vector2>.IsSynchronized
	|
	|-RVA: 0x5A7EE0 Offset: 0x5A7EE0 VA: 0x5A7EE0
	|-Collection<Vector3>.IsSynchronized
	|
	|-RVA: 0x5A9B24 Offset: 0x5A9B24 VA: 0x5A9B24
	|-Collection<Vector4>.IsSynchronized
	*/

	// RVA: -1 Offset: -1
	internal static bool IsFixedSize(IList<T> list) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x592AF0 Offset: 0x592AF0 VA: 0x592AF0
	|-Collection<int>.IsFixedSize
	|
	|-RVA: 0x594628 Offset: 0x594628 VA: 0x594628
	|-Collection<object>.IsFixedSize
	|
	|-RVA: 0x5961D0 Offset: 0x5961D0 VA: 0x5961D0
	|-Collection<CustomAttributeNamedArgument>.IsFixedSize
	|
	|-RVA: 0x597CB0 Offset: 0x597CB0 VA: 0x597CB0
	|-Collection<CustomAttributeTypedArgument>.IsFixedSize
	|
	|-RVA: 0x599790 Offset: 0x599790 VA: 0x599790
	|-Collection<BeforeRenderHelper.OrderBlock>.IsFixedSize
	|
	|-RVA: 0x59B194 Offset: 0x59B194 VA: 0x59B194
	|-Collection<Color32>.IsFixedSize
	|
	|-RVA: 0x59D4BC Offset: 0x59D4BC VA: 0x59D4BC
	|-Collection<RaycastResult>.IsFixedSize
	|
	|-RVA: 0x59F064 Offset: 0x59F064 VA: 0x59F064
	|-Collection<UICharInfo>.IsFixedSize
	|
	|-RVA: 0x5A0CA8 Offset: 0x5A0CA8 VA: 0x5A0CA8
	|-Collection<UILineInfo>.IsFixedSize
	|
	|-RVA: 0x5A2DA0 Offset: 0x5A2DA0 VA: 0x5A2DA0
	|-Collection<UIVertex>.IsFixedSize
	|
	|-RVA: 0x5A4948 Offset: 0x5A4948 VA: 0x5A4948
	|-Collection<UnitySynchronizationContext.WorkRequest>.IsFixedSize
	|
	|-RVA: 0x5A6428 Offset: 0x5A6428 VA: 0x5A6428
	|-Collection<Vector2>.IsFixedSize
	|
	|-RVA: 0x5A7FD0 Offset: 0x5A7FD0 VA: 0x5A7FD0
	|-Collection<Vector3>.IsFixedSize
	|
	|-RVA: 0x5A9C14 Offset: 0x5A9C14 VA: 0x5A9C14
	|-Collection<Vector4>.IsFixedSize
	*/
}

// Namespace: System.Collections.ObjectModel
[DefaultMemberAttribute] // RVA: 0x947C4 Offset: 0x947C4 VA: 0x947C4
[ComVisibleAttribute] // RVA: 0x947C4 Offset: 0x947C4 VA: 0x947C4
[Serializable]
public class ReadOnlyCollection<T> : IEnumerable, ICollection, IList, ICollection<T>, IList<T>, IEnumerable<T> // TypeDefIndex: 178
{
	// Fields
	private IList<T> list; // 0x0

	// Properties
	private T System.Collections.Generic.IList<T>.Item { get; set; }
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private object System.Collections.IList.Item { get; set; }
	public int Count { get; }
	public T Item { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(IList<T> list) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5A9D04 Offset: 0x5A9D04 VA: 0x5A9D04
	|-ReadOnlyCollection<int>..ctor
	|
	|-RVA: 0x55CD40 Offset: 0x55CD40 VA: 0x55CD40
	|-ReadOnlyCollection<object>..ctor
	|
	|-RVA: 0x55DF94 Offset: 0x55DF94 VA: 0x55DF94
	|-ReadOnlyCollection<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0x55F1C0 Offset: 0x55F1C0 VA: 0x55F1C0
	|-ReadOnlyCollection<CustomAttributeTypedArgument>..ctor
	|
	|-RVA: 0x560390 Offset: 0x560390 VA: 0x560390
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0x561560 Offset: 0x561560 VA: 0x561560
	|-ReadOnlyCollection<Color32>..ctor
	|
	|-RVA: 0x5626FC Offset: 0x5626FC VA: 0x5626FC
	|-ReadOnlyCollection<RaycastResult>..ctor
	|
	|-RVA: 0x563BD0 Offset: 0x563BD0 VA: 0x563BD0
	|-ReadOnlyCollection<UICharInfo>..ctor
	|
	|-RVA: 0x564DFC Offset: 0x564DFC VA: 0x564DFC
	|-ReadOnlyCollection<UILineInfo>..ctor
	|
	|-RVA: 0x566078 Offset: 0x566078 VA: 0x566078
	|-ReadOnlyCollection<UIVertex>..ctor
	|
	|-RVA: 0x567560 Offset: 0x567560 VA: 0x567560
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0x56878C Offset: 0x56878C VA: 0x56878C
	|-ReadOnlyCollection<Vector2>..ctor
	|
	|-RVA: 0x56995C Offset: 0x56995C VA: 0x56995C
	|-ReadOnlyCollection<Vector3>..ctor
	|
	|-RVA: 0x56AB88 Offset: 0x56AB88 VA: 0x56AB88
	|-ReadOnlyCollection<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 22
	private void System.Collections.Generic.ICollection<T>.Add(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5A9DD0 Offset: 0x5A9DD0 VA: 0x5A9DD0
	|-ReadOnlyCollection<int>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0x55CE0C Offset: 0x55CE0C VA: 0x55CE0C
	|-ReadOnlyCollection<object>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0x55E060 Offset: 0x55E060 VA: 0x55E060
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0x55F28C Offset: 0x55F28C VA: 0x55F28C
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0x56045C Offset: 0x56045C VA: 0x56045C
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0x56162C Offset: 0x56162C VA: 0x56162C
	|-ReadOnlyCollection<Color32>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0x5627C8 Offset: 0x5627C8 VA: 0x5627C8
	|-ReadOnlyCollection<RaycastResult>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0x563C9C Offset: 0x563C9C VA: 0x563C9C
	|-ReadOnlyCollection<UICharInfo>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0x564EC8 Offset: 0x564EC8 VA: 0x564EC8
	|-ReadOnlyCollection<UILineInfo>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0x566144 Offset: 0x566144 VA: 0x566144
	|-ReadOnlyCollection<UIVertex>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0x56762C Offset: 0x56762C VA: 0x56762C
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0x568858 Offset: 0x568858 VA: 0x568858
	|-ReadOnlyCollection<Vector2>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0x569A28 Offset: 0x569A28 VA: 0x569A28
	|-ReadOnlyCollection<Vector3>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0x56AC54 Offset: 0x56AC54 VA: 0x56AC54
	|-ReadOnlyCollection<Vector4>.System.Collections.Generic.ICollection<T>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 23
	private void System.Collections.Generic.ICollection<T>.Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5A9E58 Offset: 0x5A9E58 VA: 0x5A9E58
	|-ReadOnlyCollection<int>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0x55CE94 Offset: 0x55CE94 VA: 0x55CE94
	|-ReadOnlyCollection<object>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0x55E0E8 Offset: 0x55E0E8 VA: 0x55E0E8
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0x55F314 Offset: 0x55F314 VA: 0x55F314
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0x5604E4 Offset: 0x5604E4 VA: 0x5604E4
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0x5616B4 Offset: 0x5616B4 VA: 0x5616B4
	|-ReadOnlyCollection<Color32>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0x562850 Offset: 0x562850 VA: 0x562850
	|-ReadOnlyCollection<RaycastResult>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0x563D24 Offset: 0x563D24 VA: 0x563D24
	|-ReadOnlyCollection<UICharInfo>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0x564F50 Offset: 0x564F50 VA: 0x564F50
	|-ReadOnlyCollection<UILineInfo>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0x5661E0 Offset: 0x5661E0 VA: 0x5661E0
	|-ReadOnlyCollection<UIVertex>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0x5676B4 Offset: 0x5676B4 VA: 0x5676B4
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0x5688E0 Offset: 0x5688E0 VA: 0x5688E0
	|-ReadOnlyCollection<Vector2>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0x569AB0 Offset: 0x569AB0 VA: 0x569AB0
	|-ReadOnlyCollection<Vector3>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0x56ACDC Offset: 0x56ACDC VA: 0x56ACDC
	|-ReadOnlyCollection<Vector4>.System.Collections.Generic.ICollection<T>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 29
	private void System.Collections.Generic.IList<T>.Insert(int index, T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5A9EE0 Offset: 0x5A9EE0 VA: 0x5A9EE0
	|-ReadOnlyCollection<int>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x55CF1C Offset: 0x55CF1C VA: 0x55CF1C
	|-ReadOnlyCollection<object>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x55E170 Offset: 0x55E170 VA: 0x55E170
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x55F39C Offset: 0x55F39C VA: 0x55F39C
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x56056C Offset: 0x56056C VA: 0x56056C
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x56173C Offset: 0x56173C VA: 0x56173C
	|-ReadOnlyCollection<Color32>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x5628D8 Offset: 0x5628D8 VA: 0x5628D8
	|-ReadOnlyCollection<RaycastResult>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x563DAC Offset: 0x563DAC VA: 0x563DAC
	|-ReadOnlyCollection<UICharInfo>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x564FD8 Offset: 0x564FD8 VA: 0x564FD8
	|-ReadOnlyCollection<UILineInfo>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x566268 Offset: 0x566268 VA: 0x566268
	|-ReadOnlyCollection<UIVertex>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x56773C Offset: 0x56773C VA: 0x56773C
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x568968 Offset: 0x568968 VA: 0x568968
	|-ReadOnlyCollection<Vector2>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x569B38 Offset: 0x569B38 VA: 0x569B38
	|-ReadOnlyCollection<Vector3>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x56AD64 Offset: 0x56AD64 VA: 0x56AD64
	|-ReadOnlyCollection<Vector4>.System.Collections.Generic.IList<T>.Insert
	*/

	// RVA: -1 Offset: -1 Slot: 26
	private bool System.Collections.Generic.ICollection<T>.Remove(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5A9F68 Offset: 0x5A9F68 VA: 0x5A9F68
	|-ReadOnlyCollection<int>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x55CFA4 Offset: 0x55CFA4 VA: 0x55CFA4
	|-ReadOnlyCollection<object>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x55E1F8 Offset: 0x55E1F8 VA: 0x55E1F8
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x55F424 Offset: 0x55F424 VA: 0x55F424
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x5605F4 Offset: 0x5605F4 VA: 0x5605F4
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x5617C4 Offset: 0x5617C4 VA: 0x5617C4
	|-ReadOnlyCollection<Color32>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x562960 Offset: 0x562960 VA: 0x562960
	|-ReadOnlyCollection<RaycastResult>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x563E34 Offset: 0x563E34 VA: 0x563E34
	|-ReadOnlyCollection<UICharInfo>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x565060 Offset: 0x565060 VA: 0x565060
	|-ReadOnlyCollection<UILineInfo>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x5662FC Offset: 0x5662FC VA: 0x5662FC
	|-ReadOnlyCollection<UIVertex>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x5677C4 Offset: 0x5677C4 VA: 0x5677C4
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x5689F0 Offset: 0x5689F0 VA: 0x5689F0
	|-ReadOnlyCollection<Vector2>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x569BC0 Offset: 0x569BC0 VA: 0x569BC0
	|-ReadOnlyCollection<Vector3>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x56ADEC Offset: 0x56ADEC VA: 0x56ADEC
	|-ReadOnlyCollection<Vector4>.System.Collections.Generic.ICollection<T>.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 30
	private void System.Collections.Generic.IList<T>.RemoveAt(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5A9FF0 Offset: 0x5A9FF0 VA: 0x5A9FF0
	|-ReadOnlyCollection<int>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0x55D02C Offset: 0x55D02C VA: 0x55D02C
	|-ReadOnlyCollection<object>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0x55E280 Offset: 0x55E280 VA: 0x55E280
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0x55F4AC Offset: 0x55F4AC VA: 0x55F4AC
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0x56067C Offset: 0x56067C VA: 0x56067C
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0x56184C Offset: 0x56184C VA: 0x56184C
	|-ReadOnlyCollection<Color32>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0x5629E8 Offset: 0x5629E8 VA: 0x5629E8
	|-ReadOnlyCollection<RaycastResult>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0x563EBC Offset: 0x563EBC VA: 0x563EBC
	|-ReadOnlyCollection<UICharInfo>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0x5650E8 Offset: 0x5650E8 VA: 0x5650E8
	|-ReadOnlyCollection<UILineInfo>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0x566398 Offset: 0x566398 VA: 0x566398
	|-ReadOnlyCollection<UIVertex>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0x56784C Offset: 0x56784C VA: 0x56784C
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0x568A78 Offset: 0x568A78 VA: 0x568A78
	|-ReadOnlyCollection<Vector2>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0x569C48 Offset: 0x569C48 VA: 0x569C48
	|-ReadOnlyCollection<Vector3>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0x56AE74 Offset: 0x56AE74 VA: 0x56AE74
	|-ReadOnlyCollection<Vector4>.System.Collections.Generic.IList<T>.RemoveAt
	*/

	// RVA: -1 Offset: -1 Slot: 31
	private T System.Collections.Generic.IList<T>.get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA078 Offset: 0x5AA078 VA: 0x5AA078
	|-ReadOnlyCollection<int>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x55D0B4 Offset: 0x55D0B4 VA: 0x55D0B4
	|-ReadOnlyCollection<object>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x55E308 Offset: 0x55E308 VA: 0x55E308
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x55F534 Offset: 0x55F534 VA: 0x55F534
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x560704 Offset: 0x560704 VA: 0x560704
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x5618D4 Offset: 0x5618D4 VA: 0x5618D4
	|-ReadOnlyCollection<Color32>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x562A70 Offset: 0x562A70 VA: 0x562A70
	|-ReadOnlyCollection<RaycastResult>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x563F44 Offset: 0x563F44 VA: 0x563F44
	|-ReadOnlyCollection<UICharInfo>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x565170 Offset: 0x565170 VA: 0x565170
	|-ReadOnlyCollection<UILineInfo>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x566420 Offset: 0x566420 VA: 0x566420
	|-ReadOnlyCollection<UIVertex>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x5678D4 Offset: 0x5678D4 VA: 0x5678D4
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x568B00 Offset: 0x568B00 VA: 0x568B00
	|-ReadOnlyCollection<Vector2>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x569CD0 Offset: 0x569CD0 VA: 0x569CD0
	|-ReadOnlyCollection<Vector3>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x56AEFC Offset: 0x56AEFC VA: 0x56AEFC
	|-ReadOnlyCollection<Vector4>.System.Collections.Generic.IList<T>.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 32
	private void System.Collections.Generic.IList<T>.set_Item(int index, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA0BC Offset: 0x5AA0BC VA: 0x5AA0BC
	|-ReadOnlyCollection<int>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x55D0F8 Offset: 0x55D0F8 VA: 0x55D0F8
	|-ReadOnlyCollection<object>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x55E354 Offset: 0x55E354 VA: 0x55E354
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x55F580 Offset: 0x55F580 VA: 0x55F580
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x560750 Offset: 0x560750 VA: 0x560750
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x561918 Offset: 0x561918 VA: 0x561918
	|-ReadOnlyCollection<Color32>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x562ABC Offset: 0x562ABC VA: 0x562ABC
	|-ReadOnlyCollection<RaycastResult>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x563F90 Offset: 0x563F90 VA: 0x563F90
	|-ReadOnlyCollection<UICharInfo>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x5651BC Offset: 0x5651BC VA: 0x5651BC
	|-ReadOnlyCollection<UILineInfo>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x56646C Offset: 0x56646C VA: 0x56646C
	|-ReadOnlyCollection<UIVertex>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x567920 Offset: 0x567920 VA: 0x567920
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x568B4C Offset: 0x568B4C VA: 0x568B4C
	|-ReadOnlyCollection<Vector2>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x569D1C Offset: 0x569D1C VA: 0x569D1C
	|-ReadOnlyCollection<Vector3>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x56AF48 Offset: 0x56AF48 VA: 0x56AF48
	|-ReadOnlyCollection<Vector4>.System.Collections.Generic.IList<T>.set_Item
	*/

	// RVA: -1 Offset: -1 Slot: 21
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA144 Offset: 0x5AA144 VA: 0x5AA144
	|-ReadOnlyCollection<int>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x55D180 Offset: 0x55D180 VA: 0x55D180
	|-ReadOnlyCollection<object>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x55E3DC Offset: 0x55E3DC VA: 0x55E3DC
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x55F608 Offset: 0x55F608 VA: 0x55F608
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x5607D8 Offset: 0x5607D8 VA: 0x5607D8
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x5619A0 Offset: 0x5619A0 VA: 0x5619A0
	|-ReadOnlyCollection<Color32>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x562B44 Offset: 0x562B44 VA: 0x562B44
	|-ReadOnlyCollection<RaycastResult>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x564018 Offset: 0x564018 VA: 0x564018
	|-ReadOnlyCollection<UICharInfo>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x565244 Offset: 0x565244 VA: 0x565244
	|-ReadOnlyCollection<UILineInfo>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x566500 Offset: 0x566500 VA: 0x566500
	|-ReadOnlyCollection<UIVertex>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x5679A8 Offset: 0x5679A8 VA: 0x5679A8
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x568BD4 Offset: 0x568BD4 VA: 0x568BD4
	|-ReadOnlyCollection<Vector2>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x569DA4 Offset: 0x569DA4 VA: 0x569DA4
	|-ReadOnlyCollection<Vector3>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x56AFD0 Offset: 0x56AFD0 VA: 0x56AFD0
	|-ReadOnlyCollection<Vector4>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 8
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA14C Offset: 0x5AA14C VA: 0x5AA14C
	|-ReadOnlyCollection<int>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x55D188 Offset: 0x55D188 VA: 0x55D188
	|-ReadOnlyCollection<object>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x55E3E4 Offset: 0x55E3E4 VA: 0x55E3E4
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x55F610 Offset: 0x55F610 VA: 0x55F610
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5607E0 Offset: 0x5607E0 VA: 0x5607E0
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5619A8 Offset: 0x5619A8 VA: 0x5619A8
	|-ReadOnlyCollection<Color32>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x562B4C Offset: 0x562B4C VA: 0x562B4C
	|-ReadOnlyCollection<RaycastResult>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x564020 Offset: 0x564020 VA: 0x564020
	|-ReadOnlyCollection<UICharInfo>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x56524C Offset: 0x56524C VA: 0x56524C
	|-ReadOnlyCollection<UILineInfo>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x566508 Offset: 0x566508 VA: 0x566508
	|-ReadOnlyCollection<UIVertex>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5679B0 Offset: 0x5679B0 VA: 0x5679B0
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x568BDC Offset: 0x568BDC VA: 0x568BDC
	|-ReadOnlyCollection<Vector2>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x569DAC Offset: 0x569DAC VA: 0x569DAC
	|-ReadOnlyCollection<Vector3>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x56AFD8 Offset: 0x56AFD8 VA: 0x56AFD8
	|-ReadOnlyCollection<Vector4>.System.Collections.ICollection.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA31C Offset: 0x5AA31C VA: 0x5AA31C
	|-ReadOnlyCollection<int>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x55D358 Offset: 0x55D358 VA: 0x55D358
	|-ReadOnlyCollection<object>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x55E5B4 Offset: 0x55E5B4 VA: 0x55E5B4
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x55F7E0 Offset: 0x55F7E0 VA: 0x55F7E0
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x5609B0 Offset: 0x5609B0 VA: 0x5609B0
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x561B78 Offset: 0x561B78 VA: 0x561B78
	|-ReadOnlyCollection<Color32>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x562D1C Offset: 0x562D1C VA: 0x562D1C
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x5641F0 Offset: 0x5641F0 VA: 0x5641F0
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x56541C Offset: 0x56541C VA: 0x56541C
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x5666D8 Offset: 0x5666D8 VA: 0x5666D8
	|-ReadOnlyCollection<UIVertex>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x567B80 Offset: 0x567B80 VA: 0x567B80
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x568DAC Offset: 0x568DAC VA: 0x568DAC
	|-ReadOnlyCollection<Vector2>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x569F7C Offset: 0x569F7C VA: 0x569F7C
	|-ReadOnlyCollection<Vector3>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x56B1A8 Offset: 0x56B1A8 VA: 0x56B1A8
	|-ReadOnlyCollection<Vector4>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 13
	private int System.Collections.IList.Add(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA3F4 Offset: 0x5AA3F4 VA: 0x5AA3F4
	|-ReadOnlyCollection<int>.System.Collections.IList.Add
	|
	|-RVA: 0x55D430 Offset: 0x55D430 VA: 0x55D430
	|-ReadOnlyCollection<object>.System.Collections.IList.Add
	|
	|-RVA: 0x55E68C Offset: 0x55E68C VA: 0x55E68C
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.Add
	|
	|-RVA: 0x55F8B8 Offset: 0x55F8B8 VA: 0x55F8B8
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.Add
	|
	|-RVA: 0x560A88 Offset: 0x560A88 VA: 0x560A88
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Add
	|
	|-RVA: 0x561C50 Offset: 0x561C50 VA: 0x561C50
	|-ReadOnlyCollection<Color32>.System.Collections.IList.Add
	|
	|-RVA: 0x562DF4 Offset: 0x562DF4 VA: 0x562DF4
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.Add
	|
	|-RVA: 0x5642C8 Offset: 0x5642C8 VA: 0x5642C8
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.Add
	|
	|-RVA: 0x5654F4 Offset: 0x5654F4 VA: 0x5654F4
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.Add
	|
	|-RVA: 0x5667B0 Offset: 0x5667B0 VA: 0x5667B0
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.Add
	|
	|-RVA: 0x567C58 Offset: 0x567C58 VA: 0x567C58
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Add
	|
	|-RVA: 0x568E84 Offset: 0x568E84 VA: 0x568E84
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.Add
	|
	|-RVA: 0x56A054 Offset: 0x56A054 VA: 0x56A054
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.Add
	|
	|-RVA: 0x56B280 Offset: 0x56B280 VA: 0x56B280
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.Add
	*/

	// RVA: -1 Offset: -1 Slot: 14
	private void System.Collections.IList.Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA47C Offset: 0x5AA47C VA: 0x5AA47C
	|-ReadOnlyCollection<int>.System.Collections.IList.Clear
	|
	|-RVA: 0x55D4B8 Offset: 0x55D4B8 VA: 0x55D4B8
	|-ReadOnlyCollection<object>.System.Collections.IList.Clear
	|
	|-RVA: 0x55E714 Offset: 0x55E714 VA: 0x55E714
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.Clear
	|
	|-RVA: 0x55F940 Offset: 0x55F940 VA: 0x55F940
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.Clear
	|
	|-RVA: 0x560B10 Offset: 0x560B10 VA: 0x560B10
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Clear
	|
	|-RVA: 0x561CD8 Offset: 0x561CD8 VA: 0x561CD8
	|-ReadOnlyCollection<Color32>.System.Collections.IList.Clear
	|
	|-RVA: 0x562E7C Offset: 0x562E7C VA: 0x562E7C
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.Clear
	|
	|-RVA: 0x564350 Offset: 0x564350 VA: 0x564350
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.Clear
	|
	|-RVA: 0x56557C Offset: 0x56557C VA: 0x56557C
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.Clear
	|
	|-RVA: 0x566838 Offset: 0x566838 VA: 0x566838
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.Clear
	|
	|-RVA: 0x567CE0 Offset: 0x567CE0 VA: 0x567CE0
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Clear
	|
	|-RVA: 0x568F0C Offset: 0x568F0C VA: 0x568F0C
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.Clear
	|
	|-RVA: 0x56A0DC Offset: 0x56A0DC VA: 0x56A0DC
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.Clear
	|
	|-RVA: 0x56B308 Offset: 0x56B308 VA: 0x56B308
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 15
	private bool System.Collections.IList.Contains(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA504 Offset: 0x5AA504 VA: 0x5AA504
	|-ReadOnlyCollection<int>.System.Collections.IList.Contains
	|
	|-RVA: 0x55D540 Offset: 0x55D540 VA: 0x55D540
	|-ReadOnlyCollection<object>.System.Collections.IList.Contains
	|
	|-RVA: 0x55E79C Offset: 0x55E79C VA: 0x55E79C
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.Contains
	|
	|-RVA: 0x55F9C8 Offset: 0x55F9C8 VA: 0x55F9C8
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.Contains
	|
	|-RVA: 0x560B98 Offset: 0x560B98 VA: 0x560B98
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Contains
	|
	|-RVA: 0x561D60 Offset: 0x561D60 VA: 0x561D60
	|-ReadOnlyCollection<Color32>.System.Collections.IList.Contains
	|
	|-RVA: 0x562F04 Offset: 0x562F04 VA: 0x562F04
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.Contains
	|
	|-RVA: 0x5643D8 Offset: 0x5643D8 VA: 0x5643D8
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.Contains
	|
	|-RVA: 0x565604 Offset: 0x565604 VA: 0x565604
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.Contains
	|
	|-RVA: 0x5668C0 Offset: 0x5668C0 VA: 0x5668C0
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.Contains
	|
	|-RVA: 0x567D68 Offset: 0x567D68 VA: 0x567D68
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Contains
	|
	|-RVA: 0x568F94 Offset: 0x568F94 VA: 0x568F94
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.Contains
	|
	|-RVA: 0x56A164 Offset: 0x56A164 VA: 0x56A164
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.Contains
	|
	|-RVA: 0x56B390 Offset: 0x56B390 VA: 0x56B390
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 16
	private int System.Collections.IList.IndexOf(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA618 Offset: 0x5AA618 VA: 0x5AA618
	|-ReadOnlyCollection<int>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x55D6CC Offset: 0x55D6CC VA: 0x55D6CC
	|-ReadOnlyCollection<object>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x55E8CC Offset: 0x55E8CC VA: 0x55E8CC
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x55FAE0 Offset: 0x55FAE0 VA: 0x55FAE0
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x560CB0 Offset: 0x560CB0 VA: 0x560CB0
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x561E74 Offset: 0x561E74 VA: 0x561E74
	|-ReadOnlyCollection<Color32>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x563108 Offset: 0x563108 VA: 0x563108
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x564508 Offset: 0x564508 VA: 0x564508
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x56574C Offset: 0x56574C VA: 0x56574C
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x566A7C Offset: 0x566A7C VA: 0x566A7C
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x567E98 Offset: 0x567E98 VA: 0x567E98
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x5690AC Offset: 0x5690AC VA: 0x5690AC
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x56A294 Offset: 0x56A294 VA: 0x56A294
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x56B4D8 Offset: 0x56B4D8 VA: 0x56B4D8
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 17
	private void System.Collections.IList.Insert(int index, object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA72C Offset: 0x5AA72C VA: 0x5AA72C
	|-ReadOnlyCollection<int>.System.Collections.IList.Insert
	|
	|-RVA: 0x55D858 Offset: 0x55D858 VA: 0x55D858
	|-ReadOnlyCollection<object>.System.Collections.IList.Insert
	|
	|-RVA: 0x55E9FC Offset: 0x55E9FC VA: 0x55E9FC
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.Insert
	|
	|-RVA: 0x55FBF8 Offset: 0x55FBF8 VA: 0x55FBF8
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.Insert
	|
	|-RVA: 0x560DC8 Offset: 0x560DC8 VA: 0x560DC8
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Insert
	|
	|-RVA: 0x561F88 Offset: 0x561F88 VA: 0x561F88
	|-ReadOnlyCollection<Color32>.System.Collections.IList.Insert
	|
	|-RVA: 0x56330C Offset: 0x56330C VA: 0x56330C
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.Insert
	|
	|-RVA: 0x564638 Offset: 0x564638 VA: 0x564638
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.Insert
	|
	|-RVA: 0x565894 Offset: 0x565894 VA: 0x565894
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.Insert
	|
	|-RVA: 0x566C38 Offset: 0x566C38 VA: 0x566C38
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.Insert
	|
	|-RVA: 0x567FC8 Offset: 0x567FC8 VA: 0x567FC8
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Insert
	|
	|-RVA: 0x5691C4 Offset: 0x5691C4 VA: 0x5691C4
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.Insert
	|
	|-RVA: 0x56A3C4 Offset: 0x56A3C4 VA: 0x56A3C4
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.Insert
	|
	|-RVA: 0x56B620 Offset: 0x56B620 VA: 0x56B620
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.Insert
	*/

	// RVA: -1 Offset: -1 Slot: 18
	private void System.Collections.IList.Remove(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA7B4 Offset: 0x5AA7B4 VA: 0x5AA7B4
	|-ReadOnlyCollection<int>.System.Collections.IList.Remove
	|
	|-RVA: 0x55D8E0 Offset: 0x55D8E0 VA: 0x55D8E0
	|-ReadOnlyCollection<object>.System.Collections.IList.Remove
	|
	|-RVA: 0x55EA84 Offset: 0x55EA84 VA: 0x55EA84
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.Remove
	|
	|-RVA: 0x55FC80 Offset: 0x55FC80 VA: 0x55FC80
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.Remove
	|
	|-RVA: 0x560E50 Offset: 0x560E50 VA: 0x560E50
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Remove
	|
	|-RVA: 0x562010 Offset: 0x562010 VA: 0x562010
	|-ReadOnlyCollection<Color32>.System.Collections.IList.Remove
	|
	|-RVA: 0x563394 Offset: 0x563394 VA: 0x563394
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.Remove
	|
	|-RVA: 0x5646C0 Offset: 0x5646C0 VA: 0x5646C0
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.Remove
	|
	|-RVA: 0x56591C Offset: 0x56591C VA: 0x56591C
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.Remove
	|
	|-RVA: 0x566CC0 Offset: 0x566CC0 VA: 0x566CC0
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.Remove
	|
	|-RVA: 0x568050 Offset: 0x568050 VA: 0x568050
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Remove
	|
	|-RVA: 0x56924C Offset: 0x56924C VA: 0x56924C
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.Remove
	|
	|-RVA: 0x56A44C Offset: 0x56A44C VA: 0x56A44C
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.Remove
	|
	|-RVA: 0x56B6A8 Offset: 0x56B6A8 VA: 0x56B6A8
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 19
	private void System.Collections.IList.RemoveAt(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA83C Offset: 0x5AA83C VA: 0x5AA83C
	|-ReadOnlyCollection<int>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0x55D968 Offset: 0x55D968 VA: 0x55D968
	|-ReadOnlyCollection<object>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0x55EB0C Offset: 0x55EB0C VA: 0x55EB0C
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0x55FD08 Offset: 0x55FD08 VA: 0x55FD08
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0x560ED8 Offset: 0x560ED8 VA: 0x560ED8
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0x562098 Offset: 0x562098 VA: 0x562098
	|-ReadOnlyCollection<Color32>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0x56341C Offset: 0x56341C VA: 0x56341C
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0x564748 Offset: 0x564748 VA: 0x564748
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0x5659A4 Offset: 0x5659A4 VA: 0x5659A4
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0x566D48 Offset: 0x566D48 VA: 0x566D48
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0x5680D8 Offset: 0x5680D8 VA: 0x5680D8
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0x5692D4 Offset: 0x5692D4 VA: 0x5692D4
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0x56A4D4 Offset: 0x56A4D4 VA: 0x56A4D4
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0x56B730 Offset: 0x56B730 VA: 0x56B730
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.RemoveAt
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private bool System.Collections.ICollection.get_IsSynchronized() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA8C4 Offset: 0x5AA8C4 VA: 0x5AA8C4
	|-ReadOnlyCollection<int>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x55D9F0 Offset: 0x55D9F0 VA: 0x55D9F0
	|-ReadOnlyCollection<object>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x55EB94 Offset: 0x55EB94 VA: 0x55EB94
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x55FD90 Offset: 0x55FD90 VA: 0x55FD90
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x560F60 Offset: 0x560F60 VA: 0x560F60
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x562120 Offset: 0x562120 VA: 0x562120
	|-ReadOnlyCollection<Color32>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x5634A4 Offset: 0x5634A4 VA: 0x5634A4
	|-ReadOnlyCollection<RaycastResult>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x5647D0 Offset: 0x5647D0 VA: 0x5647D0
	|-ReadOnlyCollection<UICharInfo>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x565A2C Offset: 0x565A2C VA: 0x565A2C
	|-ReadOnlyCollection<UILineInfo>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x566DD0 Offset: 0x566DD0 VA: 0x566DD0
	|-ReadOnlyCollection<UIVertex>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x568160 Offset: 0x568160 VA: 0x568160
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x56935C Offset: 0x56935C VA: 0x56935C
	|-ReadOnlyCollection<Vector2>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x56A55C Offset: 0x56A55C VA: 0x56A55C
	|-ReadOnlyCollection<Vector3>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x56B7B8 Offset: 0x56B7B8 VA: 0x56B7B8
	|-ReadOnlyCollection<Vector4>.System.Collections.ICollection.get_IsSynchronized
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private object System.Collections.ICollection.get_SyncRoot() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA8CC Offset: 0x5AA8CC VA: 0x5AA8CC
	|-ReadOnlyCollection<int>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x55D9F8 Offset: 0x55D9F8 VA: 0x55D9F8
	|-ReadOnlyCollection<object>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x55EB9C Offset: 0x55EB9C VA: 0x55EB9C
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x55FD98 Offset: 0x55FD98 VA: 0x55FD98
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x560F68 Offset: 0x560F68 VA: 0x560F68
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x562128 Offset: 0x562128 VA: 0x562128
	|-ReadOnlyCollection<Color32>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x5634AC Offset: 0x5634AC VA: 0x5634AC
	|-ReadOnlyCollection<RaycastResult>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x5647D8 Offset: 0x5647D8 VA: 0x5647D8
	|-ReadOnlyCollection<UICharInfo>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x565A34 Offset: 0x565A34 VA: 0x565A34
	|-ReadOnlyCollection<UILineInfo>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x566DD8 Offset: 0x566DD8 VA: 0x566DD8
	|-ReadOnlyCollection<UIVertex>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x568168 Offset: 0x568168 VA: 0x568168
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x569364 Offset: 0x569364 VA: 0x569364
	|-ReadOnlyCollection<Vector2>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x56A564 Offset: 0x56A564 VA: 0x56A564
	|-ReadOnlyCollection<Vector3>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x56B7C0 Offset: 0x56B7C0 VA: 0x56B7C0
	|-ReadOnlyCollection<Vector4>.System.Collections.ICollection.get_SyncRoot
	*/

	// RVA: -1 Offset: -1 Slot: 9
	private bool System.Collections.IList.get_IsFixedSize() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA8D0 Offset: 0x5AA8D0 VA: 0x5AA8D0
	|-ReadOnlyCollection<int>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x55D9FC Offset: 0x55D9FC VA: 0x55D9FC
	|-ReadOnlyCollection<object>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x55EBA0 Offset: 0x55EBA0 VA: 0x55EBA0
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x55FD9C Offset: 0x55FD9C VA: 0x55FD9C
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x560F6C Offset: 0x560F6C VA: 0x560F6C
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x56212C Offset: 0x56212C VA: 0x56212C
	|-ReadOnlyCollection<Color32>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x5634B0 Offset: 0x5634B0 VA: 0x5634B0
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x5647DC Offset: 0x5647DC VA: 0x5647DC
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x565A38 Offset: 0x565A38 VA: 0x565A38
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x566DDC Offset: 0x566DDC VA: 0x566DDC
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x56816C Offset: 0x56816C VA: 0x56816C
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x569368 Offset: 0x569368 VA: 0x569368
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x56A568 Offset: 0x56A568 VA: 0x56A568
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x56B7C4 Offset: 0x56B7C4 VA: 0x56B7C4
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.get_IsFixedSize
	*/

	// RVA: -1 Offset: -1 Slot: 10
	private bool System.Collections.IList.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA8D8 Offset: 0x5AA8D8 VA: 0x5AA8D8
	|-ReadOnlyCollection<int>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x55DA04 Offset: 0x55DA04 VA: 0x55DA04
	|-ReadOnlyCollection<object>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x55EBA8 Offset: 0x55EBA8 VA: 0x55EBA8
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x55FDA4 Offset: 0x55FDA4 VA: 0x55FDA4
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x560F74 Offset: 0x560F74 VA: 0x560F74
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x562134 Offset: 0x562134 VA: 0x562134
	|-ReadOnlyCollection<Color32>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x5634B8 Offset: 0x5634B8 VA: 0x5634B8
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x5647E4 Offset: 0x5647E4 VA: 0x5647E4
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x565A40 Offset: 0x565A40 VA: 0x565A40
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x566DE4 Offset: 0x566DE4 VA: 0x566DE4
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x568174 Offset: 0x568174 VA: 0x568174
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x569370 Offset: 0x569370 VA: 0x569370
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x56A570 Offset: 0x56A570 VA: 0x56A570
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x56B7CC Offset: 0x56B7CC VA: 0x56B7CC
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 11
	private object System.Collections.IList.get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA8E0 Offset: 0x5AA8E0 VA: 0x5AA8E0
	|-ReadOnlyCollection<int>.System.Collections.IList.get_Item
	|
	|-RVA: 0x55DA0C Offset: 0x55DA0C VA: 0x55DA0C
	|-ReadOnlyCollection<object>.System.Collections.IList.get_Item
	|
	|-RVA: 0x55EBB0 Offset: 0x55EBB0 VA: 0x55EBB0
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.get_Item
	|
	|-RVA: 0x55FDAC Offset: 0x55FDAC VA: 0x55FDAC
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.get_Item
	|
	|-RVA: 0x560F7C Offset: 0x560F7C VA: 0x560F7C
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.get_Item
	|
	|-RVA: 0x56213C Offset: 0x56213C VA: 0x56213C
	|-ReadOnlyCollection<Color32>.System.Collections.IList.get_Item
	|
	|-RVA: 0x5634C0 Offset: 0x5634C0 VA: 0x5634C0
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.get_Item
	|
	|-RVA: 0x5647EC Offset: 0x5647EC VA: 0x5647EC
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.get_Item
	|
	|-RVA: 0x565A48 Offset: 0x565A48 VA: 0x565A48
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.get_Item
	|
	|-RVA: 0x566DEC Offset: 0x566DEC VA: 0x566DEC
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.get_Item
	|
	|-RVA: 0x56817C Offset: 0x56817C VA: 0x56817C
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.get_Item
	|
	|-RVA: 0x569378 Offset: 0x569378 VA: 0x569378
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.get_Item
	|
	|-RVA: 0x56A578 Offset: 0x56A578 VA: 0x56A578
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.get_Item
	|
	|-RVA: 0x56B7D4 Offset: 0x56B7D4 VA: 0x56B7D4
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 12
	private void System.Collections.IList.set_Item(int index, object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AA9D0 Offset: 0x5AA9D0 VA: 0x5AA9D0
	|-ReadOnlyCollection<int>.System.Collections.IList.set_Item
	|
	|-RVA: 0x55DAC4 Offset: 0x55DAC4 VA: 0x55DAC4
	|-ReadOnlyCollection<object>.System.Collections.IList.set_Item
	|
	|-RVA: 0x55ECB0 Offset: 0x55ECB0 VA: 0x55ECB0
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.set_Item
	|
	|-RVA: 0x55FEA8 Offset: 0x55FEA8 VA: 0x55FEA8
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.set_Item
	|
	|-RVA: 0x561078 Offset: 0x561078 VA: 0x561078
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.set_Item
	|
	|-RVA: 0x56222C Offset: 0x56222C VA: 0x56222C
	|-ReadOnlyCollection<Color32>.System.Collections.IList.set_Item
	|
	|-RVA: 0x5635D0 Offset: 0x5635D0 VA: 0x5635D0
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.set_Item
	|
	|-RVA: 0x5648EC Offset: 0x5648EC VA: 0x5648EC
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.set_Item
	|
	|-RVA: 0x565B48 Offset: 0x565B48 VA: 0x565B48
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.set_Item
	|
	|-RVA: 0x566EF0 Offset: 0x566EF0 VA: 0x566EF0
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.set_Item
	|
	|-RVA: 0x56827C Offset: 0x56827C VA: 0x56827C
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.set_Item
	|
	|-RVA: 0x569474 Offset: 0x569474 VA: 0x569474
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.set_Item
	|
	|-RVA: 0x56A678 Offset: 0x56A678 VA: 0x56A678
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.set_Item
	|
	|-RVA: 0x56B8D4 Offset: 0x56B8D4 VA: 0x56B8D4
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.set_Item
	*/

	// RVA: -1 Offset: -1 Slot: 24
	public bool Contains(T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AAA58 Offset: 0x5AAA58 VA: 0x5AAA58
	|-ReadOnlyCollection<int>.Contains
	|
	|-RVA: 0x55DB4C Offset: 0x55DB4C VA: 0x55DB4C
	|-ReadOnlyCollection<object>.Contains
	|
	|-RVA: 0x55ED38 Offset: 0x55ED38 VA: 0x55ED38
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.Contains
	|
	|-RVA: 0x55FF30 Offset: 0x55FF30 VA: 0x55FF30
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.Contains
	|
	|-RVA: 0x561100 Offset: 0x561100 VA: 0x561100
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.Contains
	|
	|-RVA: 0x5622B4 Offset: 0x5622B4 VA: 0x5622B4
	|-ReadOnlyCollection<Color32>.Contains
	|
	|-RVA: 0x563658 Offset: 0x563658 VA: 0x563658
	|-ReadOnlyCollection<RaycastResult>.Contains
	|
	|-RVA: 0x564974 Offset: 0x564974 VA: 0x564974
	|-ReadOnlyCollection<UICharInfo>.Contains
	|
	|-RVA: 0x565BD0 Offset: 0x565BD0 VA: 0x565BD0
	|-ReadOnlyCollection<UILineInfo>.Contains
	|
	|-RVA: 0x566F78 Offset: 0x566F78 VA: 0x566F78
	|-ReadOnlyCollection<UIVertex>.Contains
	|
	|-RVA: 0x568304 Offset: 0x568304 VA: 0x568304
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.Contains
	|
	|-RVA: 0x5694FC Offset: 0x5694FC VA: 0x5694FC
	|-ReadOnlyCollection<Vector2>.Contains
	|
	|-RVA: 0x56A700 Offset: 0x56A700 VA: 0x56A700
	|-ReadOnlyCollection<Vector3>.Contains
	|
	|-RVA: 0x56B95C Offset: 0x56B95C VA: 0x56B95C
	|-ReadOnlyCollection<Vector4>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 25
	public void CopyTo(T[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AAB10 Offset: 0x5AAB10 VA: 0x5AAB10
	|-ReadOnlyCollection<int>.CopyTo
	|
	|-RVA: 0x55DC04 Offset: 0x55DC04 VA: 0x55DC04
	|-ReadOnlyCollection<object>.CopyTo
	|
	|-RVA: 0x55EE0C Offset: 0x55EE0C VA: 0x55EE0C
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.CopyTo
	|
	|-RVA: 0x55FFF0 Offset: 0x55FFF0 VA: 0x55FFF0
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.CopyTo
	|
	|-RVA: 0x5611C0 Offset: 0x5611C0 VA: 0x5611C0
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.CopyTo
	|
	|-RVA: 0x56236C Offset: 0x56236C VA: 0x56236C
	|-ReadOnlyCollection<Color32>.CopyTo
	|
	|-RVA: 0x5637A4 Offset: 0x5637A4 VA: 0x5637A4
	|-ReadOnlyCollection<RaycastResult>.CopyTo
	|
	|-RVA: 0x564A48 Offset: 0x564A48 VA: 0x564A48
	|-ReadOnlyCollection<UICharInfo>.CopyTo
	|
	|-RVA: 0x565CB4 Offset: 0x565CB4 VA: 0x565CB4
	|-ReadOnlyCollection<UILineInfo>.CopyTo
	|
	|-RVA: 0x5670FC Offset: 0x5670FC VA: 0x5670FC
	|-ReadOnlyCollection<UIVertex>.CopyTo
	|
	|-RVA: 0x5683D8 Offset: 0x5683D8 VA: 0x5683D8
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.CopyTo
	|
	|-RVA: 0x5695BC Offset: 0x5695BC VA: 0x5695BC
	|-ReadOnlyCollection<Vector2>.CopyTo
	|
	|-RVA: 0x56A7D4 Offset: 0x56A7D4 VA: 0x56A7D4
	|-ReadOnlyCollection<Vector3>.CopyTo
	|
	|-RVA: 0x56BA40 Offset: 0x56BA40 VA: 0x56BA40
	|-ReadOnlyCollection<Vector4>.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 27
	public IEnumerator<T> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AABD0 Offset: 0x5AABD0 VA: 0x5AABD0
	|-ReadOnlyCollection<int>.GetEnumerator
	|
	|-RVA: 0x55DCC4 Offset: 0x55DCC4 VA: 0x55DCC4
	|-ReadOnlyCollection<object>.GetEnumerator
	|
	|-RVA: 0x55EECC Offset: 0x55EECC VA: 0x55EECC
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.GetEnumerator
	|
	|-RVA: 0x5600B0 Offset: 0x5600B0 VA: 0x5600B0
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.GetEnumerator
	|
	|-RVA: 0x561280 Offset: 0x561280 VA: 0x561280
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.GetEnumerator
	|
	|-RVA: 0x56242C Offset: 0x56242C VA: 0x56242C
	|-ReadOnlyCollection<Color32>.GetEnumerator
	|
	|-RVA: 0x563864 Offset: 0x563864 VA: 0x563864
	|-ReadOnlyCollection<RaycastResult>.GetEnumerator
	|
	|-RVA: 0x564B08 Offset: 0x564B08 VA: 0x564B08
	|-ReadOnlyCollection<UICharInfo>.GetEnumerator
	|
	|-RVA: 0x565D74 Offset: 0x565D74 VA: 0x565D74
	|-ReadOnlyCollection<UILineInfo>.GetEnumerator
	|
	|-RVA: 0x5671BC Offset: 0x5671BC VA: 0x5671BC
	|-ReadOnlyCollection<UIVertex>.GetEnumerator
	|
	|-RVA: 0x568498 Offset: 0x568498 VA: 0x568498
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.GetEnumerator
	|
	|-RVA: 0x56967C Offset: 0x56967C VA: 0x56967C
	|-ReadOnlyCollection<Vector2>.GetEnumerator
	|
	|-RVA: 0x56A894 Offset: 0x56A894 VA: 0x56A894
	|-ReadOnlyCollection<Vector3>.GetEnumerator
	|
	|-RVA: 0x56BB00 Offset: 0x56BB00 VA: 0x56BB00
	|-ReadOnlyCollection<Vector4>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 28
	public int IndexOf(T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AAC80 Offset: 0x5AAC80 VA: 0x5AAC80
	|-ReadOnlyCollection<int>.IndexOf
	|
	|-RVA: 0x55DD74 Offset: 0x55DD74 VA: 0x55DD74
	|-ReadOnlyCollection<object>.IndexOf
	|
	|-RVA: 0x55EF7C Offset: 0x55EF7C VA: 0x55EF7C
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.IndexOf
	|
	|-RVA: 0x560160 Offset: 0x560160 VA: 0x560160
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.IndexOf
	|
	|-RVA: 0x561330 Offset: 0x561330 VA: 0x561330
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.IndexOf
	|
	|-RVA: 0x5624DC Offset: 0x5624DC VA: 0x5624DC
	|-ReadOnlyCollection<Color32>.IndexOf
	|
	|-RVA: 0x563914 Offset: 0x563914 VA: 0x563914
	|-ReadOnlyCollection<RaycastResult>.IndexOf
	|
	|-RVA: 0x564BB8 Offset: 0x564BB8 VA: 0x564BB8
	|-ReadOnlyCollection<UICharInfo>.IndexOf
	|
	|-RVA: 0x565E24 Offset: 0x565E24 VA: 0x565E24
	|-ReadOnlyCollection<UILineInfo>.IndexOf
	|
	|-RVA: 0x56726C Offset: 0x56726C VA: 0x56726C
	|-ReadOnlyCollection<UIVertex>.IndexOf
	|
	|-RVA: 0x568548 Offset: 0x568548 VA: 0x568548
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.IndexOf
	|
	|-RVA: 0x56972C Offset: 0x56972C VA: 0x56972C
	|-ReadOnlyCollection<Vector2>.IndexOf
	|
	|-RVA: 0x56A944 Offset: 0x56A944 VA: 0x56A944
	|-ReadOnlyCollection<Vector3>.IndexOf
	|
	|-RVA: 0x56BBB0 Offset: 0x56BBB0 VA: 0x56BBB0
	|-ReadOnlyCollection<Vector4>.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 20
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AAD38 Offset: 0x5AAD38 VA: 0x5AAD38
	|-ReadOnlyCollection<int>.get_Count
	|
	|-RVA: 0x55DE2C Offset: 0x55DE2C VA: 0x55DE2C
	|-ReadOnlyCollection<object>.get_Count
	|
	|-RVA: 0x55F050 Offset: 0x55F050 VA: 0x55F050
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.get_Count
	|
	|-RVA: 0x560220 Offset: 0x560220 VA: 0x560220
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.get_Count
	|
	|-RVA: 0x5613F0 Offset: 0x5613F0 VA: 0x5613F0
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.get_Count
	|
	|-RVA: 0x562594 Offset: 0x562594 VA: 0x562594
	|-ReadOnlyCollection<Color32>.get_Count
	|
	|-RVA: 0x563A60 Offset: 0x563A60 VA: 0x563A60
	|-ReadOnlyCollection<RaycastResult>.get_Count
	|
	|-RVA: 0x564C8C Offset: 0x564C8C VA: 0x564C8C
	|-ReadOnlyCollection<UICharInfo>.get_Count
	|
	|-RVA: 0x565F08 Offset: 0x565F08 VA: 0x565F08
	|-ReadOnlyCollection<UILineInfo>.get_Count
	|
	|-RVA: 0x5673F0 Offset: 0x5673F0 VA: 0x5673F0
	|-ReadOnlyCollection<UIVertex>.get_Count
	|
	|-RVA: 0x56861C Offset: 0x56861C VA: 0x56861C
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.get_Count
	|
	|-RVA: 0x5697EC Offset: 0x5697EC VA: 0x5697EC
	|-ReadOnlyCollection<Vector2>.get_Count
	|
	|-RVA: 0x56AA18 Offset: 0x56AA18 VA: 0x56AA18
	|-ReadOnlyCollection<Vector3>.get_Count
	|
	|-RVA: 0x56BC94 Offset: 0x56BC94 VA: 0x56BC94
	|-ReadOnlyCollection<Vector4>.get_Count
	*/

	// RVA: -1 Offset: -1 Slot: 33
	public T get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5AADE8 Offset: 0x5AADE8 VA: 0x5AADE8
	|-ReadOnlyCollection<int>.get_Item
	|
	|-RVA: 0x55DEDC Offset: 0x55DEDC VA: 0x55DEDC
	|-ReadOnlyCollection<object>.get_Item
	|
	|-RVA: 0x55F100 Offset: 0x55F100 VA: 0x55F100
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.get_Item
	|
	|-RVA: 0x5602D0 Offset: 0x5602D0 VA: 0x5602D0
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.get_Item
	|
	|-RVA: 0x5614A0 Offset: 0x5614A0 VA: 0x5614A0
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.get_Item
	|
	|-RVA: 0x562644 Offset: 0x562644 VA: 0x562644
	|-ReadOnlyCollection<Color32>.get_Item
	|
	|-RVA: 0x563B10 Offset: 0x563B10 VA: 0x563B10
	|-ReadOnlyCollection<RaycastResult>.get_Item
	|
	|-RVA: 0x564D3C Offset: 0x564D3C VA: 0x564D3C
	|-ReadOnlyCollection<UICharInfo>.get_Item
	|
	|-RVA: 0x565FB8 Offset: 0x565FB8 VA: 0x565FB8
	|-ReadOnlyCollection<UILineInfo>.get_Item
	|
	|-RVA: 0x5674A0 Offset: 0x5674A0 VA: 0x5674A0
	|-ReadOnlyCollection<UIVertex>.get_Item
	|
	|-RVA: 0x5686CC Offset: 0x5686CC VA: 0x5686CC
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.get_Item
	|
	|-RVA: 0x56989C Offset: 0x56989C VA: 0x56989C
	|-ReadOnlyCollection<Vector2>.get_Item
	|
	|-RVA: 0x56AAC8 Offset: 0x56AAC8 VA: 0x56AAC8
	|-ReadOnlyCollection<Vector3>.get_Item
	|
	|-RVA: 0x56BD44 Offset: 0x56BD44 VA: 0x56BD44
	|-ReadOnlyCollection<Vector4>.get_Item
	*/
}

// Namespace: System.Collections
[DebuggerDisplayAttribute] // RVA: 0x94810 Offset: 0x94810 VA: 0x94810
[ComVisibleAttribute] // RVA: 0x94810 Offset: 0x94810 VA: 0x94810
[DebuggerTypeProxyAttribute] // RVA: 0x94810 Offset: 0x94810 VA: 0x94810
[DefaultMemberAttribute] // RVA: 0x94810 Offset: 0x94810 VA: 0x94810
[Serializable]
public class ArrayList : IEnumerable, ICloneable, ICollection, IList // TypeDefIndex: 179
{
	// Fields
	private const int DefaultInitialCapacity = 4;
	private int _size; // 0x8
	private object[] _items; // 0xC
	private int _version; // 0x10
	private static readonly object[] EmptyArray; // 0x0

	// Properties
	public virtual object Item { get; set; }
	public virtual int Count { get; }
	public virtual int Capacity { get; set; }
	public virtual bool IsFixedSize { get; }
	public virtual bool IsReadOnly { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x47A05C Offset: 0x47A05C VA: 0x47A05C
	public void .ctor() { }

	// RVA: 0x47A0FC Offset: 0x47A0FC VA: 0x47A0FC
	public void .ctor(ICollection c) { }

	// RVA: 0x47A2E0 Offset: 0x47A2E0 VA: 0x47A2E0
	public void .ctor(int capacity) { }

	// RVA: 0x47A494 Offset: 0x47A494 VA: 0x47A494
	private void .ctor(object[] array, int index, int count) { }

	// RVA: 0x47A544 Offset: 0x47A544 VA: 0x47A544
	private static void .cctor() { }

	// RVA: 0x47A5BC Offset: 0x47A5BC VA: 0x47A5BC Slot: 21
	public virtual object get_Item(int index) { }

	// RVA: 0x47A6D4 Offset: 0x47A6D4 VA: 0x47A6D4 Slot: 22
	public virtual void set_Item(int index, object value) { }

	// RVA: 0x47A82C Offset: 0x47A82C VA: 0x47A82C Slot: 23
	public virtual int get_Count() { }

	// RVA: 0x47A834 Offset: 0x47A834 VA: 0x47A834 Slot: 24
	public virtual int get_Capacity() { }

	// RVA: 0x47A858 Offset: 0x47A858 VA: 0x47A858 Slot: 25
	public virtual void set_Capacity(int value) { }

	// RVA: 0x47A974 Offset: 0x47A974 VA: 0x47A974 Slot: 26
	public virtual bool get_IsFixedSize() { }

	// RVA: 0x47A97C Offset: 0x47A97C VA: 0x47A97C Slot: 27
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x47A984 Offset: 0x47A984 VA: 0x47A984 Slot: 28
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x47A98C Offset: 0x47A98C VA: 0x47A98C Slot: 29
	public virtual object get_SyncRoot() { }

	// RVA: 0x47A990 Offset: 0x47A990 VA: 0x47A990
	private void EnsureCapacity(int count) { }

	// RVA: 0x47AA90 Offset: 0x47AA90 VA: 0x47AA90
	private void Shift(int index, int count) { }

	// RVA: 0x47AC4C Offset: 0x47AC4C VA: 0x47AC4C Slot: 30
	public virtual int Add(object value) { }

	// RVA: 0x47AD14 Offset: 0x47AD14 VA: 0x47AD14 Slot: 31
	public virtual void Clear() { }

	// RVA: 0x47AD4C Offset: 0x47AD4C VA: 0x47AD4C Slot: 32
	public virtual bool Contains(object item) { }

	// RVA: 0x47AD8C Offset: 0x47AD8C VA: 0x47AD8C Slot: 33
	public virtual int IndexOf(object value) { }

	// RVA: 0x47ADA0 Offset: 0x47ADA0 VA: 0x47ADA0 Slot: 34
	public virtual int IndexOf(object value, int startIndex) { }

	// RVA: 0x47ADD0 Offset: 0x47ADD0 VA: 0x47ADD0 Slot: 35
	public virtual int IndexOf(object value, int startIndex, int count) { }

	// RVA: 0x47AFC4 Offset: 0x47AFC4 VA: 0x47AFC4 Slot: 36
	public virtual void Insert(int index, object value) { }

	// RVA: 0x47B138 Offset: 0x47B138 VA: 0x47B138 Slot: 37
	public virtual void InsertRange(int index, ICollection c) { }

	// RVA: 0x47B538 Offset: 0x47B538 VA: 0x47B538 Slot: 38
	public virtual void Remove(object obj) { }

	// RVA: 0x47B588 Offset: 0x47B588 VA: 0x47B588 Slot: 39
	public virtual void RemoveAt(int index) { }

	// RVA: 0x47B690 Offset: 0x47B690 VA: 0x47B690 Slot: 40
	public virtual void CopyTo(Array array) { }

	// RVA: 0x47B6A0 Offset: 0x47B6A0 VA: 0x47B6A0 Slot: 41
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x47B6E0 Offset: 0x47B6E0 VA: 0x47B6E0 Slot: 42
	public virtual void CopyTo(int index, Array array, int arrayIndex, int count) { }

	// RVA: 0x47B828 Offset: 0x47B828 VA: 0x47B828 Slot: 43
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x47B960 Offset: 0x47B960 VA: 0x47B960 Slot: 44
	public virtual void AddRange(ICollection c) { }

	// RVA: 0x47B978 Offset: 0x47B978 VA: 0x47B978 Slot: 45
	public virtual void Sort() { }

	// RVA: 0x47B9F0 Offset: 0x47B9F0 VA: 0x47B9F0 Slot: 46
	public virtual void Sort(IComparer comparer) { }

	// RVA: 0x47BA20 Offset: 0x47BA20 VA: 0x47BA20 Slot: 47
	public virtual object[] ToArray() { }

	// RVA: 0x47BAA4 Offset: 0x47BAA4 VA: 0x47BAA4 Slot: 48
	public virtual Array ToArray(Type type) { }

	// RVA: 0x47BAE8 Offset: 0x47BAE8 VA: 0x47BAE8 Slot: 49
	public virtual object Clone() { }

	// RVA: 0x47A3E8 Offset: 0x47A3E8 VA: 0x47A3E8
	internal static void ThrowNewArgumentOutOfRangeException(string name, object actual, string message) { }

	// RVA: 0x47BB70 Offset: 0x47BB70 VA: 0x47BB70
	public static ArrayList Synchronized(ArrayList list) { }

	// RVA: 0x47BCA4 Offset: 0x47BCA4 VA: 0x47BCA4
	public static ArrayList ReadOnly(ArrayList list) { }
}

// Namespace: 
private sealed class ArrayList.SimpleEnumerator : IEnumerator, ICloneable // TypeDefIndex: 180
{
	// Fields
	private ArrayList list; // 0x8
	private int index; // 0xC
	private int version; // 0x10
	private object currentElement; // 0x14
	private static object endFlag; // 0x0

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x47B898 Offset: 0x47B898 VA: 0x47B898
	public void .ctor(ArrayList list) { }

	// RVA: 0x47CD38 Offset: 0x47CD38 VA: 0x47CD38
	private static void .cctor() { }

	// RVA: 0x47CDB8 Offset: 0x47CDB8 VA: 0x47CDB8 Slot: 7
	public object Clone() { }

	// RVA: 0x47CDC0 Offset: 0x47CDC0 VA: 0x47CDC0 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x47CF4C Offset: 0x47CF4C VA: 0x47CF4C Slot: 4
	public object get_Current() { }

	// RVA: 0x47D078 Offset: 0x47D078 VA: 0x47D078 Slot: 6
	public void Reset() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0x948EC Offset: 0x948EC VA: 0x948EC
[Serializable]
private class ArrayList.ArrayListWrapper : ArrayList // TypeDefIndex: 181
{
	// Fields
	protected ArrayList m_InnerArrayList; // 0x14

	// Properties
	public override object Item { get; set; }
	public override int Count { get; }
	public override int Capacity { get; set; }
	public override bool IsFixedSize { get; }
	public override bool IsReadOnly { get; }
	public override bool IsSynchronized { get; }
	public override object SyncRoot { get; }

	// Methods

	// RVA: 0x47BD9C Offset: 0x47BD9C VA: 0x47BD9C
	public void .ctor(ArrayList innerArrayList) { }

	// RVA: 0x47BE24 Offset: 0x47BE24 VA: 0x47BE24 Slot: 21
	public override object get_Item(int index) { }

	// RVA: 0x47BE60 Offset: 0x47BE60 VA: 0x47BE60 Slot: 22
	public override void set_Item(int index, object value) { }

	// RVA: 0x47BEA4 Offset: 0x47BEA4 VA: 0x47BEA4 Slot: 23
	public override int get_Count() { }

	// RVA: 0x47BED8 Offset: 0x47BED8 VA: 0x47BED8 Slot: 24
	public override int get_Capacity() { }

	// RVA: 0x47BF0C Offset: 0x47BF0C VA: 0x47BF0C Slot: 25
	public override void set_Capacity(int value) { }

	// RVA: 0x47BF48 Offset: 0x47BF48 VA: 0x47BF48 Slot: 26
	public override bool get_IsFixedSize() { }

	// RVA: 0x47BF7C Offset: 0x47BF7C VA: 0x47BF7C Slot: 27
	public override bool get_IsReadOnly() { }

	// RVA: 0x47BFB0 Offset: 0x47BFB0 VA: 0x47BFB0 Slot: 28
	public override bool get_IsSynchronized() { }

	// RVA: 0x47BFE4 Offset: 0x47BFE4 VA: 0x47BFE4 Slot: 29
	public override object get_SyncRoot() { }

	// RVA: 0x47C018 Offset: 0x47C018 VA: 0x47C018 Slot: 30
	public override int Add(object value) { }

	// RVA: 0x47C054 Offset: 0x47C054 VA: 0x47C054 Slot: 31
	public override void Clear() { }

	// RVA: 0x47C088 Offset: 0x47C088 VA: 0x47C088 Slot: 32
	public override bool Contains(object value) { }

	// RVA: 0x47C0C4 Offset: 0x47C0C4 VA: 0x47C0C4 Slot: 33
	public override int IndexOf(object value) { }

	// RVA: 0x47C100 Offset: 0x47C100 VA: 0x47C100 Slot: 34
	public override int IndexOf(object value, int startIndex) { }

	// RVA: 0x47C144 Offset: 0x47C144 VA: 0x47C144 Slot: 35
	public override int IndexOf(object value, int startIndex, int count) { }

	// RVA: 0x47C19C Offset: 0x47C19C VA: 0x47C19C Slot: 36
	public override void Insert(int index, object value) { }

	// RVA: 0x47C1E0 Offset: 0x47C1E0 VA: 0x47C1E0 Slot: 37
	public override void InsertRange(int index, ICollection c) { }

	// RVA: 0x47C224 Offset: 0x47C224 VA: 0x47C224 Slot: 38
	public override void Remove(object value) { }

	// RVA: 0x47C260 Offset: 0x47C260 VA: 0x47C260 Slot: 39
	public override void RemoveAt(int index) { }

	// RVA: 0x47C29C Offset: 0x47C29C VA: 0x47C29C Slot: 40
	public override void CopyTo(Array array) { }

	// RVA: 0x47C2D8 Offset: 0x47C2D8 VA: 0x47C2D8 Slot: 41
	public override void CopyTo(Array array, int index) { }

	// RVA: 0x47C31C Offset: 0x47C31C VA: 0x47C31C Slot: 42
	public override void CopyTo(int index, Array array, int arrayIndex, int count) { }

	// RVA: 0x47C37C Offset: 0x47C37C VA: 0x47C37C Slot: 43
	public override IEnumerator GetEnumerator() { }

	// RVA: 0x47C3B0 Offset: 0x47C3B0 VA: 0x47C3B0 Slot: 44
	public override void AddRange(ICollection c) { }

	// RVA: 0x47C3EC Offset: 0x47C3EC VA: 0x47C3EC Slot: 49
	public override object Clone() { }

	// RVA: 0x47C420 Offset: 0x47C420 VA: 0x47C420 Slot: 45
	public override void Sort() { }

	// RVA: 0x47C454 Offset: 0x47C454 VA: 0x47C454 Slot: 46
	public override void Sort(IComparer comparer) { }

	// RVA: 0x47C490 Offset: 0x47C490 VA: 0x47C490 Slot: 47
	public override object[] ToArray() { }

	// RVA: 0x47C4C4 Offset: 0x47C4C4 VA: 0x47C4C4 Slot: 48
	public override Array ToArray(Type elementType) { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0x94920 Offset: 0x94920 VA: 0x94920
[Serializable]
private sealed class ArrayList.SynchronizedArrayListWrapper : ArrayList.ArrayListWrapper // TypeDefIndex: 182
{
	// Fields
	private object m_SyncRoot; // 0x18

	// Properties
	public override object Item { get; set; }
	public override int Count { get; }
	public override int Capacity { get; set; }
	public override bool IsFixedSize { get; }
	public override bool IsReadOnly { get; }
	public override bool IsSynchronized { get; }
	public override object SyncRoot { get; }

	// Methods

	// RVA: 0x47BC64 Offset: 0x47BC64 VA: 0x47BC64
	internal void .ctor(ArrayList innerArrayList) { }

	// RVA: 0x47D190 Offset: 0x47D190 VA: 0x47D190 Slot: 21
	public override object get_Item(int index) { }

	// RVA: 0x47D240 Offset: 0x47D240 VA: 0x47D240 Slot: 22
	public override void set_Item(int index, object value) { }

	// RVA: 0x47D2EC Offset: 0x47D2EC VA: 0x47D2EC Slot: 23
	public override int get_Count() { }

	// RVA: 0x47D394 Offset: 0x47D394 VA: 0x47D394 Slot: 24
	public override int get_Capacity() { }

	// RVA: 0x47D43C Offset: 0x47D43C VA: 0x47D43C Slot: 25
	public override void set_Capacity(int value) { }

	// RVA: 0x47D4DC Offset: 0x47D4DC VA: 0x47D4DC Slot: 26
	public override bool get_IsFixedSize() { }

	// RVA: 0x47D584 Offset: 0x47D584 VA: 0x47D584 Slot: 27
	public override bool get_IsReadOnly() { }

	// RVA: 0x47D62C Offset: 0x47D62C VA: 0x47D62C Slot: 28
	public override bool get_IsSynchronized() { }

	// RVA: 0x47D634 Offset: 0x47D634 VA: 0x47D634 Slot: 29
	public override object get_SyncRoot() { }

	// RVA: 0x47D63C Offset: 0x47D63C VA: 0x47D63C Slot: 30
	public override int Add(object value) { }

	// RVA: 0x47D6EC Offset: 0x47D6EC VA: 0x47D6EC Slot: 31
	public override void Clear() { }

	// RVA: 0x47D784 Offset: 0x47D784 VA: 0x47D784 Slot: 32
	public override bool Contains(object value) { }

	// RVA: 0x47D834 Offset: 0x47D834 VA: 0x47D834 Slot: 33
	public override int IndexOf(object value) { }

	// RVA: 0x47D8E4 Offset: 0x47D8E4 VA: 0x47D8E4 Slot: 34
	public override int IndexOf(object value, int startIndex) { }

	// RVA: 0x47D99C Offset: 0x47D99C VA: 0x47D99C Slot: 35
	public override int IndexOf(object value, int startIndex, int count) { }

	// RVA: 0x47DA68 Offset: 0x47DA68 VA: 0x47DA68 Slot: 36
	public override void Insert(int index, object value) { }

	// RVA: 0x47DB14 Offset: 0x47DB14 VA: 0x47DB14 Slot: 37
	public override void InsertRange(int index, ICollection c) { }

	// RVA: 0x47DBC0 Offset: 0x47DBC0 VA: 0x47DBC0 Slot: 38
	public override void Remove(object value) { }

	// RVA: 0x47DC60 Offset: 0x47DC60 VA: 0x47DC60 Slot: 39
	public override void RemoveAt(int index) { }

	// RVA: 0x47DD00 Offset: 0x47DD00 VA: 0x47DD00 Slot: 40
	public override void CopyTo(Array array) { }

	// RVA: 0x47DDA0 Offset: 0x47DDA0 VA: 0x47DDA0 Slot: 41
	public override void CopyTo(Array array, int index) { }

	// RVA: 0x47DE4C Offset: 0x47DE4C VA: 0x47DE4C Slot: 42
	public override void CopyTo(int index, Array array, int arrayIndex, int count) { }

	// RVA: 0x47DF1C Offset: 0x47DF1C VA: 0x47DF1C Slot: 43
	public override IEnumerator GetEnumerator() { }

	// RVA: 0x47DFC4 Offset: 0x47DFC4 VA: 0x47DFC4 Slot: 44
	public override void AddRange(ICollection c) { }

	// RVA: 0x47E064 Offset: 0x47E064 VA: 0x47E064 Slot: 49
	public override object Clone() { }

	// RVA: 0x47E10C Offset: 0x47E10C VA: 0x47E10C Slot: 45
	public override void Sort() { }

	// RVA: 0x47E1A4 Offset: 0x47E1A4 VA: 0x47E1A4 Slot: 46
	public override void Sort(IComparer comparer) { }

	// RVA: 0x47E244 Offset: 0x47E244 VA: 0x47E244 Slot: 47
	public override object[] ToArray() { }

	// RVA: 0x47E2EC Offset: 0x47E2EC VA: 0x47E2EC Slot: 48
	public override Array ToArray(Type elementType) { }
}

// Namespace: 
[Serializable]
private class ArrayList.FixedSizeArrayListWrapper : ArrayList.ArrayListWrapper // TypeDefIndex: 183
{
	// Properties
	protected virtual string ErrorMessage { get; }
	public override int Capacity { get; set; }
	public override bool IsFixedSize { get; }

	// Methods

	// RVA: 0x47C500 Offset: 0x47C500 VA: 0x47C500
	public void .ctor(ArrayList innerList) { }

	// RVA: 0x47C504 Offset: 0x47C504 VA: 0x47C504 Slot: 50
	protected virtual string get_ErrorMessage() { }

	// RVA: 0x47C560 Offset: 0x47C560 VA: 0x47C560 Slot: 24
	public override int get_Capacity() { }

	// RVA: 0x47C594 Offset: 0x47C594 VA: 0x47C594 Slot: 25
	public override void set_Capacity(int value) { }

	// RVA: 0x47C63C Offset: 0x47C63C VA: 0x47C63C Slot: 26
	public override bool get_IsFixedSize() { }

	// RVA: 0x47C644 Offset: 0x47C644 VA: 0x47C644 Slot: 30
	public override int Add(object value) { }

	// RVA: 0x47C6EC Offset: 0x47C6EC VA: 0x47C6EC Slot: 44
	public override void AddRange(ICollection c) { }

	// RVA: 0x47C794 Offset: 0x47C794 VA: 0x47C794 Slot: 31
	public override void Clear() { }

	// RVA: 0x47C83C Offset: 0x47C83C VA: 0x47C83C Slot: 36
	public override void Insert(int index, object value) { }

	// RVA: 0x47C8E4 Offset: 0x47C8E4 VA: 0x47C8E4 Slot: 37
	public override void InsertRange(int index, ICollection c) { }

	// RVA: 0x47C98C Offset: 0x47C98C VA: 0x47C98C Slot: 38
	public override void Remove(object value) { }

	// RVA: 0x47CA34 Offset: 0x47CA34 VA: 0x47CA34 Slot: 39
	public override void RemoveAt(int index) { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0x94954 Offset: 0x94954 VA: 0x94954
[Serializable]
private sealed class ArrayList.ReadOnlyArrayListWrapper : ArrayList.FixedSizeArrayListWrapper // TypeDefIndex: 184
{
	// Properties
	protected override string ErrorMessage { get; }
	public override bool IsReadOnly { get; }
	public override object Item { get; set; }

	// Methods

	// RVA: 0x47BD98 Offset: 0x47BD98 VA: 0x47BD98
	public void .ctor(ArrayList innerArrayList) { }

	// RVA: 0x47CADC Offset: 0x47CADC VA: 0x47CADC Slot: 50
	protected override string get_ErrorMessage() { }

	// RVA: 0x47CB38 Offset: 0x47CB38 VA: 0x47CB38 Slot: 27
	public override bool get_IsReadOnly() { }

	// RVA: 0x47CB40 Offset: 0x47CB40 VA: 0x47CB40 Slot: 21
	public override object get_Item(int index) { }

	// RVA: 0x47CB7C Offset: 0x47CB7C VA: 0x47CB7C Slot: 22
	public override void set_Item(int index, object value) { }

	// RVA: 0x47CC10 Offset: 0x47CC10 VA: 0x47CC10 Slot: 45
	public override void Sort() { }

	// RVA: 0x47CCA4 Offset: 0x47CCA4 VA: 0x47CCA4 Slot: 46
	public override void Sort(IComparer comparer) { }
}

// Namespace: System.Collections
[DefaultMemberAttribute] // RVA: 0x94988 Offset: 0x94988 VA: 0x94988
[ComVisibleAttribute] // RVA: 0x94988 Offset: 0x94988 VA: 0x94988
[Serializable]
public sealed class BitArray : IEnumerable, ICloneable, ICollection // TypeDefIndex: 185
{
	// Fields
	private int[] m_array; // 0x8
	private int m_length; // 0xC
	private int _version; // 0x10

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public bool Item { get; set; }
	public int Length { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x47E39C Offset: 0x47E39C VA: 0x47E39C
	public void .ctor(BitArray bits) { }

	// RVA: 0x47E540 Offset: 0x47E540 VA: 0x47E540
	public void .ctor(int length) { }

	// RVA: 0x47E628 Offset: 0x47E628 VA: 0x47E628
	private byte getByte(int byteIndex) { }

	// RVA: 0x47E698 Offset: 0x47E698 VA: 0x47E698 Slot: 6
	public int get_Count() { }

	// RVA: 0x47E6A0 Offset: 0x47E6A0 VA: 0x47E6A0 Slot: 7
	public bool get_IsSynchronized() { }

	// RVA: 0x47E6A8 Offset: 0x47E6A8 VA: 0x47E6A8
	public bool get_Item(int index) { }

	// RVA: 0x47E7A0 Offset: 0x47E7A0 VA: 0x47E7A0
	public void set_Item(int index, bool value) { }

	// RVA: 0x47E8AC Offset: 0x47E8AC VA: 0x47E8AC
	public int get_Length() { }

	// RVA: 0x47E8B4 Offset: 0x47E8B4 VA: 0x47E8B4 Slot: 8
	public object get_SyncRoot() { }

	// RVA: 0x47E8B8 Offset: 0x47E8B8 VA: 0x47E8B8 Slot: 5
	public object Clone() { }

	// RVA: 0x47E928 Offset: 0x47E928 VA: 0x47E928 Slot: 9
	public void CopyTo(Array array, int index) { }

	// RVA: 0x47E6AC Offset: 0x47E6AC VA: 0x47E6AC
	public bool Get(int index) { }

	// RVA: 0x47E7A4 Offset: 0x47E7A4 VA: 0x47E7A4
	public void Set(int index, bool value) { }

	// RVA: 0x47EE68 Offset: 0x47EE68 VA: 0x47EE68 Slot: 4
	public IEnumerator GetEnumerator() { }
}

// Namespace: 
[Serializable]
private class BitArray.BitArrayEnumerator : IEnumerator, ICloneable // TypeDefIndex: 186
{
	// Fields
	private BitArray _bitArray; // 0x8
	private bool _current; // 0xC
	private int _index; // 0x10
	private int _version; // 0x14

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x47EED8 Offset: 0x47EED8 VA: 0x47EED8
	public void .ctor(BitArray ba) { }

	// RVA: 0x47EF18 Offset: 0x47EF18 VA: 0x47EF18 Slot: 7
	public object Clone() { }

	// RVA: 0x47EF20 Offset: 0x47EF20 VA: 0x47EF20 Slot: 4
	public object get_Current() { }

	// RVA: 0x47F05C Offset: 0x47F05C VA: 0x47F05C Slot: 5
	public bool MoveNext() { }

	// RVA: 0x47F1A0 Offset: 0x47F1A0 VA: 0x47F1A0 Slot: 6
	public void Reset() { }

	// RVA: 0x47F0F0 Offset: 0x47F0F0 VA: 0x47F0F0
	private void checkVersion() { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x949D4 Offset: 0x949D4 VA: 0x949D4
[Serializable]
public class CaseInsensitiveComparer : IComparer // TypeDefIndex: 187
{
	// Fields
	private static CaseInsensitiveComparer defaultComparer; // 0x0
	private static CaseInsensitiveComparer defaultInvariantComparer; // 0x4
	private CultureInfo culture; // 0x8

	// Properties
	public static CaseInsensitiveComparer DefaultInvariant { get; }

	// Methods

	// RVA: 0x47F1BC Offset: 0x47F1BC VA: 0x47F1BC
	public void .ctor() { }

	// RVA: 0x47F24C Offset: 0x47F24C VA: 0x47F24C
	private void .ctor(bool invariant) { }

	// RVA: 0x47F254 Offset: 0x47F254 VA: 0x47F254
	private static void .cctor() { }

	// RVA: 0x47F2E4 Offset: 0x47F2E4 VA: 0x47F2E4
	public static CaseInsensitiveComparer get_DefaultInvariant() { }

	// RVA: 0x47F370 Offset: 0x47F370 VA: 0x47F370 Slot: 4
	public int Compare(object a, object b) { }
}

// Namespace: System.Collections
[ObsoleteAttribute] // RVA: 0x949E8 Offset: 0x949E8 VA: 0x949E8
[ComVisibleAttribute] // RVA: 0x949E8 Offset: 0x949E8 VA: 0x949E8
[Serializable]
public class CaseInsensitiveHashCodeProvider : IHashCodeProvider // TypeDefIndex: 188
{
	// Fields
	private static readonly CaseInsensitiveHashCodeProvider singletonInvariant; // 0x0
	private static readonly object sync; // 0x4
	private TextInfo m_text; // 0x8

	// Properties
	public static CaseInsensitiveHashCodeProvider DefaultInvariant { get; }

	// Methods

	// RVA: 0x47F82C Offset: 0x47F82C VA: 0x47F82C
	public void .ctor() { }

	// RVA: 0x47FA44 Offset: 0x47FA44 VA: 0x47FA44
	public void .ctor(CultureInfo culture) { }

	// RVA: 0x47FB90 Offset: 0x47FB90 VA: 0x47FB90
	private static void .cctor() { }

	// RVA: 0x47F968 Offset: 0x47F968 VA: 0x47F968
	private static bool AreEqual(CultureInfo a, CultureInfo b) { }

	// RVA: 0x47FC68 Offset: 0x47FC68 VA: 0x47FC68
	private static bool AreEqual(TextInfo info, CultureInfo culture) { }

	// RVA: 0x47FD3C Offset: 0x47FD3C VA: 0x47FD3C
	public static CaseInsensitiveHashCodeProvider get_DefaultInvariant() { }

	// RVA: 0x47FDC8 Offset: 0x47FDC8 VA: 0x47FDC8 Slot: 4
	public int GetHashCode(object obj) { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x94A50 Offset: 0x94A50 VA: 0x94A50
[Serializable]
public abstract class CollectionBase : IEnumerable, ICollection, IList // TypeDefIndex: 189
{
	// Fields
	private ArrayList list; // 0x8

	// Properties
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private object System.Collections.IList.Item { get; set; }
	public int Count { get; }
	protected ArrayList InnerList { get; }
	protected IList List { get; }

	// Methods

	// RVA: 0x48009C Offset: 0x48009C VA: 0x48009C
	protected void .ctor() { }

	// RVA: 0x4800A4 Offset: 0x4800A4 VA: 0x4800A4 Slot: 8
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x480168 Offset: 0x480168 VA: 0x480168 Slot: 7
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x4801A0 Offset: 0x4801A0 VA: 0x4801A0 Slot: 6
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x4801D8 Offset: 0x4801D8 VA: 0x4801D8 Slot: 13
	private int System.Collections.IList.Add(object value) { }

	// RVA: 0x4803B8 Offset: 0x4803B8 VA: 0x4803B8 Slot: 15
	private bool System.Collections.IList.Contains(object value) { }

	// RVA: 0x4803F8 Offset: 0x4803F8 VA: 0x4803F8 Slot: 16
	private int System.Collections.IList.IndexOf(object value) { }

	// RVA: 0x480438 Offset: 0x480438 VA: 0x480438 Slot: 17
	private void System.Collections.IList.Insert(int index, object value) { }

	// RVA: 0x4805E8 Offset: 0x4805E8 VA: 0x4805E8 Slot: 18
	private void System.Collections.IList.Remove(object value) { }

	// RVA: 0x480764 Offset: 0x480764 VA: 0x480764 Slot: 9
	private bool System.Collections.IList.get_IsFixedSize() { }

	// RVA: 0x48079C Offset: 0x48079C VA: 0x48079C Slot: 10
	private bool System.Collections.IList.get_IsReadOnly() { }

	// RVA: 0x4807D4 Offset: 0x4807D4 VA: 0x4807D4 Slot: 11
	private object System.Collections.IList.get_Item(int index) { }

	// RVA: 0x480814 Offset: 0x480814 VA: 0x480814 Slot: 12
	private void System.Collections.IList.set_Item(int index, object value) { }

	// RVA: 0x480AA4 Offset: 0x480AA4 VA: 0x480AA4 Slot: 5
	public int get_Count() { }

	// RVA: 0x480ADC Offset: 0x480ADC VA: 0x480ADC Slot: 4
	public IEnumerator GetEnumerator() { }

	// RVA: 0x480B14 Offset: 0x480B14 VA: 0x480B14 Slot: 14
	public void Clear() { }

	// RVA: 0x480B7C Offset: 0x480B7C VA: 0x480B7C Slot: 19
	public void RemoveAt(int index) { }

	// RVA: 0x4800EC Offset: 0x4800EC VA: 0x4800EC
	protected ArrayList get_InnerList() { }

	// RVA: 0x480C48 Offset: 0x480C48 VA: 0x480C48
	protected IList get_List() { }

	// RVA: 0x480C4C Offset: 0x480C4C VA: 0x480C4C Slot: 20
	protected virtual void OnClear() { }

	// RVA: 0x480C50 Offset: 0x480C50 VA: 0x480C50 Slot: 21
	protected virtual void OnClearComplete() { }

	// RVA: 0x480C54 Offset: 0x480C54 VA: 0x480C54 Slot: 22
	protected virtual void OnInsert(int index, object value) { }

	// RVA: 0x480C58 Offset: 0x480C58 VA: 0x480C58 Slot: 23
	protected virtual void OnInsertComplete(int index, object value) { }

	// RVA: 0x480C5C Offset: 0x480C5C VA: 0x480C5C Slot: 24
	protected virtual void OnRemove(int index, object value) { }

	// RVA: 0x480C60 Offset: 0x480C60 VA: 0x480C60 Slot: 25
	protected virtual void OnRemoveComplete(int index, object value) { }

	// RVA: 0x480C64 Offset: 0x480C64 VA: 0x480C64 Slot: 26
	protected virtual void OnSet(int index, object oldValue, object newValue) { }

	// RVA: 0x480C68 Offset: 0x480C68 VA: 0x480C68 Slot: 27
	protected virtual void OnSetComplete(int index, object oldValue, object newValue) { }

	// RVA: 0x480C6C Offset: 0x480C6C VA: 0x480C6C Slot: 28
	protected virtual void OnValidate(object value) { }
}

// Namespace: System.Collections
internal sealed class CollectionDebuggerView // TypeDefIndex: 190
{}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x94A64 Offset: 0x94A64 VA: 0x94A64
[Serializable]
public sealed class Comparer : ISerializable, IComparer // TypeDefIndex: 191
{
	// Fields
	public static readonly Comparer Default; // 0x0
	public static readonly Comparer DefaultInvariant; // 0x4
	private CompareInfo m_compareInfo; // 0x8

	// Methods

	// RVA: 0x480D14 Offset: 0x480D14 VA: 0x480D14
	private void .ctor() { }

	// RVA: 0x480D1C Offset: 0x480D1C VA: 0x480D1C
	public void .ctor(CultureInfo culture) { }

	// RVA: 0x480DF0 Offset: 0x480DF0 VA: 0x480DF0
	private static void .cctor() { }

	// RVA: 0x47F54C Offset: 0x47F54C VA: 0x47F54C Slot: 5
	public int Compare(object a, object b) { }

	// RVA: 0x480EC8 Offset: 0x480EC8 VA: 0x480EC8 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Collections
[DebuggerDisplayAttribute] // RVA: 0x94A78 Offset: 0x94A78 VA: 0x94A78
[ComVisibleAttribute] // RVA: 0x94A78 Offset: 0x94A78 VA: 0x94A78
[Serializable]
public struct DictionaryEntry // TypeDefIndex: 192
{
	// Fields
	private object _key; // 0x0
	private object _value; // 0x4

	// Properties
	public object Key { get; }
	public object Value { get; }

	// Methods

	// RVA: 0xEF6E4 Offset: 0xEF6E4 VA: 0xEF6E4
	public void .ctor(object key, object value) { }

	// RVA: 0xEF6F0 Offset: 0xEF6F0 VA: 0xEF6F0
	public object get_Key() { }

	// RVA: 0xEF6F8 Offset: 0xEF6F8 VA: 0xEF6F8
	public object get_Value() { }
}

// Namespace: System.Collections
[DebuggerTypeProxyAttribute] // RVA: 0x94AEC Offset: 0x94AEC VA: 0x94AEC
[DefaultMemberAttribute] // RVA: 0x94AEC Offset: 0x94AEC VA: 0x94AEC
[DebuggerDisplayAttribute] // RVA: 0x94AEC Offset: 0x94AEC VA: 0x94AEC
[ComVisibleAttribute] // RVA: 0x94AEC Offset: 0x94AEC VA: 0x94AEC
[Serializable]
public class Hashtable : IEnumerable, ICloneable, ISerializable, ICollection, IDictionary, IDeserializationCallback // TypeDefIndex: 193
{
	// Fields
	private const int CHAIN_MARKER = -2147483648;
	private int inUse; // 0x8
	private int modificationCount; // 0xC
	private float loadFactor; // 0x10
	private Hashtable.Slot[] table; // 0x14
	private int[] hashes; // 0x18
	private int threshold; // 0x1C
	private Hashtable.HashKeys hashKeys; // 0x20
	private Hashtable.HashValues hashValues; // 0x24
	private IHashCodeProvider hcpRef; // 0x28
	private IComparer comparerRef; // 0x2C
	private SerializationInfo serializationInfo; // 0x30
	private IEqualityComparer equalityComparer; // 0x34
	private static readonly int[] primeTbl; // 0x0

	// Properties
	[ObsoleteAttribute] // RVA: 0x9DF54 Offset: 0x9DF54 VA: 0x9DF54
	protected IComparer comparer { set; }
	[ObsoleteAttribute] // RVA: 0x9DF88 Offset: 0x9DF88 VA: 0x9DF88
	protected IHashCodeProvider hcp { set; }
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }
	public virtual ICollection Keys { get; }
	public virtual ICollection Values { get; }
	public virtual object Item { get; set; }

	// Methods

	// RVA: 0x48109C Offset: 0x48109C VA: 0x48109C
	public void .ctor() { }

	[ObsoleteAttribute] // RVA: 0x9C1AC Offset: 0x9C1AC VA: 0x9C1AC
	// RVA: 0x4810F0 Offset: 0x4810F0 VA: 0x4810F0
	public void .ctor(int capacity, float loadFactor, IHashCodeProvider hcp, IComparer comparer) { }

	// RVA: 0x4810C8 Offset: 0x4810C8 VA: 0x4810C8
	public void .ctor(int capacity, float loadFactor) { }

	// RVA: 0x48163C Offset: 0x48163C VA: 0x48163C
	public void .ctor(int capacity) { }

	// RVA: 0x481664 Offset: 0x481664 VA: 0x481664
	internal void .ctor(Hashtable source) { }

	[ObsoleteAttribute] // RVA: 0x9C214 Offset: 0x9C214 VA: 0x9C214
	// RVA: 0x481894 Offset: 0x481894 VA: 0x481894
	public void .ctor(int capacity, IHashCodeProvider hcp, IComparer comparer) { }

	[ObsoleteAttribute] // RVA: 0x9C278 Offset: 0x9C278 VA: 0x9C278
	// RVA: 0x4818BC Offset: 0x4818BC VA: 0x4818BC
	public void .ctor(IDictionary d, float loadFactor, IHashCodeProvider hcp, IComparer comparer) { }

	[ObsoleteAttribute] // RVA: 0x9C2AC Offset: 0x9C2AC VA: 0x9C2AC
	// RVA: 0x481CAC Offset: 0x481CAC VA: 0x481CAC
	public void .ctor(IDictionary d, IHashCodeProvider hcp, IComparer comparer) { }

	[ObsoleteAttribute] // RVA: 0x9C318 Offset: 0x9C318 VA: 0x9C318
	// RVA: 0x481CD4 Offset: 0x481CD4 VA: 0x481CD4
	public void .ctor(IHashCodeProvider hcp, IComparer comparer) { }

	// RVA: 0x481CFC Offset: 0x481CFC VA: 0x481CFC
	public void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x481D1C Offset: 0x481D1C VA: 0x481D1C
	public void .ctor(int capacity, IEqualityComparer equalityComparer) { }

	// RVA: 0x481D54 Offset: 0x481D54 VA: 0x481D54
	public void .ctor(int capacity, float loadFactor, IEqualityComparer equalityComparer) { }

	// RVA: 0x481D88 Offset: 0x481D88 VA: 0x481D88
	private static void .cctor() { }

	// RVA: 0x481E20 Offset: 0x481E20 VA: 0x481E20 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x481634 Offset: 0x481634 VA: 0x481634
	protected void set_comparer(IComparer value) { }

	// RVA: 0x48162C Offset: 0x48162C VA: 0x48162C
	protected void set_hcp(IHashCodeProvider value) { }

	// RVA: 0x481F24 Offset: 0x481F24 VA: 0x481F24 Slot: 17
	public virtual int get_Count() { }

	// RVA: 0x481F2C Offset: 0x481F2C VA: 0x481F2C Slot: 18
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x481F34 Offset: 0x481F34 VA: 0x481F34 Slot: 19
	public virtual object get_SyncRoot() { }

	// RVA: 0x481F38 Offset: 0x481F38 VA: 0x481F38 Slot: 20
	public virtual ICollection get_Keys() { }

	// RVA: 0x482060 Offset: 0x482060 VA: 0x482060 Slot: 21
	public virtual ICollection get_Values() { }

	// RVA: 0x482188 Offset: 0x482188 VA: 0x482188 Slot: 22
	public virtual object get_Item(object key) { }

	// RVA: 0x4823A4 Offset: 0x4823A4 VA: 0x4823A4 Slot: 23
	public virtual void set_Item(object key, object value) { }

	// RVA: 0x4828E4 Offset: 0x4828E4 VA: 0x4828E4 Slot: 24
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x482C98 Offset: 0x482C98 VA: 0x482C98 Slot: 25
	public virtual void Add(object key, object value) { }

	[ReliabilityContractAttribute] // RVA: 0x9C374 Offset: 0x9C374 VA: 0x9C374
	// RVA: 0x482CB4 Offset: 0x482CB4 VA: 0x482CB4 Slot: 26
	public virtual void Clear() { }

	// RVA: 0x482DB0 Offset: 0x482DB0 VA: 0x482DB0 Slot: 27
	public virtual bool Contains(object key) { }

	// RVA: 0x482FE0 Offset: 0x482FE0 VA: 0x482FE0 Slot: 28
	public virtual IDictionaryEnumerator GetEnumerator() { }

	[ReliabilityContractAttribute] // RVA: 0x9C38C Offset: 0x9C38C VA: 0x9C38C
	// RVA: 0x483054 Offset: 0x483054 VA: 0x483054 Slot: 29
	public virtual void Remove(object key) { }

	// RVA: 0x483218 Offset: 0x483218 VA: 0x483218 Slot: 30
	public virtual bool ContainsKey(object key) { }

	// RVA: 0x483228 Offset: 0x483228 VA: 0x483228 Slot: 31
	public virtual object Clone() { }

	// RVA: 0x483298 Offset: 0x483298 VA: 0x483298 Slot: 32
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[MonoTODOAttribute] // RVA: 0x9C3A4 Offset: 0x9C3A4 VA: 0x9C3A4
	// RVA: 0x4836B4 Offset: 0x4836B4 VA: 0x4836B4 Slot: 33
	public virtual void OnDeserialization(object sender) { }

	// RVA: 0x4840AC Offset: 0x4840AC VA: 0x4840AC
	public static Hashtable Synchronized(Hashtable table) { }

	// RVA: 0x484268 Offset: 0x484268 VA: 0x484268 Slot: 34
	protected virtual int GetHash(object key) { }

	// RVA: 0x4843DC Offset: 0x4843DC VA: 0x4843DC Slot: 35
	protected virtual bool KeyEquals(object item, object key) { }

	// RVA: 0x484060 Offset: 0x484060 VA: 0x484060
	private void AdjustThreshold() { }

	// RVA: 0x481568 Offset: 0x481568 VA: 0x481568
	private void SetTable(Hashtable.Slot[] table, int[] hashes) { }

	// RVA: 0x482DD0 Offset: 0x482DD0 VA: 0x482DD0
	private int Find(object key) { }

	// RVA: 0x4845DC Offset: 0x4845DC VA: 0x4845DC
	private void Rehash() { }

	// RVA: 0x4823C0 Offset: 0x4823C0 VA: 0x4823C0
	private void PutImpl(object key, object value, bool overwrite) { }

	// RVA: 0x4834DC Offset: 0x4834DC VA: 0x4834DC
	private void CopyToArray(Array arr, int i, Hashtable.EnumeratorMode mode) { }

	// RVA: 0x4848E8 Offset: 0x4848E8 VA: 0x4848E8
	internal static bool TestPrime(int x) { }

	// RVA: 0x484978 Offset: 0x484978 VA: 0x484978
	internal static int CalcPrime(int x) { }

	// RVA: 0x481378 Offset: 0x481378 VA: 0x481378
	internal static int ToPrime(int x) { }
}

// Namespace: 
[Serializable]
internal struct Hashtable.Slot // TypeDefIndex: 194
{
	// Fields
	internal object key; // 0x0
	internal object value; // 0x4
}

// Namespace: 
[Serializable]
internal class Hashtable.KeyMarker // TypeDefIndex: 195
{
	// Fields
	public static readonly Hashtable.KeyMarker Removed; // 0x0

	// Methods

	// RVA: 0x4856E4 Offset: 0x4856E4 VA: 0x4856E4
	public void .ctor() { }

	// RVA: 0x4856EC Offset: 0x4856EC VA: 0x4856EC
	private static void .cctor() { }
}

// Namespace: 
private enum Hashtable.EnumeratorMode // TypeDefIndex: 196
{
	// Fields
	public int value__; // 0x0
	public const Hashtable.EnumeratorMode KEY_MODE = 0;
	public const Hashtable.EnumeratorMode VALUE_MODE = 1;
	public const Hashtable.EnumeratorMode ENTRY_MODE = 2;
}

// Namespace: 
[Serializable]
private sealed class Hashtable.Enumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 197
{
	// Fields
	private Hashtable host; // 0x8
	private int stamp; // 0xC
	private int pos; // 0x10
	private int size; // 0x14
	private Hashtable.EnumeratorMode mode; // 0x18
	private object currentKey; // 0x1C
	private object currentValue; // 0x20
	private static readonly string xstr; // 0x0

	// Properties
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }
	public object Current { get; }

	// Methods

	// RVA: 0x481E94 Offset: 0x481E94 VA: 0x481E94
	public void .ctor(Hashtable host, Hashtable.EnumeratorMode mode) { }

	// RVA: 0x484AB8 Offset: 0x484AB8 VA: 0x484AB8
	private static void .cctor() { }

	// RVA: 0x484B2C Offset: 0x484B2C VA: 0x484B2C
	private void FailFast() { }

	// RVA: 0x484A90 Offset: 0x484A90 VA: 0x484A90 Slot: 6
	public void Reset() { }

	// RVA: 0x484C24 Offset: 0x484C24 VA: 0x484C24 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x484D8C Offset: 0x484D8C VA: 0x484D8C Slot: 7
	public DictionaryEntry get_Entry() { }

	// RVA: 0x484E40 Offset: 0x484E40 VA: 0x484E40 Slot: 8
	public object get_Key() { }

	// RVA: 0x484EE8 Offset: 0x484EE8 VA: 0x484EE8 Slot: 9
	public object get_Value() { }

	// RVA: 0x484F90 Offset: 0x484F90 VA: 0x484F90 Slot: 4
	public object get_Current() { }
}

// Namespace: 
[DebuggerDisplayAttribute] // RVA: 0x94BC8 Offset: 0x94BC8 VA: 0x94BC8
[DebuggerTypeProxyAttribute] // RVA: 0x94BC8 Offset: 0x94BC8 VA: 0x94BC8
[Serializable]
private class Hashtable.HashKeys : IEnumerable, ICollection // TypeDefIndex: 198
{
	// Fields
	private Hashtable host; // 0x8

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x481FB8 Offset: 0x481FB8 VA: 0x481FB8
	public void .ctor(Hashtable host) { }

	// RVA: 0x4850C4 Offset: 0x4850C4 VA: 0x4850C4 Slot: 9
	public virtual int get_Count() { }

	// RVA: 0x4850F8 Offset: 0x4850F8 VA: 0x4850F8 Slot: 10
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x48512C Offset: 0x48512C VA: 0x48512C Slot: 11
	public virtual object get_SyncRoot() { }

	// RVA: 0x485160 Offset: 0x485160 VA: 0x485160 Slot: 12
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x48535C Offset: 0x48535C VA: 0x48535C Slot: 13
	public virtual IEnumerator GetEnumerator() { }
}

// Namespace: 
[DebuggerTypeProxyAttribute] // RVA: 0x94C68 Offset: 0x94C68 VA: 0x94C68
[DebuggerDisplayAttribute] // RVA: 0x94C68 Offset: 0x94C68 VA: 0x94C68
[Serializable]
private class Hashtable.HashValues : IEnumerable, ICollection // TypeDefIndex: 199
{
	// Fields
	private Hashtable host; // 0x8

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x4820E0 Offset: 0x4820E0 VA: 0x4820E0
	public void .ctor(Hashtable host) { }

	// RVA: 0x4853D4 Offset: 0x4853D4 VA: 0x4853D4 Slot: 9
	public virtual int get_Count() { }

	// RVA: 0x485408 Offset: 0x485408 VA: 0x485408 Slot: 10
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x48543C Offset: 0x48543C VA: 0x48543C Slot: 11
	public virtual object get_SyncRoot() { }

	// RVA: 0x485470 Offset: 0x485470 VA: 0x485470 Slot: 12
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x48566C Offset: 0x48566C VA: 0x48566C Slot: 13
	public virtual IEnumerator GetEnumerator() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0x94D08 Offset: 0x94D08 VA: 0x94D08
[Serializable]
private class Hashtable.SyncHashtable : Hashtable, IEnumerable // TypeDefIndex: 200
{
	// Fields
	private Hashtable host; // 0x38

	// Properties
	public override int Count { get; }
	public override bool IsSynchronized { get; }
	public override object SyncRoot { get; }
	public override ICollection Keys { get; }
	public override ICollection Values { get; }
	public override object Item { get; set; }

	// Methods

	// RVA: 0x48417C Offset: 0x48417C VA: 0x48417C
	public void .ctor(Hashtable host) { }

	// RVA: 0x485760 Offset: 0x485760 VA: 0x485760
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x485918 Offset: 0x485918 VA: 0x485918 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x485990 Offset: 0x485990 VA: 0x485990 Slot: 32
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x485A14 Offset: 0x485A14 VA: 0x485A14 Slot: 17
	public override int get_Count() { }

	// RVA: 0x485A48 Offset: 0x485A48 VA: 0x485A48 Slot: 18
	public override bool get_IsSynchronized() { }

	// RVA: 0x485A50 Offset: 0x485A50 VA: 0x485A50 Slot: 19
	public override object get_SyncRoot() { }

	// RVA: 0x485A84 Offset: 0x485A84 VA: 0x485A84 Slot: 20
	public override ICollection get_Keys() { }

	// RVA: 0x485B50 Offset: 0x485B50 VA: 0x485B50 Slot: 21
	public override ICollection get_Values() { }

	// RVA: 0x485C1C Offset: 0x485C1C VA: 0x485C1C Slot: 22
	public override object get_Item(object key) { }

	// RVA: 0x485C58 Offset: 0x485C58 VA: 0x485C58 Slot: 23
	public override void set_Item(object key, object value) { }

	// RVA: 0x485D28 Offset: 0x485D28 VA: 0x485D28 Slot: 24
	public override void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x485D6C Offset: 0x485D6C VA: 0x485D6C Slot: 25
	public override void Add(object key, object value) { }

	// RVA: 0x485E3C Offset: 0x485E3C VA: 0x485E3C Slot: 26
	public override void Clear() { }

	// RVA: 0x485EF8 Offset: 0x485EF8 VA: 0x485EF8 Slot: 27
	public override bool Contains(object key) { }

	// RVA: 0x485F38 Offset: 0x485F38 VA: 0x485F38 Slot: 28
	public override IDictionaryEnumerator GetEnumerator() { }

	// RVA: 0x485FB0 Offset: 0x485FB0 VA: 0x485FB0 Slot: 29
	public override void Remove(object key) { }

	// RVA: 0x486074 Offset: 0x486074 VA: 0x486074 Slot: 30
	public override bool ContainsKey(object key) { }

	// RVA: 0x4860B0 Offset: 0x4860B0 VA: 0x4860B0 Slot: 31
	public override object Clone() { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x94D3C Offset: 0x94D3C VA: 0x94D3C
public interface IComparer // TypeDefIndex: 201
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int Compare(object x, object y);
}

// Namespace: System.Collections
[DefaultMemberAttribute] // RVA: 0x94D50 Offset: 0x94D50 VA: 0x94D50
[ComVisibleAttribute] // RVA: 0x94D50 Offset: 0x94D50 VA: 0x94D50
public interface IDictionary : IEnumerable, ICollection // TypeDefIndex: 202
{
	// Properties
	public abstract object Item { get; set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object get_Item(object key);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void set_Item(object key, object value);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Add(object key, object value);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract IDictionaryEnumerator GetEnumerator();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Remove(object key);
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x94D9C Offset: 0x94D9C VA: 0x94D9C
public interface IDictionaryEnumerator : IEnumerator // TypeDefIndex: 203
{
	// Properties
	public abstract DictionaryEntry Entry { get; }
	public abstract object Key { get; }
	public abstract object Value { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract DictionaryEntry get_Entry();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract object get_Key();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract object get_Value();
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x94DB0 Offset: 0x94DB0 VA: 0x94DB0
public interface IEqualityComparer // TypeDefIndex: 204
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Equals(object x, object y);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int GetHashCode(object obj);
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x94DC4 Offset: 0x94DC4 VA: 0x94DC4
[ObsoleteAttribute] // RVA: 0x94DC4 Offset: 0x94DC4 VA: 0x94DC4
public interface IHashCodeProvider // TypeDefIndex: 205
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int GetHashCode(object obj);
}

// Namespace: System.Collections
[DebuggerTypeProxyAttribute] // RVA: 0x94E30 Offset: 0x94E30 VA: 0x94E30
[DebuggerDisplayAttribute] // RVA: 0x94E30 Offset: 0x94E30 VA: 0x94E30
[ComVisibleAttribute] // RVA: 0x94E30 Offset: 0x94E30 VA: 0x94E30
[Serializable]
public class Queue : IEnumerable, ICloneable, ICollection // TypeDefIndex: 206
{
	// Fields
	private object[] _array; // 0x8
	private int _head; // 0xC
	private int _size; // 0x10
	private int _tail; // 0x14
	private int _growFactor; // 0x18
	private int _version; // 0x1C

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x486284 Offset: 0x486284 VA: 0x486284
	public void .ctor() { }

	// RVA: 0x486410 Offset: 0x486410 VA: 0x486410
	public void .ctor(int capacity) { }

	// RVA: 0x486418 Offset: 0x486418 VA: 0x486418
	public void .ctor(ICollection col) { }

	// RVA: 0x486290 Offset: 0x486290 VA: 0x486290
	public void .ctor(int capacity, float growFactor) { }

	// RVA: 0x48683C Offset: 0x48683C VA: 0x48683C Slot: 10
	public virtual int get_Count() { }

	// RVA: 0x486844 Offset: 0x486844 VA: 0x486844 Slot: 11
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x48684C Offset: 0x48684C VA: 0x48684C Slot: 12
	public virtual object get_SyncRoot() { }

	// RVA: 0x486850 Offset: 0x486850 VA: 0x486850 Slot: 13
	public virtual void CopyTo(Array array, int index) { }

	// RVA: 0x486A50 Offset: 0x486A50 VA: 0x486A50 Slot: 14
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x486B00 Offset: 0x486B00 VA: 0x486B00 Slot: 15
	public virtual object Clone() { }

	// RVA: 0x486C18 Offset: 0x486C18 VA: 0x486C18 Slot: 16
	public virtual void Clear() { }

	// RVA: 0x486CBC Offset: 0x486CBC VA: 0x486CBC Slot: 17
	public virtual object Dequeue() { }

	// RVA: 0x486E18 Offset: 0x486E18 VA: 0x486E18 Slot: 18
	public virtual void Enqueue(object obj) { }

	// RVA: 0x487010 Offset: 0x487010 VA: 0x487010 Slot: 19
	public virtual object Peek() { }

	// RVA: 0x486F00 Offset: 0x486F00 VA: 0x486F00
	private void grow() { }
}

// Namespace: 
[Serializable]
private class Queue.QueueEnumerator : IEnumerator, ICloneable // TypeDefIndex: 207
{
	// Fields
	private Queue queue; // 0x8
	private int _version; // 0xC
	private int current; // 0x10

	// Properties
	public virtual object Current { get; }

	// Methods

	// RVA: 0x486AC0 Offset: 0x486AC0 VA: 0x486AC0
	internal void .ctor(Queue q) { }

	// RVA: 0x4870E8 Offset: 0x4870E8 VA: 0x4870E8 Slot: 7
	public object Clone() { }

	// RVA: 0x487194 Offset: 0x487194 VA: 0x487194 Slot: 8
	public virtual object get_Current() { }

	// RVA: 0x487324 Offset: 0x487324 VA: 0x487324 Slot: 9
	public virtual bool MoveNext() { }

	// RVA: 0x48741C Offset: 0x48741C VA: 0x48741C Slot: 10
	public virtual void Reset() { }
}

// Namespace: System.Collections
[DebuggerDisplayAttribute] // RVA: 0x94EE4 Offset: 0x94EE4 VA: 0x94EE4
[DefaultMemberAttribute] // RVA: 0x94EE4 Offset: 0x94EE4 VA: 0x94EE4
[ComVisibleAttribute] // RVA: 0x94EE4 Offset: 0x94EE4 VA: 0x94EE4
[Serializable]
public class SortedList : IEnumerable, ICloneable, ICollection, IDictionary // TypeDefIndex: 208
{
	// Fields
	private static readonly int INITIAL_SIZE; // 0x0
	private int inUse; // 0x8
	private int modificationCount; // 0xC
	private SortedList.Slot[] table; // 0x10
	private IComparer comparer; // 0x14
	private int defaultCapacity; // 0x18

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }
	public virtual bool IsFixedSize { get; }
	public virtual bool IsReadOnly { get; }
	public virtual object Item { get; set; }
	public virtual int Capacity { get; set; }

	// Methods

	// RVA: 0x4874D4 Offset: 0x4874D4 VA: 0x4874D4
	public void .ctor() { }

	// RVA: 0x487694 Offset: 0x487694 VA: 0x487694
	public void .ctor(int initialCapacity) { }

	// RVA: 0x487570 Offset: 0x487570 VA: 0x487570
	public void .ctor(IComparer comparer, int capacity) { }

	// RVA: 0x487730 Offset: 0x487730 VA: 0x487730
	public void .ctor(IDictionary d, IComparer comparer) { }

	// RVA: 0x487AD4 Offset: 0x487AD4 VA: 0x487AD4
	private static void .cctor() { }

	// RVA: 0x487B3C Offset: 0x487B3C VA: 0x487B3C Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x487C28 Offset: 0x487C28 VA: 0x487C28 Slot: 15
	public virtual int get_Count() { }

	// RVA: 0x487C30 Offset: 0x487C30 VA: 0x487C30 Slot: 16
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x487C38 Offset: 0x487C38 VA: 0x487C38 Slot: 17
	public virtual object get_SyncRoot() { }

	// RVA: 0x487C3C Offset: 0x487C3C VA: 0x487C3C Slot: 18
	public virtual bool get_IsFixedSize() { }

	// RVA: 0x487C44 Offset: 0x487C44 VA: 0x487C44 Slot: 19
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x487C4C Offset: 0x487C4C VA: 0x487C4C Slot: 20
	public virtual object get_Item(object key) { }

	// RVA: 0x487D54 Offset: 0x487D54 VA: 0x487D54 Slot: 21
	public virtual void set_Item(object key, object value) { }

	// RVA: 0x488758 Offset: 0x488758 VA: 0x488758 Slot: 22
	public virtual int get_Capacity() { }

	// RVA: 0x48877C Offset: 0x48877C VA: 0x48877C Slot: 23
	public virtual void set_Capacity(int value) { }

	// RVA: 0x4888D4 Offset: 0x4888D4 VA: 0x4888D4 Slot: 24
	public virtual void Add(object key, object value) { }

	// RVA: 0x4888F0 Offset: 0x4888F0 VA: 0x4888F0 Slot: 25
	public virtual bool Contains(object key) { }

	// RVA: 0x488A5C Offset: 0x488A5C VA: 0x488A5C Slot: 26
	public virtual IDictionaryEnumerator GetEnumerator() { }

	// RVA: 0x488AD0 Offset: 0x488AD0 VA: 0x488AD0 Slot: 27
	public virtual void Remove(object key) { }

	// RVA: 0x488B14 Offset: 0x488B14 VA: 0x488B14 Slot: 28
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x488EA0 Offset: 0x488EA0 VA: 0x488EA0 Slot: 29
	public virtual object Clone() { }

	// RVA: 0x488F30 Offset: 0x488F30 VA: 0x488F30 Slot: 30
	public virtual void RemoveAt(int index) { }

	// RVA: 0x4890A4 Offset: 0x4890A4 VA: 0x4890A4 Slot: 31
	public virtual int IndexOfKey(object key) { }

	// RVA: 0x489204 Offset: 0x489204 VA: 0x489204 Slot: 32
	public virtual bool ContainsKey(object key) { }

	// RVA: 0x48936C Offset: 0x48936C VA: 0x48936C Slot: 33
	public virtual object GetByIndex(int index) { }

	// RVA: 0x489470 Offset: 0x489470 VA: 0x489470
	private void EnsureCapacity(int n, int free) { }

	// RVA: 0x4880E0 Offset: 0x4880E0 VA: 0x4880E0
	private void PutImpl(object key, object value, bool overwrite) { }

	// RVA: 0x487CF4 Offset: 0x487CF4 VA: 0x487CF4
	private object GetImpl(object key) { }

	// RVA: 0x4876A0 Offset: 0x4876A0 VA: 0x4876A0
	private void InitTable(int capacity, bool forceSize) { }

	// RVA: 0x487EE4 Offset: 0x487EE4 VA: 0x487EE4
	private int Find(object key) { }
}

// Namespace: 
[Serializable]
internal struct SortedList.Slot // TypeDefIndex: 209
{
	// Fields
	internal object key; // 0x0
	internal object value; // 0x4
}

// Namespace: 
private enum SortedList.EnumeratorMode // TypeDefIndex: 210
{
	// Fields
	public int value__; // 0x0
	public const SortedList.EnumeratorMode KEY_MODE = 0;
	public const SortedList.EnumeratorMode VALUE_MODE = 1;
	public const SortedList.EnumeratorMode ENTRY_MODE = 2;
}

// Namespace: 
private sealed class SortedList.Enumerator : IEnumerator, ICloneable, IDictionaryEnumerator // TypeDefIndex: 211
{
	// Fields
	private SortedList host; // 0x8
	private int stamp; // 0xC
	private int pos; // 0x10
	private int size; // 0x14
	private SortedList.EnumeratorMode mode; // 0x18
	private object currentKey; // 0x1C
	private object currentValue; // 0x20
	private bool invalid; // 0x24
	private static readonly string xstr; // 0x0

	// Properties
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }
	public object Current { get; }

	// Methods

	// RVA: 0x487BB0 Offset: 0x487BB0 VA: 0x487BB0
	public void .ctor(SortedList host, SortedList.EnumeratorMode mode) { }

	// RVA: 0x489734 Offset: 0x489734 VA: 0x489734
	private static void .cctor() { }

	// RVA: 0x489620 Offset: 0x489620 VA: 0x489620 Slot: 6
	public void Reset() { }

	// RVA: 0x4897A8 Offset: 0x4897A8 VA: 0x4897A8 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x489930 Offset: 0x489930 VA: 0x489930 Slot: 8
	public DictionaryEntry get_Entry() { }

	// RVA: 0x489A38 Offset: 0x489A38 VA: 0x489A38 Slot: 9
	public object get_Key() { }

	// RVA: 0x489B34 Offset: 0x489B34 VA: 0x489B34 Slot: 10
	public object get_Value() { }

	// RVA: 0x489C30 Offset: 0x489C30 VA: 0x489C30 Slot: 4
	public object get_Current() { }

	// RVA: 0x489E30 Offset: 0x489E30 VA: 0x489E30 Slot: 7
	public object Clone() { }
}

// Namespace: System.Collections
[DebuggerTypeProxyAttribute] // RVA: 0x94F58 Offset: 0x94F58 VA: 0x94F58
[DebuggerDisplayAttribute] // RVA: 0x94F58 Offset: 0x94F58 VA: 0x94F58
[ComVisibleAttribute] // RVA: 0x94F58 Offset: 0x94F58 VA: 0x94F58
[Serializable]
public class Stack : IEnumerable, ICloneable, ICollection // TypeDefIndex: 212
{
	// Fields
	private object[] contents; // 0x8
	private int current; // 0xC
	private int count; // 0x10
	private int capacity; // 0x14
	private int modCount; // 0x18

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x489F54 Offset: 0x489F54 VA: 0x489F54
	public void .ctor() { }

	// RVA: 0x489FD8 Offset: 0x489FD8 VA: 0x489FD8
	public void .ctor(ICollection col) { }

	// RVA: 0x48A3F8 Offset: 0x48A3F8 VA: 0x48A3F8
	public void .ctor(int initialCapacity) { }

	// RVA: 0x48A4DC Offset: 0x48A4DC VA: 0x48A4DC
	private void Resize(int ncapacity) { }

	// RVA: 0x48A578 Offset: 0x48A578 VA: 0x48A578 Slot: 10
	public virtual int get_Count() { }

	// RVA: 0x48A580 Offset: 0x48A580 VA: 0x48A580 Slot: 11
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x48A588 Offset: 0x48A588 VA: 0x48A588 Slot: 12
	public virtual object get_SyncRoot() { }

	// RVA: 0x48A58C Offset: 0x48A58C VA: 0x48A58C Slot: 13
	public virtual void Clear() { }

	// RVA: 0x48A614 Offset: 0x48A614 VA: 0x48A614 Slot: 14
	public virtual object Clone() { }

	// RVA: 0x48A6C0 Offset: 0x48A6C0 VA: 0x48A6C0 Slot: 15
	public virtual void CopyTo(Array array, int index) { }

	// RVA: 0x48A8B8 Offset: 0x48A8B8 VA: 0x48A8B8 Slot: 16
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x48A968 Offset: 0x48A968 VA: 0x48A968 Slot: 17
	public virtual object Peek() { }

	// RVA: 0x48AA3C Offset: 0x48AA3C VA: 0x48AA3C Slot: 18
	public virtual object Pop() { }

	// RVA: 0x48ABA8 Offset: 0x48ABA8 VA: 0x48ABA8 Slot: 19
	public virtual void Push(object obj) { }
}

// Namespace: 
private class Stack.Enumerator : IEnumerator, ICloneable // TypeDefIndex: 213
{
	// Fields
	private Stack stack; // 0x8
	private int modCount; // 0xC
	private int current; // 0x10

	// Properties
	public virtual object Current { get; }

	// Methods

	// RVA: 0x48A928 Offset: 0x48A928 VA: 0x48A928
	internal void .ctor(Stack s) { }

	// RVA: 0x48AC60 Offset: 0x48AC60 VA: 0x48AC60 Slot: 7
	public object Clone() { }

	// RVA: 0x48AC68 Offset: 0x48AC68 VA: 0x48AC68 Slot: 8
	public virtual object get_Current() { }

	// RVA: 0x48AD98 Offset: 0x48AD98 VA: 0x48AD98 Slot: 9
	public virtual bool MoveNext() { }

	// RVA: 0x48AE98 Offset: 0x48AE98 VA: 0x48AE98 Slot: 10
	public virtual void Reset() { }
}

// Namespace: System.Configuration.Assemblies
[ComVisibleAttribute] // RVA: 0x9500C Offset: 0x9500C VA: 0x9500C
[Serializable]
public enum AssemblyHashAlgorithm // TypeDefIndex: 214
{
	// Fields
	public int value__; // 0x0
	public const AssemblyHashAlgorithm None = 0;
	public const AssemblyHashAlgorithm MD5 = 32771;
	public const AssemblyHashAlgorithm SHA1 = 32772;
}

// Namespace: System.Configuration.Assemblies
[ComVisibleAttribute] // RVA: 0x95020 Offset: 0x95020 VA: 0x95020
[Serializable]
public enum AssemblyVersionCompatibility // TypeDefIndex: 215
{
	// Fields
	public int value__; // 0x0
	public const AssemblyVersionCompatibility SameMachine = 1;
	public const AssemblyVersionCompatibility SameProcess = 2;
	public const AssemblyVersionCompatibility SameDomain = 3;
}

// Namespace: System.Diagnostics.SymbolStore
[ComVisibleAttribute] // RVA: 0x95034 Offset: 0x95034 VA: 0x95034
public interface ISymbolWriter // TypeDefIndex: 216
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Initialize(IntPtr emitter, string filename, bool fFullBuild);
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0x95048 Offset: 0x95048 VA: 0x95048
[AttributeUsageAttribute] // RVA: 0x95048 Offset: 0x95048 VA: 0x95048
public sealed class DebuggableAttribute : Attribute // TypeDefIndex: 217
{
	// Fields
	private bool JITTrackingEnabledFlag; // 0x8
	private bool JITOptimizerDisabledFlag; // 0x9
	private DebuggableAttribute.DebuggingModes debuggingModes; // 0xC

	// Methods

	// RVA: 0x2F6B48 Offset: 0x2F6B48 VA: 0x2F6B48
	public void .ctor(DebuggableAttribute.DebuggingModes modes) { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0x95080 Offset: 0x95080 VA: 0x95080
[ComVisibleAttribute] // RVA: 0x95080 Offset: 0x95080 VA: 0x95080
public enum DebuggableAttribute.DebuggingModes // TypeDefIndex: 218
{
	// Fields
	public int value__; // 0x0
	public const DebuggableAttribute.DebuggingModes None = 0;
	public const DebuggableAttribute.DebuggingModes Default = 1;
	public const DebuggableAttribute.DebuggingModes IgnoreSymbolStoreSequencePoints = 2;
	public const DebuggableAttribute.DebuggingModes EnableEditAndContinue = 4;
	public const DebuggableAttribute.DebuggingModes DisableOptimizations = 256;
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0x950B4 Offset: 0x950B4 VA: 0x950B4
[MonoTODOAttribute] // RVA: 0x950B4 Offset: 0x950B4 VA: 0x950B4
public sealed class Debugger // TypeDefIndex: 219
{
	// Fields
	public static readonly string DefaultCategory; // 0x0

	// Properties
	public static bool IsAttached { get; }

	// Methods

	// RVA: 0x2F6B78 Offset: 0x2F6B78 VA: 0x2F6B78
	private static void .cctor() { }

	// RVA: 0x2F6C1C Offset: 0x2F6C1C VA: 0x2F6C1C
	public static bool get_IsAttached() { }

	// RVA: 0x2F6C94 Offset: 0x2F6C94 VA: 0x2F6C94
	private static bool IsAttached_internal() { }
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0x95120 Offset: 0x95120 VA: 0x95120
[AttributeUsageAttribute] // RVA: 0x95120 Offset: 0x95120 VA: 0x95120
public sealed class DebuggerBrowsableAttribute : Attribute // TypeDefIndex: 220
{
	// Fields
	private DebuggerBrowsableState state; // 0x8

	// Methods

	// RVA: 0x2F6C98 Offset: 0x2F6C98 VA: 0x2F6C98
	public void .ctor(DebuggerBrowsableState state) { }
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0x95158 Offset: 0x95158 VA: 0x95158
public enum DebuggerBrowsableState // TypeDefIndex: 221
{
	// Fields
	public int value__; // 0x0
	public const DebuggerBrowsableState Never = 0;
	public const DebuggerBrowsableState Collapsed = 2;
	public const DebuggerBrowsableState RootHidden = 3;
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0x9516C Offset: 0x9516C VA: 0x9516C
[ComVisibleAttribute] // RVA: 0x9516C Offset: 0x9516C VA: 0x9516C
public sealed class DebuggerDisplayAttribute : Attribute // TypeDefIndex: 222
{
	// Fields
	private string value; // 0x8
	private string type; // 0xC
	private string name; // 0x10

	// Properties
	public string Name { set; }

	// Methods

	// RVA: 0x2F6CB8 Offset: 0x2F6CB8 VA: 0x2F6CB8
	public void .ctor(string value) { }

	// RVA: 0x2F6DA8 Offset: 0x2F6DA8 VA: 0x2F6DA8
	public void set_Name(string value) { }
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0x951B8 Offset: 0x951B8 VA: 0x951B8
[AttributeUsageAttribute] // RVA: 0x951B8 Offset: 0x951B8 VA: 0x951B8
[Serializable]
public sealed class DebuggerStepThroughAttribute : Attribute // TypeDefIndex: 223
{
	// Methods

	// RVA: 0x2F6DB8 Offset: 0x2F6DB8 VA: 0x2F6DB8
	public void .ctor() { }
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0x95204 Offset: 0x95204 VA: 0x95204
[ComVisibleAttribute] // RVA: 0x95204 Offset: 0x95204 VA: 0x95204
public sealed class DebuggerTypeProxyAttribute : Attribute // TypeDefIndex: 224
{
	// Fields
	private string proxy_type_name; // 0x8

	// Methods

	// RVA: 0x2F6DC0 Offset: 0x2F6DC0 VA: 0x2F6DC0
	public void .ctor(Type type) { }
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0x95250 Offset: 0x95250 VA: 0x95250
[MonoTODOAttribute] // RVA: 0x95250 Offset: 0x95250 VA: 0x95250
[Serializable]
public class StackFrame // TypeDefIndex: 225
{
	// Fields
	public const int OFFSET_UNKNOWN = -1;
	private int ilOffset; // 0x8
	private int nativeOffset; // 0xC
	private MethodBase methodBase; // 0x10
	private string fileName; // 0x14
	private int lineNumber; // 0x18
	private int columnNumber; // 0x1C
	private string internalMethodName; // 0x20

	// Methods

	// RVA: 0x2F6E04 Offset: 0x2F6E04 VA: 0x2F6E04
	public void .ctor() { }

	// RVA: 0x2F6E70 Offset: 0x2F6E70 VA: 0x2F6E70
	public void .ctor(int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x2F6E6C Offset: 0x2F6E6C VA: 0x2F6E6C
	private static bool get_frame_info(int skip, bool needFileInfo, out MethodBase method, out int iloffset, out int native_offset, out string file, out int line, out int column) { }

	// RVA: 0x2F6EE0 Offset: 0x2F6EE0 VA: 0x2F6EE0 Slot: 4
	public virtual int GetFileLineNumber() { }

	// RVA: 0x2F6EE8 Offset: 0x2F6EE8 VA: 0x2F6EE8 Slot: 5
	public virtual string GetFileName() { }

	// RVA: 0x2F6EF0 Offset: 0x2F6EF0 VA: 0x2F6EF0
	internal string GetSecureFileName() { }

	// RVA: 0x2F6FF8 Offset: 0x2F6FF8 VA: 0x2F6FF8 Slot: 6
	public virtual int GetILOffset() { }

	// RVA: 0x2F7000 Offset: 0x2F7000 VA: 0x2F7000 Slot: 7
	public virtual MethodBase GetMethod() { }

	// RVA: 0x2F7008 Offset: 0x2F7008 VA: 0x2F7008 Slot: 8
	public virtual int GetNativeOffset() { }

	// RVA: 0x2F7010 Offset: 0x2F7010 VA: 0x2F7010
	internal string GetInternalMethodName() { }

	// RVA: 0x2F7018 Offset: 0x2F7018 VA: 0x2F7018 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0x952C8 Offset: 0x952C8 VA: 0x952C8
[MonoTODOAttribute] // RVA: 0x952C8 Offset: 0x952C8 VA: 0x952C8
[Serializable]
public class StackTrace // TypeDefIndex: 226
{
	// Fields
	public const int METHODS_TO_SKIP = 0;
	private StackFrame[] frames; // 0x8
	private bool debug_info; // 0xC

	// Properties
	public virtual int FrameCount { get; }

	// Methods

	// RVA: 0x2F72F8 Offset: 0x2F72F8 VA: 0x2F72F8
	public void .ctor() { }

	// RVA: 0x2F75BC Offset: 0x2F75BC VA: 0x2F75BC
	public void .ctor(int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x2F75EC Offset: 0x2F75EC VA: 0x2F75EC
	public void .ctor(Exception e, bool fNeedFileInfo) { }

	// RVA: 0x2F7614 Offset: 0x2F7614 VA: 0x2F7614
	public void .ctor(Exception e, int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x2F7634 Offset: 0x2F7634 VA: 0x2F7634
	internal void .ctor(Exception e, int skipFrames, bool fNeedFileInfo, bool returnNativeFrames) { }

	// RVA: 0x2F7320 Offset: 0x2F7320 VA: 0x2F7320
	private void init_frames(int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x2F7A38 Offset: 0x2F7A38 VA: 0x2F7A38
	private static StackFrame[] get_trace(Exception e, int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x2F7A3C Offset: 0x2F7A3C VA: 0x2F7A3C Slot: 4
	public virtual int get_FrameCount() { }

	// RVA: 0x2F7A50 Offset: 0x2F7A50 VA: 0x2F7A50 Slot: 5
	public virtual StackFrame GetFrame(int index) { }

	// RVA: 0x2F7AC8 Offset: 0x2F7AC8 VA: 0x2F7AC8 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x9533C Offset: 0x9533C VA: 0x9533C
[Serializable]
public abstract class Calendar : ICloneable // TypeDefIndex: 227
{
	// Fields
	private bool m_isReadOnly; // 0x8
	internal int twoDigitYearMax; // 0xC
	internal string[] M_AbbrEraNames; // 0x10
	internal string[] M_EraNames; // 0x14

	// Properties
	public abstract int[] Eras { get; }
	internal string[] EraNames { get; }

	// Methods

	// RVA: 0x30294C Offset: 0x30294C VA: 0x30294C
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract int[] get_Eras();

	[ComVisibleAttribute] // RVA: 0x9C3EC Offset: 0x9C3EC VA: 0x9C3EC
	// RVA: 0x30296C Offset: 0x30296C VA: 0x30296C Slot: 6
	public virtual object Clone() { }

	// RVA: 0x302A68 Offset: 0x302A68 VA: 0x302A68
	internal void CheckReadOnly() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract int GetDayOfMonth(DateTime time);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract DayOfWeek GetDayOfWeek(DateTime time);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract int GetEra(DateTime time);

	// RVA: -1 Offset: -1 Slot: 10
	public abstract int GetMonth(DateTime time);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract int GetYear(DateTime time);

	// RVA: 0x302B14 Offset: 0x302B14 VA: 0x302B14
	internal string[] get_EraNames() { }
}

// Namespace: System.Globalization
internal class CCMath // TypeDefIndex: 228
{
	// Methods

	// RVA: 0x302490 Offset: 0x302490 VA: 0x302490
	public static int div(int x, int y) { }

	// RVA: 0x30224C Offset: 0x30224C VA: 0x30224C
	public static int mod(int x, int y) { }

	// RVA: 0x3025D8 Offset: 0x3025D8 VA: 0x3025D8
	public static int div_mod(out int remainder, int x, int y) { }
}

// Namespace: System.Globalization
internal class CCFixed // TypeDefIndex: 229
{
	// Methods

	// RVA: 0x3021DC Offset: 0x3021DC VA: 0x3021DC
	public static int FromDateTime(DateTime time) { }

	// RVA: 0x302210 Offset: 0x302210 VA: 0x302210
	public static DayOfWeek day_of_week(int date) { }
}

// Namespace: System.Globalization
internal class CCGregorianCalendar // TypeDefIndex: 230
{
	// Methods

	// RVA: 0x302290 Offset: 0x302290 VA: 0x302290
	public static bool is_leap_year(int year) { }

	// RVA: 0x302328 Offset: 0x302328 VA: 0x302328
	public static int fixed_from_dmy(int day, int month, int year) { }

	// RVA: 0x3024C8 Offset: 0x3024C8 VA: 0x3024C8
	public static int year_from_fixed(int date) { }

	// RVA: 0x302620 Offset: 0x302620 VA: 0x302620
	public static void my_from_fixed(out int month, out int year, int date) { }

	// RVA: 0x3027C0 Offset: 0x3027C0 VA: 0x3027C0
	public static void dmy_from_fixed(out int day, out int month, out int year, int date) { }

	// RVA: 0x302808 Offset: 0x302808 VA: 0x302808
	public static int month_from_fixed(int date) { }

	// RVA: 0x30283C Offset: 0x30283C VA: 0x30283C
	public static int day_from_fixed(int date) { }

	// RVA: 0x302888 Offset: 0x302888 VA: 0x302888
	public static int GetDayOfMonth(DateTime time) { }

	// RVA: 0x3028C0 Offset: 0x3028C0 VA: 0x3028C0
	public static int GetMonth(DateTime time) { }

	// RVA: 0x302914 Offset: 0x302914 VA: 0x302914
	public static int GetYear(DateTime time) { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x95350 Offset: 0x95350 VA: 0x95350
[Serializable]
public class CompareInfo : IDeserializationCallback // TypeDefIndex: 231
{
	// Fields
	private static readonly bool useManagedCollation; // 0x0
	private int culture; // 0x8
	private string icu_name; // 0xC
	private int win32LCID; // 0x10
	private string m_name; // 0x14
	private SimpleCollator collator; // 0x18
	private static Hashtable collators; // 0x4
	private static object monitor; // 0x8

	// Properties
	internal static bool UseManagedCollation { get; }
	public int LCID { get; }

	// Methods

	// RVA: 0x302CB4 Offset: 0x302CB4 VA: 0x302CB4
	private void .ctor() { }

	// RVA: 0x302CBC Offset: 0x302CBC VA: 0x302CBC
	internal void .ctor(CultureInfo ci) { }

	// RVA: 0x303208 Offset: 0x303208 VA: 0x303208
	private static void .cctor() { }

	// RVA: 0x303338 Offset: 0x303338 VA: 0x303338 Slot: 4
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x303144 Offset: 0x303144 VA: 0x303144
	internal static bool get_UseManagedCollation() { }

	// RVA: 0x303204 Offset: 0x303204 VA: 0x303204
	private void construct_compareinfo(string locale) { }

	// RVA: 0x3034D4 Offset: 0x3034D4 VA: 0x3034D4
	private void free_internal_collator() { }

	// RVA: 0x3034D8 Offset: 0x3034D8 VA: 0x3034D8
	private int internal_compare(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options) { }

	// RVA: 0x3034DC Offset: 0x3034DC VA: 0x3034DC
	private void assign_sortkey(object key, string source, CompareOptions options) { }

	// RVA: 0x3034E0 Offset: 0x3034E0 VA: 0x3034E0
	private int internal_index(string source, int sindex, int count, string value, CompareOptions options, bool first) { }

	// RVA: 0x30350C Offset: 0x30350C VA: 0x30350C Slot: 1
	protected override void Finalize() { }

	// RVA: 0x303570 Offset: 0x303570 VA: 0x303570
	private int internal_compare_managed(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options) { }

	// RVA: 0x3035E0 Offset: 0x3035E0 VA: 0x3035E0
	private int internal_compare_switch(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options) { }

	// RVA: 0x3036CC Offset: 0x3036CC VA: 0x3036CC Slot: 5
	public virtual int Compare(string string1, string string2) { }

	// RVA: 0x3036F8 Offset: 0x3036F8 VA: 0x3036F8 Slot: 6
	public virtual int Compare(string string1, string string2, CompareOptions options) { }

	// RVA: 0x303860 Offset: 0x303860 VA: 0x303860 Slot: 7
	public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options) { }

	// RVA: 0x303BBC Offset: 0x303BBC VA: 0x303BBC Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x303C7C Offset: 0x303C7C VA: 0x303C7C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x303C8C Offset: 0x303C8C VA: 0x303C8C Slot: 8
	public virtual SortKey GetSortKey(string source, CompareOptions options) { }

	// RVA: 0x303E14 Offset: 0x303E14 VA: 0x303E14 Slot: 9
	public virtual int IndexOf(string source, string value, int startIndex, int count) { }

	// RVA: 0x303E44 Offset: 0x303E44 VA: 0x303E44
	private int internal_index_managed(string s1, int sindex, int count, string s2, CompareOptions opt, bool first) { }

	// RVA: 0x303EC8 Offset: 0x303EC8 VA: 0x303EC8
	private int internal_index_switch(string s1, int sindex, int count, string s2, CompareOptions opt, bool first) { }

	// RVA: 0x303FB8 Offset: 0x303FB8 VA: 0x303FB8 Slot: 10
	public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options) { }

	// RVA: 0x304224 Offset: 0x304224 VA: 0x304224 Slot: 11
	public virtual bool IsPrefix(string source, string prefix, CompareOptions options) { }

	// RVA: 0x304428 Offset: 0x304428 VA: 0x304428 Slot: 12
	public virtual bool IsSuffix(string source, string suffix, CompareOptions options) { }

	// RVA: 0x304654 Offset: 0x304654 VA: 0x304654 Slot: 3
	public override string ToString() { }

	// RVA: 0x303C84 Offset: 0x303C84 VA: 0x303C84
	public int get_LCID() { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x95364 Offset: 0x95364 VA: 0x95364
[FlagsAttribute] // RVA: 0x95364 Offset: 0x95364 VA: 0x95364
[Serializable]
public enum CompareOptions // TypeDefIndex: 232
{
	// Fields
	public int value__; // 0x0
	public const CompareOptions None = 0;
	public const CompareOptions IgnoreCase = 1;
	public const CompareOptions IgnoreNonSpace = 2;
	public const CompareOptions IgnoreSymbols = 4;
	public const CompareOptions IgnoreKanaType = 8;
	public const CompareOptions IgnoreWidth = 16;
	public const CompareOptions StringSort = 536870912;
	public const CompareOptions Ordinal = 1073741824;
	public const CompareOptions OrdinalIgnoreCase = 268435456;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x95398 Offset: 0x95398 VA: 0x95398
[Serializable]
public class CultureInfo : ICloneable, IFormatProvider // TypeDefIndex: 233
{
	// Fields
	private const int NumOptionalCalendars = 5;
	private const int GregorianTypeMask = 16777215;
	private const int CalendarTypeBits = 24;
	private const int InvariantCultureId = 127;
	private static CultureInfo invariant_culture_info; // 0x0
	private static object shared_table_lock; // 0x4
	internal static int BootstrapCultureID; // 0x8
	private bool m_isReadOnly; // 0x8
	private int cultureID; // 0xC
	private int parent_lcid; // 0x10
	private int specific_lcid; // 0x14
	private int datetime_index; // 0x18
	private int number_index; // 0x1C
	private bool m_useUserOverride; // 0x20
	private NumberFormatInfo numInfo; // 0x24
	private DateTimeFormatInfo dateTimeInfo; // 0x28
	private TextInfo textInfo; // 0x2C
	private string m_name; // 0x30
	private string displayname; // 0x34
	private string englishname; // 0x38
	private string nativename; // 0x3C
	private string iso3lang; // 0x40
	private string iso2lang; // 0x44
	private string icu_name; // 0x48
	private string win3lang; // 0x4C
	private string territory; // 0x50
	private CompareInfo compareInfo; // 0x54
	private readonly int* calendar_data; // 0x58
	private readonly void* textinfo_data; // 0x5C
	private Calendar[] optional_calendars; // 0x60
	private CultureInfo parent_culture; // 0x64
	private int m_dataItem; // 0x68
	private Calendar calendar; // 0x6C
	private bool constructed; // 0x70
	internal byte[] cached_serialized_form; // 0x74
	private static readonly string MSG_READONLY; // 0xC
	private static Hashtable shared_by_number; // 0x10
	private static Hashtable shared_by_name; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0x9B1B8 Offset: 0x9B1B8 VA: 0x9B1B8
	private static Dictionary<string, int> <>f__switch$map19; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0x9B1C8 Offset: 0x9B1C8 VA: 0x9B1C8
	private static Dictionary<string, int> <>f__switch$map1A; // 0x1C

	// Properties
	public static CultureInfo InvariantCulture { get; }
	public static CultureInfo CurrentCulture { get; }
	public static CultureInfo CurrentUICulture { get; }
	internal string Territory { get; }
	public virtual int LCID { get; }
	public virtual string Name { get; }
	public virtual CultureInfo Parent { get; }
	public virtual TextInfo TextInfo { get; }
	internal string IcuName { get; }
	public virtual CompareInfo CompareInfo { get; }
	public virtual bool IsNeutralCulture { get; }
	public virtual NumberFormatInfo NumberFormat { get; set; }
	public virtual DateTimeFormatInfo DateTimeFormat { get; set; }
	public bool IsReadOnly { get; }

	// Methods

	// RVA: 0x3034B4 Offset: 0x3034B4 VA: 0x3034B4
	public void .ctor(int culture) { }

	// RVA: 0x304714 Offset: 0x304714 VA: 0x304714
	public void .ctor(int culture, bool useUserOverride) { }

	// RVA: 0x304730 Offset: 0x304730 VA: 0x304730
	private void .ctor(int culture, bool useUserOverride, bool read_only) { }

	// RVA: 0x304BF8 Offset: 0x304BF8 VA: 0x304BF8
	private void .ctor(string name, bool useUserOverride, bool read_only) { }

	// RVA: 0x305034 Offset: 0x305034 VA: 0x305034
	private void .ctor() { }

	// RVA: 0x305054 Offset: 0x305054 VA: 0x305054
	private static void .cctor() { }

	// RVA: 0x2EB028 Offset: 0x2EB028 VA: 0x2EB028
	public static CultureInfo get_InvariantCulture() { }

	// RVA: 0x2E69E0 Offset: 0x2E69E0 VA: 0x2E69E0
	public static CultureInfo get_CurrentCulture() { }

	// RVA: 0x30511C Offset: 0x30511C VA: 0x30511C
	public static CultureInfo get_CurrentUICulture() { }

	// RVA: 0x3051B8 Offset: 0x3051B8 VA: 0x3051B8
	internal static CultureInfo ConstructCurrentCulture() { }

	// RVA: 0x305368 Offset: 0x305368 VA: 0x305368
	internal static CultureInfo ConstructCurrentUICulture() { }

	// RVA: 0x3053E0 Offset: 0x3053E0 VA: 0x3053E0
	internal string get_Territory() { }

	// RVA: 0x3053E8 Offset: 0x3053E8 VA: 0x3053E8 Slot: 6
	public virtual int get_LCID() { }

	// RVA: 0x3053F0 Offset: 0x3053F0 VA: 0x3053F0 Slot: 7
	public virtual string get_Name() { }

	// RVA: 0x3053F8 Offset: 0x3053F8 VA: 0x3053F8 Slot: 8
	public virtual CultureInfo get_Parent() { }

	// RVA: 0x305528 Offset: 0x305528 VA: 0x305528 Slot: 9
	public virtual TextInfo get_TextInfo() { }

	// RVA: 0x3031D0 Offset: 0x3031D0 VA: 0x3031D0
	internal string get_IcuName() { }

	// RVA: 0x30569C Offset: 0x30569C VA: 0x30569C Slot: 10
	public virtual object Clone() { }

	// RVA: 0x305978 Offset: 0x305978 VA: 0x305978 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x305A38 Offset: 0x305A38 VA: 0x305A38 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x305A40 Offset: 0x305A40 VA: 0x305A40 Slot: 3
	public override string ToString() { }

	// RVA: 0x305A48 Offset: 0x305A48 VA: 0x305A48 Slot: 11
	public virtual CompareInfo get_CompareInfo() { }

	// RVA: 0x305B70 Offset: 0x305B70 VA: 0x305B70 Slot: 12
	public virtual bool get_IsNeutralCulture() { }

	// RVA: 0x305BD0 Offset: 0x305BD0 VA: 0x305BD0
	internal void CheckNeutral() { }

	// RVA: 0x305CDC Offset: 0x305CDC VA: 0x305CDC Slot: 13
	public virtual NumberFormatInfo get_NumberFormat() { }

	// RVA: 0x305E28 Offset: 0x305E28 VA: 0x305E28 Slot: 14
	public virtual void set_NumberFormat(NumberFormatInfo value) { }

	// RVA: 0x305F8C Offset: 0x305F8C VA: 0x305F8C Slot: 15
	public virtual DateTimeFormatInfo get_DateTimeFormat() { }

	// RVA: 0x306150 Offset: 0x306150 VA: 0x306150 Slot: 16
	public virtual void set_DateTimeFormat(DateTimeFormatInfo value) { }

	// RVA: 0x3062B4 Offset: 0x3062B4 VA: 0x3062B4
	public bool get_IsReadOnly() { }

	// RVA: 0x3062BC Offset: 0x3062BC VA: 0x3062BC Slot: 17
	public virtual object GetFormat(Type formatType) { }

	// RVA: 0x305508 Offset: 0x305508 VA: 0x305508
	private void Construct() { }

	// RVA: 0x304DB8 Offset: 0x304DB8 VA: 0x304DB8
	private bool ConstructInternalLocaleFromName(string locale) { }

	// RVA: 0x304BF4 Offset: 0x304BF4 VA: 0x304BF4
	private bool ConstructInternalLocaleFromLcid(int lcid) { }

	// RVA: 0x3052E8 Offset: 0x3052E8 VA: 0x3052E8
	private static bool ConstructInternalLocaleFromCurrentLocale(CultureInfo ci) { }

	// RVA: 0x3063DC Offset: 0x3063DC VA: 0x3063DC
	private bool construct_internal_locale_from_lcid(int lcid) { }

	// RVA: 0x3063E0 Offset: 0x3063E0 VA: 0x3063E0
	private bool construct_internal_locale_from_name(string name) { }

	// RVA: 0x3063E4 Offset: 0x3063E4 VA: 0x3063E4
	private static bool construct_internal_locale_from_current_locale(CultureInfo ci) { }

	// RVA: 0x30614C Offset: 0x30614C VA: 0x30614C
	private void construct_datetime_format() { }

	// RVA: 0x305E24 Offset: 0x305E24 VA: 0x305E24
	private void construct_number_format() { }

	// RVA: 0x304900 Offset: 0x304900 VA: 0x304900
	private void ConstructInvariant(bool read_only) { }

	// RVA: 0x305600 Offset: 0x305600 VA: 0x305600
	private TextInfo CreateTextInfo(bool readOnly) { }

	// RVA: 0x3063E8 Offset: 0x3063E8 VA: 0x3063E8
	private static void insert_into_shared_tables(CultureInfo c) { }

	// RVA: 0x306600 Offset: 0x306600 VA: 0x306600
	public static CultureInfo GetCultureInfo(int culture) { }

	// RVA: 0x306870 Offset: 0x306870 VA: 0x306870
	public static CultureInfo GetCultureInfo(string name) { }

	// RVA: 0x306B20 Offset: 0x306B20 VA: 0x306B20
	internal static CultureInfo CreateCulture(string name, bool reference) { }
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0x953AC Offset: 0x953AC VA: 0x953AC
internal enum DateTimeFormatFlags // TypeDefIndex: 234
{
	// Fields
	public int value__; // 0x0
	public const DateTimeFormatFlags Unused = 0;
	public const DateTimeFormatFlags But = 1;
	public const DateTimeFormatFlags Serialized = 2;
	public const DateTimeFormatFlags By = 3;
	public const DateTimeFormatFlags Microsoft = 4;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x953BC Offset: 0x953BC VA: 0x953BC
[Serializable]
public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 235
{
	// Fields
	private const string _RoundtripPattern = "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss.fffffffK";
	private static readonly string MSG_READONLY; // 0x0
	private static readonly string MSG_ARRAYSIZE_MONTH; // 0x4
	private static readonly string MSG_ARRAYSIZE_DAY; // 0x8
	private static readonly string[] INVARIANT_ABBREVIATED_DAY_NAMES; // 0xC
	private static readonly string[] INVARIANT_DAY_NAMES; // 0x10
	private static readonly string[] INVARIANT_ABBREVIATED_MONTH_NAMES; // 0x14
	private static readonly string[] INVARIANT_MONTH_NAMES; // 0x18
	private static readonly string[] INVARIANT_SHORT_DAY_NAMES; // 0x1C
	private static DateTimeFormatInfo theInvariantDateTimeFormatInfo; // 0x20
	private bool m_isReadOnly; // 0x8
	private string amDesignator; // 0xC
	private string pmDesignator; // 0x10
	private string dateSeparator; // 0x14
	private string timeSeparator; // 0x18
	private string shortDatePattern; // 0x1C
	private string longDatePattern; // 0x20
	private string shortTimePattern; // 0x24
	private string longTimePattern; // 0x28
	private string monthDayPattern; // 0x2C
	private string yearMonthPattern; // 0x30
	private string fullDateTimePattern; // 0x34
	private string _RFC1123Pattern; // 0x38
	private string _SortableDateTimePattern; // 0x3C
	private string _UniversalSortableDateTimePattern; // 0x40
	private int firstDayOfWeek; // 0x44
	private Calendar calendar; // 0x48
	private int calendarWeekRule; // 0x4C
	private string[] abbreviatedDayNames; // 0x50
	private string[] dayNames; // 0x54
	private string[] monthNames; // 0x58
	private string[] abbreviatedMonthNames; // 0x5C
	private string[] allShortDatePatterns; // 0x60
	private string[] allLongDatePatterns; // 0x64
	private string[] allShortTimePatterns; // 0x68
	private string[] allLongTimePatterns; // 0x6C
	private string[] monthDayPatterns; // 0x70
	private string[] yearMonthPatterns; // 0x74
	private string[] shortDayNames; // 0x78
	private int nDataItem; // 0x7C
	private bool m_useUserOverride; // 0x80
	private bool m_isDefaultCalendar; // 0x81
	private int CultureID; // 0x84
	private bool bUseCalendarInfo; // 0x88
	private string generalShortTimePattern; // 0x8C
	private string generalLongTimePattern; // 0x90
	private string[] m_eraNames; // 0x94
	private string[] m_abbrevEraNames; // 0x98
	private string[] m_abbrevEnglishEraNames; // 0x9C
	private string[] m_dateWords; // 0xA0
	private int[] optionalCalendars; // 0xA4
	private string[] m_superShortDayNames; // 0xA8
	private string[] genitiveMonthNames; // 0xAC
	private string[] m_genitiveAbbreviatedMonthNames; // 0xB0
	private string[] leapYearMonthNames; // 0xB4
	private DateTimeFormatFlags formatFlags; // 0xB8
	private string m_name; // 0xBC
	private string[] all_date_time_patterns; // 0xC0

	// Properties
	public bool IsReadOnly { get; }
	internal string[] RawAbbreviatedDayNames { get; }
	internal string[] RawAbbreviatedMonthNames { get; }
	internal string[] RawDayNames { get; }
	internal string[] RawMonthNames { get; }
	public string AMDesignator { get; }
	public string PMDesignator { get; }
	public string DateSeparator { get; }
	public string TimeSeparator { get; }
	public string LongDatePattern { get; }
	public string ShortDatePattern { get; }
	public string ShortTimePattern { get; }
	public string LongTimePattern { get; }
	public string MonthDayPattern { get; }
	public string YearMonthPattern { get; }
	public string FullDateTimePattern { get; }
	public static DateTimeFormatInfo CurrentInfo { get; }
	public static DateTimeFormatInfo InvariantInfo { get; }
	public Calendar Calendar { get; set; }
	public string RFC1123Pattern { get; }
	internal string RoundtripPattern { get; }
	public string SortableDateTimePattern { get; }
	public string UniversalSortableDateTimePattern { get; }

	// Methods

	// RVA: 0x3F1C80 Offset: 0x3F1C80 VA: 0x3F1C80
	internal void .ctor(bool read_only) { }

	// RVA: 0x3F1EC0 Offset: 0x3F1EC0 VA: 0x3F1EC0
	public void .ctor() { }

	// RVA: 0x3F1EC8 Offset: 0x3F1EC8 VA: 0x3F1EC8
	private static void .cctor() { }

	// RVA: 0x3F34BC Offset: 0x3F34BC VA: 0x3F34BC
	public static DateTimeFormatInfo GetInstance(IFormatProvider provider) { }

	// RVA: 0x3F3744 Offset: 0x3F3744 VA: 0x3F3744
	public bool get_IsReadOnly() { }

	// RVA: 0x3F374C Offset: 0x3F374C VA: 0x3F374C
	public static DateTimeFormatInfo ReadOnly(DateTimeFormatInfo dtfi) { }

	// RVA: 0x3F3838 Offset: 0x3F3838 VA: 0x3F3838 Slot: 4
	public object Clone() { }

	// RVA: 0x3F3918 Offset: 0x3F3918 VA: 0x3F3918 Slot: 5
	public object GetFormat(Type formatType) { }

	// RVA: 0x3F3944 Offset: 0x3F3944 VA: 0x3F3944
	public string GetAbbreviatedMonthName(int month) { }

	// RVA: 0x3F3A1C Offset: 0x3F3A1C VA: 0x3F3A1C
	public string GetEraName(int era) { }

	// RVA: 0x3F3B88 Offset: 0x3F3B88 VA: 0x3F3B88
	public string GetMonthName(int month) { }

	// RVA: 0x3F3C60 Offset: 0x3F3C60 VA: 0x3F3C60
	internal string[] get_RawAbbreviatedDayNames() { }

	// RVA: 0x3F3C68 Offset: 0x3F3C68 VA: 0x3F3C68
	internal string[] get_RawAbbreviatedMonthNames() { }

	// RVA: 0x3F3C70 Offset: 0x3F3C70 VA: 0x3F3C70
	internal string[] get_RawDayNames() { }

	// RVA: 0x3F3C78 Offset: 0x3F3C78 VA: 0x3F3C78
	internal string[] get_RawMonthNames() { }

	// RVA: 0x3F3C80 Offset: 0x3F3C80 VA: 0x3F3C80
	public string get_AMDesignator() { }

	// RVA: 0x3F3C88 Offset: 0x3F3C88 VA: 0x3F3C88
	public string get_PMDesignator() { }

	// RVA: 0x3F3C90 Offset: 0x3F3C90 VA: 0x3F3C90
	public string get_DateSeparator() { }

	// RVA: 0x3F3C98 Offset: 0x3F3C98 VA: 0x3F3C98
	public string get_TimeSeparator() { }

	// RVA: 0x3F3CA0 Offset: 0x3F3CA0 VA: 0x3F3CA0
	public string get_LongDatePattern() { }

	// RVA: 0x3F3CA8 Offset: 0x3F3CA8 VA: 0x3F3CA8
	public string get_ShortDatePattern() { }

	// RVA: 0x3F3CB0 Offset: 0x3F3CB0 VA: 0x3F3CB0
	public string get_ShortTimePattern() { }

	// RVA: 0x3F3CB8 Offset: 0x3F3CB8 VA: 0x3F3CB8
	public string get_LongTimePattern() { }

	// RVA: 0x3F3CC0 Offset: 0x3F3CC0 VA: 0x3F3CC0
	public string get_MonthDayPattern() { }

	// RVA: 0x3F3CC8 Offset: 0x3F3CC8 VA: 0x3F3CC8
	public string get_YearMonthPattern() { }

	// RVA: 0x3F3CD0 Offset: 0x3F3CD0 VA: 0x3F3CD0
	public string get_FullDateTimePattern() { }

	// RVA: 0x3F3680 Offset: 0x3F3680 VA: 0x3F3680
	public static DateTimeFormatInfo get_CurrentInfo() { }

	// RVA: 0x3F3D7C Offset: 0x3F3D7C VA: 0x3F3D7C
	public static DateTimeFormatInfo get_InvariantInfo() { }

	// RVA: 0x3F4408 Offset: 0x3F4408 VA: 0x3F4408
	public Calendar get_Calendar() { }

	// RVA: 0x3F4410 Offset: 0x3F4410 VA: 0x3F4410
	public void set_Calendar(Calendar value) { }

	// RVA: 0x3F4538 Offset: 0x3F4538 VA: 0x3F4538
	public string get_RFC1123Pattern() { }

	// RVA: 0x3F4540 Offset: 0x3F4540 VA: 0x3F4540
	internal string get_RoundtripPattern() { }

	// RVA: 0x3F459C Offset: 0x3F459C VA: 0x3F459C
	public string get_SortableDateTimePattern() { }

	// RVA: 0x3F45A4 Offset: 0x3F45A4 VA: 0x3F45A4
	public string get_UniversalSortableDateTimePattern() { }

	// RVA: 0x3F45AC Offset: 0x3F45AC VA: 0x3F45AC
	internal string[] GetAllDateTimePatternsInternal() { }

	// RVA: 0x3F45CC Offset: 0x3F45CC VA: 0x3F45CC
	private void FillAllDateTimePatterns() { }

	// RVA: 0x3F4B00 Offset: 0x3F4B00 VA: 0x3F4B00
	internal string[] GetAllRawDateTimePatterns(char format) { }

	// RVA: 0x3F530C Offset: 0x3F530C VA: 0x3F530C
	public string GetDayName(DayOfWeek dayofweek) { }

	// RVA: 0x3F53E0 Offset: 0x3F53E0 VA: 0x3F53E0
	public string GetAbbreviatedDayName(DayOfWeek dayofweek) { }

	// RVA: 0x3F3ED0 Offset: 0x3F3ED0 VA: 0x3F3ED0
	private void FillInvariantPatterns() { }

	// RVA: 0x3F50F8 Offset: 0x3F50F8 VA: 0x3F50F8
	private string[] PopulateCombinedList(string[] dates, string[] times) { }
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0x953D0 Offset: 0x953D0 VA: 0x953D0
[ComVisibleAttribute] // RVA: 0x953D0 Offset: 0x953D0 VA: 0x953D0
[Serializable]
public enum DateTimeStyles // TypeDefIndex: 236
{
	// Fields
	public int value__; // 0x0
	public const DateTimeStyles None = 0;
	public const DateTimeStyles AllowLeadingWhite = 1;
	public const DateTimeStyles AllowTrailingWhite = 2;
	public const DateTimeStyles AllowInnerWhite = 4;
	public const DateTimeStyles AllowWhiteSpaces = 7;
	public const DateTimeStyles NoCurrentDateDefault = 8;
	public const DateTimeStyles AdjustToUniversal = 16;
	public const DateTimeStyles AssumeLocal = 32;
	public const DateTimeStyles AssumeUniversal = 64;
	public const DateTimeStyles RoundtripKind = 128;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x95404 Offset: 0x95404 VA: 0x95404
[Serializable]
public class DaylightTime // TypeDefIndex: 237
{
	// Fields
	private DateTime m_start; // 0x8
	private DateTime m_end; // 0x18
	private TimeSpan m_delta; // 0x28

	// Properties
	public DateTime Start { get; }
	public DateTime End { get; }
	public TimeSpan Delta { get; }

	// Methods

	// RVA: 0x3F54B4 Offset: 0x3F54B4 VA: 0x3F54B4
	public void .ctor(DateTime start, DateTime end, TimeSpan delta) { }

	// RVA: 0x3F5514 Offset: 0x3F5514 VA: 0x3F5514
	public DateTime get_Start() { }

	// RVA: 0x3F5524 Offset: 0x3F5524 VA: 0x3F5524
	public DateTime get_End() { }

	// RVA: 0x3F5534 Offset: 0x3F5534 VA: 0x3F5534
	public TimeSpan get_Delta() { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x95418 Offset: 0x95418 VA: 0x95418
[MonoTODOAttribute] // RVA: 0x95418 Offset: 0x95418 VA: 0x95418
[Serializable]
public class GregorianCalendar : Calendar // TypeDefIndex: 238
{
	// Fields
	internal GregorianCalendarTypes m_type; // 0x18

	// Properties
	public override int[] Eras { get; }
	public virtual GregorianCalendarTypes CalendarType { set; }

	// Methods

	// RVA: 0x3F5540 Offset: 0x3F5540 VA: 0x3F5540
	public void .ctor(GregorianCalendarTypes type) { }

	// RVA: 0x3F1EB8 Offset: 0x3F1EB8 VA: 0x3F1EB8
	public void .ctor() { }

	// RVA: 0x3F56FC Offset: 0x3F56FC VA: 0x3F56FC Slot: 5
	public override int[] get_Eras() { }

	// RVA: 0x3F5798 Offset: 0x3F5798 VA: 0x3F5798 Slot: 12
	public virtual void set_CalendarType(GregorianCalendarTypes value) { }

	// RVA: 0x3F57B8 Offset: 0x3F57B8 VA: 0x3F57B8 Slot: 7
	public override int GetDayOfMonth(DateTime time) { }

	// RVA: 0x3F57F0 Offset: 0x3F57F0 VA: 0x3F57F0 Slot: 8
	public override DayOfWeek GetDayOfWeek(DateTime time) { }

	// RVA: 0x3F5830 Offset: 0x3F5830 VA: 0x3F5830 Slot: 9
	public override int GetEra(DateTime time) { }

	// RVA: 0x3F5838 Offset: 0x3F5838 VA: 0x3F5838 Slot: 10
	public override int GetMonth(DateTime time) { }

	// RVA: 0x3F5870 Offset: 0x3F5870 VA: 0x3F5870 Slot: 11
	public override int GetYear(DateTime time) { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x95464 Offset: 0x95464 VA: 0x95464
[Serializable]
public enum GregorianCalendarTypes // TypeDefIndex: 239
{
	// Fields
	public int value__; // 0x0
	public const GregorianCalendarTypes Localized = 1;
	public const GregorianCalendarTypes USEnglish = 2;
	public const GregorianCalendarTypes MiddleEastFrench = 9;
	public const GregorianCalendarTypes Arabic = 10;
	public const GregorianCalendarTypes TransliteratedEnglish = 11;
	public const GregorianCalendarTypes TransliteratedFrench = 12;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x95478 Offset: 0x95478 VA: 0x95478
[Serializable]
public sealed class NumberFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 240
{
	// Fields
	private bool isReadOnly; // 0x8
	private string decimalFormats; // 0xC
	private string currencyFormats; // 0x10
	private string percentFormats; // 0x14
	private string digitPattern; // 0x18
	private string zeroPattern; // 0x1C
	private int currencyDecimalDigits; // 0x20
	private string currencyDecimalSeparator; // 0x24
	private string currencyGroupSeparator; // 0x28
	private int[] currencyGroupSizes; // 0x2C
	private int currencyNegativePattern; // 0x30
	private int currencyPositivePattern; // 0x34
	private string currencySymbol; // 0x38
	private string nanSymbol; // 0x3C
	private string negativeInfinitySymbol; // 0x40
	private string negativeSign; // 0x44
	private int numberDecimalDigits; // 0x48
	private string numberDecimalSeparator; // 0x4C
	private string numberGroupSeparator; // 0x50
	private int[] numberGroupSizes; // 0x54
	private int numberNegativePattern; // 0x58
	private int percentDecimalDigits; // 0x5C
	private string percentDecimalSeparator; // 0x60
	private string percentGroupSeparator; // 0x64
	private int[] percentGroupSizes; // 0x68
	private int percentNegativePattern; // 0x6C
	private int percentPositivePattern; // 0x70
	private string percentSymbol; // 0x74
	private string perMilleSymbol; // 0x78
	private string positiveInfinitySymbol; // 0x7C
	private string positiveSign; // 0x80
	private string ansiCurrencySymbol; // 0x84
	private int m_dataItem; // 0x88
	private bool m_useUserOverride; // 0x8C
	private bool validForParseAsNumber; // 0x8D
	private bool validForParseAsCurrency; // 0x8E
	private string[] nativeDigits; // 0x90
	private int digitSubstitution; // 0x94
	private static readonly string[] invariantNativeDigits; // 0x0

	// Properties
	public int CurrencyDecimalDigits { get; }
	public string CurrencyDecimalSeparator { get; }
	public string CurrencyGroupSeparator { get; }
	internal int[] RawCurrencyGroupSizes { get; }
	public int CurrencyNegativePattern { get; }
	public int CurrencyPositivePattern { get; }
	public string CurrencySymbol { get; }
	public static NumberFormatInfo CurrentInfo { get; }
	public static NumberFormatInfo InvariantInfo { get; }
	public string NaNSymbol { get; }
	public string NegativeInfinitySymbol { get; }
	public string NegativeSign { get; }
	public int NumberDecimalDigits { get; }
	public string NumberDecimalSeparator { get; }
	public string NumberGroupSeparator { get; }
	internal int[] RawNumberGroupSizes { get; }
	public int NumberNegativePattern { get; set; }
	public int PercentDecimalDigits { get; }
	public string PercentDecimalSeparator { get; }
	public string PercentGroupSeparator { get; }
	internal int[] RawPercentGroupSizes { get; }
	public int PercentNegativePattern { get; }
	public int PercentPositivePattern { get; }
	public string PercentSymbol { get; }
	public string PerMilleSymbol { get; }
	public string PositiveInfinitySymbol { get; }
	public string PositiveSign { get; }

	// Methods

	// RVA: 0x3F58A8 Offset: 0x3F58A8 VA: 0x3F58A8
	internal void .ctor(int lcid, bool read_only) { }

	// RVA: 0x3F5BCC Offset: 0x3F5BCC VA: 0x3F5BCC
	internal void .ctor(bool read_only) { }

	// RVA: 0x3F5BD8 Offset: 0x3F5BD8 VA: 0x3F5BD8
	public void .ctor() { }

	// RVA: 0x3F5BE4 Offset: 0x3F5BE4 VA: 0x3F5BE4
	private static void .cctor() { }

	// RVA: 0x3F60A8 Offset: 0x3F60A8 VA: 0x3F60A8
	public int get_CurrencyDecimalDigits() { }

	// RVA: 0x3F60B0 Offset: 0x3F60B0 VA: 0x3F60B0
	public string get_CurrencyDecimalSeparator() { }

	// RVA: 0x3F60B8 Offset: 0x3F60B8 VA: 0x3F60B8
	public string get_CurrencyGroupSeparator() { }

	// RVA: 0x3F60C0 Offset: 0x3F60C0 VA: 0x3F60C0
	internal int[] get_RawCurrencyGroupSizes() { }

	// RVA: 0x3F60C8 Offset: 0x3F60C8 VA: 0x3F60C8
	public int get_CurrencyNegativePattern() { }

	// RVA: 0x3F60D0 Offset: 0x3F60D0 VA: 0x3F60D0
	public int get_CurrencyPositivePattern() { }

	// RVA: 0x3F60D8 Offset: 0x3F60D8 VA: 0x3F60D8
	public string get_CurrencySymbol() { }

	// RVA: 0x3F60E0 Offset: 0x3F60E0 VA: 0x3F60E0
	public static NumberFormatInfo get_CurrentInfo() { }

	// RVA: 0x3F61C4 Offset: 0x3F61C4 VA: 0x3F61C4
	public static NumberFormatInfo get_InvariantInfo() { }

	// RVA: 0x3F6370 Offset: 0x3F6370 VA: 0x3F6370
	public string get_NaNSymbol() { }

	// RVA: 0x3F6378 Offset: 0x3F6378 VA: 0x3F6378
	public string get_NegativeInfinitySymbol() { }

	// RVA: 0x3F6380 Offset: 0x3F6380 VA: 0x3F6380
	public string get_NegativeSign() { }

	// RVA: 0x3F6388 Offset: 0x3F6388 VA: 0x3F6388
	public int get_NumberDecimalDigits() { }

	// RVA: 0x3F6390 Offset: 0x3F6390 VA: 0x3F6390
	public string get_NumberDecimalSeparator() { }

	// RVA: 0x3F6398 Offset: 0x3F6398 VA: 0x3F6398
	public string get_NumberGroupSeparator() { }

	// RVA: 0x3F63A0 Offset: 0x3F63A0 VA: 0x3F63A0
	internal int[] get_RawNumberGroupSizes() { }

	// RVA: 0x3F63A8 Offset: 0x3F63A8 VA: 0x3F63A8
	public int get_NumberNegativePattern() { }

	// RVA: 0x3F6270 Offset: 0x3F6270 VA: 0x3F6270
	public void set_NumberNegativePattern(int value) { }

	// RVA: 0x3F63B0 Offset: 0x3F63B0 VA: 0x3F63B0
	public int get_PercentDecimalDigits() { }

	// RVA: 0x3F63B8 Offset: 0x3F63B8 VA: 0x3F63B8
	public string get_PercentDecimalSeparator() { }

	// RVA: 0x3F63C0 Offset: 0x3F63C0 VA: 0x3F63C0
	public string get_PercentGroupSeparator() { }

	// RVA: 0x3F63C8 Offset: 0x3F63C8 VA: 0x3F63C8
	internal int[] get_RawPercentGroupSizes() { }

	// RVA: 0x3F63D0 Offset: 0x3F63D0 VA: 0x3F63D0
	public int get_PercentNegativePattern() { }

	// RVA: 0x3F63D8 Offset: 0x3F63D8 VA: 0x3F63D8
	public int get_PercentPositivePattern() { }

	// RVA: 0x3F63E0 Offset: 0x3F63E0 VA: 0x3F63E0
	public string get_PercentSymbol() { }

	// RVA: 0x3F63E8 Offset: 0x3F63E8 VA: 0x3F63E8
	public string get_PerMilleSymbol() { }

	// RVA: 0x3F63F0 Offset: 0x3F63F0 VA: 0x3F63F0
	public string get_PositiveInfinitySymbol() { }

	// RVA: 0x3F63F8 Offset: 0x3F63F8 VA: 0x3F63F8
	public string get_PositiveSign() { }

	// RVA: 0x3F6400 Offset: 0x3F6400 VA: 0x3F6400 Slot: 5
	public object GetFormat(Type formatType) { }

	// RVA: 0x3F64A8 Offset: 0x3F64A8 VA: 0x3F64A8 Slot: 4
	public object Clone() { }

	// RVA: 0x3F6588 Offset: 0x3F6588 VA: 0x3F6588
	public static NumberFormatInfo GetInstance(IFormatProvider formatProvider) { }
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0x9548C Offset: 0x9548C VA: 0x9548C
[ComVisibleAttribute] // RVA: 0x9548C Offset: 0x9548C VA: 0x9548C
[Serializable]
public enum NumberStyles // TypeDefIndex: 241
{
	// Fields
	public int value__; // 0x0
	public const NumberStyles None = 0;
	public const NumberStyles AllowLeadingWhite = 1;
	public const NumberStyles AllowTrailingWhite = 2;
	public const NumberStyles AllowLeadingSign = 4;
	public const NumberStyles AllowTrailingSign = 8;
	public const NumberStyles AllowParentheses = 16;
	public const NumberStyles AllowDecimalPoint = 32;
	public const NumberStyles AllowThousands = 64;
	public const NumberStyles AllowExponent = 128;
	public const NumberStyles AllowCurrencySymbol = 256;
	public const NumberStyles AllowHexSpecifier = 512;
	public const NumberStyles Integer = 7;
	public const NumberStyles HexNumber = 515;
	public const NumberStyles Number = 111;
	public const NumberStyles Float = 167;
	public const NumberStyles Currency = 383;
	public const NumberStyles Any = 511;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x954C0 Offset: 0x954C0 VA: 0x954C0
[Serializable]
public class RegionInfo // TypeDefIndex: 242
{
	// Fields
	private static RegionInfo currentRegion; // 0x0
	private int lcid; // 0x8
	private int regionId; // 0xC
	private string iso2Name; // 0x10
	private string iso3Name; // 0x14
	private string win3Name; // 0x18
	private string englishName; // 0x1C
	private string currencySymbol; // 0x20
	private string isoCurrencySymbol; // 0x24
	private string currencyEnglishName; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0x9B1D8 Offset: 0x9B1D8 VA: 0x9B1D8
	private static Dictionary<string, int> <>f__switch$map1B; // 0x4

	// Properties
	public static RegionInfo CurrentRegion { get; }
	[ComVisibleAttribute] // RVA: 0x9DFBC Offset: 0x9DFBC VA: 0x9DFBC
	public virtual string CurrencyEnglishName { get; }
	public virtual string CurrencySymbol { get; }
	[MonoTODOAttribute] // RVA: 0x9DFD0 Offset: 0x9DFD0 VA: 0x9DFD0
	public virtual string DisplayName { get; }
	public virtual string EnglishName { get; }
	[ComVisibleAttribute] // RVA: 0x9E030 Offset: 0x9E030 VA: 0x9E030
	public virtual int GeoId { get; }
	public virtual bool IsMetric { get; }
	public virtual string ISOCurrencySymbol { get; }
	[ComVisibleAttribute] // RVA: 0x9E044 Offset: 0x9E044 VA: 0x9E044
	public virtual string NativeName { get; }
	[ComVisibleAttribute] // RVA: 0x9E058 Offset: 0x9E058 VA: 0x9E058
	[MonoTODOAttribute] // RVA: 0x9E058 Offset: 0x9E058 VA: 0x9E058
	public virtual string CurrencyNativeName { get; }
	public virtual string Name { get; }
	public virtual string ThreeLetterISORegionName { get; }
	public virtual string ThreeLetterWindowsRegionName { get; }
	public virtual string TwoLetterISORegionName { get; }

	// Methods

	// RVA: 0x3F674C Offset: 0x3F674C VA: 0x3F674C
	public void .ctor(int culture) { }

	// RVA: 0x3F69F8 Offset: 0x3F69F8 VA: 0x3F69F8
	public void .ctor(string name) { }

	// RVA: 0x3F6BBC Offset: 0x3F6BBC VA: 0x3F6BBC
	public static RegionInfo get_CurrentRegion() { }

	// RVA: 0x3F68C0 Offset: 0x3F68C0 VA: 0x3F68C0
	private bool GetByTerritory(CultureInfo ci) { }

	// RVA: 0x3F6BB8 Offset: 0x3F6BB8 VA: 0x3F6BB8
	private bool construct_internal_region_from_name(string name) { }

	// RVA: 0x3F6D24 Offset: 0x3F6D24 VA: 0x3F6D24 Slot: 4
	public virtual string get_CurrencyEnglishName() { }

	// RVA: 0x3F6D2C Offset: 0x3F6D2C VA: 0x3F6D2C Slot: 5
	public virtual string get_CurrencySymbol() { }

	// RVA: 0x3F6D34 Offset: 0x3F6D34 VA: 0x3F6D34 Slot: 6
	public virtual string get_DisplayName() { }

	// RVA: 0x3F6D3C Offset: 0x3F6D3C VA: 0x3F6D3C Slot: 7
	public virtual string get_EnglishName() { }

	// RVA: 0x3F6D44 Offset: 0x3F6D44 VA: 0x3F6D44 Slot: 8
	public virtual int get_GeoId() { }

	// RVA: 0x3F6D4C Offset: 0x3F6D4C VA: 0x3F6D4C Slot: 9
	public virtual bool get_IsMetric() { }

	// RVA: 0x3F6F10 Offset: 0x3F6F10 VA: 0x3F6F10 Slot: 10
	public virtual string get_ISOCurrencySymbol() { }

	// RVA: 0x3F6F18 Offset: 0x3F6F18 VA: 0x3F6F18 Slot: 11
	public virtual string get_NativeName() { }

	// RVA: 0x3F6F28 Offset: 0x3F6F28 VA: 0x3F6F28 Slot: 12
	public virtual string get_CurrencyNativeName() { }

	// RVA: 0x3F6FB0 Offset: 0x3F6FB0 VA: 0x3F6FB0 Slot: 13
	public virtual string get_Name() { }

	// RVA: 0x3F6FB8 Offset: 0x3F6FB8 VA: 0x3F6FB8 Slot: 14
	public virtual string get_ThreeLetterISORegionName() { }

	// RVA: 0x3F6FC0 Offset: 0x3F6FC0 VA: 0x3F6FC0 Slot: 15
	public virtual string get_ThreeLetterWindowsRegionName() { }

	// RVA: 0x3F6FC8 Offset: 0x3F6FC8 VA: 0x3F6FC8 Slot: 16
	public virtual string get_TwoLetterISORegionName() { }

	// RVA: 0x3F6FD0 Offset: 0x3F6FD0 VA: 0x3F6FD0 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x3F7078 Offset: 0x3F7078 VA: 0x3F7078 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x3F708C Offset: 0x3F708C VA: 0x3F708C Slot: 3
	public override string ToString() { }
}

// Namespace: System.Globalization
[MonoTODOAttribute] // RVA: 0x954D4 Offset: 0x954D4 VA: 0x954D4
[ComVisibleAttribute] // RVA: 0x954D4 Offset: 0x954D4 VA: 0x954D4
[Serializable]
public class TextInfo : ICloneable, IDeserializationCallback // TypeDefIndex: 243
{
	// Fields
	private string m_listSeparator; // 0x8
	private bool m_isReadOnly; // 0xC
	private string customCultureName; // 0x10
	private int m_nDataItem; // 0x14
	private bool m_useUserOverride; // 0x18
	private int m_win32LangID; // 0x1C
	private readonly CultureInfo ci; // 0x20
	private readonly bool handleDotI; // 0x24
	private readonly TextInfo.Data data; // 0x28

	// Properties
	public virtual string ListSeparator { get; }
	[ComVisibleAttribute] // RVA: 0x9E0A4 Offset: 0x9E0A4 VA: 0x9E0A4
	public string CultureName { get; }

	// Methods

	// RVA: 0x3F7870 Offset: 0x3F7870 VA: 0x3F7870
	internal void .ctor(CultureInfo ci, int lcid, void* data, bool read_only) { }

	// RVA: 0x3F79BC Offset: 0x3F79BC VA: 0x3F79BC
	private void .ctor(TextInfo textInfo) { }

	[MonoTODOAttribute] // RVA: 0x9C400 Offset: 0x9C400 VA: 0x9C400
	// RVA: 0x3F7B24 Offset: 0x3F7B24 VA: 0x3F7B24 Slot: 5
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x3F7B28 Offset: 0x3F7B28 VA: 0x3F7B28 Slot: 6
	public virtual string get_ListSeparator() { }

	// RVA: 0x3F7ADC Offset: 0x3F7ADC VA: 0x3F7ADC
	public string get_CultureName() { }

	// RVA: 0x3F7B6C Offset: 0x3F7B6C VA: 0x3F7B6C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x3F7C3C Offset: 0x3F7C3C VA: 0x3F7C3C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x3F7C44 Offset: 0x3F7C44 VA: 0x3F7C44 Slot: 3
	public override string ToString() { }

	// RVA: 0x3F7D04 Offset: 0x3F7D04 VA: 0x3F7D04 Slot: 7
	public virtual char ToLower(char c) { }

	// RVA: 0x3F7EDC Offset: 0x3F7EDC VA: 0x3F7EDC Slot: 8
	public virtual char ToUpper(char c) { }

	// RVA: 0x3F8108 Offset: 0x3F8108 VA: 0x3F8108 Slot: 9
	public virtual string ToLower(string str) { }

	[ComVisibleAttribute] // RVA: 0x9C410 Offset: 0x9C410 VA: 0x9C410
	// RVA: 0x3F82D8 Offset: 0x3F82D8 VA: 0x3F82D8 Slot: 10
	public virtual object Clone() { }
}

// Namespace: 
private struct TextInfo.Data // TypeDefIndex: 244
{
	// Fields
	public int ansi; // 0x0
	public int ebcdic; // 0x4
	public int mac; // 0x8
	public int oem; // 0xC
	public byte list_sep; // 0x10
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x95544 Offset: 0x95544 VA: 0x95544
[Serializable]
public enum UnicodeCategory // TypeDefIndex: 245
{
	// Fields
	public int value__; // 0x0
	public const UnicodeCategory UppercaseLetter = 0;
	public const UnicodeCategory LowercaseLetter = 1;
	public const UnicodeCategory TitlecaseLetter = 2;
	public const UnicodeCategory ModifierLetter = 3;
	public const UnicodeCategory OtherLetter = 4;
	public const UnicodeCategory NonSpacingMark = 5;
	public const UnicodeCategory SpacingCombiningMark = 6;
	public const UnicodeCategory EnclosingMark = 7;
	public const UnicodeCategory DecimalDigitNumber = 8;
	public const UnicodeCategory LetterNumber = 9;
	public const UnicodeCategory OtherNumber = 10;
	public const UnicodeCategory SpaceSeparator = 11;
	public const UnicodeCategory LineSeparator = 12;
	public const UnicodeCategory ParagraphSeparator = 13;
	public const UnicodeCategory Control = 14;
	public const UnicodeCategory Format = 15;
	public const UnicodeCategory Surrogate = 16;
	public const UnicodeCategory PrivateUse = 17;
	public const UnicodeCategory ConnectorPunctuation = 18;
	public const UnicodeCategory DashPunctuation = 19;
	public const UnicodeCategory OpenPunctuation = 20;
	public const UnicodeCategory ClosePunctuation = 21;
	public const UnicodeCategory InitialQuotePunctuation = 22;
	public const UnicodeCategory FinalQuotePunctuation = 23;
	public const UnicodeCategory OtherPunctuation = 24;
	public const UnicodeCategory MathSymbol = 25;
	public const UnicodeCategory CurrencySymbol = 26;
	public const UnicodeCategory ModifierSymbol = 27;
	public const UnicodeCategory OtherSymbol = 28;
	public const UnicodeCategory OtherNotAssigned = 29;
}

// Namespace: System.IO.IsolatedStorage
[ComVisibleAttribute] // RVA: 0x95558 Offset: 0x95558 VA: 0x95558
[Serializable]
public class IsolatedStorageException : Exception // TypeDefIndex: 246
{
	// Methods

	// RVA: 0x4084D0 Offset: 0x4084D0 VA: 0x4084D0
	public void .ctor() { }

	// RVA: 0x403ED8 Offset: 0x403ED8 VA: 0x403ED8
	public void .ctor(string message) { }

	// RVA: 0x408544 Offset: 0x408544 VA: 0x408544
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x9556C Offset: 0x9556C VA: 0x9556C
public class BinaryReader : IDisposable // TypeDefIndex: 247
{
	// Fields
	private Stream m_stream; // 0x8
	private Encoding m_encoding; // 0xC
	private byte[] m_buffer; // 0x10
	private Decoder decoder; // 0x14
	private char[] charBuffer; // 0x18
	private bool m_disposed; // 0x1C

	// Properties
	public virtual Stream BaseStream { get; }

	// Methods

	// RVA: 0x3FAB38 Offset: 0x3FAB38 VA: 0x3FAB38
	public void .ctor(Stream input) { }

	// RVA: 0x3FABCC Offset: 0x3FABCC VA: 0x3FABCC
	public void .ctor(Stream input, Encoding encoding) { }

	// RVA: 0x3FAD44 Offset: 0x3FAD44 VA: 0x3FAD44 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x3FAD58 Offset: 0x3FAD58 VA: 0x3FAD58 Slot: 5
	public virtual Stream get_BaseStream() { }

	// RVA: 0x3FAD60 Offset: 0x3FAD60 VA: 0x3FAD60 Slot: 6
	public virtual void Close() { }

	// RVA: 0x3FAD90 Offset: 0x3FAD90 VA: 0x3FAD90 Slot: 7
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x3FADE0 Offset: 0x3FADE0 VA: 0x3FADE0 Slot: 8
	protected virtual void FillBuffer(int numBytes) { }

	// RVA: 0x3FB0D8 Offset: 0x3FB0D8 VA: 0x3FB0D8 Slot: 9
	public virtual int Read() { }

	// RVA: 0x3FB1BC Offset: 0x3FB1BC VA: 0x3FB1BC Slot: 10
	public virtual int Read(byte[] buffer, int index, int count) { }

	// RVA: 0x3FB438 Offset: 0x3FB438 VA: 0x3FB438 Slot: 11
	public virtual int Read(char[] buffer, int index, int count) { }

	// RVA: 0x3FB6B8 Offset: 0x3FB6B8 VA: 0x3FB6B8
	private int ReadCharBytes(char[] buffer, int index, int count, out int bytes_read) { }

	// RVA: 0x3FB804 Offset: 0x3FB804 VA: 0x3FB804
	protected int Read7BitEncodedInt() { }

	// RVA: 0x3FB8F4 Offset: 0x3FB8F4 VA: 0x3FB8F4 Slot: 12
	public virtual bool ReadBoolean() { }

	// RVA: 0x3FB918 Offset: 0x3FB918 VA: 0x3FB918 Slot: 13
	public virtual byte ReadByte() { }

	// RVA: 0x3FBA6C Offset: 0x3FBA6C VA: 0x3FBA6C Slot: 14
	public virtual byte[] ReadBytes(int count) { }

	// RVA: 0x3FBC94 Offset: 0x3FBC94 VA: 0x3FBC94 Slot: 15
	public virtual char ReadChar() { }

	// RVA: 0x3FBD3C Offset: 0x3FBD3C VA: 0x3FBD3C Slot: 16
	public virtual Decimal ReadDecimal() { }

	// RVA: 0x3FBF40 Offset: 0x3FBF40 VA: 0x3FBF40 Slot: 17
	public virtual double ReadDouble() { }

	// RVA: 0x3FBF78 Offset: 0x3FBF78 VA: 0x3FBF78 Slot: 18
	public virtual short ReadInt16() { }

	// RVA: 0x3FC010 Offset: 0x3FC010 VA: 0x3FC010 Slot: 19
	public virtual int ReadInt32() { }

	// RVA: 0x3FC114 Offset: 0x3FC114 VA: 0x3FC114 Slot: 20
	public virtual long ReadInt64() { }

	[CLSCompliantAttribute] // RVA: 0x9C424 Offset: 0x9C424 VA: 0x9C424
	// RVA: 0x3FC310 Offset: 0x3FC310 VA: 0x3FC310 Slot: 21
	public virtual sbyte ReadSByte() { }

	// RVA: 0x3FC330 Offset: 0x3FC330 VA: 0x3FC330 Slot: 22
	public virtual string ReadString() { }

	// RVA: 0x3FC5C0 Offset: 0x3FC5C0 VA: 0x3FC5C0 Slot: 23
	public virtual float ReadSingle() { }

	[CLSCompliantAttribute] // RVA: 0x9C438 Offset: 0x9C438 VA: 0x9C438
	// RVA: 0x3FC5F8 Offset: 0x3FC5F8 VA: 0x3FC5F8 Slot: 24
	public virtual ushort ReadUInt16() { }

	[CLSCompliantAttribute] // RVA: 0x9C44C Offset: 0x9C44C VA: 0x9C44C
	// RVA: 0x3FC68C Offset: 0x3FC68C VA: 0x3FC68C Slot: 25
	public virtual uint ReadUInt32() { }

	[CLSCompliantAttribute] // RVA: 0x9C460 Offset: 0x9C460 VA: 0x9C460
	// RVA: 0x3FC790 Offset: 0x3FC790 VA: 0x3FC790 Slot: 26
	public virtual ulong ReadUInt64() { }

	// RVA: 0x3FAF98 Offset: 0x3FAF98 VA: 0x3FAF98
	private void CheckBuffer(int length) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x95580 Offset: 0x95580 VA: 0x95580
[Serializable]
public class BinaryWriter : IDisposable // TypeDefIndex: 248
{
	// Fields
	public static readonly BinaryWriter Null; // 0x0
	protected Stream OutStream; // 0x8
	private Encoding m_encoding; // 0xC
	private byte[] buffer; // 0x10
	private bool disposed; // 0x14
	private byte[] stringBuffer; // 0x18
	private int maxCharsPerRound; // 0x1C

	// Methods

	// RVA: 0x3FC98C Offset: 0x3FC98C VA: 0x3FC98C
	protected void .ctor() { }

	// RVA: 0x3FCC04 Offset: 0x3FCC04 VA: 0x3FCC04
	public void .ctor(Stream output) { }

	// RVA: 0x3FCA60 Offset: 0x3FCA60 VA: 0x3FCA60
	public void .ctor(Stream output, Encoding encoding) { }

	// RVA: 0x3FCC98 Offset: 0x3FCC98 VA: 0x3FCC98
	private static void .cctor() { }

	// RVA: 0x3FCD08 Offset: 0x3FCD08 VA: 0x3FCD08 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x3FCD1C Offset: 0x3FCD1C VA: 0x3FCD1C Slot: 5
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x3FCD64 Offset: 0x3FCD64 VA: 0x3FCD64 Slot: 6
	public virtual void Flush() { }

	// RVA: 0x3FCD98 Offset: 0x3FCD98 VA: 0x3FCD98 Slot: 7
	public virtual void Write(bool value) { }

	// RVA: 0x3FCED4 Offset: 0x3FCED4 VA: 0x3FCED4 Slot: 8
	public virtual void Write(byte value) { }

	// RVA: 0x3FCFC4 Offset: 0x3FCFC4 VA: 0x3FCFC4 Slot: 9
	public virtual void Write(byte[] buffer) { }

	// RVA: 0x3FD114 Offset: 0x3FD114 VA: 0x3FD114 Slot: 10
	public virtual void Write(byte[] buffer, int index, int count) { }

	// RVA: 0x3FD26C Offset: 0x3FD26C VA: 0x3FD26C Slot: 11
	public virtual void Write(char ch) { }

	// RVA: 0x3FD408 Offset: 0x3FD408 VA: 0x3FD408 Slot: 12
	public virtual void Write(char[] chars) { }

	// RVA: 0x3FD5A4 Offset: 0x3FD5A4 VA: 0x3FD5A4 Slot: 13
	public virtual void Write(char[] chars, int index, int count) { }

	// RVA: 0x3FD748 Offset: 0x3FD748 VA: 0x3FD748 Slot: 14
	public virtual void Write(Decimal value) { }

	// RVA: 0x3FDA3C Offset: 0x3FDA3C VA: 0x3FDA3C Slot: 15
	public virtual void Write(double value) { }

	// RVA: 0x3FDB58 Offset: 0x3FDB58 VA: 0x3FDB58 Slot: 16
	public virtual void Write(short value) { }

	// RVA: 0x3FDCCC Offset: 0x3FDCCC VA: 0x3FDCCC Slot: 17
	public virtual void Write(int value) { }

	// RVA: 0x3FDEB0 Offset: 0x3FDEB0 VA: 0x3FDEB0 Slot: 18
	public virtual void Write(long value) { }

	[CLSCompliantAttribute] // RVA: 0x9C474 Offset: 0x9C474 VA: 0x9C474
	// RVA: 0x3FE024 Offset: 0x3FE024 VA: 0x3FE024 Slot: 19
	public virtual void Write(sbyte value) { }

	// RVA: 0x3FE160 Offset: 0x3FE160 VA: 0x3FE160 Slot: 20
	public virtual void Write(float value) { }

	// RVA: 0x3FE274 Offset: 0x3FE274 VA: 0x3FE274 Slot: 21
	public virtual void Write(string value) { }

	[CLSCompliantAttribute] // RVA: 0x9C488 Offset: 0x9C488 VA: 0x9C488
	// RVA: 0x3FE530 Offset: 0x3FE530 VA: 0x3FE530 Slot: 22
	public virtual void Write(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0x9C49C Offset: 0x9C49C VA: 0x9C49C
	// RVA: 0x3FE6A4 Offset: 0x3FE6A4 VA: 0x3FE6A4 Slot: 23
	public virtual void Write(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x9C4B0 Offset: 0x9C4B0 VA: 0x9C4B0
	// RVA: 0x3FE888 Offset: 0x3FE888 VA: 0x3FE888 Slot: 24
	public virtual void Write(ulong value) { }

	// RVA: 0x3FE4E4 Offset: 0x3FE4E4 VA: 0x3FE4E4
	protected void Write7BitEncodedInt(int value) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x95594 Offset: 0x95594 VA: 0x95594
public static class Directory // TypeDefIndex: 249
{
	// Methods

	// RVA: 0x3FE9FC Offset: 0x3FE9FC VA: 0x3FE9FC
	public static DirectoryInfo CreateDirectory(string path) { }

	// RVA: 0x3FEE84 Offset: 0x3FEE84 VA: 0x3FEE84
	private static DirectoryInfo CreateDirectoriesInternal(string path) { }

	// RVA: 0x3FFBA0 Offset: 0x3FFBA0 VA: 0x3FFBA0
	public static bool Exists(string path) { }

	// RVA: 0x3FFD28 Offset: 0x3FFD28 VA: 0x3FFD28
	public static string GetCurrentDirectory() { }

	// RVA: 0x3FFF74 Offset: 0x3FFF74 VA: 0x3FFF74
	public static string[] GetFiles(string path, string searchPattern) { }

	// RVA: 0x3FFF94 Offset: 0x3FFF94 VA: 0x3FFF94
	private static string[] GetFileSystemEntries(string path, string searchPattern, FileAttributes mask, FileAttributes attrs) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x955A8 Offset: 0x955A8 VA: 0x955A8
[Serializable]
public sealed class DirectoryInfo : FileSystemInfo // TypeDefIndex: 250
{
	// Fields
	private string current; // 0x44
	private string parent; // 0x48

	// Properties
	public override bool Exists { get; }
	public DirectoryInfo Parent { get; }

	// Methods

	// RVA: 0x401158 Offset: 0x401158 VA: 0x401158
	public void .ctor(string path) { }

	// RVA: 0x3FF040 Offset: 0x3FF040 VA: 0x3FF040
	internal void .ctor(string path, bool simpleOriginalPath) { }

	// RVA: 0x4018E4 Offset: 0x4018E4 VA: 0x4018E4
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x40152C Offset: 0x40152C VA: 0x40152C
	private void Initialize() { }

	// RVA: 0x3FF1D0 Offset: 0x3FF1D0 VA: 0x3FF1D0 Slot: 8
	public override bool get_Exists() { }

	// RVA: 0x3FF138 Offset: 0x3FF138 VA: 0x3FF138
	public DirectoryInfo get_Parent() { }

	// RVA: 0x3FF280 Offset: 0x3FF280 VA: 0x3FF280
	public void Create() { }

	// RVA: 0x401AE8 Offset: 0x401AE8 VA: 0x401AE8 Slot: 3
	public override string ToString() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x955BC Offset: 0x955BC VA: 0x955BC
[Serializable]
public class DirectoryNotFoundException : IOException // TypeDefIndex: 251
{
	// Methods

	// RVA: 0x401AF0 Offset: 0x401AF0 VA: 0x401AF0
	public void .ctor() { }

	// RVA: 0x40114C Offset: 0x40114C VA: 0x40114C
	public void .ctor(string message) { }

	// RVA: 0x401B58 Offset: 0x401B58 VA: 0x401B58
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x955D0 Offset: 0x955D0 VA: 0x955D0
[Serializable]
public class EndOfStreamException : IOException // TypeDefIndex: 252
{
	// Methods

	// RVA: 0x3FB064 Offset: 0x3FB064 VA: 0x3FB064
	public void .ctor() { }

	// RVA: 0x401B98 Offset: 0x401B98 VA: 0x401B98
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x955E4 Offset: 0x955E4 VA: 0x955E4
public static class File // TypeDefIndex: 253
{
	// Methods

	// RVA: 0x401BB8 Offset: 0x401BB8 VA: 0x401BB8
	public static void Delete(string path) { }

	// RVA: 0x3FED4C Offset: 0x3FED4C VA: 0x3FED4C
	public static bool Exists(string path) { }

	// RVA: 0x401FC0 Offset: 0x401FC0 VA: 0x401FC0
	public static FileStream Open(string path, FileMode mode) { }

	// RVA: 0x402094 Offset: 0x402094 VA: 0x402094
	public static FileStream OpenRead(string path) { }

	// RVA: 0x402134 Offset: 0x402134 VA: 0x402134
	public static StreamReader OpenText(string path) { }
}

// Namespace: System.IO
[FlagsAttribute] // RVA: 0x955F8 Offset: 0x955F8 VA: 0x955F8
[ComVisibleAttribute] // RVA: 0x955F8 Offset: 0x955F8 VA: 0x955F8
[Serializable]
public enum FileAccess // TypeDefIndex: 254
{
	// Fields
	public int value__; // 0x0
	public const FileAccess Read = 1;
	public const FileAccess Write = 2;
	public const FileAccess ReadWrite = 3;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x9562C Offset: 0x9562C VA: 0x9562C
[FlagsAttribute] // RVA: 0x9562C Offset: 0x9562C VA: 0x9562C
[Serializable]
public enum FileAttributes // TypeDefIndex: 255
{
	// Fields
	public int value__; // 0x0
	public const FileAttributes Archive = 32;
	public const FileAttributes Compressed = 2048;
	public const FileAttributes Device = 64;
	public const FileAttributes Directory = 16;
	public const FileAttributes Encrypted = 16384;
	public const FileAttributes Hidden = 2;
	public const FileAttributes Normal = 128;
	public const FileAttributes NotContentIndexed = 8192;
	public const FileAttributes Offline = 4096;
	public const FileAttributes ReadOnly = 1;
	public const FileAttributes ReparsePoint = 1024;
	public const FileAttributes SparseFile = 512;
	public const FileAttributes System = 4;
	public const FileAttributes Temporary = 256;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x95660 Offset: 0x95660 VA: 0x95660
[Serializable]
public class FileLoadException : IOException // TypeDefIndex: 256
{
	// Fields
	private const int Result = -2147024894;
	private string msg; // 0x34
	private string fileName; // 0x38
	private string fusionLog; // 0x3C

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x40224C Offset: 0x40224C VA: 0x40224C
	public void .ctor() { }

	// RVA: 0x4022E4 Offset: 0x4022E4 VA: 0x4022E4
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x402420 Offset: 0x402420 VA: 0x402420 Slot: 6
	public override string get_Message() { }

	// RVA: 0x402428 Offset: 0x402428 VA: 0x402428 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x40250C Offset: 0x40250C VA: 0x40250C Slot: 3
	public override string ToString() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x95674 Offset: 0x95674 VA: 0x95674
[Serializable]
public enum FileMode // TypeDefIndex: 257
{
	// Fields
	public int value__; // 0x0
	public const FileMode CreateNew = 1;
	public const FileMode Create = 2;
	public const FileMode Open = 3;
	public const FileMode OpenOrCreate = 4;
	public const FileMode Truncate = 5;
	public const FileMode Append = 6;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x95688 Offset: 0x95688 VA: 0x95688
[Serializable]
public class FileNotFoundException : IOException // TypeDefIndex: 258
{
	// Fields
	private string fileName; // 0x34
	private string fusionLog; // 0x38

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x402714 Offset: 0x402714 VA: 0x402714
	public void .ctor() { }

	// RVA: 0x40279C Offset: 0x40279C VA: 0x40279C
	public void .ctor(string message) { }

	// RVA: 0x4027C8 Offset: 0x4027C8 VA: 0x4027C8
	public void .ctor(string message, string fileName) { }

	// RVA: 0x4027FC Offset: 0x4027FC VA: 0x4027FC
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x4028F4 Offset: 0x4028F4 VA: 0x4028F4 Slot: 6
	public override string get_Message() { }

	// RVA: 0x402A64 Offset: 0x402A64 VA: 0x402A64 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x402B48 Offset: 0x402B48 VA: 0x402B48 Slot: 3
	public override string ToString() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x9569C Offset: 0x9569C VA: 0x9569C
[FlagsAttribute] // RVA: 0x9569C Offset: 0x9569C VA: 0x9569C
[Serializable]
public enum FileOptions // TypeDefIndex: 259
{
	// Fields
	public int value__; // 0x0
	public const FileOptions None = 0;
	public const FileOptions Encrypted = 16384;
	public const FileOptions DeleteOnClose = 67108864;
	public const FileOptions SequentialScan = 134217728;
	public const FileOptions RandomAccess = 268435456;
	public const FileOptions Asynchronous = 1073741824;
	public const FileOptions WriteThrough = -2147483648;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x956D0 Offset: 0x956D0 VA: 0x956D0
[FlagsAttribute] // RVA: 0x956D0 Offset: 0x956D0 VA: 0x956D0
[Serializable]
public enum FileShare // TypeDefIndex: 260
{
	// Fields
	public int value__; // 0x0
	public const FileShare None = 0;
	public const FileShare Read = 1;
	public const FileShare Write = 2;
	public const FileShare ReadWrite = 3;
	public const FileShare Delete = 4;
	public const FileShare Inheritable = 16;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x95704 Offset: 0x95704 VA: 0x95704
public class FileStream : Stream // TypeDefIndex: 261
{
	// Fields
	private FileAccess access; // 0x8
	private bool owner; // 0xC
	private bool async; // 0xD
	private bool canseek; // 0xE
	private long append_startpos; // 0x10
	private bool anonymous; // 0x18
	private byte[] buf; // 0x1C
	private int buf_size; // 0x20
	private int buf_length; // 0x24
	private int buf_offset; // 0x28
	private bool buf_dirty; // 0x2C
	private long buf_start; // 0x30
	private string name; // 0x38
	private IntPtr handle; // 0x3C

	// Properties
	public override bool CanRead { get; }
	public override bool CanWrite { get; }
	public override bool CanSeek { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x402DB4 Offset: 0x402DB4 VA: 0x402DB4
	internal void .ctor(IntPtr handle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool noBuffering) { }

	// RVA: 0x403290 Offset: 0x403290 VA: 0x403290
	public void .ctor(string path, FileMode mode, FileAccess access) { }

	// RVA: 0x402064 Offset: 0x402064 VA: 0x402064
	public void .ctor(string path, FileMode mode, FileAccess access, FileShare share) { }

	// RVA: 0x4032F8 Offset: 0x4032F8 VA: 0x4032F8
	internal void .ctor(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool isAsync, bool anonymous) { }

	// RVA: 0x403368 Offset: 0x403368 VA: 0x403368
	internal void .ctor(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool anonymous, FileOptions options) { }

	// RVA: 0x404078 Offset: 0x404078 VA: 0x404078 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x404090 Offset: 0x404090 VA: 0x404090 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x4040A8 Offset: 0x4040A8 VA: 0x4040A8 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x4040B0 Offset: 0x4040B0 VA: 0x4040B0 Slot: 8
	public override long get_Length() { }

	// RVA: 0x4042F0 Offset: 0x4042F0 VA: 0x4042F0 Slot: 9
	public override long get_Position() { }

	// RVA: 0x404464 Offset: 0x404464 VA: 0x404464 Slot: 10
	public override void set_Position(long value) { }

	// RVA: 0x404648 Offset: 0x404648 VA: 0x404648 Slot: 15
	public override int ReadByte() { }

	// RVA: 0x404A40 Offset: 0x404A40 VA: 0x404A40 Slot: 19
	public override void WriteByte(byte value) { }

	// RVA: 0x404C7C Offset: 0x404C7C VA: 0x404C7C Slot: 14
	public override int Read([In] [Out] byte[] array, int offset, int count) { }

	// RVA: 0x405004 Offset: 0x405004 VA: 0x405004
	private int ReadInternal(byte[] dest, int offset, int count) { }

	// RVA: 0x405100 Offset: 0x405100 VA: 0x405100 Slot: 20
	public override IAsyncResult BeginRead(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject) { }

	// RVA: 0x405750 Offset: 0x405750 VA: 0x405750 Slot: 22
	public override int EndRead(IAsyncResult asyncResult) { }

	// RVA: 0x405B28 Offset: 0x405B28 VA: 0x405B28 Slot: 18
	public override void Write(byte[] array, int offset, int count) { }

	// RVA: 0x405E64 Offset: 0x405E64 VA: 0x405E64
	private void WriteInternal(byte[] src, int offset, int count) { }

	// RVA: 0x40609C Offset: 0x40609C VA: 0x40609C Slot: 21
	public override IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject) { }

	// RVA: 0x406B2C Offset: 0x406B2C VA: 0x406B2C Slot: 23
	public override void EndWrite(IAsyncResult asyncResult) { }

	// RVA: 0x406EE4 Offset: 0x406EE4 VA: 0x406EE4 Slot: 16
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x40725C Offset: 0x40725C VA: 0x40725C Slot: 17
	public override void SetLength(long value) { }

	// RVA: 0x40758C Offset: 0x40758C VA: 0x40758C Slot: 13
	public override void Flush() { }

	// RVA: 0x407698 Offset: 0x407698 VA: 0x407698 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x407710 Offset: 0x407710 VA: 0x407710 Slot: 11
	protected override void Dispose(bool disposing) { }

	// RVA: 0x4050A0 Offset: 0x4050A0 VA: 0x4050A0
	private int ReadSegment(byte[] dest, int dest_offset, int count) { }

	// RVA: 0x406020 Offset: 0x406020 VA: 0x406020
	private int WriteSegment(byte[] src, int src_offset, int count) { }

	// RVA: 0x406800 Offset: 0x406800 VA: 0x406800
	private void FlushBuffer(Stream st) { }

	// RVA: 0x404C74 Offset: 0x404C74 VA: 0x404C74
	private void FlushBuffer() { }

	// RVA: 0x4042D8 Offset: 0x4042D8 VA: 0x4042D8
	private void FlushBufferIfDirty() { }

	// RVA: 0x404A00 Offset: 0x404A00 VA: 0x404A00
	private void RefillBuffer() { }

	// RVA: 0x404888 Offset: 0x404888 VA: 0x404888
	private int ReadData(IntPtr handle, byte[] buf, int offset, int count) { }

	// RVA: 0x403178 Offset: 0x403178 VA: 0x403178
	private void InitBuffer(int size, bool noBuffering) { }

	// RVA: 0x403FBC Offset: 0x403FBC VA: 0x403FBC
	private string GetSecureFileName(string filename) { }

	// RVA: 0x403EE0 Offset: 0x403EE0 VA: 0x403EE0
	private string GetSecureFileName(string filename, bool full) { }
}

// Namespace: 
private sealed class FileStream.ReadDelegate : MulticastDelegate // TypeDefIndex: 262
{
	// Methods

	// RVA: 0x405684 Offset: 0x405684 VA: 0x405684
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x4079C0 Offset: 0x4079C0 VA: 0x4079C0 Slot: 11
	public virtual int Invoke(byte[] buffer, int offset, int count) { }

	// RVA: 0x405698 Offset: 0x405698 VA: 0x405698 Slot: 12
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, AsyncCallback callback, object object) { }

	// RVA: 0x405AF0 Offset: 0x405AF0 VA: 0x405AF0 Slot: 13
	public virtual int EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class FileStream.WriteDelegate : MulticastDelegate // TypeDefIndex: 263
{
	// Methods

	// RVA: 0x406A60 Offset: 0x406A60 VA: 0x406A60
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x407DF8 Offset: 0x407DF8 VA: 0x407DF8 Slot: 11
	public virtual void Invoke(byte[] buffer, int offset, int count) { }

	// RVA: 0x406A74 Offset: 0x406A74 VA: 0x406A74 Slot: 12
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, AsyncCallback callback, object object) { }

	// RVA: 0x406ED8 Offset: 0x406ED8 VA: 0x406ED8 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.IO
internal class FileStreamAsyncResult : IAsyncResult // TypeDefIndex: 264
{
	// Fields
	private object state; // 0x8
	private bool completed; // 0xC
	private ManualResetEvent wh; // 0x10
	private AsyncCallback cb; // 0x14
	public int Count; // 0x18
	public int OriginalCount; // 0x1C
	public int BytesRead; // 0x20
	private AsyncCallback realcb; // 0x24

	// Properties
	public object AsyncState { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public bool IsCompleted { get; }

	// Methods

	// RVA: 0x406724 Offset: 0x406724 VA: 0x406724
	public void .ctor(AsyncCallback cb, object state) { }

	// RVA: 0x408220 Offset: 0x408220 VA: 0x408220
	private static void CBWrapper(IAsyncResult ares) { }

	// RVA: 0x40833C Offset: 0x40833C VA: 0x40833C Slot: 4
	public object get_AsyncState() { }

	// RVA: 0x408344 Offset: 0x408344 VA: 0x408344 Slot: 5
	public WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x40834C Offset: 0x40834C VA: 0x40834C Slot: 6
	public bool get_IsCompleted() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x95718 Offset: 0x95718 VA: 0x95718
[Serializable]
public abstract class FileSystemInfo : MarshalByRefObject, ISerializable // TypeDefIndex: 265
{
	// Fields
	protected string FullPath; // 0xC
	protected string OriginalPath; // 0x10
	internal MonoIOStat stat; // 0x18
	internal bool valid; // 0x40

	// Properties
	public abstract bool Exists { get; }
	public virtual string FullName { get; }

	// Methods

	// RVA: 0x401160 Offset: 0x401160 VA: 0x401160
	protected void .ctor() { }

	// RVA: 0x401908 Offset: 0x401908 VA: 0x401908
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	[ComVisibleAttribute] // RVA: 0x9C4C4 Offset: 0x9C4C4 VA: 0x9C4C4
	// RVA: 0x408354 Offset: 0x408354 VA: 0x408354 Slot: 7
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool get_Exists();

	// RVA: 0x40848C Offset: 0x40848C VA: 0x40848C Slot: 9
	public virtual string get_FullName() { }

	// RVA: 0x401A04 Offset: 0x401A04 VA: 0x401A04
	internal void Refresh(bool force) { }

	// RVA: 0x408498 Offset: 0x408498 VA: 0x408498 Slot: 10
	internal virtual void InternalRefresh() { }

	// RVA: 0x401184 Offset: 0x401184 VA: 0x401184
	internal void CheckPath(string path) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x9572C Offset: 0x9572C VA: 0x9572C
[Serializable]
public class IOException : SystemException // TypeDefIndex: 266
{
	// Methods

	// RVA: 0x4023B8 Offset: 0x4023B8 VA: 0x4023B8
	public void .ctor() { }

	// RVA: 0x3FAF90 Offset: 0x3FAF90 VA: 0x3FAF90
	public void .ctor(string message) { }

	// RVA: 0x40849C Offset: 0x40849C VA: 0x40849C
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x401B78 Offset: 0x401B78 VA: 0x401B78
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x4084A4 Offset: 0x4084A4 VA: 0x4084A4
	public void .ctor(string message, int hresult) { }
}

// Namespace: System.IO
[MonoTODOAttribute] // RVA: 0x95740 Offset: 0x95740 VA: 0x95740
[ComVisibleAttribute] // RVA: 0x95740 Offset: 0x95740 VA: 0x95740
[Serializable]
public class MemoryStream : Stream // TypeDefIndex: 267
{
	// Fields
	private bool canWrite; // 0x8
	private bool allowGetBuffer; // 0x9
	private int capacity; // 0xC
	private int length; // 0x10
	private byte[] internalBuffer; // 0x14
	private int initialIndex; // 0x18
	private bool expandable; // 0x1C
	private bool streamClosed; // 0x1D
	private int position; // 0x20
	private int dirty_bytes; // 0x24

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public virtual int Capacity { set; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x4067F8 Offset: 0x4067F8 VA: 0x4067F8
	public void .ctor() { }

	// RVA: 0x408564 Offset: 0x408564 VA: 0x408564
	public void .ctor(int capacity) { }

	// RVA: 0x40867C Offset: 0x40867C VA: 0x40867C
	public void .ctor(byte[] buffer) { }

	// RVA: 0x40878C Offset: 0x40878C VA: 0x40878C
	private void InternalConstructor(byte[] buffer, int index, int count, bool writable, bool publicallyVisible) { }

	// RVA: 0x408924 Offset: 0x408924 VA: 0x408924
	private void CheckIfClosedThrowDisposed() { }

	// RVA: 0x4089D0 Offset: 0x4089D0 VA: 0x4089D0 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x4089E4 Offset: 0x4089E4 VA: 0x4089E4 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x4089F8 Offset: 0x4089F8 VA: 0x4089F8 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x408A1C Offset: 0x408A1C VA: 0x408A1C Slot: 24
	public virtual void set_Capacity(int value) { }

	// RVA: 0x408DD0 Offset: 0x408DD0 VA: 0x408DD0 Slot: 8
	public override long get_Length() { }

	// RVA: 0x408DF4 Offset: 0x408DF4 VA: 0x408DF4 Slot: 9
	public override long get_Position() { }

	// RVA: 0x408E18 Offset: 0x408E18 VA: 0x408E18 Slot: 10
	public override void set_Position(long value) { }

	// RVA: 0x408F4C Offset: 0x408F4C VA: 0x408F4C Slot: 11
	protected override void Dispose(bool disposing) { }

	// RVA: 0x408F58 Offset: 0x408F58 VA: 0x408F58 Slot: 13
	public override void Flush() { }

	// RVA: 0x408F5C Offset: 0x408F5C VA: 0x408F5C Slot: 25
	public virtual byte[] GetBuffer() { }

	// RVA: 0x408FF8 Offset: 0x408FF8 VA: 0x408FF8 Slot: 14
	public override int Read([In] [Out] byte[] buffer, int offset, int count) { }

	// RVA: 0x4091C4 Offset: 0x4091C4 VA: 0x4091C4 Slot: 15
	public override int ReadByte() { }

	// RVA: 0x40922C Offset: 0x40922C VA: 0x40922C Slot: 16
	public override long Seek(long offset, SeekOrigin loc) { }

	// RVA: 0x409488 Offset: 0x409488 VA: 0x409488
	private int CalculateNewCapacity(int minimum) { }

	// RVA: 0x4094A4 Offset: 0x4094A4 VA: 0x4094A4
	private void Expand(int newSize) { }

	// RVA: 0x40950C Offset: 0x40950C VA: 0x40950C Slot: 17
	public override void SetLength(long value) { }

	// RVA: 0x4096D4 Offset: 0x4096D4 VA: 0x4096D4 Slot: 26
	public virtual byte[] ToArray() { }

	// RVA: 0x40977C Offset: 0x40977C VA: 0x40977C Slot: 18
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x40998C Offset: 0x40998C VA: 0x40998C Slot: 19
	public override void WriteByte(byte value) { }
}

// Namespace: System.IO
internal enum MonoFileType // TypeDefIndex: 268
{
	// Fields
	public int value__; // 0x0
	public const MonoFileType Unknown = 0;
	public const MonoFileType Disk = 1;
	public const MonoFileType Char = 2;
	public const MonoFileType Pipe = 3;
	public const MonoFileType Remote = 32768;
}

// Namespace: System.IO
internal sealed class MonoIO // TypeDefIndex: 269
{
	// Fields
	public static readonly FileAttributes InvalidFileAttributes; // 0x0
	public static readonly IntPtr InvalidHandle; // 0x4

	// Properties
	public static IntPtr ConsoleOutput { get; }
	public static IntPtr ConsoleInput { get; }
	public static IntPtr ConsoleError { get; }
	public static char VolumeSeparatorChar { get; }
	public static char DirectorySeparatorChar { get; }
	public static char AltDirectorySeparatorChar { get; }
	public static char PathSeparator { get; }

	// Methods

	// RVA: 0x409AB0 Offset: 0x409AB0 VA: 0x409AB0
	private static void .cctor() { }

	// RVA: 0x3FFE14 Offset: 0x3FFE14 VA: 0x3FFE14
	public static Exception GetException(MonoIOError error) { }

	// RVA: 0x3FF28C Offset: 0x3FF28C VA: 0x3FF28C
	public static Exception GetException(string path, MonoIOError error) { }

	// RVA: 0x3FF288 Offset: 0x3FF288 VA: 0x3FF288
	public static bool CreateDirectory(string path, out MonoIOError error) { }

	// RVA: 0x401154 Offset: 0x401154 VA: 0x401154
	public static string[] GetFileSystemEntries(string path, string path_with_pattern, int attrs, int mask, out MonoIOError error) { }

	// RVA: 0x3FFE10 Offset: 0x3FFE10 VA: 0x3FFE10
	public static string GetCurrentDirectory(out MonoIOError error) { }

	// RVA: 0x401FBC Offset: 0x401FBC VA: 0x401FBC
	public static bool DeleteFile(string path, out MonoIOError error) { }

	// RVA: 0x409B38 Offset: 0x409B38 VA: 0x409B38
	public static FileAttributes GetFileAttributes(string path, out MonoIOError error) { }

	// RVA: 0x403174 Offset: 0x403174 VA: 0x403174
	public static MonoFileType GetFileType(IntPtr handle, out MonoIOError error) { }

	// RVA: 0x401090 Offset: 0x401090 VA: 0x401090
	public static bool ExistsFile(string path, out MonoIOError error) { }

	// RVA: 0x3FFC3C Offset: 0x3FFC3C VA: 0x3FFC3C
	public static bool ExistsDirectory(string path, out MonoIOError error) { }

	// RVA: 0x408494 Offset: 0x408494 VA: 0x408494
	public static bool GetFileStat(string path, out MonoIOStat stat, out MonoIOError error) { }

	// RVA: 0x404074 Offset: 0x404074 VA: 0x404074
	public static IntPtr Open(string filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, out MonoIOError error) { }

	// RVA: 0x4079B8 Offset: 0x4079B8 VA: 0x4079B8
	public static bool Close(IntPtr handle, out MonoIOError error) { }

	// RVA: 0x4079BC Offset: 0x4079BC VA: 0x4079BC
	public static int Read(IntPtr handle, byte[] dest, int dest_offset, int count, out MonoIOError error) { }

	// RVA: 0x40601C Offset: 0x40601C VA: 0x40601C
	public static int Write(IntPtr handle, [In] byte[] src, int src_offset, int count, out MonoIOError error) { }

	// RVA: 0x40328C Offset: 0x40328C VA: 0x40328C
	public static long Seek(IntPtr handle, long offset, SeekOrigin origin, out MonoIOError error) { }

	// RVA: 0x4042EC Offset: 0x4042EC VA: 0x4042EC
	public static long GetLength(IntPtr handle, out MonoIOError error) { }

	// RVA: 0x407588 Offset: 0x407588 VA: 0x407588
	public static bool SetLength(IntPtr handle, long length, out MonoIOError error) { }

	// RVA: 0x409B3C Offset: 0x409B3C VA: 0x409B3C
	public static IntPtr get_ConsoleOutput() { }

	// RVA: 0x409B40 Offset: 0x409B40 VA: 0x409B40
	public static IntPtr get_ConsoleInput() { }

	// RVA: 0x409B44 Offset: 0x409B44 VA: 0x409B44
	public static IntPtr get_ConsoleError() { }

	// RVA: 0x409B48 Offset: 0x409B48 VA: 0x409B48
	public static char get_VolumeSeparatorChar() { }

	// RVA: 0x409B4C Offset: 0x409B4C VA: 0x409B4C
	public static char get_DirectorySeparatorChar() { }

	// RVA: 0x409B50 Offset: 0x409B50 VA: 0x409B50
	public static char get_AltDirectorySeparatorChar() { }

	// RVA: 0x409B54 Offset: 0x409B54 VA: 0x409B54
	public static char get_PathSeparator() { }

	// RVA: 0x409B58 Offset: 0x409B58 VA: 0x409B58
	public static bool RemapPath(string path, out string newPath) { }
}

// Namespace: System.IO
internal enum MonoIOError // TypeDefIndex: 270
{
	// Fields
	public int value__; // 0x0
	public const MonoIOError ERROR_SUCCESS = 0;
	public const MonoIOError ERROR_FILE_NOT_FOUND = 2;
	public const MonoIOError ERROR_PATH_NOT_FOUND = 3;
	public const MonoIOError ERROR_TOO_MANY_OPEN_FILES = 4;
	public const MonoIOError ERROR_ACCESS_DENIED = 5;
	public const MonoIOError ERROR_INVALID_HANDLE = 6;
	public const MonoIOError ERROR_INVALID_DRIVE = 15;
	public const MonoIOError ERROR_NOT_SAME_DEVICE = 17;
	public const MonoIOError ERROR_NO_MORE_FILES = 18;
	public const MonoIOError ERROR_WRITE_FAULT = 29;
	public const MonoIOError ERROR_READ_FAULT = 30;
	public const MonoIOError ERROR_GEN_FAILURE = 31;
	public const MonoIOError ERROR_SHARING_VIOLATION = 32;
	public const MonoIOError ERROR_LOCK_VIOLATION = 33;
	public const MonoIOError ERROR_HANDLE_DISK_FULL = 39;
	public const MonoIOError ERROR_FILE_EXISTS = 80;
	public const MonoIOError ERROR_CANNOT_MAKE = 82;
	public const MonoIOError ERROR_INVALID_PARAMETER = 87;
	public const MonoIOError ERROR_BROKEN_PIPE = 109;
	public const MonoIOError ERROR_INVALID_NAME = 123;
	public const MonoIOError ERROR_DIR_NOT_EMPTY = 145;
	public const MonoIOError ERROR_ALREADY_EXISTS = 183;
	public const MonoIOError ERROR_FILENAME_EXCED_RANGE = 206;
	public const MonoIOError ERROR_ENCRYPTION_FAILED = 6000;
}

// Namespace: System.IO
internal struct MonoIOStat // TypeDefIndex: 271
{
	// Fields
	public string Name; // 0x0
	public FileAttributes Attributes; // 0x4
	public long Length; // 0x8
	public long CreationTime; // 0x10
	public long LastAccessTime; // 0x18
	public long LastWriteTime; // 0x20
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x9578C Offset: 0x9578C VA: 0x9578C
public static class Path // TypeDefIndex: 272
{
	// Fields
	[ObsoleteAttribute] // RVA: 0x9B1E8 Offset: 0x9B1E8 VA: 0x9B1E8
	public static readonly char[] InvalidPathChars; // 0x0
	public static readonly char AltDirectorySeparatorChar; // 0x4
	public static readonly char DirectorySeparatorChar; // 0x6
	public static readonly char PathSeparator; // 0x8
	internal static readonly string DirectorySeparatorStr; // 0xC
	public static readonly char VolumeSeparatorChar; // 0x10
	internal static readonly char[] PathSeparatorChars; // 0x14
	private static readonly bool dirEqualsVolume; // 0x18

	// Methods

	// RVA: 0x409C40 Offset: 0x409C40 VA: 0x409C40
	private static void .cctor() { }

	// RVA: 0x400748 Offset: 0x400748 VA: 0x400748
	public static string Combine(string path1, string path2) { }

	// RVA: 0x40A14C Offset: 0x40A14C VA: 0x40A14C
	internal static string CleanPath(string s) { }

	// RVA: 0x400B84 Offset: 0x400B84 VA: 0x400B84
	public static string GetDirectoryName(string path) { }

	// RVA: 0x40AF6C Offset: 0x40AF6C VA: 0x40AF6C
	public static string GetExtension(string path) { }

	// RVA: 0x4013A0 Offset: 0x4013A0 VA: 0x4013A0
	public static string GetFileName(string path) { }

	// RVA: 0x401320 Offset: 0x401320 VA: 0x401320
	public static string GetFullPath(string path) { }

	// RVA: 0x40BBC0 Offset: 0x40BBC0 VA: 0x40BBC0
	internal static string WindowsDriveAdjustment(string path) { }

	// RVA: 0x40B1F4 Offset: 0x40B1F4 VA: 0x40B1F4
	internal static string InsecureGetFullPath(string path) { }

	// RVA: 0x40C078 Offset: 0x40C078 VA: 0x40C078
	private static bool IsDsc(char c) { }

	// RVA: 0x40A7CC Offset: 0x40A7CC VA: 0x40A7CC
	public static string GetPathRoot(string path) { }

	// RVA: 0x409ED0 Offset: 0x409ED0 VA: 0x409ED0
	public static bool IsPathRooted(string path) { }

	// RVA: 0x409E2C Offset: 0x409E2C VA: 0x409E2C
	public static char[] GetInvalidPathChars() { }

	// RVA: 0x40B128 Offset: 0x40B128 VA: 0x40B128
	private static int findExtension(string path) { }

	// RVA: 0x40CEA0 Offset: 0x40CEA0 VA: 0x40CEA0
	private static string GetServerAndShare(string path) { }

	// RVA: 0x40D0C4 Offset: 0x40D0C4 VA: 0x40D0C4
	private static bool SameRoot(string root, string path) { }

	// RVA: 0x40C158 Offset: 0x40C158 VA: 0x40C158
	private static string CanonicalizePath(string path) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x957A0 Offset: 0x957A0 VA: 0x957A0
[Serializable]
public class PathTooLongException : IOException // TypeDefIndex: 273
{
	// Methods

	// RVA: 0x40D5AC Offset: 0x40D5AC VA: 0x40D5AC
	public void .ctor() { }

	// RVA: 0x409B30 Offset: 0x409B30 VA: 0x409B30
	public void .ctor(string message) { }

	// RVA: 0x40D620 Offset: 0x40D620 VA: 0x40D620
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
internal class SearchPattern // TypeDefIndex: 274
{
	// Fields
	internal static readonly char[] WildcardChars; // 0x0
	internal static readonly char[] InvalidChars; // 0x4

	// Methods

	// RVA: 0x40D640 Offset: 0x40D640 VA: 0x40D640
	private static void .cctor() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x957B4 Offset: 0x957B4 VA: 0x957B4
[Serializable]
public enum SeekOrigin // TypeDefIndex: 275
{
	// Fields
	public int value__; // 0x0
	public const SeekOrigin Begin = 0;
	public const SeekOrigin Current = 1;
	public const SeekOrigin End = 2;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x957C8 Offset: 0x957C8 VA: 0x957C8
[Serializable]
public abstract class Stream : IDisposable // TypeDefIndex: 276
{
	// Fields
	public static readonly Stream Null; // 0x0

	// Properties
	public abstract bool CanRead { get; }
	public abstract bool CanSeek { get; }
	public abstract bool CanWrite { get; }
	public abstract long Length { get; }
	public abstract long Position { get; set; }

	// Methods

	// RVA: 0x40316C Offset: 0x40316C VA: 0x40316C
	protected void .ctor() { }

	// RVA: 0x40D7F4 Offset: 0x40D7F4 VA: 0x40D7F4
	private static void .cctor() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool get_CanRead();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool get_CanSeek();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool get_CanWrite();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract long get_Length();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract long get_Position();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract void set_Position(long value);

	// RVA: 0x40D870 Offset: 0x40D870 VA: 0x40D870 Slot: 4
	public void Dispose() { }

	// RVA: 0x40D880 Offset: 0x40D880 VA: 0x40D880 Slot: 11
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x40D884 Offset: 0x40D884 VA: 0x40D884 Slot: 12
	public virtual void Close() { }

	// RVA: -1 Offset: -1 Slot: 13
	public abstract void Flush();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract int Read([In] [Out] byte[] buffer, int offset, int count);

	// RVA: 0x40D898 Offset: 0x40D898 VA: 0x40D898 Slot: 15
	public virtual int ReadByte() { }

	// RVA: -1 Offset: -1 Slot: 16
	public abstract long Seek(long offset, SeekOrigin origin);

	// RVA: -1 Offset: -1 Slot: 17
	public abstract void SetLength(long value);

	// RVA: -1 Offset: -1 Slot: 18
	public abstract void Write(byte[] buffer, int offset, int count);

	// RVA: 0x40D96C Offset: 0x40D96C VA: 0x40D96C Slot: 19
	public virtual void WriteByte(byte value) { }

	// RVA: 0x405468 Offset: 0x405468 VA: 0x405468 Slot: 20
	public virtual IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x40650C Offset: 0x40650C VA: 0x40650C Slot: 21
	public virtual IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x405934 Offset: 0x405934 VA: 0x405934 Slot: 22
	public virtual int EndRead(IAsyncResult asyncResult) { }

	// RVA: 0x406D14 Offset: 0x406D14 VA: 0x406D14 Slot: 23
	public virtual void EndWrite(IAsyncResult asyncResult) { }
}

// Namespace: System.IO
internal class NullStream : Stream // TypeDefIndex: 277
{
	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x409B5C Offset: 0x409B5C VA: 0x409B5C
	public void .ctor() { }

	// RVA: 0x409BE0 Offset: 0x409BE0 VA: 0x409BE0 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x409BE8 Offset: 0x409BE8 VA: 0x409BE8 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x409BF0 Offset: 0x409BF0 VA: 0x409BF0 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x409BF8 Offset: 0x409BF8 VA: 0x409BF8 Slot: 8
	public override long get_Length() { }

	// RVA: 0x409C04 Offset: 0x409C04 VA: 0x409C04 Slot: 9
	public override long get_Position() { }

	// RVA: 0x409C10 Offset: 0x409C10 VA: 0x409C10 Slot: 10
	public override void set_Position(long value) { }

	// RVA: 0x409C14 Offset: 0x409C14 VA: 0x409C14 Slot: 13
	public override void Flush() { }

	// RVA: 0x409C18 Offset: 0x409C18 VA: 0x409C18 Slot: 14
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x409C20 Offset: 0x409C20 VA: 0x409C20 Slot: 15
	public override int ReadByte() { }

	// RVA: 0x409C28 Offset: 0x409C28 VA: 0x409C28 Slot: 16
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x409C34 Offset: 0x409C34 VA: 0x409C34 Slot: 17
	public override void SetLength(long value) { }

	// RVA: 0x409C38 Offset: 0x409C38 VA: 0x409C38 Slot: 18
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x409C3C Offset: 0x409C3C VA: 0x409C3C Slot: 19
	public override void WriteByte(byte value) { }
}

// Namespace: System.IO
internal class StreamAsyncResult : IAsyncResult // TypeDefIndex: 278
{
	// Fields
	private object state; // 0x8
	private bool completed; // 0xC
	private bool done; // 0xD
	private Exception exc; // 0x10
	private int nbytes; // 0x14
	private ManualResetEvent wh; // 0x18

	// Properties
	public object AsyncState { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public bool IsCompleted { get; }
	public Exception Exception { get; }
	public int NBytes { get; }
	public bool Done { get; set; }

	// Methods

	// RVA: 0x40DA34 Offset: 0x40DA34 VA: 0x40DA34
	public void .ctor(object state) { }

	// RVA: 0x40DA68 Offset: 0x40DA68 VA: 0x40DA68
	public void SetComplete(Exception e) { }

	// RVA: 0x40DA60 Offset: 0x40DA60 VA: 0x40DA60
	public void SetComplete(Exception e, int nbytes) { }

	// RVA: 0x40DB14 Offset: 0x40DB14 VA: 0x40DB14 Slot: 4
	public object get_AsyncState() { }

	// RVA: 0x40DB1C Offset: 0x40DB1C VA: 0x40DB1C Slot: 5
	public WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x40DC18 Offset: 0x40DC18 VA: 0x40DC18 Slot: 6
	public bool get_IsCompleted() { }

	// RVA: 0x40DB0C Offset: 0x40DB0C VA: 0x40DB0C
	public Exception get_Exception() { }

	// RVA: 0x40DAF4 Offset: 0x40DAF4 VA: 0x40DAF4
	public int get_NBytes() { }

	// RVA: 0x40DAFC Offset: 0x40DAFC VA: 0x40DAFC
	public bool get_Done() { }

	// RVA: 0x40DB04 Offset: 0x40DB04 VA: 0x40DB04
	public void set_Done(bool value) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x957DC Offset: 0x957DC VA: 0x957DC
[Serializable]
public class StreamReader : TextReader // TypeDefIndex: 279
{
	// Fields
	private byte[] input_buffer; // 0x8
	private char[] decoded_buffer; // 0xC
	private int decoded_count; // 0x10
	private int pos; // 0x14
	private int buffer_size; // 0x18
	private int do_checks; // 0x1C
	private Encoding encoding; // 0x20
	private Decoder decoder; // 0x24
	private Stream base_stream; // 0x28
	private bool mayBlock; // 0x2C
	private StringBuilder line_builder; // 0x30
	public static readonly StreamReader Null; // 0x0
	private bool foundCR; // 0x34

	// Methods

	// RVA: 0x40DC20 Offset: 0x40DC20 VA: 0x40DC20
	internal void .ctor() { }

	// RVA: 0x40DCAC Offset: 0x40DCAC VA: 0x40DCAC
	public void .ctor(Stream stream, Encoding encoding) { }

	// RVA: 0x40DCD0 Offset: 0x40DCD0 VA: 0x40DCD0
	public void .ctor(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize) { }

	// RVA: 0x4021A4 Offset: 0x4021A4 VA: 0x4021A4
	public void .ctor(string path) { }

	// RVA: 0x40E030 Offset: 0x40E030 VA: 0x40E030
	public void .ctor(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize) { }

	// RVA: 0x40E32C Offset: 0x40E32C VA: 0x40E32C
	private static void .cctor() { }

	// RVA: 0x40DD84 Offset: 0x40DD84 VA: 0x40DD84
	internal void Initialize(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize) { }

	// RVA: 0x40E428 Offset: 0x40E428 VA: 0x40E428 Slot: 5
	protected override void Dispose(bool disposing) { }

	// RVA: 0x40E4AC Offset: 0x40E4AC VA: 0x40E4AC
	private int DoChecks(int count) { }

	// RVA: 0x40EAE8 Offset: 0x40EAE8 VA: 0x40EAE8
	private int ReadBuffer() { }

	// RVA: 0x40ED10 Offset: 0x40ED10 VA: 0x40ED10 Slot: 6
	public override int Peek() { }

	// RVA: 0x40EE34 Offset: 0x40EE34 VA: 0x40EE34 Slot: 7
	public override int Read() { }

	// RVA: 0x40EF60 Offset: 0x40EF60 VA: 0x40EF60 Slot: 8
	public override int Read([In] [Out] char[] buffer, int index, int count) { }

	// RVA: 0x40F224 Offset: 0x40F224 VA: 0x40F224
	private int FindNextEOL() { }

	// RVA: 0x40F310 Offset: 0x40F310 VA: 0x40F310 Slot: 9
	public override string ReadLine() { }

	// RVA: 0x40F660 Offset: 0x40F660 VA: 0x40F660 Slot: 10
	public override string ReadToEnd() { }
}

// Namespace: 
private class StreamReader.NullStreamReader : StreamReader // TypeDefIndex: 280
{
	// Methods

	// RVA: 0x40E3A8 Offset: 0x40E3A8 VA: 0x40E3A8
	public void .ctor() { }

	// RVA: 0x40F7E8 Offset: 0x40F7E8 VA: 0x40F7E8 Slot: 6
	public override int Peek() { }

	// RVA: 0x40F7F0 Offset: 0x40F7F0 VA: 0x40F7F0 Slot: 7
	public override int Read() { }

	// RVA: 0x40F7F8 Offset: 0x40F7F8 VA: 0x40F7F8 Slot: 8
	public override int Read([In] [Out] char[] buffer, int index, int count) { }

	// RVA: 0x40F800 Offset: 0x40F800 VA: 0x40F800 Slot: 9
	public override string ReadLine() { }

	// RVA: 0x40F808 Offset: 0x40F808 VA: 0x40F808 Slot: 10
	public override string ReadToEnd() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x957F0 Offset: 0x957F0 VA: 0x957F0
[Serializable]
public class StreamWriter : TextWriter // TypeDefIndex: 281
{
	// Fields
	private Encoding internalEncoding; // 0xC
	private Stream internalStream; // 0x10
	private bool iflush; // 0x14
	private byte[] byte_buf; // 0x18
	private int byte_pos; // 0x1C
	private char[] decode_buf; // 0x20
	private int decode_pos; // 0x24
	private bool DisposedAlready; // 0x28
	private bool preamble_done; // 0x29
	public static readonly StreamWriter Null; // 0x0

	// Properties
	public virtual bool AutoFlush { set; }

	// Methods

	// RVA: 0x40F894 Offset: 0x40F894 VA: 0x40F894
	public void .ctor(Stream stream, Encoding encoding) { }

	// RVA: 0x40F8B0 Offset: 0x40F8B0 VA: 0x40F8B0
	public void .ctor(Stream stream, Encoding encoding, int bufferSize) { }

	// RVA: 0x40FC2C Offset: 0x40FC2C VA: 0x40FC2C
	private static void .cctor() { }

	// RVA: 0x40FAEC Offset: 0x40FAEC VA: 0x40FAEC
	internal void Initialize(Encoding encoding, int bufferSize) { }

	// RVA: 0x40FD2C Offset: 0x40FD2C VA: 0x40FD2C Slot: 14
	public virtual void set_AutoFlush(bool value) { }

	// RVA: 0x40FD48 Offset: 0x40FD48 VA: 0x40FD48 Slot: 6
	protected override void Dispose(bool disposing) { }

	// RVA: 0x40FF58 Offset: 0x40FF58 VA: 0x40FF58 Slot: 7
	public override void Flush() { }

	// RVA: 0x4100E0 Offset: 0x4100E0 VA: 0x4100E0
	private void FlushBytes() { }

	// RVA: 0x41004C Offset: 0x41004C VA: 0x41004C
	private void Decode() { }

	// RVA: 0x4101E0 Offset: 0x4101E0 VA: 0x4101E0 Slot: 11
	public override void Write(char[] buffer, int index, int count) { }

	// RVA: 0x410438 Offset: 0x410438 VA: 0x410438
	private void LowLevelWrite(char[] buffer, int index, int count) { }

	// RVA: 0x4104F0 Offset: 0x4104F0 VA: 0x4104F0
	private void LowLevelWrite(string s) { }

	// RVA: 0x41064C Offset: 0x41064C VA: 0x41064C Slot: 8
	public override void Write(char value) { }

	// RVA: 0x41078C Offset: 0x41078C VA: 0x41078C Slot: 9
	public override void Write(char[] buffer) { }

	// RVA: 0x410888 Offset: 0x410888 VA: 0x410888 Slot: 10
	public override void Write(string value) { }

	// RVA: 0x41096C Offset: 0x41096C VA: 0x41096C Slot: 5
	public override void Close() { }

	// RVA: 0x410980 Offset: 0x410980 VA: 0x410980 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x95804 Offset: 0x95804 VA: 0x95804
[Serializable]
public class StringReader : TextReader // TypeDefIndex: 282
{
	// Fields
	private string source; // 0x8
	private int nextChar; // 0xC
	private int sourceLength; // 0x10

	// Methods

	// RVA: 0x4109F8 Offset: 0x4109F8 VA: 0x4109F8
	public void .ctor(string s) { }

	// RVA: 0x410AFC Offset: 0x410AFC VA: 0x410AFC Slot: 5
	protected override void Dispose(bool disposing) { }

	// RVA: 0x410B14 Offset: 0x410B14 VA: 0x410B14 Slot: 6
	public override int Peek() { }

	// RVA: 0x410C2C Offset: 0x410C2C VA: 0x410C2C Slot: 7
	public override int Read() { }

	// RVA: 0x410C80 Offset: 0x410C80 VA: 0x410C80 Slot: 8
	public override int Read([In] [Out] char[] buffer, int index, int count) { }

	// RVA: 0x410E1C Offset: 0x410E1C VA: 0x410E1C Slot: 9
	public override string ReadLine() { }

	// RVA: 0x410F4C Offset: 0x410F4C VA: 0x410F4C Slot: 10
	public override string ReadToEnd() { }

	// RVA: 0x410B60 Offset: 0x410B60 VA: 0x410B60
	private void CheckObjectDisposedException() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x95818 Offset: 0x95818 VA: 0x95818
[Serializable]
public abstract class TextReader : IDisposable // TypeDefIndex: 283
{
	// Fields
	public static readonly TextReader Null; // 0x0

	// Methods

	// RVA: 0x40DCA4 Offset: 0x40DCA4 VA: 0x40DCA4
	protected void .ctor() { }

	// RVA: 0x4118D8 Offset: 0x4118D8 VA: 0x4118D8
	private static void .cctor() { }

	// RVA: 0x4119D8 Offset: 0x4119D8 VA: 0x4119D8 Slot: 4
	public void Dispose() { }

	// RVA: 0x40E49C Offset: 0x40E49C VA: 0x40E49C Slot: 5
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x4119EC Offset: 0x4119EC VA: 0x4119EC Slot: 6
	public virtual int Peek() { }

	// RVA: 0x4119F4 Offset: 0x4119F4 VA: 0x4119F4 Slot: 7
	public virtual int Read() { }

	// RVA: 0x4119FC Offset: 0x4119FC VA: 0x4119FC Slot: 8
	public virtual int Read([In] [Out] char[] buffer, int index, int count) { }

	// RVA: 0x411AA0 Offset: 0x411AA0 VA: 0x411AA0 Slot: 9
	public virtual string ReadLine() { }

	// RVA: 0x411B2C Offset: 0x411B2C VA: 0x411B2C Slot: 10
	public virtual string ReadToEnd() { }

	// RVA: 0x411BB8 Offset: 0x411BB8 VA: 0x411BB8
	public static TextReader Synchronized(TextReader reader) { }
}

// Namespace: 
private class TextReader.NullTextReader : TextReader // TypeDefIndex: 284
{
	// Methods

	// RVA: 0x411954 Offset: 0x411954 VA: 0x411954
	public void .ctor() { }

	// RVA: 0x411CB8 Offset: 0x411CB8 VA: 0x411CB8 Slot: 9
	public override string ReadLine() { }
}

// Namespace: System.IO
[Serializable]
internal class SynchronizedReader : TextReader // TypeDefIndex: 285
{
	// Fields
	private TextReader reader; // 0x8

	// Methods

	// RVA: 0x410F94 Offset: 0x410F94 VA: 0x410F94
	public void .ctor(TextReader reader) { }

	// RVA: 0x411020 Offset: 0x411020 VA: 0x411020 Slot: 6
	public override int Peek() { }

	// RVA: 0x4110C0 Offset: 0x4110C0 VA: 0x4110C0 Slot: 9
	public override string ReadLine() { }

	// RVA: 0x411160 Offset: 0x411160 VA: 0x411160 Slot: 10
	public override string ReadToEnd() { }

	// RVA: 0x411200 Offset: 0x411200 VA: 0x411200 Slot: 7
	public override int Read() { }

	// RVA: 0x4112A0 Offset: 0x4112A0 VA: 0x4112A0 Slot: 8
	public override int Read(char[] buffer, int index, int count) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x9582C Offset: 0x9582C VA: 0x9582C
[Serializable]
public abstract class TextWriter : IDisposable // TypeDefIndex: 286
{
	// Fields
	protected char[] CoreNewLine; // 0x8
	public static readonly TextWriter Null; // 0x0

	// Methods

	// RVA: 0x40FAA8 Offset: 0x40FAA8 VA: 0x40FAA8
	protected void .ctor() { }

	// RVA: 0x411CC0 Offset: 0x411CC0 VA: 0x411CC0
	private static void .cctor() { }

	// RVA: 0x411DBC Offset: 0x411DBC VA: 0x411DBC Slot: 5
	public virtual void Close() { }

	// RVA: 0x411DD0 Offset: 0x411DD0 VA: 0x411DD0 Slot: 6
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x411DE0 Offset: 0x411DE0 VA: 0x411DE0 Slot: 4
	public void Dispose() { }

	// RVA: 0x411E14 Offset: 0x411E14 VA: 0x411E14 Slot: 7
	public virtual void Flush() { }

	// RVA: 0x411E18 Offset: 0x411E18 VA: 0x411E18
	internal static TextWriter Synchronized(TextWriter writer, bool neverClose) { }

	// RVA: 0x411F20 Offset: 0x411F20 VA: 0x411F20 Slot: 8
	public virtual void Write(char value) { }

	// RVA: 0x411F24 Offset: 0x411F24 VA: 0x411F24 Slot: 9
	public virtual void Write(char[] buffer) { }

	// RVA: 0x411F5C Offset: 0x411F5C VA: 0x411F5C Slot: 10
	public virtual void Write(string value) { }

	// RVA: 0x411F98 Offset: 0x411F98 VA: 0x411F98 Slot: 11
	public virtual void Write(char[] buffer, int index, int count) { }

	// RVA: 0x412154 Offset: 0x412154 VA: 0x412154 Slot: 12
	public virtual void WriteLine() { }

	// RVA: 0x412168 Offset: 0x412168 VA: 0x412168 Slot: 13
	public virtual void WriteLine(string value) { }
}

// Namespace: 
private sealed class TextWriter.NullTextWriter : TextWriter // TypeDefIndex: 287
{
	// Methods

	// RVA: 0x411D3C Offset: 0x411D3C VA: 0x411D3C
	public void .ctor() { }

	// RVA: 0x4121A0 Offset: 0x4121A0 VA: 0x4121A0 Slot: 10
	public override void Write(string s) { }

	// RVA: 0x4121A4 Offset: 0x4121A4 VA: 0x4121A4 Slot: 8
	public override void Write(char value) { }

	// RVA: 0x4121A8 Offset: 0x4121A8 VA: 0x4121A8 Slot: 11
	public override void Write(char[] value, int index, int count) { }
}

// Namespace: System.IO
[Serializable]
internal class SynchronizedWriter : TextWriter // TypeDefIndex: 288
{
	// Fields
	private TextWriter writer; // 0xC
	private bool neverClose; // 0x10

	// Methods

	// RVA: 0x411364 Offset: 0x411364 VA: 0x411364
	public void .ctor(TextWriter writer, bool neverClose) { }

	// RVA: 0x4113F4 Offset: 0x4113F4 VA: 0x4113F4 Slot: 5
	public override void Close() { }

	// RVA: 0x411498 Offset: 0x411498 VA: 0x411498 Slot: 7
	public override void Flush() { }

	// RVA: 0x411528 Offset: 0x411528 VA: 0x411528 Slot: 8
	public override void Write(char value) { }

	// RVA: 0x4115C0 Offset: 0x4115C0 VA: 0x4115C0 Slot: 9
	public override void Write(char[] value) { }

	// RVA: 0x411658 Offset: 0x411658 VA: 0x411658 Slot: 10
	public override void Write(string value) { }

	// RVA: 0x4116F0 Offset: 0x4116F0 VA: 0x4116F0 Slot: 11
	public override void Write(char[] buffer, int index, int count) { }

	// RVA: 0x4117B0 Offset: 0x4117B0 VA: 0x4117B0 Slot: 12
	public override void WriteLine() { }

	// RVA: 0x411840 Offset: 0x411840 VA: 0x411840 Slot: 13
	public override void WriteLine(string value) { }
}

// Namespace: System.IO
internal class UnexceptionalStreamReader : StreamReader // TypeDefIndex: 289
{
	// Fields
	private static bool[] newline; // 0x0
	private static char newlineChar; // 0x4

	// Methods

	// RVA: 0x4121AC Offset: 0x4121AC VA: 0x4121AC
	public void .ctor(Stream stream, Encoding encoding) { }

	// RVA: 0x412250 Offset: 0x412250 VA: 0x412250
	private static void .cctor() { }

	// RVA: 0x412358 Offset: 0x412358 VA: 0x412358 Slot: 6
	public override int Peek() { }

	// RVA: 0x412438 Offset: 0x412438 VA: 0x412438 Slot: 7
	public override int Read() { }

	// RVA: 0x412518 Offset: 0x412518 VA: 0x412518 Slot: 8
	public override int Read([In] [Out] char[] dest_buffer, int index, int count) { }

	// RVA: 0x412860 Offset: 0x412860 VA: 0x412860
	private bool CheckEOL(char current) { }

	// RVA: 0x412B98 Offset: 0x412B98 VA: 0x412B98 Slot: 9
	public override string ReadLine() { }

	// RVA: 0x412C78 Offset: 0x412C78 VA: 0x412C78 Slot: 10
	public override string ReadToEnd() { }
}

// Namespace: System.IO
internal class UnexceptionalStreamWriter : StreamWriter // TypeDefIndex: 290
{
	// Methods

	// RVA: 0x412D58 Offset: 0x412D58 VA: 0x412D58
	public void .ctor(Stream stream, Encoding encoding) { }

	// RVA: 0x412DF4 Offset: 0x412DF4 VA: 0x412DF4 Slot: 7
	public override void Flush() { }

	// RVA: 0x412ED0 Offset: 0x412ED0 VA: 0x412ED0 Slot: 11
	public override void Write(char[] buffer, int index, int count) { }

	// RVA: 0x412FD0 Offset: 0x412FD0 VA: 0x412FD0 Slot: 8
	public override void Write(char value) { }

	// RVA: 0x4130B4 Offset: 0x4130B4 VA: 0x4130B4 Slot: 9
	public override void Write(char[] value) { }

	// RVA: 0x413198 Offset: 0x413198 VA: 0x413198 Slot: 10
	public override void Write(string value) { }
}

// Namespace: System.IO
[CLSCompliantAttribute] // RVA: 0x95840 Offset: 0x95840 VA: 0x95840
public class UnmanagedMemoryStream : Stream // TypeDefIndex: 291
{
	// Fields
	private long length; // 0x8
	private bool closed; // 0x10
	private long capacity; // 0x18
	private FileAccess fileaccess; // 0x20
	private IntPtr initial_pointer; // 0x24
	private long initial_position; // 0x28
	private long current_position; // 0x30
	private EventHandler Closed; // 0x38

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x41327C Offset: 0x41327C VA: 0x41327C Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x4132A4 Offset: 0x4132A4 VA: 0x4132A4 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x4132B8 Offset: 0x4132B8 VA: 0x4132B8 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x4132E0 Offset: 0x4132E0 VA: 0x4132E0 Slot: 8
	public override long get_Length() { }

	// RVA: 0x413390 Offset: 0x413390 VA: 0x413390 Slot: 9
	public override long get_Position() { }

	// RVA: 0x413440 Offset: 0x413440 VA: 0x413440 Slot: 10
	public override void set_Position(long value) { }

	// RVA: 0x4135B8 Offset: 0x4135B8 VA: 0x4135B8 Slot: 14
	public override int Read([In] [Out] byte[] buffer, int offset, int count) { }

	// RVA: 0x4138F0 Offset: 0x4138F0 VA: 0x4138F0 Slot: 15
	public override int ReadByte() { }

	// RVA: 0x413A5C Offset: 0x413A5C VA: 0x413A5C Slot: 16
	public override long Seek(long offset, SeekOrigin loc) { }

	// RVA: 0x413C34 Offset: 0x413C34 VA: 0x413C34 Slot: 17
	public override void SetLength(long value) { }

	// RVA: 0x413E0C Offset: 0x413E0C VA: 0x413E0C Slot: 13
	public override void Flush() { }

	// RVA: 0x413EB8 Offset: 0x413EB8 VA: 0x413EB8 Slot: 11
	protected override void Dispose(bool disposing) { }

	// RVA: 0x413EEC Offset: 0x413EEC VA: 0x413EEC Slot: 18
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x41428C Offset: 0x41428C VA: 0x41428C Slot: 19
	public override void WriteByte(byte value) { }
}

// Namespace: System.Reflection.Emit
internal enum NativeResourceType // TypeDefIndex: 292
{
	// Fields
	public int value__; // 0x0
	public const NativeResourceType None = 0;
	public const NativeResourceType Unmanaged = 1;
	public const NativeResourceType Assembly = 2;
	public const NativeResourceType Explicit = 3;
}

// Namespace: System.Reflection.Emit
internal struct RefEmitPermissionSet // TypeDefIndex: 293
{
	// Fields
	public SecurityAction action; // 0x0
	public string pset; // 0x4
}

// Namespace: System.Reflection.Emit
internal struct MonoResource // TypeDefIndex: 294
{
	// Fields
	public byte[] data; // 0x0
	public string name; // 0x4
	public string filename; // 0x8
	public ResourceAttributes attrs; // 0xC
	public int offset; // 0x10
	public Stream stream; // 0x14
}

// Namespace: System.Reflection.Emit
internal struct MonoWin32Resource // TypeDefIndex: 295
{
	// Fields
	public int res_type; // 0x0
	public int res_id; // 0x4
	public int lang_id; // 0x8
	public byte[] data; // 0xC
}

// Namespace: System.Reflection.Emit
[ComDefaultInterfaceAttribute] // RVA: 0x95854 Offset: 0x95854 VA: 0x95854
[ClassInterfaceAttribute] // RVA: 0x95854 Offset: 0x95854 VA: 0x95854
[ComVisibleAttribute] // RVA: 0x95854 Offset: 0x95854 VA: 0x95854
public sealed class AssemblyBuilder : Assembly, _AssemblyBuilder // TypeDefIndex: 296
{
	// Fields
	private UIntPtr dynamic_assembly; // 0x30
	private MethodInfo entry_point; // 0x34
	private ModuleBuilder[] modules; // 0x38
	private string name; // 0x3C
	private string dir; // 0x40
	private CustomAttributeBuilder[] cattrs; // 0x44
	private MonoResource[] resources; // 0x48
	private byte[] public_key; // 0x4C
	private string version; // 0x50
	private string culture; // 0x54
	private uint algid; // 0x58
	private uint flags; // 0x5C
	private PEFileKinds pekind; // 0x60
	private bool delay_sign; // 0x64
	private uint access; // 0x68
	private Module[] loaded_modules; // 0x6C
	private MonoWin32Resource[] win32_resources; // 0x70
	private RefEmitPermissionSet[] permissions_minimum; // 0x74
	private RefEmitPermissionSet[] permissions_optional; // 0x78
	private RefEmitPermissionSet[] permissions_refused; // 0x7C
	private PortableExecutableKinds peKind; // 0x80
	private ImageFileMachine machine; // 0x84
	private bool corlib_internal; // 0x88
	private Type[] type_forwarders; // 0x8C
	private byte[] pktoken; // 0x90
	internal Type corlib_object_type; // 0x94
	internal Type corlib_value_type; // 0x98
	internal Type corlib_enum_type; // 0x9C
	internal Type corlib_void_type; // 0xA0
	private ArrayList resource_writers; // 0xA4
	private Win32VersionResource version_res; // 0xA8
	private bool created; // 0xAC
	private bool is_module_only; // 0xAD
	private StrongName sn; // 0xB0
	private NativeResourceType native_resource; // 0xB4
	private readonly bool is_compiler_context; // 0xB8
	private string versioninfo_culture; // 0xBC
	private ModuleBuilder manifest_module; // 0xC0

	// Properties
	public override string Location { get; }
	internal bool IsCompilerContext { get; }
	internal bool IsSave { get; }
	internal bool IsRun { get; }
	internal string AssemblyDir { get; }

	// Methods

	// RVA: 0x27FF3C Offset: 0x27FF3C VA: 0x27FF3C
	internal void .ctor(AssemblyName n, string directory, AssemblyBuilderAccess access, bool corlib_internal) { }

	// RVA: 0x280698 Offset: 0x280698 VA: 0x280698
	private static void basic_init(AssemblyBuilder ab) { }

	// RVA: 0x28069C Offset: 0x28069C VA: 0x28069C Slot: 7
	public override string get_Location() { }

	// RVA: 0x280784 Offset: 0x280784 VA: 0x280784
	public ModuleBuilder DefineDynamicModule(string name, bool emitSymbolInfo) { }

	// RVA: 0x2807AC Offset: 0x2807AC VA: 0x2807AC
	private ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo, bool transient) { }

	// RVA: 0x2819E4 Offset: 0x2819E4 VA: 0x2819E4 Slot: 19
	internal override Module[] GetModulesInternal() { }

	// RVA: 0x281B00 Offset: 0x281B00 VA: 0x281B00 Slot: 10
	internal override Type[] GetTypes(bool exportedOnly) { }

	// RVA: 0x281DE0 Offset: 0x281DE0 VA: 0x281DE0
	internal bool get_IsCompilerContext() { }

	// RVA: 0x280684 Offset: 0x280684 VA: 0x280684
	internal bool get_IsSave() { }

	// RVA: 0x281DE8 Offset: 0x281DE8 VA: 0x281DE8
	internal bool get_IsRun() { }

	// RVA: 0x281E00 Offset: 0x281E00 VA: 0x281E00
	internal string get_AssemblyDir() { }

	// RVA: 0x280704 Offset: 0x280704 VA: 0x280704
	private Exception not_supported() { }

	// RVA: 0x280B74 Offset: 0x280B74 VA: 0x280B74
	private void check_name_and_filename(string name, string fileName, bool fileNeedsToExists) { }

	// RVA: 0x281E20 Offset: 0x281E20 VA: 0x281E20 Slot: 17
	internal override AssemblyName UnprotectedGetName() { }
}

// Namespace: System.Reflection.Emit
[FlagsAttribute] // RVA: 0x958F4 Offset: 0x958F4 VA: 0x958F4
[ComVisibleAttribute] // RVA: 0x958F4 Offset: 0x958F4 VA: 0x958F4
[Serializable]
public enum AssemblyBuilderAccess // TypeDefIndex: 297
{
	// Fields
	public int value__; // 0x0
	public const AssemblyBuilderAccess Run = 1;
	public const AssemblyBuilderAccess Save = 2;
	public const AssemblyBuilderAccess RunAndSave = 3;
	public const AssemblyBuilderAccess ReflectionOnly = 6;
}

// Namespace: System.Reflection.Emit
[ClassInterfaceAttribute] // RVA: 0x95928 Offset: 0x95928 VA: 0x95928
[ComDefaultInterfaceAttribute] // RVA: 0x95928 Offset: 0x95928 VA: 0x95928
[ComVisibleAttribute] // RVA: 0x95928 Offset: 0x95928 VA: 0x95928
public sealed class ConstructorBuilder : ConstructorInfo, _ConstructorBuilder // TypeDefIndex: 298
{
	// Fields
	private ILGenerator ilgen; // 0x8
	internal Type[] parameters; // 0xC
	private MethodAttributes attrs; // 0x10
	private MethodImplAttributes iattrs; // 0x14
	private int table_idx; // 0x18
	private CallingConventions call_conv; // 0x1C
	private TypeBuilder type; // 0x20
	internal ParameterBuilder[] pinfo; // 0x24
	private bool init_locals; // 0x28
	private Type[][] paramModReq; // 0x2C
	private Type[][] paramModOpt; // 0x30

	// Properties
	[MonoTODOAttribute] // RVA: 0x9E0B8 Offset: 0x9E0B8 VA: 0x9E0B8
	public override CallingConventions CallingConvention { get; }
	internal TypeBuilder TypeBuilder { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override MethodAttributes Attributes { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override Module Module { get; }
	private bool IsCompilerContext { get; }

	// Methods

	// RVA: 0x282124 Offset: 0x282124 VA: 0x282124
	internal void .ctor(TypeBuilder tb, MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt) { }

	// RVA: 0x28249C Offset: 0x28249C VA: 0x28249C Slot: 20
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x2824A4 Offset: 0x2824A4 VA: 0x2824A4
	internal TypeBuilder get_TypeBuilder() { }

	// RVA: 0x2824AC Offset: 0x2824AC VA: 0x2824AC Slot: 14
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x282754 Offset: 0x282754 VA: 0x282754
	internal ParameterInfo[] GetParametersInternal() { }

	// RVA: 0x282938 Offset: 0x282938 VA: 0x282938 Slot: 15
	internal override int GetParameterCount() { }

	// RVA: 0x28294C Offset: 0x28294C VA: 0x28294C Slot: 17
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x282A34 Offset: 0x282A34 VA: 0x282A34 Slot: 30
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x282A9C Offset: 0x282A9C VA: 0x282A9C Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x282B04 Offset: 0x282B04 VA: 0x282B04 Slot: 19
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x282B0C Offset: 0x282B0C VA: 0x282B0C Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x282B14 Offset: 0x282B14 VA: 0x282B14 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x282B1C Offset: 0x282B1C VA: 0x282B1C Slot: 8
	public override string get_Name() { }

	// RVA: 0x282BF0 Offset: 0x282BF0 VA: 0x282BF0 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x282C58 Offset: 0x282C58 VA: 0x282C58 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x282D38 Offset: 0x282D38 VA: 0x282D38 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x282E20 Offset: 0x282E20 VA: 0x282E20
	public ILGenerator GetILGenerator() { }

	// RVA: 0x282E28 Offset: 0x282E28 VA: 0x282E28
	public ILGenerator GetILGenerator(int streamSize) { }

	// RVA: 0x282484 Offset: 0x282484 VA: 0x282484
	public MethodToken GetToken() { }

	// RVA: 0x28315C Offset: 0x28315C VA: 0x28315C Slot: 10
	public override Module get_Module() { }

	// RVA: 0x2831A4 Offset: 0x2831A4 VA: 0x2831A4 Slot: 3
	public override string ToString() { }

	// RVA: 0x283268 Offset: 0x283268 VA: 0x283268
	internal void fixup() { }

	// RVA: 0x282434 Offset: 0x282434 VA: 0x282434 Slot: 25
	internal override int get_next_table_index(object obj, int table, bool inc) { }

	// RVA: 0x282564 Offset: 0x282564 VA: 0x282564
	private bool get_IsCompilerContext() { }

	// RVA: 0x2829B4 Offset: 0x2829B4 VA: 0x2829B4
	private Exception not_supported() { }

	// RVA: 0x2826D4 Offset: 0x2826D4 VA: 0x2826D4
	private Exception not_created() { }
}

// Namespace: System.Reflection.Emit
[ComDefaultInterfaceAttribute] // RVA: 0x959C8 Offset: 0x959C8 VA: 0x959C8
[ClassInterfaceAttribute] // RVA: 0x959C8 Offset: 0x959C8 VA: 0x959C8
[ComVisibleAttribute] // RVA: 0x959C8 Offset: 0x959C8 VA: 0x959C8
public class CustomAttributeBuilder : _CustomAttributeBuilder // TypeDefIndex: 299
{}

// Namespace: System.Reflection.Emit
internal abstract class DerivedType : Type // TypeDefIndex: 300
{
	// Fields
	internal Type elementType; // 0xC

	// Properties
	public override bool ContainsGenericParameters { get; }
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override string FullName { get; }
	public override string Name { get; }
	public override Module Module { get; }
	public override string Namespace { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override Type UnderlyingSystemType { get; }

	// Methods

	// RVA: 0x281EC0 Offset: 0x281EC0 VA: 0x281EC0
	internal void .ctor(Type elementType) { }

	// RVA: 0x283778 Offset: 0x283778 VA: 0x283778
	internal static void create_unmanaged_type(Type type) { }

	// RVA: -1 Offset: -1 Slot: 84
	internal abstract string FormatName(string elementName);

	// RVA: 0x28377C Offset: 0x28377C VA: 0x28377C Slot: 40
	public override Type[] GetInterfaces() { }

	// RVA: 0x283804 Offset: 0x283804 VA: 0x283804 Slot: 44
	public override Type GetElementType() { }

	// RVA: 0x28380C Offset: 0x28380C VA: 0x28380C Slot: 45
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x283894 Offset: 0x283894 VA: 0x283894 Slot: 46
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x28391C Offset: 0x28391C VA: 0x28391C Slot: 47
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x2839A4 Offset: 0x2839A4 VA: 0x2839A4 Slot: 53
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x283A2C Offset: 0x283A2C VA: 0x283A2C Slot: 54
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x283AB4 Offset: 0x283AB4 VA: 0x283AB4 Slot: 60
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x283B3C Offset: 0x283B3C VA: 0x283B3C Slot: 61
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x283BC4 Offset: 0x283BC4 VA: 0x283BC4 Slot: 62
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x283BF0 Offset: 0x283BF0 VA: 0x283BF0 Slot: 63
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x283BF8 Offset: 0x283BF8 VA: 0x283BF8 Slot: 64
	protected override bool IsArrayImpl() { }

	// RVA: 0x283C00 Offset: 0x283C00 VA: 0x283C00 Slot: 65
	protected override bool IsByRefImpl() { }

	// RVA: 0x283C08 Offset: 0x283C08 VA: 0x283C08 Slot: 66
	protected override bool IsPointerImpl() { }

	// RVA: 0x283C10 Offset: 0x283C10 VA: 0x283C10 Slot: 67
	protected override bool IsPrimitiveImpl() { }

	// RVA: 0x283C18 Offset: 0x283C18 VA: 0x283C18 Slot: 74
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x283CA0 Offset: 0x283CA0 VA: 0x283CA0 Slot: 75
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x283D28 Offset: 0x283D28 VA: 0x283D28 Slot: 42
	public override bool IsInstanceOfType(object o) { }

	// RVA: 0x283D30 Offset: 0x283D30 VA: 0x283D30 Slot: 41
	public override bool IsAssignableFrom(Type c) { }

	// RVA: 0x283D38 Offset: 0x283D38 VA: 0x283D38 Slot: 77
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x283D6C Offset: 0x283D6C VA: 0x283D6C Slot: 81
	public override Type MakeGenericType(Type[] typeArguments) { }

	// RVA: 0x283DF4 Offset: 0x283DF4 VA: 0x283DF4 Slot: 83
	public override Type MakeByRefType() { }

	// RVA: 0x283E64 Offset: 0x283E64 VA: 0x283E64 Slot: 3
	public override string ToString() { }

	// RVA: 0x283EB4 Offset: 0x283EB4 VA: 0x283EB4 Slot: 14
	public override Assembly get_Assembly() { }

	// RVA: 0x283EE8 Offset: 0x283EE8 VA: 0x283EE8 Slot: 15
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x284028 Offset: 0x284028 VA: 0x284028 Slot: 18
	public override string get_FullName() { }

	// RVA: 0x284078 Offset: 0x284078 VA: 0x284078 Slot: 8
	public override string get_Name() { }

	// RVA: 0x2840C8 Offset: 0x2840C8 VA: 0x2840C8 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x2840FC Offset: 0x2840FC VA: 0x2840FC Slot: 34
	public override string get_Namespace() { }

	// RVA: 0x284130 Offset: 0x284130 VA: 0x284130 Slot: 35
	public override RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x2841B8 Offset: 0x2841B8 VA: 0x2841B8 Slot: 36
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x2841D0 Offset: 0x2841D0 VA: 0x2841D0 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x284258 Offset: 0x284258 VA: 0x284258 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x2842E0 Offset: 0x2842E0 VA: 0x2842E0 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }
}

// Namespace: System.Reflection.Emit
internal class ByRefType : DerivedType // TypeDefIndex: 301
{
	// Properties
	public override Type BaseType { get; }

	// Methods

	// RVA: 0x281EBC Offset: 0x281EBC VA: 0x281EBC
	internal void .ctor(Type elementType) { }

	// RVA: 0x281F4C Offset: 0x281F4C VA: 0x281F4C Slot: 65
	protected override bool IsByRefImpl() { }

	// RVA: 0x281F54 Offset: 0x281F54 VA: 0x281F54 Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x281FE4 Offset: 0x281FE4 VA: 0x281FE4 Slot: 84
	internal override string FormatName(string elementName) { }

	// RVA: 0x282088 Offset: 0x282088 VA: 0x282088 Slot: 83
	public override Type MakeByRefType() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0x95A68 Offset: 0x95A68 VA: 0x95A68
public sealed class DynamicMethod : MethodInfo // TypeDefIndex: 302
{
	// Fields
	private RuntimeMethodHandle mhandle; // 0x8
	private string name; // 0xC
	private Type returnType; // 0x10
	private Type[] parameters; // 0x14
	private MethodAttributes attributes; // 0x18
	private CallingConventions callingConvention; // 0x1C
	private Module module; // 0x20
	private bool skipVisibility; // 0x24
	private bool init_locals; // 0x25
	private ILGenerator ilgen; // 0x28
	private int nrefs; // 0x2C
	private object[] refs; // 0x30
	private IntPtr referenced_by; // 0x34
	private Type owner; // 0x38
	private Delegate deleg; // 0x3C
	private MonoMethod method; // 0x40
	private ParameterBuilder[] pinfo; // 0x44
	internal bool creating; // 0x48

	// Properties
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override Type DeclaringType { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override Module Module { get; }
	public override string Name { get; }
	public override Type ReflectedType { get; }
	public override Type ReturnType { get; }

	// Methods

	// RVA: 0x284368 Offset: 0x284368 VA: 0x284368
	private void create_dynamic_method(DynamicMethod m) { }

	// RVA: 0x2843E8 Offset: 0x2843E8 VA: 0x2843E8
	private void destroy_dynamic_method(DynamicMethod m) { }

	// RVA: 0x284468 Offset: 0x284468 VA: 0x284468
	private void CreateDynMethod() { }

	// RVA: 0x2847C0 Offset: 0x2847C0 VA: 0x2847C0 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x284828 Offset: 0x284828 VA: 0x284828 Slot: 30
	public override MethodInfo GetBaseDefinition() { }

	[MonoTODOAttribute] // RVA: 0x9C4D8 Offset: 0x9C4D8 VA: 0x9C4D8
	// RVA: 0x28482C Offset: 0x28482C VA: 0x28482C Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	[MonoTODOAttribute] // RVA: 0x9C50C Offset: 0x9C50C VA: 0x9C50C
	// RVA: 0x2848B4 Offset: 0x2848B4 VA: 0x2848B4 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x28493C Offset: 0x28493C VA: 0x28493C Slot: 14
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x284B20 Offset: 0x284B20 VA: 0x284B20 Slot: 17
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	[MonoTODOAttribute] // RVA: 0x9C540 Offset: 0x9C540 VA: 0x9C540
	// RVA: 0x284D68 Offset: 0x284D68 VA: 0x284D68 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x284DF0 Offset: 0x284DF0 VA: 0x284DF0 Slot: 3
	public override string ToString() { }

	// RVA: 0x2852AC Offset: 0x2852AC VA: 0x2852AC Slot: 19
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x2852B4 Offset: 0x2852B4 VA: 0x2852B4 Slot: 20
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x2852BC Offset: 0x2852BC VA: 0x2852BC Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x2852C4 Offset: 0x2852C4 VA: 0x2852C4 Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x2852CC Offset: 0x2852CC VA: 0x2852CC Slot: 10
	public override Module get_Module() { }

	// RVA: 0x2852A4 Offset: 0x2852A4 VA: 0x2852A4 Slot: 8
	public override string get_Name() { }

	// RVA: 0x2852D4 Offset: 0x2852D4 VA: 0x2852D4 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x28529C Offset: 0x28529C VA: 0x28529C Slot: 31
	public override Type get_ReturnType() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0x95A7C Offset: 0x95A7C VA: 0x95A7C
[ComDefaultInterfaceAttribute] // RVA: 0x95A7C Offset: 0x95A7C VA: 0x95A7C
[ClassInterfaceAttribute] // RVA: 0x95A7C Offset: 0x95A7C VA: 0x95A7C
public sealed class EnumBuilder : Type, _EnumBuilder // TypeDefIndex: 303
{
	// Fields
	private TypeBuilder _tb; // 0xC
	private Type _underlyingType; // 0x10

	// Properties
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override Type DeclaringType { get; }
	public override string FullName { get; }
	public override Module Module { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override Type ReflectedType { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override Type UnderlyingSystemType { get; }

	// Methods

	// RVA: 0x2852DC Offset: 0x2852DC VA: 0x2852DC Slot: 14
	public override Assembly get_Assembly() { }

	// RVA: 0x285338 Offset: 0x285338 VA: 0x285338 Slot: 15
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x28543C Offset: 0x28543C VA: 0x28543C Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x285468 Offset: 0x285468 VA: 0x285468 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x285494 Offset: 0x285494 VA: 0x285494 Slot: 18
	public override string get_FullName() { }

	// RVA: 0x2854C0 Offset: 0x2854C0 VA: 0x2854C0 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x2854E4 Offset: 0x2854E4 VA: 0x2854E4 Slot: 8
	public override string get_Name() { }

	// RVA: 0x285508 Offset: 0x285508 VA: 0x285508 Slot: 34
	public override string get_Namespace() { }

	// RVA: 0x285534 Offset: 0x285534 VA: 0x285534 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x285560 Offset: 0x285560 VA: 0x285560 Slot: 35
	public override RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x2855C4 Offset: 0x2855C4 VA: 0x2855C4 Slot: 36
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x2855CC Offset: 0x2855CC VA: 0x2855CC Slot: 62
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x2855F0 Offset: 0x2855F0 VA: 0x2855F0 Slot: 61
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0x9C574 Offset: 0x9C574 VA: 0x9C574
	// RVA: 0x285650 Offset: 0x285650 VA: 0x285650 Slot: 74
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x285754 Offset: 0x285754 VA: 0x285754 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x2857C8 Offset: 0x2857C8 VA: 0x2857C8 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x28584C Offset: 0x28584C VA: 0x28584C Slot: 44
	public override Type GetElementType() { }

	// RVA: 0x2858F0 Offset: 0x2858F0 VA: 0x2858F0 Slot: 45
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x285974 Offset: 0x285974 VA: 0x285974 Slot: 46
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x285B38 Offset: 0x285B38 VA: 0x285B38 Slot: 47
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x285D58 Offset: 0x285D58 VA: 0x285D58 Slot: 40
	public override Type[] GetInterfaces() { }

	// RVA: 0x285E88 Offset: 0x285E88 VA: 0x285E88 Slot: 53
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x285F08 Offset: 0x285F08 VA: 0x285F08 Slot: 54
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x285F6C Offset: 0x285F6C VA: 0x285F6C Slot: 60
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x286054 Offset: 0x286054 VA: 0x286054 Slot: 63
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x286080 Offset: 0x286080 VA: 0x286080 Slot: 75
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x28618C Offset: 0x28618C VA: 0x28618C Slot: 64
	protected override bool IsArrayImpl() { }

	// RVA: 0x286194 Offset: 0x286194 VA: 0x286194 Slot: 65
	protected override bool IsByRefImpl() { }

	// RVA: 0x28619C Offset: 0x28619C VA: 0x28619C Slot: 66
	protected override bool IsPointerImpl() { }

	// RVA: 0x2861A4 Offset: 0x2861A4 VA: 0x2861A4 Slot: 67
	protected override bool IsPrimitiveImpl() { }

	// RVA: 0x2861AC Offset: 0x2861AC VA: 0x2861AC Slot: 68
	protected override bool IsValueTypeImpl() { }

	// RVA: 0x2861B4 Offset: 0x2861B4 VA: 0x2861B4 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x2862E0 Offset: 0x2862E0 VA: 0x2862E0 Slot: 83
	public override Type MakeByRefType() { }

	// RVA: 0x285FD4 Offset: 0x285FD4 VA: 0x285FD4
	private Exception CreateNotSupportedException() { }
}

// Namespace: System.Reflection.Emit
[ClassInterfaceAttribute] // RVA: 0x95B1C Offset: 0x95B1C VA: 0x95B1C
[ComVisibleAttribute] // RVA: 0x95B1C Offset: 0x95B1C VA: 0x95B1C
[ComDefaultInterfaceAttribute] // RVA: 0x95B1C Offset: 0x95B1C VA: 0x95B1C
public sealed class EventBuilder : _EventBuilder // TypeDefIndex: 304
{}

// Namespace: System.Reflection.Emit
[ComDefaultInterfaceAttribute] // RVA: 0x95BBC Offset: 0x95BBC VA: 0x95BBC
[ComVisibleAttribute] // RVA: 0x95BBC Offset: 0x95BBC VA: 0x95BBC
[ClassInterfaceAttribute] // RVA: 0x95BBC Offset: 0x95BBC VA: 0x95BBC
public sealed class FieldBuilder : FieldInfo, _FieldBuilder // TypeDefIndex: 305
{
	// Fields
	private FieldAttributes attrs; // 0x8
	private Type type; // 0xC
	private string name; // 0x10
	internal TypeBuilder typeb; // 0x14
	private UnmanagedMarshal marshal_info; // 0x18

	// Properties
	public override FieldAttributes Attributes { get; }
	public override Type DeclaringType { get; }
	public override RuntimeFieldHandle FieldHandle { get; }
	public override Type FieldType { get; }
	public override string Name { get; }
	public override Type ReflectedType { get; }
	internal override UnmanagedMarshal UMarshal { get; }
	public override Module Module { get; }

	// Methods

	// RVA: 0x286350 Offset: 0x286350 VA: 0x286350 Slot: 14
	public override FieldAttributes get_Attributes() { }

	// RVA: 0x286358 Offset: 0x286358 VA: 0x286358 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x286360 Offset: 0x286360 VA: 0x286360 Slot: 15
	public override RuntimeFieldHandle get_FieldHandle() { }

	// RVA: 0x286448 Offset: 0x286448 VA: 0x286448 Slot: 16
	public override Type get_FieldType() { }

	// RVA: 0x286450 Offset: 0x286450 VA: 0x286450 Slot: 8
	public override string get_Name() { }

	// RVA: 0x286458 Offset: 0x286458 VA: 0x286458 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x286460 Offset: 0x286460 VA: 0x286460 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x286530 Offset: 0x286530 VA: 0x286530 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x286608 Offset: 0x286608 VA: 0x286608 Slot: 17
	public override object GetValue(object obj) { }

	// RVA: 0x286670 Offset: 0x286670 VA: 0x286670 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x2866D8 Offset: 0x2866D8 VA: 0x2866D8 Slot: 24
	internal override int GetFieldOffset() { }

	// RVA: 0x2866E0 Offset: 0x2866E0 VA: 0x2866E0 Slot: 22
	public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }

	// RVA: 0x286748 Offset: 0x286748 VA: 0x286748 Slot: 25
	internal override UnmanagedMarshal get_UMarshal() { }

	// RVA: 0x2863C8 Offset: 0x2863C8 VA: 0x2863C8
	private Exception CreateNotSupportedException() { }

	// RVA: 0x286750 Offset: 0x286750 VA: 0x286750 Slot: 10
	public override Module get_Module() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0x95C5C Offset: 0x95C5C VA: 0x95C5C
public sealed class GenericTypeParameterBuilder : Type // TypeDefIndex: 306
{
	// Fields
	private TypeBuilder tbuilder; // 0xC
	private MethodBuilder mbuilder; // 0x10
	private string name; // 0x14
	private Type base_type; // 0x18

	// Properties
	public override Type UnderlyingSystemType { get; }
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override string FullName { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override Module Module { get; }
	public override Type DeclaringType { get; }
	public override Type ReflectedType { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override bool ContainsGenericParameters { get; }
	public override bool IsGenericParameter { get; }
	public override bool IsGenericType { get; }
	public override bool IsGenericTypeDefinition { get; }

	// Methods

	[ComVisibleAttribute] // RVA: 0x9C588 Offset: 0x9C588 VA: 0x9C588
	// RVA: 0x286754 Offset: 0x286754 VA: 0x286754 Slot: 39
	public override bool IsSubclassOf(Type c) { }

	// RVA: 0x2869C4 Offset: 0x2869C4 VA: 0x2869C4 Slot: 62
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x286B84 Offset: 0x286B84 VA: 0x286B84 Slot: 61
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0x9C59C Offset: 0x9C59C VA: 0x9C59C
	// RVA: 0x286BEC Offset: 0x286BEC VA: 0x286BEC Slot: 74
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x286C54 Offset: 0x286C54 VA: 0x286C54 Slot: 45
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x286CBC Offset: 0x286CBC VA: 0x286CBC Slot: 46
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x286D24 Offset: 0x286D24 VA: 0x286D24 Slot: 47
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x286D8C Offset: 0x286D8C VA: 0x286D8C Slot: 40
	public override Type[] GetInterfaces() { }

	// RVA: 0x286DF4 Offset: 0x286DF4 VA: 0x286DF4 Slot: 54
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x286E5C Offset: 0x286E5C VA: 0x286E5C Slot: 53
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x286EC4 Offset: 0x286EC4 VA: 0x286EC4 Slot: 60
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x286F2C Offset: 0x286F2C VA: 0x286F2C Slot: 63
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x286F34 Offset: 0x286F34 VA: 0x286F34 Slot: 41
	public override bool IsAssignableFrom(Type c) { }

	// RVA: 0x286F9C Offset: 0x286F9C VA: 0x286F9C Slot: 42
	public override bool IsInstanceOfType(object o) { }

	// RVA: 0x287004 Offset: 0x287004 VA: 0x287004 Slot: 64
	protected override bool IsArrayImpl() { }

	// RVA: 0x28700C Offset: 0x28700C VA: 0x28700C Slot: 65
	protected override bool IsByRefImpl() { }

	// RVA: 0x287014 Offset: 0x287014 VA: 0x287014 Slot: 66
	protected override bool IsPointerImpl() { }

	// RVA: 0x28701C Offset: 0x28701C VA: 0x28701C Slot: 67
	protected override bool IsPrimitiveImpl() { }

	// RVA: 0x287024 Offset: 0x287024 VA: 0x287024 Slot: 68
	protected override bool IsValueTypeImpl() { }

	// RVA: 0x28703C Offset: 0x28703C VA: 0x28703C Slot: 75
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x2870A4 Offset: 0x2870A4 VA: 0x2870A4 Slot: 44
	public override Type GetElementType() { }

	// RVA: 0x28710C Offset: 0x28710C VA: 0x28710C Slot: 36
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x287110 Offset: 0x287110 VA: 0x287110 Slot: 14
	public override Assembly get_Assembly() { }

	// RVA: 0x287148 Offset: 0x287148 VA: 0x287148 Slot: 15
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x2869BC Offset: 0x2869BC VA: 0x2869BC Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x287150 Offset: 0x287150 VA: 0x287150 Slot: 18
	public override string get_FullName() { }

	// RVA: 0x287158 Offset: 0x287158 VA: 0x287158 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x2871C0 Offset: 0x2871C0 VA: 0x2871C0 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x287228 Offset: 0x287228 VA: 0x287228 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x287290 Offset: 0x287290 VA: 0x287290 Slot: 8
	public override string get_Name() { }

	// RVA: 0x287298 Offset: 0x287298 VA: 0x287298 Slot: 34
	public override string get_Namespace() { }

	// RVA: 0x2872A0 Offset: 0x2872A0 VA: 0x2872A0 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x2872C4 Offset: 0x2872C4 VA: 0x2872C4 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x2872E4 Offset: 0x2872E4 VA: 0x2872E4 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x2872FC Offset: 0x2872FC VA: 0x2872FC Slot: 35
	public override RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x287364 Offset: 0x287364 VA: 0x287364 Slot: 76
	public override Type[] GetGenericArguments() { }

	// RVA: 0x2873EC Offset: 0x2873EC VA: 0x2873EC Slot: 79
	public override Type GetGenericTypeDefinition() { }

	// RVA: 0x287474 Offset: 0x287474 VA: 0x287474 Slot: 77
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x28747C Offset: 0x28747C VA: 0x28747C Slot: 82
	public override bool get_IsGenericParameter() { }

	// RVA: 0x287484 Offset: 0x287484 VA: 0x287484 Slot: 80
	public override bool get_IsGenericType() { }

	// RVA: 0x28748C Offset: 0x28748C VA: 0x28748C Slot: 78
	public override bool get_IsGenericTypeDefinition() { }

	// RVA: 0x286950 Offset: 0x286950 VA: 0x286950
	private Exception not_supported() { }

	// RVA: 0x287494 Offset: 0x287494 VA: 0x287494 Slot: 3
	public override string ToString() { }

	[MonoTODOAttribute] // RVA: 0x9C5B0 Offset: 0x9C5B0 VA: 0x9C5B0
	// RVA: 0x28749C Offset: 0x28749C VA: 0x28749C Slot: 0
	public override bool Equals(object o) { }

	[MonoTODOAttribute] // RVA: 0x9C5C0 Offset: 0x9C5C0 VA: 0x9C5C0
	// RVA: 0x2874A4 Offset: 0x2874A4 VA: 0x2874A4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2874AC Offset: 0x2874AC VA: 0x2874AC Slot: 83
	public override Type MakeByRefType() { }

	[MonoTODOAttribute] // RVA: 0x9C5D0 Offset: 0x9C5D0 VA: 0x9C5D0
	// RVA: 0x28751C Offset: 0x28751C VA: 0x28751C Slot: 81
	public override Type MakeGenericType(Type[] typeArguments) { }
}

// Namespace: System.Reflection.Emit
internal struct ILTokenInfo // TypeDefIndex: 307
{
	// Fields
	public MemberInfo member; // 0x0
	public int code_pos; // 0x4
}

// Namespace: System.Reflection.Emit
internal interface TokenGenerator // TypeDefIndex: 308
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int GetToken(string str);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int GetToken(MemberInfo member);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int GetToken(MethodInfo method, Type[] opt_param_types);
}

// Namespace: System.Reflection.Emit
[ComDefaultInterfaceAttribute] // RVA: 0x95C70 Offset: 0x95C70 VA: 0x95C70
[ClassInterfaceAttribute] // RVA: 0x95C70 Offset: 0x95C70 VA: 0x95C70
[ComVisibleAttribute] // RVA: 0x95C70 Offset: 0x95C70 VA: 0x95C70
public class ILGenerator : _ILGenerator // TypeDefIndex: 309
{
	// Fields
	private static readonly Type void_type; // 0x0
	private byte[] code; // 0x8
	private int code_len; // 0xC
	private int max_stack; // 0x10
	private int cur_stack; // 0x14
	private LocalBuilder[] locals; // 0x18
	private int num_token_fixups; // 0x1C
	private ILTokenInfo[] token_fixups; // 0x20
	private ILGenerator.LabelData[] labels; // 0x24
	private int num_labels; // 0x28
	private ILGenerator.LabelFixup[] fixups; // 0x2C
	private int num_fixups; // 0x30
	internal Module module; // 0x34
	private TokenGenerator token_gen; // 0x38

	// Methods

	// RVA: 0x2830A8 Offset: 0x2830A8 VA: 0x2830A8
	internal void .ctor(Module m, TokenGenerator token_gen, int size) { }

	// RVA: 0x287524 Offset: 0x287524 VA: 0x287524
	private static void .cctor() { }

	// RVA: 0x2875CC Offset: 0x2875CC VA: 0x2875CC
	private void add_token_fixup(MemberInfo mi) { }

	// RVA: 0x287714 Offset: 0x287714 VA: 0x287714
	private void make_room(int nbytes) { }

	// RVA: 0x2877F4 Offset: 0x2877F4 VA: 0x2877F4
	private void emit_int(int val) { }

	// RVA: 0x287924 Offset: 0x287924 VA: 0x287924
	private void ll_emit(OpCode opcode) { }

	// RVA: 0x287A94 Offset: 0x287A94 VA: 0x287A94
	private static int target_len(OpCode opcode) { }

	// RVA: 0x287AAC Offset: 0x287AAC VA: 0x287AAC Slot: 4
	public virtual LocalBuilder DeclareLocal(Type localType) { }

	// RVA: 0x287AC0 Offset: 0x287AC0 VA: 0x287AC0 Slot: 5
	public virtual LocalBuilder DeclareLocal(Type localType, bool pinned) { }

	// RVA: 0x287D90 Offset: 0x287D90 VA: 0x287D90 Slot: 6
	public virtual Label DefineLabel() { }

	// RVA: 0x287ECC Offset: 0x287ECC VA: 0x287ECC Slot: 7
	public virtual void Emit(OpCode opcode) { }

	// RVA: 0x287EFC Offset: 0x287EFC VA: 0x287EFC Slot: 8
	public virtual void Emit(OpCode opcode, byte arg) { }

	[ComVisibleAttribute] // RVA: 0x9C5E0 Offset: 0x9C5E0 VA: 0x9C5E0
	// RVA: 0x287F74 Offset: 0x287F74 VA: 0x287F74 Slot: 9
	public virtual void Emit(OpCode opcode, ConstructorInfo con) { }

	// RVA: 0x288120 Offset: 0x288120 VA: 0x288120 Slot: 10
	public virtual void Emit(OpCode opcode, FieldInfo field) { }

	// RVA: 0x2882A0 Offset: 0x2882A0 VA: 0x2882A0 Slot: 11
	public virtual void Emit(OpCode opcode, int arg) { }

	// RVA: 0x2882E0 Offset: 0x2882E0 VA: 0x2882E0 Slot: 12
	public virtual void Emit(OpCode opcode, Label label) { }

	// RVA: 0x28857C Offset: 0x28857C VA: 0x28857C Slot: 13
	public virtual void Emit(OpCode opcode, LocalBuilder local) { }

	// RVA: 0x288A1C Offset: 0x288A1C VA: 0x288A1C Slot: 14
	public virtual void Emit(OpCode opcode, MethodInfo meth) { }

	// RVA: 0x288E0C Offset: 0x288E0C VA: 0x288E0C
	private void Emit(OpCode opcode, MethodInfo method, int token) { }

	// RVA: 0x288F7C Offset: 0x288F7C VA: 0x288F7C Slot: 15
	public virtual void Emit(OpCode opcode, string str) { }

	// RVA: 0x289098 Offset: 0x289098 VA: 0x289098 Slot: 16
	public virtual void Emit(OpCode opcode, Type cls) { }

	[MonoLimitationAttribute] // RVA: 0x9C5F4 Offset: 0x9C5F4 VA: 0x9C5F4
	// RVA: 0x2891A8 Offset: 0x2891A8 VA: 0x2891A8 Slot: 17
	public virtual void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes) { }

	// RVA: 0x289518 Offset: 0x289518 VA: 0x289518 Slot: 18
	public virtual void MarkLabel(Label loc) { }

	// RVA: 0x2833F8 Offset: 0x2833F8 VA: 0x2833F8
	internal void label_fixup() { }

	[ObsoleteAttribute] // RVA: 0x9C644 Offset: 0x9C644 VA: 0x9C644
	// RVA: 0x2833D4 Offset: 0x2833D4 VA: 0x2833D4
	internal static int Mono_GetCurrentOffset(ILGenerator ig) { }
}

// Namespace: 
private struct ILGenerator.LabelFixup // TypeDefIndex: 310
{
	// Fields
	public int offset; // 0x0
	public int pos; // 0x4
	public int label_idx; // 0x8
}

// Namespace: 
private struct ILGenerator.LabelData // TypeDefIndex: 311
{
	// Fields
	public int addr; // 0x0
	public int maxStack; // 0x4

	// Methods

	// RVA: 0xC7598 Offset: 0xC7598 VA: 0xC7598
	public void .ctor(int addr, int maxStack) { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0x95D10 Offset: 0x95D10 VA: 0x95D10
[Serializable]
public struct Label // TypeDefIndex: 312
{
	// Fields
	internal int label; // 0x0

	// Methods

	// RVA: 0xC7600 Offset: 0xC7600 VA: 0xC7600
	internal void .ctor(int val) { }

	// RVA: 0xC7608 Offset: 0xC7608 VA: 0xC7608 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xC7610 Offset: 0xC7610 VA: 0xC7610 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection.Emit
[ClassInterfaceAttribute] // RVA: 0x95D24 Offset: 0x95D24 VA: 0x95D24
[ComVisibleAttribute] // RVA: 0x95D24 Offset: 0x95D24 VA: 0x95D24
[ComDefaultInterfaceAttribute] // RVA: 0x95D24 Offset: 0x95D24 VA: 0x95D24
public sealed class LocalBuilder : LocalVariableInfo, _LocalBuilder // TypeDefIndex: 313
{
	// Fields
	internal ILGenerator ilgen; // 0x10

	// Methods

	// RVA: 0x287D68 Offset: 0x287D68 VA: 0x287D68
	internal void .ctor(Type t, ILGenerator ilgen) { }
}

// Namespace: System.Reflection.Emit
[ClassInterfaceAttribute] // RVA: 0x95DC4 Offset: 0x95DC4 VA: 0x95DC4
[ComVisibleAttribute] // RVA: 0x95DC4 Offset: 0x95DC4 VA: 0x95DC4
[ComDefaultInterfaceAttribute] // RVA: 0x95DC4 Offset: 0x95DC4 VA: 0x95DC4
public sealed class MethodBuilder : MethodInfo, _MethodBuilder // TypeDefIndex: 314
{
	// Fields
	private RuntimeMethodHandle mhandle; // 0x8
	private Type rtype; // 0xC
	internal Type[] parameters; // 0x10
	private MethodAttributes attrs; // 0x14
	private MethodImplAttributes iattrs; // 0x18
	private string name; // 0x1C
	private int table_idx; // 0x20
	private byte[] code; // 0x24
	private ILGenerator ilgen; // 0x28
	private TypeBuilder type; // 0x2C
	internal ParameterBuilder[] pinfo; // 0x30
	private CustomAttributeBuilder[] cattrs; // 0x34
	private MethodInfo override_method; // 0x38
	private string pi_dll; // 0x3C
	private string pi_entry; // 0x40
	private CharSet charset; // 0x44
	private uint extra_flags; // 0x48
	private CallingConvention native_cc; // 0x4C
	private CallingConventions call_conv; // 0x50
	private bool init_locals; // 0x54
	private IntPtr generic_container; // 0x58
	internal GenericTypeParameterBuilder[] generic_params; // 0x5C
	private Type[] returnModReq; // 0x60
	private Type[] returnModOpt; // 0x64
	private Type[][] paramModReq; // 0x68
	private Type[][] paramModOpt; // 0x6C
	private RefEmitPermissionSet[] permissions; // 0x70

	// Properties
	public override bool ContainsGenericParameters { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override Type ReturnType { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override bool IsGenericMethodDefinition { get; }
	public override bool IsGenericMethod { get; }
	public override Module Module { get; }

	// Methods

	// RVA: 0x2897B8 Offset: 0x2897B8 VA: 0x2897B8
	internal void .ctor(TypeBuilder tb, string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnModReq, Type[] returnModOpt, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt) { }

	// RVA: 0x289B20 Offset: 0x289B20 VA: 0x289B20 Slot: 27
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x289BA8 Offset: 0x289BA8 VA: 0x289BA8 Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x289C90 Offset: 0x289C90 VA: 0x289C90 Slot: 31
	public override Type get_ReturnType() { }

	// RVA: 0x289C98 Offset: 0x289C98 VA: 0x289C98 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x2872DC Offset: 0x2872DC VA: 0x2872DC Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x289CA0 Offset: 0x289CA0 VA: 0x289CA0 Slot: 8
	public override string get_Name() { }

	// RVA: 0x289CA8 Offset: 0x289CA8 VA: 0x289CA8 Slot: 19
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x289CB0 Offset: 0x289CB0 VA: 0x289CB0 Slot: 20
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x289B14 Offset: 0x289B14 VA: 0x289B14
	public MethodToken GetToken() { }

	// RVA: 0x289CB8 Offset: 0x289CB8 VA: 0x289CB8 Slot: 30
	public override MethodInfo GetBaseDefinition() { }

	// RVA: 0x289CBC Offset: 0x289CBC VA: 0x289CBC Slot: 14
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x289EDC Offset: 0x289EDC VA: 0x289EDC Slot: 15
	internal override int GetParameterCount() { }

	// RVA: 0x289EF0 Offset: 0x289EF0 VA: 0x289EF0 Slot: 17
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x289F58 Offset: 0x289F58 VA: 0x289F58 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x289FC0 Offset: 0x289FC0 VA: 0x289FC0 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x28A090 Offset: 0x28A090 VA: 0x28A090 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x28A168 Offset: 0x28A168 VA: 0x28A168
	public ILGenerator GetILGenerator() { }

	// RVA: 0x28A170 Offset: 0x28A170 VA: 0x28A170
	public ILGenerator GetILGenerator(int size) { }

	// RVA: 0x28A3D0 Offset: 0x28A3D0 VA: 0x28A3D0
	internal void check_override() { }

	// RVA: 0x28A51C Offset: 0x28A51C VA: 0x28A51C
	internal void fixup() { }

	// RVA: 0x28A6B4 Offset: 0x28A6B4 VA: 0x28A6B4 Slot: 3
	public override string ToString() { }

	[MonoTODOAttribute] // RVA: 0x9C680 Offset: 0x9C680 VA: 0x9C680
	// RVA: 0x28A964 Offset: 0x28A964 VA: 0x28A964 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x28A96C Offset: 0x28A96C VA: 0x28A96C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x289ACC Offset: 0x289ACC VA: 0x289ACC Slot: 25
	internal override int get_next_table_index(object obj, int table, bool inc) { }

	// RVA: 0x28A998 Offset: 0x28A998 VA: 0x28A998
	internal void set_override(MethodInfo mdecl) { }

	// RVA: 0x289C10 Offset: 0x289C10 VA: 0x289C10
	private Exception NotSupported() { }

	// RVA: 0x28A9A0 Offset: 0x28A9A0 VA: 0x28A9A0 Slot: 32
	public override MethodInfo MakeGenericMethod(Type[] typeArguments) { }

	// RVA: 0x28A9A4 Offset: 0x28A9A4 VA: 0x28A9A4 Slot: 28
	public override bool get_IsGenericMethodDefinition() { }

	// RVA: 0x28A9B4 Offset: 0x28A9B4 VA: 0x28A9B4 Slot: 29
	public override bool get_IsGenericMethod() { }

	// RVA: 0x28A9C4 Offset: 0x28A9C4 VA: 0x28A9C4 Slot: 26
	public override Type[] GetGenericArguments() { }

	// RVA: 0x28AB48 Offset: 0x28AB48 VA: 0x28AB48 Slot: 10
	public override Module get_Module() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0x95E64 Offset: 0x95E64 VA: 0x95E64
[Serializable]
public struct MethodToken // TypeDefIndex: 315
{
	// Fields
	internal int tokValue; // 0x0
	public static readonly MethodToken Empty; // 0x0

	// Properties
	public int Token { get; }

	// Methods

	// RVA: 0xC761C Offset: 0xC761C VA: 0xC761C
	internal void .ctor(int val) { }

	// RVA: 0x28AB4C Offset: 0x28AB4C VA: 0x28AB4C
	private static void .cctor() { }

	// RVA: 0xC7624 Offset: 0xC7624 VA: 0xC7624 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xC762C Offset: 0xC762C VA: 0xC762C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xC7634 Offset: 0xC7634 VA: 0xC7634
	public int get_Token() { }
}

// Namespace: System.Reflection.Emit
[ComDefaultInterfaceAttribute] // RVA: 0x95E78 Offset: 0x95E78 VA: 0x95E78
[ClassInterfaceAttribute] // RVA: 0x95E78 Offset: 0x95E78 VA: 0x95E78
[ComVisibleAttribute] // RVA: 0x95E78 Offset: 0x95E78 VA: 0x95E78
public class ModuleBuilder : Module, _ModuleBuilder // TypeDefIndex: 316
{
	// Fields
	private UIntPtr dynamic_image; // 0x24
	private int num_types; // 0x28
	private TypeBuilder[] types; // 0x2C
	private CustomAttributeBuilder[] cattrs; // 0x30
	private byte[] guid; // 0x34
	private int table_idx; // 0x38
	internal AssemblyBuilder assemblyb; // 0x3C
	private MethodBuilder[] global_methods; // 0x40
	private FieldBuilder[] global_fields; // 0x44
	private bool is_main; // 0x48
	private MonoResource[] resources; // 0x4C
	private TypeBuilder global_type; // 0x50
	private Type global_type_created; // 0x54
	private Hashtable name_cache; // 0x58
	private Hashtable us_string_cache; // 0x5C
	private int[] table_indexes; // 0x60
	private bool transient; // 0x64
	private ModuleBuilderTokenGenerator token_gen; // 0x68
	private Hashtable resource_writers; // 0x6C
	private ISymbolWriter symbolWriter; // 0x70
	private static readonly char[] type_modifiers; // 0x0

	// Properties
	internal string FileName { get; }

	// Methods

	// RVA: 0x2814A0 Offset: 0x2814A0 VA: 0x2814A0
	internal void .ctor(AssemblyBuilder assb, string name, string fullyqname, bool emitSymbolInfo, bool transient) { }

	// RVA: 0x28BAFC Offset: 0x28BAFC VA: 0x28BAFC
	private static void .cctor() { }

	// RVA: 0x28ADB8 Offset: 0x28ADB8 VA: 0x28ADB8
	private static void basic_init(ModuleBuilder ab) { }

	// RVA: 0x28BAF8 Offset: 0x28BAF8 VA: 0x28BAF8
	private static void set_wrappers_type(ModuleBuilder mb, Type ab) { }

	// RVA: 0x281E08 Offset: 0x281E08 VA: 0x281E08
	public bool IsTransient() { }

	// RVA: 0x28BBF4 Offset: 0x28BBF4 VA: 0x28BBF4
	public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent) { }

	// RVA: 0x28BC44 Offset: 0x28BC44 VA: 0x28BC44
	private void AddType(TypeBuilder tb) { }

	// RVA: 0x28BD84 Offset: 0x28BD84 VA: 0x28BD84
	private TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packingSize, int typesize) { }

	[ComVisibleAttribute] // RVA: 0x9C690 Offset: 0x9C690 VA: 0x9C690
	// RVA: 0x28BC1C Offset: 0x28BC1C VA: 0x28BC1C
	public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces) { }

	[ComVisibleAttribute] // RVA: 0x9C6A4 Offset: 0x9C6A4 VA: 0x9C6A4
	// RVA: 0x28C200 Offset: 0x28C200 VA: 0x28C200 Slot: 9
	public override Type GetType(string className) { }

	// RVA: 0x28C230 Offset: 0x28C230 VA: 0x28C230
	private TypeBuilder search_in_array(TypeBuilder[] arr, int validElementsInArray, string className) { }

	// RVA: 0x28C3A8 Offset: 0x28C3A8 VA: 0x28C3A8
	private TypeBuilder search_nested_in_array(TypeBuilder[] arr, int validElementsInArray, string className) { }

	// RVA: 0x28C520 Offset: 0x28C520 VA: 0x28C520
	private static Type create_modified_type(TypeBuilder tb, string modifiers) { }

	// RVA: 0x28C524 Offset: 0x28C524 VA: 0x28C524
	private TypeBuilder GetMaybeNested(TypeBuilder t, string className) { }

	[ComVisibleAttribute] // RVA: 0x9C6B8 Offset: 0x9C6B8 VA: 0x9C6B8
	// RVA: 0x28C63C Offset: 0x28C63C VA: 0x28C63C Slot: 10
	public override Type GetType(string className, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x28AC58 Offset: 0x28AC58 VA: 0x28AC58
	internal int get_next_table_index(object obj, int table, bool inc) { }

	// RVA: 0x28CA58 Offset: 0x28CA58 VA: 0x28CA58 Slot: 11
	public override Type[] GetTypes() { }

	// RVA: 0x28CC4C Offset: 0x28CC4C VA: 0x28CC4C
	private static int getUSIndex(ModuleBuilder mb, string str) { }

	// RVA: 0x28CC50 Offset: 0x28CC50 VA: 0x28CC50
	private static int getToken(ModuleBuilder mb, object obj) { }

	// RVA: 0x28CC54 Offset: 0x28CC54 VA: 0x28CC54
	private static int getMethodToken(ModuleBuilder mb, MethodInfo method, Type[] opt_param_types) { }

	// RVA: 0x28CC58 Offset: 0x28CC58 VA: 0x28CC58
	internal int GetToken(string str) { }

	// RVA: 0x28CDBC Offset: 0x28CDBC VA: 0x28CDBC
	internal int GetToken(MemberInfo member) { }

	// RVA: 0x28CE44 Offset: 0x28CE44 VA: 0x28CE44
	internal int GetToken(MethodInfo method, Type[] opt_param_types) { }

	// RVA: 0x282498 Offset: 0x282498 VA: 0x282498
	internal void RegisterToken(object obj, int token) { }

	// RVA: 0x283024 Offset: 0x283024 VA: 0x283024
	internal TokenGenerator GetTokenGenerator() { }

	// RVA: 0x281E10 Offset: 0x281E10 VA: 0x281E10
	internal string get_FileName() { }

	// RVA: 0x28ADBC Offset: 0x28ADBC VA: 0x28ADBC
	internal void CreateGlobalType() { }
}

// Namespace: System.Reflection.Emit
internal class ModuleBuilderTokenGenerator : TokenGenerator // TypeDefIndex: 317
{
	// Fields
	private ModuleBuilder mb; // 0x8

	// Methods

	// RVA: 0x28CED4 Offset: 0x28CED4 VA: 0x28CED4
	public void .ctor(ModuleBuilder mb) { }

	// RVA: 0x28CEF4 Offset: 0x28CEF4 VA: 0x28CEF4 Slot: 4
	public int GetToken(string str) { }

	// RVA: 0x28CF24 Offset: 0x28CF24 VA: 0x28CF24 Slot: 5
	public int GetToken(MemberInfo member) { }

	// RVA: 0x28CF54 Offset: 0x28CF54 VA: 0x28CF54 Slot: 6
	public int GetToken(MethodInfo method, Type[] opt_param_types) { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0x95F18 Offset: 0x95F18 VA: 0x95F18
public struct OpCode // TypeDefIndex: 318
{
	// Fields
	internal byte op1; // 0x0
	internal byte op2; // 0x1
	private byte push; // 0x2
	private byte pop; // 0x3
	private byte size; // 0x4
	private byte type; // 0x5
	private byte args; // 0x6
	private byte flow; // 0x7

	// Properties
	public string Name { get; }
	public int Size { get; }
	public OperandType OperandType { get; }
	public StackBehaviour StackBehaviourPop { get; }
	public StackBehaviour StackBehaviourPush { get; }
	public short Value { get; }

	// Methods

	// RVA: 0xC7698 Offset: 0xC7698 VA: 0xC7698
	internal void .ctor(int p, int q) { }

	// RVA: 0xC76D4 Offset: 0xC76D4 VA: 0xC76D4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xC76DC Offset: 0xC76DC VA: 0xC76DC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xC76E4 Offset: 0xC76E4 VA: 0xC76E4 Slot: 3
	public override string ToString() { }

	// RVA: 0xC76EC Offset: 0xC76EC VA: 0xC76EC
	public string get_Name() { }

	// RVA: 0xC76F4 Offset: 0xC76F4 VA: 0xC76F4
	public int get_Size() { }

	// RVA: 0xC76FC Offset: 0xC76FC VA: 0xC76FC
	public OperandType get_OperandType() { }

	// RVA: 0xC7704 Offset: 0xC7704 VA: 0xC7704
	public StackBehaviour get_StackBehaviourPop() { }

	// RVA: 0xC770C Offset: 0xC770C VA: 0xC770C
	public StackBehaviour get_StackBehaviourPush() { }

	// RVA: 0xC7714 Offset: 0xC7714 VA: 0xC7714
	public short get_Value() { }

	// RVA: 0x288DDC Offset: 0x288DDC VA: 0x288DDC
	public static bool op_Equality(OpCode a, OpCode b) { }
}

// Namespace: System.Reflection.Emit
internal class OpCodeNames // TypeDefIndex: 319
{
	// Fields
	internal static readonly string[] names; // 0x0

	// Methods

	// RVA: 0x28D1F0 Offset: 0x28D1F0 VA: 0x28D1F0
	private static void .cctor() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0x95F2C Offset: 0x95F2C VA: 0x95F2C
public class OpCodes // TypeDefIndex: 320
{
	// Fields
	public static readonly OpCode Nop; // 0x0
	public static readonly OpCode Break; // 0x8
	public static readonly OpCode Ldarg_0; // 0x10
	public static readonly OpCode Ldarg_1; // 0x18
	public static readonly OpCode Ldarg_2; // 0x20
	public static readonly OpCode Ldarg_3; // 0x28
	public static readonly OpCode Ldloc_0; // 0x30
	public static readonly OpCode Ldloc_1; // 0x38
	public static readonly OpCode Ldloc_2; // 0x40
	public static readonly OpCode Ldloc_3; // 0x48
	public static readonly OpCode Stloc_0; // 0x50
	public static readonly OpCode Stloc_1; // 0x58
	public static readonly OpCode Stloc_2; // 0x60
	public static readonly OpCode Stloc_3; // 0x68
	public static readonly OpCode Ldarg_S; // 0x70
	public static readonly OpCode Ldarga_S; // 0x78
	public static readonly OpCode Starg_S; // 0x80
	public static readonly OpCode Ldloc_S; // 0x88
	public static readonly OpCode Ldloca_S; // 0x90
	public static readonly OpCode Stloc_S; // 0x98
	public static readonly OpCode Ldnull; // 0xA0
	public static readonly OpCode Ldc_I4_M1; // 0xA8
	public static readonly OpCode Ldc_I4_0; // 0xB0
	public static readonly OpCode Ldc_I4_1; // 0xB8
	public static readonly OpCode Ldc_I4_2; // 0xC0
	public static readonly OpCode Ldc_I4_3; // 0xC8
	public static readonly OpCode Ldc_I4_4; // 0xD0
	public static readonly OpCode Ldc_I4_5; // 0xD8
	public static readonly OpCode Ldc_I4_6; // 0xE0
	public static readonly OpCode Ldc_I4_7; // 0xE8
	public static readonly OpCode Ldc_I4_8; // 0xF0
	public static readonly OpCode Ldc_I4_S; // 0xF8
	public static readonly OpCode Ldc_I4; // 0x100
	public static readonly OpCode Ldc_I8; // 0x108
	public static readonly OpCode Ldc_R4; // 0x110
	public static readonly OpCode Ldc_R8; // 0x118
	public static readonly OpCode Dup; // 0x120
	public static readonly OpCode Pop; // 0x128
	public static readonly OpCode Jmp; // 0x130
	public static readonly OpCode Call; // 0x138
	public static readonly OpCode Calli; // 0x140
	public static readonly OpCode Ret; // 0x148
	public static readonly OpCode Br_S; // 0x150
	public static readonly OpCode Brfalse_S; // 0x158
	public static readonly OpCode Brtrue_S; // 0x160
	public static readonly OpCode Beq_S; // 0x168
	public static readonly OpCode Bge_S; // 0x170
	public static readonly OpCode Bgt_S; // 0x178
	public static readonly OpCode Ble_S; // 0x180
	public static readonly OpCode Blt_S; // 0x188
	public static readonly OpCode Bne_Un_S; // 0x190
	public static readonly OpCode Bge_Un_S; // 0x198
	public static readonly OpCode Bgt_Un_S; // 0x1A0
	public static readonly OpCode Ble_Un_S; // 0x1A8
	public static readonly OpCode Blt_Un_S; // 0x1B0
	public static readonly OpCode Br; // 0x1B8
	public static readonly OpCode Brfalse; // 0x1C0
	public static readonly OpCode Brtrue; // 0x1C8
	public static readonly OpCode Beq; // 0x1D0
	public static readonly OpCode Bge; // 0x1D8
	public static readonly OpCode Bgt; // 0x1E0
	public static readonly OpCode Ble; // 0x1E8
	public static readonly OpCode Blt; // 0x1F0
	public static readonly OpCode Bne_Un; // 0x1F8
	public static readonly OpCode Bge_Un; // 0x200
	public static readonly OpCode Bgt_Un; // 0x208
	public static readonly OpCode Ble_Un; // 0x210
	public static readonly OpCode Blt_Un; // 0x218
	public static readonly OpCode Switch; // 0x220
	public static readonly OpCode Ldind_I1; // 0x228
	public static readonly OpCode Ldind_U1; // 0x230
	public static readonly OpCode Ldind_I2; // 0x238
	public static readonly OpCode Ldind_U2; // 0x240
	public static readonly OpCode Ldind_I4; // 0x248
	public static readonly OpCode Ldind_U4; // 0x250
	public static readonly OpCode Ldind_I8; // 0x258
	public static readonly OpCode Ldind_I; // 0x260
	public static readonly OpCode Ldind_R4; // 0x268
	public static readonly OpCode Ldind_R8; // 0x270
	public static readonly OpCode Ldind_Ref; // 0x278
	public static readonly OpCode Stind_Ref; // 0x280
	public static readonly OpCode Stind_I1; // 0x288
	public static readonly OpCode Stind_I2; // 0x290
	public static readonly OpCode Stind_I4; // 0x298
	public static readonly OpCode Stind_I8; // 0x2A0
	public static readonly OpCode Stind_R4; // 0x2A8
	public static readonly OpCode Stind_R8; // 0x2B0
	public static readonly OpCode Add; // 0x2B8
	public static readonly OpCode Sub; // 0x2C0
	public static readonly OpCode Mul; // 0x2C8
	public static readonly OpCode Div; // 0x2D0
	public static readonly OpCode Div_Un; // 0x2D8
	public static readonly OpCode Rem; // 0x2E0
	public static readonly OpCode Rem_Un; // 0x2E8
	public static readonly OpCode And; // 0x2F0
	public static readonly OpCode Or; // 0x2F8
	public static readonly OpCode Xor; // 0x300
	public static readonly OpCode Shl; // 0x308
	public static readonly OpCode Shr; // 0x310
	public static readonly OpCode Shr_Un; // 0x318
	public static readonly OpCode Neg; // 0x320
	public static readonly OpCode Not; // 0x328
	public static readonly OpCode Conv_I1; // 0x330
	public static readonly OpCode Conv_I2; // 0x338
	public static readonly OpCode Conv_I4; // 0x340
	public static readonly OpCode Conv_I8; // 0x348
	public static readonly OpCode Conv_R4; // 0x350
	public static readonly OpCode Conv_R8; // 0x358
	public static readonly OpCode Conv_U4; // 0x360
	public static readonly OpCode Conv_U8; // 0x368
	public static readonly OpCode Callvirt; // 0x370
	public static readonly OpCode Cpobj; // 0x378
	public static readonly OpCode Ldobj; // 0x380
	public static readonly OpCode Ldstr; // 0x388
	public static readonly OpCode Newobj; // 0x390
	[ComVisibleAttribute] // RVA: 0x9B254 Offset: 0x9B254 VA: 0x9B254
	public static readonly OpCode Castclass; // 0x398
	public static readonly OpCode Isinst; // 0x3A0
	public static readonly OpCode Conv_R_Un; // 0x3A8
	public static readonly OpCode Unbox; // 0x3B0
	public static readonly OpCode Throw; // 0x3B8
	public static readonly OpCode Ldfld; // 0x3C0
	public static readonly OpCode Ldflda; // 0x3C8
	public static readonly OpCode Stfld; // 0x3D0
	public static readonly OpCode Ldsfld; // 0x3D8
	public static readonly OpCode Ldsflda; // 0x3E0
	public static readonly OpCode Stsfld; // 0x3E8
	public static readonly OpCode Stobj; // 0x3F0
	public static readonly OpCode Conv_Ovf_I1_Un; // 0x3F8
	public static readonly OpCode Conv_Ovf_I2_Un; // 0x400
	public static readonly OpCode Conv_Ovf_I4_Un; // 0x408
	public static readonly OpCode Conv_Ovf_I8_Un; // 0x410
	public static readonly OpCode Conv_Ovf_U1_Un; // 0x418
	public static readonly OpCode Conv_Ovf_U2_Un; // 0x420
	public static readonly OpCode Conv_Ovf_U4_Un; // 0x428
	public static readonly OpCode Conv_Ovf_U8_Un; // 0x430
	public static readonly OpCode Conv_Ovf_I_Un; // 0x438
	public static readonly OpCode Conv_Ovf_U_Un; // 0x440
	public static readonly OpCode Box; // 0x448
	public static readonly OpCode Newarr; // 0x450
	public static readonly OpCode Ldlen; // 0x458
	public static readonly OpCode Ldelema; // 0x460
	public static readonly OpCode Ldelem_I1; // 0x468
	public static readonly OpCode Ldelem_U1; // 0x470
	public static readonly OpCode Ldelem_I2; // 0x478
	public static readonly OpCode Ldelem_U2; // 0x480
	public static readonly OpCode Ldelem_I4; // 0x488
	public static readonly OpCode Ldelem_U4; // 0x490
	public static readonly OpCode Ldelem_I8; // 0x498
	public static readonly OpCode Ldelem_I; // 0x4A0
	public static readonly OpCode Ldelem_R4; // 0x4A8
	public static readonly OpCode Ldelem_R8; // 0x4B0
	public static readonly OpCode Ldelem_Ref; // 0x4B8
	public static readonly OpCode Stelem_I; // 0x4C0
	public static readonly OpCode Stelem_I1; // 0x4C8
	public static readonly OpCode Stelem_I2; // 0x4D0
	public static readonly OpCode Stelem_I4; // 0x4D8
	public static readonly OpCode Stelem_I8; // 0x4E0
	public static readonly OpCode Stelem_R4; // 0x4E8
	public static readonly OpCode Stelem_R8; // 0x4F0
	public static readonly OpCode Stelem_Ref; // 0x4F8
	public static readonly OpCode Ldelem; // 0x500
	public static readonly OpCode Stelem; // 0x508
	public static readonly OpCode Unbox_Any; // 0x510
	public static readonly OpCode Conv_Ovf_I1; // 0x518
	public static readonly OpCode Conv_Ovf_U1; // 0x520
	public static readonly OpCode Conv_Ovf_I2; // 0x528
	public static readonly OpCode Conv_Ovf_U2; // 0x530
	public static readonly OpCode Conv_Ovf_I4; // 0x538
	public static readonly OpCode Conv_Ovf_U4; // 0x540
	public static readonly OpCode Conv_Ovf_I8; // 0x548
	public static readonly OpCode Conv_Ovf_U8; // 0x550
	public static readonly OpCode Refanyval; // 0x558
	public static readonly OpCode Ckfinite; // 0x560
	public static readonly OpCode Mkrefany; // 0x568
	public static readonly OpCode Ldtoken; // 0x570
	public static readonly OpCode Conv_U2; // 0x578
	public static readonly OpCode Conv_U1; // 0x580
	public static readonly OpCode Conv_I; // 0x588
	public static readonly OpCode Conv_Ovf_I; // 0x590
	public static readonly OpCode Conv_Ovf_U; // 0x598
	public static readonly OpCode Add_Ovf; // 0x5A0
	public static readonly OpCode Add_Ovf_Un; // 0x5A8
	public static readonly OpCode Mul_Ovf; // 0x5B0
	public static readonly OpCode Mul_Ovf_Un; // 0x5B8
	public static readonly OpCode Sub_Ovf; // 0x5C0
	public static readonly OpCode Sub_Ovf_Un; // 0x5C8
	public static readonly OpCode Endfinally; // 0x5D0
	public static readonly OpCode Leave; // 0x5D8
	public static readonly OpCode Leave_S; // 0x5E0
	public static readonly OpCode Stind_I; // 0x5E8
	public static readonly OpCode Conv_U; // 0x5F0
	public static readonly OpCode Prefix7; // 0x5F8
	public static readonly OpCode Prefix6; // 0x600
	public static readonly OpCode Prefix5; // 0x608
	public static readonly OpCode Prefix4; // 0x610
	public static readonly OpCode Prefix3; // 0x618
	public static readonly OpCode Prefix2; // 0x620
	public static readonly OpCode Prefix1; // 0x628
	public static readonly OpCode Prefixref; // 0x630
	public static readonly OpCode Arglist; // 0x638
	public static readonly OpCode Ceq; // 0x640
	public static readonly OpCode Cgt; // 0x648
	public static readonly OpCode Cgt_Un; // 0x650
	public static readonly OpCode Clt; // 0x658
	public static readonly OpCode Clt_Un; // 0x660
	public static readonly OpCode Ldftn; // 0x668
	public static readonly OpCode Ldvirtftn; // 0x670
	public static readonly OpCode Ldarg; // 0x678
	public static readonly OpCode Ldarga; // 0x680
	public static readonly OpCode Starg; // 0x688
	public static readonly OpCode Ldloc; // 0x690
	public static readonly OpCode Ldloca; // 0x698
	public static readonly OpCode Stloc; // 0x6A0
	public static readonly OpCode Localloc; // 0x6A8
	public static readonly OpCode Endfilter; // 0x6B0
	public static readonly OpCode Unaligned; // 0x6B8
	public static readonly OpCode Volatile; // 0x6C0
	public static readonly OpCode Tailcall; // 0x6C8
	public static readonly OpCode Initobj; // 0x6D0
	public static readonly OpCode Constrained; // 0x6D8
	public static readonly OpCode Cpblk; // 0x6E0
	public static readonly OpCode Initblk; // 0x6E8
	public static readonly OpCode Rethrow; // 0x6F0
	public static readonly OpCode Sizeof; // 0x6F8
	public static readonly OpCode Refanytype; // 0x700
	public static readonly OpCode Readonly; // 0x708

	// Methods

	// RVA: 0x29323C Offset: 0x29323C VA: 0x29323C
	private static void .cctor() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0x95F40 Offset: 0x95F40 VA: 0x95F40
[Serializable]
public enum OperandType // TypeDefIndex: 321
{
	// Fields
	public int value__; // 0x0
	public const OperandType InlineBrTarget = 0;
	public const OperandType InlineField = 1;
	public const OperandType InlineI = 2;
	public const OperandType InlineI8 = 3;
	public const OperandType InlineMethod = 4;
	public const OperandType InlineNone = 5;
	[ObsoleteAttribute] // RVA: 0x9B268 Offset: 0x9B268 VA: 0x9B268
	public const OperandType InlinePhi = 6;
	public const OperandType InlineR = 7;
	public const OperandType InlineSig = 9;
	public const OperandType InlineString = 10;
	public const OperandType InlineSwitch = 11;
	public const OperandType InlineTok = 12;
	public const OperandType InlineType = 13;
	public const OperandType InlineVar = 14;
	public const OperandType ShortInlineBrTarget = 15;
	public const OperandType ShortInlineI = 16;
	public const OperandType ShortInlineR = 17;
	public const OperandType ShortInlineVar = 18;
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0x95F54 Offset: 0x95F54 VA: 0x95F54
[Serializable]
public enum PEFileKinds // TypeDefIndex: 322
{
	// Fields
	public int value__; // 0x0
	public const PEFileKinds Dll = 1;
	public const PEFileKinds ConsoleApplication = 2;
	public const PEFileKinds WindowApplication = 3;
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0x95F68 Offset: 0x95F68 VA: 0x95F68
[Serializable]
public enum PackingSize // TypeDefIndex: 323
{
	// Fields
	public int value__; // 0x0
	public const PackingSize Unspecified = 0;
	public const PackingSize Size1 = 1;
	public const PackingSize Size2 = 2;
	public const PackingSize Size4 = 4;
	public const PackingSize Size8 = 8;
	public const PackingSize Size16 = 16;
	public const PackingSize Size32 = 32;
	public const PackingSize Size64 = 64;
	public const PackingSize Size128 = 128;
}

// Namespace: System.Reflection.Emit
[ComDefaultInterfaceAttribute] // RVA: 0x95F7C Offset: 0x95F7C VA: 0x95F7C
[ComVisibleAttribute] // RVA: 0x95F7C Offset: 0x95F7C VA: 0x95F7C
[ClassInterfaceAttribute] // RVA: 0x95F7C Offset: 0x95F7C VA: 0x95F7C
public class ParameterBuilder : _ParameterBuilder // TypeDefIndex: 324
{
	// Fields
	private string name; // 0x8
	private ParameterAttributes attrs; // 0xC
	private int position; // 0x10

	// Properties
	public virtual int Attributes { get; }
	public virtual string Name { get; }
	public virtual int Position { get; }

	// Methods

	// RVA: 0x2943A8 Offset: 0x2943A8 VA: 0x2943A8 Slot: 4
	public virtual int get_Attributes() { }

	// RVA: 0x2943B0 Offset: 0x2943B0 VA: 0x2943B0 Slot: 5
	public virtual string get_Name() { }

	// RVA: 0x2943B8 Offset: 0x2943B8 VA: 0x2943B8 Slot: 6
	public virtual int get_Position() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0x9601C Offset: 0x9601C VA: 0x9601C
[ClassInterfaceAttribute] // RVA: 0x9601C Offset: 0x9601C VA: 0x9601C
[ComDefaultInterfaceAttribute] // RVA: 0x9601C Offset: 0x9601C VA: 0x9601C
public sealed class PropertyBuilder : PropertyInfo, _PropertyBuilder // TypeDefIndex: 325
{
	// Fields
	private PropertyAttributes attrs; // 0x8
	private string name; // 0xC
	private Type type; // 0x10
	private MethodBuilder set_method; // 0x14
	private MethodBuilder get_method; // 0x18
	internal TypeBuilder typeb; // 0x1C

	// Properties
	public override PropertyAttributes Attributes { get; }
	public override bool CanRead { get; }
	public override bool CanWrite { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override Type PropertyType { get; }
	public override Type ReflectedType { get; }
	public override Module Module { get; }

	// Methods

	// RVA: 0x2943C0 Offset: 0x2943C0 VA: 0x2943C0 Slot: 14
	public override PropertyAttributes get_Attributes() { }

	// RVA: 0x2943C8 Offset: 0x2943C8 VA: 0x2943C8 Slot: 15
	public override bool get_CanRead() { }

	// RVA: 0x2943D8 Offset: 0x2943D8 VA: 0x2943D8 Slot: 16
	public override bool get_CanWrite() { }

	// RVA: 0x2943E8 Offset: 0x2943E8 VA: 0x2943E8 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x2943F0 Offset: 0x2943F0 VA: 0x2943F0 Slot: 8
	public override string get_Name() { }

	// RVA: 0x2943F8 Offset: 0x2943F8 VA: 0x2943F8 Slot: 17
	public override Type get_PropertyType() { }

	// RVA: 0x294400 Offset: 0x294400 VA: 0x294400 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x294408 Offset: 0x294408 VA: 0x294408 Slot: 18
	public override MethodInfo[] GetAccessors(bool nonPublic) { }

	// RVA: 0x294410 Offset: 0x294410 VA: 0x294410 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x2944F8 Offset: 0x2944F8 VA: 0x2944F8 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x294560 Offset: 0x294560 VA: 0x294560 Slot: 20
	public override MethodInfo GetGetMethod(bool nonPublic) { }

	// RVA: 0x294568 Offset: 0x294568 VA: 0x294568 Slot: 21
	public override ParameterInfo[] GetIndexParameters() { }

	// RVA: 0x2945D0 Offset: 0x2945D0 VA: 0x2945D0 Slot: 22
	public override MethodInfo GetSetMethod(bool nonPublic) { }

	// RVA: 0x2945D8 Offset: 0x2945D8 VA: 0x2945D8 Slot: 23
	public override object GetValue(object obj, object[] index) { }

	// RVA: 0x2945E0 Offset: 0x2945E0 VA: 0x2945E0 Slot: 24
	public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) { }

	// RVA: 0x294648 Offset: 0x294648 VA: 0x294648 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x2946B0 Offset: 0x2946B0 VA: 0x2946B0 Slot: 25
	public override void SetValue(object obj, object value, object[] index) { }

	// RVA: 0x2946B4 Offset: 0x2946B4 VA: 0x2946B4 Slot: 26
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) { }

	// RVA: 0x2946B8 Offset: 0x2946B8 VA: 0x2946B8 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x294478 Offset: 0x294478 VA: 0x294478
	private Exception not_supported() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0x960BC Offset: 0x960BC VA: 0x960BC
[Serializable]
public enum StackBehaviour // TypeDefIndex: 326
{
	// Fields
	public int value__; // 0x0
	public const StackBehaviour Pop0 = 0;
	public const StackBehaviour Pop1 = 1;
	public const StackBehaviour Pop1_pop1 = 2;
	public const StackBehaviour Popi = 3;
	public const StackBehaviour Popi_pop1 = 4;
	public const StackBehaviour Popi_popi = 5;
	public const StackBehaviour Popi_popi8 = 6;
	public const StackBehaviour Popi_popi_popi = 7;
	public const StackBehaviour Popi_popr4 = 8;
	public const StackBehaviour Popi_popr8 = 9;
	public const StackBehaviour Popref = 10;
	public const StackBehaviour Popref_pop1 = 11;
	public const StackBehaviour Popref_popi = 12;
	public const StackBehaviour Popref_popi_popi = 13;
	public const StackBehaviour Popref_popi_popi8 = 14;
	public const StackBehaviour Popref_popi_popr4 = 15;
	public const StackBehaviour Popref_popi_popr8 = 16;
	public const StackBehaviour Popref_popi_popref = 17;
	public const StackBehaviour Push0 = 18;
	public const StackBehaviour Push1 = 19;
	public const StackBehaviour Push1_push1 = 20;
	public const StackBehaviour Pushi = 21;
	public const StackBehaviour Pushi8 = 22;
	public const StackBehaviour Pushr4 = 23;
	public const StackBehaviour Pushr8 = 24;
	public const StackBehaviour Pushref = 25;
	public const StackBehaviour Varpop = 26;
	public const StackBehaviour Varpush = 27;
	public const StackBehaviour Popref_popi_pop1 = 28;
}

// Namespace: System.Reflection.Emit
[ClassInterfaceAttribute] // RVA: 0x960D0 Offset: 0x960D0 VA: 0x960D0
[ComVisibleAttribute] // RVA: 0x960D0 Offset: 0x960D0 VA: 0x960D0
[ComDefaultInterfaceAttribute] // RVA: 0x960D0 Offset: 0x960D0 VA: 0x960D0
public sealed class TypeBuilder : Type, _TypeBuilder // TypeDefIndex: 327
{
	// Fields
	private string tname; // 0xC
	private string nspace; // 0x10
	private Type parent; // 0x14
	private Type nesting_type; // 0x18
	internal Type[] interfaces; // 0x1C
	internal int num_methods; // 0x20
	internal MethodBuilder[] methods; // 0x24
	internal ConstructorBuilder[] ctors; // 0x28
	internal PropertyBuilder[] properties; // 0x2C
	internal int num_fields; // 0x30
	internal FieldBuilder[] fields; // 0x34
	internal EventBuilder[] events; // 0x38
	private CustomAttributeBuilder[] cattrs; // 0x3C
	internal TypeBuilder[] subtypes; // 0x40
	internal TypeAttributes attrs; // 0x44
	private int table_idx; // 0x48
	private ModuleBuilder pmodule; // 0x4C
	private int class_size; // 0x50
	private PackingSize packing_size; // 0x54
	private IntPtr generic_container; // 0x58
	private GenericTypeParameterBuilder[] generic_params; // 0x5C
	private RefEmitPermissionSet[] permissions; // 0x60
	private Type created; // 0x64
	private string fullname; // 0x68
	private bool createTypeCalled; // 0x6C
	private Type underlying_type; // 0x70

	// Properties
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override Type DeclaringType { get; }
	public override Type UnderlyingSystemType { get; }
	public override string FullName { get; }
	public override Module Module { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override Type ReflectedType { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	internal bool IsCompilerContext { get; }
	internal bool is_created { get; }
	public override bool ContainsGenericParameters { get; }
	public override bool IsGenericParameter { get; }
	public override bool IsGenericTypeDefinition { get; }
	public override bool IsGenericType { get; }

	// Methods

	// RVA: 0x28AE48 Offset: 0x28AE48 VA: 0x28AE48
	internal void .ctor(ModuleBuilder mb, TypeAttributes attr, int table_idx) { }

	// RVA: 0x28BF00 Offset: 0x28BF00 VA: 0x28BF00
	internal void .ctor(ModuleBuilder mb, string name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packing_size, int type_size, Type nesting_type) { }

	// RVA: 0x294980 Offset: 0x294980 VA: 0x294980 Slot: 62
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x2946BC Offset: 0x2946BC VA: 0x2946BC
	private void setup_internal_class(TypeBuilder tb) { }

	// RVA: 0x294988 Offset: 0x294988 VA: 0x294988
	private void create_generic_class() { }

	// RVA: 0x285314 Offset: 0x285314 VA: 0x285314 Slot: 14
	public override Assembly get_Assembly() { }

	// RVA: 0x285360 Offset: 0x285360 VA: 0x285360 Slot: 15
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x285460 Offset: 0x285460 VA: 0x285460 Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x28548C Offset: 0x28548C VA: 0x28548C Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x29498C Offset: 0x29498C VA: 0x29498C Slot: 36
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x294850 Offset: 0x294850 VA: 0x294850
	private string GetFullName() { }

	// RVA: 0x2854B8 Offset: 0x2854B8 VA: 0x2854B8 Slot: 18
	public override string get_FullName() { }

	// RVA: 0x28247C Offset: 0x28247C VA: 0x28247C Slot: 10
	public override Module get_Module() { }

	// RVA: 0x283260 Offset: 0x283260 VA: 0x283260 Slot: 8
	public override string get_Name() { }

	// RVA: 0x28552C Offset: 0x28552C VA: 0x28552C Slot: 34
	public override string get_Namespace() { }

	// RVA: 0x285558 Offset: 0x285558 VA: 0x285558 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x294A80 Offset: 0x294A80 VA: 0x294A80 Slot: 61
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x2861EC Offset: 0x2861EC VA: 0x2861EC Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x285784 Offset: 0x285784 VA: 0x285784 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x285800 Offset: 0x285800 VA: 0x285800 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	[ComVisibleAttribute] // RVA: 0x9C6CC Offset: 0x9C6CC VA: 0x9C6CC
	// RVA: 0x294F84 Offset: 0x294F84 VA: 0x294F84
	public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes) { }

	[ComVisibleAttribute] // RVA: 0x9C6E0 Offset: 0x9C6E0 VA: 0x9C6E0
	// RVA: 0x294FA8 Offset: 0x294FA8 VA: 0x294FA8
	public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers) { }

	[ComVisibleAttribute] // RVA: 0x9C6F4 Offset: 0x9C6F4 VA: 0x9C6F4
	// RVA: 0x295240 Offset: 0x295240 VA: 0x295240
	public ConstructorBuilder DefineDefaultConstructor(MethodAttributes attributes) { }

	// RVA: 0x29553C Offset: 0x29553C VA: 0x29553C
	private void append_method(MethodBuilder mb) { }

	// RVA: 0x29567C Offset: 0x29567C VA: 0x29567C
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes) { }

	// RVA: 0x2956B4 Offset: 0x2956B4 VA: 0x2956B4
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes) { }

	// RVA: 0x2956F0 Offset: 0x2956F0 VA: 0x2956F0
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers) { }

	// RVA: 0x29589C Offset: 0x29589C VA: 0x29589C
	public void DefineMethodOverride(MethodInfo methodInfoBody, MethodInfo methodInfoDeclaration) { }

	// RVA: 0x295A20 Offset: 0x295A20 VA: 0x295A20
	private Type create_runtime_class(TypeBuilder tb) { }

	// RVA: 0x295A24 Offset: 0x295A24 VA: 0x295A24
	private bool is_nested_in(Type t) { }

	// RVA: 0x295A74 Offset: 0x295A74 VA: 0x295A74
	private bool has_ctor_method() { }

	// RVA: 0x28AFD8 Offset: 0x28AFD8 VA: 0x28AFD8
	public Type CreateType() { }

	[ComVisibleAttribute] // RVA: 0x9C708 Offset: 0x9C708 VA: 0x9C708
	// RVA: 0x285680 Offset: 0x285680 VA: 0x285680 Slot: 74
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x295D50 Offset: 0x295D50 VA: 0x295D50
	internal ConstructorInfo[] GetConstructorsInternal(BindingFlags bindingAttr) { }

	// RVA: 0x285868 Offset: 0x285868 VA: 0x285868 Slot: 44
	public override Type GetElementType() { }

	// RVA: 0x285928 Offset: 0x285928 VA: 0x285928 Slot: 45
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x2859AC Offset: 0x2859AC VA: 0x2859AC Slot: 46
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x285B68 Offset: 0x285B68 VA: 0x285B68 Slot: 47
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x285D80 Offset: 0x285D80 VA: 0x285D80 Slot: 40
	public override Type[] GetInterfaces() { }

	// RVA: 0x295F10 Offset: 0x295F10 VA: 0x295F10
	private MethodInfo[] GetMethodsByName(string name, BindingFlags bindingAttr, bool ignoreCase, Type reflected_type) { }

	// RVA: 0x285F48 Offset: 0x285F48 VA: 0x285F48 Slot: 54
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x29641C Offset: 0x29641C VA: 0x29641C Slot: 53
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x2968F0 Offset: 0x2968F0 VA: 0x2968F0 Slot: 60
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x2969D8 Offset: 0x2969D8 VA: 0x2969D8 Slot: 63
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x2860F4 Offset: 0x2860F4 VA: 0x2860F4 Slot: 75
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x2969F0 Offset: 0x2969F0 VA: 0x2969F0 Slot: 64
	protected override bool IsArrayImpl() { }

	// RVA: 0x2969F8 Offset: 0x2969F8 VA: 0x2969F8 Slot: 65
	protected override bool IsByRefImpl() { }

	// RVA: 0x296A00 Offset: 0x296A00 VA: 0x296A00 Slot: 66
	protected override bool IsPointerImpl() { }

	// RVA: 0x296A08 Offset: 0x296A08 VA: 0x296A08 Slot: 67
	protected override bool IsPrimitiveImpl() { }

	// RVA: 0x296A10 Offset: 0x296A10 VA: 0x296A10 Slot: 68
	protected override bool IsValueTypeImpl() { }

	// RVA: 0x296BB0 Offset: 0x296BB0 VA: 0x296BB0 Slot: 83
	public override Type MakeByRefType() { }

	[MonoTODOAttribute] // RVA: 0x9C71C Offset: 0x9C71C VA: 0x9C71C
	// RVA: 0x296C20 Offset: 0x296C20 VA: 0x296C20 Slot: 81
	public override Type MakeGenericType(Type[] typeArguments) { }

	// RVA: 0x285588 Offset: 0x285588 VA: 0x285588 Slot: 35
	public override RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x295BE0 Offset: 0x295BE0 VA: 0x295BE0
	public void SetParent(Type parent) { }

	// RVA: 0x283730 Offset: 0x283730 VA: 0x283730
	internal int get_next_table_index(object obj, int table, bool inc) { }

	// RVA: 0x294818 Offset: 0x294818 VA: 0x294818
	internal bool get_IsCompilerContext() { }

	// RVA: 0x282554 Offset: 0x282554 VA: 0x282554
	internal bool get_is_created() { }

	// RVA: 0x296958 Offset: 0x296958 VA: 0x296958
	private Exception not_supported() { }

	// RVA: 0x295194 Offset: 0x295194 VA: 0x295194
	private void check_not_created() { }

	// RVA: 0x294F0C Offset: 0x294F0C VA: 0x294F0C
	private void check_created() { }

	// RVA: 0x2946C0 Offset: 0x2946C0 VA: 0x2946C0
	private void check_name(string argName, string name) { }

	// RVA: 0x296C28 Offset: 0x296C28 VA: 0x296C28 Slot: 3
	public override string ToString() { }

	[MonoTODOAttribute] // RVA: 0x9C72C Offset: 0x9C72C VA: 0x9C72C
	// RVA: 0x296C30 Offset: 0x296C30 VA: 0x296C30 Slot: 41
	public override bool IsAssignableFrom(Type c) { }

	[ComVisibleAttribute] // RVA: 0x9C73C Offset: 0x9C73C VA: 0x9C73C
	[MonoTODOAttribute] // RVA: 0x9C73C Offset: 0x9C73C VA: 0x9C73C
	// RVA: 0x296C38 Offset: 0x296C38 VA: 0x296C38 Slot: 39
	public override bool IsSubclassOf(Type c) { }

	[MonoTODOAttribute] // RVA: 0x9C770 Offset: 0x9C770 VA: 0x9C770
	// RVA: 0x296C40 Offset: 0x296C40 VA: 0x296C40
	internal bool IsAssignableTo(Type c) { }

	// RVA: 0x296E30 Offset: 0x296E30 VA: 0x296E30 Slot: 76
	public override Type[] GetGenericArguments() { }

	// RVA: 0x296ED8 Offset: 0x296ED8 VA: 0x296ED8 Slot: 79
	public override Type GetGenericTypeDefinition() { }

	// RVA: 0x296F88 Offset: 0x296F88 VA: 0x296F88 Slot: 77
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x296F98 Offset: 0x296F98 VA: 0x296F98 Slot: 82
	public override bool get_IsGenericParameter() { }

	// RVA: 0x296F9C Offset: 0x296F9C VA: 0x296F9C Slot: 78
	public override bool get_IsGenericTypeDefinition() { }

	// RVA: 0x296FAC Offset: 0x296FAC VA: 0x296FAC Slot: 80
	public override bool get_IsGenericType() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0x96170 Offset: 0x96170 VA: 0x96170
[ObsoleteAttribute] // RVA: 0x96170 Offset: 0x96170 VA: 0x96170
[Serializable]
public sealed class UnmanagedMarshal // TypeDefIndex: 328
{
	// Fields
	private int count; // 0x8
	private UnmanagedType t; // 0xC
	private UnmanagedType tbase; // 0x10
	private string guid; // 0x14
	private string mcookie; // 0x18
	private string marshaltype; // 0x1C
	private Type marshaltyperef; // 0x20
	private int param_num; // 0x24
	private bool has_size; // 0x28

	// Methods

	// RVA: 0x296FBC Offset: 0x296FBC VA: 0x296FBC
	internal MarshalAsAttribute ToMarshalAsAttribute() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x961BC Offset: 0x961BC VA: 0x961BC
[Serializable]
public sealed class AmbiguousMatchException : SystemException // TypeDefIndex: 329
{
	// Methods

	// RVA: 0x461484 Offset: 0x461484 VA: 0x461484
	public void .ctor() { }

	// RVA: 0x45F1C0 Offset: 0x45F1C0 VA: 0x45F1C0
	public void .ctor(string message) { }

	// RVA: 0x46DDE8 Offset: 0x46DDE8 VA: 0x46DDE8
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x961D0 Offset: 0x961D0 VA: 0x961D0
[ComDefaultInterfaceAttribute] // RVA: 0x961D0 Offset: 0x961D0 VA: 0x961D0
[ClassInterfaceAttribute] // RVA: 0x961D0 Offset: 0x961D0 VA: 0x961D0
[Serializable]
public class Assembly : ICustomAttributeProvider, _Assembly // TypeDefIndex: 330
{
	// Fields
	private IntPtr _mono_assembly; // 0x8
	private Assembly.ResolveEventHolder resolve_event_holder; // 0xC
	private Evidence _evidence; // 0x10
	internal PermissionSet _minimum; // 0x14
	internal PermissionSet _optional; // 0x18
	internal PermissionSet _refuse; // 0x1C
	private PermissionSet _granted; // 0x20
	private PermissionSet _denied; // 0x24
	private bool fromByteArray; // 0x28
	private string assemblyName; // 0x2C

	// Properties
	public virtual string FullName { get; }
	public virtual string Location { get; }

	// Methods

	// RVA: 0x46DE08 Offset: 0x46DE08 VA: 0x46DE08
	internal void .ctor() { }

	// RVA: 0x46DE70 Offset: 0x46DE70 VA: 0x46DE70
	private string get_code_base(bool escaped) { }

	// RVA: 0x46DE74 Offset: 0x46DE74 VA: 0x46DE74
	private string get_fullname() { }

	// RVA: 0x46DE78 Offset: 0x46DE78 VA: 0x46DE78
	private string get_location() { }

	// RVA: 0x46DE7C Offset: 0x46DE7C VA: 0x46DE7C
	private string GetCodeBase(bool escaped) { }

	// RVA: 0x46DE80 Offset: 0x46DE80 VA: 0x46DE80 Slot: 6
	public virtual string get_FullName() { }

	// RVA: 0x46DE90 Offset: 0x46DE90 VA: 0x46DE90 Slot: 7
	public virtual string get_Location() { }

	// RVA: 0x46DF38 Offset: 0x46DF38 VA: 0x46DF38 Slot: 8
	public virtual bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x46DFC8 Offset: 0x46DFC8 VA: 0x46DFC8 Slot: 9
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x46E058 Offset: 0x46E058 VA: 0x46E058
	internal IntPtr GetManifestResourceInternal(string name, out int size, out Module module) { }

	// RVA: 0x46E05C Offset: 0x46E05C VA: 0x46E05C Slot: 10
	internal virtual Type[] GetTypes(bool exportedOnly) { }

	// RVA: 0x46E060 Offset: 0x46E060 VA: 0x46E060 Slot: 11
	public virtual Type[] GetTypes() { }

	// RVA: 0x46E074 Offset: 0x46E074 VA: 0x46E074 Slot: 12
	public virtual Type GetType(string name, bool throwOnError) { }

	// RVA: 0x46E1C0 Offset: 0x46E1C0 VA: 0x46E1C0 Slot: 13
	public virtual Type GetType(string name) { }

	// RVA: 0x46E1E0 Offset: 0x46E1E0 VA: 0x46E1E0
	internal Type InternalGetType(Module module, string name, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x46E090 Offset: 0x46E090 VA: 0x46E090 Slot: 14
	public Type GetType(string name, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x46E200 Offset: 0x46E200 VA: 0x46E200
	private static void FillName(Assembly ass, AssemblyName aname) { }

	[MonoTODOAttribute] // RVA: 0x9C7A4 Offset: 0x9C7A4 VA: 0x9C7A4
	// RVA: 0x46E204 Offset: 0x46E204 VA: 0x46E204 Slot: 15
	public virtual AssemblyName GetName(bool copiedName) { }

	// RVA: 0x46E2AC Offset: 0x46E2AC VA: 0x46E2AC Slot: 16
	public virtual AssemblyName GetName() { }

	// RVA: 0x46E2C0 Offset: 0x46E2C0 VA: 0x46E2C0 Slot: 17
	internal virtual AssemblyName UnprotectedGetName() { }

	// RVA: 0x46E348 Offset: 0x46E348 VA: 0x46E348 Slot: 3
	public override string ToString() { }

	// RVA: 0x46E370 Offset: 0x46E370 VA: 0x46E370
	public static Assembly Load(string assemblyString) { }

	[ObsoleteAttribute] // RVA: 0x9C7F4 Offset: 0x9C7F4 VA: 0x9C7F4
	// RVA: 0x46E3AC Offset: 0x46E3AC VA: 0x46E3AC
	public static Assembly LoadWithPartialName(string partialName) { }

	// RVA: 0x46E3C0 Offset: 0x46E3C0 VA: 0x46E3C0
	private static Assembly load_with_partial_name(string name, Evidence e) { }

	[ObsoleteAttribute] // RVA: 0x9C828 Offset: 0x9C828 VA: 0x9C828
	// RVA: 0x46E3B8 Offset: 0x46E3B8 VA: 0x46E3B8
	public static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence) { }

	// RVA: 0x46E3C4 Offset: 0x46E3C4 VA: 0x46E3C4
	internal static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence, bool oldBehavior) { }

	// RVA: 0x46E4A0 Offset: 0x46E4A0 VA: 0x46E4A0 Slot: 18
	public Module GetModule(string name) { }

	// RVA: 0x46E8F8 Offset: 0x46E8F8 VA: 0x46E8F8 Slot: 19
	internal virtual Module[] GetModulesInternal() { }

	// RVA: 0x46E6B8 Offset: 0x46E6B8 VA: 0x46E6B8 Slot: 20
	public Module[] GetModules(bool getResourceModules) { }

	// RVA: 0x46E8FC Offset: 0x46E8FC VA: 0x46E8FC
	public static Assembly GetExecutingAssembly() { }
}

// Namespace: 
internal class Assembly.ResolveEventHolder // TypeDefIndex: 331
{
	// Methods

	// RVA: 0x46DE6C Offset: 0x46DE6C VA: 0x46DE6C
	public void .ctor() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96270 Offset: 0x96270 VA: 0x96270
[AttributeUsageAttribute] // RVA: 0x96270 Offset: 0x96270 VA: 0x96270
public sealed class AssemblyCompanyAttribute : Attribute // TypeDefIndex: 332
{
	// Fields
	private string name; // 0x8

	// Methods

	// RVA: 0x46E964 Offset: 0x46E964 VA: 0x46E964
	public void .ctor(string company) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x962BC Offset: 0x962BC VA: 0x962BC
[AttributeUsageAttribute] // RVA: 0x962BC Offset: 0x962BC VA: 0x962BC
public sealed class AssemblyConfigurationAttribute : Attribute // TypeDefIndex: 333
{
	// Fields
	private string name; // 0x8

	// Methods

	// RVA: 0x46E984 Offset: 0x46E984 VA: 0x46E984
	public void .ctor(string configuration) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96308 Offset: 0x96308 VA: 0x96308
[AttributeUsageAttribute] // RVA: 0x96308 Offset: 0x96308 VA: 0x96308
public sealed class AssemblyCopyrightAttribute : Attribute // TypeDefIndex: 334
{
	// Fields
	private string name; // 0x8

	// Methods

	// RVA: 0x46E9A4 Offset: 0x46E9A4 VA: 0x46E9A4
	public void .ctor(string copyright) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96354 Offset: 0x96354 VA: 0x96354
[AttributeUsageAttribute] // RVA: 0x96354 Offset: 0x96354 VA: 0x96354
public sealed class AssemblyDefaultAliasAttribute : Attribute // TypeDefIndex: 335
{
	// Fields
	private string name; // 0x8

	// Methods

	// RVA: 0x46E9C4 Offset: 0x46E9C4 VA: 0x46E9C4
	public void .ctor(string defaultAlias) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x963A0 Offset: 0x963A0 VA: 0x963A0
[AttributeUsageAttribute] // RVA: 0x963A0 Offset: 0x963A0 VA: 0x963A0
public sealed class AssemblyDelaySignAttribute : Attribute // TypeDefIndex: 336
{
	// Fields
	private bool delay; // 0x8

	// Methods

	// RVA: 0x46E9E4 Offset: 0x46E9E4 VA: 0x46E9E4
	public void .ctor(bool delaySign) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x963EC Offset: 0x963EC VA: 0x963EC
[AttributeUsageAttribute] // RVA: 0x963EC Offset: 0x963EC VA: 0x963EC
public sealed class AssemblyDescriptionAttribute : Attribute // TypeDefIndex: 337
{
	// Fields
	private string name; // 0x8

	// Methods

	// RVA: 0x46EA04 Offset: 0x46EA04 VA: 0x46EA04
	public void .ctor(string description) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96438 Offset: 0x96438 VA: 0x96438
[AttributeUsageAttribute] // RVA: 0x96438 Offset: 0x96438 VA: 0x96438
public sealed class AssemblyFileVersionAttribute : Attribute // TypeDefIndex: 338
{
	// Fields
	private string name; // 0x8

	// Methods

	// RVA: 0x46EA24 Offset: 0x46EA24 VA: 0x46EA24
	public void .ctor(string version) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0x96484 Offset: 0x96484 VA: 0x96484
[ComVisibleAttribute] // RVA: 0x96484 Offset: 0x96484 VA: 0x96484
public sealed class AssemblyInformationalVersionAttribute : Attribute // TypeDefIndex: 339
{
	// Fields
	private string name; // 0x8

	// Methods

	// RVA: 0x46EAE0 Offset: 0x46EAE0 VA: 0x46EAE0
	public void .ctor(string informationalVersion) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0x964D0 Offset: 0x964D0 VA: 0x964D0
[ComVisibleAttribute] // RVA: 0x964D0 Offset: 0x964D0 VA: 0x964D0
public sealed class AssemblyKeyFileAttribute : Attribute // TypeDefIndex: 340
{
	// Fields
	private string name; // 0x8

	// Methods

	// RVA: 0x46EB00 Offset: 0x46EB00 VA: 0x46EB00
	public void .ctor(string keyFile) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x9651C Offset: 0x9651C VA: 0x9651C
[ComDefaultInterfaceAttribute] // RVA: 0x9651C Offset: 0x9651C VA: 0x9651C
[ClassInterfaceAttribute] // RVA: 0x9651C Offset: 0x9651C VA: 0x9651C
[Serializable]
public sealed class AssemblyName : ICloneable, ISerializable, _AssemblyName, IDeserializationCallback // TypeDefIndex: 341
{
	// Fields
	private string name; // 0x8
	private string codebase; // 0xC
	private int major; // 0x10
	private int minor; // 0x14
	private int build; // 0x18
	private int revision; // 0x1C
	private CultureInfo cultureinfo; // 0x20
	private AssemblyNameFlags flags; // 0x24
	private AssemblyHashAlgorithm hashalg; // 0x28
	private StrongNameKeyPair keypair; // 0x2C
	private byte[] publicKey; // 0x30
	private byte[] keyToken; // 0x34
	private AssemblyVersionCompatibility versioncompat; // 0x38
	private Version version; // 0x3C
	private ProcessorArchitecture processor_architecture; // 0x40

	// Properties
	public string Name { get; set; }
	public CultureInfo CultureInfo { get; }
	public AssemblyNameFlags Flags { get; }
	public string FullName { get; }
	public StrongNameKeyPair KeyPair { get; }
	public Version Version { get; set; }
	private bool IsPublicKeyValid { get; }

	// Methods

	// RVA: 0x46E33C Offset: 0x46E33C VA: 0x46E33C
	public void .ctor() { }

	// RVA: 0x46EB20 Offset: 0x46EB20 VA: 0x46EB20
	internal void .ctor(SerializationInfo si, StreamingContext sc) { }

	// RVA: 0x46F150 Offset: 0x46F150 VA: 0x46F150
	public string get_Name() { }

	// RVA: 0x46F158 Offset: 0x46F158 VA: 0x46F158
	public void set_Name(string value) { }

	// RVA: 0x46F160 Offset: 0x46F160 VA: 0x46F160
	public CultureInfo get_CultureInfo() { }

	// RVA: 0x46F168 Offset: 0x46F168 VA: 0x46F168
	public AssemblyNameFlags get_Flags() { }

	// RVA: 0x46F170 Offset: 0x46F170 VA: 0x46F170
	public string get_FullName() { }

	// RVA: 0x46F66C Offset: 0x46F66C VA: 0x46F66C
	public StrongNameKeyPair get_KeyPair() { }

	// RVA: 0x46F560 Offset: 0x46F560 VA: 0x46F560
	public Version get_Version() { }

	// RVA: 0x46F674 Offset: 0x46F674 VA: 0x46F674
	public void set_Version(Version value) { }

	// RVA: 0x46F750 Offset: 0x46F750 VA: 0x46F750 Slot: 3
	public override string ToString() { }

	// RVA: 0x46F774 Offset: 0x46F774 VA: 0x46F774
	public byte[] GetPublicKey() { }

	// RVA: 0x46F77C Offset: 0x46F77C VA: 0x46F77C
	private bool get_IsPublicKeyValid() { }

	// RVA: 0x46F568 Offset: 0x46F568 VA: 0x46F568
	private byte[] InternalGetPublicKeyToken() { }

	// RVA: 0x46FA30 Offset: 0x46FA30 VA: 0x46FA30
	private byte[] ComputePublicKeyToken() { }

	// RVA: 0x46FB24 Offset: 0x46FB24 VA: 0x46FB24
	public void SetPublicKey(byte[] publicKey) { }

	// RVA: 0x46FB40 Offset: 0x46FB40 VA: 0x46FB40
	public void SetPublicKeyToken(byte[] publicKeyToken) { }

	// RVA: 0x46FB48 Offset: 0x46FB48 VA: 0x46FB48 Slot: 5
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x46FE1C Offset: 0x46FE1C VA: 0x46FE1C Slot: 4
	public object Clone() { }

	// RVA: 0x470014 Offset: 0x470014 VA: 0x470014 Slot: 6
	public void OnDeserialization(object sender) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x965BC Offset: 0x965BC VA: 0x965BC
[FlagsAttribute] // RVA: 0x965BC Offset: 0x965BC VA: 0x965BC
[Serializable]
public enum AssemblyNameFlags // TypeDefIndex: 342
{
	// Fields
	public int value__; // 0x0
	public const AssemblyNameFlags None = 0;
	public const AssemblyNameFlags PublicKey = 1;
	public const AssemblyNameFlags Retargetable = 256;
	public const AssemblyNameFlags EnableJITcompileOptimizer = 16384;
	public const AssemblyNameFlags EnableJITcompileTracking = 32768;
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0x965F0 Offset: 0x965F0 VA: 0x965F0
[ComVisibleAttribute] // RVA: 0x965F0 Offset: 0x965F0 VA: 0x965F0
public sealed class AssemblyProductAttribute : Attribute // TypeDefIndex: 343
{
	// Fields
	private string name; // 0x8

	// Methods

	// RVA: 0x47001C Offset: 0x47001C VA: 0x47001C
	public void .ctor(string product) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0x9663C Offset: 0x9663C VA: 0x9663C
[ComVisibleAttribute] // RVA: 0x9663C Offset: 0x9663C VA: 0x9663C
public sealed class AssemblyTitleAttribute : Attribute // TypeDefIndex: 344
{
	// Fields
	private string name; // 0x8

	// Methods

	// RVA: 0x47003C Offset: 0x47003C VA: 0x47003C
	public void .ctor(string title) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0x96688 Offset: 0x96688 VA: 0x96688
[ComVisibleAttribute] // RVA: 0x96688 Offset: 0x96688 VA: 0x96688
public sealed class AssemblyTrademarkAttribute : Attribute // TypeDefIndex: 345
{
	// Fields
	private string name; // 0x8

	// Methods

	// RVA: 0x47005C Offset: 0x47005C VA: 0x47005C
	public void .ctor(string trademark) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x966D4 Offset: 0x966D4 VA: 0x966D4
[ClassInterfaceAttribute] // RVA: 0x966D4 Offset: 0x966D4 VA: 0x966D4
[Serializable]
public abstract class Binder // TypeDefIndex: 346
{
	// Fields
	private static Binder default_binder; // 0x0

	// Properties
	internal static Binder DefaultBinder { get; }

	// Methods

	// RVA: 0x47007C Offset: 0x47007C VA: 0x47007C
	protected void .ctor() { }

	// RVA: 0x470080 Offset: 0x470080 VA: 0x470080
	private static void .cctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract object ChangeType(object value, Type type, CultureInfo culture);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void ReorderArgumentArray(ref object[] args, object state);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers);

	// RVA: 0x4614F4 Offset: 0x4614F4 VA: 0x4614F4
	internal static Binder get_DefaultBinder() { }

	// RVA: 0x470174 Offset: 0x470174 VA: 0x470174
	internal static bool ConvertArgs(Binder binder, object[] args, ParameterInfo[] pinfo, CultureInfo culture) { }

	// RVA: 0x4703E0 Offset: 0x4703E0 VA: 0x4703E0
	internal static int GetDerivedLevel(Type type) { }

	// RVA: 0x461A90 Offset: 0x461A90 VA: 0x461A90
	internal static MethodBase FindMostDerivedMatch(MethodBase[] match) { }
}

// Namespace: 
internal sealed class Binder.Default : Binder // TypeDefIndex: 347
{
	// Methods

	// RVA: 0x4700FC Offset: 0x4700FC VA: 0x4700FC
	public void .ctor() { }

	// RVA: 0x470444 Offset: 0x470444 VA: 0x470444 Slot: 4
	public override MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state) { }

	// RVA: 0x470C18 Offset: 0x470C18 VA: 0x470C18
	private void ReorderParameters(string[] names, ref object[] args, MethodBase selected) { }

	// RVA: 0x470EFC Offset: 0x470EFC VA: 0x470EFC
	private static bool IsArrayAssignable(Type object_type, Type target_type) { }

	// RVA: 0x470FD4 Offset: 0x470FD4 VA: 0x470FD4 Slot: 5
	public override object ChangeType(object value, Type type, CultureInfo culture) { }

	[MonoTODOAttribute] // RVA: 0x9C85C Offset: 0x9C85C VA: 0x9C85C
	// RVA: 0x471C6C Offset: 0x471C6C VA: 0x471C6C Slot: 6
	public override void ReorderArgumentArray(ref object[] args, object state) { }

	// RVA: 0x4713EC Offset: 0x4713EC VA: 0x4713EC
	private static bool check_type(Type from, Type to) { }

	// RVA: 0x471C70 Offset: 0x471C70 VA: 0x471C70
	private static bool check_arguments(Type[] types, ParameterInfo[] args, bool allowByRefMatch) { }

	// RVA: 0x471E2C Offset: 0x471E2C VA: 0x471E2C Slot: 7
	public override MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x470690 Offset: 0x470690 VA: 0x470690
	private MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers, bool allowByRefMatch) { }

	// RVA: 0x471E4C Offset: 0x471E4C VA: 0x471E4C
	private MethodBase GetBetterMethod(MethodBase m1, MethodBase m2, Type[] types) { }

	// RVA: 0x472248 Offset: 0x472248 VA: 0x472248
	private int CompareCloserType(Type t1, Type t2) { }

	// RVA: 0x4724C8 Offset: 0x4724C8 VA: 0x4724C8 Slot: 8
	public override PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers) { }

	// RVA: 0x47279C Offset: 0x47279C VA: 0x47279C
	private static int check_arguments_with_score(Type[] types, ParameterInfo[] args) { }

	// RVA: 0x47288C Offset: 0x47288C VA: 0x47288C
	private static int check_type_with_score(Type from, Type to) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x9670C Offset: 0x9670C VA: 0x9670C
[FlagsAttribute] // RVA: 0x9670C Offset: 0x9670C VA: 0x9670C
[Serializable]
public enum BindingFlags // TypeDefIndex: 348
{
	// Fields
	public int value__; // 0x0
	public const BindingFlags Default = 0;
	public const BindingFlags IgnoreCase = 1;
	public const BindingFlags DeclaredOnly = 2;
	public const BindingFlags Instance = 4;
	public const BindingFlags Static = 8;
	public const BindingFlags Public = 16;
	public const BindingFlags NonPublic = 32;
	public const BindingFlags FlattenHierarchy = 64;
	public const BindingFlags InvokeMethod = 256;
	public const BindingFlags CreateInstance = 512;
	public const BindingFlags GetField = 1024;
	public const BindingFlags SetField = 2048;
	public const BindingFlags GetProperty = 4096;
	public const BindingFlags SetProperty = 8192;
	public const BindingFlags PutDispProperty = 16384;
	public const BindingFlags PutRefDispProperty = 32768;
	public const BindingFlags ExactBinding = 65536;
	public const BindingFlags SuppressChangeType = 131072;
	public const BindingFlags OptionalParamBinding = 262144;
	public const BindingFlags IgnoreReturn = 16777216;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96740 Offset: 0x96740 VA: 0x96740
[FlagsAttribute] // RVA: 0x96740 Offset: 0x96740 VA: 0x96740
[Serializable]
public enum CallingConventions // TypeDefIndex: 349
{
	// Fields
	public int value__; // 0x0
	public const CallingConventions Standard = 1;
	public const CallingConventions VarArgs = 2;
	public const CallingConventions Any = 3;
	public const CallingConventions HasThis = 32;
	public const CallingConventions ExplicitThis = 64;
}

// Namespace: System.Reflection
[ClassInterfaceAttribute] // RVA: 0x96774 Offset: 0x96774 VA: 0x96774
[ComDefaultInterfaceAttribute] // RVA: 0x96774 Offset: 0x96774 VA: 0x96774
[ComVisibleAttribute] // RVA: 0x96774 Offset: 0x96774 VA: 0x96774
[Serializable]
public abstract class ConstructorInfo : MethodBase, _ConstructorInfo // TypeDefIndex: 350
{
	// Fields
	[ComVisibleAttribute] // RVA: 0x9B2B4 Offset: 0x9B2B4 VA: 0x9B2B4
	public static readonly string ConstructorName; // 0x0
	[ComVisibleAttribute] // RVA: 0x9B2C8 Offset: 0x9B2C8 VA: 0x9B2C8
	public static readonly string TypeConstructorName; // 0x4

	// Properties
	[ComVisibleAttribute] // RVA: 0x9E0C8 Offset: 0x9E0C8 VA: 0x9E0C8
	public override MemberTypes MemberType { get; }

	// Methods

	// RVA: 0x27E1AC Offset: 0x27E1AC VA: 0x27E1AC
	protected void .ctor() { }

	// RVA: 0x27E1BC Offset: 0x27E1BC VA: 0x27E1BC
	private static void .cctor() { }

	// RVA: 0x27E24C Offset: 0x27E24C VA: 0x27E24C Slot: 7
	public override MemberTypes get_MemberType() { }

	[DebuggerHiddenAttribute] // RVA: 0x9C8B4 Offset: 0x9C8B4 VA: 0x9C8B4
	[DebuggerStepThroughAttribute] // RVA: 0x9C8B4 Offset: 0x9C8B4 VA: 0x9C8B4
	// RVA: 0x27E254 Offset: 0x27E254 VA: 0x27E254
	public object Invoke(object[] parameters) { }

	// RVA: -1 Offset: -1 Slot: 30
	public abstract object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96814 Offset: 0x96814 VA: 0x96814
[Serializable]
public sealed class CustomAttributeData // TypeDefIndex: 351
{
	// Fields
	private ConstructorInfo ctorInfo; // 0x8
	private IList<CustomAttributeTypedArgument> ctorArgs; // 0xC
	private IList<CustomAttributeNamedArgument> namedArgs; // 0x10

	// Properties
	[ComVisibleAttribute] // RVA: 0x9E0DC Offset: 0x9E0DC VA: 0x9E0DC
	public ConstructorInfo Constructor { get; }
	[ComVisibleAttribute] // RVA: 0x9E0F0 Offset: 0x9E0F0 VA: 0x9E0F0
	public IList<CustomAttributeTypedArgument> ConstructorArguments { get; }
	public IList<CustomAttributeNamedArgument> NamedArguments { get; }

	// Methods

	// RVA: 0x27E2FC Offset: 0x27E2FC VA: 0x27E2FC
	internal void .ctor(ConstructorInfo ctorInfo, object[] ctorArgs, object[] namedArgs) { }

	// RVA: 0x27E40C Offset: 0x27E40C VA: 0x27E40C
	public ConstructorInfo get_Constructor() { }

	// RVA: 0x27E414 Offset: 0x27E414 VA: 0x27E414
	public IList<CustomAttributeTypedArgument> get_ConstructorArguments() { }

	// RVA: 0x27E41C Offset: 0x27E41C VA: 0x27E41C
	public IList<CustomAttributeNamedArgument> get_NamedArguments() { }

	// RVA: 0x27E424 Offset: 0x27E424 VA: 0x27E424
	public static IList<CustomAttributeData> GetCustomAttributes(Assembly target) { }

	// RVA: 0x27E4A8 Offset: 0x27E4A8 VA: 0x27E4A8
	public static IList<CustomAttributeData> GetCustomAttributes(MemberInfo target) { }

	// RVA: 0x27E52C Offset: 0x27E52C VA: 0x27E52C
	public static IList<CustomAttributeData> GetCustomAttributes(Module target) { }

	// RVA: 0x27E5B0 Offset: 0x27E5B0 VA: 0x27E5B0
	public static IList<CustomAttributeData> GetCustomAttributes(ParameterInfo target) { }

	// RVA: 0x27E634 Offset: 0x27E634 VA: 0x27E634 Slot: 3
	public override string ToString() { }

	// RVA: -1 Offset: -1
	private static T[] UnboxValues<T>(object[] values) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BD970 Offset: 0x5BD970 VA: 0x5BD970
	|-CustomAttributeData.UnboxValues<CustomAttributeNamedArgument>
	|
	|-RVA: 0x5BDAEC Offset: 0x5BDAEC VA: 0x5BDAEC
	|-CustomAttributeData.UnboxValues<CustomAttributeTypedArgument>
	|
	|-RVA: 0x5BD7F0 Offset: 0x5BD7F0 VA: 0x5BD7F0
	|-CustomAttributeData.UnboxValues<object>
	*/

	// RVA: 0x27F104 Offset: 0x27F104 VA: 0x27F104 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x27FB0C Offset: 0x27FB0C VA: 0x27FB0C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96828 Offset: 0x96828 VA: 0x96828
[Serializable]
public struct CustomAttributeNamedArgument // TypeDefIndex: 352
{
	// Fields
	private CustomAttributeTypedArgument typedArgument; // 0x0
	private MemberInfo memberInfo; // 0x8

	// Methods

	// RVA: 0xC750C Offset: 0xC750C VA: 0xC750C Slot: 3
	public override string ToString() { }

	// RVA: 0xC7514 Offset: 0xC7514 VA: 0xC7514 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xC751C Offset: 0xC751C VA: 0xC751C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x9683C Offset: 0x9683C VA: 0x9683C
[Serializable]
public struct CustomAttributeTypedArgument // TypeDefIndex: 353
{
	// Fields
	private Type argumentType; // 0x0
	private object value; // 0x4

	// Methods

	// RVA: 0xC7580 Offset: 0xC7580 VA: 0xC7580 Slot: 3
	public override string ToString() { }

	// RVA: 0xC7588 Offset: 0xC7588 VA: 0xC7588 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xC7590 Offset: 0xC7590 VA: 0xC7590 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x96850 Offset: 0x96850 VA: 0x96850
[ComVisibleAttribute] // RVA: 0x96850 Offset: 0x96850 VA: 0x96850
[Serializable]
public enum EventAttributes // TypeDefIndex: 354
{
	// Fields
	public int value__; // 0x0
	public const EventAttributes None = 0;
	public const EventAttributes SpecialName = 512;
	public const EventAttributes ReservedMask = 1024;
	public const EventAttributes RTSpecialName = 1024;
}

// Namespace: System.Reflection
[ClassInterfaceAttribute] // RVA: 0x96884 Offset: 0x96884 VA: 0x96884
[ComDefaultInterfaceAttribute] // RVA: 0x96884 Offset: 0x96884 VA: 0x96884
[ComVisibleAttribute] // RVA: 0x96884 Offset: 0x96884 VA: 0x96884
[Serializable]
public abstract class EventInfo : MemberInfo, _EventInfo // TypeDefIndex: 355
{
	// Fields
	private EventInfo.AddEventAdapter cached_add_event; // 0x8

	// Properties
	public abstract EventAttributes Attributes { get; }
	public Type EventHandlerType { get; }
	public override MemberTypes MemberType { get; }

	// Methods

	// RVA: 0x2970C4 Offset: 0x2970C4 VA: 0x2970C4
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 14
	public abstract EventAttributes get_Attributes();

	// RVA: 0x2970D4 Offset: 0x2970D4 VA: 0x2970D4 Slot: 15
	public Type get_EventHandlerType() { }

	// RVA: 0x29716C Offset: 0x29716C VA: 0x29716C Slot: 7
	public override MemberTypes get_MemberType() { }

	// RVA: -1 Offset: -1 Slot: 16
	public abstract MethodInfo GetAddMethod(bool nonPublic);
}

// Namespace: 
private sealed class EventInfo.AddEventAdapter : MulticastDelegate // TypeDefIndex: 356
{
	// Methods

	// RVA: 0x297174 Offset: 0x297174 VA: 0x297174
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x297188 Offset: 0x297188 VA: 0x297188 Slot: 11
	public virtual void Invoke(object _this, Delegate dele) { }

	// RVA: 0x297564 Offset: 0x297564 VA: 0x297564 Slot: 12
	public virtual IAsyncResult BeginInvoke(object _this, Delegate dele, AsyncCallback callback, object object) { }

	// RVA: 0x29759C Offset: 0x29759C VA: 0x29759C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96924 Offset: 0x96924 VA: 0x96924
[FlagsAttribute] // RVA: 0x96924 Offset: 0x96924 VA: 0x96924
[Serializable]
public enum FieldAttributes // TypeDefIndex: 357
{
	// Fields
	public int value__; // 0x0
	public const FieldAttributes FieldAccessMask = 7;
	public const FieldAttributes PrivateScope = 0;
	public const FieldAttributes Private = 1;
	public const FieldAttributes FamANDAssem = 2;
	public const FieldAttributes Assembly = 3;
	public const FieldAttributes Family = 4;
	public const FieldAttributes FamORAssem = 5;
	public const FieldAttributes Public = 6;
	public const FieldAttributes Static = 16;
	public const FieldAttributes InitOnly = 32;
	public const FieldAttributes Literal = 64;
	public const FieldAttributes NotSerialized = 128;
	public const FieldAttributes HasFieldRVA = 256;
	public const FieldAttributes SpecialName = 512;
	public const FieldAttributes RTSpecialName = 1024;
	public const FieldAttributes HasFieldMarshal = 4096;
	public const FieldAttributes PinvokeImpl = 8192;
	public const FieldAttributes HasDefault = 32768;
	public const FieldAttributes ReservedMask = 38144;
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0x96958 Offset: 0x96958 VA: 0x96958
[ComVisibleAttribute] // RVA: 0x96958 Offset: 0x96958 VA: 0x96958
[ClassInterfaceAttribute] // RVA: 0x96958 Offset: 0x96958 VA: 0x96958
[Serializable]
public abstract class FieldInfo : MemberInfo, _FieldInfo // TypeDefIndex: 358
{
	// Properties
	public abstract FieldAttributes Attributes { get; }
	public abstract RuntimeFieldHandle FieldHandle { get; }
	public abstract Type FieldType { get; }
	public override MemberTypes MemberType { get; }
	public bool IsLiteral { get; }
	public bool IsStatic { get; }
	public bool IsPublic { get; }
	public bool IsNotSerialized { get; }
	internal virtual UnmanagedMarshal UMarshal { get; }

	// Methods

	// RVA: 0x2975A8 Offset: 0x2975A8 VA: 0x2975A8
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 14
	public abstract FieldAttributes get_Attributes();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract RuntimeFieldHandle get_FieldHandle();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract Type get_FieldType();

	// RVA: -1 Offset: -1 Slot: 17
	public abstract object GetValue(object obj);

	// RVA: 0x2975B0 Offset: 0x2975B0 VA: 0x2975B0 Slot: 7
	public override MemberTypes get_MemberType() { }

	// RVA: 0x2975B8 Offset: 0x2975B8 VA: 0x2975B8 Slot: 18
	public bool get_IsLiteral() { }

	// RVA: 0x295D10 Offset: 0x295D10 VA: 0x295D10 Slot: 19
	public bool get_IsStatic() { }

	// RVA: 0x2975D8 Offset: 0x2975D8 VA: 0x2975D8 Slot: 20
	public bool get_IsPublic() { }

	// RVA: 0x297604 Offset: 0x297604 VA: 0x297604 Slot: 21
	public bool get_IsNotSerialized() { }

	// RVA: -1 Offset: -1 Slot: 22
	public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture);

	[DebuggerHiddenAttribute] // RVA: 0x9C8E4 Offset: 0x9C8E4 VA: 0x9C8E4
	[DebuggerStepThroughAttribute] // RVA: 0x9C8E4 Offset: 0x9C8E4 VA: 0x9C8E4
	// RVA: 0x297624 Offset: 0x297624 VA: 0x297624 Slot: 23
	public void SetValue(object obj, object value) { }

	// RVA: 0x29765C Offset: 0x29765C VA: 0x29765C
	private static FieldInfo internal_from_handle_type(IntPtr field_handle, IntPtr type_handle) { }

	// RVA: 0x297660 Offset: 0x297660 VA: 0x297660
	public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle) { }

	// RVA: 0x297740 Offset: 0x297740 VA: 0x297740 Slot: 24
	internal virtual int GetFieldOffset() { }

	// RVA: 0x2977DC Offset: 0x2977DC VA: 0x2977DC
	private UnmanagedMarshal GetUnmanagedMarshal() { }

	// RVA: 0x2977E0 Offset: 0x2977E0 VA: 0x2977E0 Slot: 25
	internal virtual UnmanagedMarshal get_UMarshal() { }

	// RVA: 0x2977E4 Offset: 0x2977E4 VA: 0x2977E4
	internal object[] GetPseudoCustomAttributes() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x969F8 Offset: 0x969F8 VA: 0x969F8
[Serializable]
public enum ImageFileMachine // TypeDefIndex: 359
{
	// Fields
	public int value__; // 0x0
	public const ImageFileMachine I386 = 332;
	public const ImageFileMachine IA64 = 512;
	public const ImageFileMachine AMD64 = 34404;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96A0C Offset: 0x96A0C VA: 0x96A0C
public class LocalVariableInfo // TypeDefIndex: 360
{
	// Fields
	internal Type type; // 0x8
	internal bool is_pinned; // 0xC
	internal ushort position; // 0xE

	// Methods

	// RVA: 0x2897B0 Offset: 0x2897B0 VA: 0x2897B0
	internal void .ctor() { }

	// RVA: 0x297AD0 Offset: 0x297AD0 VA: 0x297AD0 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MemberInfoSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 361
{
	// Fields
	private readonly string _memberName; // 0x8
	private readonly string _memberSignature; // 0xC
	private readonly MemberTypes _memberType; // 0x10
	private readonly Type _reflectedType; // 0x14
	private readonly Type[] _genericArguments; // 0x18

	// Methods

	// RVA: 0x298064 Offset: 0x298064 VA: 0x298064
	private void .ctor(SerializationInfo info, StreamingContext ctx) { }

	// RVA: 0x29824C Offset: 0x29824C VA: 0x29824C
	public static void Serialize(SerializationInfo info, string name, Type klass, string signature, MemberTypes type) { }

	// RVA: 0x298270 Offset: 0x298270 VA: 0x298270
	public static void Serialize(SerializationInfo info, string name, Type klass, string signature, MemberTypes type, Type[] genericArguments) { }

	// RVA: 0x2985B4 Offset: 0x2985B4 VA: 0x2985B4 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x29863C Offset: 0x29863C VA: 0x29863C Slot: 5
	public object GetRealObject(StreamingContext context) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96A20 Offset: 0x96A20 VA: 0x96A20
[FlagsAttribute] // RVA: 0x96A20 Offset: 0x96A20 VA: 0x96A20
[Serializable]
public enum MemberTypes // TypeDefIndex: 362
{
	// Fields
	public int value__; // 0x0
	public const MemberTypes Constructor = 1;
	public const MemberTypes Event = 2;
	public const MemberTypes Field = 4;
	public const MemberTypes Method = 8;
	public const MemberTypes Property = 16;
	public const MemberTypes TypeInfo = 32;
	public const MemberTypes Custom = 64;
	public const MemberTypes NestedType = 128;
	public const MemberTypes All = 191;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96A54 Offset: 0x96A54 VA: 0x96A54
[FlagsAttribute] // RVA: 0x96A54 Offset: 0x96A54 VA: 0x96A54
[Serializable]
public enum MethodAttributes // TypeDefIndex: 363
{
	// Fields
	public int value__; // 0x0
	public const MethodAttributes MemberAccessMask = 7;
	public const MethodAttributes PrivateScope = 0;
	public const MethodAttributes Private = 1;
	public const MethodAttributes FamANDAssem = 2;
	public const MethodAttributes Assembly = 3;
	public const MethodAttributes Family = 4;
	public const MethodAttributes FamORAssem = 5;
	public const MethodAttributes Public = 6;
	public const MethodAttributes Static = 16;
	public const MethodAttributes Final = 32;
	public const MethodAttributes Virtual = 64;
	public const MethodAttributes HideBySig = 128;
	public const MethodAttributes VtableLayoutMask = 256;
	public const MethodAttributes CheckAccessOnOverride = 512;
	public const MethodAttributes ReuseSlot = 0;
	public const MethodAttributes NewSlot = 256;
	public const MethodAttributes Abstract = 1024;
	public const MethodAttributes SpecialName = 2048;
	public const MethodAttributes PinvokeImpl = 8192;
	public const MethodAttributes UnmanagedExport = 8;
	public const MethodAttributes RTSpecialName = 4096;
	public const MethodAttributes ReservedMask = 53248;
	public const MethodAttributes HasSecurity = 16384;
	public const MethodAttributes RequireSecObject = 32768;
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0x96A88 Offset: 0x96A88 VA: 0x96A88
[ComVisibleAttribute] // RVA: 0x96A88 Offset: 0x96A88 VA: 0x96A88
[ClassInterfaceAttribute] // RVA: 0x96A88 Offset: 0x96A88 VA: 0x96A88
[Serializable]
public abstract class MethodBase : MemberInfo, _MethodBase // TypeDefIndex: 364
{
	// Properties
	public abstract RuntimeMethodHandle MethodHandle { get; }
	public abstract MethodAttributes Attributes { get; }
	public virtual CallingConventions CallingConvention { get; }
	public bool IsPublic { get; }
	public bool IsStatic { get; }
	public bool IsVirtual { get; }
	public bool IsAbstract { get; }
	public virtual bool ContainsGenericParameters { get; }
	public virtual bool IsGenericMethodDefinition { get; }
	public virtual bool IsGenericMethod { get; }

	// Methods

	// RVA: 0x27E1B4 Offset: 0x27E1B4 VA: 0x27E1B4
	protected void .ctor() { }

	// RVA: 0x298E80 Offset: 0x298E80 VA: 0x298E80
	internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle) { }

	// RVA: 0x298EE8 Offset: 0x298EE8 VA: 0x298EE8
	private static MethodBase GetMethodFromIntPtr(IntPtr handle, IntPtr declaringType) { }

	// RVA: 0x299000 Offset: 0x299000 VA: 0x299000
	public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle) { }

	// RVA: 0x298FFC Offset: 0x298FFC VA: 0x298FFC
	private static MethodBase GetMethodFromHandleInternalType(IntPtr method_handle, IntPtr type_handle) { }

	// RVA: -1 Offset: -1 Slot: 14
	public abstract ParameterInfo[] GetParameters();

	// RVA: 0x299134 Offset: 0x299134 VA: 0x299134 Slot: 15
	internal virtual int GetParameterCount() { }

	[DebuggerStepThroughAttribute] // RVA: 0x9C914 Offset: 0x9C914 VA: 0x9C914
	[DebuggerHiddenAttribute] // RVA: 0x9C914 Offset: 0x9C914 VA: 0x9C914
	// RVA: 0x284D30 Offset: 0x284D30 VA: 0x284D30 Slot: 16
	public object Invoke(object obj, object[] parameters) { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);

	// RVA: -1 Offset: -1 Slot: 18
	public abstract RuntimeMethodHandle get_MethodHandle();

	// RVA: -1 Offset: -1 Slot: 19
	public abstract MethodAttributes get_Attributes();

	// RVA: 0x29915C Offset: 0x29915C VA: 0x29915C Slot: 20
	public virtual CallingConventions get_CallingConvention() { }

	// RVA: 0x299164 Offset: 0x299164 VA: 0x299164 Slot: 21
	public bool get_IsPublic() { }

	// RVA: 0x2963FC Offset: 0x2963FC VA: 0x2963FC Slot: 22
	public bool get_IsStatic() { }

	// RVA: 0x28A4FC Offset: 0x28A4FC VA: 0x28A4FC Slot: 23
	public bool get_IsVirtual() { }

	// RVA: 0x295D30 Offset: 0x295D30 VA: 0x295D30 Slot: 24
	public bool get_IsAbstract() { }

	// RVA: 0x299190 Offset: 0x299190 VA: 0x299190 Slot: 25
	internal virtual int get_next_table_index(object obj, int table, bool inc) { }

	[ComVisibleAttribute] // RVA: 0x9C944 Offset: 0x9C944 VA: 0x9C944
	// RVA: 0x2992B0 Offset: 0x2992B0 VA: 0x2992B0 Slot: 26
	public virtual Type[] GetGenericArguments() { }

	// RVA: 0x299338 Offset: 0x299338 VA: 0x299338 Slot: 27
	public virtual bool get_ContainsGenericParameters() { }

	// RVA: 0x299340 Offset: 0x299340 VA: 0x299340 Slot: 28
	public virtual bool get_IsGenericMethodDefinition() { }

	// RVA: 0x299348 Offset: 0x299348 VA: 0x299348 Slot: 29
	public virtual bool get_IsGenericMethod() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96B28 Offset: 0x96B28 VA: 0x96B28
[Serializable]
public enum MethodImplAttributes // TypeDefIndex: 365
{
	// Fields
	public int value__; // 0x0
	public const MethodImplAttributes CodeTypeMask = 3;
	public const MethodImplAttributes IL = 0;
	public const MethodImplAttributes Native = 1;
	public const MethodImplAttributes OPTIL = 2;
	public const MethodImplAttributes Runtime = 3;
	public const MethodImplAttributes ManagedMask = 4;
	public const MethodImplAttributes Unmanaged = 4;
	public const MethodImplAttributes Managed = 0;
	public const MethodImplAttributes ForwardRef = 16;
	public const MethodImplAttributes PreserveSig = 128;
	public const MethodImplAttributes InternalCall = 4096;
	public const MethodImplAttributes Synchronized = 32;
	public const MethodImplAttributes NoInlining = 8;
	public const MethodImplAttributes MaxMethodImplVal = 65535;
}

// Namespace: System.Reflection
[ClassInterfaceAttribute] // RVA: 0x96B3C Offset: 0x96B3C VA: 0x96B3C
[ComVisibleAttribute] // RVA: 0x96B3C Offset: 0x96B3C VA: 0x96B3C
[ComDefaultInterfaceAttribute] // RVA: 0x96B3C Offset: 0x96B3C VA: 0x96B3C
[Serializable]
public abstract class MethodInfo : MethodBase, _MethodInfo // TypeDefIndex: 366
{
	// Properties
	public override MemberTypes MemberType { get; }
	public virtual Type ReturnType { get; }
	public override bool IsGenericMethod { get; }
	public override bool IsGenericMethodDefinition { get; }
	public override bool ContainsGenericParameters { get; }

	// Methods

	// RVA: 0x289AC4 Offset: 0x289AC4 VA: 0x289AC4
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 30
	public abstract MethodInfo GetBaseDefinition();

	// RVA: 0x299350 Offset: 0x299350 VA: 0x299350 Slot: 7
	public override MemberTypes get_MemberType() { }

	// RVA: 0x299358 Offset: 0x299358 VA: 0x299358 Slot: 31
	public virtual Type get_ReturnType() { }

	// RVA: 0x299360 Offset: 0x299360 VA: 0x299360 Slot: 32
	public virtual MethodInfo MakeGenericMethod(Type[] typeArguments) { }

	[ComVisibleAttribute] // RVA: 0x9C958 Offset: 0x9C958 VA: 0x9C958
	// RVA: 0x299420 Offset: 0x299420 VA: 0x299420 Slot: 26
	public override Type[] GetGenericArguments() { }

	// RVA: 0x2994AC Offset: 0x2994AC VA: 0x2994AC Slot: 29
	public override bool get_IsGenericMethod() { }

	// RVA: 0x2994B4 Offset: 0x2994B4 VA: 0x2994B4 Slot: 28
	public override bool get_IsGenericMethodDefinition() { }

	// RVA: 0x2994BC Offset: 0x2994BC VA: 0x2994BC Slot: 27
	public override bool get_ContainsGenericParameters() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96BDC Offset: 0x96BDC VA: 0x96BDC
[Serializable]
public sealed class Missing : ISerializable // TypeDefIndex: 367
{
	// Fields
	public static readonly Missing Value; // 0x0

	// Methods

	// RVA: 0x2994C4 Offset: 0x2994C4 VA: 0x2994C4
	internal void .ctor() { }

	// RVA: 0x2994CC Offset: 0x2994CC VA: 0x2994CC
	private static void .cctor() { }

	[MonoTODOAttribute] // RVA: 0x9C96C Offset: 0x9C96C VA: 0x9C96C
	// RVA: 0x299540 Offset: 0x299540 VA: 0x299540 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0x96BF0 Offset: 0x96BF0 VA: 0x96BF0
[ClassInterfaceAttribute] // RVA: 0x96BF0 Offset: 0x96BF0 VA: 0x96BF0
[ComVisibleAttribute] // RVA: 0x96BF0 Offset: 0x96BF0 VA: 0x96BF0
[Serializable]
public class Module : ISerializable, ICustomAttributeProvider, _Module // TypeDefIndex: 368
{
	// Fields
	private const BindingFlags defaultBindingFlags = 28;
	public static readonly TypeFilter FilterTypeName; // 0x0
	public static readonly TypeFilter FilterTypeNameIgnoreCase; // 0x4
	private IntPtr _impl; // 0x8
	internal Assembly assembly; // 0xC
	internal string fqname; // 0x10
	internal string name; // 0x14
	internal string scopename; // 0x18
	internal bool is_resource; // 0x1C
	internal int token; // 0x20

	// Properties
	public Assembly Assembly { get; }
	public string Name { get; }
	public string ScopeName { get; }

	// Methods

	// RVA: 0x28AC50 Offset: 0x28AC50 VA: 0x28AC50
	internal void .ctor() { }

	// RVA: 0x299544 Offset: 0x299544 VA: 0x299544
	private static void .cctor() { }

	// RVA: 0x283770 Offset: 0x283770 VA: 0x283770
	public Assembly get_Assembly() { }

	// RVA: 0x281E18 Offset: 0x281E18 VA: 0x281E18
	public string get_Name() { }

	// RVA: 0x299614 Offset: 0x299614 VA: 0x299614
	public string get_ScopeName() { }

	// RVA: 0x29961C Offset: 0x29961C VA: 0x29961C Slot: 7
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x2996B0 Offset: 0x2996B0 VA: 0x2996B0 Slot: 8
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ComVisibleAttribute] // RVA: 0x9C97C Offset: 0x9C97C VA: 0x9C97C
	// RVA: 0x29978C Offset: 0x29978C VA: 0x29978C Slot: 9
	public virtual Type GetType(string className) { }

	[ComVisibleAttribute] // RVA: 0x9C990 Offset: 0x9C990 VA: 0x9C990
	// RVA: 0x2997BC Offset: 0x2997BC VA: 0x2997BC Slot: 10
	public virtual Type GetType(string className, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x29994C Offset: 0x29994C VA: 0x29994C
	private Type[] InternalGetTypes() { }

	// RVA: 0x299950 Offset: 0x299950 VA: 0x299950 Slot: 11
	public virtual Type[] GetTypes() { }

	// RVA: 0x299954 Offset: 0x299954 VA: 0x299954 Slot: 12
	public virtual bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x2999E8 Offset: 0x2999E8 VA: 0x2999E8
	public bool IsResource() { }

	// RVA: 0x2999F0 Offset: 0x2999F0 VA: 0x2999F0 Slot: 3
	public override string ToString() { }

	// RVA: 0x2999F8 Offset: 0x2999F8 VA: 0x2999F8
	private static bool filter_by_type_name(Type m, object filterCriteria) { }

	// RVA: 0x299BDC Offset: 0x299BDC VA: 0x299BDC
	private static bool filter_by_type_name_ignore_case(Type m, object filterCriteria) { }
}

// Namespace: System.Reflection
internal struct MonoEventInfo // TypeDefIndex: 369
{
	// Fields
	public Type declaring_type; // 0x0
	public Type reflected_type; // 0x4
	public string name; // 0x8
	public MethodInfo add_method; // 0xC
	public MethodInfo remove_method; // 0x10
	public MethodInfo raise_method; // 0x14
	public EventAttributes attrs; // 0x18
	public MethodInfo[] other_methods; // 0x1C

	// Methods

	// RVA: 0x29B040 Offset: 0x29B040 VA: 0x29B040
	private static void get_event_info(MonoEvent ev, out MonoEventInfo info) { }

	// RVA: 0x29ABE4 Offset: 0x29ABE4 VA: 0x29ABE4
	internal static MonoEventInfo GetEventInfo(MonoEvent ev) { }
}

// Namespace: System.Reflection
[Serializable]
internal sealed class MonoEvent : EventInfo, ISerializable // TypeDefIndex: 370
{
	// Fields
	private IntPtr klass; // 0xC
	private IntPtr handle; // 0x10

	// Properties
	public override EventAttributes Attributes { get; }
	public override Type DeclaringType { get; }
	public override Type ReflectedType { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x29ABAC Offset: 0x29ABAC VA: 0x29ABAC
	public void .ctor() { }

	// RVA: 0x29ABB4 Offset: 0x29ABB4 VA: 0x29ABB4 Slot: 14
	public override EventAttributes get_Attributes() { }

	// RVA: 0x29AC2C Offset: 0x29AC2C VA: 0x29AC2C Slot: 16
	public override MethodInfo GetAddMethod(bool nonPublic) { }

	// RVA: 0x29ACA0 Offset: 0x29ACA0 VA: 0x29ACA0 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x29ACD0 Offset: 0x29ACD0 VA: 0x29ACD0 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x29AD00 Offset: 0x29AD00 VA: 0x29AD00 Slot: 8
	public override string get_Name() { }

	// RVA: 0x29AD30 Offset: 0x29AD30 VA: 0x29AD30 Slot: 3
	public override string ToString() { }

	// RVA: 0x29ADFC Offset: 0x29ADFC VA: 0x29ADFC Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x29AE90 Offset: 0x29AE90 VA: 0x29AE90 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x29AF1C Offset: 0x29AF1C VA: 0x29AF1C Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x29AFB0 Offset: 0x29AFB0 VA: 0x29AFB0 Slot: 17
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoField : FieldInfo, ISerializable // TypeDefIndex: 371
{
	// Fields
	internal IntPtr klass; // 0x8
	internal RuntimeFieldHandle fhandle; // 0xC
	private string name; // 0x10
	private Type type; // 0x14
	private FieldAttributes attrs; // 0x18

	// Properties
	public override FieldAttributes Attributes { get; }
	public override RuntimeFieldHandle FieldHandle { get; }
	public override Type FieldType { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x29B044 Offset: 0x29B044 VA: 0x29B044
	public void .ctor() { }

	// RVA: 0x29B04C Offset: 0x29B04C VA: 0x29B04C Slot: 14
	public override FieldAttributes get_Attributes() { }

	// RVA: 0x29B054 Offset: 0x29B054 VA: 0x29B054 Slot: 15
	public override RuntimeFieldHandle get_FieldHandle() { }

	// RVA: 0x29B05C Offset: 0x29B05C VA: 0x29B05C Slot: 16
	public override Type get_FieldType() { }

	// RVA: 0x29B064 Offset: 0x29B064 VA: 0x29B064
	private Type GetParentType(bool declaring) { }

	// RVA: 0x29B068 Offset: 0x29B068 VA: 0x29B068 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x29B070 Offset: 0x29B070 VA: 0x29B070 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x29B078 Offset: 0x29B078 VA: 0x29B078 Slot: 8
	public override string get_Name() { }

	// RVA: 0x29B080 Offset: 0x29B080 VA: 0x29B080 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x29B114 Offset: 0x29B114 VA: 0x29B114 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x29B1A0 Offset: 0x29B1A0 VA: 0x29B1A0 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x29B234 Offset: 0x29B234 VA: 0x29B234 Slot: 24
	internal override int GetFieldOffset() { }

	// RVA: 0x29B238 Offset: 0x29B238 VA: 0x29B238
	private object GetValueInternal(object obj) { }

	// RVA: 0x29B23C Offset: 0x29B23C VA: 0x29B23C Slot: 17
	public override object GetValue(object obj) { }

	// RVA: 0x29B560 Offset: 0x29B560 VA: 0x29B560 Slot: 3
	public override string ToString() { }

	// RVA: 0x29B600 Offset: 0x29B600 VA: 0x29B600
	private static void SetValueInternal(FieldInfo fi, object obj, object value) { }

	// RVA: 0x29B604 Offset: 0x29B604 VA: 0x29B604 Slot: 22
	public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }

	// RVA: 0x29BB64 Offset: 0x29BB64 VA: 0x29BB64
	internal MonoField Clone(string newName) { }

	// RVA: 0x29BC60 Offset: 0x29BC60 VA: 0x29BC60 Slot: 26
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x29B47C Offset: 0x29B47C VA: 0x29B47C
	private void CheckGeneric() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoGenericMethod : MonoMethod // TypeDefIndex: 372
{
	// Properties
	public override Type ReflectedType { get; }

	// Methods

	// RVA: 0x29BD7C Offset: 0x29BD7C VA: 0x29BD7C
	internal void .ctor() { }

	// RVA: 0x29BE1C Offset: 0x29BE1C VA: 0x29BE1C Slot: 9
	public override Type get_ReflectedType() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoGenericCMethod : MonoCMethod // TypeDefIndex: 373
{
	// Properties
	public override Type ReflectedType { get; }

	// Methods

	// RVA: 0x29BCE4 Offset: 0x29BCE4 VA: 0x29BCE4
	internal void .ctor() { }

	// RVA: 0x29BD78 Offset: 0x29BD78 VA: 0x29BD78 Slot: 9
	public override Type get_ReflectedType() { }
}

// Namespace: System.Reflection
internal struct MonoMethodInfo // TypeDefIndex: 374
{
	// Fields
	private Type parent; // 0x0
	private Type ret; // 0x4
	internal MethodAttributes attrs; // 0x8
	internal MethodImplAttributes iattrs; // 0xC
	private CallingConventions callconv; // 0x10

	// Methods

	// RVA: 0x29D3A0 Offset: 0x29D3A0 VA: 0x29D3A0
	private static void get_method_info(IntPtr handle, out MonoMethodInfo info) { }

	// RVA: 0x29C8EC Offset: 0x29C8EC VA: 0x29C8EC
	internal static MonoMethodInfo GetMethodInfo(IntPtr handle) { }

	// RVA: 0x29A654 Offset: 0x29A654 VA: 0x29A654
	internal static Type GetDeclaringType(IntPtr handle) { }

	// RVA: 0x29BE60 Offset: 0x29BE60 VA: 0x29BE60
	internal static Type GetReturnType(IntPtr handle) { }

	// RVA: 0x29A574 Offset: 0x29A574 VA: 0x29A574
	internal static MethodAttributes GetAttributes(IntPtr handle) { }

	// RVA: 0x29A5E0 Offset: 0x29A5E0 VA: 0x29A5E0
	internal static CallingConventions GetCallingConvention(IntPtr handle) { }

	// RVA: 0x29D3A4 Offset: 0x29D3A4 VA: 0x29D3A4
	private static ParameterInfo[] get_parameter_info(IntPtr handle, MemberInfo member) { }

	// RVA: 0x299EA8 Offset: 0x299EA8 VA: 0x299EA8
	internal static ParameterInfo[] GetParametersInfo(IntPtr handle, MemberInfo member) { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoMethod : MethodInfo, ISerializable // TypeDefIndex: 375
{
	// Fields
	internal IntPtr mhandle; // 0x8
	private string name; // 0xC
	private Type reftype; // 0x10

	// Properties
	public override Type ReturnType { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override bool IsGenericMethodDefinition { get; }
	public override bool IsGenericMethod { get; }
	public override bool ContainsGenericParameters { get; }

	// Methods

	// RVA: 0x29BE14 Offset: 0x29BE14 VA: 0x29BE14
	internal void .ctor() { }

	// RVA: 0x284CFC Offset: 0x284CFC VA: 0x284CFC
	internal void .ctor(RuntimeMethodHandle mhandle) { }

	// RVA: 0x29A6B0 Offset: 0x29A6B0 VA: 0x29A6B0
	internal static string get_name(MethodBase method) { }

	// RVA: 0x29BE20 Offset: 0x29BE20 VA: 0x29BE20
	internal static MonoMethod get_base_definition(MonoMethod method) { }

	// RVA: 0x29BE24 Offset: 0x29BE24 VA: 0x29BE24 Slot: 30
	public override MethodInfo GetBaseDefinition() { }

	// RVA: 0x29BE28 Offset: 0x29BE28 VA: 0x29BE28 Slot: 31
	public override Type get_ReturnType() { }

	// RVA: 0x29BE94 Offset: 0x29BE94 VA: 0x29BE94 Slot: 14
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x29BF44 Offset: 0x29BF44 VA: 0x29BF44
	internal object InternalInvoke(object obj, object[] parameters, out Exception exc) { }

	// RVA: 0x29BF48 Offset: 0x29BF48 VA: 0x29BF48 Slot: 17
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x29C410 Offset: 0x29C410 VA: 0x29C410 Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x29C440 Offset: 0x29C440 VA: 0x29C440 Slot: 19
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x29C478 Offset: 0x29C478 VA: 0x29C478 Slot: 20
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x29C4B0 Offset: 0x29C4B0 VA: 0x29C4B0 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x29C4B8 Offset: 0x29C4B8 VA: 0x29C4B8 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x29C4F0 Offset: 0x29C4F0 VA: 0x29C4F0 Slot: 8
	public override string get_Name() { }

	// RVA: 0x29C518 Offset: 0x29C518 VA: 0x29C518 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x29C5AC Offset: 0x29C5AC VA: 0x29C5AC Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x29C638 Offset: 0x29C638 VA: 0x29C638 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x29C6CC Offset: 0x29C6CC VA: 0x29C6CC
	internal static DllImportAttribute GetDllImportAttribute(IntPtr mhandle) { }

	// RVA: 0x29C6D0 Offset: 0x29C6D0 VA: 0x29C6D0
	internal object[] GetPseudoCustomAttributes() { }

	// RVA: 0x29C938 Offset: 0x29C938 VA: 0x29C938
	private static bool ShouldPrintFullName(Type type) { }

	// RVA: 0x29CA24 Offset: 0x29CA24 VA: 0x29CA24 Slot: 3
	public override string ToString() { }

	// RVA: 0x29CF98 Offset: 0x29CF98 VA: 0x29CF98 Slot: 33
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x29D068 Offset: 0x29D068 VA: 0x29D068 Slot: 32
	public override MethodInfo MakeGenericMethod(Type[] methodInstantiation) { }

	// RVA: 0x29D298 Offset: 0x29D298 VA: 0x29D298
	private MethodInfo MakeGenericMethod_impl(Type[] types) { }

	// RVA: 0x29D29C Offset: 0x29D29C VA: 0x29D29C Slot: 26
	public override Type[] GetGenericArguments() { }

	// RVA: 0x29D2A0 Offset: 0x29D2A0 VA: 0x29D2A0 Slot: 28
	public override bool get_IsGenericMethodDefinition() { }

	// RVA: 0x29D2A4 Offset: 0x29D2A4 VA: 0x29D2A4 Slot: 29
	public override bool get_IsGenericMethod() { }

	// RVA: 0x29D2A8 Offset: 0x29D2A8 VA: 0x29D2A8 Slot: 27
	public override bool get_ContainsGenericParameters() { }
}

// Namespace: System.Reflection
internal class MonoCMethod : ConstructorInfo, ISerializable // TypeDefIndex: 376
{
	// Fields
	internal IntPtr mhandle; // 0x8
	private string name; // 0xC
	private Type reftype; // 0x10

	// Properties
	public override RuntimeMethodHandle MethodHandle { get; }
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x299E18 Offset: 0x299E18 VA: 0x299E18
	public void .ctor() { }

	// RVA: 0x299E9C Offset: 0x299E9C VA: 0x299E9C Slot: 14
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x299EAC Offset: 0x299EAC VA: 0x299EAC
	internal object InternalInvoke(object obj, object[] parameters, out Exception exc) { }

	// RVA: 0x299EB0 Offset: 0x299EB0 VA: 0x299EB0 Slot: 17
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x29A4CC Offset: 0x29A4CC VA: 0x29A4CC Slot: 30
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x29A50C Offset: 0x29A50C VA: 0x29A50C Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x29A53C Offset: 0x29A53C VA: 0x29A53C Slot: 19
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x29A5A8 Offset: 0x29A5A8 VA: 0x29A5A8 Slot: 20
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x29A614 Offset: 0x29A614 VA: 0x29A614 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x29A61C Offset: 0x29A61C VA: 0x29A61C Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x29A688 Offset: 0x29A688 VA: 0x29A688 Slot: 8
	public override string get_Name() { }

	// RVA: 0x29A6B4 Offset: 0x29A6B4 VA: 0x29A6B4 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x29A748 Offset: 0x29A748 VA: 0x29A748 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x29A7D4 Offset: 0x29A7D4 VA: 0x29A7D4 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x29A868 Offset: 0x29A868 VA: 0x29A868 Slot: 3
	public override string ToString() { }

	// RVA: 0x29AB28 Offset: 0x29AB28 VA: 0x29AB28 Slot: 31
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
internal struct MonoPropertyInfo // TypeDefIndex: 377
{
	// Fields
	public Type parent; // 0x0
	public string name; // 0x4
	public MethodInfo get_method; // 0x8
	public MethodInfo set_method; // 0xC
	public PropertyAttributes attrs; // 0x10

	// Methods

	// RVA: 0x1D406C Offset: 0x1D406C VA: 0x1D406C
	internal static void get_property_info(MonoProperty prop, ref MonoPropertyInfo info, PInfo req_info) { }

	// RVA: 0x1D4070 Offset: 0x1D4070 VA: 0x1D4070
	internal static Type[] GetTypeModifiers(MonoProperty prop, bool optional) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x96C90 Offset: 0x96C90 VA: 0x96C90
internal enum PInfo // TypeDefIndex: 378
{
	// Fields
	public int value__; // 0x0
	public const PInfo Attributes = 1;
	public const PInfo GetMethod = 2;
	public const PInfo SetMethod = 4;
	public const PInfo ReflectedType = 8;
	public const PInfo DeclaringType = 16;
	public const PInfo Name = 32;
}

// Namespace: System.Reflection
[Serializable]
internal class MonoProperty : PropertyInfo, ISerializable // TypeDefIndex: 379
{
	// Fields
	internal IntPtr klass; // 0x8
	internal IntPtr prop; // 0xC
	private MonoPropertyInfo info; // 0x10
	private PInfo cached; // 0x24
	private MonoProperty.GetterAdapter cached_getter; // 0x28

	// Properties
	public override PropertyAttributes Attributes { get; }
	public override bool CanRead { get; }
	public override bool CanWrite { get; }
	public override Type PropertyType { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x29D3A8 Offset: 0x29D3A8 VA: 0x29D3A8
	public void .ctor() { }

	// RVA: 0x29D3B0 Offset: 0x29D3B0 VA: 0x29D3B0
	private void CachePropertyInfo(PInfo flags) { }

	// RVA: 0x29D3F4 Offset: 0x29D3F4 VA: 0x29D3F4 Slot: 14
	public override PropertyAttributes get_Attributes() { }

	// RVA: 0x29D434 Offset: 0x29D434 VA: 0x29D434 Slot: 15
	public override bool get_CanRead() { }

	// RVA: 0x29D47C Offset: 0x29D47C VA: 0x29D47C Slot: 16
	public override bool get_CanWrite() { }

	// RVA: 0x29D4C4 Offset: 0x29D4C4 VA: 0x29D4C4 Slot: 17
	public override Type get_PropertyType() { }

	// RVA: 0x29D5B4 Offset: 0x29D5B4 VA: 0x29D5B4 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x29D5F4 Offset: 0x29D5F4 VA: 0x29D5F4 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x29D634 Offset: 0x29D634 VA: 0x29D634 Slot: 8
	public override string get_Name() { }

	// RVA: 0x29D674 Offset: 0x29D674 VA: 0x29D674 Slot: 18
	public override MethodInfo[] GetAccessors(bool nonPublic) { }

	// RVA: 0x29D87C Offset: 0x29D87C VA: 0x29D87C Slot: 20
	public override MethodInfo GetGetMethod(bool nonPublic) { }

	// RVA: 0x29D8F0 Offset: 0x29D8F0 VA: 0x29D8F0 Slot: 21
	public override ParameterInfo[] GetIndexParameters() { }

	// RVA: 0x29DAF0 Offset: 0x29DAF0 VA: 0x29DAF0 Slot: 22
	public override MethodInfo GetSetMethod(bool nonPublic) { }

	// RVA: 0x29DB64 Offset: 0x29DB64 VA: 0x29DB64 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x29DBF4 Offset: 0x29DBF4 VA: 0x29DBF4 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x29DC7C Offset: 0x29DC7C VA: 0x29DC7C Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: -1 Offset: -1
	private static object GetterAdapterFrame<T, R>(MonoProperty.Getter<T, R> getter, object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5232D8 Offset: 0x5232D8 VA: 0x5232D8
	|-MonoProperty.GetterAdapterFrame<object, object>
	*/

	// RVA: -1 Offset: -1
	private static object StaticGetterAdapterFrame<R>(MonoProperty.StaticGetter<R> getter, object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5233C0 Offset: 0x5233C0 VA: 0x5233C0
	|-MonoProperty.StaticGetterAdapterFrame<object>
	*/

	// RVA: 0x29DD0C Offset: 0x29DD0C VA: 0x29DD0C
	private static MonoProperty.GetterAdapter CreateGetterDelegate(MethodInfo method) { }

	// RVA: 0x29E1D0 Offset: 0x29E1D0 VA: 0x29E1D0 Slot: 23
	public override object GetValue(object obj, object[] index) { }

	// RVA: 0x29E208 Offset: 0x29E208 VA: 0x29E208 Slot: 24
	public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) { }

	// RVA: 0x29E468 Offset: 0x29E468 VA: 0x29E468 Slot: 26
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) { }

	// RVA: 0x29E704 Offset: 0x29E704 VA: 0x29E704 Slot: 3
	public override string ToString() { }

	// RVA: 0x29E7F4 Offset: 0x29E7F4 VA: 0x29E7F4 Slot: 27
	public override Type[] GetOptionalCustomModifiers() { }

	// RVA: 0x29E89C Offset: 0x29E89C VA: 0x29E89C Slot: 28
	public override Type[] GetRequiredCustomModifiers() { }

	// RVA: 0x29E944 Offset: 0x29E944 VA: 0x29E944 Slot: 29
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: 
private sealed class MonoProperty.GetterAdapter : MulticastDelegate // TypeDefIndex: 380
{
	// Methods

	// RVA: 0x1D3C60 Offset: 0x1D3C60 VA: 0x1D3C60
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1D3C74 Offset: 0x1D3C74 VA: 0x1D3C74 Slot: 11
	public virtual object Invoke(object _this) { }

	// RVA: 0x1D4034 Offset: 0x1D4034 VA: 0x1D4034 Slot: 12
	public virtual IAsyncResult BeginInvoke(object _this, AsyncCallback callback, object object) { }

	// RVA: 0x1D4060 Offset: 0x1D4060 VA: 0x1D4060 Slot: 13
	public virtual object EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class MonoProperty.Getter<T, R> : MulticastDelegate // TypeDefIndex: 381
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5769F8 Offset: 0x5769F8 VA: 0x5769F8
	|-MonoProperty.Getter<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual R Invoke(T _this) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x576A0C Offset: 0x576A0C VA: 0x576A0C
	|-MonoProperty.Getter<object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T _this, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x576DCC Offset: 0x576DCC VA: 0x576DCC
	|-MonoProperty.Getter<object, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual R EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x576DF8 Offset: 0x576DF8 VA: 0x576DF8
	|-MonoProperty.Getter<object, object>.EndInvoke
	*/
}

// Namespace: 
private sealed class MonoProperty.StaticGetter<R> : MulticastDelegate // TypeDefIndex: 382
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x576E04 Offset: 0x576E04 VA: 0x576E04
	|-MonoProperty.StaticGetter<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual R Invoke() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x576E18 Offset: 0x576E18 VA: 0x576E18
	|-MonoProperty.StaticGetter<object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57702C Offset: 0x57702C VA: 0x57702C
	|-MonoProperty.StaticGetter<object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual R EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x577058 Offset: 0x577058 VA: 0x577058
	|-MonoProperty.StaticGetter<object>.EndInvoke
	*/
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96CA0 Offset: 0x96CA0 VA: 0x96CA0
[FlagsAttribute] // RVA: 0x96CA0 Offset: 0x96CA0 VA: 0x96CA0
[Serializable]
public enum ParameterAttributes // TypeDefIndex: 383
{
	// Fields
	public int value__; // 0x0
	public const ParameterAttributes None = 0;
	public const ParameterAttributes In = 1;
	public const ParameterAttributes Out = 2;
	public const ParameterAttributes Lcid = 4;
	public const ParameterAttributes Retval = 8;
	public const ParameterAttributes Optional = 16;
	public const ParameterAttributes ReservedMask = 61440;
	public const ParameterAttributes HasDefault = 4096;
	public const ParameterAttributes HasFieldMarshal = 8192;
	public const ParameterAttributes Reserved3 = 16384;
	public const ParameterAttributes Reserved4 = 32768;
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0x96CD4 Offset: 0x96CD4 VA: 0x96CD4
[ComVisibleAttribute] // RVA: 0x96CD4 Offset: 0x96CD4 VA: 0x96CD4
[ClassInterfaceAttribute] // RVA: 0x96CD4 Offset: 0x96CD4 VA: 0x96CD4
[Serializable]
public class ParameterInfo : ICustomAttributeProvider, _ParameterInfo // TypeDefIndex: 384
{
	// Fields
	protected Type ClassImpl; // 0x8
	protected object DefaultValueImpl; // 0xC
	protected MemberInfo MemberImpl; // 0x10
	protected string NameImpl; // 0x14
	protected int PositionImpl; // 0x18
	protected ParameterAttributes AttrsImpl; // 0x1C
	private UnmanagedMarshal marshalAs; // 0x20

	// Properties
	public virtual Type ParameterType { get; }
	public virtual ParameterAttributes Attributes { get; }
	public bool IsIn { get; }
	public bool IsOptional { get; }
	public bool IsOut { get; }
	public bool IsRetval { get; }
	public virtual MemberInfo Member { get; }
	public virtual string Name { get; }
	public virtual int Position { get; }

	// Methods

	// RVA: 0x1D4074 Offset: 0x1D4074 VA: 0x1D4074
	protected void .ctor() { }

	// RVA: 0x1D407C Offset: 0x1D407C VA: 0x1D407C
	internal void .ctor(ParameterBuilder pb, Type type, MemberInfo member, int position) { }

	// RVA: 0x1D4118 Offset: 0x1D4118 VA: 0x1D4118
	internal void .ctor(ParameterInfo pinfo, MemberInfo member) { }

	// RVA: 0x1D41F0 Offset: 0x1D41F0 VA: 0x1D41F0 Slot: 3
	public override string ToString() { }

	// RVA: 0x1D44C4 Offset: 0x1D44C4 VA: 0x1D44C4 Slot: 6
	public virtual Type get_ParameterType() { }

	// RVA: 0x1D44CC Offset: 0x1D44CC VA: 0x1D44CC Slot: 7
	public virtual ParameterAttributes get_Attributes() { }

	// RVA: 0x1D44D4 Offset: 0x1D44D4 VA: 0x1D44D4
	public bool get_IsIn() { }

	// RVA: 0x1D44F4 Offset: 0x1D44F4 VA: 0x1D44F4
	public bool get_IsOptional() { }

	// RVA: 0x1D4514 Offset: 0x1D4514 VA: 0x1D4514
	public bool get_IsOut() { }

	// RVA: 0x1D44A4 Offset: 0x1D44A4 VA: 0x1D44A4
	public bool get_IsRetval() { }

	// RVA: 0x1D4534 Offset: 0x1D4534 VA: 0x1D4534 Slot: 8
	public virtual MemberInfo get_Member() { }

	// RVA: 0x1D453C Offset: 0x1D453C VA: 0x1D453C Slot: 9
	public virtual string get_Name() { }

	// RVA: 0x1D4544 Offset: 0x1D4544 VA: 0x1D4544 Slot: 10
	public virtual int get_Position() { }

	// RVA: 0x1D454C Offset: 0x1D454C VA: 0x1D454C Slot: 11
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x1D45E0 Offset: 0x1D45E0 VA: 0x1D45E0 Slot: 12
	public virtual bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x1D4674 Offset: 0x1D4674 VA: 0x1D4674
	internal object[] GetPseudoCustomAttributes() { }
}

// Namespace: System.Reflection
[DefaultMemberAttribute] // RVA: 0x96D74 Offset: 0x96D74 VA: 0x96D74
[ComVisibleAttribute] // RVA: 0x96D74 Offset: 0x96D74 VA: 0x96D74
[Serializable]
public struct ParameterModifier // TypeDefIndex: 385
{
	// Fields
	private bool[] _byref; // 0x0
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96DC0 Offset: 0x96DC0 VA: 0x96DC0
[CLSCompliantAttribute] // RVA: 0x96DC0 Offset: 0x96DC0 VA: 0x96DC0
[Serializable]
public sealed class Pointer : ISerializable // TypeDefIndex: 386
{
	// Fields
	private void* data; // 0x8
	private Type type; // 0xC

	// Methods

	// RVA: 0x1D49DC Offset: 0x1D49DC VA: 0x1D49DC
	private void .ctor() { }

	// RVA: 0x1D49E4 Offset: 0x1D49E4 VA: 0x1D49E4 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1D4A80 Offset: 0x1D4A80 VA: 0x1D4A80
	public static object Box(void* ptr, Type type) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96DF8 Offset: 0x96DF8 VA: 0x96DF8
[FlagsAttribute] // RVA: 0x96DF8 Offset: 0x96DF8 VA: 0x96DF8
[Serializable]
public enum PortableExecutableKinds // TypeDefIndex: 387
{
	// Fields
	public int value__; // 0x0
	public const PortableExecutableKinds NotAPortableExecutableImage = 0;
	public const PortableExecutableKinds ILOnly = 1;
	public const PortableExecutableKinds Required32Bit = 2;
	public const PortableExecutableKinds PE32Plus = 4;
	public const PortableExecutableKinds Unmanaged32Bit = 8;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96E2C Offset: 0x96E2C VA: 0x96E2C
[Serializable]
public enum ProcessorArchitecture // TypeDefIndex: 388
{
	// Fields
	public int value__; // 0x0
	public const ProcessorArchitecture None = 0;
	public const ProcessorArchitecture MSIL = 1;
	public const ProcessorArchitecture X86 = 2;
	public const ProcessorArchitecture IA64 = 3;
	public const ProcessorArchitecture Amd64 = 4;
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x96E40 Offset: 0x96E40 VA: 0x96E40
[ComVisibleAttribute] // RVA: 0x96E40 Offset: 0x96E40 VA: 0x96E40
[Serializable]
public enum PropertyAttributes // TypeDefIndex: 389
{
	// Fields
	public int value__; // 0x0
	public const PropertyAttributes None = 0;
	public const PropertyAttributes SpecialName = 512;
	public const PropertyAttributes ReservedMask = 62464;
	public const PropertyAttributes RTSpecialName = 1024;
	public const PropertyAttributes HasDefault = 4096;
	public const PropertyAttributes Reserved2 = 8192;
	public const PropertyAttributes Reserved3 = 16384;
	public const PropertyAttributes Reserved4 = 32768;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96E74 Offset: 0x96E74 VA: 0x96E74
[ComDefaultInterfaceAttribute] // RVA: 0x96E74 Offset: 0x96E74 VA: 0x96E74
[ClassInterfaceAttribute] // RVA: 0x96E74 Offset: 0x96E74 VA: 0x96E74
[Serializable]
public abstract class PropertyInfo : MemberInfo, _PropertyInfo // TypeDefIndex: 390
{
	// Properties
	public abstract PropertyAttributes Attributes { get; }
	public abstract bool CanRead { get; }
	public abstract bool CanWrite { get; }
	public override MemberTypes MemberType { get; }
	public abstract Type PropertyType { get; }

	// Methods

	// RVA: 0x1D4BD8 Offset: 0x1D4BD8 VA: 0x1D4BD8
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 14
	public abstract PropertyAttributes get_Attributes();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract bool get_CanRead();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract bool get_CanWrite();

	// RVA: 0x1D4BE0 Offset: 0x1D4BE0 VA: 0x1D4BE0 Slot: 7
	public override MemberTypes get_MemberType() { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract Type get_PropertyType();

	// RVA: -1 Offset: -1 Slot: 18
	public abstract MethodInfo[] GetAccessors(bool nonPublic);

	// RVA: 0x1D4BE8 Offset: 0x1D4BE8 VA: 0x1D4BE8 Slot: 19
	public MethodInfo GetGetMethod() { }

	// RVA: -1 Offset: -1 Slot: 20
	public abstract MethodInfo GetGetMethod(bool nonPublic);

	// RVA: -1 Offset: -1 Slot: 21
	public abstract ParameterInfo[] GetIndexParameters();

	// RVA: -1 Offset: -1 Slot: 22
	public abstract MethodInfo GetSetMethod(bool nonPublic);

	[DebuggerHiddenAttribute] // RVA: 0x9C9A4 Offset: 0x9C9A4 VA: 0x9C9A4
	[DebuggerStepThroughAttribute] // RVA: 0x9C9A4 Offset: 0x9C9A4 VA: 0x9C9A4
	// RVA: 0x1D4BFC Offset: 0x1D4BFC VA: 0x1D4BFC Slot: 23
	public virtual object GetValue(object obj, object[] index) { }

	// RVA: -1 Offset: -1 Slot: 24
	public abstract object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);

	[DebuggerHiddenAttribute] // RVA: 0x9C9D4 Offset: 0x9C9D4 VA: 0x9C9D4
	[DebuggerStepThroughAttribute] // RVA: 0x9C9D4 Offset: 0x9C9D4 VA: 0x9C9D4
	// RVA: 0x1D4C34 Offset: 0x1D4C34 VA: 0x1D4C34 Slot: 25
	public virtual void SetValue(object obj, object value, object[] index) { }

	// RVA: -1 Offset: -1 Slot: 26
	public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);

	// RVA: 0x1D4C68 Offset: 0x1D4C68 VA: 0x1D4C68 Slot: 27
	public virtual Type[] GetOptionalCustomModifiers() { }

	// RVA: 0x1D4CF4 Offset: 0x1D4CF4 VA: 0x1D4CF4 Slot: 28
	public virtual Type[] GetRequiredCustomModifiers() { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x96F14 Offset: 0x96F14 VA: 0x96F14
[ComVisibleAttribute] // RVA: 0x96F14 Offset: 0x96F14 VA: 0x96F14
[Serializable]
public enum ResourceAttributes // TypeDefIndex: 391
{
	// Fields
	public int value__; // 0x0
	public const ResourceAttributes Public = 1;
	public const ResourceAttributes Private = 2;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96F48 Offset: 0x96F48 VA: 0x96F48
[Serializable]
public class StrongNameKeyPair : ISerializable, IDeserializationCallback // TypeDefIndex: 392
{
	// Fields
	private byte[] _publicKey; // 0x8
	private string _keyPairContainer; // 0xC
	private bool _keyPairExported; // 0x10
	private byte[] _keyPairArray; // 0x14
	private RSA _rsa; // 0x18

	// Methods

	// RVA: 0x1D4D80 Offset: 0x1D4D80 VA: 0x1D4D80
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1D5048 Offset: 0x1D5048 VA: 0x1D5048 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1D51F0 Offset: 0x1D51F0 VA: 0x1D51F0 Slot: 5
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x1D51F4 Offset: 0x1D51F4 VA: 0x1D51F4
	private RSA GetRSA() { }

	// RVA: 0x1D5300 Offset: 0x1D5300 VA: 0x1D5300
	internal StrongName StrongName() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96F5C Offset: 0x96F5C VA: 0x96F5C
[Serializable]
public class TargetException : Exception // TypeDefIndex: 393
{
	// Methods

	// RVA: 0x1D53C4 Offset: 0x1D53C4 VA: 0x1D53C4
	public void .ctor() { }

	// RVA: 0x1D5438 Offset: 0x1D5438 VA: 0x1D5438
	public void .ctor(string message) { }

	// RVA: 0x1D5440 Offset: 0x1D5440 VA: 0x1D5440
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96F70 Offset: 0x96F70 VA: 0x96F70
[Serializable]
public sealed class TargetInvocationException : Exception // TypeDefIndex: 394
{
	// Methods

	// RVA: 0x1D5460 Offset: 0x1D5460 VA: 0x1D5460
	public void .ctor(Exception inner) { }

	// RVA: 0x1D54D0 Offset: 0x1D54D0 VA: 0x1D54D0
	public void .ctor(string message, Exception inner) { }

	// RVA: 0x1D54D8 Offset: 0x1D54D8 VA: 0x1D54D8
	internal void .ctor(SerializationInfo info, StreamingContext sc) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96F84 Offset: 0x96F84 VA: 0x96F84
[Serializable]
public sealed class TargetParameterCountException : Exception // TypeDefIndex: 395
{
	// Methods

	// RVA: 0x1D54F8 Offset: 0x1D54F8 VA: 0x1D54F8
	public void .ctor() { }

	// RVA: 0x1D556C Offset: 0x1D556C VA: 0x1D556C
	public void .ctor(string message) { }

	// RVA: 0x1D5574 Offset: 0x1D5574 VA: 0x1D5574
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x96F98 Offset: 0x96F98 VA: 0x96F98
[ComVisibleAttribute] // RVA: 0x96F98 Offset: 0x96F98 VA: 0x96F98
[Serializable]
public enum TypeAttributes // TypeDefIndex: 396
{
	// Fields
	public int value__; // 0x0
	public const TypeAttributes VisibilityMask = 7;
	public const TypeAttributes NotPublic = 0;
	public const TypeAttributes Public = 1;
	public const TypeAttributes NestedPublic = 2;
	public const TypeAttributes NestedPrivate = 3;
	public const TypeAttributes NestedFamily = 4;
	public const TypeAttributes NestedAssembly = 5;
	public const TypeAttributes NestedFamANDAssem = 6;
	public const TypeAttributes NestedFamORAssem = 7;
	public const TypeAttributes LayoutMask = 24;
	public const TypeAttributes AutoLayout = 0;
	public const TypeAttributes SequentialLayout = 8;
	public const TypeAttributes ExplicitLayout = 16;
	public const TypeAttributes ClassSemanticsMask = 32;
	public const TypeAttributes Class = 0;
	public const TypeAttributes Interface = 32;
	public const TypeAttributes Abstract = 128;
	public const TypeAttributes Sealed = 256;
	public const TypeAttributes SpecialName = 1024;
	public const TypeAttributes Import = 4096;
	public const TypeAttributes Serializable = 8192;
	public const TypeAttributes StringFormatMask = 196608;
	public const TypeAttributes AnsiClass = 0;
	public const TypeAttributes UnicodeClass = 65536;
	public const TypeAttributes AutoClass = 131072;
	public const TypeAttributes BeforeFieldInit = 1048576;
	public const TypeAttributes ReservedMask = 264192;
	public const TypeAttributes RTSpecialName = 2048;
	public const TypeAttributes HasSecurity = 262144;
	public const TypeAttributes CustomFormatClass = 196608;
	public const TypeAttributes CustomFormatMask = 12582912;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x96FCC Offset: 0x96FCC VA: 0x96FCC
[Serializable]
public class TypeDelegator : Type // TypeDefIndex: 397
{
	// Fields
	protected Type typeImpl; // 0xC

	// Properties
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override string FullName { get; }
	public override Module Module { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override Type UnderlyingSystemType { get; }

	// Methods

	// RVA: 0x1D5594 Offset: 0x1D5594 VA: 0x1D5594
	protected void .ctor() { }

	// RVA: 0x1D5618 Offset: 0x1D5618 VA: 0x1D5618 Slot: 14
	public override Assembly get_Assembly() { }

	// RVA: 0x1D564C Offset: 0x1D564C VA: 0x1D564C Slot: 15
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x1D5680 Offset: 0x1D5680 VA: 0x1D5680 Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x1D56B4 Offset: 0x1D56B4 VA: 0x1D56B4 Slot: 18
	public override string get_FullName() { }

	// RVA: 0x1D56E8 Offset: 0x1D56E8 VA: 0x1D56E8 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x1D571C Offset: 0x1D571C VA: 0x1D571C Slot: 8
	public override string get_Name() { }

	// RVA: 0x1D5750 Offset: 0x1D5750 VA: 0x1D5750 Slot: 34
	public override string get_Namespace() { }

	// RVA: 0x1D5784 Offset: 0x1D5784 VA: 0x1D5784 Slot: 35
	public override RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x1D57B8 Offset: 0x1D57B8 VA: 0x1D57B8 Slot: 36
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x1D57EC Offset: 0x1D57EC VA: 0x1D57EC Slot: 62
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x1D5818 Offset: 0x1D5818 VA: 0x1D5818 Slot: 61
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0x9CA04 Offset: 0x9CA04 VA: 0x9CA04
	// RVA: 0x1D5878 Offset: 0x1D5878 VA: 0x1D5878 Slot: 74
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x1D58B4 Offset: 0x1D58B4 VA: 0x1D58B4 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x1D58F0 Offset: 0x1D58F0 VA: 0x1D58F0 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x1D5934 Offset: 0x1D5934 VA: 0x1D5934 Slot: 44
	public override Type GetElementType() { }

	// RVA: 0x1D5968 Offset: 0x1D5968 VA: 0x1D5968 Slot: 45
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x1D59AC Offset: 0x1D59AC VA: 0x1D59AC Slot: 46
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x1D59F0 Offset: 0x1D59F0 VA: 0x1D59F0 Slot: 47
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x1D5A2C Offset: 0x1D5A2C VA: 0x1D5A2C Slot: 40
	public override Type[] GetInterfaces() { }

	// RVA: 0x1D5A60 Offset: 0x1D5A60 VA: 0x1D5A60 Slot: 53
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x1D5AC8 Offset: 0x1D5AC8 VA: 0x1D5AC8 Slot: 54
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x1D5B04 Offset: 0x1D5B04 VA: 0x1D5B04 Slot: 60
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x1D5B6C Offset: 0x1D5B6C VA: 0x1D5B6C Slot: 63
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x1D5B98 Offset: 0x1D5B98 VA: 0x1D5B98 Slot: 75
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x1D5C28 Offset: 0x1D5C28 VA: 0x1D5C28 Slot: 64
	protected override bool IsArrayImpl() { }

	// RVA: 0x1D5C54 Offset: 0x1D5C54 VA: 0x1D5C54 Slot: 65
	protected override bool IsByRefImpl() { }

	// RVA: 0x1D5C80 Offset: 0x1D5C80 VA: 0x1D5C80 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x1D5CC4 Offset: 0x1D5CC4 VA: 0x1D5CC4 Slot: 66
	protected override bool IsPointerImpl() { }

	// RVA: 0x1D5CF0 Offset: 0x1D5CF0 VA: 0x1D5CF0 Slot: 67
	protected override bool IsPrimitiveImpl() { }

	// RVA: 0x1D5D1C Offset: 0x1D5D1C VA: 0x1D5D1C Slot: 68
	protected override bool IsValueTypeImpl() { }
}

// Namespace: System.Resources
[ComVisibleAttribute] // RVA: 0x96FE0 Offset: 0x96FE0 VA: 0x96FE0
public interface IResourceReader : IEnumerable, IDisposable // TypeDefIndex: 398
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Close();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IDictionaryEnumerator GetEnumerator();
}

// Namespace: System.Resources
[AttributeUsageAttribute] // RVA: 0x96FF4 Offset: 0x96FF4 VA: 0x96FF4
[ComVisibleAttribute] // RVA: 0x96FF4 Offset: 0x96FF4 VA: 0x96FF4
public sealed class NeutralResourcesLanguageAttribute : Attribute // TypeDefIndex: 399
{
	// Fields
	private string culture; // 0x8

	// Methods

	// RVA: 0x1D67C4 Offset: 0x1D67C4 VA: 0x1D67C4
	public void .ctor(string cultureName) { }
}

// Namespace: System.Resources
[ComVisibleAttribute] // RVA: 0x9702C Offset: 0x9702C VA: 0x9702C
[Serializable]
public class ResourceManager // TypeDefIndex: 400
{
	// Fields
	private static Hashtable ResourceCache; // 0x0
	private static Hashtable NonExistent; // 0x4
	public static readonly int HeaderVersionNumber; // 0x8
	public static readonly int MagicNumber; // 0xC
	private Type resourceSetType; // 0x8

	// Methods

	// RVA: 0x1D6880 Offset: 0x1D6880 VA: 0x1D6880
	protected void .ctor() { }

	// RVA: 0x1D6924 Offset: 0x1D6924 VA: 0x1D6924
	private static void .cctor() { }
}

// Namespace: System.Resources
internal enum PredefinedResourceType // TypeDefIndex: 401
{
	// Fields
	public int value__; // 0x0
	public const PredefinedResourceType Null = 0;
	public const PredefinedResourceType String = 1;
	public const PredefinedResourceType Bool = 2;
	public const PredefinedResourceType Char = 3;
	public const PredefinedResourceType Byte = 4;
	public const PredefinedResourceType SByte = 5;
	public const PredefinedResourceType Int16 = 6;
	public const PredefinedResourceType UInt16 = 7;
	public const PredefinedResourceType Int32 = 8;
	public const PredefinedResourceType UInt32 = 9;
	public const PredefinedResourceType Int64 = 10;
	public const PredefinedResourceType UInt64 = 11;
	public const PredefinedResourceType Single = 12;
	public const PredefinedResourceType Double = 13;
	public const PredefinedResourceType Decimal = 14;
	public const PredefinedResourceType DateTime = 15;
	public const PredefinedResourceType TimeSpan = 16;
	public const PredefinedResourceType ByteArray = 32;
	public const PredefinedResourceType Stream = 33;
	public const PredefinedResourceType FistCustom = 64;
}

// Namespace: System.Resources
[ComVisibleAttribute] // RVA: 0x97040 Offset: 0x97040 VA: 0x97040
public sealed class ResourceReader : IEnumerable, IDisposable, IResourceReader // TypeDefIndex: 402
{
	// Fields
	private BinaryReader reader; // 0x8
	private object readerLock; // 0xC
	private IFormatter formatter; // 0x10
	internal int resourceCount; // 0x14
	private int typeCount; // 0x18
	private string[] typeNames; // 0x1C
	private int[] hashes; // 0x20
	private ResourceReader.ResourceInfo[] infos; // 0x24
	private int dataSectionOffset; // 0x28
	private long nameSectionOffset; // 0x30
	private int resource_ver; // 0x38
	private ResourceReader.ResourceCacheItem[] cache; // 0x3C
	private object cache_lock; // 0x40

	// Methods

	// RVA: 0x1D6A18 Offset: 0x1D6A18 VA: 0x1D6A18
	public void .ctor(Stream stream) { }

	// RVA: 0x1D79D8 Offset: 0x1D79D8 VA: 0x1D79D8
	public void .ctor(string fileName) { }

	// RVA: 0x1D7B28 Offset: 0x1D7B28 VA: 0x1D7B28 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x1D7BEC Offset: 0x1D7BEC VA: 0x1D7BEC Slot: 5
	private void System.IDisposable.Dispose() { }

	// RVA: 0x1D6C30 Offset: 0x1D6C30 VA: 0x1D6C30
	private void ReadHeaders() { }

	// RVA: 0x1D7C7C Offset: 0x1D7C7C VA: 0x1D7C7C
	private void CreateResourceInfo(long position, ref ResourceReader.ResourceInfo info) { }

	// RVA: 0x1D7F0C Offset: 0x1D7F0C VA: 0x1D7F0C
	private int Read7BitEncodedInt() { }

	// RVA: 0x1D7F7C Offset: 0x1D7F7C VA: 0x1D7F7C
	private object ReadValueVer2(int type_index) { }

	// RVA: 0x1D87E4 Offset: 0x1D87E4 VA: 0x1D87E4
	private object ReadValueVer1(Type type) { }

	// RVA: 0x1D8658 Offset: 0x1D8658 VA: 0x1D8658
	private object ReadNonPredefinedValue(Type exp_type) { }

	// RVA: 0x1D9054 Offset: 0x1D9054 VA: 0x1D9054
	private void LoadResourceValues(ResourceReader.ResourceCacheItem[] store) { }

	// RVA: 0x1D9394 Offset: 0x1D9394 VA: 0x1D9394 Slot: 6
	public void Close() { }

	// RVA: 0x1D93D8 Offset: 0x1D93D8 VA: 0x1D93D8 Slot: 7
	public IDictionaryEnumerator GetEnumerator() { }

	// RVA: 0x1D7C30 Offset: 0x1D7C30 VA: 0x1D7C30
	private void Dispose(bool disposing) { }
}

// Namespace: 
private struct ResourceReader.ResourceInfo // TypeDefIndex: 403
{
	// Fields
	public readonly long ValuePosition; // 0x0
	public readonly string ResourceName; // 0x8
	public readonly int TypeIndex; // 0xC

	// Methods

	// RVA: 0xC5994 Offset: 0xC5994 VA: 0xC5994
	public void .ctor(string resourceName, long valuePosition, int type_index) { }
}

// Namespace: 
private struct ResourceReader.ResourceCacheItem // TypeDefIndex: 404
{
	// Fields
	public readonly string ResourceName; // 0x0
	public readonly object ResourceValue; // 0x4

	// Methods

	// RVA: 0xC5908 Offset: 0xC5908 VA: 0xC5908
	public void .ctor(string name, object value) { }
}

// Namespace: 
internal sealed class ResourceReader.ResourceEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 405
{
	// Fields
	private ResourceReader reader; // 0x8
	private int index; // 0xC
	private bool finished; // 0x10

	// Properties
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }
	public object Current { get; }

	// Methods

	// RVA: 0x1D94C4 Offset: 0x1D94C4 VA: 0x1D94C4
	internal void .ctor(ResourceReader readerToEnumerate) { }

	// RVA: 0x1D9674 Offset: 0x1D9674 VA: 0x1D9674 Slot: 7
	public DictionaryEntry get_Entry() { }

	// RVA: 0x1D97C0 Offset: 0x1D97C0 VA: 0x1D97C0 Slot: 8
	public object get_Key() { }

	// RVA: 0x1D9924 Offset: 0x1D9924 VA: 0x1D9924 Slot: 9
	public object get_Value() { }

	// RVA: 0x1D9A88 Offset: 0x1D9A88 VA: 0x1D9A88 Slot: 4
	public object get_Current() { }

	// RVA: 0x1D9B0C Offset: 0x1D9B0C VA: 0x1D9B0C Slot: 5
	public bool MoveNext() { }

	// RVA: 0x1D9C18 Offset: 0x1D9C18 VA: 0x1D9C18 Slot: 6
	public void Reset() { }

	// RVA: 0x1D94F8 Offset: 0x1D94F8 VA: 0x1D94F8
	private void FillCache() { }
}

// Namespace: System.Resources
[ComVisibleAttribute] // RVA: 0x97054 Offset: 0x97054 VA: 0x97054
[Serializable]
public class ResourceSet : IEnumerable, IDisposable // TypeDefIndex: 406
{
	// Fields
	protected IResourceReader Reader; // 0x8
	protected Hashtable Table; // 0xC
	private bool resources_read; // 0x10
	private bool disposed; // 0x11

	// Methods

	// RVA: 0x1D9CE8 Offset: 0x1D9CE8 VA: 0x1D9CE8
	protected void .ctor() { }

	// RVA: 0x1D9D6C Offset: 0x1D9D6C VA: 0x1D9D6C
	public void .ctor(Stream stream) { }

	// RVA: 0x1D9E10 Offset: 0x1D9E10 VA: 0x1D9E10
	internal void .ctor(UnmanagedMemoryStream stream) { }

	// RVA: 0x1D9EB4 Offset: 0x1D9EB4 VA: 0x1D9EB4
	public void .ctor(string fileName) { }

	// RVA: 0x1D9F58 Offset: 0x1D9F58 VA: 0x1D9F58 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x1D9F68 Offset: 0x1D9F68 VA: 0x1D9F68 Slot: 5
	public void Dispose() { }

	// RVA: 0x1D9F9C Offset: 0x1D9F9C VA: 0x1D9F9C Slot: 6
	protected virtual void Dispose(bool disposing) { }

	[ComVisibleAttribute] // RVA: 0x9CA18 Offset: 0x9CA18 VA: 0x9CA18
	// RVA: 0x1DA08C Offset: 0x1DA08C VA: 0x1DA08C Slot: 7
	public virtual IDictionaryEnumerator GetEnumerator() { }

	// RVA: 0x1DA178 Offset: 0x1DA178 VA: 0x1DA178
	private object GetObjectInternal(string name, bool ignoreCase) { }

	// RVA: 0x1DA710 Offset: 0x1DA710 VA: 0x1DA710 Slot: 8
	public virtual object GetObject(string name) { }

	// RVA: 0x1DA718 Offset: 0x1DA718 VA: 0x1DA718 Slot: 9
	public virtual object GetObject(string name, bool ignoreCase) { }

	// RVA: 0x1DA71C Offset: 0x1DA71C VA: 0x1DA71C Slot: 10
	protected virtual void ReadResources() { }
}

// Namespace: System.Resources
[Serializable]
internal class RuntimeResourceSet : ResourceSet // TypeDefIndex: 407
{
	// Methods

	// RVA: 0x1DAB90 Offset: 0x1DAB90 VA: 0x1DAB90
	public void .ctor(UnmanagedMemoryStream stream) { }

	// RVA: 0x1DAB94 Offset: 0x1DAB94 VA: 0x1DAB94
	public void .ctor(Stream stream) { }

	// RVA: 0x1DAB98 Offset: 0x1DAB98 VA: 0x1DAB98
	public void .ctor(string fileName) { }

	// RVA: 0x1DAB9C Offset: 0x1DAB9C VA: 0x1DAB9C Slot: 8
	public override object GetObject(string name) { }

	// RVA: 0x1DAD78 Offset: 0x1DAD78 VA: 0x1DAD78 Slot: 9
	public override object GetObject(string name, bool ignoreCase) { }

	// RVA: 0x1DAC68 Offset: 0x1DAC68 VA: 0x1DAC68
	private object CloneDisposableObjectIfPossible(object value) { }
}

// Namespace: System.Resources
[AttributeUsageAttribute] // RVA: 0x97068 Offset: 0x97068 VA: 0x97068
[ComVisibleAttribute] // RVA: 0x97068 Offset: 0x97068 VA: 0x97068
public sealed class SatelliteContractVersionAttribute : Attribute // TypeDefIndex: 408
{
	// Fields
	private Version ver; // 0x8

	// Methods

	// RVA: 0x1DAE48 Offset: 0x1DAE48 VA: 0x1DAE48
	public void .ctor(string version) { }
}

// Namespace: System.Resources
internal enum Win32ResourceType // TypeDefIndex: 409
{
	// Fields
	public int value__; // 0x0
	public const Win32ResourceType RT_CURSOR = 1;
	public const Win32ResourceType RT_FONT = 8;
	public const Win32ResourceType RT_BITMAP = 2;
	public const Win32ResourceType RT_ICON = 3;
	public const Win32ResourceType RT_MENU = 4;
	public const Win32ResourceType RT_DIALOG = 5;
	public const Win32ResourceType RT_STRING = 6;
	public const Win32ResourceType RT_FONTDIR = 7;
	public const Win32ResourceType RT_ACCELERATOR = 9;
	public const Win32ResourceType RT_RCDATA = 10;
	public const Win32ResourceType RT_MESSAGETABLE = 11;
	public const Win32ResourceType RT_GROUP_CURSOR = 12;
	public const Win32ResourceType RT_GROUP_ICON = 14;
	public const Win32ResourceType RT_VERSION = 16;
	public const Win32ResourceType RT_DLGINCLUDE = 17;
	public const Win32ResourceType RT_PLUGPLAY = 19;
	public const Win32ResourceType RT_VXD = 20;
	public const Win32ResourceType RT_ANICURSOR = 21;
	public const Win32ResourceType RT_ANIICON = 22;
	public const Win32ResourceType RT_HTML = 23;
}

// Namespace: System.Resources
internal class NameOrId // TypeDefIndex: 410
{
	// Fields
	private string name; // 0x8
	private int id; // 0xC

	// Properties
	public bool IsName { get; }
	public int Id { get; }

	// Methods

	// RVA: 0x1D6670 Offset: 0x1D6670 VA: 0x1D6670
	public bool get_IsName() { }

	// RVA: 0x1D6680 Offset: 0x1D6680 VA: 0x1D6680
	public int get_Id() { }

	// RVA: 0x1D6688 Offset: 0x1D6688 VA: 0x1D6688 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Resources
internal abstract class Win32Resource // TypeDefIndex: 411
{
	// Fields
	private NameOrId type; // 0x8
	private NameOrId name; // 0xC

	// Properties
	public Win32ResourceType ResourceType { get; }

	// Methods

	// RVA: 0x1DAECC Offset: 0x1DAECC VA: 0x1DAECC
	public Win32ResourceType get_ResourceType() { }

	// RVA: 0x1DAF18 Offset: 0x1DAF18 VA: 0x1DAF18 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Resources
[DefaultMemberAttribute] // RVA: 0x970A0 Offset: 0x970A0 VA: 0x970A0
internal class Win32VersionResource : Win32Resource // TypeDefIndex: 412
{}

// Namespace: System.Runtime.CompilerServices
[ComVisibleAttribute] // RVA: 0x970D4 Offset: 0x970D4 VA: 0x970D4
[FlagsAttribute] // RVA: 0x970D4 Offset: 0x970D4 VA: 0x970D4
[Serializable]
public enum CompilationRelaxations // TypeDefIndex: 413
{
	// Fields
	public int value__; // 0x0
	public const CompilationRelaxations NoStringInterning = 8;
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x97108 Offset: 0x97108 VA: 0x97108
[ComVisibleAttribute] // RVA: 0x97108 Offset: 0x97108 VA: 0x97108
[Serializable]
public class CompilationRelaxationsAttribute : Attribute // TypeDefIndex: 414
{
	// Fields
	private int relax; // 0x8

	// Methods

	// RVA: 0x1DB1E4 Offset: 0x1DB1E4 VA: 0x1DB1E4
	public void .ctor(CompilationRelaxations relaxations) { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x97140 Offset: 0x97140 VA: 0x97140
[Serializable]
public sealed class DefaultDependencyAttribute : Attribute // TypeDefIndex: 415
{
	// Fields
	private LoadHint hint; // 0x8

	// Methods

	// RVA: 0x1DB2C4 Offset: 0x1DB2C4 VA: 0x1DB2C4
	public void .ctor(LoadHint loadHintArgument) { }
}

// Namespace: System.Runtime.CompilerServices
[ComVisibleAttribute] // RVA: 0x97154 Offset: 0x97154 VA: 0x97154
public static class IsVolatile // TypeDefIndex: 416
{}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public enum LoadHint // TypeDefIndex: 417
{
	// Fields
	public int value__; // 0x0
	public const LoadHint Default = 0;
	public const LoadHint Always = 1;
	public const LoadHint Sometimes = 2;
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x97168 Offset: 0x97168 VA: 0x97168
[Serializable]
public sealed class StringFreezingAttribute : Attribute // TypeDefIndex: 418
{
	// Methods

	// RVA: 0x1DB43C Offset: 0x1DB43C VA: 0x1DB43C
	public void .ctor() { }
}

// Namespace: System.Runtime.ConstrainedExecution
[Serializable]
public enum Cer // TypeDefIndex: 419
{
	// Fields
	public int value__; // 0x0
	public const Cer None = 0;
	public const Cer MayFail = 1;
	public const Cer Success = 2;
}

// Namespace: System.Runtime.ConstrainedExecution
[Serializable]
public enum Consistency // TypeDefIndex: 420
{
	// Fields
	public int value__; // 0x0
	public const Consistency MayCorruptAppDomain = 1;
	public const Consistency MayCorruptInstance = 2;
	public const Consistency MayCorruptProcess = 0;
	public const Consistency WillNotCorruptState = 3;
}

// Namespace: System.Runtime.ConstrainedExecution
[ComVisibleAttribute] // RVA: 0x9719C Offset: 0x9719C VA: 0x9719C
public abstract class CriticalFinalizerObject // TypeDefIndex: 421
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0x9CA2C Offset: 0x9CA2C VA: 0x9CA2C
	// RVA: 0x1DB444 Offset: 0x1DB444 VA: 0x1DB444
	protected void .ctor() { }

	[ReliabilityContractAttribute] // RVA: 0x9CA44 Offset: 0x9CA44 VA: 0x9CA44
	// RVA: 0x1DB44C Offset: 0x1DB44C VA: 0x1DB44C Slot: 1
	protected override void Finalize() { }
}

// Namespace: System.Runtime.ConstrainedExecution
[AttributeUsageAttribute] // RVA: 0x971B0 Offset: 0x971B0 VA: 0x971B0
public sealed class ReliabilityContractAttribute : Attribute // TypeDefIndex: 422
{
	// Fields
	private Consistency consistency; // 0x8
	private Cer cer; // 0xC

	// Methods

	// RVA: 0x1DB454 Offset: 0x1DB454 VA: 0x1DB454
	public void .ctor(Consistency consistencyGuarantee, Cer cer) { }
}

// Namespace: System.Runtime.Hosting
[ComVisibleAttribute] // RVA: 0x971E4 Offset: 0x971E4 VA: 0x971E4
[Serializable]
public sealed class ActivationArguments // TypeDefIndex: 423
{}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x971F8 Offset: 0x971F8 VA: 0x971F8
[Serializable]
public class COMException : ExternalException // TypeDefIndex: 424
{
	// Methods

	// RVA: 0x1DB47C Offset: 0x1DB47C VA: 0x1DB47C
	public void .ctor() { }

	// RVA: 0x1DB508 Offset: 0x1DB508 VA: 0x1DB508
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1DB548 Offset: 0x1DB548 VA: 0x1DB548 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x9720C Offset: 0x9720C VA: 0x9720C
[Serializable]
public enum CallingConvention // TypeDefIndex: 425
{
	// Fields
	public int value__; // 0x0
	public const CallingConvention Winapi = 1;
	public const CallingConvention Cdecl = 2;
	public const CallingConvention StdCall = 3;
	public const CallingConvention ThisCall = 4;
	public const CallingConvention FastCall = 5;
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x97220 Offset: 0x97220 VA: 0x97220
[Serializable]
public enum CharSet // TypeDefIndex: 426
{
	// Fields
	public int value__; // 0x0
	public const CharSet None = 1;
	public const CharSet Ansi = 2;
	public const CharSet Unicode = 3;
	public const CharSet Auto = 4;
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x97234 Offset: 0x97234 VA: 0x97234
[ComVisibleAttribute] // RVA: 0x97234 Offset: 0x97234 VA: 0x97234
public sealed class ClassInterfaceAttribute : Attribute // TypeDefIndex: 427
{
	// Fields
	private ClassInterfaceType ciType; // 0x8

	// Methods

	// RVA: 0x1DB968 Offset: 0x1DB968 VA: 0x1DB968
	public void .ctor(ClassInterfaceType classInterfaceType) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x97280 Offset: 0x97280 VA: 0x97280
[Serializable]
public enum ClassInterfaceType // TypeDefIndex: 428
{
	// Fields
	public int value__; // 0x0
	public const ClassInterfaceType None = 0;
	public const ClassInterfaceType AutoDispatch = 1;
	public const ClassInterfaceType AutoDual = 2;
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x97294 Offset: 0x97294 VA: 0x97294
[ComVisibleAttribute] // RVA: 0x97294 Offset: 0x97294 VA: 0x97294
public sealed class ComDefaultInterfaceAttribute : Attribute // TypeDefIndex: 429
{
	// Fields
	private Type _type; // 0x8

	// Methods

	// RVA: 0x1DB988 Offset: 0x1DB988 VA: 0x1DB988
	public void .ctor(Type defaultInterface) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x972E0 Offset: 0x972E0 VA: 0x972E0
[Serializable]
public enum ComInterfaceType // TypeDefIndex: 430
{
	// Fields
	public int value__; // 0x0
	public const ComInterfaceType InterfaceIsDual = 0;
	public const ComInterfaceType InterfaceIsIUnknown = 1;
	public const ComInterfaceType InterfaceIsIDispatch = 2;
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x972F4 Offset: 0x972F4 VA: 0x972F4
[AttributeUsageAttribute] // RVA: 0x972F4 Offset: 0x972F4 VA: 0x972F4
public sealed class DispIdAttribute : Attribute // TypeDefIndex: 431
{
	// Fields
	private int id; // 0x8

	// Methods

	// RVA: 0x1DB9D0 Offset: 0x1DB9D0 VA: 0x1DB9D0
	public void .ctor(int dispId) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x97340 Offset: 0x97340 VA: 0x97340
[Serializable]
public sealed class ErrorWrapper // TypeDefIndex: 432
{
	// Fields
	private int errorCode; // 0x8
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x97354 Offset: 0x97354 VA: 0x97354
[Serializable]
public class ExternalException : SystemException // TypeDefIndex: 433
{
	// Methods

	// RVA: 0x1DB480 Offset: 0x1DB480 VA: 0x1DB480
	public void .ctor() { }

	// RVA: 0x1DB528 Offset: 0x1DB528 VA: 0x1DB528
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Runtime.InteropServices
[MonoTODOAttribute] // RVA: 0x97368 Offset: 0x97368 VA: 0x97368
[ComVisibleAttribute] // RVA: 0x97368 Offset: 0x97368 VA: 0x97368
public struct GCHandle // TypeDefIndex: 434
{
	// Fields
	private int handle; // 0x0

	// Properties
	public bool IsAllocated { get; }
	public object Target { get; }

	// Methods

	// RVA: 0xC59AC Offset: 0xC59AC VA: 0xC59AC
	private void .ctor(object value, GCHandleType type) { }

	// RVA: 0xC59D4 Offset: 0xC59D4 VA: 0xC59D4
	public bool get_IsAllocated() { }

	// RVA: 0xC59E4 Offset: 0xC59E4 VA: 0xC59E4
	public object get_Target() { }

	// RVA: 0x1DBB38 Offset: 0x1DBB38 VA: 0x1DBB38
	public static GCHandle Alloc(object value, GCHandleType type) { }

	// RVA: 0xC59EC Offset: 0xC59EC VA: 0xC59EC
	public void Free() { }

	// RVA: 0x1DBB34 Offset: 0x1DBB34 VA: 0x1DBB34
	private static object GetTarget(int handle) { }

	// RVA: 0x1DBA60 Offset: 0x1DBA60 VA: 0x1DBA60
	private static int GetTargetHandle(object obj, int handle, GCHandleType type) { }

	// RVA: 0x1DBB6C Offset: 0x1DBB6C VA: 0x1DBB6C
	private static void FreeHandle(int handle) { }

	// RVA: 0xC5A0C Offset: 0xC5A0C VA: 0xC5A0C Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0xC5A14 Offset: 0xC5A14 VA: 0xC5A14 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x973B4 Offset: 0x973B4 VA: 0x973B4
[Serializable]
public enum GCHandleType // TypeDefIndex: 435
{
	// Fields
	public int value__; // 0x0
	public const GCHandleType Weak = 0;
	public const GCHandleType WeakTrackResurrection = 1;
	public const GCHandleType Normal = 2;
	public const GCHandleType Pinned = 3;
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x973C8 Offset: 0x973C8 VA: 0x973C8
[AttributeUsageAttribute] // RVA: 0x973C8 Offset: 0x973C8 VA: 0x973C8
public sealed class InterfaceTypeAttribute : Attribute // TypeDefIndex: 436
{
	// Fields
	private ComInterfaceType intType; // 0x8

	// Methods

	// RVA: 0x1DBC2C Offset: 0x1DBC2C VA: 0x1DBC2C
	public void .ctor(ComInterfaceType interfaceType) { }
}

// Namespace: System.Runtime.InteropServices
public static class Marshal // TypeDefIndex: 437
{
	// Fields
	public static readonly int SystemMaxDBCSCharSize; // 0x0
	public static readonly int SystemDefaultCharSize; // 0x4

	// Methods

	// RVA: 0x1DBC4C Offset: 0x1DBC4C VA: 0x1DBC4C
	private static void .cctor() { }

	// RVA: 0x1DBCF8 Offset: 0x1DBCF8 VA: 0x1DBCF8
	private static void copy_from_unmanaged(IntPtr source, int startIndex, Array destination, int length) { }

	// RVA: 0x1DBCFC Offset: 0x1DBCFC VA: 0x1DBCFC
	public static void Copy(IntPtr source, byte[] destination, int startIndex, int length) { }

	// RVA: 0x1DBD94 Offset: 0x1DBD94 VA: 0x1DBD94
	public static void Copy(IntPtr source, char[] destination, int startIndex, int length) { }

	// RVA: 0x1DBE2C Offset: 0x1DBE2C VA: 0x1DBE2C
	public static byte ReadByte(IntPtr ptr, int ofs) { }

	// RVA: 0x1DBE30 Offset: 0x1DBE30 VA: 0x1DBE30
	public static void WriteByte(IntPtr ptr, int ofs, byte val) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x97414 Offset: 0x97414 VA: 0x97414
[Serializable]
public class MarshalDirectiveException : SystemException // TypeDefIndex: 438
{
	// Fields
	private const int ErrorCode = -2146233035;

	// Methods

	// RVA: 0x1DBE54 Offset: 0x1DBE54 VA: 0x1DBE54
	public void .ctor() { }

	// RVA: 0x1DBEDC Offset: 0x1DBEDC VA: 0x1DBEDC
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x97428 Offset: 0x97428 VA: 0x97428
[ComVisibleAttribute] // RVA: 0x97428 Offset: 0x97428 VA: 0x97428
public sealed class PreserveSigAttribute : Attribute // TypeDefIndex: 439
{
	// Methods

	// RVA: 0x1DBEFC Offset: 0x1DBEFC VA: 0x1DBEFC
	public void .ctor() { }
}

// Namespace: System.Runtime.InteropServices
public abstract class SafeHandle : CriticalFinalizerObject, IDisposable // TypeDefIndex: 440
{
	// Fields
	protected IntPtr handle; // 0x8
	private IntPtr invalid_handle_value; // 0xC
	private int refcount; // 0x10
	private bool owns_handle; // 0x14

	// Properties
	public abstract bool IsInvalid { get; }

	// Methods

	[ReliabilityContractAttribute] // RVA: 0x9CA5C Offset: 0x9CA5C VA: 0x9CA5C
	// RVA: 0x1DBF04 Offset: 0x1DBF04 VA: 0x1DBF04
	protected void .ctor(IntPtr invalidHandleValue, bool ownsHandle) { }

	[ReliabilityContractAttribute] // RVA: 0x9CA74 Offset: 0x9CA74 VA: 0x9CA74
	// RVA: 0x1DBF34 Offset: 0x1DBF34 VA: 0x1DBF34
	public void Close() { }

	[ReliabilityContractAttribute] // RVA: 0x9CA8C Offset: 0x9CA8C VA: 0x9CA8C
	// RVA: 0x1DC080 Offset: 0x1DC080 VA: 0x1DC080
	public void DangerousAddRef(ref bool success) { }

	[ReliabilityContractAttribute] // RVA: 0x9CAA4 Offset: 0x9CAA4 VA: 0x9CAA4
	// RVA: 0x1DC1EC Offset: 0x1DC1EC VA: 0x1DC1EC
	public IntPtr DangerousGetHandle() { }

	[ReliabilityContractAttribute] // RVA: 0x9CABC Offset: 0x9CABC VA: 0x9CABC
	// RVA: 0x1DC2BC Offset: 0x1DC2BC VA: 0x1DC2BC
	public void DangerousRelease() { }

	[ReliabilityContractAttribute] // RVA: 0x9CAD4 Offset: 0x9CAD4 VA: 0x9CAD4
	// RVA: 0x1DC400 Offset: 0x1DC400 VA: 0x1DC400 Slot: 4
	public void Dispose() { }

	[ReliabilityContractAttribute] // RVA: 0x9CAEC Offset: 0x9CAEC VA: 0x9CAEC
	// RVA: 0x1DC434 Offset: 0x1DC434 VA: 0x1DC434 Slot: 5
	protected virtual void Dispose(bool disposing) { }

	[ReliabilityContractAttribute] // RVA: 0x9CB04 Offset: 0x9CB04 VA: 0x9CB04
	// RVA: -1 Offset: -1 Slot: 6
	protected abstract bool ReleaseHandle();

	[ReliabilityContractAttribute] // RVA: 0x9CB1C Offset: 0x9CB1C VA: 0x9CB1C
	// RVA: 0x1DC440 Offset: 0x1DC440 VA: 0x1DC440
	protected void SetHandle(IntPtr handle) { }

	[ReliabilityContractAttribute] // RVA: 0x9CB34 Offset: 0x9CB34 VA: 0x9CB34
	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool get_IsInvalid();

	// RVA: 0x1DC448 Offset: 0x1DC448 VA: 0x1DC448 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x97474 Offset: 0x97474 VA: 0x97474
[AttributeUsageAttribute] // RVA: 0x97474 Offset: 0x97474 VA: 0x97474
public sealed class TypeLibImportClassAttribute : Attribute // TypeDefIndex: 441
{
	// Fields
	private string _importClass; // 0x8

	// Methods

	// RVA: 0x1DC4EC Offset: 0x1DC4EC VA: 0x1DC4EC
	public void .ctor(Type importClass) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x974C0 Offset: 0x974C0 VA: 0x974C0
[AttributeUsageAttribute] // RVA: 0x974C0 Offset: 0x974C0 VA: 0x974C0
public sealed class TypeLibVersionAttribute : Attribute // TypeDefIndex: 442
{
	// Fields
	private int major; // 0x8
	private int minor; // 0xC

	// Methods

	// RVA: 0x1DC530 Offset: 0x1DC530 VA: 0x1DC530
	public void .ctor(int major, int minor) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x9751C Offset: 0x9751C VA: 0x9751C
[ComVisibleAttribute] // RVA: 0x9751C Offset: 0x9751C VA: 0x9751C
public sealed class UnmanagedFunctionPointerAttribute : Attribute // TypeDefIndex: 443
{
	// Fields
	private CallingConvention call_conv; // 0x8

	// Methods

	// RVA: 0x1DC558 Offset: 0x1DC558 VA: 0x1DC558
	public void .ctor(CallingConvention callingConvention) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x97578 Offset: 0x97578 VA: 0x97578
[Serializable]
public enum UnmanagedType // TypeDefIndex: 444
{
	// Fields
	public int value__; // 0x0
	public const UnmanagedType Bool = 2;
	public const UnmanagedType I1 = 3;
	public const UnmanagedType U1 = 4;
	public const UnmanagedType I2 = 5;
	public const UnmanagedType U2 = 6;
	public const UnmanagedType I4 = 7;
	public const UnmanagedType U4 = 8;
	public const UnmanagedType I8 = 9;
	public const UnmanagedType U8 = 10;
	public const UnmanagedType R4 = 11;
	public const UnmanagedType R8 = 12;
	public const UnmanagedType Currency = 15;
	public const UnmanagedType BStr = 19;
	public const UnmanagedType LPStr = 20;
	public const UnmanagedType LPWStr = 21;
	public const UnmanagedType LPTStr = 22;
	public const UnmanagedType ByValTStr = 23;
	public const UnmanagedType IUnknown = 25;
	public const UnmanagedType IDispatch = 26;
	public const UnmanagedType Struct = 27;
	public const UnmanagedType Interface = 28;
	public const UnmanagedType SafeArray = 29;
	public const UnmanagedType ByValArray = 30;
	public const UnmanagedType SysInt = 31;
	public const UnmanagedType SysUInt = 32;
	public const UnmanagedType VBByRefStr = 34;
	public const UnmanagedType AnsiBStr = 35;
	public const UnmanagedType TBStr = 36;
	public const UnmanagedType VariantBool = 37;
	public const UnmanagedType FunctionPtr = 38;
	public const UnmanagedType AsAny = 40;
	public const UnmanagedType LPArray = 42;
	public const UnmanagedType LPStruct = 43;
	public const UnmanagedType CustomMarshaler = 44;
	public const UnmanagedType Error = 45;
}

// Namespace: System.Runtime.InteropServices
[InterfaceTypeAttribute] // RVA: 0x9758C Offset: 0x9758C VA: 0x9758C
[TypeLibImportClassAttribute] // RVA: 0x9758C Offset: 0x9758C VA: 0x9758C
[ComVisibleAttribute] // RVA: 0x9758C Offset: 0x9758C VA: 0x9758C
[GuidAttribute] // RVA: 0x9758C Offset: 0x9758C VA: 0x9758C
[CLSCompliantAttribute] // RVA: 0x9758C Offset: 0x9758C VA: 0x9758C
public interface _Activator // TypeDefIndex: 445
{}

// Namespace: System.Runtime.InteropServices
[TypeLibImportClassAttribute] // RVA: 0x97688 Offset: 0x97688 VA: 0x97688
[ComVisibleAttribute] // RVA: 0x97688 Offset: 0x97688 VA: 0x97688
[GuidAttribute] // RVA: 0x97688 Offset: 0x97688 VA: 0x97688
[InterfaceTypeAttribute] // RVA: 0x97688 Offset: 0x97688 VA: 0x97688
[CLSCompliantAttribute] // RVA: 0x97688 Offset: 0x97688 VA: 0x97688
public interface _Assembly // TypeDefIndex: 446
{}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x97784 Offset: 0x97784 VA: 0x97784
[CLSCompliantAttribute] // RVA: 0x97784 Offset: 0x97784 VA: 0x97784
[GuidAttribute] // RVA: 0x97784 Offset: 0x97784 VA: 0x97784
[TypeLibImportClassAttribute] // RVA: 0x97784 Offset: 0x97784 VA: 0x97784
[InterfaceTypeAttribute] // RVA: 0x97784 Offset: 0x97784 VA: 0x97784
public interface _AssemblyBuilder // TypeDefIndex: 447
{}

// Namespace: System.Runtime.InteropServices
[InterfaceTypeAttribute] // RVA: 0x97880 Offset: 0x97880 VA: 0x97880
[ComVisibleAttribute] // RVA: 0x97880 Offset: 0x97880 VA: 0x97880
[TypeLibImportClassAttribute] // RVA: 0x97880 Offset: 0x97880 VA: 0x97880
[GuidAttribute] // RVA: 0x97880 Offset: 0x97880 VA: 0x97880
[CLSCompliantAttribute] // RVA: 0x97880 Offset: 0x97880 VA: 0x97880
public interface _AssemblyName // TypeDefIndex: 448
{}

// Namespace: System.Runtime.InteropServices
[InterfaceTypeAttribute] // RVA: 0x9797C Offset: 0x9797C VA: 0x9797C
[TypeLibImportClassAttribute] // RVA: 0x9797C Offset: 0x9797C VA: 0x9797C
[CLSCompliantAttribute] // RVA: 0x9797C Offset: 0x9797C VA: 0x9797C
[ComVisibleAttribute] // RVA: 0x9797C Offset: 0x9797C VA: 0x9797C
[GuidAttribute] // RVA: 0x9797C Offset: 0x9797C VA: 0x9797C
public interface _ConstructorBuilder // TypeDefIndex: 449
{}

// Namespace: System.Runtime.InteropServices
[GuidAttribute] // RVA: 0x97A78 Offset: 0x97A78 VA: 0x97A78
[InterfaceTypeAttribute] // RVA: 0x97A78 Offset: 0x97A78 VA: 0x97A78
[ComVisibleAttribute] // RVA: 0x97A78 Offset: 0x97A78 VA: 0x97A78
[TypeLibImportClassAttribute] // RVA: 0x97A78 Offset: 0x97A78 VA: 0x97A78
[CLSCompliantAttribute] // RVA: 0x97A78 Offset: 0x97A78 VA: 0x97A78
public interface _ConstructorInfo // TypeDefIndex: 450
{}

// Namespace: System.Runtime.InteropServices
[InterfaceTypeAttribute] // RVA: 0x97B74 Offset: 0x97B74 VA: 0x97B74
[CLSCompliantAttribute] // RVA: 0x97B74 Offset: 0x97B74 VA: 0x97B74
[ComVisibleAttribute] // RVA: 0x97B74 Offset: 0x97B74 VA: 0x97B74
[TypeLibImportClassAttribute] // RVA: 0x97B74 Offset: 0x97B74 VA: 0x97B74
[GuidAttribute] // RVA: 0x97B74 Offset: 0x97B74 VA: 0x97B74
public interface _CustomAttributeBuilder // TypeDefIndex: 451
{}

// Namespace: System.Runtime.InteropServices
[GuidAttribute] // RVA: 0x97C70 Offset: 0x97C70 VA: 0x97C70
[InterfaceTypeAttribute] // RVA: 0x97C70 Offset: 0x97C70 VA: 0x97C70
[ComVisibleAttribute] // RVA: 0x97C70 Offset: 0x97C70 VA: 0x97C70
[CLSCompliantAttribute] // RVA: 0x97C70 Offset: 0x97C70 VA: 0x97C70
[TypeLibImportClassAttribute] // RVA: 0x97C70 Offset: 0x97C70 VA: 0x97C70
public interface _EnumBuilder // TypeDefIndex: 452
{}

// Namespace: System.Runtime.InteropServices
[InterfaceTypeAttribute] // RVA: 0x97D6C Offset: 0x97D6C VA: 0x97D6C
[TypeLibImportClassAttribute] // RVA: 0x97D6C Offset: 0x97D6C VA: 0x97D6C
[ComVisibleAttribute] // RVA: 0x97D6C Offset: 0x97D6C VA: 0x97D6C
[GuidAttribute] // RVA: 0x97D6C Offset: 0x97D6C VA: 0x97D6C
[CLSCompliantAttribute] // RVA: 0x97D6C Offset: 0x97D6C VA: 0x97D6C
public interface _EventBuilder // TypeDefIndex: 453
{}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x97E68 Offset: 0x97E68 VA: 0x97E68
[CLSCompliantAttribute] // RVA: 0x97E68 Offset: 0x97E68 VA: 0x97E68
[GuidAttribute] // RVA: 0x97E68 Offset: 0x97E68 VA: 0x97E68
[TypeLibImportClassAttribute] // RVA: 0x97E68 Offset: 0x97E68 VA: 0x97E68
[InterfaceTypeAttribute] // RVA: 0x97E68 Offset: 0x97E68 VA: 0x97E68
public interface _EventInfo // TypeDefIndex: 454
{}

// Namespace: System.Runtime.InteropServices
[CLSCompliantAttribute] // RVA: 0x97F64 Offset: 0x97F64 VA: 0x97F64
[InterfaceTypeAttribute] // RVA: 0x97F64 Offset: 0x97F64 VA: 0x97F64
[TypeLibImportClassAttribute] // RVA: 0x97F64 Offset: 0x97F64 VA: 0x97F64
[ComVisibleAttribute] // RVA: 0x97F64 Offset: 0x97F64 VA: 0x97F64
[GuidAttribute] // RVA: 0x97F64 Offset: 0x97F64 VA: 0x97F64
public interface _FieldBuilder // TypeDefIndex: 455
{}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x98060 Offset: 0x98060 VA: 0x98060
[CLSCompliantAttribute] // RVA: 0x98060 Offset: 0x98060 VA: 0x98060
[TypeLibImportClassAttribute] // RVA: 0x98060 Offset: 0x98060 VA: 0x98060
[GuidAttribute] // RVA: 0x98060 Offset: 0x98060 VA: 0x98060
[InterfaceTypeAttribute] // RVA: 0x98060 Offset: 0x98060 VA: 0x98060
public interface _FieldInfo // TypeDefIndex: 456
{}

// Namespace: System.Runtime.InteropServices
[InterfaceTypeAttribute] // RVA: 0x9815C Offset: 0x9815C VA: 0x9815C
[CLSCompliantAttribute] // RVA: 0x9815C Offset: 0x9815C VA: 0x9815C
[ComVisibleAttribute] // RVA: 0x9815C Offset: 0x9815C VA: 0x9815C
[GuidAttribute] // RVA: 0x9815C Offset: 0x9815C VA: 0x9815C
[TypeLibImportClassAttribute] // RVA: 0x9815C Offset: 0x9815C VA: 0x9815C
public interface _ILGenerator // TypeDefIndex: 457
{}

// Namespace: System.Runtime.InteropServices
[CLSCompliantAttribute] // RVA: 0x98258 Offset: 0x98258 VA: 0x98258
[GuidAttribute] // RVA: 0x98258 Offset: 0x98258 VA: 0x98258
[ComVisibleAttribute] // RVA: 0x98258 Offset: 0x98258 VA: 0x98258
[InterfaceTypeAttribute] // RVA: 0x98258 Offset: 0x98258 VA: 0x98258
[TypeLibImportClassAttribute] // RVA: 0x98258 Offset: 0x98258 VA: 0x98258
public interface _LocalBuilder // TypeDefIndex: 458
{}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x98354 Offset: 0x98354 VA: 0x98354
[TypeLibImportClassAttribute] // RVA: 0x98354 Offset: 0x98354 VA: 0x98354
[CLSCompliantAttribute] // RVA: 0x98354 Offset: 0x98354 VA: 0x98354
[GuidAttribute] // RVA: 0x98354 Offset: 0x98354 VA: 0x98354
[InterfaceTypeAttribute] // RVA: 0x98354 Offset: 0x98354 VA: 0x98354
public interface _MethodBase // TypeDefIndex: 459
{}

// Namespace: System.Runtime.InteropServices
[TypeLibImportClassAttribute] // RVA: 0x98450 Offset: 0x98450 VA: 0x98450
[ComVisibleAttribute] // RVA: 0x98450 Offset: 0x98450 VA: 0x98450
[CLSCompliantAttribute] // RVA: 0x98450 Offset: 0x98450 VA: 0x98450
[InterfaceTypeAttribute] // RVA: 0x98450 Offset: 0x98450 VA: 0x98450
[GuidAttribute] // RVA: 0x98450 Offset: 0x98450 VA: 0x98450
public interface _MethodBuilder // TypeDefIndex: 460
{}

// Namespace: System.Runtime.InteropServices
[CLSCompliantAttribute] // RVA: 0x9854C Offset: 0x9854C VA: 0x9854C
[InterfaceTypeAttribute] // RVA: 0x9854C Offset: 0x9854C VA: 0x9854C
[GuidAttribute] // RVA: 0x9854C Offset: 0x9854C VA: 0x9854C
[ComVisibleAttribute] // RVA: 0x9854C Offset: 0x9854C VA: 0x9854C
[TypeLibImportClassAttribute] // RVA: 0x9854C Offset: 0x9854C VA: 0x9854C
public interface _MethodInfo // TypeDefIndex: 461
{}

// Namespace: System.Runtime.InteropServices
[GuidAttribute] // RVA: 0x98648 Offset: 0x98648 VA: 0x98648
[ComVisibleAttribute] // RVA: 0x98648 Offset: 0x98648 VA: 0x98648
[InterfaceTypeAttribute] // RVA: 0x98648 Offset: 0x98648 VA: 0x98648
[CLSCompliantAttribute] // RVA: 0x98648 Offset: 0x98648 VA: 0x98648
[TypeLibImportClassAttribute] // RVA: 0x98648 Offset: 0x98648 VA: 0x98648
public interface _Module // TypeDefIndex: 462
{}

// Namespace: System.Runtime.InteropServices
[GuidAttribute] // RVA: 0x98744 Offset: 0x98744 VA: 0x98744
[TypeLibImportClassAttribute] // RVA: 0x98744 Offset: 0x98744 VA: 0x98744
[InterfaceTypeAttribute] // RVA: 0x98744 Offset: 0x98744 VA: 0x98744
[ComVisibleAttribute] // RVA: 0x98744 Offset: 0x98744 VA: 0x98744
[CLSCompliantAttribute] // RVA: 0x98744 Offset: 0x98744 VA: 0x98744
public interface _ModuleBuilder // TypeDefIndex: 463
{}

// Namespace: System.Runtime.InteropServices
[TypeLibImportClassAttribute] // RVA: 0x98840 Offset: 0x98840 VA: 0x98840
[GuidAttribute] // RVA: 0x98840 Offset: 0x98840 VA: 0x98840
[CLSCompliantAttribute] // RVA: 0x98840 Offset: 0x98840 VA: 0x98840
[ComVisibleAttribute] // RVA: 0x98840 Offset: 0x98840 VA: 0x98840
[InterfaceTypeAttribute] // RVA: 0x98840 Offset: 0x98840 VA: 0x98840
public interface _ParameterBuilder // TypeDefIndex: 464
{}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x9893C Offset: 0x9893C VA: 0x9893C
[InterfaceTypeAttribute] // RVA: 0x9893C Offset: 0x9893C VA: 0x9893C
[TypeLibImportClassAttribute] // RVA: 0x9893C Offset: 0x9893C VA: 0x9893C
[GuidAttribute] // RVA: 0x9893C Offset: 0x9893C VA: 0x9893C
[CLSCompliantAttribute] // RVA: 0x9893C Offset: 0x9893C VA: 0x9893C
public interface _ParameterInfo // TypeDefIndex: 465
{}

// Namespace: System.Runtime.InteropServices
[InterfaceTypeAttribute] // RVA: 0x98A38 Offset: 0x98A38 VA: 0x98A38
[TypeLibImportClassAttribute] // RVA: 0x98A38 Offset: 0x98A38 VA: 0x98A38
[CLSCompliantAttribute] // RVA: 0x98A38 Offset: 0x98A38 VA: 0x98A38
[GuidAttribute] // RVA: 0x98A38 Offset: 0x98A38 VA: 0x98A38
[ComVisibleAttribute] // RVA: 0x98A38 Offset: 0x98A38 VA: 0x98A38
public interface _PropertyBuilder // TypeDefIndex: 466
{}

// Namespace: System.Runtime.InteropServices
[InterfaceTypeAttribute] // RVA: 0x98B34 Offset: 0x98B34 VA: 0x98B34
[CLSCompliantAttribute] // RVA: 0x98B34 Offset: 0x98B34 VA: 0x98B34
[ComVisibleAttribute] // RVA: 0x98B34 Offset: 0x98B34 VA: 0x98B34
[GuidAttribute] // RVA: 0x98B34 Offset: 0x98B34 VA: 0x98B34
[TypeLibImportClassAttribute] // RVA: 0x98B34 Offset: 0x98B34 VA: 0x98B34
public interface _PropertyInfo // TypeDefIndex: 467
{}

// Namespace: System.Runtime.InteropServices
[InterfaceTypeAttribute] // RVA: 0x98C30 Offset: 0x98C30 VA: 0x98C30
[ComVisibleAttribute] // RVA: 0x98C30 Offset: 0x98C30 VA: 0x98C30
[CLSCompliantAttribute] // RVA: 0x98C30 Offset: 0x98C30 VA: 0x98C30
[GuidAttribute] // RVA: 0x98C30 Offset: 0x98C30 VA: 0x98C30
[TypeLibImportClassAttribute] // RVA: 0x98C30 Offset: 0x98C30 VA: 0x98C30
public interface _Thread // TypeDefIndex: 468
{}

// Namespace: System.Runtime.InteropServices
[GuidAttribute] // RVA: 0x98D2C Offset: 0x98D2C VA: 0x98D2C
[InterfaceTypeAttribute] // RVA: 0x98D2C Offset: 0x98D2C VA: 0x98D2C
[CLSCompliantAttribute] // RVA: 0x98D2C Offset: 0x98D2C VA: 0x98D2C
[ComVisibleAttribute] // RVA: 0x98D2C Offset: 0x98D2C VA: 0x98D2C
[TypeLibImportClassAttribute] // RVA: 0x98D2C Offset: 0x98D2C VA: 0x98D2C
public interface _TypeBuilder // TypeDefIndex: 469
{}

// Namespace: System.Runtime.Remoting.Activation
internal class ActivationServices // TypeDefIndex: 470
{
	// Fields
	private static IActivator _constructionActivator; // 0x0

	// Properties
	private static IActivator ConstructionActivator { get; }

	// Methods

	// RVA: 0x1DC9E0 Offset: 0x1DC9E0 VA: 0x1DC9E0
	private static IActivator get_ConstructionActivator() { }

	// RVA: 0x1DCA94 Offset: 0x1DCA94 VA: 0x1DCA94
	public static IMessage RemoteActivate(IConstructionCallMessage ctorCall) { }

	// RVA: 0x1DCCB4 Offset: 0x1DCCB4 VA: 0x1DCCB4
	public static object CreateProxyFromAttributes(Type type, object[] activationAttributes) { }

	// RVA: 0x1DCF38 Offset: 0x1DCF38 VA: 0x1DCF38
	public static ConstructionCall CreateConstructionCall(Type type, string activationUrl, object[] activationAttributes) { }

	// RVA: 0x1DDDB8 Offset: 0x1DDDB8 VA: 0x1DDDB8
	public static IMessage CreateInstanceFromMessage(IConstructionCallMessage ctorCall) { }

	// RVA: 0x1DE414 Offset: 0x1DE414 VA: 0x1DE414
	public static object AllocateUninitializedClassInstance(Type type) { }

	// RVA: 0x1DE418 Offset: 0x1DE418 VA: 0x1DE418
	public static void EnableProxyActivation(Type type, bool enable) { }
}

// Namespace: System.Runtime.Remoting.Activation
internal class AppDomainLevelActivator : IActivator // TypeDefIndex: 471
{
	// Fields
	private string _activationUrl; // 0x8
	private IActivator _next; // 0xC

	// Properties
	public IActivator NextActivator { get; }

	// Methods

	// RVA: 0x1DDD70 Offset: 0x1DDD70 VA: 0x1DDD70
	public void .ctor(string activationUrl, IActivator next) { }

	// RVA: 0x1DE41C Offset: 0x1DE41C VA: 0x1DE41C Slot: 4
	public IActivator get_NextActivator() { }

	// RVA: 0x1DE424 Offset: 0x1DE424 VA: 0x1DE424 Slot: 5
	public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall) { }
}

// Namespace: System.Runtime.Remoting.Activation
[Serializable]
internal class ConstructionLevelActivator : IActivator // TypeDefIndex: 472
{
	// Properties
	public IActivator NextActivator { get; }

	// Methods

	// RVA: 0x1DCA8C Offset: 0x1DCA8C VA: 0x1DCA8C
	public void .ctor() { }

	// RVA: 0x1DEA9C Offset: 0x1DEA9C VA: 0x1DEA9C Slot: 4
	public IActivator get_NextActivator() { }

	// RVA: 0x1DEAA4 Offset: 0x1DEAA4 VA: 0x1DEAA4 Slot: 5
	public IConstructionReturnMessage Activate(IConstructionCallMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Activation
[Serializable]
internal class ContextLevelActivator : IActivator // TypeDefIndex: 473
{
	// Fields
	private IActivator m_NextActivator; // 0x8

	// Properties
	public IActivator NextActivator { get; }

	// Methods

	// RVA: 0x1DDD98 Offset: 0x1DDD98 VA: 0x1DDD98
	public void .ctor(IActivator next) { }

	// RVA: 0x1DEEDC Offset: 0x1DEEDC VA: 0x1DEEDC Slot: 4
	public IActivator get_NextActivator() { }

	// RVA: 0x1DEEE4 Offset: 0x1DEEE4 VA: 0x1DEEE4 Slot: 5
	public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall) { }
}

// Namespace: System.Runtime.Remoting.Activation
[ComVisibleAttribute] // RVA: 0x98E28 Offset: 0x98E28 VA: 0x98E28
public interface IActivator // TypeDefIndex: 474
{
	// Properties
	public abstract IActivator NextActivator { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IActivator get_NextActivator();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IConstructionReturnMessage Activate(IConstructionCallMessage msg);
}

// Namespace: System.Runtime.Remoting.Activation
[ComVisibleAttribute] // RVA: 0x98E3C Offset: 0x98E3C VA: 0x98E3C
public interface IConstructionCallMessage : IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 475
{
	// Properties
	public abstract Type ActivationType { get; }
	public abstract string ActivationTypeName { get; }
	public abstract IActivator Activator { get; set; }
	public abstract object[] CallSiteActivationAttributes { get; }
	public abstract IList ContextProperties { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Type get_ActivationType();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract string get_ActivationTypeName();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract IActivator get_Activator();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void set_Activator(IActivator value);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract object[] get_CallSiteActivationAttributes();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract IList get_ContextProperties();
}

// Namespace: System.Runtime.Remoting.Activation
[ComVisibleAttribute] // RVA: 0x98E50 Offset: 0x98E50 VA: 0x98E50
public interface IConstructionReturnMessage : IMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 476
{}

// Namespace: System.Runtime.Remoting.Activation
internal class RemoteActivationAttribute : Attribute, IContextAttribute // TypeDefIndex: 477
{
	// Fields
	private IList _contextProperties; // 0x8

	// Methods

	// RVA: 0x1DFD88 Offset: 0x1DFD88 VA: 0x1DFD88
	public void .ctor(IList contextProperties) { }

	// RVA: 0x1DFDA8 Offset: 0x1DFDA8 VA: 0x1DFDA8 Slot: 5
	public bool IsContextOK(Context ctx, IConstructionCallMessage ctor) { }

	// RVA: 0x1DFDB0 Offset: 0x1DFDB0 VA: 0x1DFDB0 Slot: 4
	public void GetPropertiesForNewContext(IConstructionCallMessage ctor) { }
}

// Namespace: System.Runtime.Remoting.Activation
internal class RemoteActivator : MarshalByRefObject, IActivator // TypeDefIndex: 478
{
	// Properties
	public IActivator NextActivator { get; }

	// Methods

	// RVA: 0x1E01F4 Offset: 0x1E01F4 VA: 0x1E01F4 Slot: 7
	public IConstructionReturnMessage Activate(IConstructionCallMessage msg) { }

	// RVA: 0x1E07A0 Offset: 0x1E07A0 VA: 0x1E07A0 Slot: 5
	public override object InitializeLifetimeService() { }

	// RVA: 0x1E0B6C Offset: 0x1E0B6C VA: 0x1E0B6C Slot: 6
	public IActivator get_NextActivator() { }
}

// Namespace: System.Runtime.Remoting.Activation
[ComVisibleAttribute] // RVA: 0x98E64 Offset: 0x98E64 VA: 0x98E64
[Serializable]
public sealed class UrlAttribute : ContextAttribute // TypeDefIndex: 479
{
	// Fields
	private string url; // 0xC

	// Properties
	public string UrlValue { get; }

	// Methods

	// RVA: 0x1DCF30 Offset: 0x1DCF30 VA: 0x1DCF30
	public string get_UrlValue() { }

	// RVA: 0x1E0BF4 Offset: 0x1E0BF4 VA: 0x1E0BF4 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x1E0CB0 Offset: 0x1E0CB0 VA: 0x1E0CB0 Slot: 2
	public override int GetHashCode() { }

	[ComVisibleAttribute] // RVA: 0x9CB4C Offset: 0x9CB4C VA: 0x9CB4C
	// RVA: 0x1E0CDC Offset: 0x1E0CDC VA: 0x1E0CDC Slot: 11
	public override void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg) { }

	[ComVisibleAttribute] // RVA: 0x9CB60 Offset: 0x9CB60 VA: 0x9CB60
	// RVA: 0x1E0CE0 Offset: 0x1E0CE0 VA: 0x1E0CE0 Slot: 12
	public override bool IsContextOK(Context ctx, IConstructionCallMessage msg) { }
}

// Namespace: System.Runtime.Remoting
[Serializable]
internal class ChannelInfo : IChannelInfo // TypeDefIndex: 480
{
	// Fields
	private object[] channelData; // 0x8

	// Properties
	public object[] ChannelData { get; }

	// Methods

	// RVA: 0x1E1B3C Offset: 0x1E1B3C VA: 0x1E1B3C
	public void .ctor() { }

	// RVA: 0x1E2114 Offset: 0x1E2114 VA: 0x1E2114
	public void .ctor(object remoteChannelData) { }

	// RVA: 0x1E21F0 Offset: 0x1E21F0 VA: 0x1E21F0 Slot: 4
	public object[] get_ChannelData() { }
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0x98E78 Offset: 0x98E78 VA: 0x98E78
public sealed class ChannelServices // TypeDefIndex: 481
{
	// Fields
	private static ArrayList registeredChannels; // 0x0
	private static ArrayList delayedClientChannels; // 0x4
	private static CrossContextChannel _crossContextSink; // 0x8
	internal static string CrossContextUrl; // 0xC
	private static IList oldStartModeTypes; // 0x10

	// Properties
	internal static CrossContextChannel CrossContextChannel { get; }

	// Methods

	// RVA: 0x1E2720 Offset: 0x1E2720 VA: 0x1E2720
	private static void .cctor() { }

	// RVA: 0x1E2928 Offset: 0x1E2928 VA: 0x1E2928
	internal static CrossContextChannel get_CrossContextChannel() { }

	// RVA: 0x1E29B4 Offset: 0x1E29B4 VA: 0x1E29B4
	internal static IMessageSink CreateClientChannelSinkChain(string url, object remoteChannelData, out string objectUri) { }

	// RVA: 0x1E34C0 Offset: 0x1E34C0 VA: 0x1E34C0
	internal static IMessageSink CreateClientChannelSinkChain(IChannelSender sender, string url, object[] channelDataArray, out string objectUri) { }

	[ObsoleteAttribute] // RVA: 0x9CB74 Offset: 0x9CB74 VA: 0x9CB74
	// RVA: 0x1E36FC Offset: 0x1E36FC VA: 0x1E36FC
	public static void RegisterChannel(IChannel chnl) { }

	// RVA: 0x1E3780 Offset: 0x1E3780 VA: 0x1E3780
	public static void RegisterChannel(IChannel chnl, bool ensureSecurity) { }

	// RVA: 0x1E4414 Offset: 0x1E4414 VA: 0x1E4414
	internal static void RegisterChannelConfig(ChannelData channel) { }

	// RVA: 0x1E5630 Offset: 0x1E5630 VA: 0x1E5630
	private static object CreateProvider(ProviderData prov) { }

	// RVA: 0x1E5B74 Offset: 0x1E5B74 VA: 0x1E5B74
	public static IMessage SyncDispatchMessage(IMessage msg) { }

	// RVA: 0x1E5C8C Offset: 0x1E5C8C VA: 0x1E5C8C
	private static ReturnMessage CheckIncomingMessage(IMessage msg) { }

	// RVA: 0x1E6068 Offset: 0x1E6068 VA: 0x1E6068
	internal static IMessage CheckReturnMessage(IMessage callMsg, IMessage retMsg) { }

	// RVA: 0x1E68C8 Offset: 0x1E68C8 VA: 0x1E68C8
	private static bool IsLocalCall(IMessage callMsg) { }

	// RVA: 0x1E1BC8 Offset: 0x1E1BC8 VA: 0x1E1BC8
	internal static object[] GetCurrentChannelInfo() { }
}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
internal class CrossAppDomainData // TypeDefIndex: 482
{
	// Fields
	private object _ContextID; // 0x8
	private int _DomainID; // 0xC
	private string _processGuid; // 0x10

	// Properties
	internal int DomainID { get; }
	internal string ProcessID { get; }

	// Methods

	// RVA: 0x1E6BA8 Offset: 0x1E6BA8 VA: 0x1E6BA8
	internal void .ctor(int domainId) { }

	// RVA: 0x1E6E60 Offset: 0x1E6E60 VA: 0x1E6E60
	internal int get_DomainID() { }

	// RVA: 0x1E6E58 Offset: 0x1E6E58 VA: 0x1E6E58
	internal string get_ProcessID() { }
}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
internal class CrossAppDomainChannel : IChannel, IChannelReceiver, IChannelSender // TypeDefIndex: 483
{
	// Fields
	private static object s_lock; // 0x0

	// Properties
	public virtual string ChannelName { get; }
	public virtual int ChannelPriority { get; }
	public virtual object ChannelData { get; }

	// Methods

	// RVA: 0x1E68D0 Offset: 0x1E68D0 VA: 0x1E68D0
	public void .ctor() { }

	// RVA: 0x1E68D8 Offset: 0x1E68D8 VA: 0x1E68D8
	private static void .cctor() { }

	// RVA: 0x1E6958 Offset: 0x1E6958 VA: 0x1E6958
	internal static void RegisterCrossAppDomainChannel() { }

	// RVA: 0x1E6AA0 Offset: 0x1E6AA0 VA: 0x1E6AA0 Slot: 9
	public virtual string get_ChannelName() { }

	// RVA: 0x1E6AFC Offset: 0x1E6AFC VA: 0x1E6AFC Slot: 10
	public virtual int get_ChannelPriority() { }

	// RVA: 0x1E6B04 Offset: 0x1E6B04 VA: 0x1E6B04 Slot: 11
	public virtual object get_ChannelData() { }

	// RVA: 0x1E6C6C Offset: 0x1E6C6C VA: 0x1E6C6C Slot: 12
	public virtual void StartListening(object data) { }

	// RVA: 0x1E6C70 Offset: 0x1E6C70 VA: 0x1E6C70 Slot: 13
	public virtual IMessageSink CreateMessageSink(string url, object data, out string uri) { }
}

// Namespace: System.Runtime.Remoting.Channels
[MonoTODOAttribute] // RVA: 0x98E8C Offset: 0x98E8C VA: 0x98E8C
internal class CrossAppDomainSink : IMessageSink // TypeDefIndex: 484
{
	// Fields
	private static Hashtable s_sinks; // 0x0
	private static MethodInfo processMessageMethod; // 0x4
	private int _domainID; // 0x8

	// Properties
	internal int TargetDomainId { get; }

	// Methods

	// RVA: 0x1E721C Offset: 0x1E721C VA: 0x1E721C
	internal void .ctor(int domainID) { }

	// RVA: 0x1E723C Offset: 0x1E723C VA: 0x1E723C
	private static void .cctor() { }

	// RVA: 0x1E6E68 Offset: 0x1E6E68 VA: 0x1E6E68
	internal static CrossAppDomainSink GetSink(int domainID) { }

	// RVA: 0x1E7350 Offset: 0x1E7350 VA: 0x1E7350
	internal int get_TargetDomainId() { }

	// RVA: 0x1E7358 Offset: 0x1E7358 VA: 0x1E7358
	private static CrossAppDomainSink.ProcessMessageRes ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg) { }

	// RVA: 0x1E7514 Offset: 0x1E7514 VA: 0x1E7514 Slot: 6
	public virtual IMessage SyncProcessMessage(IMessage msgRequest) { }

	// RVA: 0x1E7AAC Offset: 0x1E7AAC VA: 0x1E7AAC Slot: 7
	public virtual IMessageCtrl AsyncProcessMessage(IMessage reqMsg, IMessageSink replySink) { }

	// RVA: 0x1E7B74 Offset: 0x1E7B74 VA: 0x1E7B74
	public void SendAsyncMessage(object data) { }
}

// Namespace: 
private struct CrossAppDomainSink.ProcessMessageRes // TypeDefIndex: 485
{
	// Fields
	public byte[] arrResponse; // 0x0
	public CADMethodReturnMessage cadMrm; // 0x4
}

// Namespace: System.Runtime.Remoting.Channels
internal class CADSerializer // TypeDefIndex: 486
{
	// Methods

	// RVA: 0x1E2220 Offset: 0x1E2220 VA: 0x1E2220
	internal static IMessage DeserializeMessage(MemoryStream mem, IMethodCallMessage msg) { }

	// RVA: 0x1E23CC Offset: 0x1E23CC VA: 0x1E23CC
	internal static MemoryStream SerializeMessage(IMessage msg) { }

	// RVA: 0x1E2504 Offset: 0x1E2504 VA: 0x1E2504
	internal static MemoryStream SerializeObject(object obj) { }

	// RVA: 0x1E263C Offset: 0x1E263C VA: 0x1E263C
	internal static object DeserializeObject(MemoryStream mem) { }
}

// Namespace: System.Runtime.Remoting.Channels
internal class AsyncRequest // TypeDefIndex: 487
{
	// Fields
	internal IMessageSink ReplySink; // 0x8
	internal IMessage MsgRequest; // 0xC

	// Methods

	// RVA: 0x1E21F8 Offset: 0x1E21F8 VA: 0x1E21F8
	public void .ctor(IMessage msgRequest, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0x98ED4 Offset: 0x98ED4 VA: 0x98ED4
public interface IChannel // TypeDefIndex: 488
{
	// Properties
	public abstract string ChannelName { get; }
	public abstract int ChannelPriority { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_ChannelName();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int get_ChannelPriority();
}

// Namespace: System.Runtime.Remoting.Channels
[DefaultMemberAttribute] // RVA: 0x98EE8 Offset: 0x98EE8 VA: 0x98EE8
[ComVisibleAttribute] // RVA: 0x98EE8 Offset: 0x98EE8 VA: 0x98EE8
public interface IChannelDataStore // TypeDefIndex: 489
{}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0x98F34 Offset: 0x98F34 VA: 0x98F34
public interface IChannelReceiver : IChannel // TypeDefIndex: 490
{
	// Properties
	public abstract object ChannelData { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object get_ChannelData();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void StartListening(object data);
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0x98F48 Offset: 0x98F48 VA: 0x98F48
public interface IChannelSender : IChannel // TypeDefIndex: 491
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink CreateMessageSink(string url, object remoteChannelData, out string objectURI);
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0x98F5C Offset: 0x98F5C VA: 0x98F5C
public interface IClientChannelSinkProvider // TypeDefIndex: 492
{
	// Properties
	public abstract IClientChannelSinkProvider Next { set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void set_Next(IClientChannelSinkProvider value);
}

// Namespace: System.Runtime.Remoting.Channels
public interface ISecurableChannel // TypeDefIndex: 493
{
	// Properties
	public abstract bool IsSecured { set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void set_IsSecured(bool value);
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0x98F70 Offset: 0x98F70 VA: 0x98F70
public interface IServerChannelSinkProvider // TypeDefIndex: 494
{
	// Properties
	public abstract IServerChannelSinkProvider Next { set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void set_Next(IServerChannelSinkProvider value);
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0x98F84 Offset: 0x98F84 VA: 0x98F84
public class SinkProviderData // TypeDefIndex: 495
{
	// Fields
	private string sinkName; // 0x8
	private ArrayList children; // 0xC
	private Hashtable properties; // 0x10

	// Properties
	public IList Children { get; }
	public IDictionary Properties { get; }

	// Methods

	// RVA: 0x1E7D2C Offset: 0x1E7D2C VA: 0x1E7D2C
	public void .ctor(string name) { }

	// RVA: 0x1E7DD4 Offset: 0x1E7DD4 VA: 0x1E7DD4
	public IList get_Children() { }

	// RVA: 0x1E7DDC Offset: 0x1E7DDC VA: 0x1E7DDC
	public IDictionary get_Properties() { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x98F98 Offset: 0x98F98 VA: 0x98F98
public class Context // TypeDefIndex: 496
{
	// Fields
	private int domain_id; // 0x8
	private int context_id; // 0xC
	private UIntPtr static_data; // 0x10
	private static IMessageSink default_server_context_sink; // 0x0
	private IMessageSink server_context_sink_chain; // 0x14
	private IMessageSink client_context_sink_chain; // 0x18
	private object[] datastore; // 0x1C
	private ArrayList context_properties; // 0x20
	private bool frozen; // 0x24
	private static int global_count; // 0x4
	private static Hashtable namedSlots; // 0x8
	private static DynamicPropertyCollection global_dynamic_properties; // 0xC
	private DynamicPropertyCollection context_dynamic_properties; // 0x28
	private ContextCallbackObject callback_object; // 0x2C

	// Properties
	public static Context DefaultContext { get; }
	public virtual int ContextID { get; }
	public virtual IContextProperty[] ContextProperties { get; }
	internal bool IsDefaultContext { get; }
	internal bool NeedsContextSink { get; }
	internal static bool HasGlobalDynamicSinks { get; }
	internal bool HasDynamicSinks { get; }
	internal bool HasExitSinks { get; }

	// Methods

	// RVA: 0x1EDB58 Offset: 0x1EDB58 VA: 0x1EDB58
	public void .ctor() { }

	// RVA: 0x1EDC38 Offset: 0x1EDC38 VA: 0x1EDC38
	private static void .cctor() { }

	// RVA: 0x1EDCB8 Offset: 0x1EDCB8 VA: 0x1EDCB8 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1EDCC0 Offset: 0x1EDCC0 VA: 0x1EDCC0
	public static Context get_DefaultContext() { }

	// RVA: 0x1EDCC8 Offset: 0x1EDCC8 VA: 0x1EDCC8 Slot: 4
	public virtual int get_ContextID() { }

	// RVA: 0x1EDCD0 Offset: 0x1EDCD0 VA: 0x1EDCD0 Slot: 5
	public virtual IContextProperty[] get_ContextProperties() { }

	// RVA: 0x1EDE44 Offset: 0x1EDE44 VA: 0x1EDE44
	internal bool get_IsDefaultContext() { }

	// RVA: 0x1EDE58 Offset: 0x1EDE58 VA: 0x1EDE58
	internal bool get_NeedsContextSink() { }

	// RVA: 0x1EE00C Offset: 0x1EE00C VA: 0x1EE00C
	public static bool RegisterDynamicProperty(IDynamicProperty prop, ContextBoundObject obj, Context ctx) { }

	// RVA: 0x1EE6A4 Offset: 0x1EE6A4 VA: 0x1EE6A4
	public static bool UnregisterDynamicProperty(string name, ContextBoundObject obj, Context ctx) { }

	// RVA: 0x1EE0B8 Offset: 0x1EE0B8 VA: 0x1EE0B8
	private static DynamicPropertyCollection GetDynamicPropertyCollection(ContextBoundObject obj, Context ctx) { }

	// RVA: 0x1EEA7C Offset: 0x1EEA7C VA: 0x1EEA7C
	internal static void NotifyGlobalDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async) { }

	// RVA: 0x1EF3E8 Offset: 0x1EF3E8 VA: 0x1EF3E8
	internal static bool get_HasGlobalDynamicSinks() { }

	// RVA: 0x1EF504 Offset: 0x1EF504 VA: 0x1EF504
	internal void NotifyDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async) { }

	// RVA: 0x1EF594 Offset: 0x1EF594 VA: 0x1EF594
	internal bool get_HasDynamicSinks() { }

	// RVA: 0x1EF5E8 Offset: 0x1EF5E8 VA: 0x1EF5E8
	internal bool get_HasExitSinks() { }

	// RVA: 0x1EFB08 Offset: 0x1EFB08 VA: 0x1EFB08 Slot: 6
	public virtual IContextProperty GetProperty(string name) { }

	// RVA: 0x1EFF84 Offset: 0x1EFF84 VA: 0x1EFF84 Slot: 7
	public virtual void SetProperty(IContextProperty prop) { }

	// RVA: 0x1F0160 Offset: 0x1F0160 VA: 0x1F0160 Slot: 8
	public virtual void Freeze() { }

	// RVA: 0x1F0524 Offset: 0x1F0524 VA: 0x1F0524 Slot: 3
	public override string ToString() { }

	// RVA: 0x1DEC70 Offset: 0x1DEC70 VA: 0x1DEC70
	internal IMessageSink GetServerContextSinkChain() { }

	// RVA: 0x1EF6C4 Offset: 0x1EF6C4 VA: 0x1EF6C4
	internal IMessageSink GetClientContextSinkChain() { }

	// RVA: 0x1E7FE0 Offset: 0x1E7FE0 VA: 0x1E7FE0
	internal IMessageSink CreateServerObjectSinkChain(MarshalByRefObject obj, bool forceInternalExecute) { }

	// RVA: 0x1F0604 Offset: 0x1F0604 VA: 0x1F0604
	internal IMessageSink CreateEnvoySink(MarshalByRefObject serverObject) { }

	// RVA: 0x1DFD80 Offset: 0x1DFD80 VA: 0x1DFD80
	internal static Context SwitchToContext(Context newContext) { }

	// RVA: 0x1DF2F0 Offset: 0x1DF2F0 VA: 0x1DF2F0
	internal static Context CreateNewContext(IConstructionCallMessage msg) { }

	// RVA: 0x1F0A38 Offset: 0x1F0A38 VA: 0x1F0A38
	public void DoCallBack(CrossContextDelegate deleg) { }

	// RVA: 0x1F0B88 Offset: 0x1F0B88 VA: 0x1F0B88
	public static LocalDataStoreSlot AllocateDataSlot() { }

	// RVA: 0x1F0BF8 Offset: 0x1F0BF8 VA: 0x1F0BF8
	public static LocalDataStoreSlot AllocateNamedDataSlot(string name) { }

	// RVA: 0x1F0D90 Offset: 0x1F0D90 VA: 0x1F0D90
	public static void FreeNamedDataSlot(string name) { }

	// RVA: 0x1F0F10 Offset: 0x1F0F10 VA: 0x1F0F10
	public static object GetData(LocalDataStoreSlot slot) { }

	// RVA: 0x1F10A4 Offset: 0x1F10A4 VA: 0x1F10A4
	public static LocalDataStoreSlot GetNamedDataSlot(string name) { }

	// RVA: 0x1F1294 Offset: 0x1F1294 VA: 0x1F1294
	public static void SetData(LocalDataStoreSlot slot, object data) { }
}

// Namespace: System.Runtime.Remoting.Contexts
internal class DynamicPropertyCollection // TypeDefIndex: 497
{
	// Fields
	private ArrayList _properties; // 0x8

	// Properties
	public bool HasProperties { get; }

	// Methods

	// RVA: 0x1EEA00 Offset: 0x1EEA00 VA: 0x1EEA00
	public void .ctor() { }

	// RVA: 0x1EDFC8 Offset: 0x1EDFC8 VA: 0x1EDFC8
	public bool get_HasProperties() { }

	// RVA: 0x1EE384 Offset: 0x1EE384 VA: 0x1EE384
	public bool RegisterDynamicProperty(IDynamicProperty prop) { }

	// RVA: 0x1EE750 Offset: 0x1EE750 VA: 0x1EE750
	public bool UnregisterDynamicProperty(string name) { }

	// RVA: 0x1EEC0C Offset: 0x1EEC0C VA: 0x1EEC0C
	public void NotifyMessage(bool start, IMessage msg, bool client_site, bool async) { }

	// RVA: 0x1F2718 Offset: 0x1F2718 VA: 0x1F2718
	private int FindProperty(string name) { }
}

// Namespace: 
private class DynamicPropertyCollection.DynamicPropertyReg // TypeDefIndex: 498
{
	// Fields
	public IDynamicProperty Property; // 0x8
	public IDynamicMessageSink Sink; // 0xC

	// Methods

	// RVA: 0x1F29E0 Offset: 0x1F29E0 VA: 0x1F29E0
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Contexts
internal class ContextCallbackObject : ContextBoundObject // TypeDefIndex: 499
{
	// Methods

	// RVA: 0x1F0B7C Offset: 0x1F0B7C VA: 0x1F0B7C
	public void .ctor() { }

	// RVA: 0x1F0B84 Offset: 0x1F0B84 VA: 0x1F0B84
	public void DoCallBack(CrossContextDelegate deleg) { }
}

// Namespace: System.Runtime.Remoting.Contexts
[AttributeUsageAttribute] // RVA: 0x98FAC Offset: 0x98FAC VA: 0x98FAC
[ComVisibleAttribute] // RVA: 0x98FAC Offset: 0x98FAC VA: 0x98FAC
[Serializable]
public class ContextAttribute : Attribute, IContextAttribute, IContextProperty // TypeDefIndex: 500
{
	// Fields
	protected string AttributeName; // 0x8

	// Properties
	public virtual string Name { get; }

	// Methods

	// RVA: 0x1F14E0 Offset: 0x1F14E0 VA: 0x1F14E0
	public void .ctor(string name) { }

	// RVA: 0x1F1500 Offset: 0x1F1500 VA: 0x1F1500 Slot: 9
	public virtual string get_Name() { }

	// RVA: 0x1F1508 Offset: 0x1F1508 VA: 0x1F1508 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x1F15E8 Offset: 0x1F15E8 VA: 0x1F15E8 Slot: 10
	public virtual void Freeze(Context newContext) { }

	// RVA: 0x1F15EC Offset: 0x1F15EC VA: 0x1F15EC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F1604 Offset: 0x1F1604 VA: 0x1F1604 Slot: 11
	public virtual void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg) { }

	// RVA: 0x1F17BC Offset: 0x1F17BC VA: 0x1F17BC Slot: 12
	public virtual bool IsContextOK(Context ctx, IConstructionCallMessage ctorMsg) { }

	// RVA: 0x1F1998 Offset: 0x1F1998 VA: 0x1F1998 Slot: 13
	public virtual bool IsNewContextOK(Context newCtx) { }
}

// Namespace: System.Runtime.Remoting.Contexts
internal class CrossContextChannel : IMessageSink // TypeDefIndex: 501
{
	// Methods

	// RVA: 0x1E2920 Offset: 0x1E2920 VA: 0x1E2920
	public void .ctor() { }

	// RVA: 0x1E62C0 Offset: 0x1E62C0 VA: 0x1E62C0 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x1F19A0 Offset: 0x1F19A0 VA: 0x1F19A0 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: 
private class CrossContextChannel.ContextRestoreSink : IMessageSink // TypeDefIndex: 502
{
	// Fields
	private IMessageSink _next; // 0x8
	private Context _context; // 0xC
	private IMessage _call; // 0x10

	// Methods

	// RVA: 0x1F2034 Offset: 0x1F2034 VA: 0x1F2034
	public void .ctor(IMessageSink next, Context context, IMessage call) { }

	// RVA: 0x1F2064 Offset: 0x1F2064 VA: 0x1F2064 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x1F2434 Offset: 0x1F2434 VA: 0x1F2434 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x98FE4 Offset: 0x98FE4 VA: 0x98FE4
public interface IContextAttribute // TypeDefIndex: 503
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void GetPropertiesForNewContext(IConstructionCallMessage msg);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool IsContextOK(Context ctx, IConstructionCallMessage msg);
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x98FF8 Offset: 0x98FF8 VA: 0x98FF8
public interface IContextProperty // TypeDefIndex: 504
{
	// Properties
	public abstract string Name { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_Name();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Freeze(Context newContext);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract bool IsNewContextOK(Context newCtx);
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x9900C Offset: 0x9900C VA: 0x9900C
public interface IContributeClientContextSink // TypeDefIndex: 505
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink GetClientContextSink(IMessageSink nextSink);
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x99020 Offset: 0x99020 VA: 0x99020
public interface IContributeDynamicSink // TypeDefIndex: 506
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IDynamicMessageSink GetDynamicSink();
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x99034 Offset: 0x99034 VA: 0x99034
public interface IContributeEnvoySink // TypeDefIndex: 507
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink GetEnvoySink(MarshalByRefObject obj, IMessageSink nextSink);
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x99048 Offset: 0x99048 VA: 0x99048
public interface IContributeObjectSink // TypeDefIndex: 508
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink GetObjectSink(MarshalByRefObject obj, IMessageSink nextSink);
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x9905C Offset: 0x9905C VA: 0x9905C
public interface IContributeServerContextSink // TypeDefIndex: 509
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink GetServerContextSink(IMessageSink nextSink);
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x99070 Offset: 0x99070 VA: 0x99070
public interface IDynamicMessageSink // TypeDefIndex: 510
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void ProcessMessageFinish(IMessage replyMsg, bool bCliSide, bool bAsync);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void ProcessMessageStart(IMessage reqMsg, bool bCliSide, bool bAsync);
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x99084 Offset: 0x99084 VA: 0x99084
public interface IDynamicProperty // TypeDefIndex: 511
{
	// Properties
	public abstract string Name { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_Name();
}

// Namespace: System.Runtime.Remoting.Contexts
[AttributeUsageAttribute] // RVA: 0x99098 Offset: 0x99098 VA: 0x99098
[ComVisibleAttribute] // RVA: 0x99098 Offset: 0x99098 VA: 0x99098
[Serializable]
public class SynchronizationAttribute : ContextAttribute, IContributeClientContextSink, IContributeServerContextSink // TypeDefIndex: 512
{
	// Fields
	private bool _bReEntrant; // 0xC
	private int _flavor; // 0x10
	private int _lockCount; // 0x14
	private Mutex _mutex; // 0x18
	private Thread _ownerThread; // 0x1C

	// Properties
	public virtual bool IsReEntrant { get; }
	public virtual bool Locked { set; }

	// Methods

	// RVA: 0x1F29E8 Offset: 0x1F29E8 VA: 0x1F29E8
	public void .ctor() { }

	// RVA: 0x1F29F4 Offset: 0x1F29F4 VA: 0x1F29F4
	public void .ctor(int flag, bool reEntrant) { }

	// RVA: 0x1F2B04 Offset: 0x1F2B04 VA: 0x1F2B04 Slot: 16
	public virtual bool get_IsReEntrant() { }

	// RVA: 0x1F2B0C Offset: 0x1F2B0C VA: 0x1F2B0C Slot: 17
	public virtual void set_Locked(bool value) { }

	// RVA: 0x1F2E0C Offset: 0x1F2E0C VA: 0x1F2E0C
	internal void AcquireLock() { }

	// RVA: 0x1F2CE0 Offset: 0x1F2CE0 VA: 0x1F2CE0
	internal void ReleaseLock() { }

	[ComVisibleAttribute] // RVA: 0x9CBC8 Offset: 0x9CBC8 VA: 0x9CBC8
	// RVA: 0x1F2F20 Offset: 0x1F2F20 VA: 0x1F2F20 Slot: 11
	public override void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg) { }

	// RVA: 0x1F3094 Offset: 0x1F3094 VA: 0x1F3094 Slot: 18
	public virtual IMessageSink GetClientContextSink(IMessageSink nextSink) { }

	// RVA: 0x1F3138 Offset: 0x1F3138 VA: 0x1F3138 Slot: 19
	public virtual IMessageSink GetServerContextSink(IMessageSink nextSink) { }

	[ComVisibleAttribute] // RVA: 0x9CBDC Offset: 0x9CBDC VA: 0x9CBDC
	// RVA: 0x1F31DC Offset: 0x1F31DC VA: 0x1F31DC Slot: 12
	public override bool IsContextOK(Context ctx, IConstructionCallMessage msg) { }

	// RVA: 0x1F32F0 Offset: 0x1F32F0 VA: 0x1F32F0
	internal static void ExitContext() { }

	// RVA: 0x1F346C Offset: 0x1F346C VA: 0x1F346C
	internal static void EnterContext() { }
}

// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedClientContextSink : IMessageSink // TypeDefIndex: 513
{
	// Fields
	private IMessageSink _next; // 0x8
	private SynchronizationAttribute _att; // 0xC

	// Methods

	// RVA: 0x1F3110 Offset: 0x1F3110 VA: 0x1F3110
	public void .ctor(IMessageSink next, SynchronizationAttribute att) { }

	// RVA: 0x1F35E8 Offset: 0x1F35E8 VA: 0x1F35E8 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x1F3788 Offset: 0x1F3788 VA: 0x1F3788 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedServerContextSink : IMessageSink // TypeDefIndex: 514
{
	// Fields
	private IMessageSink _next; // 0x8
	private SynchronizationAttribute _att; // 0xC

	// Methods

	// RVA: 0x1F31B4 Offset: 0x1F31B4 VA: 0x1F31B4
	public void .ctor(IMessageSink next, SynchronizationAttribute att) { }

	// RVA: 0x1F3BEC Offset: 0x1F3BEC VA: 0x1F3BEC Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x1F3D24 Offset: 0x1F3D24 VA: 0x1F3D24 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedContextReplySink : IMessageSink // TypeDefIndex: 515
{
	// Fields
	private IMessageSink _next; // 0x8
	private bool _newLock; // 0xC
	private SynchronizationAttribute _att; // 0x10

	// Methods

	// RVA: 0x1F3758 Offset: 0x1F3758 VA: 0x1F3758
	public void .ctor(IMessageSink next, SynchronizationAttribute att, bool newLock) { }

	// RVA: 0x1F399C Offset: 0x1F399C VA: 0x1F399C Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x1F3A24 Offset: 0x1F3A24 VA: 0x1F3A24 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Lifetime
[ComVisibleAttribute] // RVA: 0x990D0 Offset: 0x990D0 VA: 0x990D0
public interface ILease // TypeDefIndex: 516
{
	// Properties
	public abstract TimeSpan CurrentLeaseTime { get; }
	public abstract LeaseState CurrentState { get; }
	public abstract TimeSpan InitialLeaseTime { set; }
	public abstract TimeSpan RenewOnCallTime { get; set; }
	public abstract TimeSpan SponsorshipTimeout { set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract TimeSpan get_CurrentLeaseTime();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract LeaseState get_CurrentState();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void set_InitialLeaseTime(TimeSpan value);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract TimeSpan get_RenewOnCallTime();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void set_RenewOnCallTime(TimeSpan value);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void set_SponsorshipTimeout(TimeSpan value);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract TimeSpan Renew(TimeSpan renewalTime);
}

// Namespace: System.Runtime.Remoting.Lifetime
[ComVisibleAttribute] // RVA: 0x990E4 Offset: 0x990E4 VA: 0x990E4
public interface ISponsor // TypeDefIndex: 517
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract TimeSpan Renewal(ILease lease);
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class Lease : MarshalByRefObject, ILease // TypeDefIndex: 518
{
	// Fields
	private DateTime _leaseExpireTime; // 0x10
	private LeaseState _currentState; // 0x20
	private TimeSpan _initialLeaseTime; // 0x28
	private TimeSpan _renewOnCallTime; // 0x30
	private TimeSpan _sponsorshipTimeout; // 0x38
	private ArrayList _sponsors; // 0x40
	private Queue _renewingSponsors; // 0x44
	private Lease.RenewalDelegate _renewalDelegate; // 0x48

	// Properties
	public TimeSpan CurrentLeaseTime { get; }
	public LeaseState CurrentState { get; }
	public TimeSpan InitialLeaseTime { set; }
	public TimeSpan RenewOnCallTime { get; set; }
	public TimeSpan SponsorshipTimeout { set; }

	// Methods

	// RVA: 0x1F497C Offset: 0x1F497C VA: 0x1F497C
	public void .ctor() { }

	// RVA: 0x1F4C7C Offset: 0x1F4C7C VA: 0x1F4C7C Slot: 6
	public TimeSpan get_CurrentLeaseTime() { }

	// RVA: 0x1F4D44 Offset: 0x1F4D44 VA: 0x1F4D44 Slot: 7
	public LeaseState get_CurrentState() { }

	// RVA: 0x1F4D4C Offset: 0x1F4D4C VA: 0x1F4D4C
	public void Activate() { }

	// RVA: 0x1F4D58 Offset: 0x1F4D58 VA: 0x1F4D58 Slot: 8
	public void set_InitialLeaseTime(TimeSpan value) { }

	// RVA: 0x1F4F64 Offset: 0x1F4F64 VA: 0x1F4F64 Slot: 9
	public TimeSpan get_RenewOnCallTime() { }

	// RVA: 0x1F4F70 Offset: 0x1F4F70 VA: 0x1F4F70 Slot: 10
	public void set_RenewOnCallTime(TimeSpan value) { }

	// RVA: 0x1F50A0 Offset: 0x1F50A0 VA: 0x1F50A0 Slot: 11
	public void set_SponsorshipTimeout(TimeSpan value) { }

	// RVA: 0x1F51D0 Offset: 0x1F51D0 VA: 0x1F51D0 Slot: 12
	public TimeSpan Renew(TimeSpan renewalTime) { }

	// RVA: 0x1F52F4 Offset: 0x1F52F4 VA: 0x1F52F4 Slot: 13
	public void Unregister(ISponsor obj) { }

	// RVA: 0x1F5414 Offset: 0x1F5414 VA: 0x1F5414
	internal void UpdateState() { }

	// RVA: 0x1F5598 Offset: 0x1F5598 VA: 0x1F5598
	private void CheckNextSponsor() { }

	// RVA: 0x1F58F4 Offset: 0x1F58F4 VA: 0x1F58F4
	private void ProcessSponsorResponse(object state, bool timedOut) { }
}

// Namespace: 
private sealed class Lease.RenewalDelegate : MulticastDelegate // TypeDefIndex: 519
{
	// Methods

	// RVA: 0x1F58B4 Offset: 0x1F58B4 VA: 0x1F58B4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1F5C2C Offset: 0x1F5C2C VA: 0x1F5C2C Slot: 11
	public virtual TimeSpan Invoke(ILease lease) { }

	// RVA: 0x1F58C8 Offset: 0x1F58C8 VA: 0x1F58C8 Slot: 12
	public virtual IAsyncResult BeginInvoke(ILease lease, AsyncCallback callback, object object) { }

	// RVA: 0x1F5BEC Offset: 0x1F5BEC VA: 0x1F5BEC Slot: 13
	public virtual TimeSpan EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class LeaseManager // TypeDefIndex: 520
{
	// Fields
	private ArrayList _objects; // 0x8
	private Timer _timer; // 0xC

	// Methods

	// RVA: 0x1F601C Offset: 0x1F601C VA: 0x1F601C
	public void .ctor() { }

	// RVA: 0x1F6098 Offset: 0x1F6098 VA: 0x1F6098
	public void SetPollTime(TimeSpan timeSpan) { }

	// RVA: 0x1F616C Offset: 0x1F616C VA: 0x1F616C
	public void TrackLifetime(ServerIdentity identity) { }

	// RVA: 0x1F6288 Offset: 0x1F6288 VA: 0x1F6288
	public void StartManager() { }

	// RVA: 0x1F6428 Offset: 0x1F6428 VA: 0x1F6428
	public void StopManager() { }

	// RVA: 0x1F645C Offset: 0x1F645C VA: 0x1F645C
	public void ManageLeases(object state) { }
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class LeaseSink : IMessageSink // TypeDefIndex: 521
{
	// Fields
	private IMessageSink _nextSink; // 0x8

	// Methods

	// RVA: 0x1F05E4 Offset: 0x1F05E4 VA: 0x1F05E4
	public void .ctor(IMessageSink nextSink) { }

	// RVA: 0x1F6764 Offset: 0x1F6764 VA: 0x1F6764 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x1F6BE4 Offset: 0x1F6BE4 VA: 0x1F6BE4 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x1F684C Offset: 0x1F684C VA: 0x1F684C
	private void RenewLease(IMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Lifetime
[ComVisibleAttribute] // RVA: 0x990F8 Offset: 0x990F8 VA: 0x990F8
[Serializable]
public enum LeaseState // TypeDefIndex: 522
{
	// Fields
	public int value__; // 0x0
	public const LeaseState Null = 0;
	public const LeaseState Initial = 1;
	public const LeaseState Active = 2;
	public const LeaseState Renewing = 3;
	public const LeaseState Expired = 4;
}

// Namespace: System.Runtime.Remoting.Lifetime
[ComVisibleAttribute] // RVA: 0x9910C Offset: 0x9910C VA: 0x9910C
public sealed class LifetimeServices // TypeDefIndex: 523
{
	// Fields
	private static TimeSpan _leaseManagerPollTime; // 0x0
	private static TimeSpan _leaseTime; // 0x8
	private static TimeSpan _renewOnCallTime; // 0x10
	private static TimeSpan _sponsorshipTimeout; // 0x18
	private static LeaseManager _leaseManager; // 0x20

	// Properties
	public static TimeSpan LeaseManagerPollTime { get; set; }
	public static TimeSpan LeaseTime { get; set; }
	public static TimeSpan RenewOnCallTime { get; set; }
	public static TimeSpan SponsorshipTimeout { get; set; }

	// Methods

	// RVA: 0x1F6CD4 Offset: 0x1F6CD4 VA: 0x1F6CD4
	private static void .cctor() { }

	// RVA: 0x1F6394 Offset: 0x1F6394 VA: 0x1F6394
	public static TimeSpan get_LeaseManagerPollTime() { }

	// RVA: 0x1ED620 Offset: 0x1ED620 VA: 0x1ED620
	public static void set_LeaseManagerPollTime(TimeSpan value) { }

	// RVA: 0x1F4AC0 Offset: 0x1F4AC0 VA: 0x1F4AC0
	public static TimeSpan get_LeaseTime() { }

	// RVA: 0x1ED464 Offset: 0x1ED464 VA: 0x1ED464
	public static void set_LeaseTime(TimeSpan value) { }

	// RVA: 0x1F4B54 Offset: 0x1F4B54 VA: 0x1F4B54
	public static TimeSpan get_RenewOnCallTime() { }

	// RVA: 0x1ED58C Offset: 0x1ED58C VA: 0x1ED58C
	public static void set_RenewOnCallTime(TimeSpan value) { }

	// RVA: 0x1F4BE8 Offset: 0x1F4BE8 VA: 0x1F4BE8
	public static TimeSpan get_SponsorshipTimeout() { }

	// RVA: 0x1ED4F8 Offset: 0x1ED4F8 VA: 0x1ED4F8
	public static void set_SponsorshipTimeout(TimeSpan value) { }

	// RVA: 0x1F6E3C Offset: 0x1F6E3C VA: 0x1F6E3C
	internal static void TrackLifetime(ServerIdentity identity) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal enum ArgInfoType // TypeDefIndex: 524
{
	// Fields
	public byte value__; // 0x0
	public const ArgInfoType In = 0;
	public const ArgInfoType Out = 1;
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ArgInfo // TypeDefIndex: 525
{
	// Fields
	private int[] _paramMap; // 0x8
	private int _inoutArgCount; // 0xC
	private MethodBase _method; // 0x10

	// Methods

	// RVA: 0x1F6EE8 Offset: 0x1F6EE8 VA: 0x1F6EE8
	public void .ctor(MethodBase method, ArgInfoType type) { }

	// RVA: 0x1F719C Offset: 0x1F719C VA: 0x1F719C
	public int GetInOutArgCount() { }

	// RVA: 0x1F71A4 Offset: 0x1F71A4 VA: 0x1F71A4
	public object[] GetInOutArgs(object[] args) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x99120 Offset: 0x99120 VA: 0x99120
public class AsyncResult : IAsyncResult, IMessageSink // TypeDefIndex: 526
{
	// Fields
	private object async_state; // 0x8
	private WaitHandle handle; // 0xC
	private object async_delegate; // 0x10
	private IntPtr data; // 0x14
	private object object_data; // 0x18
	private bool sync_completed; // 0x1C
	private bool completed; // 0x1D
	private bool endinvoke_called; // 0x1E
	private object async_callback; // 0x20
	private ExecutionContext current; // 0x24
	private ExecutionContext original; // 0x28
	private int gchandle; // 0x2C
	private MonoMethodMessage call_message; // 0x30
	private IMessageCtrl message_ctrl; // 0x34
	private IMessage reply_message; // 0x38

	// Properties
	public virtual object AsyncState { get; }
	public virtual WaitHandle AsyncWaitHandle { get; }
	public virtual bool CompletedSynchronously { get; }
	public virtual bool IsCompleted { get; }
	public bool EndInvokeCalled { get; set; }
	public virtual object AsyncDelegate { get; }
	public IMessageSink NextSink { get; }
	internal MonoMethodMessage CallMessage { get; set; }

	// Methods

	// RVA: 0x1F7308 Offset: 0x1F7308 VA: 0x1F7308
	internal void .ctor() { }

	// RVA: 0x1F7310 Offset: 0x1F7310 VA: 0x1F7310 Slot: 9
	public virtual object get_AsyncState() { }

	// RVA: 0x1F7318 Offset: 0x1F7318 VA: 0x1F7318 Slot: 10
	public virtual WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x1F7414 Offset: 0x1F7414 VA: 0x1F7414 Slot: 11
	public virtual bool get_CompletedSynchronously() { }

	// RVA: 0x1F741C Offset: 0x1F741C VA: 0x1F741C Slot: 12
	public virtual bool get_IsCompleted() { }

	// RVA: 0x1F7424 Offset: 0x1F7424 VA: 0x1F7424
	public bool get_EndInvokeCalled() { }

	// RVA: 0x1F742C Offset: 0x1F742C VA: 0x1F742C
	public void set_EndInvokeCalled(bool value) { }

	// RVA: 0x1F7434 Offset: 0x1F7434 VA: 0x1F7434 Slot: 13
	public virtual object get_AsyncDelegate() { }

	// RVA: 0x1F743C Offset: 0x1F743C VA: 0x1F743C Slot: 14
	public IMessageSink get_NextSink() { }

	// RVA: 0x1F7444 Offset: 0x1F7444 VA: 0x1F7444 Slot: 15
	public virtual IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x1F74CC Offset: 0x1F74CC VA: 0x1F74CC Slot: 16
	public virtual IMessage GetReplyMessage() { }

	// RVA: 0x1F74D4 Offset: 0x1F74D4 VA: 0x1F74D4 Slot: 17
	public virtual void SetMessageCtrl(IMessageCtrl mc) { }

	// RVA: 0x1F74DC Offset: 0x1F74DC VA: 0x1F74DC
	internal void SetCompletedSynchronously(bool completed) { }

	// RVA: 0x1F74E4 Offset: 0x1F74E4 VA: 0x1F74E4
	internal IMessage EndInvoke() { }

	// RVA: 0x1F756C Offset: 0x1F756C VA: 0x1F756C Slot: 18
	public virtual IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x1F77E8 Offset: 0x1F77E8 VA: 0x1F77E8
	internal MonoMethodMessage get_CallMessage() { }

	// RVA: 0x1F77F0 Offset: 0x1F77F0 VA: 0x1F77F0
	internal void set_CallMessage(MonoMethodMessage value) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADArgHolder // TypeDefIndex: 527
{
	// Fields
	public int index; // 0x8

	// Methods

	// RVA: 0x1F77F8 Offset: 0x1F77F8 VA: 0x1F77F8
	public void .ctor(int i) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADObjRef // TypeDefIndex: 528
{
	// Fields
	private ObjRef objref; // 0x8
	public int SourceDomain; // 0xC

	// Properties
	public string TypeName { get; }
	public string URI { get; }

	// Methods

	// RVA: 0x189AB8 Offset: 0x189AB8 VA: 0x189AB8
	public void .ctor(ObjRef o, int sourceDomain) { }

	// RVA: 0x189AE0 Offset: 0x189AE0 VA: 0x189AE0
	public string get_TypeName() { }

	// RVA: 0x189BE0 Offset: 0x189BE0 VA: 0x189BE0
	public string get_URI() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMessageBase // TypeDefIndex: 529
{
	// Fields
	protected object[] _args; // 0x8
	protected byte[] _serializedArgs; // 0xC
	protected int _propertyCount; // 0x10
	protected CADArgHolder _callContext; // 0x14

	// Methods

	// RVA: 0x1F7818 Offset: 0x1F7818 VA: 0x1F7818
	public void .ctor() { }

	// RVA: 0x1F7820 Offset: 0x1F7820 VA: 0x1F7820
	internal static int MarshalProperties(IDictionary dict, ref ArrayList args) { }

	// RVA: 0x1F8028 Offset: 0x1F8028 VA: 0x1F8028
	internal static void UnmarshalProperties(IDictionary dict, int count, ArrayList args) { }

	// RVA: 0x1F81C4 Offset: 0x1F81C4 VA: 0x1F81C4
	private static bool IsPossibleToIgnoreMarshal(object obj) { }

	// RVA: 0x1F84CC Offset: 0x1F84CC VA: 0x1F84CC
	protected object MarshalArgument(object arg, ref ArrayList args) { }

	// RVA: 0x1F8708 Offset: 0x1F8708 VA: 0x1F8708
	protected object UnmarshalArgument(object arg, ArrayList args) { }

	// RVA: 0x1F8EEC Offset: 0x1F8EEC VA: 0x1F8EEC
	internal object[] MarshalArguments(object[] arguments, ref ArrayList args) { }

	// RVA: 0x1F9038 Offset: 0x1F9038 VA: 0x1F9038
	internal object[] UnmarshalArguments(object[] arguments, ArrayList args) { }

	// RVA: 0x1F9184 Offset: 0x1F9184 VA: 0x1F9184
	protected void SaveLogicalCallContext(IMethodMessage msg, ref ArrayList serializeList) { }

	// RVA: 0x1F9458 Offset: 0x1F9458 VA: 0x1F9458
	internal LogicalCallContext GetLogicalCallContext(ArrayList args) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMethodCallMessage : CADMessageBase // TypeDefIndex: 530
{
	// Fields
	private string _uri; // 0x18
	internal RuntimeMethodHandle MethodHandle; // 0x1C
	internal string FullTypeName; // 0x20

	// Properties
	internal string Uri { get; }
	internal int PropertiesCount { get; }

	// Methods

	// RVA: 0x1F956C Offset: 0x1F956C VA: 0x1F956C
	internal void .ctor(IMethodCallMessage callMsg) { }

	// RVA: 0x1F9988 Offset: 0x1F9988 VA: 0x1F9988
	internal string get_Uri() { }

	// RVA: 0x1E7A10 Offset: 0x1E7A10 VA: 0x1E7A10
	internal static CADMethodCallMessage Create(IMessage callMsg) { }

	// RVA: 0x1F9990 Offset: 0x1F9990 VA: 0x1F9990
	internal ArrayList GetArguments() { }

	// RVA: 0x1F9AE4 Offset: 0x1F9AE4 VA: 0x1F9AE4
	internal object[] GetArgs(ArrayList args) { }

	// RVA: 0x1F9AF0 Offset: 0x1F9AF0 VA: 0x1F9AF0
	internal int get_PropertiesCount() { }

	// RVA: 0x1F9AF8 Offset: 0x1F9AF8 VA: 0x1F9AF8
	private static Type[] GetSignature(MethodBase methodBase, bool load) { }

	// RVA: 0x1F9D24 Offset: 0x1F9D24 VA: 0x1F9D24
	internal MethodBase GetMethod() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMethodReturnMessage : CADMessageBase // TypeDefIndex: 531
{
	// Fields
	private object _returnValue; // 0x18
	private CADArgHolder _exception; // 0x1C

	// Properties
	internal int PropertiesCount { get; }

	// Methods

	// RVA: 0x1FA504 Offset: 0x1FA504 VA: 0x1FA504
	internal void .ctor(IMethodReturnMessage retMsg) { }

	// RVA: 0x1FA958 Offset: 0x1FA958 VA: 0x1FA958
	internal static CADMethodReturnMessage Create(IMessage callMsg) { }

	// RVA: 0x1FA9F4 Offset: 0x1FA9F4 VA: 0x1FA9F4
	internal ArrayList GetArguments() { }

	// RVA: 0x1FAB48 Offset: 0x1FAB48 VA: 0x1FAB48
	internal object[] GetArgs(ArrayList args) { }

	// RVA: 0x1FAB54 Offset: 0x1FAB54 VA: 0x1FAB54
	internal object GetReturnValue(ArrayList args) { }

	// RVA: 0x1FAB60 Offset: 0x1FAB60 VA: 0x1FAB60
	internal Exception GetException(ArrayList args) { }

	// RVA: 0x1FAC90 Offset: 0x1FAC90 VA: 0x1FAC90
	internal int get_PropertiesCount() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x99134 Offset: 0x99134 VA: 0x99134
[Serializable]
public sealed class CallContext // TypeDefIndex: 532
{
	// Fields
	[ThreadStaticAttribute] // RVA: 0x9B2DC Offset: 0x9B2DC VA: 0x9B2DC
	private static Hashtable datastore; // 0x80000000

	// Methods

	// RVA: 0x189C14 Offset: 0x189C14 VA: 0x189C14
	private void .ctor() { }

	// RVA: 0x189C1C Offset: 0x189C1C VA: 0x189C1C
	internal static LogicalCallContext CreateLogicalCallContext(bool createEmpty) { }

	// RVA: 0x18A228 Offset: 0x18A228 VA: 0x18A228
	internal static object SetCurrentCallContext(LogicalCallContext ctx) { }

	// RVA: 0x18A408 Offset: 0x18A408 VA: 0x18A408
	internal static void RestoreCallContext(object oldContext) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x99148 Offset: 0x99148 VA: 0x99148
public interface ILogicalThreadAffinative // TypeDefIndex: 533
{}

// Namespace: System.Runtime.Remoting.Messaging
internal class ClientContextTerminatorSink : IMessageSink // TypeDefIndex: 534
{
	// Fields
	private Context _context; // 0x8

	// Methods

	// RVA: 0x18A7B8 Offset: 0x18A7B8 VA: 0x18A7B8
	public void .ctor(Context ctx) { }

	// RVA: 0x18A7D8 Offset: 0x18A7D8 VA: 0x18A7D8 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x18AFDC Offset: 0x18AFDC VA: 0x18AFDC Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ClientContextReplySink : IMessageSink // TypeDefIndex: 535
{
	// Fields
	private IMessageSink _replySink; // 0x8
	private Context _context; // 0xC

	// Methods

	// RVA: 0x18A5A4 Offset: 0x18A5A4 VA: 0x18A5A4
	public void .ctor(Context ctx, IMessageSink replySink) { }

	// RVA: 0x18A5CC Offset: 0x18A5CC VA: 0x18A5CC Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x18A730 Offset: 0x18A730 VA: 0x18A730 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x9915C Offset: 0x9915C VA: 0x9915C
[CLSCompliantAttribute] // RVA: 0x9915C Offset: 0x9915C VA: 0x9915C
[Serializable]
public class ConstructionCall : MethodCall, IConstructionCallMessage, IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 536
{
	// Fields
	private IActivator _activator; // 0x34
	private object[] _activationAttributes; // 0x38
	private IList _contextProperties; // 0x3C
	private Type _activationType; // 0x40
	private string _activationTypeName; // 0x44
	private bool _isContextOk; // 0x48
	private RemotingProxy _sourceProxy; // 0x4C
	[CompilerGeneratedAttribute] // RVA: 0x9B2EC Offset: 0x9B2EC VA: 0x9B2EC
	private static Dictionary<string, int> <>f__switch$map20; // 0x0

	// Properties
	internal bool IsContextOk { get; set; }
	public Type ActivationType { get; }
	public string ActivationTypeName { get; }
	public IActivator Activator { get; set; }
	public object[] CallSiteActivationAttributes { get; }
	public IList ContextProperties { get; }
	public override IDictionary Properties { get; }
	internal RemotingProxy SourceProxy { get; }

	// Methods

	// RVA: 0x18B324 Offset: 0x18B324 VA: 0x18B324
	internal void .ctor(Type type) { }

	// RVA: 0x18B37C Offset: 0x18B37C VA: 0x18B37C
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x18B498 Offset: 0x18B498 VA: 0x18B498 Slot: 22
	internal override void InitDictionary() { }

	// RVA: 0x18B61C Offset: 0x18B61C VA: 0x18B61C
	internal bool get_IsContextOk() { }

	// RVA: 0x18B624 Offset: 0x18B624 VA: 0x18B624
	internal void set_IsContextOk(bool value) { }

	// RVA: 0x18B62C Offset: 0x18B62C VA: 0x18B62C Slot: 25
	public Type get_ActivationType() { }

	// RVA: 0x18B6E8 Offset: 0x18B6E8 VA: 0x18B6E8 Slot: 26
	public string get_ActivationTypeName() { }

	// RVA: 0x18B6F0 Offset: 0x18B6F0 VA: 0x18B6F0 Slot: 27
	public IActivator get_Activator() { }

	// RVA: 0x18B6F8 Offset: 0x18B6F8 VA: 0x18B6F8 Slot: 28
	public void set_Activator(IActivator value) { }

	// RVA: 0x18B700 Offset: 0x18B700 VA: 0x18B700 Slot: 29
	public object[] get_CallSiteActivationAttributes() { }

	// RVA: 0x18B708 Offset: 0x18B708 VA: 0x18B708
	internal void SetActivationAttributes(object[] attributes) { }

	// RVA: 0x18B710 Offset: 0x18B710 VA: 0x18B710 Slot: 30
	public IList get_ContextProperties() { }

	// RVA: 0x18B790 Offset: 0x18B790 VA: 0x18B790 Slot: 19
	internal override void InitMethodProperty(string key, object value) { }

	// RVA: 0x18C4FC Offset: 0x18C4FC VA: 0x18C4FC Slot: 20
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x18CC98 Offset: 0x18CC98 VA: 0x18CC98 Slot: 21
	public override IDictionary get_Properties() { }

	// RVA: 0x18CD00 Offset: 0x18CD00 VA: 0x18CD00
	internal RemotingProxy get_SourceProxy() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ConstructionCallDictionary : MethodDictionary // TypeDefIndex: 537
{
	// Fields
	public static string[] InternalKeys; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0x9B2FC Offset: 0x9B2FC VA: 0x9B2FC
	private static Dictionary<string, int> <>f__switch$map23; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0x9B30C Offset: 0x9B30C VA: 0x9B30C
	private static Dictionary<string, int> <>f__switch$map24; // 0x8

	// Methods

	// RVA: 0x18B540 Offset: 0x18B540 VA: 0x18B540
	public void .ctor(IConstructionCallMessage message) { }

	// RVA: 0x18CD30 Offset: 0x18CD30 VA: 0x18CD30
	private static void .cctor() { }

	// RVA: 0x18D260 Offset: 0x18D260 VA: 0x18D260 Slot: 15
	protected override object GetMethodProperty(string key) { }

	// RVA: 0x18E6CC Offset: 0x18E6CC VA: 0x18E6CC Slot: 16
	protected override void SetMethodProperty(string key, object value) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[CLSCompliantAttribute] // RVA: 0x99194 Offset: 0x99194 VA: 0x99194
[ComVisibleAttribute] // RVA: 0x99194 Offset: 0x99194 VA: 0x99194
[Serializable]
public class ConstructionResponse : MethodResponse, IConstructionReturnMessage, IMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 538
{
	// Properties
	public override IDictionary Properties { get; }

	// Methods

	// RVA: 0x18F290 Offset: 0x18F290 VA: 0x18F290
	internal void .ctor(object resultObject, LogicalCallContext callCtx, IMethodCallMessage msg) { }

	// RVA: 0x18F3BC Offset: 0x18F3BC VA: 0x18F3BC
	internal void .ctor(Exception e, IMethodCallMessage msg) { }

	// RVA: 0x18F518 Offset: 0x18F518 VA: 0x18F518
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x18F614 Offset: 0x18F614 VA: 0x18F614 Slot: 23
	public override IDictionary get_Properties() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class EnvoyTerminatorSink : IMessageSink // TypeDefIndex: 539
{
	// Fields
	public static EnvoyTerminatorSink Instance; // 0x0

	// Methods

	// RVA: 0x18F6D4 Offset: 0x18F6D4 VA: 0x18F6D4
	public void .ctor() { }

	// RVA: 0x18F6DC Offset: 0x18F6DC VA: 0x18F6DC
	private static void .cctor() { }

	// RVA: 0x18F750 Offset: 0x18F750 VA: 0x18F750 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x18F880 Offset: 0x18F880 VA: 0x18F880 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class ErrorMessage : IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 540
{
	// Fields
	private string _uri; // 0x8

	// Properties
	public int ArgCount { get; }
	public object[] Args { get; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public virtual IDictionary Properties { get; }
	public string TypeName { get; }
	public string Uri { get; }
	public LogicalCallContext LogicalCallContext { get; }

	// Methods

	// RVA: 0x18F9B8 Offset: 0x18F9B8 VA: 0x18F9B8
	public void .ctor() { }

	// RVA: 0x18FA24 Offset: 0x18FA24 VA: 0x18FA24 Slot: 5
	public int get_ArgCount() { }

	// RVA: 0x18FA2C Offset: 0x18FA2C VA: 0x18FA2C Slot: 6
	public object[] get_Args() { }

	// RVA: 0x18FA34 Offset: 0x18FA34 VA: 0x18FA34 Slot: 8
	public MethodBase get_MethodBase() { }

	// RVA: 0x18FA3C Offset: 0x18FA3C VA: 0x18FA3C Slot: 9
	public string get_MethodName() { }

	// RVA: 0x18FA98 Offset: 0x18FA98 VA: 0x18FA98 Slot: 10
	public object get_MethodSignature() { }

	// RVA: 0x18FAA0 Offset: 0x18FAA0 VA: 0x18FAA0 Slot: 14
	public virtual IDictionary get_Properties() { }

	// RVA: 0x18FAA8 Offset: 0x18FAA8 VA: 0x18FAA8 Slot: 11
	public string get_TypeName() { }

	// RVA: 0x18FB04 Offset: 0x18FB04 VA: 0x18FB04 Slot: 12
	public string get_Uri() { }

	// RVA: 0x18FB0C Offset: 0x18FB0C VA: 0x18FB0C Slot: 13
	public object GetArg(int arg_num) { }

	// RVA: 0x18FB14 Offset: 0x18FB14 VA: 0x18FB14 Slot: 7
	public LogicalCallContext get_LogicalCallContext() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x991CC Offset: 0x991CC VA: 0x991CC
[Serializable]
public class Header // TypeDefIndex: 541
{
	// Fields
	public string HeaderNamespace; // 0x8
	public bool MustUnderstand; // 0xC
	public string Name; // 0x10
	public object Value; // 0x14

	// Methods

	// RVA: 0x18FB1C Offset: 0x18FB1C VA: 0x18FB1C
	public void .ctor(string _Name, object _Value) { }

	// RVA: 0x18FB54 Offset: 0x18FB54 VA: 0x18FB54
	public void .ctor(string _Name, object _Value, bool _MustUnderstand) { }

	// RVA: 0x18FB8C Offset: 0x18FB8C VA: 0x18FB8C
	public void .ctor(string _Name, object _Value, bool _MustUnderstand, string _HeaderNamespace) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal interface IInternalMessage // TypeDefIndex: 542
{
	// Properties
	public abstract Identity TargetIdentity { get; set; }
	public abstract string Uri { get; set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Identity get_TargetIdentity();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void set_TargetIdentity(Identity value);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract string get_Uri();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void set_Uri(string value);
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x991E0 Offset: 0x991E0 VA: 0x991E0
public interface IMessage // TypeDefIndex: 543
{
	// Properties
	public abstract IDictionary Properties { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IDictionary get_Properties();
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x991F4 Offset: 0x991F4 VA: 0x991F4
public interface IMessageCtrl // TypeDefIndex: 544
{}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x99208 Offset: 0x99208 VA: 0x99208
public interface IMessageSink // TypeDefIndex: 545
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessage SyncProcessMessage(IMessage msg);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink);
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x9921C Offset: 0x9921C VA: 0x9921C
public interface IMethodCallMessage : IMessage, IMethodMessage // TypeDefIndex: 546
{}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x99230 Offset: 0x99230 VA: 0x99230
public interface IMethodMessage : IMessage // TypeDefIndex: 547
{
	// Properties
	public abstract int ArgCount { get; }
	public abstract object[] Args { get; }
	public abstract LogicalCallContext LogicalCallContext { get; }
	public abstract MethodBase MethodBase { get; }
	public abstract string MethodName { get; }
	public abstract object MethodSignature { get; }
	public abstract string TypeName { get; }
	public abstract string Uri { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int get_ArgCount();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract object[] get_Args();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract LogicalCallContext get_LogicalCallContext();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract MethodBase get_MethodBase();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract string get_MethodName();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract object get_MethodSignature();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract string get_TypeName();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract string get_Uri();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract object GetArg(int argNum);
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x99244 Offset: 0x99244 VA: 0x99244
public interface IMethodReturnMessage : IMessage, IMethodMessage // TypeDefIndex: 548
{
	// Properties
	public abstract Exception Exception { get; }
	public abstract int OutArgCount { get; }
	public abstract object[] OutArgs { get; }
	public abstract object ReturnValue { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Exception get_Exception();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int get_OutArgCount();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract object[] get_OutArgs();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract object get_ReturnValue();
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x99258 Offset: 0x99258 VA: 0x99258
public interface IRemotingFormatter : IFormatter // TypeDefIndex: 549
{}

// Namespace: System.Runtime.Remoting.Messaging
internal interface ISerializationRootObject // TypeDefIndex: 550
{}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x9926C Offset: 0x9926C VA: 0x9926C
[Serializable]
public sealed class LogicalCallContext : ICloneable, ISerializable // TypeDefIndex: 551
{
	// Fields
	private Hashtable _data; // 0x8
	private CallContextRemotingData _remotingData; // 0xC

	// Properties
	public bool HasInfo { get; }
	internal Hashtable Datastore { get; }

	// Methods

	// RVA: 0x18A0F8 Offset: 0x18A0F8 VA: 0x18A0F8
	internal void .ctor() { }

	// RVA: 0x18FFD0 Offset: 0x18FFD0 VA: 0x18FFD0
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x18A3C4 Offset: 0x18A3C4 VA: 0x18A3C4
	public bool get_HasInfo() { }

	// RVA: 0x190220 Offset: 0x190220 VA: 0x190220 Slot: 5
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x18A174 Offset: 0x18A174 VA: 0x18A174
	public void SetData(string name, object data) { }

	// RVA: 0x1905F0 Offset: 0x1905F0 VA: 0x1905F0 Slot: 4
	public object Clone() { }

	// RVA: 0x18A400 Offset: 0x18A400 VA: 0x18A400
	internal Hashtable get_Datastore() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class CallContextRemotingData : ICloneable // TypeDefIndex: 552
{
	// Fields
	private string _logicalCallID; // 0x8

	// Methods

	// RVA: 0x18A514 Offset: 0x18A514 VA: 0x18A514
	public void .ctor() { }

	// RVA: 0x18A51C Offset: 0x18A51C VA: 0x18A51C Slot: 4
	public object Clone() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[CLSCompliantAttribute] // RVA: 0x99280 Offset: 0x99280 VA: 0x99280
[ComVisibleAttribute] // RVA: 0x99280 Offset: 0x99280 VA: 0x99280
[Serializable]
public class MethodCall : ISerializable, IInternalMessage, IMessage, IMethodCallMessage, IMethodMessage, ISerializationRootObject // TypeDefIndex: 553
{
	// Fields
	private string _uri; // 0x8
	private string _typeName; // 0xC
	private string _methodName; // 0x10
	private object[] _args; // 0x14
	private Type[] _methodSignature; // 0x18
	private MethodBase _methodBase; // 0x1C
	private LogicalCallContext _callContext; // 0x20
	private Identity _targetIdentity; // 0x24
	private Type[] _genericArguments; // 0x28
	protected IDictionary ExternalProperties; // 0x2C
	protected IDictionary InternalProperties; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0x9B31C Offset: 0x9B31C VA: 0x9B31C
	private static Dictionary<string, int> <>f__switch$map1F; // 0x0

	// Properties
	private string System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; }
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }
	public int ArgCount { get; }
	public object[] Args { get; }
	public LogicalCallContext LogicalCallContext { get; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public virtual IDictionary Properties { get; }
	public string TypeName { get; }
	public string Uri { get; set; }
	private Type[] GenericArguments { get; }

	// Methods

	// RVA: 0x190A68 Offset: 0x190A68 VA: 0x190A68
	public void .ctor(Header[] h1) { }

	// RVA: 0x18B394 Offset: 0x18B394 VA: 0x18B394
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1917A8 Offset: 0x1917A8 VA: 0x1917A8
	internal void .ctor(CADMethodCallMessage msg) { }

	// RVA: 0x18B374 Offset: 0x18B374 VA: 0x18B374
	internal void .ctor() { }

	// RVA: 0x1919A8 Offset: 0x1919A8 VA: 0x1919A8 Slot: 7
	private string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri() { }

	// RVA: 0x1919B8 Offset: 0x1919B8 VA: 0x1919B8 Slot: 8
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value) { }

	// RVA: 0x1919C8 Offset: 0x1919C8 VA: 0x1919C8 Slot: 5
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }

	// RVA: 0x1919D0 Offset: 0x1919D0 VA: 0x1919D0 Slot: 6
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(Identity value) { }

	// RVA: 0x18BD38 Offset: 0x18BD38 VA: 0x18BD38 Slot: 19
	internal virtual void InitMethodProperty(string key, object value) { }

	// RVA: 0x18C728 Offset: 0x18C728 VA: 0x18C728 Slot: 20
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1919D8 Offset: 0x1919D8 VA: 0x1919D8 Slot: 10
	public int get_ArgCount() { }

	// RVA: 0x1919FC Offset: 0x1919FC VA: 0x1919FC Slot: 11
	public object[] get_Args() { }

	// RVA: 0x191A04 Offset: 0x191A04 VA: 0x191A04 Slot: 12
	public LogicalCallContext get_LogicalCallContext() { }

	// RVA: 0x191A80 Offset: 0x191A80 VA: 0x191A80 Slot: 13
	public MethodBase get_MethodBase() { }

	// RVA: 0x191AA8 Offset: 0x191AA8 VA: 0x191AA8 Slot: 14
	public string get_MethodName() { }

	// RVA: 0x191AF0 Offset: 0x191AF0 VA: 0x191AF0 Slot: 15
	public object get_MethodSignature() { }

	// RVA: 0x18CCCC Offset: 0x18CCCC VA: 0x18CCCC Slot: 21
	public virtual IDictionary get_Properties() { }

	// RVA: 0x191C7C Offset: 0x191C7C VA: 0x191C7C Slot: 22
	internal virtual void InitDictionary() { }

	// RVA: 0x191DCC Offset: 0x191DCC VA: 0x191DCC Slot: 16
	public string get_TypeName() { }

	// RVA: 0x1919B0 Offset: 0x1919B0 VA: 0x1919B0 Slot: 17
	public string get_Uri() { }

	// RVA: 0x1919C0 Offset: 0x1919C0 VA: 0x1919C0 Slot: 23
	public void set_Uri(string value) { }

	// RVA: 0x191E3C Offset: 0x191E3C VA: 0x191E3C Slot: 18
	public object GetArg(int argNum) { }

	// RVA: 0x191E84 Offset: 0x191E84 VA: 0x191E84 Slot: 24
	public virtual void Init() { }

	// RVA: 0x190B40 Offset: 0x190B40 VA: 0x190B40
	public void ResolveMethod() { }

	// RVA: 0x191F74 Offset: 0x191F74 VA: 0x191F74
	private Type CastTo(string clientType, Type serverType) { }

	// RVA: 0x192A38 Offset: 0x192A38 VA: 0x192A38
	private static string GetTypeNameFromAssemblyQualifiedName(string aqname) { }

	// RVA: 0x1929DC Offset: 0x1929DC VA: 0x1929DC
	private Type[] get_GenericArguments() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class MethodCallDictionary : MethodDictionary // TypeDefIndex: 554
{
	// Fields
	public static string[] InternalKeys; // 0x0

	// Methods

	// RVA: 0x191D24 Offset: 0x191D24 VA: 0x191D24
	public void .ctor(IMethodMessage message) { }

	// RVA: 0x192B38 Offset: 0x192B38 VA: 0x192B38
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[DefaultMemberAttribute] // RVA: 0x992B8 Offset: 0x992B8 VA: 0x992B8
[Serializable]
internal class MethodDictionary : IEnumerable, ICollection, IDictionary // TypeDefIndex: 555
{
	// Fields
	private IDictionary _internalProperties; // 0x8
	protected IMethodMessage _message; // 0xC
	private string[] _methodKeys; // 0x10
	private bool _ownProperties; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0x9B32C Offset: 0x9B32C VA: 0x9B32C
	private static Dictionary<string, int> <>f__switch$map21; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0x9B33C Offset: 0x9B33C VA: 0x9B33C
	private static Dictionary<string, int> <>f__switch$map22; // 0x4

	// Properties
	internal bool HasInternalProperties { get; }
	internal IDictionary InternalProperties { get; }
	public string[] MethodKeys { set; }
	public object Item { get; set; }
	public ICollection Values { get; }
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x18CD08 Offset: 0x18CD08 VA: 0x18CD08
	public void .ctor(IMethodMessage message) { }

	// RVA: 0x192E4C Offset: 0x192E4C VA: 0x192E4C Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x192FFC Offset: 0x192FFC VA: 0x192FFC
	internal bool get_HasInternalProperties() { }

	// RVA: 0x193124 Offset: 0x193124 VA: 0x193124
	internal IDictionary get_InternalProperties() { }

	// RVA: 0x18CD28 Offset: 0x18CD28 VA: 0x18CD28
	public void set_MethodKeys(string[] value) { }

	// RVA: 0x1931BC Offset: 0x1931BC VA: 0x1931BC Slot: 14
	protected virtual IDictionary AllocInternalProperties() { }

	// RVA: 0x18B5E8 Offset: 0x18B5E8 VA: 0x18B5E8
	public IDictionary GetInternalProperties() { }

	// RVA: 0x193234 Offset: 0x193234 VA: 0x193234
	private bool IsOverridenKey(string key) { }

	// RVA: 0x19332C Offset: 0x19332C VA: 0x19332C Slot: 9
	public object get_Item(object key) { }

	// RVA: 0x193548 Offset: 0x193548 VA: 0x193548 Slot: 10
	public void set_Item(object key, object value) { }

	// RVA: 0x18DD10 Offset: 0x18DD10 VA: 0x18DD10 Slot: 15
	protected virtual object GetMethodProperty(string key) { }

	// RVA: 0x18EC80 Offset: 0x18EC80 VA: 0x18EC80 Slot: 16
	protected virtual void SetMethodProperty(string key, object value) { }

	// RVA: 0x1937A4 Offset: 0x1937A4 VA: 0x1937A4 Slot: 17
	public ICollection get_Values() { }

	// RVA: 0x19354C Offset: 0x19354C VA: 0x19354C Slot: 11
	public void Add(object key, object value) { }

	// RVA: 0x193C80 Offset: 0x193C80 VA: 0x193C80 Slot: 13
	public void Remove(object key) { }

	// RVA: 0x193ED8 Offset: 0x193ED8 VA: 0x193ED8 Slot: 5
	public int get_Count() { }

	// RVA: 0x193FE4 Offset: 0x193FE4 VA: 0x193FE4 Slot: 6
	public bool get_IsSynchronized() { }

	// RVA: 0x193FEC Offset: 0x193FEC VA: 0x193FEC Slot: 7
	public object get_SyncRoot() { }

	// RVA: 0x193FF0 Offset: 0x193FF0 VA: 0x193FF0 Slot: 8
	public void CopyTo(Array array, int index) { }

	// RVA: 0x1940E0 Offset: 0x1940E0 VA: 0x1940E0 Slot: 12
	public IDictionaryEnumerator GetEnumerator() { }
}

// Namespace: 
private class MethodDictionary.DictionaryEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 556
{
	// Fields
	private MethodDictionary _methodDictionary; // 0x8
	private IDictionaryEnumerator _hashtableEnum; // 0xC
	private int _posMethod; // 0x10

	// Properties
	public object Current { get; }
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }

	// Methods

	// RVA: 0x192EBC Offset: 0x192EBC VA: 0x192EBC
	public void .ctor(MethodDictionary methodDictionary) { }

	// RVA: 0x194150 Offset: 0x194150 VA: 0x194150 Slot: 4
	public object get_Current() { }

	// RVA: 0x1943A4 Offset: 0x1943A4 VA: 0x1943A4 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x194638 Offset: 0x194638 VA: 0x194638 Slot: 6
	public void Reset() { }

	// RVA: 0x19418C Offset: 0x19418C VA: 0x19418C Slot: 7
	public DictionaryEntry get_Entry() { }

	// RVA: 0x194718 Offset: 0x194718 VA: 0x194718 Slot: 8
	public object get_Key() { }

	// RVA: 0x194754 Offset: 0x194754 VA: 0x194754 Slot: 9
	public object get_Value() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[CLSCompliantAttribute] // RVA: 0x992EC Offset: 0x992EC VA: 0x992EC
[ComVisibleAttribute] // RVA: 0x992EC Offset: 0x992EC VA: 0x992EC
[Serializable]
public class MethodResponse : ISerializable, IInternalMessage, IMessage, IMethodMessage, IMethodReturnMessage, ISerializationRootObject // TypeDefIndex: 557
{
	// Fields
	private string _methodName; // 0x8
	private string _uri; // 0xC
	private string _typeName; // 0x10
	private MethodBase _methodBase; // 0x14
	private object _returnValue; // 0x18
	private Exception _exception; // 0x1C
	private Type[] _methodSignature; // 0x20
	private ArgInfo _inArgInfo; // 0x24
	private object[] _args; // 0x28
	private object[] _outArgs; // 0x2C
	private IMethodCallMessage _callMsg; // 0x30
	private LogicalCallContext _callContext; // 0x34
	private Identity _targetIdentity; // 0x38
	protected IDictionary ExternalProperties; // 0x3C
	protected IDictionary InternalProperties; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0x9B34C Offset: 0x9B34C VA: 0x9B34C
	private static Dictionary<string, int> <>f__switch$map25; // 0x0

	// Properties
	private string System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; }
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }
	public int ArgCount { get; }
	public object[] Args { get; }
	public Exception Exception { get; }
	public LogicalCallContext LogicalCallContext { get; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public int OutArgCount { get; }
	public object[] OutArgs { get; }
	public virtual IDictionary Properties { get; }
	public object ReturnValue { get; }
	public string TypeName { get; }
	public string Uri { get; set; }

	// Methods

	// RVA: 0x18F3C0 Offset: 0x18F3C0 VA: 0x18F3C0
	internal void .ctor(Exception e, IMethodCallMessage msg) { }

	// RVA: 0x18F2B0 Offset: 0x18F2B0 VA: 0x18F2B0
	internal void .ctor(object returnValue, object[] outArgs, LogicalCallContext callCtx, IMethodCallMessage msg) { }

	// RVA: 0x194790 Offset: 0x194790 VA: 0x194790
	internal void .ctor(IMethodCallMessage msg, CADMethodReturnMessage retmsg) { }

	// RVA: 0x18F530 Offset: 0x18F530 VA: 0x18F530
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x19534C Offset: 0x19534C VA: 0x19534C Slot: 7
	private string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri() { }

	// RVA: 0x195438 Offset: 0x195438 VA: 0x195438 Slot: 8
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value) { }

	// RVA: 0x195448 Offset: 0x195448 VA: 0x195448 Slot: 5
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }

	// RVA: 0x195450 Offset: 0x195450 VA: 0x195450 Slot: 6
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(Identity value) { }

	// RVA: 0x194B10 Offset: 0x194B10 VA: 0x194B10
	internal void InitMethodProperty(string key, object value) { }

	// RVA: 0x195458 Offset: 0x195458 VA: 0x195458 Slot: 10
	public int get_ArgCount() { }

	// RVA: 0x19546C Offset: 0x19546C VA: 0x19546C Slot: 11
	public object[] get_Args() { }

	// RVA: 0x195474 Offset: 0x195474 VA: 0x195474 Slot: 19
	public Exception get_Exception() { }

	// RVA: 0x19547C Offset: 0x19547C VA: 0x19547C Slot: 12
	public LogicalCallContext get_LogicalCallContext() { }

	// RVA: 0x1954F8 Offset: 0x1954F8 VA: 0x1954F8 Slot: 13
	public MethodBase get_MethodBase() { }

	// RVA: 0x195634 Offset: 0x195634 VA: 0x195634 Slot: 14
	public string get_MethodName() { }

	// RVA: 0x195804 Offset: 0x195804 VA: 0x195804 Slot: 15
	public object get_MethodSignature() { }

	// RVA: 0x19598C Offset: 0x19598C VA: 0x19598C Slot: 20
	public int get_OutArgCount() { }

	// RVA: 0x195A58 Offset: 0x195A58 VA: 0x195A58 Slot: 21
	public object[] get_OutArgs() { }

	// RVA: 0x18F618 Offset: 0x18F618 VA: 0x18F618 Slot: 23
	public virtual IDictionary get_Properties() { }

	// RVA: 0x195CB0 Offset: 0x195CB0 VA: 0x195CB0 Slot: 22
	public object get_ReturnValue() { }

	// RVA: 0x19571C Offset: 0x19571C VA: 0x19571C Slot: 16
	public string get_TypeName() { }

	// RVA: 0x195350 Offset: 0x195350 VA: 0x195350 Slot: 17
	public string get_Uri() { }

	// RVA: 0x195440 Offset: 0x195440 VA: 0x195440 Slot: 24
	public void set_Uri(string value) { }

	// RVA: 0x195CB8 Offset: 0x195CB8 VA: 0x195CB8 Slot: 18
	public object GetArg(int argNum) { }

	// RVA: 0x195D00 Offset: 0x195D00 VA: 0x195D00 Slot: 25
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class MethodReturnDictionary : MethodDictionary // TypeDefIndex: 558
{
	// Fields
	public static string[] InternalReturnKeys; // 0x0
	public static string[] InternalExceptionKeys; // 0x4

	// Methods

	// RVA: 0x195B3C Offset: 0x195B3C VA: 0x195B3C
	public void .ctor(IMethodReturnMessage message) { }

	// RVA: 0x19629C Offset: 0x19629C VA: 0x19629C
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class MonoMethodMessage : IInternalMessage, IMessage, IMethodCallMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 559
{
	// Fields
	private MonoMethod method; // 0x8
	private object[] args; // 0xC
	private byte[] arg_types; // 0x10
	public LogicalCallContext ctx; // 0x14
	public object rval; // 0x18
	public Exception exc; // 0x1C
	private AsyncResult asyncResult; // 0x20
	private CallType call_type; // 0x24
	private string uri; // 0x28
	private MethodCallDictionary properties; // 0x2C
	private Type[] methodSignature; // 0x30
	private Identity identity; // 0x34

	// Properties
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }
	public IDictionary Properties { get; }
	public int ArgCount { get; }
	public object[] Args { get; }
	public LogicalCallContext LogicalCallContext { get; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public string TypeName { get; }
	public string Uri { get; set; }
	public Exception Exception { get; }
	public int OutArgCount { get; }
	public object[] OutArgs { get; }
	public object ReturnValue { get; }
	public AsyncResult AsyncResult { get; }
	internal CallType CallType { get; }

	// Methods

	// RVA: 0x1966CC Offset: 0x1966CC VA: 0x1966CC Slot: 4
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }

	// RVA: 0x1966D4 Offset: 0x1966D4 VA: 0x1966D4 Slot: 5
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(Identity value) { }

	// RVA: 0x1966DC Offset: 0x1966DC VA: 0x1966DC Slot: 8
	public IDictionary get_Properties() { }

	// RVA: 0x19675C Offset: 0x19675C VA: 0x19675C Slot: 9
	public int get_ArgCount() { }

	// RVA: 0x19683C Offset: 0x19683C VA: 0x19683C Slot: 10
	public object[] get_Args() { }

	// RVA: 0x196844 Offset: 0x196844 VA: 0x196844 Slot: 11
	public LogicalCallContext get_LogicalCallContext() { }

	// RVA: 0x19684C Offset: 0x19684C VA: 0x19684C Slot: 12
	public MethodBase get_MethodBase() { }

	// RVA: 0x196854 Offset: 0x196854 VA: 0x196854 Slot: 13
	public string get_MethodName() { }

	// RVA: 0x196904 Offset: 0x196904 VA: 0x196904 Slot: 14
	public object get_MethodSignature() { }

	// RVA: 0x196A90 Offset: 0x196A90 VA: 0x196A90 Slot: 15
	public string get_TypeName() { }

	// RVA: 0x196B68 Offset: 0x196B68 VA: 0x196B68 Slot: 16
	public string get_Uri() { }

	// RVA: 0x196B70 Offset: 0x196B70 VA: 0x196B70 Slot: 7
	public void set_Uri(string value) { }

	// RVA: 0x196B78 Offset: 0x196B78 VA: 0x196B78 Slot: 17
	public object GetArg(int arg_num) { }

	// RVA: 0x196BC0 Offset: 0x196BC0 VA: 0x196BC0 Slot: 18
	public Exception get_Exception() { }

	// RVA: 0x196BC8 Offset: 0x196BC8 VA: 0x196BC8 Slot: 19
	public int get_OutArgCount() { }

	// RVA: 0x196C44 Offset: 0x196C44 VA: 0x196C44 Slot: 20
	public object[] get_OutArgs() { }

	// RVA: 0x196DD0 Offset: 0x196DD0 VA: 0x196DD0 Slot: 21
	public object get_ReturnValue() { }

	// RVA: 0x196DD8 Offset: 0x196DD8 VA: 0x196DD8
	public AsyncResult get_AsyncResult() { }

	// RVA: 0x196798 Offset: 0x196798 VA: 0x196798
	internal CallType get_CallType() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal enum CallType // TypeDefIndex: 560
{
	// Fields
	public int value__; // 0x0
	public const CallType Sync = 0;
	public const CallType BeginInvoke = 1;
	public const CallType EndInvoke = 2;
	public const CallType OneWay = 3;
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x99324 Offset: 0x99324 VA: 0x99324
[AttributeUsageAttribute] // RVA: 0x99324 Offset: 0x99324 VA: 0x99324
public class OneWayAttribute : Attribute // TypeDefIndex: 561
{}

// Namespace: System.Runtime.Remoting.Messaging
internal class RemotingSurrogate : ISerializationSurrogate // TypeDefIndex: 562
{
	// Methods

	// RVA: 0x197144 Offset: 0x197144 VA: 0x197144
	public void .ctor() { }

	// RVA: 0x19714C Offset: 0x19714C VA: 0x19714C Slot: 6
	public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc) { }

	// RVA: 0x197690 Offset: 0x197690 VA: 0x197690 Slot: 7
	public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ObjRefSurrogate : ISerializationSurrogate // TypeDefIndex: 563
{
	// Methods

	// RVA: 0x196EA4 Offset: 0x196EA4 VA: 0x196EA4
	public void .ctor() { }

	// RVA: 0x196EAC Offset: 0x196EAC VA: 0x196EAC Slot: 6
	public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc) { }

	// RVA: 0x1970A8 Offset: 0x1970A8 VA: 0x1970A8 Slot: 7
	public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x9935C Offset: 0x9935C VA: 0x9935C
public class RemotingSurrogateSelector : ISurrogateSelector // TypeDefIndex: 564
{
	// Fields
	private static Type s_cachedTypeObjRef; // 0x0
	private static ObjRefSurrogate _objRefSurrogate; // 0x4
	private static RemotingSurrogate _objRemotingSurrogate; // 0x8
	private ISurrogateSelector _next; // 0x8

	// Methods

	// RVA: 0x197718 Offset: 0x197718 VA: 0x197718
	public void .ctor() { }

	// RVA: 0x197720 Offset: 0x197720 VA: 0x197720
	private static void .cctor() { }

	// RVA: 0x197820 Offset: 0x197820 VA: 0x197820 Slot: 5
	public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector ssout) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x99370 Offset: 0x99370 VA: 0x99370
public class ReturnMessage : IInternalMessage, IMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 565
{
	// Fields
	private object[] _outArgs; // 0x8
	private object[] _args; // 0xC
	private int _outArgsCount; // 0x10
	private LogicalCallContext _callCtx; // 0x14
	private object _returnValue; // 0x18
	private string _uri; // 0x1C
	private Exception _exception; // 0x20
	private MethodBase _methodBase; // 0x24
	private string _methodName; // 0x28
	private Type[] _methodSignature; // 0x2C
	private string _typeName; // 0x30
	private MethodReturnDictionary _properties; // 0x34
	private Identity _targetIdentity; // 0x38
	private ArgInfo _inArgInfo; // 0x3C

	// Properties
	private string System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; }
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }
	public int ArgCount { get; }
	public object[] Args { get; }
	public LogicalCallContext LogicalCallContext { get; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public virtual IDictionary Properties { get; }
	public string TypeName { get; }
	public string Uri { get; set; }
	public Exception Exception { get; }
	public int OutArgCount { get; }
	public object[] OutArgs { get; }
	public virtual object ReturnValue { get; }

	// Methods

	// RVA: 0x197A58 Offset: 0x197A58 VA: 0x197A58
	public void .ctor(object ret, object[] outArgs, int outArgsCount, LogicalCallContext callCtx, IMethodCallMessage mcm) { }

	// RVA: 0x197BFC Offset: 0x197BFC VA: 0x197BFC
	public void .ctor(Exception e, IMethodCallMessage mcm) { }

	// RVA: 0x197D7C Offset: 0x197D7C VA: 0x197D7C Slot: 6
	private string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri() { }

	// RVA: 0x197D8C Offset: 0x197D8C VA: 0x197D8C Slot: 7
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value) { }

	// RVA: 0x197D9C Offset: 0x197D9C VA: 0x197D9C Slot: 4
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }

	// RVA: 0x197DA4 Offset: 0x197DA4 VA: 0x197DA4 Slot: 5
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(Identity value) { }

	// RVA: 0x197DAC Offset: 0x197DAC VA: 0x197DAC Slot: 9
	public int get_ArgCount() { }

	// RVA: 0x197DD0 Offset: 0x197DD0 VA: 0x197DD0 Slot: 10
	public object[] get_Args() { }

	// RVA: 0x197DD8 Offset: 0x197DD8 VA: 0x197DD8 Slot: 11
	public LogicalCallContext get_LogicalCallContext() { }

	// RVA: 0x197E54 Offset: 0x197E54 VA: 0x197E54 Slot: 12
	public MethodBase get_MethodBase() { }

	// RVA: 0x197E5C Offset: 0x197E5C VA: 0x197E5C Slot: 13
	public string get_MethodName() { }

	// RVA: 0x197E9C Offset: 0x197E9C VA: 0x197E9C Slot: 14
	public object get_MethodSignature() { }

	// RVA: 0x19801C Offset: 0x19801C VA: 0x19801C Slot: 22
	public virtual IDictionary get_Properties() { }

	// RVA: 0x19809C Offset: 0x19809C VA: 0x19809C Slot: 15
	public string get_TypeName() { }

	// RVA: 0x197D84 Offset: 0x197D84 VA: 0x197D84 Slot: 16
	public string get_Uri() { }

	// RVA: 0x197D94 Offset: 0x197D94 VA: 0x197D94 Slot: 23
	public void set_Uri(string value) { }

	// RVA: 0x198104 Offset: 0x198104 VA: 0x198104 Slot: 17
	public object GetArg(int argNum) { }

	// RVA: 0x19814C Offset: 0x19814C VA: 0x19814C Slot: 18
	public Exception get_Exception() { }

	// RVA: 0x198154 Offset: 0x198154 VA: 0x198154 Slot: 19
	public int get_OutArgCount() { }

	// RVA: 0x198218 Offset: 0x198218 VA: 0x198218 Slot: 20
	public object[] get_OutArgs() { }

	// RVA: 0x1982F4 Offset: 0x1982F4 VA: 0x1982F4 Slot: 24
	public virtual object get_ReturnValue() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerContextTerminatorSink : IMessageSink // TypeDefIndex: 566
{
	// Methods

	// RVA: 0x1982FC Offset: 0x1982FC VA: 0x1982FC
	public void .ctor() { }

	// RVA: 0x198304 Offset: 0x198304 VA: 0x198304 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x1984F0 Offset: 0x1984F0 VA: 0x1984F0 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerObjectTerminatorSink : IMessageSink // TypeDefIndex: 567
{
	// Fields
	private IMessageSink _nextSink; // 0x8

	// Methods

	// RVA: 0x1987FC Offset: 0x1987FC VA: 0x1987FC
	public void .ctor(IMessageSink nextSink) { }

	// RVA: 0x19881C Offset: 0x19881C VA: 0x19881C Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x198A38 Offset: 0x198A38 VA: 0x198A38 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerObjectReplySink : IMessageSink // TypeDefIndex: 568
{
	// Fields
	private IMessageSink _replySink; // 0x8
	private ServerIdentity _identity; // 0xC

	// Methods

	// RVA: 0x19862C Offset: 0x19862C VA: 0x19862C
	public void .ctor(ServerIdentity identity, IMessageSink replySink) { }

	// RVA: 0x198654 Offset: 0x198654 VA: 0x198654 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x198774 Offset: 0x198774 VA: 0x198774 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class StackBuilderSink : IMessageSink // TypeDefIndex: 569
{
	// Fields
	private MarshalByRefObject _target; // 0x8
	private RealProxy _rp; // 0xC

	// Methods

	// RVA: 0x198CCC Offset: 0x198CCC VA: 0x198CCC
	public void .ctor(MarshalByRefObject obj, bool forceInternalExecute) { }

	// RVA: 0x198DAC Offset: 0x198DAC VA: 0x198DAC Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x19A448 Offset: 0x19A448 VA: 0x19A448 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x19A5B4 Offset: 0x19A5B4 VA: 0x19A5B4
	private void ExecuteAsyncMessage(object ob) { }

	// RVA: 0x198F00 Offset: 0x198F00 VA: 0x198F00
	private void CheckParameters(IMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Metadata
[ComVisibleAttribute] // RVA: 0x99384 Offset: 0x99384 VA: 0x99384
public class SoapAttribute : Attribute // TypeDefIndex: 570
{
	// Fields
	private bool _useAttribute; // 0x8
	protected string ProtXmlNamespace; // 0xC
	protected object ReflectInfo; // 0x10

	// Properties
	public virtual bool UseAttribute { get; }
	public virtual string XmlNamespace { get; }

	// Methods

	// RVA: 0x19A8E4 Offset: 0x19A8E4 VA: 0x19A8E4
	public void .ctor() { }

	// RVA: 0x19A8EC Offset: 0x19A8EC VA: 0x19A8EC Slot: 4
	public virtual bool get_UseAttribute() { }

	// RVA: 0x19A8F4 Offset: 0x19A8F4 VA: 0x19A8F4 Slot: 5
	public virtual string get_XmlNamespace() { }

	// RVA: 0x19A8FC Offset: 0x19A8FC VA: 0x19A8FC Slot: 6
	internal virtual void SetReflectionObject(object reflectionObject) { }
}

// Namespace: System.Runtime.Remoting.Metadata
[AttributeUsageAttribute] // RVA: 0x99398 Offset: 0x99398 VA: 0x99398
[ComVisibleAttribute] // RVA: 0x99398 Offset: 0x99398 VA: 0x99398
public sealed class SoapFieldAttribute : SoapAttribute // TypeDefIndex: 571
{
	// Fields
	private string _elementName; // 0x14
	private bool _isElement; // 0x18

	// Properties
	public string XmlElementName { get; }

	// Methods

	// RVA: 0x19A904 Offset: 0x19A904 VA: 0x19A904
	public void .ctor() { }

	// RVA: 0x19A90C Offset: 0x19A90C VA: 0x19A90C
	public string get_XmlElementName() { }

	// RVA: 0x19A914 Offset: 0x19A914 VA: 0x19A914
	public bool IsInteropXmlElement() { }

	// RVA: 0x19A91C Offset: 0x19A91C VA: 0x19A91C Slot: 6
	internal override void SetReflectionObject(object reflectionObject) { }
}

// Namespace: System.Runtime.Remoting.Metadata
[ComVisibleAttribute] // RVA: 0x993D0 Offset: 0x993D0 VA: 0x993D0
[AttributeUsageAttribute] // RVA: 0x993D0 Offset: 0x993D0 VA: 0x993D0
public sealed class SoapMethodAttribute : SoapAttribute // TypeDefIndex: 572
{
	// Fields
	private string _responseElement; // 0x14
	private string _responseNamespace; // 0x18
	private string _returnElement; // 0x1C
	private string _soapAction; // 0x20
	private bool _useAttribute; // 0x24
	private string _namespace; // 0x28

	// Properties
	public override bool UseAttribute { get; }
	public override string XmlNamespace { get; }

	// Methods

	// RVA: 0x19AA40 Offset: 0x19AA40 VA: 0x19AA40
	public void .ctor() { }

	// RVA: 0x19AA48 Offset: 0x19AA48 VA: 0x19AA48 Slot: 4
	public override bool get_UseAttribute() { }

	// RVA: 0x19AA50 Offset: 0x19AA50 VA: 0x19AA50 Slot: 5
	public override string get_XmlNamespace() { }

	// RVA: 0x19AA58 Offset: 0x19AA58 VA: 0x19AA58 Slot: 6
	internal override void SetReflectionObject(object reflectionObject) { }
}

// Namespace: System.Runtime.Remoting.Metadata
[AttributeUsageAttribute] // RVA: 0x99408 Offset: 0x99408 VA: 0x99408
[ComVisibleAttribute] // RVA: 0x99408 Offset: 0x99408 VA: 0x99408
public sealed class SoapParameterAttribute : SoapAttribute // TypeDefIndex: 573
{
	// Methods

	// RVA: 0x19AEE4 Offset: 0x19AEE4 VA: 0x19AEE4
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Metadata
[AttributeUsageAttribute] // RVA: 0x99440 Offset: 0x99440 VA: 0x99440
[ComVisibleAttribute] // RVA: 0x99440 Offset: 0x99440 VA: 0x99440
public sealed class SoapTypeAttribute : SoapAttribute // TypeDefIndex: 574
{
	// Fields
	private bool _useAttribute; // 0x14
	private string _xmlElementName; // 0x18
	private string _xmlNamespace; // 0x1C
	private string _xmlTypeName; // 0x20
	private string _xmlTypeNamespace; // 0x24
	private bool _isType; // 0x28
	private bool _isElement; // 0x29

	// Properties
	public override bool UseAttribute { get; }
	public string XmlElementName { get; }
	public override string XmlNamespace { get; }
	public string XmlTypeName { get; }
	public string XmlTypeNamespace { get; }
	internal bool IsInteropXmlElement { get; }
	internal bool IsInteropXmlType { get; }

	// Methods

	// RVA: 0x19AEEC Offset: 0x19AEEC VA: 0x19AEEC
	public void .ctor() { }

	// RVA: 0x19AEF4 Offset: 0x19AEF4 VA: 0x19AEF4 Slot: 4
	public override bool get_UseAttribute() { }

	// RVA: 0x19AEFC Offset: 0x19AEFC VA: 0x19AEFC
	public string get_XmlElementName() { }

	// RVA: 0x19AF04 Offset: 0x19AF04 VA: 0x19AF04 Slot: 5
	public override string get_XmlNamespace() { }

	// RVA: 0x19AF0C Offset: 0x19AF0C VA: 0x19AF0C
	public string get_XmlTypeName() { }

	// RVA: 0x19AF14 Offset: 0x19AF14 VA: 0x19AF14
	public string get_XmlTypeNamespace() { }

	// RVA: 0x19AF1C Offset: 0x19AF1C VA: 0x19AF1C
	internal bool get_IsInteropXmlElement() { }

	// RVA: 0x19AF24 Offset: 0x19AF24 VA: 0x19AF24
	internal bool get_IsInteropXmlType() { }

	// RVA: 0x19AF2C Offset: 0x19AF2C VA: 0x19AF2C Slot: 6
	internal override void SetReflectionObject(object reflectionObject) { }
}

// Namespace: System.Runtime.Remoting.Proxies
[ComVisibleAttribute] // RVA: 0x99478 Offset: 0x99478 VA: 0x99478
[AttributeUsageAttribute] // RVA: 0x99478 Offset: 0x99478 VA: 0x99478
public class ProxyAttribute : Attribute, IContextAttribute // TypeDefIndex: 575
{
	// Methods

	// RVA: 0x19D768 Offset: 0x19D768 VA: 0x19D768 Slot: 6
	public virtual MarshalByRefObject CreateInstance(Type serverType) { }

	// RVA: 0x19D93C Offset: 0x19D93C VA: 0x19D93C Slot: 7
	public virtual RealProxy CreateProxy(ObjRef objRef, Type serverType, object serverObject, Context serverContext) { }

	[ComVisibleAttribute] // RVA: 0x9CBF0 Offset: 0x9CBF0 VA: 0x9CBF0
	// RVA: 0x19DAF8 Offset: 0x19DAF8 VA: 0x19DAF8 Slot: 4
	public void GetPropertiesForNewContext(IConstructionCallMessage msg) { }

	[ComVisibleAttribute] // RVA: 0x9CC04 Offset: 0x9CC04 VA: 0x9CC04
	// RVA: 0x19DAFC Offset: 0x19DAFC VA: 0x19DAFC Slot: 5
	public bool IsContextOK(Context ctx, IConstructionCallMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Proxies
internal class TransparentProxy // TypeDefIndex: 576
{
	// Fields
	public RealProxy _rp; // 0x8
}

// Namespace: System.Runtime.Remoting.Proxies
[ComVisibleAttribute] // RVA: 0x994B0 Offset: 0x994B0 VA: 0x994B0
public abstract class RealProxy // TypeDefIndex: 577
{
	// Fields
	private Type class_to_proxy; // 0x8
	internal Context _targetContext; // 0xC
	private MarshalByRefObject _server; // 0x10
	private int _targetDomainId; // 0x14
	internal string _targetUri; // 0x18
	internal Identity _objectIdentity; // 0x1C
	private object _objTP; // 0x20
	private object _stubData; // 0x24

	// Properties
	internal Identity ObjectIdentity { get; set; }

	// Methods

	// RVA: 0x19DB04 Offset: 0x19DB04 VA: 0x19DB04
	protected void .ctor(Type classToProxy) { }

	// RVA: 0x19DCD0 Offset: 0x19DCD0 VA: 0x19DCD0
	internal void .ctor(Type classToProxy, ClientIdentity identity) { }

	// RVA: 0x19DB6C Offset: 0x19DB6C VA: 0x19DB6C
	protected void .ctor(Type classToProxy, IntPtr stub, object stubData) { }

	// RVA: 0x19DD40 Offset: 0x19DD40 VA: 0x19DD40
	private static Type InternalGetProxyType(object transparentProxy) { }

	// RVA: 0x19DD44 Offset: 0x19DD44 VA: 0x19DD44
	public Type GetProxiedType() { }

	// RVA: 0x19DE18 Offset: 0x19DE18 VA: 0x19DE18 Slot: 4
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x19DED0 Offset: 0x19DED0 VA: 0x19DED0
	internal Identity get_ObjectIdentity() { }

	// RVA: 0x19DED8 Offset: 0x19DED8 VA: 0x19DED8
	internal void set_ObjectIdentity(Identity value) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract IMessage Invoke(IMessage msg);

	// RVA: 0x19DEE0 Offset: 0x19DEE0 VA: 0x19DEE0 Slot: 6
	internal virtual object InternalGetTransparentProxy(string className) { }

	// RVA: 0x19DEE4 Offset: 0x19DEE4 VA: 0x19DEE4 Slot: 7
	public virtual object GetTransparentProxy() { }

	// RVA: 0x19E0E8 Offset: 0x19E0E8 VA: 0x19E0E8
	protected void AttachServer(MarshalByRefObject s) { }

	// RVA: 0x19E0F0 Offset: 0x19E0F0 VA: 0x19E0F0
	internal void SetTargetDomain(int domainId) { }
}

// Namespace: System.Runtime.Remoting.Proxies
internal class RemotingProxy : RealProxy, IRemotingTypeInfo // TypeDefIndex: 578
{
	// Fields
	private static MethodInfo _cache_GetTypeMethod; // 0x0
	private static MethodInfo _cache_GetHashCodeMethod; // 0x4
	private IMessageSink _sink; // 0x28
	private bool _hasEnvoySink; // 0x2C
	private ConstructionCall _ctorCall; // 0x30

	// Properties
	public string TypeName { get; }

	// Methods

	// RVA: 0x19E0F8 Offset: 0x19E0F8 VA: 0x19E0F8
	internal void .ctor(Type type, ClientIdentity identity) { }

	// RVA: 0x19D8FC Offset: 0x19D8FC VA: 0x19D8FC
	internal void .ctor(Type type, string activationUrl, object[] activationAttributes) { }

	// RVA: 0x19E168 Offset: 0x19E168 VA: 0x19E168
	private static void .cctor() { }

	// RVA: 0x19E2A0 Offset: 0x19E2A0 VA: 0x19E2A0 Slot: 5
	public override IMessage Invoke(IMessage request) { }

	// RVA: 0x19EA18 Offset: 0x19EA18 VA: 0x19EA18
	internal void AttachIdentity(Identity identity) { }

	// RVA: 0x19EF20 Offset: 0x19EF20 VA: 0x19EF20 Slot: 8
	public string get_TypeName() { }

	// RVA: 0x19F0C4 Offset: 0x19F0C4 VA: 0x19F0C4 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System.Runtime.Remoting.Services
[ComVisibleAttribute] // RVA: 0x994C4 Offset: 0x994C4 VA: 0x994C4
public interface ITrackingHandler // TypeDefIndex: 579
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void DisconnectedObject(object obj);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void MarshaledObject(object obj, ObjRef or);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void UnmarshaledObject(object obj, ObjRef or);
}

// Namespace: System.Runtime.Remoting.Services
[ComVisibleAttribute] // RVA: 0x994D8 Offset: 0x994D8 VA: 0x994D8
public class TrackingServices // TypeDefIndex: 580
{
	// Fields
	private static ArrayList _handlers; // 0x0

	// Methods

	// RVA: 0x1A70E4 Offset: 0x1A70E4 VA: 0x1A70E4
	private static void .cctor() { }

	// RVA: 0x1A4B90 Offset: 0x1A4B90 VA: 0x1A4B90
	internal static void NotifyMarshaledObject(object obj, ObjRef or) { }

	// RVA: 0x1A3870 Offset: 0x1A3870 VA: 0x1A3870
	internal static void NotifyUnmarshaledObject(object obj, ObjRef or) { }

	// RVA: 0x1A6D14 Offset: 0x1A6D14 VA: 0x1A6D14
	internal static void NotifyDisconnectedObject(object obj) { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x994EC Offset: 0x994EC VA: 0x994EC
public class ActivatedClientTypeEntry : TypeEntry // TypeDefIndex: 581
{
	// Fields
	private string applicationUrl; // 0x10
	private Type obj_type; // 0x14

	// Properties
	public string ApplicationUrl { get; }
	public IContextAttribute[] ContextAttributes { get; }
	public Type ObjectType { get; }

	// Methods

	// RVA: 0x1DC578 Offset: 0x1DC578 VA: 0x1DC578
	public void .ctor(string typeName, string assemblyName, string appUrl) { }

	// RVA: 0x1DC6F4 Offset: 0x1DC6F4 VA: 0x1DC6F4
	public string get_ApplicationUrl() { }

	// RVA: 0x1DC6FC Offset: 0x1DC6FC VA: 0x1DC6FC
	public IContextAttribute[] get_ContextAttributes() { }

	// RVA: 0x1DC704 Offset: 0x1DC704 VA: 0x1DC704
	public Type get_ObjectType() { }

	// RVA: 0x1DC70C Offset: 0x1DC70C VA: 0x1DC70C Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x99500 Offset: 0x99500 VA: 0x99500
public class ActivatedServiceTypeEntry : TypeEntry // TypeDefIndex: 582
{
	// Fields
	private Type obj_type; // 0x10

	// Properties
	public Type ObjectType { get; }

	// Methods

	// RVA: 0x1DC7BC Offset: 0x1DC7BC VA: 0x1DC7BC
	public void .ctor(string typeName, string assemblyName) { }

	// RVA: 0x1DC930 Offset: 0x1DC930 VA: 0x1DC930
	public Type get_ObjectType() { }

	// RVA: 0x1DC938 Offset: 0x1DC938 VA: 0x1DC938 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.Remoting
[Serializable]
internal class EnvoyInfo : IEnvoyInfo // TypeDefIndex: 583
{
	// Fields
	private IMessageSink envoySinks; // 0x8

	// Properties
	public IMessageSink EnvoySinks { get; }

	// Methods

	// RVA: 0x1F40E8 Offset: 0x1F40E8 VA: 0x1F40E8
	public void .ctor(IMessageSink sinks) { }

	// RVA: 0x1F4108 Offset: 0x1F4108 VA: 0x1F4108 Slot: 4
	public IMessageSink get_EnvoySinks() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x99514 Offset: 0x99514 VA: 0x99514
public interface IChannelInfo // TypeDefIndex: 584
{
	// Properties
	public abstract object[] ChannelData { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object[] get_ChannelData();
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x99528 Offset: 0x99528 VA: 0x99528
public interface IEnvoyInfo // TypeDefIndex: 585
{
	// Properties
	public abstract IMessageSink EnvoySinks { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink get_EnvoySinks();
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x9953C Offset: 0x9953C VA: 0x9953C
public interface IRemotingTypeInfo // TypeDefIndex: 586
{
	// Properties
	public abstract string TypeName { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_TypeName();
}

// Namespace: System.Runtime.Remoting
internal abstract class Identity // TypeDefIndex: 587
{
	// Fields
	protected string _objectUri; // 0x8
	protected IMessageSink _channelSink; // 0xC
	protected IMessageSink _envoySink; // 0x10
	private DynamicPropertyCollection _clientDynamicProperties; // 0x14
	private DynamicPropertyCollection _serverDynamicProperties; // 0x18
	protected ObjRef _objRef; // 0x1C
	private bool _disposed; // 0x20

	// Properties
	public IMessageSink ChannelSink { get; set; }
	public IMessageSink EnvoySink { get; }
	public string ObjectUri { get; set; }
	public bool IsConnected { get; }
	public bool Disposed { get; set; }
	public DynamicPropertyCollection ClientDynamicProperties { get; }
	public DynamicPropertyCollection ServerDynamicProperties { get; }
	public bool HasServerDynamicSinks { get; }

	// Methods

	// RVA: 0x1E84FC Offset: 0x1E84FC VA: 0x1E84FC
	public void .ctor(string objectUri) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract ObjRef CreateObjRef(Type requestedType);

	// RVA: 0x1F4110 Offset: 0x1F4110 VA: 0x1F4110
	public IMessageSink get_ChannelSink() { }

	// RVA: 0x1F4118 Offset: 0x1F4118 VA: 0x1F4118
	public void set_ChannelSink(IMessageSink value) { }

	// RVA: 0x1F4120 Offset: 0x1F4120 VA: 0x1F4120
	public IMessageSink get_EnvoySink() { }

	// RVA: 0x1F4128 Offset: 0x1F4128 VA: 0x1F4128
	public string get_ObjectUri() { }

	// RVA: 0x1F4130 Offset: 0x1F4130 VA: 0x1F4130
	public void set_ObjectUri(string value) { }

	// RVA: 0x1F4138 Offset: 0x1F4138 VA: 0x1F4138
	public bool get_IsConnected() { }

	// RVA: 0x1F4148 Offset: 0x1F4148 VA: 0x1F4148
	public bool get_Disposed() { }

	// RVA: 0x1F4150 Offset: 0x1F4150 VA: 0x1F4150
	public void set_Disposed(bool value) { }

	// RVA: 0x1EE908 Offset: 0x1EE908 VA: 0x1EE908
	public DynamicPropertyCollection get_ClientDynamicProperties() { }

	// RVA: 0x1EE984 Offset: 0x1EE984 VA: 0x1EE984
	public DynamicPropertyCollection get_ServerDynamicProperties() { }

	// RVA: 0x1F4158 Offset: 0x1F4158 VA: 0x1F4158
	public bool get_HasServerDynamicSinks() { }

	// RVA: 0x1F41AC Offset: 0x1F41AC VA: 0x1F41AC
	public void NotifyClientDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async) { }

	// RVA: 0x1F423C Offset: 0x1F423C VA: 0x1F423C
	public void NotifyServerDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async) { }
}

// Namespace: System.Runtime.Remoting
internal class ClientIdentity : Identity // TypeDefIndex: 588
{
	// Fields
	private WeakReference _proxyReference; // 0x24

	// Properties
	public MarshalByRefObject ClientProxy { get; set; }
	public string TargetUri { get; }

	// Methods

	// RVA: 0x1E8398 Offset: 0x1E8398 VA: 0x1E8398
	public void .ctor(string objectUri, ObjRef objRef) { }

	// RVA: 0x1E851C Offset: 0x1E851C VA: 0x1E851C
	public MarshalByRefObject get_ClientProxy() { }

	// RVA: 0x1E8638 Offset: 0x1E8638 VA: 0x1E8638
	public void set_ClientProxy(MarshalByRefObject value) { }

	// RVA: 0x1E86B0 Offset: 0x1E86B0 VA: 0x1E86B0 Slot: 4
	public override ObjRef CreateObjRef(Type requestedType) { }

	// RVA: 0x1E86B8 Offset: 0x1E86B8 VA: 0x1E86B8
	public string get_TargetUri() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x99550 Offset: 0x99550 VA: 0x99550
public class InternalRemotingServices // TypeDefIndex: 589
{
	// Fields
	private static Hashtable _soapAttributes; // 0x0

	// Methods

	// RVA: 0x1F42CC Offset: 0x1F42CC VA: 0x1F42CC
	private static void .cctor() { }

	// RVA: 0x1F434C Offset: 0x1F434C VA: 0x1F434C
	public static SoapAttribute GetCachedSoapAttribute(object reflectionObject) { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x99564 Offset: 0x99564 VA: 0x99564
[Serializable]
public class ObjRef : ISerializable, IObjectReference // TypeDefIndex: 590
{
	// Fields
	private IChannelInfo channel_info; // 0x8
	private string uri; // 0xC
	private IRemotingTypeInfo typeInfo; // 0x10
	private IEnvoyInfo envoyInfo; // 0x14
	private int flags; // 0x18
	private Type _serverType; // 0x1C
	private static int MarshalledObjectRef; // 0x0
	private static int WellKnowObjectRef; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0x9B35C Offset: 0x9B35C VA: 0x9B35C
	private static Dictionary<string, int> <>f__switch$map26; // 0x8

	// Properties
	internal bool IsReferenceToWellKnow { get; }
	public virtual IChannelInfo ChannelInfo { get; }
	public virtual IEnvoyInfo EnvoyInfo { get; set; }
	public virtual IRemotingTypeInfo TypeInfo { get; set; }
	public virtual string URI { get; set; }
	internal Type ServerType { get; }

	// Methods

	// RVA: 0x19B578 Offset: 0x19B578 VA: 0x19B578
	public void .ctor() { }

	// RVA: 0x19B608 Offset: 0x19B608 VA: 0x19B608
	internal void .ctor(string typeName, string uri, IChannelInfo cinfo) { }

	// RVA: 0x19BC20 Offset: 0x19BC20 VA: 0x19BC20
	internal void .ctor(Type type, string url, object remoteChannelData) { }

	// RVA: 0x19BD2C Offset: 0x19BD2C VA: 0x19BD2C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x19C7CC Offset: 0x19C7CC VA: 0x19C7CC
	private static void .cctor() { }

	// RVA: 0x19C844 Offset: 0x19C844 VA: 0x19C844
	internal bool get_IsReferenceToWellKnow() { }

	[ReliabilityContractAttribute] // RVA: 0x9CC18 Offset: 0x9CC18 VA: 0x9CC18
	// RVA: 0x19C8E8 Offset: 0x19C8E8 VA: 0x19C8E8 Slot: 6
	public virtual IChannelInfo get_ChannelInfo() { }

	// RVA: 0x19C8F0 Offset: 0x19C8F0 VA: 0x19C8F0 Slot: 7
	public virtual IEnvoyInfo get_EnvoyInfo() { }

	// RVA: 0x19C8F8 Offset: 0x19C8F8 VA: 0x19C8F8 Slot: 8
	public virtual void set_EnvoyInfo(IEnvoyInfo value) { }

	// RVA: 0x19C900 Offset: 0x19C900 VA: 0x19C900 Slot: 9
	public virtual IRemotingTypeInfo get_TypeInfo() { }

	// RVA: 0x19C908 Offset: 0x19C908 VA: 0x19C908 Slot: 10
	public virtual void set_TypeInfo(IRemotingTypeInfo value) { }

	// RVA: 0x19C910 Offset: 0x19C910 VA: 0x19C910 Slot: 11
	public virtual string get_URI() { }

	// RVA: 0x19C918 Offset: 0x19C918 VA: 0x19C918 Slot: 12
	public virtual void set_URI(string value) { }

	// RVA: 0x19C920 Offset: 0x19C920 VA: 0x19C920 Slot: 13
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x19CB54 Offset: 0x19CB54 VA: 0x19CB54 Slot: 14
	public virtual object GetRealObject(StreamingContext context) { }

	// RVA: 0x19B598 Offset: 0x19B598 VA: 0x19B598
	internal void UpdateChannelInfo() { }

	// RVA: 0x19CCB4 Offset: 0x19CCB4 VA: 0x19CCB4
	internal Type get_ServerType() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x99578 Offset: 0x99578 VA: 0x99578
public static class RemotingConfiguration // TypeDefIndex: 591
{
	// Fields
	private static string applicationID; // 0x0
	private static string applicationName; // 0x4
	private static string processGuid; // 0x8
	private static bool defaultConfigRead; // 0xC
	private static bool defaultDelayedConfigRead; // 0xD
	private static string _errorMode; // 0x10
	private static Hashtable wellKnownClientEntries; // 0x14
	private static Hashtable activatedClientEntries; // 0x18
	private static Hashtable wellKnownServiceEntries; // 0x1C
	private static Hashtable activatedServiceEntries; // 0x20
	private static Hashtable channelTemplates; // 0x24
	private static Hashtable clientProviderTemplates; // 0x28
	private static Hashtable serverProviderTemplates; // 0x2C

	// Properties
	public static string ApplicationName { get; set; }
	public static string ProcessId { get; }

	// Methods

	// RVA: 0x19F474 Offset: 0x19F474 VA: 0x19F474
	private static void .cctor() { }

	// RVA: 0x19F5E8 Offset: 0x19F5E8 VA: 0x19F5E8
	public static string get_ApplicationName() { }

	// RVA: 0x19F674 Offset: 0x19F674 VA: 0x19F674
	public static void set_ApplicationName(string value) { }

	// RVA: 0x19F704 Offset: 0x19F704 VA: 0x19F704
	public static string get_ProcessId() { }

	// RVA: 0x19F81C Offset: 0x19F81C VA: 0x19F81C
	internal static void LoadDefaultDelayedChannels() { }

	// RVA: 0x19FBF4 Offset: 0x19FBF4 VA: 0x19FBF4
	public static bool IsActivationAllowed(Type svrType) { }

	// RVA: 0x19FD60 Offset: 0x19FD60 VA: 0x19FD60
	public static ActivatedClientTypeEntry IsRemotelyActivatedClientType(Type svrType) { }

	// RVA: 0x19FF10 Offset: 0x19FF10 VA: 0x19FF10
	public static void RegisterActivatedClientType(ActivatedClientTypeEntry entry) { }

	// RVA: 0x1A0304 Offset: 0x1A0304 VA: 0x1A0304
	public static void RegisterActivatedServiceType(ActivatedServiceTypeEntry entry) { }

	// RVA: 0x1A048C Offset: 0x1A048C VA: 0x1A048C
	public static void RegisterWellKnownClientType(WellKnownClientTypeEntry entry) { }

	// RVA: 0x1A0800 Offset: 0x1A0800 VA: 0x1A0800
	public static void RegisterWellKnownServiceType(WellKnownServiceTypeEntry entry) { }

	// RVA: 0x1A0B10 Offset: 0x1A0B10 VA: 0x1A0B10
	internal static void RegisterChannelTemplate(ChannelData channel) { }

	// RVA: 0x1A0BE0 Offset: 0x1A0BE0 VA: 0x1A0BE0
	internal static void RegisterClientProviderTemplate(ProviderData prov) { }

	// RVA: 0x1A0CB0 Offset: 0x1A0CB0 VA: 0x1A0CB0
	internal static void RegisterServerProviderTemplate(ProviderData prov) { }

	// RVA: 0x1A0D80 Offset: 0x1A0D80 VA: 0x1A0D80
	internal static void RegisterChannels(ArrayList channels, bool onlyDelayed) { }

	// RVA: 0x1A204C Offset: 0x1A204C VA: 0x1A204C
	internal static void RegisterTypes(ArrayList types) { }

	// RVA: 0x1A2788 Offset: 0x1A2788 VA: 0x1A2788
	public static bool CustomErrorsEnabled(bool isLocalRequest) { }

	// RVA: 0x1A2900 Offset: 0x1A2900 VA: 0x1A2900
	internal static void SetCustomErrorsMode(string mode) { }
}

// Namespace: System.Runtime.Remoting
internal class ConfigHandler : SmallXmlParser.IContentHandler // TypeDefIndex: 592
{
	// Fields
	private ArrayList typeEntries; // 0x8
	private ArrayList channelInstances; // 0xC
	private ChannelData currentChannel; // 0x10
	private Stack currentProviderData; // 0x14
	private string currentClientUrl; // 0x18
	private string appName; // 0x1C
	private string currentXmlPath; // 0x20
	private bool onlyDelayedChannels; // 0x24
	[CompilerGeneratedAttribute] // RVA: 0x9B36C Offset: 0x9B36C VA: 0x9B36C
	private static Dictionary<string, int> <>f__switch$map27; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0x9B37C Offset: 0x9B37C VA: 0x9B37C
	private static Dictionary<string, int> <>f__switch$map28; // 0x4

	// Methods

	// RVA: 0x1E86EC Offset: 0x1E86EC VA: 0x1E86EC
	public void .ctor(bool onlyDelayedChannels) { }

	// RVA: 0x1E87D0 Offset: 0x1E87D0 VA: 0x1E87D0
	private void ValidatePath(string element, string[] paths) { }

	// RVA: 0x1E891C Offset: 0x1E891C VA: 0x1E891C
	private bool CheckPath(string path) { }

	// RVA: 0x1E8A88 Offset: 0x1E8A88 VA: 0x1E8A88 Slot: 4
	public void OnStartParsing(SmallXmlParser parser) { }

	// RVA: 0x1E8A8C Offset: 0x1E8A8C VA: 0x1E8A8C Slot: 8
	public void OnProcessingInstruction(string name, string text) { }

	// RVA: 0x1E8A90 Offset: 0x1E8A90 VA: 0x1E8A90 Slot: 10
	public void OnIgnorableWhitespace(string s) { }

	// RVA: 0x1E8A94 Offset: 0x1E8A94 VA: 0x1E8A94 Slot: 6
	public void OnStartElement(string name, SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x1E8CF0 Offset: 0x1E8CF0 VA: 0x1E8CF0
	public void ParseElement(string name, SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x1ECD50 Offset: 0x1ECD50 VA: 0x1ECD50 Slot: 7
	public void OnEndElement(string name) { }

	// RVA: 0x1EA744 Offset: 0x1EA744 VA: 0x1EA744
	private void ReadCustomProviderData(string name, SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x1EAC44 Offset: 0x1EAC44 VA: 0x1EAC44
	private void ReadLifetine(SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x1ECE24 Offset: 0x1ECE24 VA: 0x1ECE24
	private TimeSpan ParseTime(string s) { }

	// RVA: 0x1EB5AC Offset: 0x1EB5AC VA: 0x1EB5AC
	private void ReadChannel(SmallXmlParser.IAttrList attrs, bool isTemplate) { }

	// RVA: 0x1EBBE8 Offset: 0x1EBBE8 VA: 0x1EBBE8
	private ProviderData ReadProvider(string name, SmallXmlParser.IAttrList attrs, bool isTemplate) { }

	// RVA: 0x1EC54C Offset: 0x1EC54C VA: 0x1EC54C
	private void ReadClientActivated(SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x1EC6E4 Offset: 0x1EC6E4 VA: 0x1EC6E4
	private void ReadServiceActivated(SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x1EC1E8 Offset: 0x1EC1E8 VA: 0x1EC1E8
	private void ReadClientWellKnown(SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x1EC2E8 Offset: 0x1EC2E8 VA: 0x1EC2E8
	private void ReadServiceWellKnown(SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x1EC7B8 Offset: 0x1EC7B8 VA: 0x1EC7B8
	private void ReadInteropXml(SmallXmlParser.IAttrList attrs, bool isElement) { }

	// RVA: 0x1ECA2C Offset: 0x1ECA2C VA: 0x1ECA2C
	private void ReadPreload(SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x1ED700 Offset: 0x1ED700 VA: 0x1ED700
	private string GetNotNull(SmallXmlParser.IAttrList attrs, string name) { }

	// RVA: 0x1ED8D4 Offset: 0x1ED8D4 VA: 0x1ED8D4
	private string ExtractAssembly(ref string type) { }

	// RVA: 0x1EDA30 Offset: 0x1EDA30 VA: 0x1EDA30 Slot: 9
	public void OnChars(string ch) { }

	// RVA: 0x1EDA34 Offset: 0x1EDA34 VA: 0x1EDA34 Slot: 5
	public void OnEndParsing(SmallXmlParser parser) { }
}

// Namespace: System.Runtime.Remoting
internal class ChannelData // TypeDefIndex: 593
{
	// Fields
	internal string Ref; // 0x8
	internal string Type; // 0xC
	internal string Id; // 0x10
	internal string DelayLoadAsClientChannel; // 0x14
	private ArrayList _serverProviders; // 0x18
	private ArrayList _clientProviders; // 0x1C
	private Hashtable _customProperties; // 0x20

	// Properties
	internal ArrayList ServerProviders { get; }
	public ArrayList ClientProviders { get; }
	public Hashtable CustomProperties { get; }

	// Methods

	// RVA: 0x1E0CE8 Offset: 0x1E0CE8 VA: 0x1E0CE8
	public void .ctor() { }

	// RVA: 0x1E0DA0 Offset: 0x1E0DA0 VA: 0x1E0DA0
	internal ArrayList get_ServerProviders() { }

	// RVA: 0x1E0E20 Offset: 0x1E0E20 VA: 0x1E0E20
	public ArrayList get_ClientProviders() { }

	// RVA: 0x1E0EA0 Offset: 0x1E0EA0 VA: 0x1E0EA0
	public Hashtable get_CustomProperties() { }

	// RVA: 0x1E0F20 Offset: 0x1E0F20 VA: 0x1E0F20
	public void CopyFrom(ChannelData other) { }
}

// Namespace: System.Runtime.Remoting
internal class ProviderData // TypeDefIndex: 594
{
	// Fields
	internal string Ref; // 0x8
	internal string Type; // 0xC
	internal string Id; // 0x10
	internal Hashtable CustomProperties; // 0x14
	internal IList CustomData; // 0x18

	// Methods

	// RVA: 0x19CDFC Offset: 0x19CDFC VA: 0x19CDFC
	public void .ctor() { }

	// RVA: 0x19CE78 Offset: 0x19CE78 VA: 0x19CE78
	public void CopyFrom(ProviderData other) { }
}

// Namespace: System.Runtime.Remoting
internal class FormatterData : ProviderData // TypeDefIndex: 595
{
	// Methods

	// RVA: 0x1ED6F8 Offset: 0x1ED6F8 VA: 0x1ED6F8
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x9958C Offset: 0x9958C VA: 0x9958C
[Serializable]
public class RemotingException : SystemException // TypeDefIndex: 596
{
	// Methods

	// RVA: 0x1A2B78 Offset: 0x1A2B78 VA: 0x1A2B78
	public void .ctor() { }

	// RVA: 0x191F6C Offset: 0x191F6C VA: 0x191F6C
	public void .ctor(string message) { }

	// RVA: 0x1A2B80 Offset: 0x1A2B80 VA: 0x1A2B80
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1A2BA0 Offset: 0x1A2BA0 VA: 0x1A2BA0
	public void .ctor(string message, Exception InnerException) { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x995A0 Offset: 0x995A0 VA: 0x995A0
public sealed class RemotingServices // TypeDefIndex: 597
{
	// Fields
	private static Hashtable uri_hash; // 0x0
	private static BinaryFormatter _serializationFormatter; // 0x4
	private static BinaryFormatter _deserializationFormatter; // 0x8
	internal static string app_id; // 0xC
	private static int next_id; // 0x10
	private static readonly BindingFlags methodBindings; // 0x14
	private static readonly MethodInfo FieldSetterMethod; // 0x18
	private static readonly MethodInfo FieldGetterMethod; // 0x1C

	// Methods

	// RVA: 0x1A2BA8 Offset: 0x1A2BA8 VA: 0x1A2BA8
	private static void .cctor() { }

	// RVA: 0x1A304C Offset: 0x1A304C VA: 0x1A304C
	internal static object InternalExecute(MethodBase method, object obj, object[] parameters, out object[] out_args) { }

	// RVA: 0x1925A0 Offset: 0x1925A0 VA: 0x1925A0
	internal static MethodBase GetVirtualMethod(Type type, MethodBase method) { }

	[ReliabilityContractAttribute] // RVA: 0x9CC30 Offset: 0x9CC30 VA: 0x9CC30
	// RVA: 0x1972E0 Offset: 0x1972E0 VA: 0x1972E0
	public static bool IsTransparentProxy(object proxy) { }

	// RVA: 0x1995FC Offset: 0x1995FC VA: 0x1995FC
	internal static IMethodReturnMessage InternalExecuteMessage(MarshalByRefObject target, IMethodCallMessage reqMsg) { }

	[ComVisibleAttribute] // RVA: 0x9CC48 Offset: 0x9CC48 VA: 0x9CC48
	// RVA: 0x1A3050 Offset: 0x1A3050 VA: 0x1A3050
	public static object Connect(Type classToProxy, string url) { }

	// RVA: 0x191E88 Offset: 0x191E88 VA: 0x191E88
	public static Type GetServerTypeForUri(string URI) { }

	// RVA: 0x19CC30 Offset: 0x19CC30 VA: 0x19CC30
	public static object Unmarshal(ObjRef objectRef) { }

	// RVA: 0x1A3504 Offset: 0x1A3504 VA: 0x1A3504
	public static object Unmarshal(ObjRef objectRef, bool fRefine) { }

	// RVA: 0x1A3C40 Offset: 0x1A3C40 VA: 0x1A3C40
	public static ObjRef Marshal(MarshalByRefObject Obj) { }

	// RVA: 0x1A3CC8 Offset: 0x1A3CC8 VA: 0x1A3CC8
	public static ObjRef Marshal(MarshalByRefObject Obj, string ObjURI, Type RequestedType) { }

	// RVA: 0x1A435C Offset: 0x1A435C VA: 0x1A435C
	private static string NewUri() { }

	[ReliabilityContractAttribute] // RVA: 0x9CC5C Offset: 0x9CC5C VA: 0x9CC5C
	// RVA: 0x1972E4 Offset: 0x1972E4 VA: 0x1972E4
	public static RealProxy GetRealProxy(object proxy) { }

	// RVA: 0x1925A4 Offset: 0x1925A4 VA: 0x1925A4
	public static MethodBase GetMethodBaseFromMethodMessage(IMethodMessage msg) { }

	// RVA: 0x1921B4 Offset: 0x1921B4 VA: 0x1921B4
	internal static MethodBase GetMethodBaseFromName(Type type, string methodName, Type[] signature) { }

	// RVA: 0x1A5148 Offset: 0x1A5148 VA: 0x1A5148
	private static MethodBase FindInterfaceMethod(Type type, string methodName, Type[] signature) { }

	// RVA: 0x1974DC Offset: 0x1974DC VA: 0x1974DC
	public static void GetObjectData(object obj, SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1A5340 Offset: 0x1A5340 VA: 0x1A5340
	public static bool IsMethodOverloaded(IMethodMessage msg) { }

	// RVA: 0x196DE0 Offset: 0x196DE0 VA: 0x196DE0
	public static bool IsOneWay(MethodBase method) { }

	// RVA: 0x1A55C0 Offset: 0x1A55C0 VA: 0x1A55C0
	internal static object CreateClientProxy(ActivatedClientTypeEntry entry, object[] activationAttributes) { }

	// RVA: 0x1A5830 Offset: 0x1A5830 VA: 0x1A5830
	internal static object CreateClientProxy(Type objectType, string url, object[] activationAttributes) { }

	// RVA: 0x1A5BA4 Offset: 0x1A5BA4 VA: 0x1A5BA4
	internal static object CreateClientProxyForContextBound(Type type, object[] activationAttributes) { }

	// RVA: 0x1A31A8 Offset: 0x1A31A8 VA: 0x1A31A8
	internal static Identity GetIdentityForUri(string uri) { }

	// RVA: 0x1A5E68 Offset: 0x1A5E68 VA: 0x1A5E68
	private static string RemoveAppNameFromUri(string uri) { }

	// RVA: 0x1A5FB0 Offset: 0x1A5FB0 VA: 0x1A5FB0
	internal static ClientIdentity GetOrCreateClientIdentity(ObjRef objRef, Type proxyType, out object clientProxy) { }

	// RVA: 0x1A5A00 Offset: 0x1A5A00 VA: 0x1A5A00
	private static IMessageSink GetClientChannelSinkChain(string url, object channelData, out string objectUri) { }

	// RVA: 0x1A65F8 Offset: 0x1A65F8 VA: 0x1A65F8
	internal static ClientActivatedIdentity CreateContextBoundObjectIdentity(Type objectType) { }

	// RVA: 0x1A4F60 Offset: 0x1A4F60 VA: 0x1A4F60
	internal static ClientActivatedIdentity CreateClientActivatedServerIdentity(MarshalByRefObject realObject, Type objectType, string objectUri) { }

	// RVA: 0x1A09E0 Offset: 0x1A09E0 VA: 0x1A09E0
	internal static ServerIdentity CreateWellKnownServerIdentity(Type objectType, string objectUri, WellKnownObjectMode mode) { }

	// RVA: 0x1A4694 Offset: 0x1A4694 VA: 0x1A4694
	private static void RegisterServerIdentity(ServerIdentity identity) { }

	// RVA: 0x19D9C8 Offset: 0x19D9C8 VA: 0x19D9C8
	internal static object GetProxyForRemoteObject(ObjRef objref, Type classToProxy) { }

	// RVA: 0x1A3108 Offset: 0x1A3108 VA: 0x1A3108
	internal static object GetRemoteObject(ObjRef objRef, Type proxyType) { }

	// RVA: 0x1A2FD0 Offset: 0x1A2FD0 VA: 0x1A2FD0
	private static void RegisterInternalChannels() { }

	// RVA: 0x19F1D8 Offset: 0x19F1D8 VA: 0x19F1D8
	internal static void DisposeIdentity(Identity ident) { }

	// RVA: 0x18AACC Offset: 0x18AACC VA: 0x18AACC
	internal static Identity GetMessageTargetIdentity(IMessage msg) { }

	// RVA: 0x1A6880 Offset: 0x1A6880 VA: 0x1A6880
	internal static void SetMessageTargetIdentity(IMessage msg, Identity ident) { }

	// RVA: 0x1A5DC4 Offset: 0x1A5DC4 VA: 0x1A5DC4
	private static string GetNormalizedUri(string uri) { }
}

// Namespace: System.Runtime.Remoting
internal abstract class ServerIdentity : Identity // TypeDefIndex: 598
{
	// Fields
	protected Type _objectType; // 0x24
	protected MarshalByRefObject _serverObject; // 0x28
	protected IMessageSink _serverSink; // 0x2C
	protected Context _context; // 0x30
	protected Lease _lease; // 0x34

	// Properties
	public Type ObjectType { get; }
	public Lease Lease { get; }
	public Context Context { get; set; }

	// Methods

	// RVA: 0x1A6A88 Offset: 0x1A6A88 VA: 0x1A6A88
	public void .ctor(string objectUri, Context context, Type objectType) { }

	// RVA: 0x1A34FC Offset: 0x1A34FC VA: 0x1A34FC
	public Type get_ObjectType() { }

	// RVA: 0x1A4990 Offset: 0x1A4990 VA: 0x1A4990
	public void StartTrackingLifetime(ILease lease) { }

	// RVA: 0x1A6AB0 Offset: 0x1A6AB0 VA: 0x1A6AB0 Slot: 5
	public virtual void OnLifetimeExpired() { }

	// RVA: 0x1A6B5C Offset: 0x1A6B5C VA: 0x1A6B5C Slot: 4
	public override ObjRef CreateObjRef(Type requestedType) { }

	// RVA: 0x1A66C8 Offset: 0x1A66C8 VA: 0x1A66C8
	public void AttachServerObject(MarshalByRefObject serverObject, Context context) { }

	// RVA: 0x1A6D04 Offset: 0x1A6D04 VA: 0x1A6D04
	public Lease get_Lease() { }

	// RVA: 0x19EF18 Offset: 0x19EF18 VA: 0x19EF18
	public Context get_Context() { }

	// RVA: 0x1A6D0C Offset: 0x1A6D0C VA: 0x1A6D0C
	public void set_Context(Context value) { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract IMessage SyncObjectProcessMessage(IMessage msg);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink);

	// RVA: 0x1A6AB4 Offset: 0x1A6AB4 VA: 0x1A6AB4
	protected void DisposeServerObject() { }
}

// Namespace: System.Runtime.Remoting
internal class ClientActivatedIdentity : ServerIdentity // TypeDefIndex: 599
{
	// Fields
	private MarshalByRefObject _targetThis; // 0x38

	// Methods

	// RVA: 0x1E7DE4 Offset: 0x1E7DE4 VA: 0x1E7DE4
	public void .ctor(string objectUri, Type objectType) { }

	// RVA: 0x1E7E0C Offset: 0x1E7E0C VA: 0x1E7E0C
	public MarshalByRefObject GetServerObject() { }

	// RVA: 0x1E7E14 Offset: 0x1E7E14 VA: 0x1E7E14
	public void SetClientProxy(MarshalByRefObject obj) { }

	// RVA: 0x1E7E1C Offset: 0x1E7E1C VA: 0x1E7E1C Slot: 5
	public override void OnLifetimeExpired() { }

	// RVA: 0x1E7EAC Offset: 0x1E7EAC VA: 0x1E7EAC Slot: 6
	public override IMessage SyncObjectProcessMessage(IMessage msg) { }

	// RVA: 0x1E8254 Offset: 0x1E8254 VA: 0x1E8254 Slot: 7
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting
internal class SingletonIdentity : ServerIdentity // TypeDefIndex: 600
{
	// Methods

	// RVA: 0x1A6858 Offset: 0x1A6858 VA: 0x1A6858
	public void .ctor(string objectUri, Context context, Type objectType) { }

	// RVA: 0x1A7780 Offset: 0x1A7780 VA: 0x1A7780
	public MarshalByRefObject GetServerObject() { }

	// RVA: 0x1A7A08 Offset: 0x1A7A08 VA: 0x1A7A08 Slot: 6
	public override IMessage SyncObjectProcessMessage(IMessage msg) { }

	// RVA: 0x1A7B38 Offset: 0x1A7B38 VA: 0x1A7B38 Slot: 7
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting
internal class SingleCallIdentity : ServerIdentity // TypeDefIndex: 601
{
	// Methods

	// RVA: 0x1A6830 Offset: 0x1A6830 VA: 0x1A6830
	public void .ctor(string objectUri, Context context, Type objectType) { }

	// RVA: 0x1A7164 Offset: 0x1A7164 VA: 0x1A7164 Slot: 6
	public override IMessage SyncObjectProcessMessage(IMessage msg) { }

	// RVA: 0x1A74E8 Offset: 0x1A74E8 VA: 0x1A74E8 Slot: 7
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting
internal class DisposerReplySink : IMessageSink // TypeDefIndex: 602
{
	// Fields
	private IMessageSink _next; // 0x8
	private IDisposable _disposable; // 0xC

	// Methods

	// RVA: 0x1F3ECC Offset: 0x1F3ECC VA: 0x1F3ECC
	public void .ctor(IMessageSink next, IDisposable disposable) { }

	// RVA: 0x1F3EF4 Offset: 0x1F3EF4 VA: 0x1F3EF4 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x1F4060 Offset: 0x1F4060 VA: 0x1F4060 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x995B4 Offset: 0x995B4 VA: 0x995B4
public class SoapServices // TypeDefIndex: 603
{
	// Fields
	private static Hashtable _xmlTypes; // 0x0
	private static Hashtable _xmlElements; // 0x4
	private static Hashtable _soapActions; // 0x8
	private static Hashtable _soapActionsMethods; // 0xC
	private static Hashtable _typeInfos; // 0x10

	// Properties
	public static string XmlNsForClrTypeWithAssembly { get; }
	public static string XmlNsForClrTypeWithNs { get; }
	public static string XmlNsForClrTypeWithNsAndAssembly { get; }

	// Methods

	// RVA: 0x1A7C78 Offset: 0x1A7C78 VA: 0x1A7C78
	private static void .cctor() { }

	// RVA: 0x1A7D78 Offset: 0x1A7D78 VA: 0x1A7D78
	public static string get_XmlNsForClrTypeWithAssembly() { }

	// RVA: 0x1A7DD4 Offset: 0x1A7DD4 VA: 0x1A7DD4
	public static string get_XmlNsForClrTypeWithNs() { }

	// RVA: 0x1A7E30 Offset: 0x1A7E30 VA: 0x1A7E30
	public static string get_XmlNsForClrTypeWithNsAndAssembly() { }

	// RVA: 0x19B238 Offset: 0x19B238 VA: 0x19B238
	public static string CodeXmlNamespaceForClrTypeNamespace(string typeNamespace, string assemblyName) { }

	// RVA: 0x1A7F94 Offset: 0x1A7F94 VA: 0x1A7F94
	private static string GetNameKey(string name, string namspace) { }

	// RVA: 0x1A8040 Offset: 0x1A8040 VA: 0x1A8040
	private static string GetAssemblyName(MethodBase mb) { }

	// RVA: 0x1A8220 Offset: 0x1A8220 VA: 0x1A8220
	public static bool GetXmlElementForInteropType(Type type, out string xmlElement, out string xmlNamespace) { }

	// RVA: 0x19AE08 Offset: 0x19AE08 VA: 0x19AE08
	public static string GetXmlNamespaceForMethodCall(MethodBase mb) { }

	// RVA: 0x19AD2C Offset: 0x19AD2C VA: 0x19AD2C
	public static string GetXmlNamespaceForMethodResponse(MethodBase mb) { }

	// RVA: 0x1A8360 Offset: 0x1A8360 VA: 0x1A8360
	public static bool GetXmlTypeForInteropType(Type type, out string xmlType, out string xmlTypeNamespace) { }

	// RVA: 0x1A84A8 Offset: 0x1A84A8 VA: 0x1A84A8
	public static void PreLoad(Assembly assembly) { }

	// RVA: 0x1A8598 Offset: 0x1A8598 VA: 0x1A8598
	public static void PreLoad(Type type) { }

	// RVA: 0x1A8E68 Offset: 0x1A8E68 VA: 0x1A8E68
	public static void RegisterInteropXmlElement(string xmlElement, string xmlNamespace, Type type) { }

	// RVA: 0x1A8C84 Offset: 0x1A8C84 VA: 0x1A8C84
	public static void RegisterInteropXmlType(string xmlType, string xmlTypeNamespace, Type type) { }

	// RVA: 0x1A7E8C Offset: 0x1A7E8C VA: 0x1A7E8C
	private static string EncodeNs(string ns) { }
}

// Namespace: 
private class SoapServices.TypeInfo // TypeDefIndex: 604
{
	// Fields
	public Hashtable Attributes; // 0x8
	public Hashtable Elements; // 0xC

	// Methods

	// RVA: 0x1A904C Offset: 0x1A904C VA: 0x1A904C
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x995C8 Offset: 0x995C8 VA: 0x995C8
public class TypeEntry // TypeDefIndex: 605
{
	// Fields
	private string assembly_name; // 0x8
	private string type_name; // 0xC

	// Properties
	public string AssemblyName { get; set; }
	public string TypeName { get; set; }

	// Methods

	// RVA: 0x1A9054 Offset: 0x1A9054 VA: 0x1A9054
	protected void .ctor() { }

	// RVA: 0x1A905C Offset: 0x1A905C VA: 0x1A905C
	public string get_AssemblyName() { }

	// RVA: 0x1A9064 Offset: 0x1A9064 VA: 0x1A9064
	public void set_AssemblyName(string value) { }

	// RVA: 0x1A906C Offset: 0x1A906C VA: 0x1A906C
	public string get_TypeName() { }

	// RVA: 0x1A9074 Offset: 0x1A9074 VA: 0x1A9074
	public void set_TypeName(string value) { }
}

// Namespace: System.Runtime.Remoting
[Serializable]
internal class TypeInfo : IRemotingTypeInfo // TypeDefIndex: 606
{
	// Fields
	private string serverType; // 0x8
	private string[] serverHierarchy; // 0xC
	private string[] interfacesImplemented; // 0x10

	// Properties
	public string TypeName { get; }

	// Methods

	// RVA: 0x19B704 Offset: 0x19B704 VA: 0x19B704
	public void .ctor(Type type) { }

	// RVA: 0x1A907C Offset: 0x1A907C VA: 0x1A907C Slot: 4
	public string get_TypeName() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x995DC Offset: 0x995DC VA: 0x995DC
public class WellKnownClientTypeEntry : TypeEntry // TypeDefIndex: 607
{
	// Fields
	private Type obj_type; // 0x10
	private string obj_url; // 0x14
	private string app_url; // 0x18

	// Properties
	public string ApplicationUrl { get; }
	public Type ObjectType { get; }
	public string ObjectUrl { get; }

	// Methods

	// RVA: 0x1A9084 Offset: 0x1A9084 VA: 0x1A9084
	public void .ctor(string typeName, string assemblyName, string objectUrl) { }

	// RVA: 0x1A91E8 Offset: 0x1A91E8 VA: 0x1A91E8
	public string get_ApplicationUrl() { }

	// RVA: 0x1A07F8 Offset: 0x1A07F8 VA: 0x1A07F8
	public Type get_ObjectType() { }

	// RVA: 0x1A91F0 Offset: 0x1A91F0 VA: 0x1A91F0
	public string get_ObjectUrl() { }

	// RVA: 0x1A91F8 Offset: 0x1A91F8 VA: 0x1A91F8 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x995F0 Offset: 0x995F0 VA: 0x995F0
[Serializable]
public enum WellKnownObjectMode // TypeDefIndex: 608
{
	// Fields
	public int value__; // 0x0
	public const WellKnownObjectMode Singleton = 1;
	public const WellKnownObjectMode SingleCall = 2;
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x99604 Offset: 0x99604 VA: 0x99604
public class WellKnownServiceTypeEntry : TypeEntry // TypeDefIndex: 609
{
	// Fields
	private Type obj_type; // 0x10
	private string obj_uri; // 0x14
	private WellKnownObjectMode obj_mode; // 0x18

	// Properties
	public WellKnownObjectMode Mode { get; }
	public Type ObjectType { get; }
	public string ObjectUri { get; }

	// Methods

	// RVA: 0x1A92E4 Offset: 0x1A92E4 VA: 0x1A92E4
	public void .ctor(string typeName, string assemblyName, string objectUri, WellKnownObjectMode mode) { }

	// RVA: 0x1A09D8 Offset: 0x1A09D8 VA: 0x1A09D8
	public WellKnownObjectMode get_Mode() { }

	// RVA: 0x1A09D0 Offset: 0x1A09D0 VA: 0x1A09D0
	public Type get_ObjectType() { }

	// RVA: 0x1A09C8 Offset: 0x1A09C8 VA: 0x1A09C8
	public string get_ObjectUri() { }

	// RVA: 0x1A944C Offset: 0x1A944C VA: 0x1A944C Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class BinaryCommon // TypeDefIndex: 610
{
	// Fields
	public static byte[] BinaryHeader; // 0x0
	private static Type[] _typeCodesToType; // 0x4
	private static byte[] _typeCodeMap; // 0x8
	public static bool UseReflectionSerialization; // 0xC

	// Methods

	// RVA: 0x1AAAF4 Offset: 0x1AAAF4 VA: 0x1AAAF4
	private static void .cctor() { }

	// RVA: 0x1ABA94 Offset: 0x1ABA94 VA: 0x1ABA94
	public static bool IsPrimitive(Type type) { }

	// RVA: 0x1ABC54 Offset: 0x1ABC54 VA: 0x1ABC54
	public static byte GetTypeCode(Type type) { }

	// RVA: 0x1ABDAC Offset: 0x1ABDAC VA: 0x1ABDAC
	public static Type GetTypeFromCode(int code) { }

	// RVA: 0x1ABE70 Offset: 0x1ABE70 VA: 0x1ABE70
	public static void CheckSerializable(Type type, ISurrogateSelector selector, StreamingContext context) { }

	// RVA: 0x1AC060 Offset: 0x1AC060 VA: 0x1AC060
	public static void SwapBytes(byte[] byteArray, int size, int dataSize) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum BinaryElement // TypeDefIndex: 611
{
	// Fields
	public byte value__; // 0x0
	public const BinaryElement Header = 0;
	public const BinaryElement RefTypeObject = 1;
	public const BinaryElement UntypedRuntimeObject = 2;
	public const BinaryElement UntypedExternalObject = 3;
	public const BinaryElement RuntimeObject = 4;
	public const BinaryElement ExternalObject = 5;
	public const BinaryElement String = 6;
	public const BinaryElement GenericArray = 7;
	public const BinaryElement BoxedPrimitiveTypeValue = 8;
	public const BinaryElement ObjectReference = 9;
	public const BinaryElement NullValue = 10;
	public const BinaryElement End = 11;
	public const BinaryElement Assembly = 12;
	public const BinaryElement ArrayFiller8b = 13;
	public const BinaryElement ArrayFiller32b = 14;
	public const BinaryElement ArrayOfPrimitiveType = 15;
	public const BinaryElement ArrayOfObject = 16;
	public const BinaryElement ArrayOfString = 17;
	public const BinaryElement Method = 18;
	public const BinaryElement _Unknown4 = 19;
	public const BinaryElement _Unknown5 = 20;
	public const BinaryElement MethodCall = 21;
	public const BinaryElement MethodResponse = 22;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum TypeTag // TypeDefIndex: 612
{
	// Fields
	public byte value__; // 0x0
	public const TypeTag PrimitiveType = 0;
	public const TypeTag String = 1;
	public const TypeTag ObjectType = 2;
	public const TypeTag RuntimeType = 3;
	public const TypeTag GenericType = 4;
	public const TypeTag ArrayOfObject = 5;
	public const TypeTag ArrayOfString = 6;
	public const TypeTag ArrayOfPrimitiveType = 7;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum MethodFlags // TypeDefIndex: 613
{
	// Fields
	public int value__; // 0x0
	public const MethodFlags NoArguments = 1;
	public const MethodFlags PrimitiveArguments = 2;
	public const MethodFlags ArgumentsInSimpleArray = 4;
	public const MethodFlags ArgumentsInMultiArray = 8;
	public const MethodFlags ExcludeLogicalCallContext = 16;
	public const MethodFlags IncludesLogicalCallContext = 64;
	public const MethodFlags IncludesSignature = 128;
	public const MethodFlags FormatMask = 15;
	public const MethodFlags GenericArguments = 32768;
	public const MethodFlags NeedsInfoArrayMask = 32972;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum ReturnTypeTag // TypeDefIndex: 614
{
	// Fields
	public byte value__; // 0x0
	public const ReturnTypeTag Null = 2;
	public const ReturnTypeTag PrimitiveType = 8;
	public const ReturnTypeTag ObjectType = 16;
	public const ReturnTypeTag Exception = 32;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[ComVisibleAttribute] // RVA: 0x99618 Offset: 0x99618 VA: 0x99618
public sealed class BinaryFormatter : IRemotingFormatter, IFormatter // TypeDefIndex: 615
{
	// Fields
	private FormatterAssemblyStyle assembly_format; // 0x8
	private SerializationBinder binder; // 0xC
	private StreamingContext context; // 0x10
	private ISurrogateSelector surrogate_selector; // 0x18
	private FormatterTypeStyle type_format; // 0x1C
	private TypeFilterLevel filter_level; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0x9B38C Offset: 0x9B38C VA: 0x9B38C
	private static ISurrogateSelector <DefaultSurrogateSelector>k__BackingField; // 0x0

	// Properties
	public static ISurrogateSelector DefaultSurrogateSelector { get; }
	public FormatterAssemblyStyle AssemblyFormat { set; }
	public SerializationBinder Binder { get; }
	public StreamingContext Context { get; }
	public ISurrogateSelector SurrogateSelector { get; set; }
	public TypeFilterLevel FilterLevel { get; }

	// Methods

	// RVA: 0x1AC4FC Offset: 0x1AC4FC VA: 0x1AC4FC
	public void .ctor() { }

	// RVA: 0x1A2F84 Offset: 0x1A2F84 VA: 0x1A2F84
	public void .ctor(ISurrogateSelector selector, StreamingContext context) { }

	[CompilerGeneratedAttribute] // RVA: 0x9CC74 Offset: 0x9CC74 VA: 0x9CC74
	// RVA: 0x1AC5AC Offset: 0x1AC5AC VA: 0x1AC5AC
	public static ISurrogateSelector get_DefaultSurrogateSelector() { }

	// RVA: 0x1A2FC8 Offset: 0x1A2FC8 VA: 0x1A2FC8
	public void set_AssemblyFormat(FormatterAssemblyStyle value) { }

	// RVA: 0x1AC610 Offset: 0x1AC610 VA: 0x1AC610 Slot: 5
	public SerializationBinder get_Binder() { }

	// RVA: 0x1AC618 Offset: 0x1AC618 VA: 0x1AC618 Slot: 6
	public StreamingContext get_Context() { }

	// RVA: 0x1AC62C Offset: 0x1AC62C VA: 0x1AC62C Slot: 7
	public ISurrogateSelector get_SurrogateSelector() { }

	// RVA: 0x1AC634 Offset: 0x1AC634 VA: 0x1AC634 Slot: 8
	public void set_SurrogateSelector(ISurrogateSelector value) { }

	// RVA: 0x1AC63C Offset: 0x1AC63C VA: 0x1AC63C
	public TypeFilterLevel get_FilterLevel() { }

	// RVA: 0x1AC644 Offset: 0x1AC644 VA: 0x1AC644 Slot: 4
	public object Deserialize(Stream serializationStream) { }

	// RVA: 0x1AC8BC Offset: 0x1AC8BC VA: 0x1AC8BC Slot: 9
	public object Deserialize(Stream serializationStream, HeaderHandler handler) { }

	// RVA: 0x1AC64C Offset: 0x1AC64C VA: 0x1AC64C
	private object NoCheckDeserialize(Stream serializationStream, HeaderHandler handler) { }

	// RVA: 0x1AE60C Offset: 0x1AE60C VA: 0x1AE60C
	public object DeserializeMethodResponse(Stream serializationStream, HeaderHandler handler, IMethodCallMessage methodCallMessage) { }

	// RVA: 0x1AE624 Offset: 0x1AE624 VA: 0x1AE624
	private object NoCheckDeserializeMethodResponse(Stream serializationStream, HeaderHandler handler, IMethodCallMessage methodCallMessage) { }

	// RVA: 0x1AE810 Offset: 0x1AE810 VA: 0x1AE810 Slot: 10
	public void Serialize(Stream serializationStream, object graph) { }

	// RVA: 0x1AE82C Offset: 0x1AE82C VA: 0x1AE82C Slot: 11
	public void Serialize(Stream serializationStream, object graph, Header[] headers) { }

	// RVA: 0x1AEA4C Offset: 0x1AEA4C VA: 0x1AEA4C
	private void WriteBinaryHeader(BinaryWriter writer, bool hasHeaders) { }

	// RVA: 0x1AC8C0 Offset: 0x1AC8C0 VA: 0x1AC8C0
	private void ReadBinaryHeader(BinaryReader reader, out bool hasHeaders) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class CodeGenerator // TypeDefIndex: 616
{
	// Fields
	private static object monitor; // 0x0
	private static ModuleBuilder _module; // 0x4

	// Methods

	// RVA: 0x1B121C Offset: 0x1B121C VA: 0x1B121C
	private static void .cctor() { }

	// RVA: 0x1B1390 Offset: 0x1B1390 VA: 0x1B1390
	public static Type GenerateMetadataType(Type type, StreamingContext context) { }

	// RVA: 0x1B14D0 Offset: 0x1B14D0 VA: 0x1B14D0
	public static Type GenerateMetadataTypeInternal(Type type, StreamingContext context) { }

	// RVA: 0x1B44F8 Offset: 0x1B44F8 VA: 0x1B44F8
	public static void LoadFromPtr(ILGenerator ig, Type t) { }

	// RVA: 0x1B3D88 Offset: 0x1B3D88 VA: 0x1B3D88
	private static void EmitWriteTypeSpec(ILGenerator gen, Type type, string member) { }

	// RVA: 0x1B396C Offset: 0x1B396C VA: 0x1B396C
	private static void EmitLoadTypeAssembly(ILGenerator gen, Type type, string member) { }

	// RVA: 0x1B3BB0 Offset: 0x1B3BB0 VA: 0x1B3BB0
	private static void EmitWrite(ILGenerator gen, Type type) { }

	// RVA: 0x1B5080 Offset: 0x1B5080 VA: 0x1B5080
	public static void EmitWritePrimitiveValue(ILGenerator gen, Type type) { }

	// RVA: 0x1B57A4 Offset: 0x1B57A4 VA: 0x1B57A4
	public static Type EnumToUnderlying(Type t) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class MessageFormatter // TypeDefIndex: 617
{
	// Methods

	// RVA: 0x1AEB24 Offset: 0x1AEB24 VA: 0x1AEB24
	public static void WriteMethodCall(BinaryWriter writer, object obj, Header[] headers, ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat) { }

	// RVA: 0x1AFDA0 Offset: 0x1AFDA0 VA: 0x1AFDA0
	public static void WriteMethodResponse(BinaryWriter writer, object obj, Header[] headers, ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat) { }

	// RVA: 0x1AC9B8 Offset: 0x1AC9B8 VA: 0x1AC9B8
	public static object ReadMethodCall(BinaryElement elem, BinaryReader reader, bool hasHeaders, HeaderHandler headerHandler, BinaryFormatter formatter) { }

	// RVA: 0x1AE7B0 Offset: 0x1AE7B0 VA: 0x1AE7B0
	public static object ReadMethodResponse(BinaryReader reader, bool hasHeaders, HeaderHandler headerHandler, IMethodCallMessage methodCallMessage, BinaryFormatter formatter) { }

	// RVA: 0x1AD8B4 Offset: 0x1AD8B4 VA: 0x1AD8B4
	public static object ReadMethodResponse(BinaryElement elem, BinaryReader reader, bool hasHeaders, HeaderHandler headerHandler, IMethodCallMessage methodCallMessage, BinaryFormatter formatter) { }

	// RVA: 0x1B694C Offset: 0x1B694C VA: 0x1B694C
	private static bool AllTypesArePrimitive(object[] objects) { }

	// RVA: 0x1B69CC Offset: 0x1B69CC VA: 0x1B69CC
	public static bool IsMethodPrimitive(Type type) { }

	// RVA: 0x1B6484 Offset: 0x1B6484 VA: 0x1B6484
	private static object[] GetExtraProperties(IDictionary properties, string[] internalKeys) { }

	// RVA: 0x1B6B38 Offset: 0x1B6B38 VA: 0x1B6B38
	private static bool IsInternalKey(string key, string[] internalKeys) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class ObjectReader // TypeDefIndex: 618
{
	// Fields
	private ISurrogateSelector _surrogateSelector; // 0x8
	private StreamingContext _context; // 0xC
	private SerializationBinder _binder; // 0x14
	private TypeFilterLevel _filterLevel; // 0x18
	private ObjectManager _manager; // 0x1C
	private Hashtable _registeredAssemblies; // 0x20
	private Hashtable _typeMetadataCache; // 0x24
	private object _lastObject; // 0x28
	private long _lastObjectID; // 0x30
	private long _rootObjectID; // 0x38
	private byte[] arrayBuffer; // 0x40
	private int ArrayBufferLength; // 0x44

	// Properties
	public object CurrentObject { get; }

	// Methods

	// RVA: 0x3AF328 Offset: 0x3AF328 VA: 0x3AF328
	public void .ctor(BinaryFormatter formatter) { }

	// RVA: 0x3AF570 Offset: 0x3AF570 VA: 0x3AF570
	public void ReadObjectGraph(BinaryReader reader, bool readHeaders, out object result, out Header[] headers) { }

	// RVA: 0x3AF5D4 Offset: 0x3AF5D4 VA: 0x3AF5D4
	public void ReadObjectGraph(BinaryElement elem, BinaryReader reader, bool readHeaders, out object result, out Header[] headers) { }

	// RVA: 0x3AF804 Offset: 0x3AF804 VA: 0x3AF804
	private bool ReadNextObject(BinaryElement element, BinaryReader reader) { }

	// RVA: 0x3AF8FC Offset: 0x3AF8FC VA: 0x3AF8FC
	public bool ReadNextObject(BinaryReader reader) { }

	// RVA: 0x3AF8F4 Offset: 0x3AF8F4 VA: 0x3AF8F4
	public object get_CurrentObject() { }

	// RVA: 0x3AFA1C Offset: 0x3AFA1C VA: 0x3AFA1C
	private void ReadObject(BinaryElement element, BinaryReader reader, out long objectId, out object value, out SerializationInfo info) { }

	// RVA: 0x3B06EC Offset: 0x3B06EC VA: 0x3B06EC
	private void ReadAssembly(BinaryReader reader) { }

	// RVA: 0x3B01E8 Offset: 0x3B01E8 VA: 0x3B01E8
	private void ReadObjectInstance(BinaryReader reader, bool isRuntimeObject, bool hasTypeInfo, out long objectId, out object value, out SerializationInfo info) { }

	// RVA: 0x3AFFB0 Offset: 0x3AFFB0 VA: 0x3AFFB0
	private void ReadRefTypeObjectInstance(BinaryReader reader, out long objectId, out object value, out SerializationInfo info) { }

	// RVA: 0x3B2118 Offset: 0x3B2118 VA: 0x3B2118
	private void ReadObjectContent(BinaryReader reader, ObjectReader.TypeMetadata metadata, long objectId, out object objectInstance, out SerializationInfo info) { }

	// RVA: 0x3AFDC8 Offset: 0x3AFDC8 VA: 0x3AFDC8
	private void RegisterObject(long objectId, object objectInstance, SerializationInfo info, long parentObjectId, MemberInfo parentObjectMemeber, int[] indices) { }

	// RVA: 0x3B0274 Offset: 0x3B0274 VA: 0x3B0274
	private void ReadStringIntance(BinaryReader reader, out long objectId, out object value) { }

	// RVA: 0x3B02E0 Offset: 0x3B02E0 VA: 0x3B02E0
	private void ReadGenericArray(BinaryReader reader, out long objectId, out object val) { }

	// RVA: 0x3B06C8 Offset: 0x3B06C8 VA: 0x3B06C8
	private object ReadBoxedPrimitiveTypeValue(BinaryReader reader) { }

	// RVA: 0x3B080C Offset: 0x3B080C VA: 0x3B080C
	private void ReadArrayOfPrimitiveType(BinaryReader reader, out long objectId, out object val) { }

	// RVA: 0x3B37DC Offset: 0x3B37DC VA: 0x3B37DC
	private void BlockRead(BinaryReader reader, Array array, int dataSize) { }

	// RVA: 0x3B1474 Offset: 0x3B1474 VA: 0x3B1474
	private void ReadArrayOfObject(BinaryReader reader, out long objectId, out object array) { }

	// RVA: 0x3B1534 Offset: 0x3B1534 VA: 0x3B1534
	private void ReadArrayOfString(BinaryReader reader, out long objectId, out object array) { }

	// RVA: 0x3B3A2C Offset: 0x3B3A2C VA: 0x3B3A2C
	private void ReadSimpleArray(BinaryReader reader, Type elementType, out long objectId, out object val) { }

	// RVA: 0x3B15FC Offset: 0x3B15FC VA: 0x3B15FC
	private ObjectReader.TypeMetadata ReadTypeMetadata(BinaryReader reader, bool isRuntimeObject, bool hasTypeInfo) { }

	// RVA: 0x3B2710 Offset: 0x3B2710 VA: 0x3B2710
	private void ReadValue(BinaryReader reader, object parentObject, long parentObjectId, SerializationInfo info, Type valueType, string fieldName, MemberInfo memberInfo, int[] indices) { }

	// RVA: 0x3B3DFC Offset: 0x3B3DFC VA: 0x3B3DFC
	private void SetObjectValue(object parentObject, string fieldName, MemberInfo memberInfo, SerializationInfo info, object value, Type valueType, int[] indices) { }

	// RVA: 0x3B42BC Offset: 0x3B42BC VA: 0x3B42BC
	private void RecordFixup(long parentObjectId, long childObjectId, object parentObject, SerializationInfo info, string fieldName, MemberInfo memberInfo, int[] indices) { }

	// RVA: 0x3B3BBC Offset: 0x3B3BBC VA: 0x3B3BBC
	private Type GetDeserializationType(long assemblyId, string className) { }

	// RVA: 0x3B2BDC Offset: 0x3B2BDC VA: 0x3B2BDC
	public Type ReadType(BinaryReader reader, TypeTag code) { }

	// RVA: 0x3B3170 Offset: 0x3B3170 VA: 0x3B3170
	public static object ReadPrimitiveTypeValue(BinaryReader reader, Type type) { }
}

// Namespace: 
private class ObjectReader.TypeMetadata // TypeDefIndex: 619
{
	// Fields
	public Type Type; // 0x8
	public Type[] MemberTypes; // 0xC
	public string[] MemberNames; // 0x10
	public MemberInfo[] MemberInfos; // 0x14
	public int FieldCount; // 0x18
	public bool NeedsSerializationInfo; // 0x1C

	// Methods

	// RVA: 0x3B3BB4 Offset: 0x3B3BB4 VA: 0x3B3BB4
	public void .ctor() { }
}

// Namespace: 
private class ObjectReader.ArrayNullFiller // TypeDefIndex: 620
{
	// Fields
	public int NullCount; // 0x8

	// Methods

	// RVA: 0x3B07EC Offset: 0x3B07EC VA: 0x3B07EC
	public void .ctor(int count) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal abstract class TypeMetadata // TypeDefIndex: 621
{
	// Fields
	public string TypeAssemblyName; // 0x8
	public string InstanceTypeName; // 0xC

	// Properties
	public abstract bool RequiresTypes { get; }

	// Methods

	// RVA: 0x3B9F60 Offset: 0x3B9F60 VA: 0x3B9F60
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void WriteAssemblies(ObjectWriter ow, BinaryWriter writer);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void WriteTypeData(ObjectWriter ow, BinaryWriter writer, bool writeTypes);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void WriteObjectData(ObjectWriter ow, BinaryWriter writer, object data);

	// RVA: 0x3BA894 Offset: 0x3BA894 VA: 0x3BA894 Slot: 7
	public virtual bool IsCompatible(TypeMetadata other) { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool get_RequiresTypes();
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal abstract class ClrTypeMetadata : TypeMetadata // TypeDefIndex: 622
{
	// Fields
	public Type InstanceType; // 0x10

	// Properties
	public override bool RequiresTypes { get; }

	// Methods

	// RVA: 0x1B117C Offset: 0x1B117C VA: 0x1B117C
	public void .ctor(Type instanceType) { }

	// RVA: 0x1B1214 Offset: 0x1B1214 VA: 0x1B1214 Slot: 8
	public override bool get_RequiresTypes() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class SerializableTypeMetadata : TypeMetadata // TypeDefIndex: 623
{
	// Fields
	private Type[] types; // 0x10
	private string[] names; // 0x14

	// Properties
	public override bool RequiresTypes { get; }

	// Methods

	// RVA: 0x3B6204 Offset: 0x3B6204 VA: 0x3B6204
	public void .ctor(Type itype, SerializationInfo info) { }

	// RVA: 0x3BA140 Offset: 0x3BA140 VA: 0x3BA140 Slot: 7
	public override bool IsCompatible(TypeMetadata other) { }

	// RVA: 0x3BA414 Offset: 0x3BA414 VA: 0x3BA414 Slot: 4
	public override void WriteAssemblies(ObjectWriter ow, BinaryWriter writer) { }

	// RVA: 0x3BA508 Offset: 0x3BA508 VA: 0x3BA508 Slot: 5
	public override void WriteTypeData(ObjectWriter ow, BinaryWriter writer, bool writeTypes) { }

	// RVA: 0x3BA6F8 Offset: 0x3BA6F8 VA: 0x3BA6F8 Slot: 6
	public override void WriteObjectData(ObjectWriter ow, BinaryWriter writer, object data) { }

	// RVA: 0x3BA88C Offset: 0x3BA88C VA: 0x3BA88C Slot: 8
	public override bool get_RequiresTypes() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class MemberTypeMetadata : ClrTypeMetadata // TypeDefIndex: 624
{
	// Fields
	private MemberInfo[] members; // 0x14

	// Methods

	// RVA: 0x1B5C2C Offset: 0x1B5C2C VA: 0x1B5C2C
	public void .ctor(Type type, StreamingContext context) { }

	// RVA: 0x1B5C50 Offset: 0x1B5C50 VA: 0x1B5C50 Slot: 4
	public override void WriteAssemblies(ObjectWriter ow, BinaryWriter writer) { }

	// RVA: 0x1B5E34 Offset: 0x1B5E34 VA: 0x1B5E34 Slot: 5
	public override void WriteTypeData(ObjectWriter ow, BinaryWriter writer, bool writeTypes) { }

	// RVA: 0x1B621C Offset: 0x1B621C VA: 0x1B621C Slot: 6
	public override void WriteObjectData(ObjectWriter ow, BinaryWriter writer, object data) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class ObjectWriter // TypeDefIndex: 625
{
	// Fields
	private ObjectIDGenerator _idGenerator; // 0x8
	private Hashtable _cachedMetadata; // 0xC
	private Queue _pendingObjects; // 0x10
	private Hashtable _assemblyCache; // 0x14
	private static Hashtable _cachedTypes; // 0x0
	internal static Assembly CorlibAssembly; // 0x4
	internal static string CorlibAssemblyName; // 0x8
	private ISurrogateSelector _surrogateSelector; // 0x18
	private StreamingContext _context; // 0x1C
	private FormatterAssemblyStyle _assemblyFormat; // 0x24
	private FormatterTypeStyle _typeFormat; // 0x28
	private byte[] arrayBuffer; // 0x2C
	private int ArrayBufferLength; // 0x30
	private SerializationObjectManager _manager; // 0x34

	// Methods

	// RVA: 0x3B4720 Offset: 0x3B4720 VA: 0x3B4720
	public void .ctor(ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat) { }

	// RVA: 0x3B49BC Offset: 0x3B49BC VA: 0x3B49BC
	private static void .cctor() { }

	// RVA: 0x3B4B44 Offset: 0x3B4B44 VA: 0x3B4B44
	public void WriteObjectGraph(BinaryWriter writer, object obj, Header[] headers) { }

	// RVA: 0x3B4CA0 Offset: 0x3B4CA0 VA: 0x3B4CA0
	public void QueueObject(object obj) { }

	// RVA: 0x3B4CDC Offset: 0x3B4CDC VA: 0x3B4CDC
	public void WriteQueuedObjects(BinaryWriter writer) { }

	// RVA: 0x3B4DC0 Offset: 0x3B4DC0 VA: 0x3B4DC0
	public void WriteObjectInstance(BinaryWriter writer, object obj, bool isValueObject) { }

	// RVA: 0x3B4D68 Offset: 0x3B4D68 VA: 0x3B4D68
	public static void WriteSerializationEnd(BinaryWriter writer) { }

	// RVA: 0x3B5240 Offset: 0x3B5240 VA: 0x3B5240
	private void WriteObject(BinaryWriter writer, long id, object obj) { }

	// RVA: 0x3B5668 Offset: 0x3B5668 VA: 0x3B5668
	private void GetObjectData(object obj, out TypeMetadata metadata, out object data) { }

	// RVA: 0x3B67B8 Offset: 0x3B67B8 VA: 0x3B67B8
	private TypeMetadata CreateMemberTypeMetadata(Type type) { }

	// RVA: 0x3B4FD0 Offset: 0x3B4FD0 VA: 0x3B4FD0
	private void WriteArray(BinaryWriter writer, long id, Array array) { }

	// RVA: 0x3B7EE0 Offset: 0x3B7EE0 VA: 0x3B7EE0
	private void WriteGenericArray(BinaryWriter writer, long id, Array array) { }

	// RVA: 0x3B6980 Offset: 0x3B6980 VA: 0x3B6980
	private void WriteObjectArray(BinaryWriter writer, long id, Array array) { }

	// RVA: 0x3B6AC0 Offset: 0x3B6AC0 VA: 0x3B6AC0
	private void WriteStringArray(BinaryWriter writer, long id, Array array) { }

	// RVA: 0x3B6C00 Offset: 0x3B6C00 VA: 0x3B6C00
	private void WritePrimitiveTypeArray(BinaryWriter writer, long id, Array array) { }

	// RVA: 0x3B8EA4 Offset: 0x3B8EA4 VA: 0x3B8EA4
	private void BlockWrite(BinaryWriter writer, Array array, int dataSize) { }

	// RVA: 0x3B8860 Offset: 0x3B8860 VA: 0x3B8860
	private void WriteSingleDimensionArrayElements(BinaryWriter writer, Array array, Type elementType) { }

	// RVA: 0x3B90D8 Offset: 0x3B90D8 VA: 0x3B90D8
	private void WriteNullFiller(BinaryWriter writer, int numNulls) { }

	// RVA: 0x3B91BC Offset: 0x3B91BC VA: 0x3B91BC
	private void WriteObjectReference(BinaryWriter writer, long id) { }

	// RVA: 0x3B8B88 Offset: 0x3B8B88 VA: 0x3B8B88
	public void WriteValue(BinaryWriter writer, Type valueType, object val) { }

	// RVA: 0x3B4F2C Offset: 0x3B4F2C VA: 0x3B4F2C
	private void WriteString(BinaryWriter writer, long id, string str) { }

	// RVA: 0x3B844C Offset: 0x3B844C VA: 0x3B844C
	public int WriteAssembly(BinaryWriter writer, Assembly assembly) { }

	// RVA: 0x3B601C Offset: 0x3B601C VA: 0x3B601C
	public int WriteAssemblyName(BinaryWriter writer, string assembly) { }

	// RVA: 0x3B9AA0 Offset: 0x3B9AA0 VA: 0x3B9AA0
	public int GetAssemblyId(Assembly assembly) { }

	// RVA: 0x3B9AE4 Offset: 0x3B9AE4 VA: 0x3B9AE4
	public int GetAssemblyNameId(string assembly) { }

	// RVA: 0x3B9914 Offset: 0x3B9914 VA: 0x3B9914
	private int RegisterAssembly(string assembly, out bool firstTime) { }

	// RVA: 0x3B9220 Offset: 0x3B9220 VA: 0x3B9220
	public static void WritePrimitiveValue(BinaryWriter writer, object value) { }

	// RVA: 0x3B8498 Offset: 0x3B8498 VA: 0x3B8498
	public static void WriteTypeCode(BinaryWriter writer, Type type) { }

	// RVA: 0x3B9B78 Offset: 0x3B9B78 VA: 0x3B9B78
	public static TypeTag GetTypeTag(Type type) { }

	// RVA: 0x3B8548 Offset: 0x3B8548 VA: 0x3B8548
	public void WriteTypeSpec(BinaryWriter writer, Type type) { }
}

// Namespace: 
private class ObjectWriter.MetadataReference // TypeDefIndex: 626
{
	// Fields
	public TypeMetadata Metadata; // 0x8
	public long ObjectID; // 0x10

	// Methods

	// RVA: 0x3B5FF0 Offset: 0x3B5FF0 VA: 0x3B5FF0
	public void .ctor(TypeMetadata metadata, long id) { }
}

// Namespace: System.Runtime.Serialization.Formatters
[ComVisibleAttribute] // RVA: 0x9962C Offset: 0x9962C VA: 0x9962C
[Serializable]
public enum FormatterAssemblyStyle // TypeDefIndex: 627
{
	// Fields
	public int value__; // 0x0
	public const FormatterAssemblyStyle Simple = 0;
	public const FormatterAssemblyStyle Full = 1;
}

// Namespace: System.Runtime.Serialization.Formatters
[ComVisibleAttribute] // RVA: 0x99640 Offset: 0x99640 VA: 0x99640
[Serializable]
public enum FormatterTypeStyle // TypeDefIndex: 628
{
	// Fields
	public int value__; // 0x0
	public const FormatterTypeStyle TypesWhenNeeded = 0;
	public const FormatterTypeStyle TypesAlways = 1;
	public const FormatterTypeStyle XsdString = 2;
}

// Namespace: System.Runtime.Serialization.Formatters
[ComVisibleAttribute] // RVA: 0x99654 Offset: 0x99654 VA: 0x99654
public enum TypeFilterLevel // TypeDefIndex: 629
{
	// Fields
	public int value__; // 0x0
	public const TypeFilterLevel Low = 2;
	public const TypeFilterLevel Full = 3;
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x99668 Offset: 0x99668 VA: 0x99668
public class FormatterConverter : IFormatterConverter // TypeDefIndex: 630
{
	// Methods

	// RVA: 0x1A9C68 Offset: 0x1A9C68 VA: 0x1A9C68
	public void .ctor() { }

	// RVA: 0x1A9C70 Offset: 0x1A9C70 VA: 0x1A9C70 Slot: 4
	public object Convert(object value, Type type) { }

	// RVA: 0x1A9CFC Offset: 0x1A9CFC VA: 0x1A9CFC Slot: 5
	public bool ToBoolean(object value) { }

	// RVA: 0x1A9DE0 Offset: 0x1A9DE0 VA: 0x1A9DE0 Slot: 6
	public short ToInt16(object value) { }

	// RVA: 0x1A9EC4 Offset: 0x1A9EC4 VA: 0x1A9EC4 Slot: 7
	public int ToInt32(object value) { }

	// RVA: 0x1A9FA8 Offset: 0x1A9FA8 VA: 0x1A9FA8 Slot: 8
	public long ToInt64(object value) { }

	// RVA: 0x1AA08C Offset: 0x1AA08C VA: 0x1AA08C Slot: 9
	public string ToString(object value) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x9967C Offset: 0x9967C VA: 0x9967C
public sealed class FormatterServices // TypeDefIndex: 631
{
	// Methods

	// RVA: 0x1AA170 Offset: 0x1AA170 VA: 0x1AA170
	public static object[] GetObjectData(object obj, MemberInfo[] members) { }

	// RVA: 0x1AA518 Offset: 0x1AA518 VA: 0x1AA518
	public static MemberInfo[] GetSerializableMembers(Type type, StreamingContext context) { }

	// RVA: 0x1AA764 Offset: 0x1AA764 VA: 0x1AA764
	private static void GetFields(Type reflectedType, Type type, ArrayList fields) { }

	// RVA: 0x1AA9A4 Offset: 0x1AA9A4 VA: 0x1AA9A4
	public static object GetUninitializedObject(Type type) { }

	// RVA: 0x1AAAF0 Offset: 0x1AAAF0 VA: 0x1AAAF0
	public static object GetSafeUninitializedObject(Type type) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x99690 Offset: 0x99690 VA: 0x99690
public interface IDeserializationCallback // TypeDefIndex: 632
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnDeserialization(object sender);
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x996A4 Offset: 0x996A4 VA: 0x996A4
public interface IFormatter // TypeDefIndex: 633
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object Deserialize(Stream serializationStream);
}

// Namespace: System.Runtime.Serialization
[CLSCompliantAttribute] // RVA: 0x996B8 Offset: 0x996B8 VA: 0x996B8
[ComVisibleAttribute] // RVA: 0x996B8 Offset: 0x996B8 VA: 0x996B8
public interface IFormatterConverter // TypeDefIndex: 634
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object Convert(object value, Type type);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool ToBoolean(object value);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract short ToInt16(object value);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract int ToInt32(object value);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract long ToInt64(object value);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract string ToString(object value);
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x996F0 Offset: 0x996F0 VA: 0x996F0
public interface IObjectReference // TypeDefIndex: 635
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object GetRealObject(StreamingContext context);
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x99704 Offset: 0x99704 VA: 0x99704
public interface ISerializationSurrogate // TypeDefIndex: 636
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void GetObjectData(object obj, SerializationInfo info, StreamingContext context);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x99718 Offset: 0x99718 VA: 0x99718
public interface ISurrogateSelector // TypeDefIndex: 637
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector);
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x9972C Offset: 0x9972C VA: 0x9972C
[MonoTODOAttribute] // RVA: 0x9972C Offset: 0x9972C VA: 0x9972C
[Serializable]
public class ObjectIDGenerator // TypeDefIndex: 638
{
	// Fields
	private Hashtable table; // 0x8
	private long current; // 0x10
	private static ObjectIDGenerator.InstanceComparer comparer; // 0x0

	// Properties
	internal long NextId { get; }

	// Methods

	// RVA: 0x3B4858 Offset: 0x3B4858 VA: 0x3B4858
	public void .ctor() { }

	// RVA: 0x3BAAB0 Offset: 0x3BAAB0 VA: 0x3BAAB0
	private static void .cctor() { }

	// RVA: 0x3BAB38 Offset: 0x3BAB38 VA: 0x3BAB38 Slot: 4
	public virtual long GetId(object obj, out bool firstTime) { }

	// RVA: 0x3B4F08 Offset: 0x3B4F08 VA: 0x3B4F08
	internal long get_NextId() { }
}

// Namespace: 
private class ObjectIDGenerator.InstanceComparer : IComparer, IHashCodeProvider // TypeDefIndex: 639
{
	// Methods

	// RVA: 0x3BAB30 Offset: 0x3BAB30 VA: 0x3BAB30
	public void .ctor() { }

	// RVA: 0x3BACBC Offset: 0x3BACBC VA: 0x3BACBC Slot: 4
	private int System.Collections.IComparer.Compare(object o1, object o2) { }

	// RVA: 0x3BAD58 Offset: 0x3BAD58 VA: 0x3BAD58 Slot: 5
	private int System.Collections.IHashCodeProvider.GetHashCode(object o) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x997A0 Offset: 0x997A0 VA: 0x997A0
public class ObjectManager // TypeDefIndex: 640
{
	// Fields
	private ObjectRecord _objectRecordChain; // 0x8
	private ObjectRecord _lastObjectRecord; // 0xC
	private ArrayList _deserializedRecords; // 0x10
	private ArrayList _onDeserializedCallbackRecords; // 0x14
	private Hashtable _objectRecords; // 0x18
	private bool _finalFixup; // 0x1C
	private ISurrogateSelector _selector; // 0x20
	private StreamingContext _context; // 0x24
	private int _registeredObjectsCount; // 0x2C

	// Methods

	// RVA: 0x3AF4A0 Offset: 0x3AF4A0 VA: 0x3AF4A0
	public void .ctor(ISurrogateSelector selector, StreamingContext context) { }

	// RVA: 0x3BAD64 Offset: 0x3BAD64 VA: 0x3BAD64 Slot: 4
	public virtual void DoFixups() { }

	// RVA: 0x3BC2C4 Offset: 0x3BC2C4 VA: 0x3BC2C4
	internal ObjectRecord GetObjectRecord(long objectID) { }

	// RVA: 0x3BC63C Offset: 0x3BC63C VA: 0x3BC63C Slot: 5
	public virtual object GetObject(long objectID) { }

	// RVA: 0x3BC7FC Offset: 0x3BC7FC VA: 0x3BC7FC Slot: 6
	public virtual void RaiseDeserializationEvent() { }

	// RVA: 0x3B2464 Offset: 0x3B2464 VA: 0x3B2464
	public void RaiseOnDeserializingEvent(object obj) { }

	// RVA: 0x3BCAF8 Offset: 0x3BCAF8 VA: 0x3BCAF8
	private void RaiseOnDeserializedEvent(object obj) { }

	// RVA: 0x3BCD1C Offset: 0x3BCD1C VA: 0x3BCD1C
	private void AddFixup(BaseFixupRecord record) { }

	// RVA: 0x3BCDD4 Offset: 0x3BCDD4 VA: 0x3BCDD4 Slot: 7
	public virtual void RecordArrayElementFixup(long arrayToBeFixed, int index, long objectRequired) { }

	// RVA: 0x3BCF74 Offset: 0x3BCF74 VA: 0x3BCF74 Slot: 8
	public virtual void RecordArrayElementFixup(long arrayToBeFixed, int[] indices, long objectRequired) { }

	// RVA: 0x3BD158 Offset: 0x3BD158 VA: 0x3BD158 Slot: 9
	public virtual void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired) { }

	// RVA: 0x3BD344 Offset: 0x3BD344 VA: 0x3BD344 Slot: 10
	public virtual void RecordFixup(long objectToBeFixed, MemberInfo member, long objectRequired) { }

	// RVA: 0x3BD530 Offset: 0x3BD530 VA: 0x3BD530
	private void RegisterObjectInternal(object obj, ObjectRecord record) { }

	// RVA: 0x3B2A00 Offset: 0x3B2A00 VA: 0x3B2A00
	public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member, int[] arrayIndex) { }
}

// Namespace: System.Runtime.Serialization
internal abstract class BaseFixupRecord // TypeDefIndex: 641
{
	// Fields
	protected internal ObjectRecord ObjectToBeFixed; // 0x8
	protected internal ObjectRecord ObjectRequired; // 0xC
	public BaseFixupRecord NextSameContainer; // 0x10
	public BaseFixupRecord NextSameRequired; // 0x14

	// Methods

	// RVA: 0x1A9700 Offset: 0x1A9700 VA: 0x1A9700
	public void .ctor(ObjectRecord objectToBeFixed, ObjectRecord objectRequired) { }

	// RVA: 0x1A986C Offset: 0x1A986C VA: 0x1A986C
	public bool DoFixup(ObjectManager manager, bool strict) { }

	// RVA: -1 Offset: -1 Slot: 4
	protected abstract void FixupImpl(ObjectManager manager);
}

// Namespace: System.Runtime.Serialization
internal class ArrayFixupRecord : BaseFixupRecord // TypeDefIndex: 642
{
	// Fields
	private int _index; // 0x18

	// Methods

	// RVA: 0x1A96D0 Offset: 0x1A96D0 VA: 0x1A96D0
	public void .ctor(ObjectRecord objectToBeFixed, int index, ObjectRecord objectRequired) { }

	// RVA: 0x1A9728 Offset: 0x1A9728 VA: 0x1A9728 Slot: 4
	protected override void FixupImpl(ObjectManager manager) { }
}

// Namespace: System.Runtime.Serialization
internal class MultiArrayFixupRecord : BaseFixupRecord // TypeDefIndex: 643
{
	// Fields
	private int[] _indices; // 0x18

	// Methods

	// RVA: 0x3BA89C Offset: 0x3BA89C VA: 0x3BA89C
	public void .ctor(ObjectRecord objectToBeFixed, int[] indices, ObjectRecord objectRequired) { }

	// RVA: 0x3BA8C0 Offset: 0x3BA8C0 VA: 0x3BA8C0 Slot: 4
	protected override void FixupImpl(ObjectManager manager) { }
}

// Namespace: System.Runtime.Serialization
internal class FixupRecord : BaseFixupRecord // TypeDefIndex: 644
{
	// Fields
	public MemberInfo _member; // 0x18

	// Methods

	// RVA: 0x1A9BD4 Offset: 0x1A9BD4 VA: 0x1A9BD4
	public void .ctor(ObjectRecord objectToBeFixed, MemberInfo member, ObjectRecord objectRequired) { }

	// RVA: 0x1A9C04 Offset: 0x1A9C04 VA: 0x1A9C04 Slot: 4
	protected override void FixupImpl(ObjectManager manager) { }
}

// Namespace: System.Runtime.Serialization
internal class DelayedFixupRecord : BaseFixupRecord // TypeDefIndex: 645
{
	// Fields
	public string _memberName; // 0x18

	// Methods

	// RVA: 0x1A9B40 Offset: 0x1A9B40 VA: 0x1A9B40
	public void .ctor(ObjectRecord objectToBeFixed, string memberName, ObjectRecord objectRequired) { }

	// RVA: 0x1A9B70 Offset: 0x1A9B70 VA: 0x1A9B70 Slot: 4
	protected override void FixupImpl(ObjectManager manager) { }
}

// Namespace: System.Runtime.Serialization
internal enum ObjectRecordStatus // TypeDefIndex: 646
{
	// Fields
	public byte value__; // 0x0
	public const ObjectRecordStatus Unregistered = 0;
	public const ObjectRecordStatus ReferenceUnsolved = 1;
	public const ObjectRecordStatus ReferenceSolvingDelayed = 2;
	public const ObjectRecordStatus ReferenceSolved = 3;
}

// Namespace: System.Runtime.Serialization
internal class ObjectRecord // TypeDefIndex: 647
{
	// Fields
	public ObjectRecordStatus Status; // 0x8
	public object OriginalObject; // 0xC
	public object ObjectInstance; // 0x10
	public long ObjectID; // 0x18
	public SerializationInfo Info; // 0x20
	public long IdOfContainingObj; // 0x28
	public ISerializationSurrogate Surrogate; // 0x30
	public ISurrogateSelector SurrogateSelector; // 0x34
	public MemberInfo Member; // 0x38
	public int[] ArrayIndex; // 0x3C
	public BaseFixupRecord FixupChainAsContainer; // 0x40
	public BaseFixupRecord FixupChainAsRequired; // 0x44
	public ObjectRecord Next; // 0x48

	// Properties
	public bool IsInstanceReady { get; }
	public bool IsUnsolvedObjectReference { get; }
	public bool IsRegistered { get; }
	public bool HasPendingFixups { get; }

	// Methods

	// RVA: 0x3BC624 Offset: 0x3BC624 VA: 0x3BC624
	public void .ctor() { }

	// RVA: 0x3BD8FC Offset: 0x3BD8FC VA: 0x3BD8FC
	public void SetMemberValue(ObjectManager manager, MemberInfo member, object value) { }

	// RVA: 0x3BA918 Offset: 0x3BA918 VA: 0x3BA918
	public void SetArrayValue(ObjectManager manager, object value, int[] indices) { }

	// RVA: 0x3BDB24 Offset: 0x3BDB24 VA: 0x3BDB24
	public void SetMemberValue(ObjectManager manager, string memberName, object value) { }

	// RVA: 0x3BDC14 Offset: 0x3BDC14 VA: 0x3BDC14
	public bool get_IsInstanceReady() { }

	// RVA: 0x3BB1F0 Offset: 0x3BB1F0 VA: 0x3BB1F0
	public bool get_IsUnsolvedObjectReference() { }

	// RVA: 0x3BC62C Offset: 0x3BC62C VA: 0x3BC62C
	public bool get_IsRegistered() { }

	// RVA: 0x3BB204 Offset: 0x3BB204 VA: 0x3BB204
	public bool DoFixups(bool asContainer, ObjectManager manager, bool strict) { }

	// RVA: 0x3BDD14 Offset: 0x3BDD14 VA: 0x3BDD14
	public void RemoveFixup(BaseFixupRecord fixupToRemove, bool asContainer) { }

	// RVA: 0x3BDCAC Offset: 0x3BDCAC VA: 0x3BDCAC
	private void UnchainFixup(BaseFixupRecord fixup, BaseFixupRecord prevFixup, bool asContainer) { }

	// RVA: 0x3BCD7C Offset: 0x3BCD7C VA: 0x3BCD7C
	public void ChainFixup(BaseFixupRecord fixup, bool asContainer) { }

	// RVA: 0x3BB2FC Offset: 0x3BB2FC VA: 0x3BB2FC
	public bool LoadData(ObjectManager manager, ISurrogateSelector selector, StreamingContext context) { }

	// RVA: 0x3BDC9C Offset: 0x3BDC9C VA: 0x3BDC9C
	public bool get_HasPendingFixups() { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x997B4 Offset: 0x997B4 VA: 0x997B4
[AttributeUsageAttribute] // RVA: 0x997B4 Offset: 0x997B4 VA: 0x997B4
public sealed class OnDeserializedAttribute : Attribute // TypeDefIndex: 648
{}

// Namespace: System.Runtime.Serialization
[AttributeUsageAttribute] // RVA: 0x99800 Offset: 0x99800 VA: 0x99800
[ComVisibleAttribute] // RVA: 0x99800 Offset: 0x99800 VA: 0x99800
public sealed class OnDeserializingAttribute : Attribute // TypeDefIndex: 649
{}

// Namespace: System.Runtime.Serialization
[AttributeUsageAttribute] // RVA: 0x9984C Offset: 0x9984C VA: 0x9984C
[ComVisibleAttribute] // RVA: 0x9984C Offset: 0x9984C VA: 0x9984C
public sealed class OnSerializedAttribute : Attribute // TypeDefIndex: 650
{}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x99898 Offset: 0x99898 VA: 0x99898
[AttributeUsageAttribute] // RVA: 0x99898 Offset: 0x99898 VA: 0x99898
public sealed class OnSerializingAttribute : Attribute // TypeDefIndex: 651
{}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x998E4 Offset: 0x998E4 VA: 0x998E4
[Serializable]
public abstract class SerializationBinder // TypeDefIndex: 652
{
	// Methods

	// RVA: 0x3BDD7C Offset: 0x3BDD7C VA: 0x3BDD7C
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract Type BindToType(string assemblyName, string typeName);
}

// Namespace: System.Runtime.Serialization
internal sealed class SerializationCallbacks // TypeDefIndex: 653
{
	// Fields
	private readonly ArrayList onSerializingList; // 0x8
	private readonly ArrayList onSerializedList; // 0xC
	private readonly ArrayList onDeserializingList; // 0x10
	private readonly ArrayList onDeserializedList; // 0x14
	private static Hashtable cache; // 0x0
	private static object cache_lock; // 0x4

	// Properties
	public bool HasSerializedCallbacks { get; }
	public bool HasDeserializedCallbacks { get; }

	// Methods

	// RVA: 0x3BDD84 Offset: 0x3BDD84 VA: 0x3BDD84
	public void .ctor(Type type) { }

	// RVA: 0x3BE1EC Offset: 0x3BE1EC VA: 0x3BE1EC
	private static void .cctor() { }

	// RVA: 0x3BE298 Offset: 0x3BE298 VA: 0x3BE298
	public bool get_HasSerializedCallbacks() { }

	// RVA: 0x3BC2B4 Offset: 0x3BC2B4 VA: 0x3BC2B4
	public bool get_HasDeserializedCallbacks() { }

	// RVA: 0x3BDEE0 Offset: 0x3BDEE0 VA: 0x3BDEE0
	private static ArrayList GetMethodsByAttribute(Type type, Type attr) { }

	// RVA: 0x3BE2A8 Offset: 0x3BE2A8 VA: 0x3BE2A8
	private static void Invoke(ArrayList list, object target, StreamingContext context) { }

	// RVA: 0x3BE990 Offset: 0x3BE990 VA: 0x3BE990
	public void RaiseOnSerializing(object target, StreamingContext contex) { }

	// RVA: 0x3BEA34 Offset: 0x3BEA34 VA: 0x3BEA34
	public void RaiseOnSerialized(object target, StreamingContext contex) { }

	// RVA: 0x3BCBD4 Offset: 0x3BCBD4 VA: 0x3BCBD4
	public void RaiseOnDeserializing(object target, StreamingContext contex) { }

	// RVA: 0x3BCC78 Offset: 0x3BCC78 VA: 0x3BCC78
	public void RaiseOnDeserialized(object target, StreamingContext contex) { }

	// RVA: 0x3BBE70 Offset: 0x3BBE70 VA: 0x3BBE70
	public static SerializationCallbacks GetSerializationCallbacks(Type t) { }
}

// Namespace: 
public sealed class SerializationCallbacks.CallbackHandler : MulticastDelegate // TypeDefIndex: 654
{
	// Methods

	// RVA: 0x3BEAD8 Offset: 0x3BEAD8 VA: 0x3BEAD8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x3BE748 Offset: 0x3BE748 VA: 0x3BE748 Slot: 11
	public virtual void Invoke(StreamingContext context) { }

	// RVA: 0x3BEAEC Offset: 0x3BEAEC VA: 0x3BEAEC Slot: 12
	public virtual IAsyncResult BeginInvoke(StreamingContext context, AsyncCallback callback, object object) { }

	// RVA: 0x3BEB8C Offset: 0x3BEB8C VA: 0x3BEB8C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x998F8 Offset: 0x998F8 VA: 0x998F8
public struct SerializationEntry // TypeDefIndex: 655
{
	// Fields
	private string name; // 0x0
	private Type objectType; // 0x4
	private object value; // 0x8

	// Properties
	public string Name { get; }
	public Type ObjectType { get; }
	public object Value { get; }

	// Methods

	// RVA: 0xC99E0 Offset: 0xC99E0 VA: 0xC99E0
	internal void .ctor(string name, Type type, object value) { }

	// RVA: 0xC99EC Offset: 0xC99EC VA: 0xC99EC
	public string get_Name() { }

	// RVA: 0xC99F4 Offset: 0xC99F4 VA: 0xC99F4
	public Type get_ObjectType() { }

	// RVA: 0xC99FC Offset: 0xC99FC VA: 0xC99FC
	public object get_Value() { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x9990C Offset: 0x9990C VA: 0x9990C
[Serializable]
public class SerializationException : SystemException // TypeDefIndex: 656
{
	// Methods

	// RVA: 0x3BEBB8 Offset: 0x3BEBB8 VA: 0x3BEBB8
	public void .ctor() { }

	// RVA: 0x3B15F4 Offset: 0x3B15F4 VA: 0x3B15F4
	public void .ctor(string message) { }

	// RVA: 0x3BEC20 Offset: 0x3BEC20 VA: 0x3BEC20
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x99920 Offset: 0x99920 VA: 0x99920
public sealed class SerializationInfo // TypeDefIndex: 657
{
	// Fields
	private Hashtable serialized; // 0x8
	private ArrayList values; // 0xC
	private string assemblyName; // 0x10
	private string fullTypeName; // 0x14
	private IFormatterConverter converter; // 0x18

	// Properties
	public string AssemblyName { get; }
	public string FullTypeName { get; }
	public int MemberCount { get; }

	// Methods

	[CLSCompliantAttribute] // RVA: 0x9CC84 Offset: 0x9CC84 VA: 0x9CC84
	// RVA: 0x3B2540 Offset: 0x3B2540 VA: 0x3B2540
	public void .ctor(Type type, IFormatterConverter converter) { }

	// RVA: 0x3BA130 Offset: 0x3BA130 VA: 0x3BA130
	public string get_AssemblyName() { }

	// RVA: 0x3BA138 Offset: 0x3BA138 VA: 0x3BA138
	public string get_FullTypeName() { }

	// RVA: 0x3B9F68 Offset: 0x3B9F68 VA: 0x3B9F68
	public int get_MemberCount() { }

	// RVA: 0x3B44EC Offset: 0x3B44EC VA: 0x3B44EC
	public void AddValue(string name, object value, Type type) { }

	// RVA: 0x3BEC40 Offset: 0x3BEC40 VA: 0x3BEC40
	public object GetValue(string name, Type type) { }

	// RVA: 0x3BEF18 Offset: 0x3BEF18 VA: 0x3BEF18
	public void SetType(Type type) { }

	// RVA: 0x3B9F9C Offset: 0x3B9F9C VA: 0x3B9F9C
	public SerializationInfoEnumerator GetEnumerator() { }

	// RVA: 0x3BF064 Offset: 0x3BF064 VA: 0x3BF064
	public void AddValue(string name, short value) { }

	// RVA: 0x3BF13C Offset: 0x3BF13C VA: 0x3BF13C
	public void AddValue(string name, int value) { }

	// RVA: 0x3BF214 Offset: 0x3BF214 VA: 0x3BF214
	public void AddValue(string name, bool value) { }

	// RVA: 0x3BF2EC Offset: 0x3BF2EC VA: 0x3BF2EC
	public void AddValue(string name, DateTime value) { }

	// RVA: 0x3BF3DC Offset: 0x3BF3DC VA: 0x3BF3DC
	public void AddValue(string name, float value) { }

	// RVA: 0x3BF4BC Offset: 0x3BF4BC VA: 0x3BF4BC
	public void AddValue(string name, long value) { }

	[CLSCompliantAttribute] // RVA: 0x9CC98 Offset: 0x9CC98 VA: 0x9CC98
	// RVA: 0x3BF59C Offset: 0x3BF59C VA: 0x3BF59C
	public void AddValue(string name, ulong value) { }

	// RVA: 0x3BF67C Offset: 0x3BF67C VA: 0x3BF67C
	public void AddValue(string name, object value) { }

	// RVA: 0x3BF75C Offset: 0x3BF75C VA: 0x3BF75C
	public bool GetBoolean(string name) { }

	// RVA: 0x3BF898 Offset: 0x3BF898 VA: 0x3BF898
	public short GetInt16(string name) { }

	// RVA: 0x3BF9D4 Offset: 0x3BF9D4 VA: 0x3BF9D4
	public int GetInt32(string name) { }

	// RVA: 0x3BFB10 Offset: 0x3BFB10 VA: 0x3BFB10
	public long GetInt64(string name) { }

	// RVA: 0x3BFC4C Offset: 0x3BFC4C VA: 0x3BFC4C
	public string GetString(string name) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x99934 Offset: 0x99934 VA: 0x99934
public sealed class SerializationInfoEnumerator : IEnumerator // TypeDefIndex: 658
{
	// Fields
	private IEnumerator enumerator; // 0x8

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public SerializationEntry Current { get; }
	public string Name { get; }
	public Type ObjectType { get; }
	public object Value { get; }

	// Methods

	// RVA: 0x3BF020 Offset: 0x3BF020 VA: 0x3BF020
	internal void .ctor(ArrayList list) { }

	// RVA: 0x3BFD98 Offset: 0x3BFD98 VA: 0x3BFD98 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x3BFE70 Offset: 0x3BFE70 VA: 0x3BFE70
	public SerializationEntry get_Current() { }

	// RVA: 0x3BA034 Offset: 0x3BA034 VA: 0x3BA034
	public string get_Name() { }

	// RVA: 0x3BA010 Offset: 0x3BA010 VA: 0x3BA010
	public Type get_ObjectType() { }

	// RVA: 0x3BA868 Offset: 0x3BA868 VA: 0x3BA868
	public object get_Value() { }

	// RVA: 0x3BA058 Offset: 0x3BA058 VA: 0x3BA058 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x3BFF70 Offset: 0x3BFF70 VA: 0x3BFF70 Slot: 6
	public void Reset() { }
}

// Namespace: System.Runtime.Serialization
public sealed class SerializationObjectManager // TypeDefIndex: 659
{
	// Fields
	private readonly StreamingContext context; // 0x8
	private readonly Hashtable seen; // 0x10
	private SerializationCallbacks.CallbackHandler callbacks; // 0x14

	// Methods

	// RVA: 0x3B4930 Offset: 0x3B4930 VA: 0x3B4930
	public void .ctor(StreamingContext context) { }

	// RVA: 0x3B6484 Offset: 0x3B6484 VA: 0x3B6484
	public void RegisterObject(object obj) { }

	// RVA: 0x3B4DA0 Offset: 0x3B4DA0 VA: 0x3B4DA0
	public void RaiseOnSerializedEvent() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x99948 Offset: 0x99948 VA: 0x99948
private sealed class SerializationObjectManager.<RegisterObject>c__AnonStorey3 // TypeDefIndex: 660
{
	// Fields
	internal SerializationCallbacks sc; // 0x8
	internal object obj; // 0xC

	// Methods

	// RVA: 0x3C0048 Offset: 0x3C0048 VA: 0x3C0048
	public void .ctor() { }

	// RVA: 0x3C0050 Offset: 0x3C0050 VA: 0x3C0050
	internal void <>m__2(StreamingContext ctx) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x99958 Offset: 0x99958 VA: 0x99958
[Serializable]
public struct StreamingContext // TypeDefIndex: 661
{
	// Fields
	private StreamingContextStates state; // 0x0
	private object additional; // 0x4

	// Properties
	public object Context { get; }
	public StreamingContextStates State { get; }

	// Methods

	// RVA: 0xC9ACC Offset: 0xC9ACC VA: 0xC9ACC
	public void .ctor(StreamingContextStates state) { }

	// RVA: 0xC9ADC Offset: 0xC9ADC VA: 0xC9ADC
	public void .ctor(StreamingContextStates state, object additional) { }

	// RVA: 0xC9AE8 Offset: 0xC9AE8 VA: 0xC9AE8
	public object get_Context() { }

	// RVA: 0xC9AF0 Offset: 0xC9AF0 VA: 0xC9AF0
	public StreamingContextStates get_State() { }

	// RVA: 0xC9AF8 Offset: 0xC9AF8 VA: 0xC9AF8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xC9B00 Offset: 0xC9B00 VA: 0xC9B00 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Runtime.Serialization
[FlagsAttribute] // RVA: 0x9996C Offset: 0x9996C VA: 0x9996C
[ComVisibleAttribute] // RVA: 0x9996C Offset: 0x9996C VA: 0x9996C
[Serializable]
public enum StreamingContextStates // TypeDefIndex: 662
{
	// Fields
	public int value__; // 0x0
	public const StreamingContextStates CrossProcess = 1;
	public const StreamingContextStates CrossMachine = 2;
	public const StreamingContextStates File = 4;
	public const StreamingContextStates Persistence = 8;
	public const StreamingContextStates Remoting = 16;
	public const StreamingContextStates Other = 32;
	public const StreamingContextStates Clone = 64;
	public const StreamingContextStates CrossAppDomain = 128;
	public const StreamingContextStates All = 255;
}

// Namespace: System.Security.Cryptography.X509Certificates
[MonoTODOAttribute] // RVA: 0x999A0 Offset: 0x999A0 VA: 0x999A0
[ComVisibleAttribute] // RVA: 0x999A0 Offset: 0x999A0 VA: 0x999A0
[Serializable]
public class X509Certificate : ISerializable, IDeserializationCallback // TypeDefIndex: 663
{
	// Fields
	private X509Certificate x509; // 0x8
	private bool hideDates; // 0xC
	private byte[] cachedCertificateHash; // 0x10
	private string issuer_name; // 0x14
	private string subject_name; // 0x18

	// Properties
	public string Issuer { get; }
	public string Subject { get; }

	// Methods

	// RVA: 0x43E8CC Offset: 0x43E8CC VA: 0x43E8CC
	internal void .ctor(byte[] data, bool dates) { }

	// RVA: 0x43E928 Offset: 0x43E928 VA: 0x43E928
	public void .ctor(byte[] data) { }

	// RVA: 0x43E930 Offset: 0x43E930 VA: 0x43E930
	public void .ctor() { }

	// RVA: 0x43E938 Offset: 0x43E938 VA: 0x43E938
	public void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x43EACC Offset: 0x43EACC VA: 0x43EACC Slot: 5
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x43EAD0 Offset: 0x43EAD0 VA: 0x43EAD0 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x43EB7C Offset: 0x43EB7C VA: 0x43EB7C
	private string tostr(byte[] data) { }

	// RVA: 0x43EC90 Offset: 0x43EC90 VA: 0x43EC90 Slot: 6
	public virtual bool Equals(X509Certificate other) { }

	// RVA: 0x43EEE8 Offset: 0x43EEE8 VA: 0x43EEE8 Slot: 7
	public virtual byte[] GetCertHash() { }

	// RVA: 0x43F008 Offset: 0x43F008 VA: 0x43F008 Slot: 8
	public virtual string GetCertHashString() { }

	// RVA: 0x43F02C Offset: 0x43F02C VA: 0x43F02C Slot: 9
	public virtual string GetEffectiveDateString() { }

	// RVA: 0x43F15C Offset: 0x43F15C VA: 0x43F15C Slot: 10
	public virtual string GetExpirationDateString() { }

	// RVA: 0x43F28C Offset: 0x43F28C VA: 0x43F28C Slot: 2
	public override int GetHashCode() { }

	[ObsoleteAttribute] // RVA: 0x9CCAC Offset: 0x9CCAC VA: 0x9CCAC
	// RVA: 0x43F384 Offset: 0x43F384 VA: 0x43F384 Slot: 11
	public virtual string GetIssuerName() { }

	[ObsoleteAttribute] // RVA: 0x9CCF4 Offset: 0x9CCF4 VA: 0x9CCF4
	// RVA: 0x43F450 Offset: 0x43F450 VA: 0x43F450 Slot: 12
	public virtual string GetName() { }

	// RVA: 0x43F51C Offset: 0x43F51C VA: 0x43F51C Slot: 13
	public virtual byte[] GetPublicKey() { }

	// RVA: 0x43F5E8 Offset: 0x43F5E8 VA: 0x43F5E8 Slot: 14
	public virtual byte[] GetRawCertData() { }

	// RVA: 0x43F6B4 Offset: 0x43F6B4 VA: 0x43F6B4 Slot: 3
	public override string ToString() { }

	// RVA: 0x43F6BC Offset: 0x43F6BC VA: 0x43F6BC Slot: 15
	public virtual string ToString(bool fVerbose) { }

	// RVA: 0x43FA78 Offset: 0x43FA78 VA: 0x43FA78
	public string get_Issuer() { }

	// RVA: 0x43F93C Offset: 0x43F93C VA: 0x43F93C
	public string get_Subject() { }

	[ComVisibleAttribute] // RVA: 0x9CD3C Offset: 0x9CD3C VA: 0x9CD3C
	// RVA: 0x43FBB4 Offset: 0x43FBB4 VA: 0x43FBB4 Slot: 0
	public override bool Equals(object obj) { }

	[MonoTODOAttribute] // RVA: 0x9CD50 Offset: 0x9CD50 VA: 0x9CD50
	[ComVisibleAttribute] // RVA: 0x9CD50 Offset: 0x9CD50 VA: 0x9CD50
	// RVA: 0x43FC64 Offset: 0x43FC64 VA: 0x43FC64 Slot: 16
	public virtual void Import(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags) { }

	[ComVisibleAttribute] // RVA: 0x9CD9C Offset: 0x9CD9C VA: 0x9CD9C
	// RVA: 0x4400A8 Offset: 0x4400A8 VA: 0x4400A8 Slot: 17
	public virtual void Reset() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[FlagsAttribute] // RVA: 0x999EC Offset: 0x999EC VA: 0x999EC
[ComVisibleAttribute] // RVA: 0x999EC Offset: 0x999EC VA: 0x999EC
[Serializable]
public enum X509KeyStorageFlags // TypeDefIndex: 664
{
	// Fields
	public int value__; // 0x0
	public const X509KeyStorageFlags DefaultKeySet = 0;
	public const X509KeyStorageFlags UserKeySet = 1;
	public const X509KeyStorageFlags MachineKeySet = 2;
	public const X509KeyStorageFlags Exportable = 4;
	public const X509KeyStorageFlags UserProtected = 8;
	public const X509KeyStorageFlags PersistKeySet = 16;
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99A20 Offset: 0x99A20 VA: 0x99A20
public abstract class AsymmetricAlgorithm : IDisposable // TypeDefIndex: 665
{
	// Fields
	protected int KeySizeValue; // 0x8
	protected KeySizes[] LegalKeySizesValue; // 0xC

	// Properties
	public virtual int KeySize { get; set; }

	// Methods

	// RVA: 0x3C26C0 Offset: 0x3C26C0 VA: 0x3C26C0
	protected void .ctor() { }

	// RVA: 0x3C26C8 Offset: 0x3C26C8 VA: 0x3C26C8 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x3C26FC Offset: 0x3C26FC VA: 0x3C26FC Slot: 5
	public virtual int get_KeySize() { }

	// RVA: 0x3C2704 Offset: 0x3C2704 VA: 0x3C2704 Slot: 6
	public virtual void set_KeySize(int value) { }

	// RVA: 0x3C28AC Offset: 0x3C28AC VA: 0x3C28AC
	public void Clear() { }

	// RVA: -1 Offset: -1 Slot: 7
	protected abstract void Dispose(bool disposing);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract void FromXmlString(string xmlString);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract string ToXmlString(bool includePrivateParameters);

	// RVA: 0x3C28C0 Offset: 0x3C28C0 VA: 0x3C28C0
	internal static byte[] GetNamedParam(string xml, string param) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99A34 Offset: 0x99A34 VA: 0x99A34
public abstract class AsymmetricKeyExchangeFormatter // TypeDefIndex: 666
{
	// Methods

	// RVA: 0x3C2AB0 Offset: 0x3C2AB0 VA: 0x3C2AB0
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract byte[] CreateKeyExchange(byte[] data);
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99A48 Offset: 0x99A48 VA: 0x99A48
public abstract class AsymmetricSignatureDeformatter // TypeDefIndex: 667
{
	// Methods

	// RVA: 0x3C2AB8 Offset: 0x3C2AB8 VA: 0x3C2AB8
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void SetHashAlgorithm(string strName);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void SetKey(AsymmetricAlgorithm key);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99A5C Offset: 0x99A5C VA: 0x99A5C
public abstract class AsymmetricSignatureFormatter // TypeDefIndex: 668
{
	// Methods

	// RVA: 0x3C2AC0 Offset: 0x3C2AC0 VA: 0x3C2AC0
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void SetHashAlgorithm(string strName);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void SetKey(AsymmetricAlgorithm key);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract byte[] CreateSignature(byte[] rgbHash);
}

// Namespace: System.Security.Cryptography
internal static class Base64Constants // TypeDefIndex: 669
{
	// Fields
	public static readonly byte[] EncodeTable; // 0x0
	public static readonly byte[] DecodeTable; // 0x4

	// Methods

	// RVA: 0x3C2AC8 Offset: 0x3C2AC8 VA: 0x3C2AC8
	private static void .cctor() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99A70 Offset: 0x99A70 VA: 0x99A70
[Serializable]
public enum CipherMode // TypeDefIndex: 670
{
	// Fields
	public int value__; // 0x0
	public const CipherMode CBC = 1;
	public const CipherMode ECB = 2;
	public const CipherMode OFB = 3;
	public const CipherMode CFB = 4;
	public const CipherMode CTS = 5;
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99A84 Offset: 0x99A84 VA: 0x99A84
public class CryptoConfig // TypeDefIndex: 671
{
	// Fields
	private static object lockObject; // 0x0
	private static Hashtable algorithms; // 0x4
	private static Hashtable oid; // 0x8

	// Methods

	// RVA: 0x3C2B98 Offset: 0x3C2B98 VA: 0x3C2B98
	private static void .cctor() { }

	// RVA: 0x3C2C18 Offset: 0x3C2C18 VA: 0x3C2C18
	private static void Initialize() { }

	// RVA: 0x3C5064 Offset: 0x3C5064 VA: 0x3C5064
	public static object CreateFromName(string name) { }

	// RVA: 0x3C50E8 Offset: 0x3C50E8 VA: 0x3C50E8
	public static object CreateFromName(string name, object[] args) { }

	// RVA: 0x3C549C Offset: 0x3C549C VA: 0x3C549C
	public static string MapNameToOID(string name) { }

	// RVA: 0x3C574C Offset: 0x3C574C VA: 0x3C574C
	public static byte[] EncodeOID(string str) { }

	// RVA: 0x3C5DBC Offset: 0x3C5DBC VA: 0x3C5DBC
	private static byte[] EncodeLongNumber(long x) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99A98 Offset: 0x99A98 VA: 0x99A98
[Serializable]
public class CryptographicException : SystemException, _Exception // TypeDefIndex: 672
{
	// Methods

	// RVA: 0x3C5FE4 Offset: 0x3C5FE4 VA: 0x3C5FE4
	public void .ctor() { }

	// RVA: 0x3C2880 Offset: 0x3C2880 VA: 0x3C2880
	public void .ctor(string message) { }

	// RVA: 0x3C606C Offset: 0x3C606C VA: 0x3C606C
	public void .ctor(string message, Exception inner) { }

	// RVA: 0x3C6098 Offset: 0x3C6098 VA: 0x3C6098
	public void .ctor(string format, string insert) { }

	// RVA: 0x3C614C Offset: 0x3C614C VA: 0x3C614C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99AAC Offset: 0x99AAC VA: 0x99AAC
[Serializable]
public class CryptographicUnexpectedOperationException : CryptographicException // TypeDefIndex: 673
{
	// Methods

	// RVA: 0x3C616C Offset: 0x3C616C VA: 0x3C616C
	public void .ctor() { }

	// RVA: 0x3C5D7C Offset: 0x3C5D7C VA: 0x3C5D7C
	public void .ctor(string message) { }

	// RVA: 0x3C6208 Offset: 0x3C6208 VA: 0x3C6208
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99AC0 Offset: 0x99AC0 VA: 0x99AC0
public sealed class CspParameters // TypeDefIndex: 674
{
	// Fields
	private CspProviderFlags _Flags; // 0x8
	public string KeyContainerName; // 0xC
	public int KeyNumber; // 0x10
	public string ProviderName; // 0x14
	public int ProviderType; // 0x18

	// Properties
	public CspProviderFlags Flags { get; set; }

	// Methods

	// RVA: 0x3C6228 Offset: 0x3C6228 VA: 0x3C6228
	public void .ctor() { }

	// RVA: 0x3C625C Offset: 0x3C625C VA: 0x3C625C
	public void .ctor(int dwTypeIn) { }

	// RVA: 0x3C6290 Offset: 0x3C6290 VA: 0x3C6290
	public void .ctor(int dwTypeIn, string strProviderNameIn) { }

	// RVA: 0x3C62C4 Offset: 0x3C62C4 VA: 0x3C62C4
	public void .ctor(int dwTypeIn, string strProviderNameIn, string strContainerNameIn) { }

	// RVA: 0x3C62F8 Offset: 0x3C62F8 VA: 0x3C62F8
	public CspProviderFlags get_Flags() { }

	// RVA: 0x3C6300 Offset: 0x3C6300 VA: 0x3C6300
	public void set_Flags(CspProviderFlags value) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99AD4 Offset: 0x99AD4 VA: 0x99AD4
[FlagsAttribute] // RVA: 0x99AD4 Offset: 0x99AD4 VA: 0x99AD4
[Serializable]
public enum CspProviderFlags // TypeDefIndex: 675
{
	// Fields
	public int value__; // 0x0
	public const CspProviderFlags UseMachineKeyStore = 1;
	public const CspProviderFlags UseDefaultKeyContainer = 2;
	public const CspProviderFlags UseExistingKey = 8;
	public const CspProviderFlags NoFlags = 0;
	public const CspProviderFlags NoPrompt = 64;
	public const CspProviderFlags UseArchivableKey = 16;
	public const CspProviderFlags UseNonExportableKey = 4;
	public const CspProviderFlags UseUserProtectedKey = 32;
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99B08 Offset: 0x99B08 VA: 0x99B08
public abstract class DES : SymmetricAlgorithm // TypeDefIndex: 676
{
	// Fields
	internal static readonly byte[,] weakKeys; // 0x0
	internal static readonly byte[,] semiWeakKeys; // 0x4

	// Properties
	public override byte[] Key { get; set; }

	// Methods

	// RVA: 0x3C6308 Offset: 0x3C6308 VA: 0x3C6308
	protected void .ctor() { }

	// RVA: 0x3C6508 Offset: 0x3C6508 VA: 0x3C6508
	private static void .cctor() { }

	// RVA: 0x3C6604 Offset: 0x3C6604 VA: 0x3C6604
	public static DES Create() { }

	// RVA: 0x3C668C Offset: 0x3C668C VA: 0x3C668C
	public static DES Create(string algName) { }

	// RVA: 0x3C67B4 Offset: 0x3C67B4 VA: 0x3C67B4
	public static bool IsWeakKey(byte[] rgbKey) { }

	// RVA: 0x3C6AD4 Offset: 0x3C6AD4 VA: 0x3C6AD4
	public static bool IsSemiWeakKey(byte[] rgbKey) { }

	// RVA: 0x3C6DF4 Offset: 0x3C6DF4 VA: 0x3C6DF4 Slot: 11
	public override byte[] get_Key() { }

	// RVA: 0x3C6F1C Offset: 0x3C6F1C VA: 0x3C6F1C Slot: 12
	public override void set_Key(byte[] value) { }
}

// Namespace: System.Security.Cryptography
internal class DESTransform : SymmetricTransform // TypeDefIndex: 677
{
	// Fields
	internal static readonly int KEY_BIT_SIZE; // 0x0
	internal static readonly int KEY_BYTE_SIZE; // 0x4
	internal static readonly int BLOCK_BIT_SIZE; // 0x8
	internal static readonly int BLOCK_BYTE_SIZE; // 0xC
	private byte[] keySchedule; // 0x34
	private byte[] byteBuff; // 0x38
	private uint[] dwordBuff; // 0x3C
	private static readonly uint[] spBoxes; // 0x10
	private static readonly byte[] PC1; // 0x14
	private static readonly byte[] leftRotTotal; // 0x18
	private static readonly byte[] PC2; // 0x1C
	internal static readonly uint[] ipTab; // 0x20
	internal static readonly uint[] fpTab; // 0x24

	// Methods

	// RVA: 0x3C72F4 Offset: 0x3C72F4 VA: 0x3C72F4
	internal void .ctor(SymmetricAlgorithm symmAlgo, bool encryption, byte[] key, byte[] iv) { }

	// RVA: 0x3C7F30 Offset: 0x3C7F30 VA: 0x3C7F30
	private static void .cctor() { }

	// RVA: 0x3C8138 Offset: 0x3C8138 VA: 0x3C8138
	private uint CipherFunct(uint r, int n) { }

	// RVA: 0x3C8634 Offset: 0x3C8634 VA: 0x3C8634
	internal static void Permutation(byte[] input, byte[] output, uint[] permTab, bool preSwap) { }

	// RVA: 0x3C8C7C Offset: 0x3C8C7C VA: 0x3C8C7C
	private static void BSwap(byte[] byteBuff) { }

	// RVA: 0x3C78D0 Offset: 0x3C78D0 VA: 0x3C78D0
	internal void SetKey(byte[] key) { }

	// RVA: 0x3C8EEC Offset: 0x3C8EEC VA: 0x3C8EEC
	public void ProcessBlock(byte[] input, byte[] output) { }

	// RVA: 0x3C9360 Offset: 0x3C9360 VA: 0x3C9360 Slot: 11
	protected override void ECB(byte[] input, byte[] output) { }

	// RVA: 0x3C77AC Offset: 0x3C77AC VA: 0x3C77AC
	internal static byte[] GetStrongKey() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99B1C Offset: 0x99B1C VA: 0x99B1C
public sealed class DESCryptoServiceProvider : DES // TypeDefIndex: 678
{
	// Methods

	// RVA: 0x3C71E8 Offset: 0x3C71E8 VA: 0x3C71E8
	public void .ctor() { }

	// RVA: 0x3C7268 Offset: 0x3C7268 VA: 0x3C7268 Slot: 21
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0x3C7604 Offset: 0x3C7604 VA: 0x3C7604 Slot: 23
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0x3C7690 Offset: 0x3C7690 VA: 0x3C7690 Slot: 24
	public override void GenerateIV() { }

	// RVA: 0x3C772C Offset: 0x3C772C VA: 0x3C772C Slot: 25
	public override void GenerateKey() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99B30 Offset: 0x99B30 VA: 0x99B30
public abstract class DSA : AsymmetricAlgorithm // TypeDefIndex: 679
{
	// Methods

	// RVA: 0x3C9448 Offset: 0x3C9448 VA: 0x3C9448
	protected void .ctor() { }

	// RVA: 0x3C9450 Offset: 0x3C9450 VA: 0x3C9450
	public static DSA Create() { }

	// RVA: 0x3C94AC Offset: 0x3C94AC VA: 0x3C94AC
	public static DSA Create(string algName) { }

	// RVA: -1 Offset: -1 Slot: 10
	public abstract byte[] CreateSignature(byte[] rgbHash);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract DSAParameters ExportParameters(bool includePrivateParameters);

	// RVA: 0x3C95D4 Offset: 0x3C95D4 VA: 0x3C95D4
	internal void ZeroizePrivateKey(DSAParameters parameters) { }

	// RVA: 0x3C95F0 Offset: 0x3C95F0 VA: 0x3C95F0 Slot: 8
	public override void FromXmlString(string xmlString) { }

	// RVA: -1 Offset: -1 Slot: 12
	public abstract void ImportParameters(DSAParameters parameters);

	// RVA: 0x3C99F8 Offset: 0x3C99F8 VA: 0x3C99F8 Slot: 9
	public override string ToXmlString(bool includePrivateParameters) { }

	// RVA: -1 Offset: -1 Slot: 13
	public abstract bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99B44 Offset: 0x99B44 VA: 0x99B44
public sealed class DSACryptoServiceProvider : DSA, ICspAsymmetricAlgorithm // TypeDefIndex: 680
{
	// Fields
	private KeyPairPersistence store; // 0x10
	private bool persistKey; // 0x14
	private bool persisted; // 0x15
	private bool privateKeyExportable; // 0x16
	private bool m_disposed; // 0x17
	private DSAManaged dsa; // 0x18
	private static bool useMachineKeyStore; // 0x0

	// Properties
	public override int KeySize { get; }
	[ComVisibleAttribute] // RVA: 0x9E104 Offset: 0x9E104 VA: 0x9E104
	public bool PublicOnly { get; }

	// Methods

	// RVA: 0x3CA324 Offset: 0x3CA324 VA: 0x3CA324
	public void .ctor() { }

	// RVA: 0x3CA690 Offset: 0x3CA690 VA: 0x3CA690
	public void .ctor(int dwKeySize) { }

	// RVA: 0x3CA330 Offset: 0x3CA330 VA: 0x3CA330
	public void .ctor(int dwKeySize, CspParameters parameters) { }

	// RVA: 0x3CA698 Offset: 0x3CA698 VA: 0x3CA698
	private static void .cctor() { }

	// RVA: 0x3CA69C Offset: 0x3CA69C VA: 0x3CA69C Slot: 1
	protected override void Finalize() { }

	// RVA: 0x3CA780 Offset: 0x3CA780 VA: 0x3CA780 Slot: 5
	public override int get_KeySize() { }

	// RVA: 0x3CA7B4 Offset: 0x3CA7B4 VA: 0x3CA7B4
	public bool get_PublicOnly() { }

	// RVA: 0x3CA7E0 Offset: 0x3CA7E0 VA: 0x3CA7E0 Slot: 11
	public override DSAParameters ExportParameters(bool includePrivateParameters) { }

	// RVA: 0x3CA8D4 Offset: 0x3CA8D4 VA: 0x3CA8D4 Slot: 12
	public override void ImportParameters(DSAParameters parameters) { }

	// RVA: 0x3CA964 Offset: 0x3CA964 VA: 0x3CA964 Slot: 10
	public override byte[] CreateSignature(byte[] rgbHash) { }

	// RVA: 0x3CA9A0 Offset: 0x3CA9A0 VA: 0x3CA9A0 Slot: 13
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature) { }

	// RVA: 0x3CA704 Offset: 0x3CA704 VA: 0x3CA704 Slot: 7
	protected override void Dispose(bool disposing) { }

	// RVA: 0x3CA9E4 Offset: 0x3CA9E4 VA: 0x3CA9E4
	private void OnKeyGenerated(object sender, EventArgs e) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99B58 Offset: 0x99B58 VA: 0x99B58
[Serializable]
public struct DSAParameters // TypeDefIndex: 681
{
	// Fields
	public int Counter; // 0x0
	public byte[] G; // 0x4
	public byte[] J; // 0x8
	public byte[] P; // 0xC
	public byte[] Q; // 0x10
	public byte[] Seed; // 0x14
	public byte[] X; // 0x18
	public byte[] Y; // 0x1C
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99B6C Offset: 0x99B6C VA: 0x99B6C
public class DSASignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 682
{
	// Fields
	private DSA dsa; // 0x8

	// Methods

	// RVA: 0x3CAA94 Offset: 0x3CAA94 VA: 0x3CAA94
	public void .ctor() { }

	// RVA: 0x3CAA9C Offset: 0x3CAA9C VA: 0x3CAA9C
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x3CAAD0 Offset: 0x3CAAD0 VA: 0x3CAAD0 Slot: 4
	public override void SetHashAlgorithm(string strName) { }

	// RVA: 0x3CAC60 Offset: 0x3CAC60 VA: 0x3CAC60 Slot: 5
	public override void SetKey(AsymmetricAlgorithm key) { }

	// RVA: 0x3CADA4 Offset: 0x3CADA4 VA: 0x3CADA4 Slot: 6
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99B80 Offset: 0x99B80 VA: 0x99B80
public class DSASignatureFormatter : AsymmetricSignatureFormatter // TypeDefIndex: 683
{
	// Fields
	private DSA dsa; // 0x8

	// Methods

	// RVA: 0x3CAF44 Offset: 0x3CAF44 VA: 0x3CAF44
	public void .ctor() { }

	// RVA: 0x3CAF4C Offset: 0x3CAF4C VA: 0x3CAF4C Slot: 6
	public override byte[] CreateSignature(byte[] rgbHash) { }

	// RVA: 0x3CB01C Offset: 0x3CB01C VA: 0x3CB01C Slot: 4
	public override void SetHashAlgorithm(string strName) { }

	// RVA: 0x3CB1AC Offset: 0x3CB1AC VA: 0x3CB1AC Slot: 5
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99B94 Offset: 0x99B94 VA: 0x99B94
public abstract class HMAC : KeyedHashAlgorithm // TypeDefIndex: 684
{
	// Fields
	private bool _disposed; // 0x1C
	private string _hashName; // 0x20
	private HashAlgorithm _algo; // 0x24
	private BlockProcessor _block; // 0x28
	private int _blockSizeValue; // 0x2C

	// Properties
	protected int BlockSizeValue { get; set; }
	public string HashName { set; }
	public override byte[] Key { get; set; }
	internal BlockProcessor Block { get; }

	// Methods

	// RVA: 0x3CB2F0 Offset: 0x3CB2F0 VA: 0x3CB2F0
	protected void .ctor() { }

	// RVA: 0x3CB33C Offset: 0x3CB33C VA: 0x3CB33C
	protected int get_BlockSizeValue() { }

	// RVA: 0x3CB344 Offset: 0x3CB344 VA: 0x3CB344
	protected void set_BlockSizeValue(int value) { }

	// RVA: 0x3CB34C Offset: 0x3CB34C VA: 0x3CB34C
	public void set_HashName(string value) { }

	// RVA: 0x3CB494 Offset: 0x3CB494 VA: 0x3CB494 Slot: 15
	public override byte[] get_Key() { }

	// RVA: 0x3CB6AC Offset: 0x3CB6AC VA: 0x3CB6AC Slot: 16
	public override void set_Key(byte[] value) { }

	// RVA: 0x3CBA58 Offset: 0x3CBA58 VA: 0x3CBA58
	internal BlockProcessor get_Block() { }

	// RVA: 0x3CBAE8 Offset: 0x3CBAE8 VA: 0x3CBAE8
	private byte[] KeySetup(byte[] key, byte padding) { }

	// RVA: 0x3CBC58 Offset: 0x3CBC58 VA: 0x3CBC58 Slot: 14
	protected override void Dispose(bool disposing) { }

	// RVA: 0x3CBCCC Offset: 0x3CBCCC VA: 0x3CBCCC Slot: 10
	protected override void HashCore(byte[] rgb, int ib, int cb) { }

	// RVA: 0x3CBDF0 Offset: 0x3CBDF0 VA: 0x3CBDF0 Slot: 11
	protected override byte[] HashFinal() { }

	// RVA: 0x3CC57C Offset: 0x3CC57C VA: 0x3CC57C Slot: 13
	public override void Initialize() { }

	// RVA: 0x3CC6FC Offset: 0x3CC6FC VA: 0x3CC6FC
	public static HMAC Create() { }

	// RVA: 0x3CC758 Offset: 0x3CC758 VA: 0x3CC758
	public static HMAC Create(string algorithmName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99BA8 Offset: 0x99BA8 VA: 0x99BA8
public class HMACMD5 : HMAC // TypeDefIndex: 685
{
	// Methods

	// RVA: 0x3CC880 Offset: 0x3CC880 VA: 0x3CC880
	public void .ctor() { }

	// RVA: 0x3CC8A8 Offset: 0x3CC8A8 VA: 0x3CC8A8
	public void .ctor(byte[] key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99BBC Offset: 0x99BBC VA: 0x99BBC
public class HMACRIPEMD160 : HMAC // TypeDefIndex: 686
{
	// Methods

	// RVA: 0x3CC954 Offset: 0x3CC954 VA: 0x3CC954
	public void .ctor() { }

	// RVA: 0x3CC97C Offset: 0x3CC97C VA: 0x3CC97C
	public void .ctor(byte[] key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99BD0 Offset: 0x99BD0 VA: 0x99BD0
public class HMACSHA1 : HMAC // TypeDefIndex: 687
{
	// Methods

	// RVA: 0x3CCA28 Offset: 0x3CCA28 VA: 0x3CCA28
	public void .ctor() { }

	// RVA: 0x3CCA50 Offset: 0x3CCA50 VA: 0x3CCA50
	public void .ctor(byte[] key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99BE4 Offset: 0x99BE4 VA: 0x99BE4
public class HMACSHA256 : HMAC // TypeDefIndex: 688
{
	// Methods

	// RVA: 0x3CCAFC Offset: 0x3CCAFC VA: 0x3CCAFC
	public void .ctor() { }

	// RVA: 0x3CCB24 Offset: 0x3CCB24 VA: 0x3CCB24
	public void .ctor(byte[] key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99BF8 Offset: 0x99BF8 VA: 0x99BF8
public class HMACSHA384 : HMAC // TypeDefIndex: 689
{
	// Fields
	private static bool legacy_mode; // 0x0
	private bool legacy; // 0x30

	// Properties
	public bool ProduceLegacyHmacValues { set; }

	// Methods

	// RVA: 0x3CCBD0 Offset: 0x3CCBD0 VA: 0x3CCBD0
	public void .ctor() { }

	// RVA: 0x3CCC9C Offset: 0x3CCC9C VA: 0x3CCC9C
	public void .ctor(byte[] key) { }

	// RVA: 0x3CCDD4 Offset: 0x3CCDD4 VA: 0x3CCDD4
	private static void .cctor() { }

	// RVA: 0x3CCDA0 Offset: 0x3CCDA0 VA: 0x3CCDA0
	public void set_ProduceLegacyHmacValues(bool value) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99C0C Offset: 0x99C0C VA: 0x99C0C
public class HMACSHA512 : HMAC // TypeDefIndex: 690
{
	// Fields
	private static bool legacy_mode; // 0x0
	private bool legacy; // 0x30

	// Properties
	public bool ProduceLegacyHmacValues { set; }

	// Methods

	// RVA: 0x3CCE98 Offset: 0x3CCE98 VA: 0x3CCE98
	public void .ctor() { }

	// RVA: 0x3CCF64 Offset: 0x3CCF64 VA: 0x3CCF64
	public void .ctor(byte[] key) { }

	// RVA: 0x3CD09C Offset: 0x3CD09C VA: 0x3CD09C
	private static void .cctor() { }

	// RVA: 0x3CD068 Offset: 0x3CD068 VA: 0x3CD068
	public void set_ProduceLegacyHmacValues(bool value) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99C20 Offset: 0x99C20 VA: 0x99C20
public abstract class HashAlgorithm : IDisposable, ICryptoTransform // TypeDefIndex: 691
{
	// Fields
	protected internal byte[] HashValue; // 0x8
	protected int HashSizeValue; // 0xC
	protected int State; // 0x10
	private bool disposed; // 0x14

	// Properties
	public virtual bool CanReuseTransform { get; }
	public virtual byte[] Hash { get; }
	public virtual int HashSize { get; }

	// Methods

	// RVA: 0x3CD160 Offset: 0x3CD160 VA: 0x3CD160
	protected void .ctor() { }

	// RVA: 0x3CD180 Offset: 0x3CD180 VA: 0x3CD180 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x3CD1B4 Offset: 0x3CD1B4 VA: 0x3CD1B4 Slot: 8
	public virtual bool get_CanReuseTransform() { }

	// RVA: 0x3CB7FC Offset: 0x3CB7FC VA: 0x3CB7FC
	public byte[] ComputeHash(byte[] buffer) { }

	// RVA: 0x3CD1BC Offset: 0x3CD1BC VA: 0x3CD1BC
	public byte[] ComputeHash(byte[] buffer, int offset, int count) { }

	// RVA: 0x3CB36C Offset: 0x3CB36C VA: 0x3CB36C
	public static HashAlgorithm Create(string hashName) { }

	// RVA: 0x3CD454 Offset: 0x3CD454 VA: 0x3CD454 Slot: 9
	public virtual byte[] get_Hash() { }

	// RVA: -1 Offset: -1 Slot: 10
	protected abstract void HashCore(byte[] array, int ibStart, int cbSize);

	// RVA: -1 Offset: -1 Slot: 11
	protected abstract byte[] HashFinal();

	// RVA: 0x3CD508 Offset: 0x3CD508 VA: 0x3CD508 Slot: 12
	public virtual int get_HashSize() { }

	// RVA: -1 Offset: -1 Slot: 13
	public abstract void Initialize();

	// RVA: 0x3CD510 Offset: 0x3CD510 VA: 0x3CD510 Slot: 14
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x3CC050 Offset: 0x3CC050 VA: 0x3CC050 Slot: 6
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x3CC364 Offset: 0x3CC364 VA: 0x3CC364 Slot: 7
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99C34 Offset: 0x99C34 VA: 0x99C34
public interface ICryptoTransform : IDisposable // TypeDefIndex: 692
{
	// Properties
	public abstract bool CanReuseTransform { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_CanReuseTransform();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99C48 Offset: 0x99C48 VA: 0x99C48
public interface ICspAsymmetricAlgorithm // TypeDefIndex: 693
{}

// Namespace: System.Security.Cryptography
public sealed class KeySizes // TypeDefIndex: 694
{
	// Fields
	private int _maxSize; // 0x8
	private int _minSize; // 0xC
	private int _skipSize; // 0x10

	// Properties
	public int MaxSize { get; }
	public int MinSize { get; }
	public int SkipSize { get; }

	// Methods

	// RVA: 0x3C64D8 Offset: 0x3C64D8 VA: 0x3C64D8
	public void .ctor(int minSize, int maxSize, int skipSize) { }

	// RVA: 0x3CD51C Offset: 0x3CD51C VA: 0x3CD51C
	public int get_MaxSize() { }

	// RVA: 0x3CD524 Offset: 0x3CD524 VA: 0x3CD524
	public int get_MinSize() { }

	// RVA: 0x3CD52C Offset: 0x3CD52C VA: 0x3CD52C
	public int get_SkipSize() { }

	// RVA: 0x3CD534 Offset: 0x3CD534 VA: 0x3CD534
	internal bool IsLegal(int keySize) { }

	// RVA: 0x3C27C8 Offset: 0x3C27C8 VA: 0x3C27C8
	internal static bool IsLegalKeySize(KeySizes[] legalKeys, int size) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99C5C Offset: 0x99C5C VA: 0x99C5C
public abstract class KeyedHashAlgorithm : HashAlgorithm // TypeDefIndex: 695
{
	// Fields
	protected byte[] KeyValue; // 0x18

	// Properties
	public virtual byte[] Key { get; set; }

	// Methods

	// RVA: 0x3CB31C Offset: 0x3CB31C VA: 0x3CB31C
	protected void .ctor() { }

	// RVA: 0x3CD5A4 Offset: 0x3CD5A4 VA: 0x3CD5A4 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x3CB5A4 Offset: 0x3CB5A4 VA: 0x3CB5A4 Slot: 15
	public virtual byte[] get_Key() { }

	// RVA: 0x3CB8C8 Offset: 0x3CB8C8 VA: 0x3CB8C8 Slot: 16
	public virtual void set_Key(byte[] value) { }

	// RVA: 0x3CBC98 Offset: 0x3CBC98 VA: 0x3CBC98 Slot: 14
	protected override void Dispose(bool disposing) { }

	// RVA: 0x3CD61C Offset: 0x3CD61C VA: 0x3CD61C
	private void ZeroizeKey() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99C70 Offset: 0x99C70 VA: 0x99C70
public class MACTripleDES : KeyedHashAlgorithm // TypeDefIndex: 696
{
	// Fields
	private TripleDES tdes; // 0x1C
	private MACAlgorithm mac; // 0x20
	private bool m_disposed; // 0x24

	// Methods

	// RVA: 0x3CD638 Offset: 0x3CD638 VA: 0x3CD638
	public void .ctor() { }

	// RVA: 0x3CD6B4 Offset: 0x3CD6B4 VA: 0x3CD6B4
	private void Setup(string strTripleDES, byte[] rgbKey) { }

	// RVA: 0x3CD818 Offset: 0x3CD818 VA: 0x3CD818 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x3CD888 Offset: 0x3CD888 VA: 0x3CD888 Slot: 14
	protected override void Dispose(bool disposing) { }

	// RVA: 0x3CD918 Offset: 0x3CD918 VA: 0x3CD918 Slot: 13
	public override void Initialize() { }

	// RVA: 0x3CD9F8 Offset: 0x3CD9F8 VA: 0x3CD9F8 Slot: 10
	protected override void HashCore(byte[] rgbData, int ibStart, int cbSize) { }

	// RVA: 0x3CDB14 Offset: 0x3CDB14 VA: 0x3CDB14 Slot: 11
	protected override byte[] HashFinal() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99C84 Offset: 0x99C84 VA: 0x99C84
public abstract class MD5 : HashAlgorithm // TypeDefIndex: 697
{
	// Methods

	// RVA: 0x3CDBEC Offset: 0x3CDBEC VA: 0x3CDBEC
	protected void .ctor() { }

	// RVA: 0x3CDC14 Offset: 0x3CDC14 VA: 0x3CDC14
	public static MD5 Create() { }

	// RVA: 0x3CDC70 Offset: 0x3CDC70 VA: 0x3CDC70
	public static MD5 Create(string algName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99C98 Offset: 0x99C98 VA: 0x99C98
public sealed class MD5CryptoServiceProvider : MD5 // TypeDefIndex: 698
{
	// Fields
	private uint[] _H; // 0x18
	private uint[] buff; // 0x1C
	private ulong count; // 0x20
	private byte[] _ProcessingBuffer; // 0x28
	private int _ProcessingBufferCount; // 0x2C
	private static readonly uint[] K; // 0x0

	// Methods

	// RVA: 0x3CDD98 Offset: 0x3CDD98 VA: 0x3CDD98
	public void .ctor() { }

	// RVA: 0x3CDF60 Offset: 0x3CDF60 VA: 0x3CDF60
	private static void .cctor() { }

	// RVA: 0x3CDFF8 Offset: 0x3CDFF8 VA: 0x3CDFF8 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x3CE008 Offset: 0x3CE008 VA: 0x3CE008 Slot: 14
	protected override void Dispose(bool disposing) { }

	// RVA: 0x3CE094 Offset: 0x3CE094 VA: 0x3CE094 Slot: 10
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x3D0DBC Offset: 0x3D0DBC VA: 0x3D0DBC Slot: 11
	protected override byte[] HashFinal() { }

	// RVA: 0x3CDE50 Offset: 0x3CDE50 VA: 0x3CDE50 Slot: 13
	public override void Initialize() { }

	// RVA: 0x3CE198 Offset: 0x3CE198 VA: 0x3CE198
	private void ProcessBlock(byte[] inputBuffer, int inputOffset) { }

	// RVA: 0x3D0EE4 Offset: 0x3D0EE4 VA: 0x3D0EE4
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x3D1108 Offset: 0x3D1108 VA: 0x3D1108
	internal void AddLength(ulong length, byte[] buffer, int position) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99CAC Offset: 0x99CAC VA: 0x99CAC
[Serializable]
public enum PaddingMode // TypeDefIndex: 699
{
	// Fields
	public int value__; // 0x0
	public const PaddingMode None = 1;
	public const PaddingMode PKCS7 = 2;
	public const PaddingMode Zeros = 3;
	public const PaddingMode ANSIX923 = 4;
	public const PaddingMode ISO10126 = 5;
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99CC0 Offset: 0x99CC0 VA: 0x99CC0
public abstract class RC2 : SymmetricAlgorithm // TypeDefIndex: 700
{
	// Fields
	protected int EffectiveKeySizeValue; // 0x30

	// Properties
	public virtual int EffectiveKeySize { get; }
	public override int KeySize { get; set; }

	// Methods

	// RVA: 0x3D12A0 Offset: 0x3D12A0 VA: 0x3D12A0
	protected void .ctor() { }

	// RVA: 0x3D1474 Offset: 0x3D1474 VA: 0x3D1474
	public static RC2 Create() { }

	// RVA: 0x3D14D0 Offset: 0x3D14D0 VA: 0x3D14D0
	public static RC2 Create(string AlgName) { }

	// RVA: 0x3D15F8 Offset: 0x3D15F8 VA: 0x3D15F8 Slot: 26
	public virtual int get_EffectiveKeySize() { }

	// RVA: 0x3D160C Offset: 0x3D160C VA: 0x3D160C Slot: 13
	public override int get_KeySize() { }

	// RVA: 0x3D1614 Offset: 0x3D1614 VA: 0x3D1614 Slot: 14
	public override void set_KeySize(int value) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99CD4 Offset: 0x99CD4 VA: 0x99CD4
public sealed class RC2CryptoServiceProvider : RC2 // TypeDefIndex: 701
{
	// Properties
	public override int EffectiveKeySize { get; }

	// Methods

	// RVA: 0x348E08 Offset: 0x348E08 VA: 0x348E08
	public void .ctor() { }

	// RVA: 0x348E10 Offset: 0x348E10 VA: 0x348E10 Slot: 26
	public override int get_EffectiveKeySize() { }

	// RVA: 0x348E18 Offset: 0x348E18 VA: 0x348E18 Slot: 21
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0x3496FC Offset: 0x3496FC VA: 0x3496FC Slot: 23
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0x349788 Offset: 0x349788 VA: 0x349788 Slot: 24
	public override void GenerateIV() { }

	// RVA: 0x3497AC Offset: 0x3497AC VA: 0x3497AC Slot: 25
	public override void GenerateKey() { }
}

// Namespace: System.Security.Cryptography
internal class RC2Transform : SymmetricTransform // TypeDefIndex: 702
{
	// Fields
	private ushort R0; // 0x34
	private ushort R1; // 0x36
	private ushort R2; // 0x38
	private ushort R3; // 0x3A
	private ushort[] K; // 0x3C
	private int j; // 0x40
	private static readonly byte[] pitable; // 0x0

	// Methods

	// RVA: 0x348EA4 Offset: 0x348EA4 VA: 0x348EA4
	public void .ctor(RC2 rc2Algo, bool encryption, byte[] key, byte[] iv) { }

	// RVA: 0x3497D0 Offset: 0x3497D0 VA: 0x3497D0
	private static void .cctor() { }

	// RVA: 0x349868 Offset: 0x349868 VA: 0x349868 Slot: 11
	protected override void ECB(byte[] input, byte[] output) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99CE8 Offset: 0x99CE8 VA: 0x99CE8
public abstract class RIPEMD160 : HashAlgorithm // TypeDefIndex: 703
{
	// Methods

	// RVA: 0x34ABBC Offset: 0x34ABBC VA: 0x34ABBC
	protected void .ctor() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99CFC Offset: 0x99CFC VA: 0x99CFC
public class RIPEMD160Managed : RIPEMD160 // TypeDefIndex: 704
{
	// Fields
	private byte[] _ProcessingBuffer; // 0x18
	private uint[] _X; // 0x1C
	private uint[] _HashValue; // 0x20
	private ulong _Length; // 0x28
	private int _ProcessingBufferCount; // 0x30

	// Methods

	// RVA: 0x34ABDC Offset: 0x34ABDC VA: 0x34ABDC
	public void .ctor() { }

	// RVA: 0x34AC98 Offset: 0x34AC98 VA: 0x34AC98 Slot: 13
	public override void Initialize() { }

	// RVA: 0x34AE34 Offset: 0x34AE34 VA: 0x34AE34 Slot: 10
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x34B178 Offset: 0x34B178 VA: 0x34B178 Slot: 11
	protected override byte[] HashFinal() { }

	// RVA: 0x34B504 Offset: 0x34B504 VA: 0x34B504 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x34AF48 Offset: 0x34AF48 VA: 0x34AF48
	private void ProcessBlock(byte[] buffer, int offset) { }

	// RVA: 0x34B57C Offset: 0x34B57C VA: 0x34B57C
	private void Compress() { }

	// RVA: 0x34B30C Offset: 0x34B30C VA: 0x34B30C
	private void CompressFinal(ulong length) { }

	// RVA: 0x3506D4 Offset: 0x3506D4 VA: 0x3506D4
	private uint ROL(uint x, int n) { }

	// RVA: 0x3506E4 Offset: 0x3506E4 VA: 0x3506E4
	private uint F(uint x, uint y, uint z) { }

	// RVA: 0x3506F0 Offset: 0x3506F0 VA: 0x3506F0
	private uint G(uint x, uint y, uint z) { }

	// RVA: 0x350700 Offset: 0x350700 VA: 0x350700
	private uint H(uint x, uint y, uint z) { }

	// RVA: 0x350710 Offset: 0x350710 VA: 0x350710
	private uint I(uint x, uint y, uint z) { }

	// RVA: 0x350720 Offset: 0x350720 VA: 0x350720
	private uint J(uint x, uint y, uint z) { }

	// RVA: 0x35034C Offset: 0x35034C VA: 0x35034C
	private void FF(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x350398 Offset: 0x350398 VA: 0x350398
	private void GG(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x3503F4 Offset: 0x3503F4 VA: 0x3503F4
	private void HH(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x350454 Offset: 0x350454 VA: 0x350454
	private void II(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x3504B0 Offset: 0x3504B0 VA: 0x3504B0
	private void JJ(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x350688 Offset: 0x350688 VA: 0x350688
	private void FFF(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x35062C Offset: 0x35062C VA: 0x35062C
	private void GGG(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x3505CC Offset: 0x3505CC VA: 0x3505CC
	private void HHH(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x350570 Offset: 0x350570 VA: 0x350570
	private void III(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x350510 Offset: 0x350510 VA: 0x350510
	private void JJJ(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }
}

// Namespace: System.Security.Cryptography
public sealed class RNGCryptoServiceProvider : RandomNumberGenerator // TypeDefIndex: 705
{
	// Fields
	private static object _lock; // 0x0
	private IntPtr _handle; // 0x8

	// Methods

	// RVA: 0x350730 Offset: 0x350730 VA: 0x350730
	public void .ctor() { }

	// RVA: 0x350898 Offset: 0x350898 VA: 0x350898
	private static void .cctor() { }

	// RVA: 0x3507D4 Offset: 0x3507D4 VA: 0x3507D4
	private void Check() { }

	// RVA: 0x350924 Offset: 0x350924 VA: 0x350924
	private static bool RngOpen() { }

	// RVA: 0x3507D0 Offset: 0x3507D0 VA: 0x3507D0
	private static IntPtr RngInitialize(byte[] seed) { }

	// RVA: 0x350928 Offset: 0x350928 VA: 0x350928
	private static IntPtr RngGetBytes(IntPtr handle, byte[] data) { }

	// RVA: 0x35092C Offset: 0x35092C VA: 0x35092C
	private static void RngClose(IntPtr handle) { }

	// RVA: 0x350930 Offset: 0x350930 VA: 0x350930 Slot: 4
	public override void GetBytes(byte[] data) { }

	// RVA: 0x350B38 Offset: 0x350B38 VA: 0x350B38 Slot: 5
	public override void GetNonZeroBytes(byte[] data) { }

	// RVA: 0x350D2C Offset: 0x350D2C VA: 0x350D2C Slot: 1
	protected override void Finalize() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99D10 Offset: 0x99D10 VA: 0x99D10
public abstract class RSA : AsymmetricAlgorithm // TypeDefIndex: 706
{
	// Methods

	// RVA: 0x350E24 Offset: 0x350E24 VA: 0x350E24
	protected void .ctor() { }

	// RVA: 0x350E2C Offset: 0x350E2C VA: 0x350E2C
	public static RSA Create() { }

	// RVA: 0x350E88 Offset: 0x350E88 VA: 0x350E88
	public static RSA Create(string algName) { }

	// RVA: -1 Offset: -1 Slot: 10
	public abstract byte[] EncryptValue(byte[] rgb);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract byte[] DecryptValue(byte[] rgb);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract RSAParameters ExportParameters(bool includePrivateParameters);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract void ImportParameters(RSAParameters parameters);

	// RVA: 0x350FB0 Offset: 0x350FB0 VA: 0x350FB0
	internal void ZeroizePrivateKey(RSAParameters parameters) { }

	// RVA: 0x35107C Offset: 0x35107C VA: 0x35107C Slot: 8
	public override void FromXmlString(string xmlString) { }

	// RVA: 0x3515D0 Offset: 0x3515D0 VA: 0x3515D0 Slot: 9
	public override string ToXmlString(bool includePrivateParameters) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99D24 Offset: 0x99D24 VA: 0x99D24
public sealed class RSACryptoServiceProvider : RSA, ICspAsymmetricAlgorithm // TypeDefIndex: 707
{
	// Fields
	private KeyPairPersistence store; // 0x10
	private bool persistKey; // 0x14
	private bool persisted; // 0x15
	private bool privateKeyExportable; // 0x16
	private bool m_disposed; // 0x17
	private RSAManaged rsa; // 0x18
	private static bool useMachineKeyStore; // 0x0

	// Properties
	public override int KeySize { get; }
	[ComVisibleAttribute] // RVA: 0x9E118 Offset: 0x9E118 VA: 0x9E118
	public bool PublicOnly { get; }

	// Methods

	// RVA: 0x351E10 Offset: 0x351E10 VA: 0x351E10
	public void .ctor() { }

	// RVA: 0x3521B8 Offset: 0x3521B8 VA: 0x3521B8
	public void .ctor(CspParameters parameters) { }

	// RVA: 0x3521F0 Offset: 0x3521F0 VA: 0x3521F0
	public void .ctor(int dwKeySize) { }

	// RVA: 0x352228 Offset: 0x352228 VA: 0x352228
	private static void .cctor() { }

	// RVA: 0x351E44 Offset: 0x351E44 VA: 0x351E44
	private void Common(int dwKeySize, CspParameters p) { }

	// RVA: 0x352250 Offset: 0x352250 VA: 0x352250 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x35222C Offset: 0x35222C VA: 0x35222C Slot: 5
	public override int get_KeySize() { }

	// RVA: 0x352328 Offset: 0x352328 VA: 0x352328
	public bool get_PublicOnly() { }

	// RVA: 0x352354 Offset: 0x352354 VA: 0x352354 Slot: 11
	public override byte[] DecryptValue(byte[] rgb) { }

	// RVA: 0x352450 Offset: 0x352450 VA: 0x352450 Slot: 10
	public override byte[] EncryptValue(byte[] rgb) { }

	// RVA: 0x35248C Offset: 0x35248C VA: 0x35248C Slot: 12
	public override RSAParameters ExportParameters(bool includePrivateParameters) { }

	// RVA: 0x352578 Offset: 0x352578 VA: 0x352578 Slot: 13
	public override void ImportParameters(RSAParameters parameters) { }

	// RVA: 0x3522B8 Offset: 0x3522B8 VA: 0x3522B8 Slot: 7
	protected override void Dispose(bool disposing) { }

	// RVA: 0x352608 Offset: 0x352608 VA: 0x352608
	private void OnKeyGenerated(object sender, EventArgs e) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99D38 Offset: 0x99D38 VA: 0x99D38
public class RSAPKCS1KeyExchangeFormatter : AsymmetricKeyExchangeFormatter // TypeDefIndex: 708
{
	// Fields
	private RSA rsa; // 0x8
	private RandomNumberGenerator random; // 0xC

	// Methods

	// RVA: 0x3526B8 Offset: 0x3526B8 VA: 0x3526B8
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x352824 Offset: 0x352824 VA: 0x352824 Slot: 4
	public override byte[] CreateKeyExchange(byte[] rgbData) { }

	// RVA: 0x3526E0 Offset: 0x3526E0 VA: 0x3526E0
	private void SetRSAKey(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99D4C Offset: 0x99D4C VA: 0x99D4C
public class RSAPKCS1SignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 709
{
	// Fields
	private RSA rsa; // 0x8
	private string hashName; // 0xC

	// Methods

	// RVA: 0x352AB8 Offset: 0x352AB8 VA: 0x352AB8
	public void .ctor() { }

	// RVA: 0x352AC0 Offset: 0x352AC0 VA: 0x352AC0
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x352AF4 Offset: 0x352AF4 VA: 0x352AF4 Slot: 4
	public override void SetHashAlgorithm(string strName) { }

	// RVA: 0x352BA4 Offset: 0x352BA4 VA: 0x352BA4 Slot: 5
	public override void SetKey(AsymmetricAlgorithm key) { }

	// RVA: 0x352CE8 Offset: 0x352CE8 VA: 0x352CE8 Slot: 6
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99D60 Offset: 0x99D60 VA: 0x99D60
public class RSAPKCS1SignatureFormatter : AsymmetricSignatureFormatter // TypeDefIndex: 710
{
	// Fields
	private RSA rsa; // 0x8
	private HashAlgorithm hash; // 0xC

	// Methods

	// RVA: 0x352F04 Offset: 0x352F04 VA: 0x352F04
	public void .ctor() { }

	// RVA: 0x352F0C Offset: 0x352F0C VA: 0x352F0C Slot: 6
	public override byte[] CreateSignature(byte[] rgbHash) { }

	// RVA: 0x3530BC Offset: 0x3530BC VA: 0x3530BC Slot: 4
	public override void SetHashAlgorithm(string strName) { }

	// RVA: 0x3530DC Offset: 0x3530DC VA: 0x3530DC Slot: 5
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99D74 Offset: 0x99D74 VA: 0x99D74
[Serializable]
public struct RSAParameters // TypeDefIndex: 711
{
	// Fields
	public byte[] P; // 0x0
	public byte[] Q; // 0x4
	public byte[] D; // 0x8
	public byte[] DP; // 0xC
	public byte[] DQ; // 0x10
	public byte[] InverseQ; // 0x14
	public byte[] Modulus; // 0x18
	public byte[] Exponent; // 0x1C
}

// Namespace: System.Security.Cryptography
public abstract class RandomNumberGenerator // TypeDefIndex: 712
{
	// Methods

	// RVA: 0x3507C8 Offset: 0x3507C8 VA: 0x3507C8
	protected void .ctor() { }

	// RVA: 0x352994 Offset: 0x352994 VA: 0x352994
	public static RandomNumberGenerator Create() { }

	// RVA: 0x353220 Offset: 0x353220 VA: 0x353220
	public static RandomNumberGenerator Create(string rngName) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void GetBytes(byte[] data);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void GetNonZeroBytes(byte[] data);
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99D88 Offset: 0x99D88 VA: 0x99D88
public abstract class Rijndael : SymmetricAlgorithm // TypeDefIndex: 713
{
	// Methods

	// RVA: 0x353348 Offset: 0x353348 VA: 0x353348
	protected void .ctor() { }

	// RVA: 0x353520 Offset: 0x353520 VA: 0x353520
	public static Rijndael Create() { }

	// RVA: 0x35357C Offset: 0x35357C VA: 0x35357C
	public static Rijndael Create(string algName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99D9C Offset: 0x99D9C VA: 0x99D9C
public sealed class RijndaelManaged : Rijndael // TypeDefIndex: 714
{
	// Methods

	// RVA: 0x3536A4 Offset: 0x3536A4 VA: 0x3536A4
	public void .ctor() { }

	// RVA: 0x3536A8 Offset: 0x3536A8 VA: 0x3536A8 Slot: 24
	public override void GenerateIV() { }

	// RVA: 0x3536CC Offset: 0x3536CC VA: 0x3536CC Slot: 25
	public override void GenerateKey() { }

	// RVA: 0x3536F0 Offset: 0x3536F0 VA: 0x3536F0 Slot: 21
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0x353844 Offset: 0x353844 VA: 0x353844 Slot: 23
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV) { }
}

// Namespace: System.Security.Cryptography
internal class RijndaelTransform : SymmetricTransform // TypeDefIndex: 715
{
	// Fields
	private uint[] expandedKey; // 0x34
	private int Nb; // 0x38
	private int Nk; // 0x3C
	private int Nr; // 0x40
	private static readonly uint[] Rcon; // 0x0
	private static readonly byte[] SBox; // 0x4
	private static readonly byte[] iSBox; // 0x8
	private static readonly uint[] T0; // 0xC
	private static readonly uint[] T1; // 0x10
	private static readonly uint[] T2; // 0x14
	private static readonly uint[] T3; // 0x18
	private static readonly uint[] iT0; // 0x1C
	private static readonly uint[] iT1; // 0x20
	private static readonly uint[] iT2; // 0x24
	private static readonly uint[] iT3; // 0x28

	// Methods

	// RVA: 0x3538D0 Offset: 0x3538D0 VA: 0x3538D0
	public void .ctor(Rijndael algo, bool encryption, byte[] key, byte[] iv) { }

	// RVA: 0x354814 Offset: 0x354814 VA: 0x354814
	private static void .cctor() { }

	// RVA: 0x354548 Offset: 0x354548 VA: 0x354548
	public void Clear() { }

	// RVA: 0x354AE8 Offset: 0x354AE8 VA: 0x354AE8 Slot: 11
	protected override void ECB(byte[] input, byte[] output) { }

	// RVA: 0x354650 Offset: 0x354650 VA: 0x354650
	private uint SubByte(uint a) { }

	// RVA: 0x354B80 Offset: 0x354B80 VA: 0x354B80
	private void Encrypt128(byte[] indata, byte[] outdata, uint[] ekey) { }

	// RVA: 0x35AE58 Offset: 0x35AE58 VA: 0x35AE58
	private void Encrypt192(byte[] indata, byte[] outdata, uint[] ekey) { }

	// RVA: 0x364268 Offset: 0x364268 VA: 0x364268
	private void Encrypt256(byte[] indata, byte[] outdata, uint[] ekey) { }

	// RVA: 0x370898 Offset: 0x370898 VA: 0x370898
	private void Decrypt128(byte[] indata, byte[] outdata, uint[] ekey) { }

	// RVA: 0x3769D4 Offset: 0x3769D4 VA: 0x3769D4
	private void Decrypt192(byte[] indata, byte[] outdata, uint[] ekey) { }

	// RVA: 0x37FD64 Offset: 0x37FD64 VA: 0x37FD64
	private void Decrypt256(byte[] indata, byte[] outdata, uint[] ekey) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99DB0 Offset: 0x99DB0 VA: 0x99DB0
public sealed class RijndaelManagedTransform : IDisposable, ICryptoTransform // TypeDefIndex: 716
{
	// Fields
	private RijndaelTransform _st; // 0x8
	private int _bs; // 0xC

	// Properties
	public bool CanReuseTransform { get; }

	// Methods

	// RVA: 0x35377C Offset: 0x35377C VA: 0x35377C
	internal void .ctor(Rijndael algo, bool encryption, byte[] key, byte[] iv) { }

	// RVA: 0x354510 Offset: 0x354510 VA: 0x354510 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x35455C Offset: 0x35455C VA: 0x35455C Slot: 5
	public bool get_CanReuseTransform() { }

	// RVA: 0x354590 Offset: 0x354590 VA: 0x354590 Slot: 6
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x3545F8 Offset: 0x3545F8 VA: 0x3545F8 Slot: 7
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99DC4 Offset: 0x99DC4 VA: 0x99DC4
public abstract class SHA1 : HashAlgorithm // TypeDefIndex: 717
{
	// Methods

	// RVA: 0x435400 Offset: 0x435400 VA: 0x435400
	protected void .ctor() { }

	// RVA: 0x435420 Offset: 0x435420 VA: 0x435420
	public static SHA1 Create() { }

	// RVA: 0x43547C Offset: 0x43547C VA: 0x43547C
	public static SHA1 Create(string hashName) { }
}

// Namespace: System.Security.Cryptography
internal class SHA1Internal // TypeDefIndex: 718
{
	// Fields
	private uint[] _H; // 0x8
	private ulong count; // 0x10
	private byte[] _ProcessingBuffer; // 0x18
	private int _ProcessingBufferCount; // 0x1C
	private uint[] buff; // 0x20

	// Methods

	// RVA: 0x435624 Offset: 0x435624 VA: 0x435624
	public void .ctor() { }

	// RVA: 0x435790 Offset: 0x435790 VA: 0x435790
	public void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x4358BC Offset: 0x4358BC VA: 0x4358BC
	public byte[] HashFinal() { }

	// RVA: 0x435A10 Offset: 0x435A10 VA: 0x435A10
	public void Initialize() { }

	// RVA: 0x435B5C Offset: 0x435B5C VA: 0x435B5C
	private void ProcessBlock(byte[] inputBuffer, uint inputOffset) { }

	// RVA: 0x436838 Offset: 0x436838 VA: 0x436838
	private static void InitialiseBuff(uint[] buff, byte[] input, uint inputOffset) { }

	// RVA: 0x437574 Offset: 0x437574 VA: 0x437574
	private static void FillBuff(uint[] buff) { }

	// RVA: 0x436604 Offset: 0x436604 VA: 0x436604
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x437C00 Offset: 0x437C00 VA: 0x437C00
	internal void AddLength(ulong length, byte[] buffer, int position) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99DD8 Offset: 0x99DD8 VA: 0x99DD8
public sealed class SHA1CryptoServiceProvider : SHA1 // TypeDefIndex: 719
{
	// Fields
	private SHA1Internal sha; // 0x18

	// Methods

	// RVA: 0x4355A4 Offset: 0x4355A4 VA: 0x4355A4
	public void .ctor() { }

	// RVA: 0x4356CC Offset: 0x4356CC VA: 0x4356CC Slot: 1
	protected override void Finalize() { }

	// RVA: 0x435738 Offset: 0x435738 VA: 0x435738 Slot: 14
	protected override void Dispose(bool disposing) { }

	// RVA: 0x435740 Offset: 0x435740 VA: 0x435740 Slot: 10
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x43588C Offset: 0x43588C VA: 0x43588C Slot: 11
	protected override byte[] HashFinal() { }

	// RVA: 0x4359E8 Offset: 0x4359E8 VA: 0x4359E8 Slot: 13
	public override void Initialize() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99DEC Offset: 0x99DEC VA: 0x99DEC
public class SHA1Managed : SHA1 // TypeDefIndex: 720
{
	// Fields
	private SHA1Internal sha; // 0x18

	// Methods

	// RVA: 0x437D94 Offset: 0x437D94 VA: 0x437D94
	public void .ctor() { }

	// RVA: 0x437E14 Offset: 0x437E14 VA: 0x437E14 Slot: 10
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x437E64 Offset: 0x437E64 VA: 0x437E64 Slot: 11
	protected override byte[] HashFinal() { }

	// RVA: 0x437E94 Offset: 0x437E94 VA: 0x437E94 Slot: 13
	public override void Initialize() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99E00 Offset: 0x99E00 VA: 0x99E00
public abstract class SHA256 : HashAlgorithm // TypeDefIndex: 721
{
	// Methods

	// RVA: 0x437EBC Offset: 0x437EBC VA: 0x437EBC
	protected void .ctor() { }

	// RVA: 0x437EDC Offset: 0x437EDC VA: 0x437EDC
	public static SHA256 Create() { }

	// RVA: 0x437F38 Offset: 0x437F38 VA: 0x437F38
	public static SHA256 Create(string hashName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99E14 Offset: 0x99E14 VA: 0x99E14
public class SHA256Managed : SHA256 // TypeDefIndex: 722
{
	// Fields
	private uint[] _H; // 0x18
	private ulong count; // 0x20
	private byte[] _ProcessingBuffer; // 0x28
	private int _ProcessingBufferCount; // 0x2C
	private uint[] buff; // 0x30

	// Methods

	// RVA: 0x438060 Offset: 0x438060 VA: 0x438060
	public void .ctor() { }

	// RVA: 0x43811C Offset: 0x43811C VA: 0x43811C Slot: 10
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x438AD4 Offset: 0x438AD4 VA: 0x438AD4 Slot: 11
	protected override byte[] HashFinal() { }

	// RVA: 0x438E2C Offset: 0x438E2C VA: 0x438E2C Slot: 13
	public override void Initialize() { }

	// RVA: 0x438220 Offset: 0x438220 VA: 0x438220
	private void ProcessBlock(byte[] inputBuffer, int inputOffset) { }

	// RVA: 0x438C08 Offset: 0x438C08 VA: 0x438C08
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x43902C Offset: 0x43902C VA: 0x43902C
	internal void AddLength(ulong length, byte[] buffer, int position) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99E28 Offset: 0x99E28 VA: 0x99E28
public abstract class SHA384 : HashAlgorithm // TypeDefIndex: 723
{
	// Methods

	// RVA: 0x4391C0 Offset: 0x4391C0 VA: 0x4391C0
	protected void .ctor() { }

	// RVA: 0x4391E0 Offset: 0x4391E0 VA: 0x4391E0
	public static SHA384 Create() { }

	// RVA: 0x43923C Offset: 0x43923C VA: 0x43923C
	public static SHA384 Create(string hashName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99E3C Offset: 0x99E3C VA: 0x99E3C
public class SHA384Managed : SHA384 // TypeDefIndex: 724
{
	// Fields
	private byte[] xBuf; // 0x18
	private int xBufOff; // 0x1C
	private ulong byteCount1; // 0x20
	private ulong byteCount2; // 0x28
	private ulong H1; // 0x30
	private ulong H2; // 0x38
	private ulong H3; // 0x40
	private ulong H4; // 0x48
	private ulong H5; // 0x50
	private ulong H6; // 0x58
	private ulong H7; // 0x60
	private ulong H8; // 0x68
	private ulong[] W; // 0x70
	private int wOff; // 0x74

	// Methods

	// RVA: 0x439368 Offset: 0x439368 VA: 0x439368
	public void .ctor() { }

	// RVA: 0x439488 Offset: 0x439488 VA: 0x439488
	private void Initialize(bool reuse) { }

	// RVA: 0x439610 Offset: 0x439610 VA: 0x439610 Slot: 13
	public override void Initialize() { }

	// RVA: 0x439618 Offset: 0x439618 VA: 0x439618 Slot: 10
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x439A6C Offset: 0x439A6C VA: 0x439A6C Slot: 11
	protected override byte[] HashFinal() { }

	// RVA: 0x4397B0 Offset: 0x4397B0 VA: 0x4397B0
	private void update(byte input) { }

	// RVA: 0x439850 Offset: 0x439850 VA: 0x439850
	private void processWord(byte[] input, int inOff) { }

	// RVA: 0x43A3F0 Offset: 0x43A3F0 VA: 0x43A3F0
	private void unpackWord(ulong word, byte[] output, int outOff) { }

	// RVA: 0x439C30 Offset: 0x439C30 VA: 0x439C30
	private void adjustByteCounts() { }

	// RVA: 0x439C6C Offset: 0x439C6C VA: 0x439C6C
	private void processLength(ulong lowW, ulong hiW) { }

	// RVA: 0x439D08 Offset: 0x439D08 VA: 0x439D08
	private void processBlock() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99E50 Offset: 0x99E50 VA: 0x99E50
public abstract class SHA512 : HashAlgorithm // TypeDefIndex: 725
{
	// Methods

	// RVA: 0x43A57C Offset: 0x43A57C VA: 0x43A57C
	protected void .ctor() { }

	// RVA: 0x43A59C Offset: 0x43A59C VA: 0x43A59C
	public static SHA512 Create() { }

	// RVA: 0x43A5F8 Offset: 0x43A5F8 VA: 0x43A5F8
	public static SHA512 Create(string hashName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99E64 Offset: 0x99E64 VA: 0x99E64
public class SHA512Managed : SHA512 // TypeDefIndex: 726
{
	// Fields
	private byte[] xBuf; // 0x18
	private int xBufOff; // 0x1C
	private ulong byteCount1; // 0x20
	private ulong byteCount2; // 0x28
	private ulong H1; // 0x30
	private ulong H2; // 0x38
	private ulong H3; // 0x40
	private ulong H4; // 0x48
	private ulong H5; // 0x50
	private ulong H6; // 0x58
	private ulong H7; // 0x60
	private ulong H8; // 0x68
	private ulong[] W; // 0x70
	private int wOff; // 0x74

	// Methods

	// RVA: 0x43A720 Offset: 0x43A720 VA: 0x43A720
	public void .ctor() { }

	// RVA: 0x43A840 Offset: 0x43A840 VA: 0x43A840
	private void Initialize(bool reuse) { }

	// RVA: 0x43A9C8 Offset: 0x43A9C8 VA: 0x43A9C8 Slot: 13
	public override void Initialize() { }

	// RVA: 0x43A9D0 Offset: 0x43A9D0 VA: 0x43A9D0 Slot: 10
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x43AE24 Offset: 0x43AE24 VA: 0x43AE24 Slot: 11
	protected override byte[] HashFinal() { }

	// RVA: 0x43AB68 Offset: 0x43AB68 VA: 0x43AB68
	private void update(byte input) { }

	// RVA: 0x43AC08 Offset: 0x43AC08 VA: 0x43AC08
	private void processWord(byte[] input, int inOff) { }

	// RVA: 0x43B888 Offset: 0x43B888 VA: 0x43B888
	private void unpackWord(ulong word, byte[] output, int outOff) { }

	// RVA: 0x43B020 Offset: 0x43B020 VA: 0x43B020
	private void adjustByteCounts() { }

	// RVA: 0x43B05C Offset: 0x43B05C VA: 0x43B05C
	private void processLength(ulong lowW, ulong hiW) { }

	// RVA: 0x43B0F8 Offset: 0x43B0F8 VA: 0x43B0F8
	private void processBlock() { }

	// RVA: 0x43BB80 Offset: 0x43BB80 VA: 0x43BB80
	private ulong rotateRight(ulong x, int n) { }

	// RVA: 0x43BACC Offset: 0x43BACC VA: 0x43BACC
	private ulong Ch(ulong x, ulong y, ulong z) { }

	// RVA: 0x43BB44 Offset: 0x43BB44 VA: 0x43BB44
	private ulong Maj(ulong x, ulong y, ulong z) { }

	// RVA: 0x43BB00 Offset: 0x43BB00 VA: 0x43BB00
	private ulong Sum0(ulong x) { }

	// RVA: 0x43BA88 Offset: 0x43BA88 VA: 0x43BA88
	private ulong Sum1(ulong x) { }

	// RVA: 0x43BA50 Offset: 0x43BA50 VA: 0x43BA50
	private ulong Sigma0(ulong x) { }

	// RVA: 0x43BA14 Offset: 0x43BA14 VA: 0x43BA14
	private ulong Sigma1(ulong x) { }
}

// Namespace: System.Security.Cryptography
internal static class SHAConstants // TypeDefIndex: 727
{
	// Fields
	public static readonly uint[] K1; // 0x0
	public static readonly ulong[] K2; // 0x4

	// Methods

	// RVA: 0x43BBEC Offset: 0x43BBEC VA: 0x43BBEC
	private static void .cctor() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99E78 Offset: 0x99E78 VA: 0x99E78
public class SignatureDescription // TypeDefIndex: 728
{
	// Fields
	private string _DeformatterAlgorithm; // 0x8
	private string _DigestAlgorithm; // 0xC
	private string _FormatterAlgorithm; // 0x10
	private string _KeyAlgorithm; // 0x14

	// Properties
	public string DeformatterAlgorithm { set; }
	public string DigestAlgorithm { set; }
	public string FormatterAlgorithm { set; }
	public string KeyAlgorithm { set; }

	// Methods

	// RVA: 0x43BCC8 Offset: 0x43BCC8 VA: 0x43BCC8
	public void .ctor() { }

	// RVA: 0x43BCD0 Offset: 0x43BCD0 VA: 0x43BCD0
	public void set_DeformatterAlgorithm(string value) { }

	// RVA: 0x43BCD8 Offset: 0x43BCD8 VA: 0x43BCD8
	public void set_DigestAlgorithm(string value) { }

	// RVA: 0x43BCE0 Offset: 0x43BCE0 VA: 0x43BCE0
	public void set_FormatterAlgorithm(string value) { }

	// RVA: 0x43BCE8 Offset: 0x43BCE8 VA: 0x43BCE8
	public void set_KeyAlgorithm(string value) { }
}

// Namespace: System.Security.Cryptography
internal class DSASignatureDescription : SignatureDescription // TypeDefIndex: 729
{
	// Methods

	// RVA: 0x3CAE7C Offset: 0x3CAE7C VA: 0x3CAE7C
	public void .ctor() { }
}

// Namespace: System.Security.Cryptography
internal class RSAPKCS1SHA1SignatureDescription : SignatureDescription // TypeDefIndex: 730
{
	// Methods

	// RVA: 0x3529F0 Offset: 0x3529F0 VA: 0x3529F0
	public void .ctor() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99E8C Offset: 0x99E8C VA: 0x99E8C
public abstract class SymmetricAlgorithm : IDisposable // TypeDefIndex: 731
{
	// Fields
	protected int BlockSizeValue; // 0x8
	protected byte[] IVValue; // 0xC
	protected int KeySizeValue; // 0x10
	protected byte[] KeyValue; // 0x14
	protected KeySizes[] LegalBlockSizesValue; // 0x18
	protected KeySizes[] LegalKeySizesValue; // 0x1C
	protected int FeedbackSizeValue; // 0x20
	protected CipherMode ModeValue; // 0x24
	protected PaddingMode PaddingValue; // 0x28
	private bool m_disposed; // 0x2C

	// Properties
	public virtual int BlockSize { get; set; }
	public virtual int FeedbackSize { get; }
	public virtual byte[] IV { get; set; }
	public virtual byte[] Key { get; set; }
	public virtual int KeySize { get; set; }
	public virtual KeySizes[] LegalKeySizes { get; }
	public virtual CipherMode Mode { get; set; }
	public virtual PaddingMode Padding { get; set; }

	// Methods

	// RVA: 0x43BCF0 Offset: 0x43BCF0 VA: 0x43BCF0
	protected void .ctor() { }

	// RVA: 0x43BD20 Offset: 0x43BD20 VA: 0x43BD20 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x43BD54 Offset: 0x43BD54 VA: 0x43BD54 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x43BDCC Offset: 0x43BDCC VA: 0x43BDCC
	public void Clear() { }

	// RVA: 0x43BDE0 Offset: 0x43BDE0 VA: 0x43BDE0 Slot: 5
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x43BE28 Offset: 0x43BE28 VA: 0x43BE28 Slot: 6
	public virtual int get_BlockSize() { }

	// RVA: 0x43BE30 Offset: 0x43BE30 VA: 0x43BE30 Slot: 7
	public virtual void set_BlockSize(int value) { }

	// RVA: 0x43BF10 Offset: 0x43BF10 VA: 0x43BF10 Slot: 8
	public virtual int get_FeedbackSize() { }

	// RVA: 0x43BF18 Offset: 0x43BF18 VA: 0x43BF18 Slot: 9
	public virtual byte[] get_IV() { }

	// RVA: 0x43C040 Offset: 0x43C040 VA: 0x43C040 Slot: 10
	public virtual void set_IV(byte[] value) { }

	// RVA: 0x43C200 Offset: 0x43C200 VA: 0x43C200 Slot: 11
	public virtual byte[] get_Key() { }

	// RVA: 0x43C328 Offset: 0x43C328 VA: 0x43C328 Slot: 12
	public virtual void set_Key(byte[] value) { }

	// RVA: 0x43C4FC Offset: 0x43C4FC VA: 0x43C4FC Slot: 13
	public virtual int get_KeySize() { }

	// RVA: 0x43C504 Offset: 0x43C504 VA: 0x43C504 Slot: 14
	public virtual void set_KeySize(int value) { }

	// RVA: 0x43C5D8 Offset: 0x43C5D8 VA: 0x43C5D8 Slot: 15
	public virtual KeySizes[] get_LegalKeySizes() { }

	// RVA: 0x43C5E0 Offset: 0x43C5E0 VA: 0x43C5E0 Slot: 16
	public virtual CipherMode get_Mode() { }

	// RVA: 0x43C5E8 Offset: 0x43C5E8 VA: 0x43C5E8 Slot: 17
	public virtual void set_Mode(CipherMode value) { }

	// RVA: 0x43C74C Offset: 0x43C74C VA: 0x43C74C Slot: 18
	public virtual PaddingMode get_Padding() { }

	// RVA: 0x43C754 Offset: 0x43C754 VA: 0x43C754 Slot: 19
	public virtual void set_Padding(PaddingMode value) { }

	// RVA: 0x43C8B8 Offset: 0x43C8B8 VA: 0x43C8B8 Slot: 20
	public virtual ICryptoTransform CreateDecryptor() { }

	// RVA: -1 Offset: -1 Slot: 21
	public abstract ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);

	// RVA: 0x43C910 Offset: 0x43C910 VA: 0x43C910 Slot: 22
	public virtual ICryptoTransform CreateEncryptor() { }

	// RVA: -1 Offset: -1 Slot: 23
	public abstract ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);

	// RVA: -1 Offset: -1 Slot: 24
	public abstract void GenerateIV();

	// RVA: -1 Offset: -1 Slot: 25
	public abstract void GenerateKey();

	// RVA: 0x43C968 Offset: 0x43C968 VA: 0x43C968
	public static SymmetricAlgorithm Create(string algName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99EA0 Offset: 0x99EA0 VA: 0x99EA0
public class ToBase64Transform : IDisposable, ICryptoTransform // TypeDefIndex: 732
{
	// Fields
	private bool m_disposed; // 0x8

	// Properties
	public virtual bool CanReuseTransform { get; }
	public int InputBlockSize { get; }
	public int OutputBlockSize { get; }

	// Methods

	// RVA: 0x43CA90 Offset: 0x43CA90 VA: 0x43CA90 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x43CAC4 Offset: 0x43CAC4 VA: 0x43CAC4 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x43CB3C Offset: 0x43CB3C VA: 0x43CB3C Slot: 8
	public virtual bool get_CanReuseTransform() { }

	// RVA: 0x43CB44 Offset: 0x43CB44 VA: 0x43CB44 Slot: 9
	public int get_InputBlockSize() { }

	// RVA: 0x43CB4C Offset: 0x43CB4C VA: 0x43CB4C Slot: 10
	public int get_OutputBlockSize() { }

	// RVA: 0x43CB54 Offset: 0x43CB54 VA: 0x43CB54 Slot: 11
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x43CB68 Offset: 0x43CB68 VA: 0x43CB68 Slot: 6
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x43CF50 Offset: 0x43CF50 VA: 0x43CF50
	internal static void InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x43D1F0 Offset: 0x43D1F0 VA: 0x43D1F0 Slot: 7
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x43D438 Offset: 0x43D438 VA: 0x43D438
	internal static byte[] InternalTransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99EB4 Offset: 0x99EB4 VA: 0x99EB4
public abstract class TripleDES : SymmetricAlgorithm // TypeDefIndex: 733
{
	// Properties
	public override byte[] Key { get; set; }

	// Methods

	// RVA: 0x43D874 Offset: 0x43D874 VA: 0x43D874
	protected void .ctor() { }

	// RVA: 0x43DA64 Offset: 0x43DA64 VA: 0x43DA64 Slot: 11
	public override byte[] get_Key() { }

	// RVA: 0x43DE2C Offset: 0x43DE2C VA: 0x43DE2C Slot: 12
	public override void set_Key(byte[] value) { }

	// RVA: 0x43DBC0 Offset: 0x43DBC0 VA: 0x43DBC0
	public static bool IsWeakKey(byte[] rgbKey) { }

	// RVA: 0x43DFEC Offset: 0x43DFEC VA: 0x43DFEC
	public static TripleDES Create() { }

	// RVA: 0x43E048 Offset: 0x43E048 VA: 0x43E048
	public static TripleDES Create(string str) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x99EC8 Offset: 0x99EC8 VA: 0x99EC8
public sealed class TripleDESCryptoServiceProvider : TripleDES // TypeDefIndex: 734
{
	// Methods

	// RVA: 0x43E170 Offset: 0x43E170 VA: 0x43E170
	public void .ctor() { }

	// RVA: 0x43E174 Offset: 0x43E174 VA: 0x43E174 Slot: 24
	public override void GenerateIV() { }

	// RVA: 0x43E198 Offset: 0x43E198 VA: 0x43E198 Slot: 25
	public override void GenerateKey() { }

	// RVA: 0x43E260 Offset: 0x43E260 VA: 0x43E260 Slot: 21
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0x43E650 Offset: 0x43E650 VA: 0x43E650 Slot: 23
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV) { }
}

// Namespace: System.Security.Cryptography
internal class TripleDESTransform : SymmetricTransform // TypeDefIndex: 735
{
	// Fields
	private DESTransform E1; // 0x34
	private DESTransform D2; // 0x38
	private DESTransform E3; // 0x3C
	private DESTransform D1; // 0x40
	private DESTransform E2; // 0x44
	private DESTransform D3; // 0x48

	// Methods

	// RVA: 0x43E2EC Offset: 0x43E2EC VA: 0x43E2EC
	public void .ctor(TripleDES algo, bool encryption, byte[] key, byte[] iv) { }

	// RVA: 0x43E6DC Offset: 0x43E6DC VA: 0x43E6DC Slot: 11
	protected override void ECB(byte[] input, byte[] output) { }

	// RVA: 0x43E1B0 Offset: 0x43E1B0 VA: 0x43E1B0
	internal static byte[] GetStrongKey() { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0x99EDC Offset: 0x99EDC VA: 0x99EDC
[AttributeUsageAttribute] // RVA: 0x99EDC Offset: 0x99EDC VA: 0x99EDC
[ObsoleteAttribute] // RVA: 0x99EDC Offset: 0x99EDC VA: 0x99EDC
[Serializable]
public abstract class CodeAccessSecurityAttribute : SecurityAttribute // TypeDefIndex: 736
{}

// Namespace: System.Security.Permissions
internal interface IBuiltInPermission // TypeDefIndex: 737
{}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0x99F60 Offset: 0x99F60 VA: 0x99F60
public interface IUnrestrictedPermission // TypeDefIndex: 738
{}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0x99F74 Offset: 0x99F74 VA: 0x99F74
[ObsoleteAttribute] // RVA: 0x99F74 Offset: 0x99F74 VA: 0x99F74
[Serializable]
public enum SecurityAction // TypeDefIndex: 739
{
	// Fields
	public int value__; // 0x0
	public const SecurityAction Demand = 2;
	public const SecurityAction Assert = 3;
	public const SecurityAction Deny = 4;
	public const SecurityAction PermitOnly = 5;
	public const SecurityAction LinkDemand = 6;
	public const SecurityAction InheritanceDemand = 7;
	public const SecurityAction RequestMinimum = 8;
	public const SecurityAction RequestOptional = 9;
	public const SecurityAction RequestRefuse = 10;
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0x99FC0 Offset: 0x99FC0 VA: 0x99FC0
[Serializable]
public sealed class SecurityPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 740
{
	// Fields
	private SecurityPermissionFlag flags; // 0x8

	// Properties
	public SecurityPermissionFlag Flags { set; }

	// Methods

	// RVA: 0x440148 Offset: 0x440148 VA: 0x440148
	public void .ctor(SecurityPermissionFlag flag) { }

	// RVA: 0x440170 Offset: 0x440170 VA: 0x440170
	public void set_Flags(SecurityPermissionFlag value) { }

	// RVA: 0x4403B4 Offset: 0x4403B4 VA: 0x4403B4 Slot: 6
	public bool IsUnrestricted() { }

	// RVA: 0x4403CC Offset: 0x4403CC VA: 0x4403CC Slot: 4
	public override bool IsSubsetOf(IPermission target) { }

	// RVA: 0x440520 Offset: 0x440520 VA: 0x440520 Slot: 5
	public override SecurityElement ToXml() { }

	// RVA: 0x44050C Offset: 0x44050C VA: 0x44050C
	private bool IsEmpty() { }

	// RVA: 0x44042C Offset: 0x44042C VA: 0x44042C
	private SecurityPermission Cast(IPermission target) { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0x99FD4 Offset: 0x99FD4 VA: 0x99FD4
[AttributeUsageAttribute] // RVA: 0x99FD4 Offset: 0x99FD4 VA: 0x99FD4
[ObsoleteAttribute] // RVA: 0x99FD4 Offset: 0x99FD4 VA: 0x99FD4
[Serializable]
public sealed class SecurityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 741
{
	// Fields
	private SecurityPermissionFlag m_Flags; // 0x8

	// Properties
	public bool SkipVerification { set; }

	// Methods

	// RVA: 0x440864 Offset: 0x440864 VA: 0x440864
	public void set_SkipVerification(bool value) { }
}

// Namespace: System.Security.Permissions
[FlagsAttribute] // RVA: 0x9A058 Offset: 0x9A058 VA: 0x9A058
[ComVisibleAttribute] // RVA: 0x9A058 Offset: 0x9A058 VA: 0x9A058
[ObsoleteAttribute] // RVA: 0x9A058 Offset: 0x9A058 VA: 0x9A058
[Serializable]
public enum SecurityPermissionFlag // TypeDefIndex: 742
{
	// Fields
	public int value__; // 0x0
	public const SecurityPermissionFlag NoFlags = 0;
	public const SecurityPermissionFlag Assertion = 1;
	public const SecurityPermissionFlag UnmanagedCode = 2;
	public const SecurityPermissionFlag SkipVerification = 4;
	public const SecurityPermissionFlag Execution = 8;
	public const SecurityPermissionFlag ControlThread = 16;
	public const SecurityPermissionFlag ControlEvidence = 32;
	public const SecurityPermissionFlag ControlPolicy = 64;
	public const SecurityPermissionFlag SerializationFormatter = 128;
	public const SecurityPermissionFlag ControlDomainPolicy = 256;
	public const SecurityPermissionFlag ControlPrincipal = 512;
	public const SecurityPermissionFlag ControlAppDomain = 1024;
	public const SecurityPermissionFlag RemotingConfiguration = 2048;
	public const SecurityPermissionFlag Infrastructure = 4096;
	public const SecurityPermissionFlag BindingRedirects = 8192;
	public const SecurityPermissionFlag AllFlags = 16383;
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0x9A0B4 Offset: 0x9A0B4 VA: 0x9A0B4
[Serializable]
public sealed class StrongNamePublicKeyBlob // TypeDefIndex: 743
{
	// Fields
	internal byte[] pubkey; // 0x8

	// Methods

	// RVA: 0x44087C Offset: 0x44087C VA: 0x44087C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x4409EC Offset: 0x4409EC VA: 0x4409EC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x440A88 Offset: 0x440A88 VA: 0x440A88 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0x9A0C8 Offset: 0x9A0C8 VA: 0x9A0C8
[Serializable]
public sealed class ApplicationTrust : ISecurityEncodable // TypeDefIndex: 744
{
	// Fields
	private IList<StrongName> fullTrustAssemblies; // 0x8

	// Methods

	// RVA: 0x440BB0 Offset: 0x440BB0 VA: 0x440BB0
	public void .ctor() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0x9A0DC Offset: 0x9A0DC VA: 0x9A0DC
[MonoTODOAttribute] // RVA: 0x9A0DC Offset: 0x9A0DC VA: 0x9A0DC
[Serializable]
public sealed class Evidence : IEnumerable, ICollection // TypeDefIndex: 745
{
	// Fields
	private bool _locked; // 0x8
	private ArrayList hostEvidenceList; // 0xC
	private ArrayList assemblyEvidenceList; // 0x10
	private int _hashCode; // 0x14

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }
	internal ArrayList HostEvidenceList { get; }
	internal ArrayList AssemblyEvidenceList { get; }

	// Methods

	// RVA: 0x440C40 Offset: 0x440C40 VA: 0x440C40
	public void .ctor() { }

	// RVA: 0x440C48 Offset: 0x440C48 VA: 0x440C48 Slot: 5
	public int get_Count() { }

	// RVA: 0x440CA4 Offset: 0x440CA4 VA: 0x440CA4 Slot: 6
	public bool get_IsSynchronized() { }

	// RVA: 0x440CAC Offset: 0x440CAC VA: 0x440CAC Slot: 7
	public object get_SyncRoot() { }

	// RVA: 0x440CB0 Offset: 0x440CB0 VA: 0x440CB0
	internal ArrayList get_HostEvidenceList() { }

	// RVA: 0x440D58 Offset: 0x440D58 VA: 0x440D58
	internal ArrayList get_AssemblyEvidenceList() { }

	// RVA: 0x440E00 Offset: 0x440E00 VA: 0x440E00 Slot: 8
	public void CopyTo(Array array, int index) { }

	[ComVisibleAttribute] // RVA: 0x9CDB0 Offset: 0x9CDB0 VA: 0x9CDB0
	// RVA: 0x440ED0 Offset: 0x440ED0 VA: 0x440ED0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x44126C Offset: 0x44126C VA: 0x44126C Slot: 4
	public IEnumerator GetEnumerator() { }

	[ComVisibleAttribute] // RVA: 0x9CDC4 Offset: 0x9CDC4 VA: 0x9CDC4
	// RVA: 0x44135C Offset: 0x44135C VA: 0x44135C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: 
private class Evidence.EvidenceEnumerator : IEnumerator // TypeDefIndex: 746
{
	// Fields
	private IEnumerator currentEnum; // 0x8
	private IEnumerator hostEnum; // 0xC
	private IEnumerator assemblyEnum; // 0x10

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x441330 Offset: 0x441330 VA: 0x441330
	public void .ctor(IEnumerator hostenum, IEnumerator assemblyenum) { }

	// RVA: 0x4414CC Offset: 0x4414CC VA: 0x4414CC Slot: 5
	public bool MoveNext() { }

	// RVA: 0x441650 Offset: 0x441650 VA: 0x441650 Slot: 6
	public void Reset() { }

	// RVA: 0x4417BC Offset: 0x4417BC VA: 0x4417BC Slot: 4
	public object get_Current() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0x9A128 Offset: 0x9A128 VA: 0x9A128
[Serializable]
public sealed class Hash : ISerializable, IBuiltInEvidence // TypeDefIndex: 747
{
	// Fields
	private Assembly assembly; // 0x8
	private byte[] data; // 0xC

	// Methods

	// RVA: 0x441894 Offset: 0x441894 VA: 0x441894
	internal void .ctor() { }

	// RVA: 0x44189C Offset: 0x44189C VA: 0x44189C
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x441A10 Offset: 0x441A10 VA: 0x441A10 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x441CB4 Offset: 0x441CB4 VA: 0x441CB4 Slot: 3
	public override string ToString() { }

	// RVA: 0x441AE8 Offset: 0x441AE8 VA: 0x441AE8
	private byte[] GetData() { }
}

// Namespace: System.Security.Policy
internal interface IBuiltInEvidence // TypeDefIndex: 748
{}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0x9A13C Offset: 0x9A13C VA: 0x9A13C
public interface IIdentityPermissionFactory // TypeDefIndex: 749
{}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0x9A150 Offset: 0x9A150 VA: 0x9A150
[Serializable]
public sealed class StrongName : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 750
{
	// Fields
	private StrongNamePublicKeyBlob publickey; // 0x8
	private string name; // 0xC
	private Version version; // 0x10

	// Properties
	public string Name { get; }
	public StrongNamePublicKeyBlob PublicKey { get; }
	public Version Version { get; }

	// Methods

	// RVA: 0x442284 Offset: 0x442284 VA: 0x442284
	public string get_Name() { }

	// RVA: 0x44228C Offset: 0x44228C VA: 0x44228C
	public StrongNamePublicKeyBlob get_PublicKey() { }

	// RVA: 0x442294 Offset: 0x442294 VA: 0x442294
	public Version get_Version() { }

	// RVA: 0x44229C Offset: 0x44229C VA: 0x44229C Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x442454 Offset: 0x442454 VA: 0x442454 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x44247C Offset: 0x44247C VA: 0x44247C Slot: 3
	public override string ToString() { }
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0x9A164 Offset: 0x9A164 VA: 0x9A164
public interface IIdentity // TypeDefIndex: 751
{}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0x9A178 Offset: 0x9A178 VA: 0x9A178
public interface IPrincipal // TypeDefIndex: 752
{}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0x9A18C Offset: 0x9A18C VA: 0x9A18C
[Serializable]
public enum PrincipalPolicy // TypeDefIndex: 753
{
	// Fields
	public int value__; // 0x0
	public const PrincipalPolicy UnauthenticatedPrincipal = 0;
	public const PrincipalPolicy NoPrincipal = 1;
	public const PrincipalPolicy WindowsPrincipal = 2;
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0x9A1A0 Offset: 0x9A1A0 VA: 0x9A1A0
[Serializable]
public enum WindowsAccountType // TypeDefIndex: 754
{
	// Fields
	public int value__; // 0x0
	public const WindowsAccountType Normal = 0;
	public const WindowsAccountType Guest = 1;
	public const WindowsAccountType System = 2;
	public const WindowsAccountType Anonymous = 3;
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0x9A1B4 Offset: 0x9A1B4 VA: 0x9A1B4
[Serializable]
public class WindowsIdentity : IDisposable, ISerializable, IDeserializationCallback, IIdentity // TypeDefIndex: 755
{
	// Fields
	private IntPtr _token; // 0x8
	private string _type; // 0xC
	private WindowsAccountType _account; // 0x10
	private bool _authenticated; // 0x14
	private string _name; // 0x18
	private SerializationInfo _info; // 0x1C
	private static IntPtr invalidWindows; // 0x0

	// Methods

	// RVA: 0x442694 Offset: 0x442694 VA: 0x442694
	public void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x4426B4 Offset: 0x4426B4 VA: 0x4426B4
	private static void .cctor() { }

	// RVA: 0x44271C Offset: 0x44271C VA: 0x44271C Slot: 6
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x442B7C Offset: 0x442B7C VA: 0x442B7C Slot: 5
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ComVisibleAttribute] // RVA: 0x9CDD8 Offset: 0x9CDD8 VA: 0x9CDD8
	// RVA: 0x442D20 Offset: 0x442D20 VA: 0x442D20 Slot: 4
	public void Dispose() { }

	// RVA: 0x442D74 Offset: 0x442D74 VA: 0x442D74
	internal static IntPtr GetCurrentToken() { }

	// RVA: 0x442AF0 Offset: 0x442AF0 VA: 0x442AF0
	private static string GetTokenName(IntPtr token) { }
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0x9A1C8 Offset: 0x9A1C8 VA: 0x9A1C8
[AttributeUsageAttribute] // RVA: 0x9A1C8 Offset: 0x9A1C8 VA: 0x9A1C8
public sealed class AllowPartiallyTrustedCallersAttribute : Attribute // TypeDefIndex: 756
{
	// Methods

	// RVA: 0x3C2238 Offset: 0x3C2238 VA: 0x3C2238
	public void .ctor() { }
}

// Namespace: System.Security
[MonoTODOAttribute] // RVA: 0x9A224 Offset: 0x9A224 VA: 0x9A224
[ComVisibleAttribute] // RVA: 0x9A224 Offset: 0x9A224 VA: 0x9A224
[Serializable]
public abstract class CodeAccessPermission : IPermission, ISecurityEncodable, IStackWalk // TypeDefIndex: 757
{
	// Methods

	// RVA: 0x3C2240 Offset: 0x3C2240 VA: 0x3C2240
	protected void .ctor() { }

	[ComVisibleAttribute] // RVA: 0x9CDEC Offset: 0x9CDEC VA: 0x9CDEC
	// RVA: 0x3C2248 Offset: 0x3C2248 VA: 0x3C2248 Slot: 0
	public override bool Equals(object obj) { }

	[ComVisibleAttribute] // RVA: 0x9CE00 Offset: 0x9CE00 VA: 0x9CE00
	// RVA: 0x3C2354 Offset: 0x3C2354 VA: 0x3C2354 Slot: 2
	public override int GetHashCode() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool IsSubsetOf(IPermission target);

	// RVA: 0x3C235C Offset: 0x3C235C VA: 0x3C235C Slot: 3
	public override string ToString() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract SecurityElement ToXml();

	// RVA: 0x3C2398 Offset: 0x3C2398 VA: 0x3C2398
	internal SecurityElement Element(int version) { }

	// RVA: 0x3C2598 Offset: 0x3C2598 VA: 0x3C2598
	internal static void ThrowInvalidPermission(IPermission target, Type expected) { }
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0x9A298 Offset: 0x9A298 VA: 0x9A298
public interface IPermission : ISecurityEncodable // TypeDefIndex: 758
{}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0x9A2AC Offset: 0x9A2AC VA: 0x9A2AC
public interface ISecurityEncodable // TypeDefIndex: 759
{}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0x9A2C0 Offset: 0x9A2C0 VA: 0x9A2C0
public interface IStackWalk // TypeDefIndex: 760
{}

// Namespace: System.Security
[Serializable]
public class PermissionSet // TypeDefIndex: 761
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x9B39C Offset: 0x9B39C VA: 0x9B39C
	private bool <DeclarativeSecurity>k__BackingField; // 0x8

	// Properties
	internal bool DeclarativeSecurity { set; }

	// Methods

	// RVA: 0x4400C4 Offset: 0x4400C4 VA: 0x4400C4
	public void .ctor() { }

	// RVA: 0x4400CC Offset: 0x4400CC VA: 0x4400CC
	internal void .ctor(string xml) { }

	[CompilerGeneratedAttribute] // RVA: 0x9CE14 Offset: 0x9CE14 VA: 0x9CE14
	// RVA: 0x4400D4 Offset: 0x4400D4 VA: 0x4400D4
	internal void set_DeclarativeSecurity(bool value) { }

	// RVA: 0x4400DC Offset: 0x4400DC VA: 0x4400DC
	internal static PermissionSet CreateFromBinaryFormat(byte[] data) { }
}

// Namespace: System.Security
public sealed class SecurityContext // TypeDefIndex: 762
{
	// Fields
	private bool _capture; // 0x8
	private IntPtr _winid; // 0xC
	private CompressedStack _stack; // 0x10
	private bool _suppressFlow; // 0x14

	// Properties
	internal bool FlowSuppressed { get; }
	internal CompressedStack CompressedStack { get; }

	// Methods

	// RVA: 0x442D78 Offset: 0x442D78 VA: 0x442D78
	internal void .ctor() { }

	// RVA: 0x442D80 Offset: 0x442D80 VA: 0x442D80
	internal void .ctor(SecurityContext sc) { }

	// RVA: 0x442DEC Offset: 0x442DEC VA: 0x442DEC
	public static SecurityContext Capture() { }

	// RVA: 0x442F48 Offset: 0x442F48 VA: 0x442F48
	internal bool get_FlowSuppressed() { }

	// RVA: 0x442F50 Offset: 0x442F50 VA: 0x442F50
	internal CompressedStack get_CompressedStack() { }
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0x9A2D4 Offset: 0x9A2D4 VA: 0x9A2D4
[Serializable]
public sealed class SecurityElement // TypeDefIndex: 763
{
	// Fields
	private string text; // 0x8
	private string tag; // 0xC
	private ArrayList attributes; // 0x10
	private ArrayList children; // 0x14
	private static readonly char[] invalid_tag_chars; // 0x0
	private static readonly char[] invalid_text_chars; // 0x4
	private static readonly char[] invalid_attr_name_chars; // 0x8
	private static readonly char[] invalid_attr_value_chars; // 0xC
	private static readonly char[] invalid_chars; // 0x10

	// Properties
	public ArrayList Children { get; }
	public string Tag { get; }
	public string Text { set; }

	// Methods

	// RVA: 0x441EDC Offset: 0x441EDC VA: 0x441EDC
	public void .ctor(string tag) { }

	// RVA: 0x441EE4 Offset: 0x441EE4 VA: 0x441EE4
	public void .ctor(string tag, string text) { }

	// RVA: 0x4435C8 Offset: 0x4435C8 VA: 0x4435C8
	private static void .cctor() { }

	// RVA: 0x4438F0 Offset: 0x4438F0 VA: 0x4438F0
	public ArrayList get_Children() { }

	// RVA: 0x4438F8 Offset: 0x4438F8 VA: 0x4438F8
	public string get_Tag() { }

	// RVA: 0x44344C Offset: 0x44344C VA: 0x44344C
	public void set_Text(string value) { }

	// RVA: 0x440648 Offset: 0x440648 VA: 0x440648
	public void AddAttribute(string name, string value) { }

	// RVA: 0x442094 Offset: 0x442094 VA: 0x442094
	public void AddChild(SecurityElement child) { }

	// RVA: 0x4443F0 Offset: 0x4443F0 VA: 0x4443F0
	public static string Escape(string str) { }

	// RVA: 0x4439B8 Offset: 0x4439B8 VA: 0x4439B8
	private static string Unescape(string str) { }

	// RVA: 0x4447BC Offset: 0x4447BC VA: 0x4447BC
	public static bool IsValidAttributeName(string name) { }

	// RVA: 0x444874 Offset: 0x444874 VA: 0x444874
	public static bool IsValidAttributeValue(string value) { }

	// RVA: 0x442F58 Offset: 0x442F58 VA: 0x442F58
	public static bool IsValidTag(string tag) { }

	// RVA: 0x443900 Offset: 0x443900 VA: 0x443900
	public static bool IsValidText(string text) { }

	// RVA: 0x44492C Offset: 0x44492C VA: 0x44492C
	public SecurityElement SearchForChildByTag(string tag) { }

	// RVA: 0x4421A0 Offset: 0x4421A0 VA: 0x4421A0 Slot: 3
	public override string ToString() { }

	// RVA: 0x444B24 Offset: 0x444B24 VA: 0x444B24
	private void ToXml(ref StringBuilder s, int level) { }

	// RVA: 0x443C38 Offset: 0x443C38 VA: 0x443C38
	internal SecurityElement.SecurityAttribute GetAttribute(string name) { }
}

// Namespace: 
internal class SecurityElement.SecurityAttribute // TypeDefIndex: 764
{
	// Fields
	private string _name; // 0x8
	private string _value; // 0xC

	// Properties
	public string Name { get; }
	public string Value { get; }

	// Methods

	// RVA: 0x444190 Offset: 0x444190 VA: 0x444190
	public void .ctor(string name, string value) { }

	// RVA: 0x4453B4 Offset: 0x4453B4 VA: 0x4453B4
	public string get_Name() { }

	// RVA: 0x4453BC Offset: 0x4453BC VA: 0x4453BC
	public string get_Value() { }
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0x9A2E8 Offset: 0x9A2E8 VA: 0x9A2E8
[Serializable]
public class SecurityException : SystemException // TypeDefIndex: 765
{
	// Fields
	private string permissionState; // 0x34
	private Type permissionType; // 0x38
	private string _granted; // 0x3C
	private string _refused; // 0x40
	private object _demanded; // 0x44
	private IPermission _firstperm; // 0x48
	private MethodInfo _method; // 0x4C
	private Evidence _evidence; // 0x50

	// Properties
	[ComVisibleAttribute] // RVA: 0x9E12C Offset: 0x9E12C VA: 0x9E12C
	public object Demanded { get; }
	public IPermission FirstPermissionThatFailed { get; }
	public string PermissionState { get; }
	public Type PermissionType { get; }
	public string GrantedSet { get; }
	public string RefusedSet { get; }

	// Methods

	// RVA: 0x4453C4 Offset: 0x4453C4 VA: 0x4453C4
	public void .ctor() { }

	// RVA: 0x442244 Offset: 0x442244 VA: 0x442244
	public void .ctor(string message) { }

	// RVA: 0x44548C Offset: 0x44548C VA: 0x44548C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x445688 Offset: 0x445688 VA: 0x445688
	public object get_Demanded() { }

	// RVA: 0x445690 Offset: 0x445690 VA: 0x445690
	public IPermission get_FirstPermissionThatFailed() { }

	// RVA: 0x445698 Offset: 0x445698 VA: 0x445698
	public string get_PermissionState() { }

	// RVA: 0x4456A0 Offset: 0x4456A0 VA: 0x4456A0
	public Type get_PermissionType() { }

	// RVA: 0x4456A8 Offset: 0x4456A8 VA: 0x4456A8
	public string get_GrantedSet() { }

	// RVA: 0x4456B0 Offset: 0x4456B0 VA: 0x4456B0
	public string get_RefusedSet() { }

	// RVA: 0x4456B8 Offset: 0x4456B8 VA: 0x4456B8 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x4457F4 Offset: 0x4457F4 VA: 0x4457F4 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Security
internal struct RuntimeDeclSecurityEntry // TypeDefIndex: 766
{
	// Fields
	public IntPtr blob; // 0x0
	public int size; // 0x4
	public int index; // 0x8
}

// Namespace: System.Security
internal class RuntimeSecurityFrame // TypeDefIndex: 767
{
	// Fields
	public AppDomain domain; // 0x8
	public MethodInfo method; // 0xC
	public RuntimeDeclSecurityEntry assert; // 0x10
	public RuntimeDeclSecurityEntry deny; // 0x1C
	public RuntimeDeclSecurityEntry permitonly; // 0x28
}

// Namespace: System.Security
internal struct SecurityFrame // TypeDefIndex: 768
{
	// Fields
	private AppDomain _domain; // 0x0
	private MethodInfo _method; // 0x4
	private PermissionSet _assert; // 0x8
	private PermissionSet _deny; // 0xC
	private PermissionSet _permitonly; // 0x10

	// Properties
	public Assembly Assembly { get; }
	public AppDomain Domain { get; }

	// Methods

	// RVA: 0xCA35C Offset: 0xCA35C VA: 0xCA35C
	internal void .ctor(RuntimeSecurityFrame frame) { }

	// RVA: 0x4465AC Offset: 0x4465AC VA: 0x4465AC
	private static Array _GetSecurityStack(int skip) { }

	// RVA: 0xCA374 Offset: 0xCA374 VA: 0xCA374
	internal void InitFromRuntimeFrame(RuntimeSecurityFrame frame) { }

	// RVA: 0xCA37C Offset: 0xCA37C VA: 0xCA37C
	public Assembly get_Assembly() { }

	// RVA: 0xCA384 Offset: 0xCA384 VA: 0xCA384
	public AppDomain get_Domain() { }

	// RVA: 0xCA38C Offset: 0xCA38C VA: 0xCA38C Slot: 3
	public override string ToString() { }

	// RVA: 0x446C94 Offset: 0x446C94 VA: 0x446C94
	public static ArrayList GetStack(int skipFrames) { }
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0x9A2FC Offset: 0x9A2FC VA: 0x9A2FC
public static class SecurityManager // TypeDefIndex: 769
{
	// Fields
	private static object _lockObject; // 0x0
	private static Hashtable _declsecCache; // 0x4
	private static SecurityPermission _execution; // 0x8

	// Properties
	[ObsoleteAttribute] // RVA: 0x9E140 Offset: 0x9E140 VA: 0x9E140
	public static bool SecurityEnabled { get; }

	// Methods

	// RVA: 0x446EA0 Offset: 0x446EA0 VA: 0x446EA0
	private static void .cctor() { }

	// RVA: 0x446F90 Offset: 0x446F90 VA: 0x446F90
	public static bool get_SecurityEnabled() { }

	// RVA: 0x4465B0 Offset: 0x4465B0 VA: 0x4465B0
	internal static PermissionSet Decode(IntPtr permissions, int length) { }

	// RVA: 0x446F94 Offset: 0x446F94 VA: 0x446F94
	internal static PermissionSet Decode(byte[] encodedPermissions) { }
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0x9A310 Offset: 0x9A310 VA: 0x9A310
[AttributeUsageAttribute] // RVA: 0x9A310 Offset: 0x9A310 VA: 0x9A310
public sealed class UnverifiableCodeAttribute : Attribute // TypeDefIndex: 770
{
	// Methods

	// RVA: 0x44713C Offset: 0x44713C VA: 0x44713C
	public void .ctor() { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x9A36C Offset: 0x9A36C VA: 0x9A36C
[MonoTODOAttribute] // RVA: 0x9A36C Offset: 0x9A36C VA: 0x9A36C
[Serializable]
public class ASCIIEncoding : Encoding // TypeDefIndex: 771
{
	// Methods

	// RVA: 0x4527F4 Offset: 0x4527F4 VA: 0x4527F4
	public void .ctor() { }

	// RVA: 0x4528B4 Offset: 0x4528B4 VA: 0x4528B4 Slot: 5
	public override int GetByteCount(char[] chars, int index, int count) { }

	// RVA: 0x452AB0 Offset: 0x452AB0 VA: 0x452AB0 Slot: 6
	public override int GetByteCount(string chars) { }

	// RVA: 0x452B5C Offset: 0x452B5C VA: 0x452B5C Slot: 8
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x452B9C Offset: 0x452B9C VA: 0x452B9C
	private int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, ref EncoderFallbackBuffer buffer, ref char[] fallback_chars) { }

	// RVA: 0x4532F0 Offset: 0x4532F0 VA: 0x4532F0 Slot: 9
	public override int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x453330 Offset: 0x453330 VA: 0x453330
	private int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex, ref EncoderFallbackBuffer buffer, ref char[] fallback_chars) { }

	// RVA: 0x453A3C Offset: 0x453A3C VA: 0x453A3C Slot: 13
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	// RVA: 0x453C38 Offset: 0x453C38 VA: 0x453C38 Slot: 14
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	// RVA: 0x453C6C Offset: 0x453C6C VA: 0x453C6C
	private int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, ref DecoderFallbackBuffer buffer) { }

	// RVA: 0x454198 Offset: 0x454198 VA: 0x454198 Slot: 18
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x454290 Offset: 0x454290 VA: 0x454290 Slot: 19
	public override int GetMaxCharCount(int byteCount) { }

	// RVA: 0x454388 Offset: 0x454388 VA: 0x454388 Slot: 21
	public override string GetString(byte[] bytes, int byteIndex, int byteCount) { }

	[CLSCompliantAttribute] // RVA: 0x9CE24 Offset: 0x9CE24 VA: 0x9CE24
	[ComVisibleAttribute] // RVA: 0x9CE24 Offset: 0x9CE24 VA: 0x9CE24
	// RVA: 0x454650 Offset: 0x454650 VA: 0x454650 Slot: 24
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }

	[CLSCompliantAttribute] // RVA: 0x9CE5C Offset: 0x9CE5C VA: 0x9CE5C
	[ComVisibleAttribute] // RVA: 0x9CE5C Offset: 0x9CE5C VA: 0x9CE5C
	// RVA: 0x454870 Offset: 0x454870 VA: 0x454870 Slot: 23
	public override int GetByteCount(char* chars, int count) { }

	[MonoTODOAttribute] // RVA: 0x9CE94 Offset: 0x9CE94 VA: 0x9CE94
	[ComVisibleAttribute] // RVA: 0x9CE94 Offset: 0x9CE94 VA: 0x9CE94
	// RVA: 0x454878 Offset: 0x454878 VA: 0x454878 Slot: 16
	public override Decoder GetDecoder() { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x9A3B8 Offset: 0x9A3B8 VA: 0x9A3B8
[Serializable]
public abstract class Decoder // TypeDefIndex: 772
{
	// Fields
	private DecoderFallback fallback; // 0x8
	private DecoderFallbackBuffer fallback_buffer; // 0xC

	// Properties
	[ComVisibleAttribute] // RVA: 0x9E1A4 Offset: 0x9E1A4 VA: 0x9E1A4
	public DecoderFallback Fallback { set; }
	[ComVisibleAttribute] // RVA: 0x9E1B8 Offset: 0x9E1B8 VA: 0x9E1B8
	public DecoderFallbackBuffer FallbackBuffer { get; }

	// Methods

	// RVA: 0x454880 Offset: 0x454880 VA: 0x454880
	protected void .ctor() { }

	// RVA: 0x4548FC Offset: 0x4548FC VA: 0x4548FC
	public void set_Fallback(DecoderFallback value) { }

	// RVA: 0x4549A0 Offset: 0x4549A0 VA: 0x4549A0
	public DecoderFallbackBuffer get_FallbackBuffer() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
}

// Namespace: System.Text
[Serializable]
public sealed class DecoderExceptionFallback : DecoderFallback // TypeDefIndex: 773
{
	// Methods

	// RVA: 0x4549E8 Offset: 0x4549E8 VA: 0x4549E8
	public void .ctor() { }

	// RVA: 0x454A74 Offset: 0x454A74 VA: 0x454A74 Slot: 4
	public override DecoderFallbackBuffer CreateFallbackBuffer() { }

	// RVA: 0x454AE8 Offset: 0x454AE8 VA: 0x454AE8 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x454B64 Offset: 0x454B64 VA: 0x454B64 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
public sealed class DecoderExceptionFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 774
{
	// Properties
	public override int Remaining { get; }

	// Methods

	// RVA: 0x454AE0 Offset: 0x454AE0 VA: 0x454AE0
	public void .ctor() { }

	// RVA: 0x454B6C Offset: 0x454B6C VA: 0x454B6C Slot: 4
	public override int get_Remaining() { }

	// RVA: 0x454B74 Offset: 0x454B74 VA: 0x454B74 Slot: 5
	public override bool Fallback(byte[] bytesUnknown, int index) { }

	// RVA: 0x454C1C Offset: 0x454C1C VA: 0x454C1C Slot: 6
	public override char GetNextChar() { }
}

// Namespace: System.Text
[Serializable]
public abstract class DecoderFallback // TypeDefIndex: 775
{
	// Fields
	private static DecoderFallback exception_fallback; // 0x0
	private static DecoderFallback replacement_fallback; // 0x4
	private static DecoderFallback standard_safe_fallback; // 0x8

	// Properties
	public static DecoderFallback ExceptionFallback { get; }
	public static DecoderFallback ReplacementFallback { get; }
	internal static DecoderFallback StandardSafeFallback { get; }

	// Methods

	// RVA: 0x454A6C Offset: 0x454A6C VA: 0x454A6C
	protected void .ctor() { }

	// RVA: 0x454C24 Offset: 0x454C24 VA: 0x454C24
	private static void .cctor() { }

	// RVA: 0x454D00 Offset: 0x454D00 VA: 0x454D00
	public static DecoderFallback get_ExceptionFallback() { }

	// RVA: 0x454D8C Offset: 0x454D8C VA: 0x454D8C
	public static DecoderFallback get_ReplacementFallback() { }

	// RVA: 0x454E18 Offset: 0x454E18 VA: 0x454E18
	internal static DecoderFallback get_StandardSafeFallback() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract DecoderFallbackBuffer CreateFallbackBuffer();
}

// Namespace: System.Text
public abstract class DecoderFallbackBuffer // TypeDefIndex: 776
{
	// Properties
	public abstract int Remaining { get; }

	// Methods

	// RVA: 0x414460 Offset: 0x414460 VA: 0x414460
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_Remaining();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool Fallback(byte[] bytesUnknown, int index);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract char GetNextChar();

	// RVA: 0x414468 Offset: 0x414468 VA: 0x414468 Slot: 7
	public virtual void Reset() { }
}

// Namespace: System.Text
[Serializable]
public sealed class DecoderFallbackException : ArgumentException // TypeDefIndex: 777
{
	// Fields
	private byte[] bytes_unknown; // 0x38
	private int index; // 0x3C

	// Methods

	// RVA: 0x41446C Offset: 0x41446C VA: 0x41446C
	public void .ctor() { }

	// RVA: 0x414480 Offset: 0x414480 VA: 0x414480
	public void .ctor(string message) { }

	// RVA: 0x414490 Offset: 0x414490 VA: 0x414490
	public void .ctor(string message, byte[] bytesUnknown, int index) { }
}

// Namespace: System.Text
[Serializable]
public sealed class DecoderReplacementFallback : DecoderFallback // TypeDefIndex: 778
{
	// Fields
	private string replacement; // 0x8

	// Properties
	public string DefaultString { get; }

	// Methods

	// RVA: 0x4144C4 Offset: 0x4144C4 VA: 0x4144C4
	public void .ctor() { }

	[MonoTODOAttribute] // RVA: 0x9CF0C Offset: 0x9CF0C VA: 0x9CF0C
	// RVA: 0x414528 Offset: 0x414528 VA: 0x414528
	public void .ctor(string replacement) { }

	// RVA: 0x4145FC Offset: 0x4145FC VA: 0x4145FC
	public string get_DefaultString() { }

	// RVA: 0x414604 Offset: 0x414604 VA: 0x414604 Slot: 4
	public override DecoderFallbackBuffer CreateFallbackBuffer() { }

	// RVA: 0x41473C Offset: 0x41473C VA: 0x41473C Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x4147FC Offset: 0x4147FC VA: 0x4147FC Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
public sealed class DecoderReplacementFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 779
{
	// Fields
	private bool fallback_assigned; // 0x8
	private int current; // 0xC
	private string replacement; // 0x10

	// Properties
	public override int Remaining { get; }

	// Methods

	// RVA: 0x414674 Offset: 0x414674 VA: 0x414674
	public void .ctor(DecoderReplacementFallback fallback) { }

	// RVA: 0x414828 Offset: 0x414828 VA: 0x414828 Slot: 4
	public override int get_Remaining() { }

	// RVA: 0x414874 Offset: 0x414874 VA: 0x414874 Slot: 5
	public override bool Fallback(byte[] bytesUnknown, int index) { }

	// RVA: 0x414A18 Offset: 0x414A18 VA: 0x414A18 Slot: 6
	public override char GetNextChar() { }

	// RVA: 0x414A98 Offset: 0x414A98 VA: 0x414A98 Slot: 7
	public override void Reset() { }
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderExceptionFallback : EncoderFallback // TypeDefIndex: 780
{
	// Methods

	// RVA: 0x414AA8 Offset: 0x414AA8 VA: 0x414AA8
	public void .ctor() { }

	// RVA: 0x414B34 Offset: 0x414B34 VA: 0x414B34 Slot: 4
	public override EncoderFallbackBuffer CreateFallbackBuffer() { }

	// RVA: 0x414BA8 Offset: 0x414BA8 VA: 0x414BA8 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x414C24 Offset: 0x414C24 VA: 0x414C24 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
public sealed class EncoderExceptionFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 781
{
	// Properties
	public override int Remaining { get; }

	// Methods

	// RVA: 0x414BA0 Offset: 0x414BA0 VA: 0x414BA0
	public void .ctor() { }

	// RVA: 0x414C34 Offset: 0x414C34 VA: 0x414C34 Slot: 4
	public override int get_Remaining() { }

	// RVA: 0x414C3C Offset: 0x414C3C VA: 0x414C3C Slot: 5
	public override bool Fallback(char charUnknown, int index) { }

	// RVA: 0x414D08 Offset: 0x414D08 VA: 0x414D08 Slot: 6
	public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index) { }

	// RVA: 0x414DE8 Offset: 0x414DE8 VA: 0x414DE8 Slot: 7
	public override char GetNextChar() { }
}

// Namespace: System.Text
[Serializable]
public abstract class EncoderFallback // TypeDefIndex: 782
{
	// Fields
	private static EncoderFallback exception_fallback; // 0x0
	private static EncoderFallback replacement_fallback; // 0x4
	private static EncoderFallback standard_safe_fallback; // 0x8

	// Properties
	public static EncoderFallback ExceptionFallback { get; }
	public static EncoderFallback ReplacementFallback { get; }
	internal static EncoderFallback StandardSafeFallback { get; }

	// Methods

	// RVA: 0x414B2C Offset: 0x414B2C VA: 0x414B2C
	protected void .ctor() { }

	// RVA: 0x414DF0 Offset: 0x414DF0 VA: 0x414DF0
	private static void .cctor() { }

	// RVA: 0x414FFC Offset: 0x414FFC VA: 0x414FFC
	public static EncoderFallback get_ExceptionFallback() { }

	// RVA: 0x415088 Offset: 0x415088 VA: 0x415088
	public static EncoderFallback get_ReplacementFallback() { }

	// RVA: 0x415114 Offset: 0x415114 VA: 0x415114
	internal static EncoderFallback get_StandardSafeFallback() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract EncoderFallbackBuffer CreateFallbackBuffer();
}

// Namespace: System.Text
public abstract class EncoderFallbackBuffer // TypeDefIndex: 783
{
	// Properties
	public abstract int Remaining { get; }

	// Methods

	// RVA: 0x414C2C Offset: 0x414C2C VA: 0x414C2C
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_Remaining();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool Fallback(char charUnknown, int index);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract char GetNextChar();
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderFallbackException : ArgumentException // TypeDefIndex: 784
{
	// Fields
	private char char_unknown; // 0x38
	private char char_unknown_high; // 0x3A
	private char char_unknown_low; // 0x3C
	private int index; // 0x40

	// Methods

	// RVA: 0x4151A0 Offset: 0x4151A0 VA: 0x4151A0
	public void .ctor() { }

	// RVA: 0x4151B4 Offset: 0x4151B4 VA: 0x4151B4
	public void .ctor(string message) { }

	// RVA: 0x414CD0 Offset: 0x414CD0 VA: 0x414CD0
	internal void .ctor(char charUnknown, int index) { }

	// RVA: 0x414DA8 Offset: 0x414DA8 VA: 0x414DA8
	internal void .ctor(char charUnknownHigh, char charUnknownLow, int index) { }
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderReplacementFallback : EncoderFallback // TypeDefIndex: 785
{
	// Fields
	private string replacement; // 0x8

	// Properties
	public string DefaultString { get; }

	// Methods

	// RVA: 0x414EC4 Offset: 0x414EC4 VA: 0x414EC4
	public void .ctor() { }

	[MonoTODOAttribute] // RVA: 0x9CF1C Offset: 0x9CF1C VA: 0x9CF1C
	// RVA: 0x414F28 Offset: 0x414F28 VA: 0x414F28
	public void .ctor(string replacement) { }

	// RVA: 0x4151C4 Offset: 0x4151C4 VA: 0x4151C4
	public string get_DefaultString() { }

	// RVA: 0x4151CC Offset: 0x4151CC VA: 0x4151CC Slot: 4
	public override EncoderFallbackBuffer CreateFallbackBuffer() { }

	// RVA: 0x415304 Offset: 0x415304 VA: 0x415304 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x4153C4 Offset: 0x4153C4 VA: 0x4153C4 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
public sealed class EncoderReplacementFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 786
{
	// Fields
	private string replacement; // 0x8
	private int current; // 0xC
	private bool fallback_assigned; // 0x10

	// Properties
	public override int Remaining { get; }

	// Methods

	// RVA: 0x41523C Offset: 0x41523C VA: 0x41523C
	public void .ctor(EncoderReplacementFallback fallback) { }

	// RVA: 0x4153F0 Offset: 0x4153F0 VA: 0x4153F0 Slot: 4
	public override int get_Remaining() { }

	// RVA: 0x415428 Offset: 0x415428 VA: 0x415428 Slot: 5
	public override bool Fallback(char charUnknown, int index) { }

	// RVA: 0x41557C Offset: 0x41557C VA: 0x41557C Slot: 6
	public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index) { }

	// RVA: 0x415430 Offset: 0x415430 VA: 0x415430
	private bool Fallback(int index) { }

	// RVA: 0x415584 Offset: 0x415584 VA: 0x415584 Slot: 7
	public override char GetNextChar() { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x9A3CC Offset: 0x9A3CC VA: 0x9A3CC
[Serializable]
public abstract class Encoding : ICloneable // TypeDefIndex: 787
{
	// Fields
	internal int codePage; // 0x8
	internal int windows_code_page; // 0xC
	private bool is_readonly; // 0x10
	private DecoderFallback decoder_fallback; // 0x14
	private EncoderFallback encoder_fallback; // 0x18
	private static Assembly i18nAssembly; // 0x0
	private static bool i18nDisabled; // 0x4
	private static readonly object[] encodings; // 0x8
	internal string body_name; // 0x1C
	internal string encoding_name; // 0x20
	internal string header_name; // 0x24
	internal bool is_mail_news_display; // 0x28
	internal bool is_mail_news_save; // 0x29
	internal bool is_browser_save; // 0x2A
	internal bool is_browser_display; // 0x2B
	internal string web_name; // 0x2C
	private static Encoding asciiEncoding; // 0xC
	private static Encoding bigEndianEncoding; // 0x10
	private static Encoding defaultEncoding; // 0x14
	private static Encoding utf7Encoding; // 0x18
	private static Encoding utf8EncodingWithMarkers; // 0x1C
	private static Encoding utf8EncodingWithoutMarkers; // 0x20
	private static Encoding unicodeEncoding; // 0x24
	private static Encoding isoLatin1Encoding; // 0x28
	private static Encoding utf8EncodingUnsafe; // 0x2C
	private static Encoding utf32Encoding; // 0x30
	private static Encoding bigEndianUTF32Encoding; // 0x34
	private static readonly object lockobj; // 0x38

	// Properties
	[ComVisibleAttribute] // RVA: 0x9E1CC Offset: 0x9E1CC VA: 0x9E1CC
	public bool IsReadOnly { get; }
	[ComVisibleAttribute] // RVA: 0x9E1E0 Offset: 0x9E1E0 VA: 0x9E1E0
	public DecoderFallback DecoderFallback { get; set; }
	[ComVisibleAttribute] // RVA: 0x9E1F4 Offset: 0x9E1F4 VA: 0x9E1F4
	public EncoderFallback EncoderFallback { get; }
	public static Encoding ASCII { get; }
	public static Encoding BigEndianUnicode { get; }
	public static Encoding Default { get; }
	private static Encoding ISOLatin1 { get; }
	public static Encoding UTF7 { get; }
	public static Encoding UTF8 { get; }
	internal static Encoding UTF8Unmarked { get; }
	internal static Encoding UTF8UnmarkedUnsafe { get; }
	public static Encoding Unicode { get; }
	public static Encoding UTF32 { get; }
	internal static Encoding BigEndianUTF32 { get; }

	// Methods

	// RVA: 0x4155F8 Offset: 0x4155F8 VA: 0x4155F8
	protected void .ctor() { }

	// RVA: 0x415608 Offset: 0x415608 VA: 0x415608
	protected void .ctor(int codePage) { }

	// RVA: 0x4157E0 Offset: 0x4157E0 VA: 0x4157E0
	private static void .cctor() { }

	// RVA: 0x416B08 Offset: 0x416B08 VA: 0x416B08
	internal static string _(string arg) { }

	// RVA: 0x416B0C Offset: 0x416B0C VA: 0x416B0C
	public bool get_IsReadOnly() { }

	// RVA: 0x416B14 Offset: 0x416B14 VA: 0x416B14
	public DecoderFallback get_DecoderFallback() { }

	// RVA: 0x416B1C Offset: 0x416B1C VA: 0x416B1C
	public void set_DecoderFallback(DecoderFallback value) { }

	// RVA: 0x416C08 Offset: 0x416C08 VA: 0x416C08
	public EncoderFallback get_EncoderFallback() { }

	// RVA: 0x416C10 Offset: 0x416C10 VA: 0x416C10
	internal void SetFallbackInternal(EncoderFallback e, DecoderFallback d) { }

	// RVA: 0x416C24 Offset: 0x416C24 VA: 0x416C24 Slot: 0
	public override bool Equals(object value) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract int GetByteCount(char[] chars, int index, int count);

	// RVA: 0x416D48 Offset: 0x416D48 VA: 0x416D48 Slot: 6
	public virtual int GetByteCount(string s) { }

	// RVA: 0x416E48 Offset: 0x416E48 VA: 0x416E48 Slot: 7
	public virtual int GetByteCount(char[] chars) { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);

	// RVA: 0x416F24 Offset: 0x416F24 VA: 0x416F24 Slot: 9
	public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x417240 Offset: 0x417240 VA: 0x417240 Slot: 10
	public virtual byte[] GetBytes(string s) { }

	// RVA: 0x4173DC Offset: 0x4173DC VA: 0x4173DC Slot: 11
	public virtual byte[] GetBytes(char[] chars, int index, int count) { }

	// RVA: 0x4174B0 Offset: 0x4174B0 VA: 0x4174B0 Slot: 12
	public virtual byte[] GetBytes(char[] chars) { }

	// RVA: -1 Offset: -1 Slot: 13
	public abstract int GetCharCount(byte[] bytes, int index, int count);

	// RVA: -1 Offset: -1 Slot: 14
	public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);

	// RVA: 0x417598 Offset: 0x417598 VA: 0x417598 Slot: 15
	public virtual char[] GetChars(byte[] bytes, int index, int count) { }

	// RVA: 0x41766C Offset: 0x41766C VA: 0x41766C Slot: 16
	public virtual Decoder GetDecoder() { }

	// RVA: 0x417724 Offset: 0x417724 VA: 0x417724
	private static object InvokeI18N(string name, object[] args) { }

	// RVA: 0x417E88 Offset: 0x417E88 VA: 0x417E88
	public static Encoding GetEncoding(int codepage) { }

	[ComVisibleAttribute] // RVA: 0x9CF2C Offset: 0x9CF2C VA: 0x9CF2C
	// RVA: 0x419DD0 Offset: 0x419DD0 VA: 0x419DD0 Slot: 17
	public virtual object Clone() { }

	// RVA: 0x419ECC Offset: 0x419ECC VA: 0x419ECC
	public static Encoding GetEncoding(string name) { }

	// RVA: 0x41A684 Offset: 0x41A684 VA: 0x41A684 Slot: 2
	public override int GetHashCode() { }

	// RVA: -1 Offset: -1 Slot: 18
	public abstract int GetMaxByteCount(int charCount);

	// RVA: -1 Offset: -1 Slot: 19
	public abstract int GetMaxCharCount(int byteCount);

	// RVA: 0x41A704 Offset: 0x41A704 VA: 0x41A704 Slot: 20
	public virtual byte[] GetPreamble() { }

	// RVA: 0x41A764 Offset: 0x41A764 VA: 0x41A764 Slot: 21
	public virtual string GetString(byte[] bytes, int index, int count) { }

	// RVA: 0x41A79C Offset: 0x41A79C VA: 0x41A79C Slot: 22
	public virtual string GetString(byte[] bytes) { }

	// RVA: 0x418AC8 Offset: 0x418AC8 VA: 0x418AC8
	public static Encoding get_ASCII() { }

	// RVA: 0x419864 Offset: 0x419864 VA: 0x419864
	public static Encoding get_BigEndianUnicode() { }

	// RVA: 0x41A894 Offset: 0x41A894 VA: 0x41A894
	internal static string InternalCodePage(ref int code_page) { }

	// RVA: 0x41860C Offset: 0x41860C VA: 0x41860C
	public static Encoding get_Default() { }

	// RVA: 0x419AB0 Offset: 0x419AB0 VA: 0x419AB0
	private static Encoding get_ISOLatin1() { }

	// RVA: 0x418D04 Offset: 0x418D04 VA: 0x418D04
	public static Encoding get_UTF7() { }

	// RVA: 0x418F40 Offset: 0x418F40 VA: 0x418F40
	public static Encoding get_UTF8() { }

	// RVA: 0x41A898 Offset: 0x41A898 VA: 0x41A898
	internal static Encoding get_UTF8Unmarked() { }

	// RVA: 0x41ACEC Offset: 0x41ACEC VA: 0x41ACEC
	internal static Encoding get_UTF8UnmarkedUnsafe() { }

	// RVA: 0x419618 Offset: 0x419618 VA: 0x419618
	public static Encoding get_Unicode() { }

	// RVA: 0x419180 Offset: 0x419180 VA: 0x419180
	public static Encoding get_UTF32() { }

	// RVA: 0x4193CC Offset: 0x4193CC VA: 0x4193CC
	internal static Encoding get_BigEndianUTF32() { }

	[CLSCompliantAttribute] // RVA: 0x9CF40 Offset: 0x9CF40 VA: 0x9CF40
	[ComVisibleAttribute] // RVA: 0x9CF40 Offset: 0x9CF40 VA: 0x9CF40
	// RVA: 0x41B054 Offset: 0x41B054 VA: 0x41B054 Slot: 23
	public virtual int GetByteCount(char* chars, int count) { }

	[CLSCompliantAttribute] // RVA: 0x9CF78 Offset: 0x9CF78 VA: 0x9CF78
	[ComVisibleAttribute] // RVA: 0x9CF78 Offset: 0x9CF78 VA: 0x9CF78
	// RVA: 0x41B1E4 Offset: 0x41B1E4 VA: 0x41B1E4 Slot: 24
	public virtual int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }
}

// Namespace: 
private sealed class Encoding.ForwardingDecoder : Decoder // TypeDefIndex: 788
{
	// Fields
	private Encoding encoding; // 0x10

	// Methods

	// RVA: 0x4176DC Offset: 0x4176DC VA: 0x4176DC
	public void .ctor(Encoding enc) { }

	// RVA: 0x41B4E8 Offset: 0x41B4E8 VA: 0x41B4E8 Slot: 4
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
}

// Namespace: System.Text
[Serializable]
internal class Latin1Encoding : Encoding // TypeDefIndex: 789
{
	// Methods

	// RVA: 0x41AAD8 Offset: 0x41AAD8 VA: 0x41AAD8
	public void .ctor() { }

	// RVA: 0x41B550 Offset: 0x41B550 VA: 0x41B550 Slot: 5
	public override int GetByteCount(char[] chars, int index, int count) { }

	// RVA: 0x41B734 Offset: 0x41B734 VA: 0x41B734 Slot: 6
	public override int GetByteCount(string s) { }

	// RVA: 0x41B7EC Offset: 0x41B7EC VA: 0x41B7EC Slot: 8
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x41B82C Offset: 0x41B82C VA: 0x41B82C
	private int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, ref EncoderFallbackBuffer buffer, ref char[] fallback_chars) { }

	// RVA: 0x41BF44 Offset: 0x41BF44 VA: 0x41BF44 Slot: 9
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x41BF84 Offset: 0x41BF84 VA: 0x41BF84
	private int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex, ref EncoderFallbackBuffer buffer, ref char[] fallback_chars) { }

	// RVA: 0x41C6B8 Offset: 0x41C6B8 VA: 0x41C6B8 Slot: 13
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	// RVA: 0x41C89C Offset: 0x41C89C VA: 0x41C89C Slot: 14
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	// RVA: 0x41CC68 Offset: 0x41CC68 VA: 0x41CC68 Slot: 18
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x41CD54 Offset: 0x41CD54 VA: 0x41CD54 Slot: 19
	public override int GetMaxCharCount(int byteCount) { }

	// RVA: 0x41CE40 Offset: 0x41CE40 VA: 0x41CE40 Slot: 21
	public override string GetString(byte[] bytes, int index, int count) { }

	// RVA: 0x41D0E8 Offset: 0x41D0E8 VA: 0x41D0E8 Slot: 22
	public override string GetString(byte[] bytes) { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x9A3E0 Offset: 0x9A3E0 VA: 0x9A3E0
[DefaultMemberAttribute] // RVA: 0x9A3E0 Offset: 0x9A3E0 VA: 0x9A3E0
[MonoTODOAttribute] // RVA: 0x9A3E0 Offset: 0x9A3E0 VA: 0x9A3E0
[Serializable]
public sealed class StringBuilder : ISerializable // TypeDefIndex: 790
{
	// Fields
	private const int constDefaultCapacity = 16;
	private int _length; // 0x8
	private string _str; // 0xC
	private string _cached_str; // 0x10
	private int _maxCapacity; // 0x14

	// Properties
	public int Capacity { get; set; }
	public int Length { get; set; }
	public char Chars { get; set; }

	// Methods

	// RVA: 0x41D1C4 Offset: 0x41D1C4 VA: 0x41D1C4
	public void .ctor(string value, int startIndex, int length, int capacity) { }

	// RVA: 0x41D1E8 Offset: 0x41D1E8 VA: 0x41D1E8
	private void .ctor(string value, int startIndex, int length, int capacity, int maxCapacity) { }

	// RVA: 0x41D6C0 Offset: 0x41D6C0 VA: 0x41D6C0
	public void .ctor() { }

	// RVA: 0x41D7A4 Offset: 0x41D7A4 VA: 0x41D7A4
	public void .ctor(int capacity) { }

	// RVA: 0x41D6C8 Offset: 0x41D6C8 VA: 0x41D6C8
	public void .ctor(string value) { }

	// RVA: 0x41D85C Offset: 0x41D85C VA: 0x41D85C
	public void .ctor(string value, int capacity) { }

	// RVA: 0x41D94C Offset: 0x41D94C VA: 0x41D94C
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x41DC04 Offset: 0x41DC04 VA: 0x41DC04 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x41DD4C Offset: 0x41DD4C VA: 0x41DD4C
	public int get_Capacity() { }

	// RVA: 0x41DAE4 Offset: 0x41DAE4 VA: 0x41DAE4
	public void set_Capacity(int value) { }

	// RVA: 0x41E114 Offset: 0x41E114 VA: 0x41E114
	public int get_Length() { }

	// RVA: 0x41E11C Offset: 0x41E11C VA: 0x41E11C
	public void set_Length(int value) { }

	// RVA: 0x41E2F4 Offset: 0x41E2F4 VA: 0x41E2F4
	public char get_Chars(int index) { }

	// RVA: 0x41E3BC Offset: 0x41E3BC VA: 0x41E3BC
	public void set_Chars(int index, char value) { }

	// RVA: 0x41DDB8 Offset: 0x41DDB8 VA: 0x41DDB8 Slot: 3
	public override string ToString() { }

	// RVA: 0x41E49C Offset: 0x41E49C VA: 0x41E49C
	public string ToString(int startIndex, int length) { }

	// RVA: 0x41E58C Offset: 0x41E58C VA: 0x41E58C
	public StringBuilder Remove(int startIndex, int length) { }

	// RVA: 0x41E6CC Offset: 0x41E6CC VA: 0x41E6CC
	public StringBuilder Replace(string oldValue, string newValue) { }

	// RVA: 0x41E6F0 Offset: 0x41E6F0 VA: 0x41E6F0
	public StringBuilder Replace(string oldValue, string newValue, int startIndex, int count) { }

	// RVA: 0x41EAE4 Offset: 0x41EAE4 VA: 0x41EAE4
	public StringBuilder Append(string value) { }

	// RVA: 0x41EC78 Offset: 0x41EC78 VA: 0x41EC78
	public StringBuilder Append(int value) { }

	// RVA: 0x41ECAC Offset: 0x41ECAC VA: 0x41ECAC
	public StringBuilder Append(long value) { }

	// RVA: 0x41ECE0 Offset: 0x41ECE0 VA: 0x41ECE0
	public StringBuilder Append(object value) { }

	// RVA: 0x41ED24 Offset: 0x41ED24 VA: 0x41ED24
	public StringBuilder Append(char value) { }

	// RVA: 0x41E1F4 Offset: 0x41E1F4 VA: 0x41E1F4
	public StringBuilder Append(char value, int repeatCount) { }

	// RVA: 0x41EDB4 Offset: 0x41EDB4 VA: 0x41EDB4
	public StringBuilder Append(char[] value, int startIndex, int charCount) { }

	// RVA: 0x41EF38 Offset: 0x41EF38 VA: 0x41EF38
	public StringBuilder Append(string value, int startIndex, int count) { }

	[ComVisibleAttribute] // RVA: 0x9CFB0 Offset: 0x9CFB0 VA: 0x9CFB0
	// RVA: 0x41F100 Offset: 0x41F100 VA: 0x41F100
	public StringBuilder AppendLine() { }

	[ComVisibleAttribute] // RVA: 0x9CFC4 Offset: 0x9CFC4 VA: 0x9CFC4
	// RVA: 0x41F124 Offset: 0x41F124 VA: 0x41F124
	public StringBuilder AppendLine(string value) { }

	// RVA: 0x41F160 Offset: 0x41F160 VA: 0x41F160
	public StringBuilder AppendFormat(string format, object[] args) { }

	// RVA: 0x41F184 Offset: 0x41F184 VA: 0x41F184
	public StringBuilder AppendFormat(IFormatProvider provider, string format, object[] args) { }

	// RVA: 0x41F230 Offset: 0x41F230 VA: 0x41F230
	public StringBuilder AppendFormat(string format, object arg0) { }

	// RVA: 0x41F31C Offset: 0x41F31C VA: 0x41F31C
	public StringBuilder AppendFormat(string format, object arg0, object arg1) { }

	// RVA: 0x41F45C Offset: 0x41F45C VA: 0x41F45C
	public StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2) { }

	// RVA: 0x41F5F0 Offset: 0x41F5F0 VA: 0x41F5F0
	public StringBuilder Insert(int index, string value) { }

	// RVA: 0x41F788 Offset: 0x41F788 VA: 0x41F788
	public StringBuilder Insert(int index, char value) { }

	// RVA: 0x41F8E8 Offset: 0x41F8E8 VA: 0x41F8E8
	public StringBuilder Insert(int index, string value, int count) { }

	// RVA: 0x41DEEC Offset: 0x41DEEC VA: 0x41DEEC
	private void InternalEnsureCapacity(int size) { }
}

// Namespace: System.Text
[Serializable]
public sealed class UTF32Encoding : Encoding // TypeDefIndex: 791
{
	// Fields
	private bool bigEndian; // 0x30
	private bool byteOrderMark; // 0x31

	// Methods

	// RVA: 0x41FA10 Offset: 0x41FA10 VA: 0x41FA10
	public void .ctor() { }

	// RVA: 0x41B038 Offset: 0x41B038 VA: 0x41B038
	public void .ctor(bool bigEndian, bool byteOrderMark) { }

	// RVA: 0x41FA34 Offset: 0x41FA34 VA: 0x41FA34
	public void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters) { }

	[MonoTODOAttribute] // RVA: 0x9CFD8 Offset: 0x9CFD8 VA: 0x9CFD8
	// RVA: 0x41FC7C Offset: 0x41FC7C VA: 0x41FC7C Slot: 5
	public override int GetByteCount(char[] chars, int index, int count) { }

	[MonoTODOAttribute] // RVA: 0x9D00C Offset: 0x9D00C VA: 0x9D00C
	// RVA: 0x41FF68 Offset: 0x41FF68 VA: 0x41FF68 Slot: 8
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x420794 Offset: 0x420794 VA: 0x420794 Slot: 13
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	// RVA: 0x420978 Offset: 0x420978 VA: 0x420978 Slot: 14
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	// RVA: 0x420EF0 Offset: 0x420EF0 VA: 0x420EF0 Slot: 18
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x420FDC Offset: 0x420FDC VA: 0x420FDC Slot: 19
	public override int GetMaxCharCount(int byteCount) { }

	// RVA: 0x4210C8 Offset: 0x4210C8 VA: 0x4210C8 Slot: 16
	public override Decoder GetDecoder() { }

	// RVA: 0x421170 Offset: 0x421170 VA: 0x421170 Slot: 20
	public override byte[] GetPreamble() { }

	// RVA: 0x4212A4 Offset: 0x4212A4 VA: 0x4212A4 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x421394 Offset: 0x421394 VA: 0x421394 Slot: 2
	public override int GetHashCode() { }

	[CLSCompliantAttribute] // RVA: 0x9D040 Offset: 0x9D040 VA: 0x9D040
	// RVA: 0x4213C0 Offset: 0x4213C0 VA: 0x4213C0 Slot: 23
	public override int GetByteCount(char* chars, int count) { }

	// RVA: 0x421470 Offset: 0x421470 VA: 0x421470 Slot: 6
	public override int GetByteCount(string s) { }

	[CLSCompliantAttribute] // RVA: 0x9D054 Offset: 0x9D054 VA: 0x9D054
	// RVA: 0x421474 Offset: 0x421474 VA: 0x421474 Slot: 24
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }

	// RVA: 0x421494 Offset: 0x421494 VA: 0x421494 Slot: 9
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x4214B8 Offset: 0x4214B8 VA: 0x4214B8 Slot: 21
	public override string GetString(byte[] bytes, int index, int count) { }
}

// Namespace: 
private sealed class UTF32Encoding.UTF32Decoder : Decoder // TypeDefIndex: 792
{
	// Fields
	private bool bigEndian; // 0x10
	private int leftOverByte; // 0x14
	private int leftOverLength; // 0x18

	// Methods

	// RVA: 0x421148 Offset: 0x421148 VA: 0x421148
	public void .ctor(bool bigEndian) { }

	// RVA: 0x4214F0 Offset: 0x4214F0 VA: 0x4214F0 Slot: 4
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x9A454 Offset: 0x9A454 VA: 0x9A454
[MonoTODOAttribute] // RVA: 0x9A454 Offset: 0x9A454 VA: 0x9A454
[Serializable]
public class UTF7Encoding : Encoding // TypeDefIndex: 793
{
	// Fields
	private bool allowOptionals; // 0x30
	private static readonly byte[] encodingRules; // 0x0
	private static readonly sbyte[] base64Values; // 0x4

	// Methods

	// RVA: 0x41AB5C Offset: 0x41AB5C VA: 0x41AB5C
	public void .ctor() { }

	// RVA: 0x421D24 Offset: 0x421D24 VA: 0x421D24
	public void .ctor(bool allowOptionals) { }

	// RVA: 0x421DF0 Offset: 0x421DF0 VA: 0x421DF0
	private static void .cctor() { }

	[ComVisibleAttribute] // RVA: 0x9D068 Offset: 0x9D068 VA: 0x9D068
	// RVA: 0x421ECC Offset: 0x421ECC VA: 0x421ECC Slot: 2
	public override int GetHashCode() { }

	[ComVisibleAttribute] // RVA: 0x9D07C Offset: 0x9D07C VA: 0x9D07C
	// RVA: 0x421EEC Offset: 0x421EEC VA: 0x421EEC Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x422020 Offset: 0x422020 VA: 0x422020
	private static int InternalGetByteCount(char[] chars, int index, int count, bool flush, int leftOver, bool isInShifted, bool allowOptionals) { }

	// RVA: 0x422428 Offset: 0x422428 VA: 0x422428 Slot: 5
	public override int GetByteCount(char[] chars, int index, int count) { }

	// RVA: 0x4224E0 Offset: 0x4224E0 VA: 0x4224E0
	private static int InternalGetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush, ref int leftOver, ref bool isInShifted, bool allowOptionals) { }

	// RVA: 0x4232C0 Offset: 0x4232C0 VA: 0x4232C0 Slot: 8
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x4233A0 Offset: 0x4233A0 VA: 0x4233A0
	private static int InternalGetCharCount(byte[] bytes, int index, int count, int leftOver) { }

	// RVA: 0x423700 Offset: 0x423700 VA: 0x423700 Slot: 13
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	// RVA: 0x42379C Offset: 0x42379C VA: 0x42379C
	private static int InternalGetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, ref int leftOver) { }

	// RVA: 0x424214 Offset: 0x424214 VA: 0x424214 Slot: 14
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	// RVA: 0x42436C Offset: 0x42436C VA: 0x42436C Slot: 18
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x424490 Offset: 0x424490 VA: 0x424490 Slot: 19
	public override int GetMaxCharCount(int byteCount) { }

	// RVA: 0x42457C Offset: 0x42457C VA: 0x42457C Slot: 16
	public override Decoder GetDecoder() { }

	[ComVisibleAttribute] // RVA: 0x9D090 Offset: 0x9D090 VA: 0x9D090
	[CLSCompliantAttribute] // RVA: 0x9D090 Offset: 0x9D090 VA: 0x9D090
	// RVA: 0x424610 Offset: 0x424610 VA: 0x424610 Slot: 23
	public override int GetByteCount(char* chars, int count) { }

	[ComVisibleAttribute] // RVA: 0x9D0C8 Offset: 0x9D0C8 VA: 0x9D0C8
	// RVA: 0x424614 Offset: 0x424614 VA: 0x424614 Slot: 6
	public override int GetByteCount(string s) { }

	[ComVisibleAttribute] // RVA: 0x9D0DC Offset: 0x9D0DC VA: 0x9D0DC
	[CLSCompliantAttribute] // RVA: 0x9D0DC Offset: 0x9D0DC VA: 0x9D0DC
	// RVA: 0x424618 Offset: 0x424618 VA: 0x424618 Slot: 24
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }

	[ComVisibleAttribute] // RVA: 0x9D114 Offset: 0x9D114 VA: 0x9D114
	// RVA: 0x424638 Offset: 0x424638 VA: 0x424638 Slot: 9
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	[ComVisibleAttribute] // RVA: 0x9D128 Offset: 0x9D128 VA: 0x9D128
	// RVA: 0x42465C Offset: 0x42465C VA: 0x42465C Slot: 21
	public override string GetString(byte[] bytes, int index, int count) { }
}

// Namespace: 
private sealed class UTF7Encoding.UTF7Decoder : Decoder // TypeDefIndex: 794
{
	// Fields
	private int leftOver; // 0x10

	// Methods

	// RVA: 0x4245F0 Offset: 0x4245F0 VA: 0x4245F0
	public void .ctor() { }

	// RVA: 0x424694 Offset: 0x424694 VA: 0x424694 Slot: 4
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
}

// Namespace: System.Text
[MonoTODOAttribute] // RVA: 0x9A4A0 Offset: 0x9A4A0 VA: 0x9A4A0
[ComVisibleAttribute] // RVA: 0x9A4A0 Offset: 0x9A4A0 VA: 0x9A4A0
[MonoTODOAttribute] // RVA: 0x9A4A0 Offset: 0x9A4A0 VA: 0x9A4A0
[Serializable]
public class UTF8Encoding : Encoding // TypeDefIndex: 795
{
	// Fields
	private bool emitIdentifier; // 0x30

	// Methods

	// RVA: 0x424748 Offset: 0x424748 VA: 0x424748
	public void .ctor() { }

	// RVA: 0x41AB64 Offset: 0x41AB64 VA: 0x41AB64
	public void .ctor(bool encoderShouldEmitUTF8Identifier) { }

	// RVA: 0x41AB6C Offset: 0x41AB6C VA: 0x41AB6C
	public void .ctor(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes) { }

	// RVA: 0x424754 Offset: 0x424754 VA: 0x424754
	private static int InternalGetByteCount(char[] chars, int index, int count, ref char leftOver, bool flush) { }

	// RVA: 0x424990 Offset: 0x424990 VA: 0x424990
	private static int InternalGetByteCount(char* chars, int count, ref char leftOver, bool flush) { }

	// RVA: 0x424A98 Offset: 0x424A98 VA: 0x424A98 Slot: 5
	public override int GetByteCount(char[] chars, int index, int count) { }

	[ComVisibleAttribute] // RVA: 0x9D13C Offset: 0x9D13C VA: 0x9D13C
	[CLSCompliantAttribute] // RVA: 0x9D13C Offset: 0x9D13C VA: 0x9D13C
	// RVA: 0x424AD4 Offset: 0x424AD4 VA: 0x424AD4 Slot: 23
	public override int GetByteCount(char* chars, int count) { }

	// RVA: 0x424BB8 Offset: 0x424BB8 VA: 0x424BB8
	private static int InternalGetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, ref char leftOver, bool flush) { }

	// RVA: 0x424F10 Offset: 0x424F10 VA: 0x424F10
	private static int InternalGetBytes(char* chars, int count, byte* bytes, int bcount, ref char leftOver, bool flush) { }

	// RVA: 0x4251F0 Offset: 0x4251F0 VA: 0x4251F0 Slot: 8
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x42523C Offset: 0x42523C VA: 0x42523C Slot: 9
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	[CLSCompliantAttribute] // RVA: 0x9D174 Offset: 0x9D174 VA: 0x9D174
	[ComVisibleAttribute] // RVA: 0x9D174 Offset: 0x9D174 VA: 0x9D174
	// RVA: 0x4255C8 Offset: 0x4255C8 VA: 0x4255C8 Slot: 24
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }

	// RVA: 0x4257B0 Offset: 0x4257B0 VA: 0x4257B0
	private static int InternalGetCharCount(byte[] bytes, int index, int count, uint leftOverBits, uint leftOverCount, object provider, ref DecoderFallbackBuffer fallbackBuffer, ref byte[] bufferArg, bool flush) { }

	// RVA: 0x4259E8 Offset: 0x4259E8 VA: 0x4259E8
	private static int InternalGetCharCount(byte* bytes, int count, uint leftOverBits, uint leftOverCount, object provider, ref DecoderFallbackBuffer fallbackBuffer, ref byte[] bufferArg, bool flush) { }

	// RVA: 0x425CAC Offset: 0x425CAC VA: 0x425CAC
	private static int Fallback(object provider, ref DecoderFallbackBuffer buffer, ref byte[] bufferArg, byte* bytes, long index, uint size) { }

	// RVA: 0x425FD8 Offset: 0x425FD8 VA: 0x425FD8
	private static void Fallback(object provider, ref DecoderFallbackBuffer buffer, ref byte[] bufferArg, byte* bytes, long byteIndex, uint size, char* chars, ref int charIndex) { }

	// RVA: 0x42633C Offset: 0x42633C VA: 0x42633C Slot: 13
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	// RVA: 0x426390 Offset: 0x426390 VA: 0x426390
	private static int InternalGetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, ref uint leftOverBits, ref uint leftOverCount, object provider, ref DecoderFallbackBuffer fallbackBuffer, ref byte[] bufferArg, bool flush) { }

	// RVA: 0x42670C Offset: 0x42670C VA: 0x42670C
	private static int InternalGetChars(byte* bytes, int byteCount, char* chars, int charCount, ref uint leftOverBits, ref uint leftOverCount, object provider, ref DecoderFallbackBuffer fallbackBuffer, ref byte[] bufferArg, bool flush) { }

	// RVA: 0x426C70 Offset: 0x426C70 VA: 0x426C70 Slot: 14
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	// RVA: 0x426CE4 Offset: 0x426CE4 VA: 0x426CE4 Slot: 18
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x426DD0 Offset: 0x426DD0 VA: 0x426DD0 Slot: 19
	public override int GetMaxCharCount(int byteCount) { }

	// RVA: 0x426EBC Offset: 0x426EBC VA: 0x426EBC Slot: 16
	public override Decoder GetDecoder() { }

	// RVA: 0x426F84 Offset: 0x426F84 VA: 0x426F84 Slot: 20
	public override byte[] GetPreamble() { }

	// RVA: 0x427088 Offset: 0x427088 VA: 0x427088 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x4271CC Offset: 0x4271CC VA: 0x4271CC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x4271D0 Offset: 0x4271D0 VA: 0x4271D0 Slot: 6
	public override int GetByteCount(string chars) { }

	[ComVisibleAttribute] // RVA: 0x9D1AC Offset: 0x9D1AC VA: 0x9D1AC
	// RVA: 0x4271D4 Offset: 0x4271D4 VA: 0x4271D4 Slot: 21
	public override string GetString(byte[] bytes, int index, int count) { }
}

// Namespace: 
[Serializable]
private class UTF8Encoding.UTF8Decoder : Decoder // TypeDefIndex: 796
{
	// Fields
	private uint leftOverBits; // 0x10
	private uint leftOverCount; // 0x14

	// Methods

	// RVA: 0x426F4C Offset: 0x426F4C VA: 0x426F4C
	public void .ctor(DecoderFallback fallback) { }

	// RVA: 0x42720C Offset: 0x42720C VA: 0x42720C Slot: 4
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x9A52C Offset: 0x9A52C VA: 0x9A52C
[MonoTODOAttribute] // RVA: 0x9A52C Offset: 0x9A52C VA: 0x9A52C
[Serializable]
public class UnicodeEncoding : Encoding // TypeDefIndex: 797
{
	// Fields
	private bool bigEndian; // 0x30
	private bool byteOrderMark; // 0x31

	// Methods

	// RVA: 0x42726C Offset: 0x42726C VA: 0x42726C
	public void .ctor() { }

	// RVA: 0x41A878 Offset: 0x41A878 VA: 0x41A878
	public void .ctor(bool bigEndian, bool byteOrderMark) { }

	// RVA: 0x42729C Offset: 0x42729C VA: 0x42729C
	public void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes) { }

	// RVA: 0x427448 Offset: 0x427448 VA: 0x427448 Slot: 5
	public override int GetByteCount(char[] chars, int index, int count) { }

	// RVA: 0x42762C Offset: 0x42762C VA: 0x42762C Slot: 6
	public override int GetByteCount(string s) { }

	[ComVisibleAttribute] // RVA: 0x9D1C0 Offset: 0x9D1C0 VA: 0x9D1C0
	[CLSCompliantAttribute] // RVA: 0x9D1C0 Offset: 0x9D1C0 VA: 0x9D1C0
	// RVA: 0x4276E8 Offset: 0x4276E8 VA: 0x4276E8 Slot: 23
	public override int GetByteCount(char* chars, int count) { }

	// RVA: 0x4277E4 Offset: 0x4277E4 VA: 0x4277E4 Slot: 8
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x427C3C Offset: 0x427C3C VA: 0x427C3C Slot: 9
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	[CLSCompliantAttribute] // RVA: 0x9D1F8 Offset: 0x9D1F8 VA: 0x9D1F8
	[ComVisibleAttribute] // RVA: 0x9D1F8 Offset: 0x9D1F8 VA: 0x9D1F8
	// RVA: 0x427FBC Offset: 0x427FBC VA: 0x427FBC Slot: 24
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }

	// RVA: 0x427B30 Offset: 0x427B30 VA: 0x427B30
	private int GetBytesInternal(char* chars, int charCount, byte* bytes, int byteCount) { }

	// RVA: 0x428458 Offset: 0x428458 VA: 0x428458 Slot: 13
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	// RVA: 0x42863C Offset: 0x42863C VA: 0x42863C Slot: 14
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	[ComVisibleAttribute] // RVA: 0x9D230 Offset: 0x9D230 VA: 0x9D230
	// RVA: 0x428A98 Offset: 0x428A98 VA: 0x428A98 Slot: 21
	public override string GetString(byte[] bytes, int index, int count) { }

	// RVA: 0x428988 Offset: 0x428988 VA: 0x428988
	private int GetCharsInternal(byte* bytes, int byteCount, char* chars, int charCount) { }

	// RVA: 0x428D4C Offset: 0x428D4C VA: 0x428D4C Slot: 18
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x428E38 Offset: 0x428E38 VA: 0x428E38 Slot: 19
	public override int GetMaxCharCount(int byteCount) { }

	// RVA: 0x428F24 Offset: 0x428F24 VA: 0x428F24 Slot: 16
	public override Decoder GetDecoder() { }

	// RVA: 0x428FCC Offset: 0x428FCC VA: 0x428FCC Slot: 20
	public override byte[] GetPreamble() { }

	// RVA: 0x4290FC Offset: 0x4290FC VA: 0x4290FC Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x4291FC Offset: 0x4291FC VA: 0x4291FC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x42817C Offset: 0x42817C VA: 0x42817C
	private static void CopyChars(byte* src, byte* dest, int count, bool bigEndian) { }
}

// Namespace: 
private sealed class UnicodeEncoding.UnicodeDecoder : Decoder // TypeDefIndex: 798
{
	// Fields
	private bool bigEndian; // 0x10
	private int leftOverByte; // 0x14

	// Methods

	// RVA: 0x428FA4 Offset: 0x428FA4 VA: 0x428FA4
	public void .ctor(bool bigEndian) { }

	// RVA: 0x429200 Offset: 0x429200 VA: 0x429200 Slot: 4
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
}

// Namespace: System.Threading
[Serializable]
public sealed class CompressedStack : ISerializable // TypeDefIndex: 799
{
	// Fields
	private ArrayList _list; // 0x8

	// Methods

	// RVA: 0x429684 Offset: 0x429684 VA: 0x429684
	internal void .ctor(int length) { }

	// RVA: 0x429710 Offset: 0x429710 VA: 0x429710
	internal void .ctor(CompressedStack cs) { }

	[ComVisibleAttribute] // RVA: 0x9D244 Offset: 0x9D244 VA: 0x9D244
	// RVA: 0x429834 Offset: 0x429834 VA: 0x429834
	public CompressedStack CreateCopy() { }

	// RVA: 0x4298A4 Offset: 0x4298A4 VA: 0x4298A4
	public static CompressedStack Capture() { }

	[MonoTODOAttribute] // RVA: 0x9D258 Offset: 0x9D258 VA: 0x9D258
	// RVA: 0x429B24 Offset: 0x429B24 VA: 0x429B24 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x429BCC Offset: 0x429BCC VA: 0x429BCC
	internal bool IsEmpty() { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x9A578 Offset: 0x9A578 VA: 0x9A578
public enum EventResetMode // TypeDefIndex: 800
{
	// Fields
	public int value__; // 0x0
	public const EventResetMode AutoReset = 0;
	public const EventResetMode ManualReset = 1;
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x9A58C Offset: 0x9A58C VA: 0x9A58C
public class EventWaitHandle : WaitHandle // TypeDefIndex: 801
{
	// Methods

	// RVA: 0x429C08 Offset: 0x429C08 VA: 0x429C08
	public void .ctor(bool initialState, EventResetMode mode) { }

	// RVA: 0x429CDC Offset: 0x429CDC VA: 0x429CDC
	private bool IsManualReset(EventResetMode mode) { }

	// RVA: 0x429D98 Offset: 0x429D98 VA: 0x429D98
	public bool Reset() { }

	// RVA: 0x429EA0 Offset: 0x429EA0 VA: 0x429EA0
	public bool Set() { }
}

// Namespace: System.Threading
[Serializable]
public sealed class ExecutionContext : ISerializable // TypeDefIndex: 802
{
	// Fields
	private SecurityContext _sc; // 0x8
	private bool _suppressFlow; // 0xC
	private bool _capture; // 0xD

	// Properties
	internal SecurityContext SecurityContext { get; set; }
	internal bool FlowSuppressed { get; }

	// Methods

	// RVA: 0x429ED0 Offset: 0x429ED0 VA: 0x429ED0
	internal void .ctor() { }

	// RVA: 0x429ED8 Offset: 0x429ED8 VA: 0x429ED8
	internal void .ctor(ExecutionContext ec) { }

	[MonoTODOAttribute] // RVA: 0x9D290 Offset: 0x9D290 VA: 0x9D290
	// RVA: 0x429F88 Offset: 0x429F88 VA: 0x429F88
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x42A020 Offset: 0x42A020 VA: 0x42A020
	public static ExecutionContext Capture() { }

	[MonoTODOAttribute] // RVA: 0x9D2A0 Offset: 0x9D2A0 VA: 0x9D2A0
	// RVA: 0x42A2A8 Offset: 0x42A2A8 VA: 0x42A2A8 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x42A380 Offset: 0x42A380 VA: 0x42A380
	internal SecurityContext get_SecurityContext() { }

	// RVA: 0x42A2A0 Offset: 0x42A2A0 VA: 0x42A2A0
	internal void set_SecurityContext(SecurityContext value) { }

	// RVA: 0x42A298 Offset: 0x42A298 VA: 0x42A298
	internal bool get_FlowSuppressed() { }

	// RVA: 0x42A400 Offset: 0x42A400 VA: 0x42A400
	public static bool IsFlowSuppressed() { }
}

// Namespace: System.Threading
public static class Interlocked // TypeDefIndex: 803
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0x9D2B0 Offset: 0x9D2B0 VA: 0x9D2B0
	// RVA: 0x42A4A4 Offset: 0x42A4A4 VA: 0x42A4A4
	public static int CompareExchange(ref int location1, int value, int comparand) { }

	// RVA: 0x42A4A8 Offset: 0x42A4A8 VA: 0x42A4A8
	public static float CompareExchange(ref float location1, float value, float comparand) { }

	[ReliabilityContractAttribute] // RVA: 0x9D2C8 Offset: 0x9D2C8 VA: 0x9D2C8
	// RVA: 0x42A4AC Offset: 0x42A4AC VA: 0x42A4AC
	public static int Increment(ref int location) { }

	[ReliabilityContractAttribute] // RVA: 0x9D2E0 Offset: 0x9D2E0 VA: 0x9D2E0
	[ComVisibleAttribute] // RVA: 0x9D2E0 Offset: 0x9D2E0 VA: 0x9D2E0
	// RVA: -1 Offset: -1
	public static T CompareExchange<T>(ref T location1, T value, T comparand) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-Interlocked.CompareExchange<object>
	*/
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x9A5A0 Offset: 0x9A5A0 VA: 0x9A5A0
public sealed class ManualResetEvent : EventWaitHandle // TypeDefIndex: 804
{
	// Methods

	// RVA: 0x42A4B0 Offset: 0x42A4B0 VA: 0x42A4B0
	public void .ctor(bool initialState) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x9A5B4 Offset: 0x9A5B4 VA: 0x9A5B4
public static class Monitor // TypeDefIndex: 805
{
	// Methods

	// RVA: 0x417E80 Offset: 0x417E80 VA: 0x417E80
	public static void Enter(object obj) { }

	[ReliabilityContractAttribute] // RVA: 0x9D31C Offset: 0x9D31C VA: 0x9D31C
	// RVA: 0x417E84 Offset: 0x417E84 VA: 0x417E84
	public static void Exit(object obj) { }

	// RVA: 0x42A4B8 Offset: 0x42A4B8 VA: 0x42A4B8
	private static void Monitor_pulse(object obj) { }

	// RVA: 0x42A4BC Offset: 0x42A4BC VA: 0x42A4BC
	private static bool Monitor_test_synchronised(object obj) { }

	// RVA: 0x42A4C0 Offset: 0x42A4C0 VA: 0x42A4C0
	public static void Pulse(object obj) { }

	// RVA: 0x42A5D0 Offset: 0x42A5D0 VA: 0x42A5D0
	private static bool Monitor_wait(object obj, int ms) { }

	// RVA: 0x42A5D4 Offset: 0x42A5D4 VA: 0x42A5D4
	public static bool Wait(object obj, int millisecondsTimeout) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x9A5C8 Offset: 0x9A5C8 VA: 0x9A5C8
public sealed class Mutex : WaitHandle // TypeDefIndex: 806
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0x9D334 Offset: 0x9D334 VA: 0x9D334
	// RVA: 0x42A740 Offset: 0x42A740 VA: 0x42A740
	public void .ctor(bool initiallyOwned) { }

	// RVA: 0x42A800 Offset: 0x42A800 VA: 0x42A800
	private static IntPtr CreateMutex_internal(bool initiallyOwned, string name, out bool created) { }

	// RVA: 0x42A804 Offset: 0x42A804 VA: 0x42A804
	private static bool ReleaseMutex_internal(IntPtr handle) { }

	[ReliabilityContractAttribute] // RVA: 0x9D34C Offset: 0x9D34C VA: 0x9D34C
	// RVA: 0x42A808 Offset: 0x42A808 VA: 0x42A808
	public void ReleaseMutex() { }
}

// Namespace: System.Threading
internal sealed class NativeEventCalls // TypeDefIndex: 807
{
	// Methods

	// RVA: 0x429D94 Offset: 0x429D94 VA: 0x429D94
	public static IntPtr CreateEvent_internal(bool manual, bool initial, string name, out bool created) { }

	// RVA: 0x429ECC Offset: 0x429ECC VA: 0x429ECC
	public static bool SetEvent_internal(IntPtr handle) { }

	// RVA: 0x429E9C Offset: 0x429E9C VA: 0x429E9C
	public static bool ResetEvent_internal(IntPtr handle) { }

	// RVA: 0x42A8C8 Offset: 0x42A8C8 VA: 0x42A8C8
	public static void CloseEvent_internal(IntPtr handle) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x9A5DC Offset: 0x9A5DC VA: 0x9A5DC
public sealed class RegisteredWaitHandle : MarshalByRefObject // TypeDefIndex: 808
{
	// Fields
	private WaitHandle _waitObject; // 0xC
	private WaitOrTimerCallback _callback; // 0x10
	private TimeSpan _timeout; // 0x18
	private object _state; // 0x20
	private bool _executeOnlyOnce; // 0x24
	private WaitHandle _finalEvent; // 0x28
	private ManualResetEvent _cancelEvent; // 0x2C
	private int _callsInProcess; // 0x30
	private bool _unregistered; // 0x34

	// Methods

	// RVA: 0x42A8CC Offset: 0x42A8CC VA: 0x42A8CC
	internal void .ctor(WaitHandle waitObject, WaitOrTimerCallback callback, object state, TimeSpan timeout, bool executeOnlyOnce) { }

	// RVA: 0x42A994 Offset: 0x42A994 VA: 0x42A994
	internal void Wait(object state) { }

	// RVA: 0x42B0A8 Offset: 0x42B0A8 VA: 0x42B0A8
	private void DoCallBack(object timedOut) { }
}

// Namespace: System.Threading
public class SynchronizationContext // TypeDefIndex: 809
{
	// Fields
	[ThreadStaticAttribute] // RVA: 0x9B3AC Offset: 0x9B3AC VA: 0x9B3AC
	private static SynchronizationContext currentContext; // 0x80000000

	// Properties
	public static SynchronizationContext Current { get; }

	// Methods

	// RVA: 0x42B9A4 Offset: 0x42B9A4 VA: 0x42B9A4
	public void .ctor() { }

	// RVA: 0x42B9AC Offset: 0x42B9AC VA: 0x42B9AC
	public static SynchronizationContext get_Current() { }

	// RVA: 0x42BA10 Offset: 0x42BA10 VA: 0x42BA10
	public static void SetSynchronizationContext(SynchronizationContext syncContext) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x9A5F0 Offset: 0x9A5F0 VA: 0x9A5F0
[Serializable]
public class SynchronizationLockException : SystemException // TypeDefIndex: 810
{
	// Methods

	// RVA: 0x42BA78 Offset: 0x42BA78 VA: 0x42BA78
	public void .ctor() { }

	// RVA: 0x42A5C8 Offset: 0x42A5C8 VA: 0x42A5C8
	public void .ctor(string message) { }

	// RVA: 0x42BAE0 Offset: 0x42BAE0 VA: 0x42BAE0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
[ComDefaultInterfaceAttribute] // RVA: 0x9A604 Offset: 0x9A604 VA: 0x9A604
[ComVisibleAttribute] // RVA: 0x9A604 Offset: 0x9A604 VA: 0x9A604
[ClassInterfaceAttribute] // RVA: 0x9A604 Offset: 0x9A604 VA: 0x9A604
public sealed class Thread : CriticalFinalizerObject, _Thread // TypeDefIndex: 811
{
	// Fields
	private int lock_thread_id; // 0x8
	private IntPtr system_thread_handle; // 0xC
	private object cached_culture_info; // 0x10
	private IntPtr unused0; // 0x14
	private bool threadpool_thread; // 0x18
	private IntPtr name; // 0x1C
	private int name_len; // 0x20
	private ThreadState state; // 0x24
	private object abort_exc; // 0x28
	private int abort_state_handle; // 0x2C
	private long thread_id; // 0x30
	private IntPtr start_notify; // 0x38
	private IntPtr stack_ptr; // 0x3C
	private UIntPtr static_data; // 0x40
	private IntPtr jit_data; // 0x44
	private IntPtr lock_data; // 0x48
	private object current_appcontext; // 0x4C
	private int stack_size; // 0x50
	private object start_obj; // 0x54
	private IntPtr appdomain_refs; // 0x58
	private int interruption_requested; // 0x5C
	private IntPtr suspend_event; // 0x60
	private IntPtr suspended_event; // 0x64
	private IntPtr resume_event; // 0x68
	private IntPtr synch_cs; // 0x6C
	private IntPtr serialized_culture_info; // 0x70
	private int serialized_culture_info_len; // 0x74
	private IntPtr serialized_ui_culture_info; // 0x78
	private int serialized_ui_culture_info_len; // 0x7C
	private bool thread_dump_requested; // 0x80
	private IntPtr end_stack; // 0x84
	private bool thread_interrupt_requested; // 0x88
	private byte apartment_state; // 0x89
	private int critical_region_level; // 0x8C
	private int small_id; // 0x90
	private IntPtr manage_callback; // 0x94
	private object pending_exception; // 0x98
	private ExecutionContext ec_to_set; // 0x9C
	private IntPtr interrupt_on_stop; // 0xA0
	private IntPtr unused3; // 0xA4
	private IntPtr unused4; // 0xA8
	private IntPtr unused5; // 0xAC
	private IntPtr unused6; // 0xB0
	[ThreadStaticAttribute] // RVA: 0x9B3BC Offset: 0x9B3BC VA: 0x9B3BC
	private static object[] local_slots; // 0x80000000
	[ThreadStaticAttribute] // RVA: 0x9B3CC Offset: 0x9B3CC VA: 0x9B3CC
	private static ExecutionContext _ec; // 0x80000004
	private MulticastDelegate threadstart; // 0xB4
	private int managed_id; // 0xB8
	private IPrincipal _principal; // 0xBC
	private static Hashtable datastorehash; // 0x0
	private static object datastore_lock; // 0x4
	private bool in_currentculture; // 0xC0
	private static object culture_lock; // 0x8

	// Properties
	public static Context CurrentContext { get; }
	public static Thread CurrentThread { get; }
	public CultureInfo CurrentCulture { get; }
	public CultureInfo CurrentUICulture { get; }
	public bool IsBackground { set; }
	public string Name { set; }
	[MonoTODOAttribute] // RVA: 0x9E208 Offset: 0x9E208 VA: 0x9E208
	public ExecutionContext ExecutionContext { get; }
	public int ManagedThreadId { get; }

	// Methods

	// RVA: 0x42BB00 Offset: 0x42BB00 VA: 0x42BB00
	public void .ctor(ThreadStart start) { }

	// RVA: 0x42BBD4 Offset: 0x42BBD4 VA: 0x42BBD4
	private static void .cctor() { }

	// RVA: 0x42BC74 Offset: 0x42BC74 VA: 0x42BC74
	public static Context get_CurrentContext() { }

	// RVA: 0x42BC7C Offset: 0x42BC7C VA: 0x42BC7C
	private static Thread CurrentThread_internal() { }

	[ReliabilityContractAttribute] // RVA: 0x9D364 Offset: 0x9D364 VA: 0x9D364
	// RVA: 0x429A24 Offset: 0x429A24 VA: 0x429A24
	public static Thread get_CurrentThread() { }

	// RVA: 0x42BC80 Offset: 0x42BC80 VA: 0x42BC80
	internal static void FreeLocalSlotValues(int slot, bool thread_local) { }

	// RVA: 0x42BC84 Offset: 0x42BC84 VA: 0x42BC84
	public static AppDomain GetDomain() { }

	// RVA: 0x42BC8C Offset: 0x42BC8C VA: 0x42BC8C
	public static int GetDomainID() { }

	// RVA: 0x42BC90 Offset: 0x42BC90 VA: 0x42BC90
	private static void Sleep_internal(int ms) { }

	// RVA: 0x42BC94 Offset: 0x42BC94 VA: 0x42BC94
	public static void Sleep(int millisecondsTimeout) { }

	// RVA: 0x42BD84 Offset: 0x42BD84 VA: 0x42BD84
	private IntPtr Thread_internal(MulticastDelegate start) { }

	// RVA: 0x42BBD0 Offset: 0x42BBD0 VA: 0x42BBD0
	private void Thread_init() { }

	// RVA: 0x42BD88 Offset: 0x42BD88 VA: 0x42BD88
	private CultureInfo GetCachedCurrentCulture() { }

	// RVA: 0x42BD8C Offset: 0x42BD8C VA: 0x42BD8C
	private byte[] GetSerializedCurrentCulture() { }

	// RVA: 0x42BD90 Offset: 0x42BD90 VA: 0x42BD90
	private void SetCachedCurrentCulture(CultureInfo culture) { }

	// RVA: 0x42BD94 Offset: 0x42BD94 VA: 0x42BD94
	private CultureInfo GetCachedCurrentUICulture() { }

	// RVA: 0x42BD98 Offset: 0x42BD98 VA: 0x42BD98
	private byte[] GetSerializedCurrentUICulture() { }

	// RVA: 0x42BD9C Offset: 0x42BD9C VA: 0x42BD9C
	private void SetCachedCurrentUICulture(CultureInfo culture) { }

	// RVA: 0x42BDA0 Offset: 0x42BDA0 VA: 0x42BDA0
	public CultureInfo get_CurrentCulture() { }

	// RVA: 0x42C170 Offset: 0x42C170 VA: 0x42C170
	public CultureInfo get_CurrentUICulture() { }

	// RVA: 0x42C4C8 Offset: 0x42C4C8 VA: 0x42C4C8
	public void set_IsBackground(bool value) { }

	// RVA: 0x42C4E8 Offset: 0x42C4E8 VA: 0x42C4E8
	private void SetName_internal(string name) { }

	// RVA: 0x42C4EC Offset: 0x42C4EC VA: 0x42C4EC
	public void set_Name(string value) { }

	// RVA: 0x42C4F0 Offset: 0x42C4F0 VA: 0x42C4F0
	public void Start() { }

	// RVA: 0x42C674 Offset: 0x42C674 VA: 0x42C674
	private void Thread_free_internal(IntPtr handle) { }

	[ReliabilityContractAttribute] // RVA: 0x9D37C Offset: 0x9D37C VA: 0x9D37C
	// RVA: 0x42C678 Offset: 0x42C678 VA: 0x42C678 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x42C4E0 Offset: 0x42C4E0 VA: 0x42C4E0
	private void SetState(ThreadState set) { }

	// RVA: 0x42C4E4 Offset: 0x42C4E4 VA: 0x42C4E4
	private void ClrState(ThreadState clr) { }

	// RVA: 0x42C6E0 Offset: 0x42C6E0 VA: 0x42C6E0
	private static int GetNewManagedId() { }

	// RVA: 0x42C758 Offset: 0x42C758 VA: 0x42C758
	private static int GetNewManagedId_internal() { }

	[ReliabilityContractAttribute] // RVA: 0x9D394 Offset: 0x9D394 VA: 0x9D394
	// RVA: 0x42A150 Offset: 0x42A150 VA: 0x42A150
	public ExecutionContext get_ExecutionContext() { }

	[ReliabilityContractAttribute] // RVA: 0x9D3AC Offset: 0x9D3AC VA: 0x9D3AC
	// RVA: 0x42C75C Offset: 0x42C75C VA: 0x42C75C
	public int get_ManagedThreadId() { }

	[ComVisibleAttribute] // RVA: 0x9D3C4 Offset: 0x9D3C4 VA: 0x9D3C4
	// RVA: 0x42C7F8 Offset: 0x42C7F8 VA: 0x42C7F8 Slot: 2
	public override int GetHashCode() { }

	[ObsoleteAttribute] // RVA: 0x9D3D8 Offset: 0x9D3D8 VA: 0x9D3D8
	// RVA: 0x429A9C Offset: 0x429A9C VA: 0x429A9C
	public CompressedStack GetCompressedStack() { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x9A6A4 Offset: 0x9A6A4 VA: 0x9A6A4
[Serializable]
public sealed class ThreadAbortException : SystemException // TypeDefIndex: 812
{
	// Methods

	// RVA: 0x42C7FC Offset: 0x42C7FC VA: 0x42C7FC
	private void .ctor() { }

	// RVA: 0x42C878 Offset: 0x42C878 VA: 0x42C878
	private void .ctor(SerializationInfo info, StreamingContext sc) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x9A6B8 Offset: 0x9A6B8 VA: 0x9A6B8
[Serializable]
public class ThreadInterruptedException : SystemException // TypeDefIndex: 813
{
	// Methods

	// RVA: 0x42C898 Offset: 0x42C898 VA: 0x42C898
	public void .ctor() { }

	// RVA: 0x42C900 Offset: 0x42C900 VA: 0x42C900
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
public static class ThreadPool // TypeDefIndex: 814
{
	// Methods

	// RVA: 0x42AFC4 Offset: 0x42AFC4 VA: 0x42AFC4
	public static bool QueueUserWorkItem(WaitCallback callBack, object state) { }

	// RVA: 0x42C94C Offset: 0x42C94C VA: 0x42C94C
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce) { }

	// RVA: 0x42CBD0 Offset: 0x42CBD0 VA: 0x42CBD0
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce) { }
}

// Namespace: System.Threading
[FlagsAttribute] // RVA: 0x9A6CC Offset: 0x9A6CC VA: 0x9A6CC
[ComVisibleAttribute] // RVA: 0x9A6CC Offset: 0x9A6CC VA: 0x9A6CC
[Serializable]
public enum ThreadState // TypeDefIndex: 815
{
	// Fields
	public int value__; // 0x0
	public const ThreadState Running = 0;
	public const ThreadState StopRequested = 1;
	public const ThreadState SuspendRequested = 2;
	public const ThreadState Background = 4;
	public const ThreadState Unstarted = 8;
	public const ThreadState Stopped = 16;
	public const ThreadState WaitSleepJoin = 32;
	public const ThreadState Suspended = 64;
	public const ThreadState AbortRequested = 128;
	public const ThreadState Aborted = 256;
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x9A700 Offset: 0x9A700 VA: 0x9A700
[Serializable]
public class ThreadStateException : SystemException // TypeDefIndex: 816
{
	// Methods

	// RVA: 0x42CEBC Offset: 0x42CEBC VA: 0x42CEBC
	public void .ctor() { }

	// RVA: 0x42CF24 Offset: 0x42CF24 VA: 0x42CF24
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x9A714 Offset: 0x9A714 VA: 0x9A714
public sealed class Timer : MarshalByRefObject, IDisposable // TypeDefIndex: 817
{
	// Fields
	private static Timer.Scheduler scheduler; // 0x0
	private TimerCallback callback; // 0xC
	private object state; // 0x10
	private long due_time_ms; // 0x18
	private long period_ms; // 0x20
	private long next_run; // 0x28
	private bool disposed; // 0x30

	// Methods

	// RVA: 0x42CF48 Offset: 0x42CF48 VA: 0x42CF48
	public void .ctor(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period) { }

	// RVA: 0x42D0D8 Offset: 0x42D0D8 VA: 0x42D0D8
	private static void .cctor() { }

	// RVA: 0x42CFF0 Offset: 0x42CFF0 VA: 0x42CFF0
	private void Init(TimerCallback callback, object state, long dueTime, long period) { }

	// RVA: 0x42D4E0 Offset: 0x42D4E0 VA: 0x42D4E0
	public bool Change(TimeSpan dueTime, TimeSpan period) { }

	// RVA: 0x42D570 Offset: 0x42D570 VA: 0x42D570 Slot: 6
	public void Dispose() { }

	// RVA: 0x42D1F4 Offset: 0x42D1F4 VA: 0x42D1F4
	private bool Change(long dueTime, long period, bool first) { }
}

// Namespace: 
private sealed class Timer.TimerComparer : IComparer // TypeDefIndex: 818
{
	// Methods

	// RVA: 0x42D92C Offset: 0x42D92C VA: 0x42D92C
	public void .ctor() { }

	// RVA: 0x42E4EC Offset: 0x42E4EC VA: 0x42E4EC Slot: 4
	public int Compare(object x, object y) { }
}

// Namespace: 
private sealed class Timer.Scheduler // TypeDefIndex: 819
{
	// Fields
	private static Timer.Scheduler instance; // 0x0
	private SortedList list; // 0x8

	// Properties
	public static Timer.Scheduler Instance { get; }

	// Methods

	// RVA: 0x42D7F4 Offset: 0x42D7F4 VA: 0x42D7F4
	private void .ctor() { }

	// RVA: 0x42D934 Offset: 0x42D934 VA: 0x42D934
	private static void .cctor() { }

	// RVA: 0x42D168 Offset: 0x42D168 VA: 0x42D168
	public static Timer.Scheduler get_Instance() { }

	// RVA: 0x42D630 Offset: 0x42D630 VA: 0x42D630
	public void Remove(Timer timer) { }

	// RVA: 0x42D6D0 Offset: 0x42D6D0 VA: 0x42D6D0
	public void Change(Timer timer, long new_next_run) { }

	// RVA: 0x42DA20 Offset: 0x42DA20 VA: 0x42DA20
	private void Add(Timer timer) { }

	// RVA: 0x42D9A4 Offset: 0x42D9A4 VA: 0x42D9A4
	private int InternalRemove(Timer timer) { }

	// RVA: 0x42DC38 Offset: 0x42DC38 VA: 0x42DC38
	private void SchedulerThread() { }

	// RVA: 0x42E448 Offset: 0x42E448 VA: 0x42E448
	private void ShrinkIfNeeded(ArrayList list, int initial) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x9A728 Offset: 0x9A728 VA: 0x9A728
public abstract class WaitHandle : MarshalByRefObject, IDisposable // TypeDefIndex: 820
{
	// Fields
	public const int WaitTimeout = 258;
	private SafeWaitHandle safe_wait_handle; // 0xC
	protected static readonly IntPtr InvalidHandle; // 0x0
	private bool disposed; // 0x10

	// Properties
	[ObsoleteAttribute] // RVA: 0x9E258 Offset: 0x9E258 VA: 0x9E258
	public virtual IntPtr Handle { get; set; }

	// Methods

	// RVA: 0x429CD4 Offset: 0x429CD4 VA: 0x429CD4
	protected void .ctor() { }

	// RVA: 0x42EDB0 Offset: 0x42EDB0 VA: 0x42EDB0
	private static void .cctor() { }

	// RVA: 0x42EE1C Offset: 0x42EE1C VA: 0x42EE1C Slot: 6
	private void System.IDisposable.Dispose() { }

	// RVA: 0x42EE50 Offset: 0x42EE50 VA: 0x42EE50
	private static void CheckArray(WaitHandle[] handles, bool waitAll) { }

	// RVA: 0x42F044 Offset: 0x42F044 VA: 0x42F044
	private static int WaitAny_internal(WaitHandle[] handles, int ms, bool exitContext) { }

	[ReliabilityContractAttribute] // RVA: 0x9D420 Offset: 0x9D420 VA: 0x9D420
	// RVA: 0x42AD98 Offset: 0x42AD98 VA: 0x42AD98
	public static int WaitAny(WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext) { }

	// RVA: 0x42F048 Offset: 0x42F048 VA: 0x42F048 Slot: 7
	public virtual IntPtr get_Handle() { }

	// RVA: 0x42F074 Offset: 0x42F074 VA: 0x42F074 Slot: 8
	public virtual void set_Handle(IntPtr value) { }

	// RVA: 0x42F1B0 Offset: 0x42F1B0 VA: 0x42F1B0
	private bool WaitOne_internal(IntPtr handle, int ms, bool exitContext) { }

	// RVA: 0x42F1B4 Offset: 0x42F1B4 VA: 0x42F1B4 Slot: 9
	protected virtual void Dispose(bool explicitDisposing) { }

	// RVA: 0x42F24C Offset: 0x42F24C VA: 0x42F24C Slot: 10
	public virtual bool WaitOne() { }

	// RVA: 0x42F380 Offset: 0x42F380 VA: 0x42F380 Slot: 11
	public virtual bool WaitOne(int millisecondsTimeout, bool exitContext) { }

	// RVA: 0x429DC4 Offset: 0x429DC4 VA: 0x429DC4
	internal void CheckDisposed() { }

	// RVA: 0x42F588 Offset: 0x42F588 VA: 0x42F588 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A73C Offset: 0x9A73C VA: 0x9A73C
[Serializable]
public class AccessViolationException : SystemException // TypeDefIndex: 821
{
	// Methods

	// RVA: 0x2B93EC Offset: 0x2B93EC VA: 0x2B93EC
	public void .ctor() { }

	// RVA: 0x2B9474 Offset: 0x2B9474 VA: 0x2B9474
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A750 Offset: 0x9A750 VA: 0x9A750
[Serializable]
public sealed class ActivationContext : IDisposable, ISerializable // TypeDefIndex: 822
{
	// Fields
	private bool _disposed; // 0x8

	// Methods

	[MonoTODOAttribute] // RVA: 0x9D438 Offset: 0x9D438 VA: 0x9D438
	// RVA: 0x2B9494 Offset: 0x2B9494 VA: 0x2B9494 Slot: 5
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2B9538 Offset: 0x2B9538 VA: 0x2B9538 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x2B9564 Offset: 0x2B9564 VA: 0x2B9564 Slot: 4
	public void Dispose() { }

	// RVA: 0x2B9550 Offset: 0x2B9550 VA: 0x2B9550
	private void Dispose(bool disposing) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A764 Offset: 0x9A764 VA: 0x9A764
[ClassInterfaceAttribute] // RVA: 0x9A764 Offset: 0x9A764 VA: 0x9A764
[ComDefaultInterfaceAttribute] // RVA: 0x9A764 Offset: 0x9A764 VA: 0x9A764
public sealed class Activator : _Activator // TypeDefIndex: 823
{
	// Methods

	// RVA: -1 Offset: -1
	public static T CreateInstance<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x514668 Offset: 0x514668 VA: 0x514668
	|-Activator.CreateInstance<object>
	*/

	// RVA: 0x2B957C Offset: 0x2B957C VA: 0x2B957C
	public static object CreateInstance(Type type) { }

	// RVA: 0x2B9898 Offset: 0x2B9898 VA: 0x2B9898
	public static object CreateInstance(Type type, object[] args) { }

	// RVA: 0x2B9910 Offset: 0x2B9910 VA: 0x2B9910
	public static object CreateInstance(Type type, object[] args, object[] activationAttributes) { }

	// RVA: 0x2B99C0 Offset: 0x2B99C0 VA: 0x2B99C0
	public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes) { }

	// RVA: 0x2B9584 Offset: 0x2B9584 VA: 0x2B9584
	public static object CreateInstance(Type type, bool nonPublic) { }

	// RVA: 0x2BA1A0 Offset: 0x2BA1A0 VA: 0x2BA1A0
	private static void CheckType(Type type) { }

	// RVA: 0x2BA44C Offset: 0x2BA44C VA: 0x2BA44C
	private static void CheckAbstractType(Type type) { }

	// RVA: 0x2BA448 Offset: 0x2BA448 VA: 0x2BA448
	internal static object CreateInstanceInternal(Type type) { }
}

// Namespace: System
[ClassInterfaceAttribute] // RVA: 0x9A804 Offset: 0x9A804 VA: 0x9A804
[ComVisibleAttribute] // RVA: 0x9A804 Offset: 0x9A804 VA: 0x9A804
public sealed class AppDomain : MarshalByRefObject // TypeDefIndex: 824
{
	// Fields
	private IntPtr _mono_app_domain; // 0xC
	private static string _process_guid; // 0x0
	[ThreadStaticAttribute] // RVA: 0x9B3DC Offset: 0x9B3DC VA: 0x9B3DC
	private static Hashtable type_resolve_in_progress; // 0x80000000
	[ThreadStaticAttribute] // RVA: 0x9B3EC Offset: 0x9B3EC VA: 0x9B3EC
	private static Hashtable assembly_resolve_in_progress; // 0x80000004
	[ThreadStaticAttribute] // RVA: 0x9B3FC Offset: 0x9B3FC VA: 0x9B3FC
	private static Hashtable assembly_resolve_in_progress_refonly; // 0x80000008
	private Evidence _evidence; // 0x10
	private PermissionSet _granted; // 0x14
	private PrincipalPolicy _principalPolicy; // 0x18
	[ThreadStaticAttribute] // RVA: 0x9B40C Offset: 0x9B40C VA: 0x9B40C
	private static IPrincipal _principal; // 0x8000000C
	private static AppDomain default_domain; // 0x4
	private AppDomainManager _domain_manager; // 0x1C
	private ActivationContext _activation; // 0x20
	private ApplicationIdentity _applicationIdentity; // 0x24
	private AssemblyLoadEventHandler AssemblyLoad; // 0x28
	private ResolveEventHandler AssemblyResolve; // 0x2C
	private EventHandler DomainUnload; // 0x30
	private EventHandler ProcessExit; // 0x34
	private ResolveEventHandler ResourceResolve; // 0x38
	private ResolveEventHandler TypeResolve; // 0x3C
	private UnhandledExceptionEventHandler UnhandledException; // 0x40
	private ResolveEventHandler ReflectionOnlyAssemblyResolve; // 0x44

	// Properties
	public static AppDomain CurrentDomain { get; }

	// Methods

	// RVA: 0x2BA588 Offset: 0x2BA588 VA: 0x2BA588
	private void .ctor() { }

	// RVA: 0x2BA590 Offset: 0x2BA590 VA: 0x2BA590
	public void add_UnhandledException(UnhandledExceptionEventHandler value) { }

	// RVA: 0x2BA67C Offset: 0x2BA67C VA: 0x2BA67C
	public void remove_UnhandledException(UnhandledExceptionEventHandler value) { }

	// RVA: 0x2BA768 Offset: 0x2BA768 VA: 0x2BA768
	private string getFriendlyName() { }

	// RVA: 0x2BA76C Offset: 0x2BA76C VA: 0x2BA76C
	private static AppDomain getCurDomain() { }

	// RVA: 0x2BA770 Offset: 0x2BA770 VA: 0x2BA770
	public static AppDomain get_CurrentDomain() { }

	// RVA: 0x2BA774 Offset: 0x2BA774 VA: 0x2BA774
	internal AssemblyBuilder DefineInternalDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access) { }

	// RVA: 0x2BA80C Offset: 0x2BA80C VA: 0x2BA80C Slot: 5
	public override object InitializeLifetimeService() { }

	// RVA: 0x2BA814 Offset: 0x2BA814 VA: 0x2BA814
	internal Assembly LoadAssembly(string assemblyRef, Evidence securityEvidence, bool refOnly) { }

	// RVA: 0x2BA818 Offset: 0x2BA818 VA: 0x2BA818
	public Assembly Load(string assemblyString) { }

	// RVA: 0x2BA838 Offset: 0x2BA838 VA: 0x2BA838
	internal Assembly Load(string assemblyString, Evidence assemblySecurity, bool refonly) { }

	// RVA: 0x2BA998 Offset: 0x2BA998 VA: 0x2BA998
	private static AppDomain InternalSetDomainByID(int domain_id) { }

	// RVA: 0x2BA99C Offset: 0x2BA99C VA: 0x2BA99C
	private static AppDomain InternalSetDomain(AppDomain context) { }

	// RVA: 0x2BA9A0 Offset: 0x2BA9A0 VA: 0x2BA9A0
	internal static void InternalPushDomainRefByID(int domain_id) { }

	// RVA: 0x2BA9A4 Offset: 0x2BA9A4 VA: 0x2BA9A4
	internal static void InternalPopDomainRef() { }

	// RVA: 0x2BA9A8 Offset: 0x2BA9A8 VA: 0x2BA9A8
	internal static Context InternalSetContext(Context context) { }

	// RVA: 0x2BA9AC Offset: 0x2BA9AC VA: 0x2BA9AC
	internal static Context InternalGetContext() { }

	// RVA: 0x2BA9B0 Offset: 0x2BA9B0 VA: 0x2BA9B0
	internal static Context InternalGetDefaultContext() { }

	// RVA: 0x2BA9B4 Offset: 0x2BA9B4 VA: 0x2BA9B4
	internal static string InternalGetProcessGuid(string newguid) { }

	// RVA: 0x2BA9B8 Offset: 0x2BA9B8 VA: 0x2BA9B8
	internal static object InvokeInDomainByID(int domain_id, MethodInfo method, object obj, object[] args) { }

	// RVA: 0x2BAC30 Offset: 0x2BAC30 VA: 0x2BAC30
	internal static string GetProcessGuid() { }

	// RVA: 0x2BAD24 Offset: 0x2BAD24 VA: 0x2BAD24 Slot: 3
	public override string ToString() { }

	// RVA: 0x2BAD28 Offset: 0x2BAD28 VA: 0x2BAD28
	internal Assembly DoTypeResolve(object name_or_tb) { }

	// RVA: 0x2BB144 Offset: 0x2BB144 VA: 0x2BB144
	internal void ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg, out byte[] arrResponse, out CADMethodReturnMessage cadMrm) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A83C Offset: 0x9A83C VA: 0x9A83C
public class AppDomainManager : MarshalByRefObject // TypeDefIndex: 825
{}

// Namespace: System
[ClassInterfaceAttribute] // RVA: 0x9A850 Offset: 0x9A850 VA: 0x9A850
[ComVisibleAttribute] // RVA: 0x9A850 Offset: 0x9A850 VA: 0x9A850
[Serializable]
public sealed class AppDomainSetup // TypeDefIndex: 826
{
	// Fields
	private string application_base; // 0x8
	private string application_name; // 0xC
	private string cache_path; // 0x10
	private string configuration_file; // 0x14
	private string dynamic_base; // 0x18
	private string license_file; // 0x1C
	private string private_bin_path; // 0x20
	private string private_bin_path_probe; // 0x24
	private string shadow_copy_directories; // 0x28
	private string shadow_copy_files; // 0x2C
	private bool publisher_policy; // 0x30
	private bool path_changed; // 0x31
	private LoaderOptimization loader_optimization; // 0x34
	private bool disallow_binding_redirects; // 0x38
	private bool disallow_code_downloads; // 0x39
	private ActivationArguments _activationArguments; // 0x3C
	private AppDomainInitializer domain_initializer; // 0x40
	private ApplicationTrust application_trust; // 0x44
	private string[] domain_initializer_args; // 0x48
	private SecurityElement application_trust_xml; // 0x4C
	private bool disallow_appbase_probe; // 0x50
	private byte[] configuration_bytes; // 0x54

	// Methods

	// RVA: 0x2BB69C Offset: 0x2BB69C VA: 0x2BB69C
	public void .ctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A888 Offset: 0x9A888 VA: 0x9A888
[Serializable]
public class ApplicationException : Exception // TypeDefIndex: 827
{
	// Methods

	// RVA: 0x2BB6A4 Offset: 0x2BB6A4 VA: 0x2BB6A4
	public void .ctor() { }

	// RVA: 0x2BB72C Offset: 0x2BB72C VA: 0x2BB72C
	public void .ctor(string message) { }

	// RVA: 0x2BB758 Offset: 0x2BB758 VA: 0x2BB758
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A89C Offset: 0x9A89C VA: 0x9A89C
[Serializable]
public sealed class ApplicationIdentity : ISerializable // TypeDefIndex: 828
{
	// Fields
	private string _fullName; // 0x8

	// Methods

	[MonoTODOAttribute] // RVA: 0x9D484 Offset: 0x9D484 VA: 0x9D484
	// RVA: 0x2BB778 Offset: 0x2BB778 VA: 0x2BB778 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2BB81C Offset: 0x2BB81C VA: 0x2BB81C Slot: 3
	public override string ToString() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A8B0 Offset: 0x9A8B0 VA: 0x9A8B0
[Serializable]
public class ArgumentException : SystemException // TypeDefIndex: 829
{
	// Fields
	private const int Result = -2147024809;
	private string param_name; // 0x34

	// Properties
	public virtual string ParamName { get; }
	public override string Message { get; }

	// Methods

	// RVA: 0x2BB8D4 Offset: 0x2BB8D4 VA: 0x2BB8D4
	public void .ctor() { }

	// RVA: 0x2A63A8 Offset: 0x2A63A8 VA: 0x2A63A8
	public void .ctor(string message) { }

	// RVA: 0x2BB95C Offset: 0x2BB95C VA: 0x2BB95C
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x2A4D50 Offset: 0x2A4D50 VA: 0x2A4D50
	public void .ctor(string message, string paramName) { }

	// RVA: 0x2BB988 Offset: 0x2BB988 VA: 0x2BB988
	public void .ctor(string message, string paramName, Exception innerException) { }

	// RVA: 0x2BB9C0 Offset: 0x2BB9C0 VA: 0x2BB9C0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2BBA6C Offset: 0x2BBA6C VA: 0x2BBA6C Slot: 11
	public virtual string get_ParamName() { }

	// RVA: 0x2BBA74 Offset: 0x2BBA74 VA: 0x2BBA74 Slot: 6
	public override string get_Message() { }

	// RVA: 0x2BBBCC Offset: 0x2BBBCC VA: 0x2BBBCC Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A8C4 Offset: 0x9A8C4 VA: 0x9A8C4
[Serializable]
public class ArgumentNullException : ArgumentException // TypeDefIndex: 830
{
	// Fields
	private const int Result = -2147467261;

	// Methods

	// RVA: 0x2BBC90 Offset: 0x2BBC90 VA: 0x2BBC90
	public void .ctor() { }

	// RVA: 0x2A4C60 Offset: 0x2A4C60 VA: 0x2A4C60
	public void .ctor(string paramName) { }

	// RVA: 0x2BBD2C Offset: 0x2BBD2C VA: 0x2BBD2C
	public void .ctor(string paramName, string message) { }

	// RVA: 0x2BBD78 Offset: 0x2BBD78 VA: 0x2BBD78
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A8D8 Offset: 0x9A8D8 VA: 0x9A8D8
[Serializable]
public class ArgumentOutOfRangeException : ArgumentException // TypeDefIndex: 831
{
	// Fields
	private object actual_value; // 0x38

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x2BBD90 Offset: 0x2BBD90 VA: 0x2BBD90
	public void .ctor() { }

	// RVA: 0x2BBE2C Offset: 0x2BBE2C VA: 0x2BBE2C
	public void .ctor(string paramName) { }

	// RVA: 0x2A4D04 Offset: 0x2A4D04 VA: 0x2A4D04
	public void .ctor(string paramName, string message) { }

	// RVA: 0x2BBED0 Offset: 0x2BBED0 VA: 0x2BBED0
	public void .ctor(string paramName, object actualValue, string message) { }

	// RVA: 0x2BBF24 Offset: 0x2BBF24 VA: 0x2BBF24
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2BBFC8 Offset: 0x2BBFC8 VA: 0x2BBFC8 Slot: 6
	public override string get_Message() { }

	// RVA: 0x2BC084 Offset: 0x2BC084 VA: 0x2BC084 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A8EC Offset: 0x9A8EC VA: 0x9A8EC
[Serializable]
public class ArithmeticException : SystemException // TypeDefIndex: 832
{
	// Methods

	// RVA: 0x2BC12C Offset: 0x2BC12C VA: 0x2BC12C
	public void .ctor() { }

	// RVA: 0x2BC1B4 Offset: 0x2BC1B4 VA: 0x2BC1B4
	public void .ctor(string message) { }

	// RVA: 0x2BC1E0 Offset: 0x2BC1E0 VA: 0x2BC1E0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A900 Offset: 0x9A900 VA: 0x9A900
[Serializable]
public class ArrayTypeMismatchException : SystemException // TypeDefIndex: 833
{
	// Fields
	private const int Result = -2146233085;

	// Methods

	// RVA: 0x4731D4 Offset: 0x4731D4 VA: 0x4731D4
	public void .ctor() { }

	// RVA: 0x47325C Offset: 0x47325C VA: 0x47325C
	public void .ctor(string message) { }

	// RVA: 0x473288 Offset: 0x473288 VA: 0x473288
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A914 Offset: 0x9A914 VA: 0x9A914
public class AssemblyLoadEventArgs : EventArgs // TypeDefIndex: 834
{}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A928 Offset: 0x9A928 VA: 0x9A928
[FlagsAttribute] // RVA: 0x9A928 Offset: 0x9A928 VA: 0x9A928
[Serializable]
public enum AttributeTargets // TypeDefIndex: 835
{
	// Fields
	public int value__; // 0x0
	public const AttributeTargets Assembly = 1;
	public const AttributeTargets Module = 2;
	public const AttributeTargets Class = 4;
	public const AttributeTargets Struct = 8;
	public const AttributeTargets Enum = 16;
	public const AttributeTargets Constructor = 32;
	public const AttributeTargets Method = 64;
	public const AttributeTargets Property = 128;
	public const AttributeTargets Field = 256;
	public const AttributeTargets Event = 512;
	public const AttributeTargets Interface = 1024;
	public const AttributeTargets Parameter = 2048;
	public const AttributeTargets Delegate = 4096;
	public const AttributeTargets ReturnValue = 8192;
	public const AttributeTargets GenericParameter = 16384;
	public const AttributeTargets All = 32767;
}

// Namespace: System
public static class BitConverter // TypeDefIndex: 836
{
	// Fields
	private static readonly bool SwappedWordsInDouble; // 0x0
	public static readonly bool IsLittleEndian; // 0x1

	// Methods

	// RVA: 0x474070 Offset: 0x474070 VA: 0x474070
	private static void .cctor() { }

	// RVA: 0x474134 Offset: 0x474134 VA: 0x474134
	private static bool AmILittleEndian() { }

	// RVA: 0x474108 Offset: 0x474108 VA: 0x474108
	private static bool DoubleWordsAreSwapped() { }

	// RVA: 0x47413C Offset: 0x47413C VA: 0x47413C
	public static long DoubleToInt64Bits(double value) { }

	// RVA: 0x47449C Offset: 0x47449C VA: 0x47449C
	private static byte[] GetBytes(byte* ptr, int count) { }

	// RVA: 0x4741CC Offset: 0x4741CC VA: 0x4741CC
	public static byte[] GetBytes(double value) { }

	// RVA: 0x47455C Offset: 0x47455C VA: 0x47455C
	private static void PutBytes(byte* dst, byte[] src, int start_index, int count) { }

	// RVA: 0x4743F0 Offset: 0x4743F0 VA: 0x4743F0
	public static long ToInt64(byte[] value, int startIndex) { }

	// RVA: 0x474714 Offset: 0x474714 VA: 0x474714
	public static string ToString(byte[] value) { }

	// RVA: 0x4747FC Offset: 0x4747FC VA: 0x4747FC
	public static string ToString(byte[] value, int startIndex, int length) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A95C Offset: 0x9A95C VA: 0x9A95C
public static class Buffer // TypeDefIndex: 837
{
	// Methods

	// RVA: 0x477148 Offset: 0x477148 VA: 0x477148
	public static int ByteLength(Array array) { }

	// RVA: 0x47725C Offset: 0x47725C VA: 0x47725C
	public static void BlockCopy(Array src, int srcOffset, Array dst, int dstOffset, int count) { }

	// RVA: 0x477258 Offset: 0x477258 VA: 0x477258
	private static int ByteLengthInternal(Array array) { }

	// RVA: 0x477550 Offset: 0x477550 VA: 0x477550
	internal static bool BlockCopyInternal(Array src, int src_offset, Array dest, int dest_offset, int count) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A970 Offset: 0x9A970 VA: 0x9A970
[Serializable]
public sealed class CharEnumerator : IEnumerator, IDisposable, ICloneable, IEnumerator<char> // TypeDefIndex: 838
{
	// Fields
	private string str; // 0x8
	private int index; // 0xC
	private int length; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public char Current { get; }

	// Methods

	// RVA: 0x479DEC Offset: 0x479DEC VA: 0x479DEC
	internal void .ctor(string s) { }

	// RVA: 0x479E34 Offset: 0x479E34 VA: 0x479E34 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x479F9C Offset: 0x479F9C VA: 0x479F9C Slot: 7
	private void System.IDisposable.Dispose() { }

	// RVA: 0x479EB0 Offset: 0x479EB0 VA: 0x479EB0 Slot: 9
	public char get_Current() { }

	// RVA: 0x479FA0 Offset: 0x479FA0 VA: 0x479FA0 Slot: 8
	public object Clone() { }

	// RVA: 0x47A02C Offset: 0x47A02C VA: 0x47A02C Slot: 5
	public bool MoveNext() { }

	// RVA: 0x47A050 Offset: 0x47A050 VA: 0x47A050 Slot: 6
	public void Reset() { }
}

// Namespace: System
public static class Console // TypeDefIndex: 839
{
	// Fields
	internal static TextWriter stdout; // 0x0
	private static TextWriter stderr; // 0x4
	private static TextReader stdin; // 0x8
	private static Encoding inputEncoding; // 0xC
	private static Encoding outputEncoding; // 0x10

	// Properties
	public static TextWriter Error { get; }

	// Methods

	// RVA: 0x48AF50 Offset: 0x48AF50 VA: 0x48AF50
	private static void .cctor() { }

	// RVA: 0x48B0C0 Offset: 0x48B0C0 VA: 0x48B0C0
	private static void SetEncodings(Encoding inputEncoding, Encoding outputEncoding) { }

	// RVA: 0x48B7F0 Offset: 0x48B7F0 VA: 0x48B7F0
	public static TextWriter get_Error() { }

	// RVA: 0x48B87C Offset: 0x48B87C VA: 0x48B87C
	private static Stream Open(IntPtr handle, FileAccess access, int bufferSize) { }

	// RVA: 0x48B5B0 Offset: 0x48B5B0 VA: 0x48B5B0
	public static Stream OpenStandardError(int bufferSize) { }

	// RVA: 0x48B730 Offset: 0x48B730 VA: 0x48B730
	public static Stream OpenStandardInput(int bufferSize) { }

	// RVA: 0x48B670 Offset: 0x48B670 VA: 0x48B670
	public static Stream OpenStandardOutput(int bufferSize) { }

	// RVA: 0x48B9D0 Offset: 0x48B9D0 VA: 0x48B9D0
	public static void SetOut(TextWriter newOut) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A984 Offset: 0x9A984 VA: 0x9A984
[Serializable]
public abstract class ContextBoundObject : MarshalByRefObject // TypeDefIndex: 840
{
	// Methods

	// RVA: 0x48BAC0 Offset: 0x48BAC0 VA: 0x48BAC0
	protected void .ctor() { }
}

// Namespace: System
public static class Convert // TypeDefIndex: 841
{
	// Fields
	public static readonly object DBNull; // 0x0
	private static readonly Type[] conversionTable; // 0x4

	// Methods

	// RVA: 0x48BAC8 Offset: 0x48BAC8 VA: 0x48BAC8
	private static void .cctor() { }

	// RVA: 0x48C30C Offset: 0x48C30C VA: 0x48C30C
	private static byte[] InternalFromBase64String(string str, bool allowWhitespaceOnly) { }

	// RVA: 0x48C310 Offset: 0x48C310 VA: 0x48C310
	public static byte[] FromBase64String(string s) { }

	// RVA: 0x48C424 Offset: 0x48C424 VA: 0x48C424
	public static string ToBase64String(byte[] inArray) { }

	// RVA: 0x48C50C Offset: 0x48C50C VA: 0x48C50C
	public static string ToBase64String(byte[] inArray, int offset, int length) { }

	// RVA: 0x4776FC Offset: 0x4776FC VA: 0x4776FC
	public static bool ToBoolean(byte value) { }

	// RVA: 0x48C6C4 Offset: 0x48C6C4 VA: 0x48C6C4
	public static bool ToBoolean(Decimal value) { }

	// RVA: 0x48C78C Offset: 0x48C78C VA: 0x48C78C
	public static bool ToBoolean(double value) { }

	// RVA: 0x48C7A4 Offset: 0x48C7A4 VA: 0x48C7A4
	public static bool ToBoolean(float value) { }

	// RVA: 0x48C7BC Offset: 0x48C7BC VA: 0x48C7BC
	public static bool ToBoolean(int value) { }

	// RVA: 0x48C7C8 Offset: 0x48C7C8 VA: 0x48C7C8
	public static bool ToBoolean(long value) { }

	[CLSCompliantAttribute] // RVA: 0x9D4C8 Offset: 0x9D4C8 VA: 0x9D4C8
	// RVA: 0x48C7D4 Offset: 0x48C7D4 VA: 0x48C7D4
	public static bool ToBoolean(sbyte value) { }

	// RVA: 0x48C7E0 Offset: 0x48C7E0 VA: 0x48C7E0
	public static bool ToBoolean(short value) { }

	// RVA: 0x48C7EC Offset: 0x48C7EC VA: 0x48C7EC
	public static bool ToBoolean(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9D4DC Offset: 0x9D4DC VA: 0x9D4DC
	// RVA: 0x48C87C Offset: 0x48C87C VA: 0x48C87C
	public static bool ToBoolean(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x9D4F0 Offset: 0x9D4F0 VA: 0x9D4F0
	// RVA: 0x48C888 Offset: 0x48C888 VA: 0x48C888
	public static bool ToBoolean(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0x9D504 Offset: 0x9D504 VA: 0x9D504
	// RVA: 0x48C894 Offset: 0x48C894 VA: 0x48C894
	public static bool ToBoolean(ushort value) { }

	// RVA: 0x48C8A0 Offset: 0x48C8A0 VA: 0x48C8A0
	public static bool ToBoolean(object value) { }

	// RVA: 0x48C934 Offset: 0x48C934 VA: 0x48C934
	public static bool ToBoolean(object value, IFormatProvider provider) { }

	// RVA: 0x476444 Offset: 0x476444 VA: 0x476444
	public static byte ToByte(bool value) { }

	// RVA: 0x4786BC Offset: 0x4786BC VA: 0x4786BC
	public static byte ToByte(char value) { }

	// RVA: 0x48CB04 Offset: 0x48CB04 VA: 0x48CB04
	public static byte ToByte(Decimal value) { }

	// RVA: 0x48CD08 Offset: 0x48CD08 VA: 0x48CD08
	public static byte ToByte(double value) { }

	// RVA: 0x48CF24 Offset: 0x48CF24 VA: 0x48CF24
	public static byte ToByte(float value) { }

	// RVA: 0x48D12C Offset: 0x48D12C VA: 0x48D12C
	public static byte ToByte(int value) { }

	// RVA: 0x48D1E4 Offset: 0x48D1E4 VA: 0x48D1E4
	public static byte ToByte(long value) { }

	[CLSCompliantAttribute] // RVA: 0x9D518 Offset: 0x9D518 VA: 0x9D518
	// RVA: 0x48D2A4 Offset: 0x48D2A4 VA: 0x48D2A4
	public static byte ToByte(sbyte value) { }

	// RVA: 0x48D35C Offset: 0x48D35C VA: 0x48D35C
	public static byte ToByte(short value) { }

	// RVA: 0x48D418 Offset: 0x48D418 VA: 0x48D418
	public static byte ToByte(string value) { }

	// RVA: 0x48D430 Offset: 0x48D430 VA: 0x48D430
	public static byte ToByte(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9D52C Offset: 0x9D52C VA: 0x9D52C
	// RVA: 0x48D448 Offset: 0x48D448 VA: 0x48D448
	public static byte ToByte(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x9D540 Offset: 0x9D540 VA: 0x9D540
	// RVA: 0x48D500 Offset: 0x48D500 VA: 0x48D500
	public static byte ToByte(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0x9D554 Offset: 0x9D554 VA: 0x9D554
	// RVA: 0x48D5C0 Offset: 0x48D5C0 VA: 0x48D5C0
	public static byte ToByte(ushort value) { }

	// RVA: 0x48D678 Offset: 0x48D678 VA: 0x48D678
	public static byte ToByte(object value, IFormatProvider provider) { }

	// RVA: 0x477790 Offset: 0x477790 VA: 0x477790
	public static char ToChar(byte value) { }

	// RVA: 0x48D848 Offset: 0x48D848 VA: 0x48D848
	public static char ToChar(int value) { }

	// RVA: 0x48D900 Offset: 0x48D900 VA: 0x48D900
	public static char ToChar(long value) { }

	// RVA: 0x48D9C0 Offset: 0x48D9C0 VA: 0x48D9C0
	public static char ToChar(float value) { }

	[CLSCompliantAttribute] // RVA: 0x9D568 Offset: 0x9D568 VA: 0x9D568
	// RVA: 0x48DA5C Offset: 0x48DA5C VA: 0x48DA5C
	public static char ToChar(sbyte value) { }

	// RVA: 0x48DB14 Offset: 0x48DB14 VA: 0x48DB14
	public static char ToChar(short value) { }

	// RVA: 0x48DBCC Offset: 0x48DBCC VA: 0x48DBCC
	public static char ToChar(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9D57C Offset: 0x9D57C VA: 0x9D57C
	// RVA: 0x48DC4C Offset: 0x48DC4C VA: 0x48DC4C
	public static char ToChar(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x9D590 Offset: 0x9D590 VA: 0x9D590
	// RVA: 0x48DD04 Offset: 0x48DD04 VA: 0x48DD04
	public static char ToChar(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0x9D5A4 Offset: 0x9D5A4 VA: 0x9D5A4
	// RVA: 0x48DDC4 Offset: 0x48DDC4 VA: 0x48DDC4
	public static char ToChar(ushort value) { }

	// RVA: 0x48DDC8 Offset: 0x48DDC8 VA: 0x48DDC8
	public static char ToChar(object value, IFormatProvider provider) { }

	// RVA: 0x48DF98 Offset: 0x48DF98 VA: 0x48DF98
	public static DateTime ToDateTime(string value, IFormatProvider provider) { }

	// RVA: 0x48E074 Offset: 0x48E074 VA: 0x48E074
	public static DateTime ToDateTime(short value) { }

	// RVA: 0x48E110 Offset: 0x48E110 VA: 0x48E110
	public static DateTime ToDateTime(int value) { }

	// RVA: 0x48E1AC Offset: 0x48E1AC VA: 0x48E1AC
	public static DateTime ToDateTime(long value) { }

	// RVA: 0x48E248 Offset: 0x48E248 VA: 0x48E248
	public static DateTime ToDateTime(float value) { }

	// RVA: 0x48E2E4 Offset: 0x48E2E4 VA: 0x48E2E4
	public static DateTime ToDateTime(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9D5B8 Offset: 0x9D5B8 VA: 0x9D5B8
	// RVA: 0x48E504 Offset: 0x48E504 VA: 0x48E504
	public static DateTime ToDateTime(sbyte value) { }

	[CLSCompliantAttribute] // RVA: 0x9D5CC Offset: 0x9D5CC VA: 0x9D5CC
	// RVA: 0x48E5A0 Offset: 0x48E5A0 VA: 0x48E5A0
	public static DateTime ToDateTime(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0x9D5E0 Offset: 0x9D5E0 VA: 0x9D5E0
	// RVA: 0x48E63C Offset: 0x48E63C VA: 0x48E63C
	public static DateTime ToDateTime(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x9D5F4 Offset: 0x9D5F4 VA: 0x9D5F4
	// RVA: 0x48E6D8 Offset: 0x48E6D8 VA: 0x48E6D8
	public static DateTime ToDateTime(ulong value) { }

	// RVA: 0x4765EC Offset: 0x4765EC VA: 0x4765EC
	public static Decimal ToDecimal(bool value) { }

	// RVA: 0x4778A8 Offset: 0x4778A8 VA: 0x4778A8
	public static Decimal ToDecimal(byte value) { }

	// RVA: 0x48E774 Offset: 0x48E774 VA: 0x48E774
	public static Decimal ToDecimal(double value) { }

	// RVA: 0x48E814 Offset: 0x48E814 VA: 0x48E814
	public static Decimal ToDecimal(float value) { }

	// RVA: 0x48E8A0 Offset: 0x48E8A0 VA: 0x48E8A0
	public static Decimal ToDecimal(int value) { }

	// RVA: 0x48E92C Offset: 0x48E92C VA: 0x48E92C
	public static Decimal ToDecimal(long value) { }

	[CLSCompliantAttribute] // RVA: 0x9D608 Offset: 0x9D608 VA: 0x9D608
	// RVA: 0x48E9CC Offset: 0x48E9CC VA: 0x48E9CC
	public static Decimal ToDecimal(sbyte value) { }

	// RVA: 0x48EA58 Offset: 0x48EA58 VA: 0x48EA58
	public static Decimal ToDecimal(short value) { }

	// RVA: 0x48EAE4 Offset: 0x48EAE4 VA: 0x48EAE4
	public static Decimal ToDecimal(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9D61C Offset: 0x9D61C VA: 0x9D61C
	// RVA: 0x48EB9C Offset: 0x48EB9C VA: 0x48EB9C
	public static Decimal ToDecimal(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x9D630 Offset: 0x9D630 VA: 0x9D630
	// RVA: 0x48EC28 Offset: 0x48EC28 VA: 0x48EC28
	public static Decimal ToDecimal(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0x9D644 Offset: 0x9D644 VA: 0x9D644
	// RVA: 0x48ECC8 Offset: 0x48ECC8 VA: 0x48ECC8
	public static Decimal ToDecimal(ushort value) { }

	// RVA: 0x48ED54 Offset: 0x48ED54 VA: 0x48ED54
	public static Decimal ToDecimal(object value, IFormatProvider provider) { }

	// RVA: 0x476708 Offset: 0x476708 VA: 0x476708
	public static double ToDouble(bool value) { }

	// RVA: 0x4779BC Offset: 0x4779BC VA: 0x4779BC
	public static double ToDouble(byte value) { }

	// RVA: 0x48EF44 Offset: 0x48EF44 VA: 0x48EF44
	public static double ToDouble(Decimal value) { }

	// RVA: 0x48EFEC Offset: 0x48EFEC VA: 0x48EFEC
	public static double ToDouble(double value) { }

	// RVA: 0x48EFF0 Offset: 0x48EFF0 VA: 0x48EFF0
	public static double ToDouble(float value) { }

	// RVA: 0x48F000 Offset: 0x48F000 VA: 0x48F000
	public static double ToDouble(int value) { }

	// RVA: 0x48F010 Offset: 0x48F010 VA: 0x48F010
	public static double ToDouble(long value) { }

	[CLSCompliantAttribute] // RVA: 0x9D658 Offset: 0x9D658 VA: 0x9D658
	// RVA: 0x48F020 Offset: 0x48F020 VA: 0x48F020
	public static double ToDouble(sbyte value) { }

	// RVA: 0x48F030 Offset: 0x48F030 VA: 0x48F030
	public static double ToDouble(short value) { }

	// RVA: 0x48F040 Offset: 0x48F040 VA: 0x48F040
	public static double ToDouble(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9D66C Offset: 0x9D66C VA: 0x9D66C
	// RVA: 0x48F05C Offset: 0x48F05C VA: 0x48F05C
	public static double ToDouble(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x9D680 Offset: 0x9D680 VA: 0x9D680
	// RVA: 0x48F06C Offset: 0x48F06C VA: 0x48F06C
	public static double ToDouble(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0x9D694 Offset: 0x9D694 VA: 0x9D694
	// RVA: 0x48F07C Offset: 0x48F07C VA: 0x48F07C
	public static double ToDouble(ushort value) { }

	// RVA: 0x48F08C Offset: 0x48F08C VA: 0x48F08C
	public static double ToDouble(object value, IFormatProvider provider) { }

	// RVA: 0x4767A8 Offset: 0x4767A8 VA: 0x4767A8
	public static short ToInt16(bool value) { }

	// RVA: 0x477A4C Offset: 0x477A4C VA: 0x477A4C
	public static short ToInt16(byte value) { }

	// RVA: 0x478998 Offset: 0x478998 VA: 0x478998
	public static short ToInt16(char value) { }

	// RVA: 0x48F264 Offset: 0x48F264 VA: 0x48F264
	public static short ToInt16(Decimal value) { }

	// RVA: 0x48F470 Offset: 0x48F470 VA: 0x48F470
	public static short ToInt16(double value) { }

	// RVA: 0x48F600 Offset: 0x48F600 VA: 0x48F600
	public static short ToInt16(float value) { }

	// RVA: 0x48F77C Offset: 0x48F77C VA: 0x48F77C
	public static short ToInt16(int value) { }

	// RVA: 0x48F838 Offset: 0x48F838 VA: 0x48F838
	public static short ToInt16(long value) { }

	[CLSCompliantAttribute] // RVA: 0x9D6A8 Offset: 0x9D6A8 VA: 0x9D6A8
	// RVA: 0x48F900 Offset: 0x48F900 VA: 0x48F900
	public static short ToInt16(sbyte value) { }

	// RVA: 0x48F904 Offset: 0x48F904 VA: 0x48F904
	public static short ToInt16(short value) { }

	// RVA: 0x48F908 Offset: 0x48F908 VA: 0x48F908
	public static short ToInt16(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9D6BC Offset: 0x9D6BC VA: 0x9D6BC
	// RVA: 0x48F91C Offset: 0x48F91C VA: 0x48F91C
	public static short ToInt16(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x9D6D0 Offset: 0x9D6D0 VA: 0x9D6D0
	// RVA: 0x48F9D4 Offset: 0x48F9D4 VA: 0x48F9D4
	public static short ToInt16(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0x9D6E4 Offset: 0x9D6E4 VA: 0x9D6E4
	// RVA: 0x48FA94 Offset: 0x48FA94 VA: 0x48FA94
	public static short ToInt16(ushort value) { }

	// RVA: 0x48FB4C Offset: 0x48FB4C VA: 0x48FB4C
	public static short ToInt16(object value) { }

	// RVA: 0x48FBE0 Offset: 0x48FBE0 VA: 0x48FBE0
	public static short ToInt16(object value, IFormatProvider provider) { }

	// RVA: 0x476834 Offset: 0x476834 VA: 0x476834
	public static int ToInt32(bool value) { }

	// RVA: 0x477AD0 Offset: 0x477AD0 VA: 0x477AD0
	public static int ToInt32(byte value) { }

	// RVA: 0x478AD0 Offset: 0x478AD0 VA: 0x478AD0
	public static int ToInt32(char value) { }

	// RVA: 0x48FDB0 Offset: 0x48FDB0 VA: 0x48FDB0
	public static int ToInt32(Decimal value) { }

	// RVA: 0x48FFB8 Offset: 0x48FFB8 VA: 0x48FFB8
	public static int ToInt32(double value) { }

	// RVA: 0x490168 Offset: 0x490168 VA: 0x490168
	public static int ToInt32(float value) { }

	// RVA: 0x490310 Offset: 0x490310 VA: 0x490310
	public static int ToInt32(long value) { }

	[CLSCompliantAttribute] // RVA: 0x9D6F8 Offset: 0x9D6F8 VA: 0x9D6F8
	// RVA: 0x4903D0 Offset: 0x4903D0 VA: 0x4903D0
	public static int ToInt32(sbyte value) { }

	// RVA: 0x4903D4 Offset: 0x4903D4 VA: 0x4903D4
	public static int ToInt32(short value) { }

	// RVA: 0x4903D8 Offset: 0x4903D8 VA: 0x4903D8
	public static int ToInt32(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9D70C Offset: 0x9D70C VA: 0x9D70C
	// RVA: 0x4903EC Offset: 0x4903EC VA: 0x4903EC
	public static int ToInt32(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x9D720 Offset: 0x9D720 VA: 0x9D720
	// RVA: 0x4904A4 Offset: 0x4904A4 VA: 0x4904A4
	public static int ToInt32(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0x9D734 Offset: 0x9D734 VA: 0x9D734
	// RVA: 0x490564 Offset: 0x490564 VA: 0x490564
	public static int ToInt32(ushort value) { }

	// RVA: 0x490568 Offset: 0x490568 VA: 0x490568
	public static int ToInt32(object value) { }

	// RVA: 0x4905FC Offset: 0x4905FC VA: 0x4905FC
	public static int ToInt32(object value, IFormatProvider provider) { }

	// RVA: 0x4768C4 Offset: 0x4768C4 VA: 0x4768C4
	public static long ToInt64(bool value) { }

	// RVA: 0x477B58 Offset: 0x477B58 VA: 0x477B58
	public static long ToInt64(byte value) { }

	// RVA: 0x478B58 Offset: 0x478B58 VA: 0x478B58
	public static long ToInt64(char value) { }

	// RVA: 0x4907CC Offset: 0x4907CC VA: 0x4907CC
	public static long ToInt64(Decimal value) { }

	// RVA: 0x4909F0 Offset: 0x4909F0 VA: 0x4909F0
	public static long ToInt64(double value) { }

	// RVA: 0x490B80 Offset: 0x490B80 VA: 0x490B80
	public static long ToInt64(float value) { }

	// RVA: 0x490CFC Offset: 0x490CFC VA: 0x490CFC
	public static long ToInt64(int value) { }

	// RVA: 0x490D04 Offset: 0x490D04 VA: 0x490D04
	public static long ToInt64(long value) { }

	[CLSCompliantAttribute] // RVA: 0x9D748 Offset: 0x9D748 VA: 0x9D748
	// RVA: 0x490D08 Offset: 0x490D08 VA: 0x490D08
	public static long ToInt64(sbyte value) { }

	// RVA: 0x490D10 Offset: 0x490D10 VA: 0x490D10
	public static long ToInt64(short value) { }

	// RVA: 0x490D18 Offset: 0x490D18 VA: 0x490D18
	public static long ToInt64(string value) { }

	// RVA: 0x490D30 Offset: 0x490D30 VA: 0x490D30
	public static long ToInt64(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9D75C Offset: 0x9D75C VA: 0x9D75C
	// RVA: 0x490D48 Offset: 0x490D48 VA: 0x490D48
	public static long ToInt64(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x9D770 Offset: 0x9D770 VA: 0x9D770
	// RVA: 0x490D50 Offset: 0x490D50 VA: 0x490D50
	public static long ToInt64(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0x9D784 Offset: 0x9D784 VA: 0x9D784
	// RVA: 0x490E10 Offset: 0x490E10 VA: 0x490E10
	public static long ToInt64(ushort value) { }

	// RVA: 0x490E18 Offset: 0x490E18 VA: 0x490E18
	public static long ToInt64(object value) { }

	// RVA: 0x490EB0 Offset: 0x490EB0 VA: 0x490EB0
	public static long ToInt64(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9D798 Offset: 0x9D798 VA: 0x9D798
	// RVA: 0x476954 Offset: 0x476954 VA: 0x476954
	public static sbyte ToSByte(bool value) { }

	[CLSCompliantAttribute] // RVA: 0x9D7AC Offset: 0x9D7AC VA: 0x9D7AC
	// RVA: 0x477BE4 Offset: 0x477BE4 VA: 0x477BE4
	public static sbyte ToSByte(byte value) { }

	[CLSCompliantAttribute] // RVA: 0x9D7C0 Offset: 0x9D7C0 VA: 0x9D7C0
	// RVA: 0x478BE4 Offset: 0x478BE4 VA: 0x478BE4
	public static sbyte ToSByte(char value) { }

	[CLSCompliantAttribute] // RVA: 0x9D7D4 Offset: 0x9D7D4 VA: 0x9D7D4
	// RVA: 0x491084 Offset: 0x491084 VA: 0x491084
	public static sbyte ToSByte(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0x9D7E8 Offset: 0x9D7E8 VA: 0x9D7E8
	// RVA: 0x491288 Offset: 0x491288 VA: 0x491288
	public static sbyte ToSByte(double value) { }

	[CLSCompliantAttribute] // RVA: 0x9D7FC Offset: 0x9D7FC VA: 0x9D7FC
	// RVA: 0x491418 Offset: 0x491418 VA: 0x491418
	public static sbyte ToSByte(float value) { }

	[CLSCompliantAttribute] // RVA: 0x9D810 Offset: 0x9D810 VA: 0x9D810
	// RVA: 0x491594 Offset: 0x491594 VA: 0x491594
	public static sbyte ToSByte(int value) { }

	[CLSCompliantAttribute] // RVA: 0x9D824 Offset: 0x9D824 VA: 0x9D824
	// RVA: 0x491650 Offset: 0x491650 VA: 0x491650
	public static sbyte ToSByte(long value) { }

	[CLSCompliantAttribute] // RVA: 0x9D838 Offset: 0x9D838 VA: 0x9D838
	// RVA: 0x491718 Offset: 0x491718 VA: 0x491718
	public static sbyte ToSByte(short value) { }

	[CLSCompliantAttribute] // RVA: 0x9D84C Offset: 0x9D84C VA: 0x9D84C
	// RVA: 0x4917D8 Offset: 0x4917D8 VA: 0x4917D8
	public static sbyte ToSByte(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9D860 Offset: 0x9D860 VA: 0x9D860
	// RVA: 0x491898 Offset: 0x491898 VA: 0x491898
	public static sbyte ToSByte(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x9D874 Offset: 0x9D874 VA: 0x9D874
	// RVA: 0x491950 Offset: 0x491950 VA: 0x491950
	public static sbyte ToSByte(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0x9D888 Offset: 0x9D888 VA: 0x9D888
	// RVA: 0x491A10 Offset: 0x491A10 VA: 0x491A10
	public static sbyte ToSByte(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0x9D89C Offset: 0x9D89C VA: 0x9D89C
	// RVA: 0x491AC8 Offset: 0x491AC8 VA: 0x491AC8
	public static sbyte ToSByte(object value, IFormatProvider provider) { }

	// RVA: 0x4769EC Offset: 0x4769EC VA: 0x4769EC
	public static float ToSingle(bool value) { }

	// RVA: 0x477D24 Offset: 0x477D24 VA: 0x477D24
	public static float ToSingle(byte value) { }

	// RVA: 0x491C98 Offset: 0x491C98 VA: 0x491C98
	public static float ToSingle(Decimal value) { }

	// RVA: 0x491D40 Offset: 0x491D40 VA: 0x491D40
	public static float ToSingle(double value) { }

	// RVA: 0x491D50 Offset: 0x491D50 VA: 0x491D50
	public static float ToSingle(float value) { }

	// RVA: 0x491D54 Offset: 0x491D54 VA: 0x491D54
	public static float ToSingle(int value) { }

	// RVA: 0x491D64 Offset: 0x491D64 VA: 0x491D64
	public static float ToSingle(long value) { }

	[CLSCompliantAttribute] // RVA: 0x9D8B0 Offset: 0x9D8B0 VA: 0x9D8B0
	// RVA: 0x491D74 Offset: 0x491D74 VA: 0x491D74
	public static float ToSingle(sbyte value) { }

	// RVA: 0x491D84 Offset: 0x491D84 VA: 0x491D84
	public static float ToSingle(short value) { }

	// RVA: 0x491D94 Offset: 0x491D94 VA: 0x491D94
	public static float ToSingle(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9D8C4 Offset: 0x9D8C4 VA: 0x9D8C4
	// RVA: 0x491DA8 Offset: 0x491DA8 VA: 0x491DA8
	public static float ToSingle(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x9D8D8 Offset: 0x9D8D8 VA: 0x9D8D8
	// RVA: 0x491DBC Offset: 0x491DBC VA: 0x491DBC
	public static float ToSingle(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0x9D8EC Offset: 0x9D8EC VA: 0x9D8EC
	// RVA: 0x491DD8 Offset: 0x491DD8 VA: 0x491DD8
	public static float ToSingle(ushort value) { }

	// RVA: 0x491DE8 Offset: 0x491DE8 VA: 0x491DE8
	public static float ToSingle(object value, IFormatProvider provider) { }

	// RVA: 0x491FC4 Offset: 0x491FC4 VA: 0x491FC4
	public static string ToString(object value) { }

	// RVA: 0x492048 Offset: 0x492048 VA: 0x492048
	public static string ToString(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9D900 Offset: 0x9D900 VA: 0x9D900
	// RVA: 0x476A90 Offset: 0x476A90 VA: 0x476A90
	public static ushort ToUInt16(bool value) { }

	[CLSCompliantAttribute] // RVA: 0x9D914 Offset: 0x9D914 VA: 0x9D914
	// RVA: 0x477DB4 Offset: 0x477DB4 VA: 0x477DB4
	public static ushort ToUInt16(byte value) { }

	[CLSCompliantAttribute] // RVA: 0x9D928 Offset: 0x9D928 VA: 0x9D928
	// RVA: 0x478DA4 Offset: 0x478DA4 VA: 0x478DA4
	public static ushort ToUInt16(char value) { }

	[CLSCompliantAttribute] // RVA: 0x9D93C Offset: 0x9D93C VA: 0x9D93C
	// RVA: 0x4922BC Offset: 0x4922BC VA: 0x4922BC
	public static ushort ToUInt16(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0x9D950 Offset: 0x9D950 VA: 0x9D950
	// RVA: 0x4924C0 Offset: 0x4924C0 VA: 0x4924C0
	public static ushort ToUInt16(double value) { }

	[CLSCompliantAttribute] // RVA: 0x9D964 Offset: 0x9D964 VA: 0x9D964
	// RVA: 0x492658 Offset: 0x492658 VA: 0x492658
	public static ushort ToUInt16(float value) { }

	[CLSCompliantAttribute] // RVA: 0x9D978 Offset: 0x9D978 VA: 0x9D978
	// RVA: 0x4927E4 Offset: 0x4927E4 VA: 0x4927E4
	public static ushort ToUInt16(int value) { }

	[CLSCompliantAttribute] // RVA: 0x9D98C Offset: 0x9D98C VA: 0x9D98C
	// RVA: 0x49289C Offset: 0x49289C VA: 0x49289C
	public static ushort ToUInt16(long value) { }

	[CLSCompliantAttribute] // RVA: 0x9D9A0 Offset: 0x9D9A0 VA: 0x9D9A0
	// RVA: 0x49295C Offset: 0x49295C VA: 0x49295C
	public static ushort ToUInt16(sbyte value) { }

	[CLSCompliantAttribute] // RVA: 0x9D9B4 Offset: 0x9D9B4 VA: 0x9D9B4
	// RVA: 0x492A14 Offset: 0x492A14 VA: 0x492A14
	public static ushort ToUInt16(short value) { }

	[CLSCompliantAttribute] // RVA: 0x9D9C8 Offset: 0x9D9C8 VA: 0x9D9C8
	// RVA: 0x492ACC Offset: 0x492ACC VA: 0x492ACC
	public static ushort ToUInt16(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9D9DC Offset: 0x9D9DC VA: 0x9D9DC
	// RVA: 0x492AE0 Offset: 0x492AE0 VA: 0x492AE0
	public static ushort ToUInt16(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x9D9F0 Offset: 0x9D9F0 VA: 0x9D9F0
	// RVA: 0x492B98 Offset: 0x492B98 VA: 0x492B98
	public static ushort ToUInt16(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0x9DA04 Offset: 0x9DA04 VA: 0x9DA04
	// RVA: 0x492C58 Offset: 0x492C58 VA: 0x492C58
	public static ushort ToUInt16(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9DA18 Offset: 0x9DA18 VA: 0x9DA18
	// RVA: 0x476B1C Offset: 0x476B1C VA: 0x476B1C
	public static uint ToUInt32(bool value) { }

	[CLSCompliantAttribute] // RVA: 0x9DA2C Offset: 0x9DA2C VA: 0x9DA2C
	// RVA: 0x477E38 Offset: 0x477E38 VA: 0x477E38
	public static uint ToUInt32(byte value) { }

	[CLSCompliantAttribute] // RVA: 0x9DA40 Offset: 0x9DA40 VA: 0x9DA40
	// RVA: 0x478E28 Offset: 0x478E28 VA: 0x478E28
	public static uint ToUInt32(char value) { }

	[CLSCompliantAttribute] // RVA: 0x9DA54 Offset: 0x9DA54 VA: 0x9DA54
	// RVA: 0x492E28 Offset: 0x492E28 VA: 0x492E28
	public static uint ToUInt32(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0x9DA68 Offset: 0x9DA68 VA: 0x9DA68
	// RVA: 0x493040 Offset: 0x493040 VA: 0x493040
	public static uint ToUInt32(double value) { }

	[CLSCompliantAttribute] // RVA: 0x9DA7C Offset: 0x9DA7C VA: 0x9DA7C
	// RVA: 0x4931D8 Offset: 0x4931D8 VA: 0x4931D8
	public static uint ToUInt32(float value) { }

	[CLSCompliantAttribute] // RVA: 0x9DA90 Offset: 0x9DA90 VA: 0x9DA90
	// RVA: 0x493360 Offset: 0x493360 VA: 0x493360
	public static uint ToUInt32(int value) { }

	[CLSCompliantAttribute] // RVA: 0x9DAA4 Offset: 0x9DAA4 VA: 0x9DAA4
	// RVA: 0x493418 Offset: 0x493418 VA: 0x493418
	public static uint ToUInt32(long value) { }

	[CLSCompliantAttribute] // RVA: 0x9DAB8 Offset: 0x9DAB8 VA: 0x9DAB8
	// RVA: 0x4934D4 Offset: 0x4934D4 VA: 0x4934D4
	public static uint ToUInt32(sbyte value) { }

	[CLSCompliantAttribute] // RVA: 0x9DACC Offset: 0x9DACC VA: 0x9DACC
	// RVA: 0x49358C Offset: 0x49358C VA: 0x49358C
	public static uint ToUInt32(short value) { }

	[CLSCompliantAttribute] // RVA: 0x9DAE0 Offset: 0x9DAE0 VA: 0x9DAE0
	// RVA: 0x493644 Offset: 0x493644 VA: 0x493644
	public static uint ToUInt32(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9DAF4 Offset: 0x9DAF4 VA: 0x9DAF4
	// RVA: 0x493658 Offset: 0x493658 VA: 0x493658
	public static uint ToUInt32(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0x9DB08 Offset: 0x9DB08 VA: 0x9DB08
	// RVA: 0x493714 Offset: 0x493714 VA: 0x493714
	public static uint ToUInt32(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0x9DB1C Offset: 0x9DB1C VA: 0x9DB1C
	// RVA: 0x493718 Offset: 0x493718 VA: 0x493718
	public static uint ToUInt32(object value) { }

	[CLSCompliantAttribute] // RVA: 0x9DB30 Offset: 0x9DB30 VA: 0x9DB30
	// RVA: 0x4937AC Offset: 0x4937AC VA: 0x4937AC
	public static uint ToUInt32(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9DB44 Offset: 0x9DB44 VA: 0x9DB44
	// RVA: 0x476BAC Offset: 0x476BAC VA: 0x476BAC
	public static ulong ToUInt64(bool value) { }

	[CLSCompliantAttribute] // RVA: 0x9DB58 Offset: 0x9DB58 VA: 0x9DB58
	// RVA: 0x477EC0 Offset: 0x477EC0 VA: 0x477EC0
	public static ulong ToUInt64(byte value) { }

	[CLSCompliantAttribute] // RVA: 0x9DB6C Offset: 0x9DB6C VA: 0x9DB6C
	// RVA: 0x478EB0 Offset: 0x478EB0 VA: 0x478EB0
	public static ulong ToUInt64(char value) { }

	[CLSCompliantAttribute] // RVA: 0x9DB80 Offset: 0x9DB80 VA: 0x9DB80
	// RVA: 0x49397C Offset: 0x49397C VA: 0x49397C
	public static ulong ToUInt64(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0x9DB94 Offset: 0x9DB94 VA: 0x9DB94
	// RVA: 0x493B90 Offset: 0x493B90 VA: 0x493B90
	public static ulong ToUInt64(double value) { }

	[CLSCompliantAttribute] // RVA: 0x9DBA8 Offset: 0x9DBA8 VA: 0x9DBA8
	// RVA: 0x493D40 Offset: 0x493D40 VA: 0x493D40
	public static ulong ToUInt64(float value) { }

	[CLSCompliantAttribute] // RVA: 0x9DBBC Offset: 0x9DBBC VA: 0x9DBBC
	// RVA: 0x493EE0 Offset: 0x493EE0 VA: 0x493EE0
	public static ulong ToUInt64(int value) { }

	[CLSCompliantAttribute] // RVA: 0x9DBD0 Offset: 0x9DBD0 VA: 0x9DBD0
	// RVA: 0x493F9C Offset: 0x493F9C VA: 0x493F9C
	public static ulong ToUInt64(long value) { }

	[CLSCompliantAttribute] // RVA: 0x9DBE4 Offset: 0x9DBE4 VA: 0x9DBE4
	// RVA: 0x49405C Offset: 0x49405C VA: 0x49405C
	public static ulong ToUInt64(sbyte value) { }

	[CLSCompliantAttribute] // RVA: 0x9DBF8 Offset: 0x9DBF8 VA: 0x9DBF8
	// RVA: 0x49410C Offset: 0x49410C VA: 0x49410C
	public static ulong ToUInt64(short value) { }

	[CLSCompliantAttribute] // RVA: 0x9DC0C Offset: 0x9DC0C VA: 0x9DC0C
	// RVA: 0x4941C8 Offset: 0x4941C8 VA: 0x4941C8
	public static ulong ToUInt64(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x9DC20 Offset: 0x9DC20 VA: 0x9DC20
	// RVA: 0x4941E0 Offset: 0x4941E0 VA: 0x4941E0
	public static ulong ToUInt64(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x9DC34 Offset: 0x9DC34 VA: 0x9DC34
	// RVA: 0x4941E8 Offset: 0x4941E8 VA: 0x4941E8
	public static ulong ToUInt64(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0x9DC48 Offset: 0x9DC48 VA: 0x9DC48
	// RVA: 0x4941F0 Offset: 0x4941F0 VA: 0x4941F0
	public static ulong ToUInt64(object value) { }

	[CLSCompliantAttribute] // RVA: 0x9DC5C Offset: 0x9DC5C VA: 0x9DC5C
	// RVA: 0x494288 Offset: 0x494288 VA: 0x494288
	public static ulong ToUInt64(object value, IFormatProvider provider) { }

	// RVA: 0x49445C Offset: 0x49445C VA: 0x49445C
	public static object ChangeType(object value, Type conversionType) { }

	// RVA: 0x474DA4 Offset: 0x474DA4 VA: 0x474DA4
	internal static object ToType(object value, Type conversionType, IFormatProvider provider, bool try_target_to_type) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A998 Offset: 0x9A998 VA: 0x9A998
[Serializable]
public sealed class DBNull : IConvertible, ISerializable // TypeDefIndex: 842
{
	// Fields
	public static readonly DBNull Value; // 0x0

	// Methods

	// RVA: 0x495484 Offset: 0x495484 VA: 0x495484
	private void .ctor() { }

	// RVA: 0x49548C Offset: 0x49548C VA: 0x49548C
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x495524 Offset: 0x495524 VA: 0x495524
	private static void .cctor() { }

	// RVA: 0x495598 Offset: 0x495598 VA: 0x495598 Slot: 4
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x495620 Offset: 0x495620 VA: 0x495620 Slot: 5
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x4956A8 Offset: 0x4956A8 VA: 0x4956A8 Slot: 6
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x495730 Offset: 0x495730 VA: 0x495730 Slot: 7
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x4957B8 Offset: 0x4957B8 VA: 0x4957B8 Slot: 8
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x495840 Offset: 0x495840 VA: 0x495840 Slot: 9
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x4958C8 Offset: 0x4958C8 VA: 0x4958C8 Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x495950 Offset: 0x495950 VA: 0x495950 Slot: 11
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x4959D8 Offset: 0x4959D8 VA: 0x4959D8 Slot: 12
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x495A60 Offset: 0x495A60 VA: 0x495A60 Slot: 13
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x495AE8 Offset: 0x495AE8 VA: 0x495AE8 Slot: 14
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x495B70 Offset: 0x495B70 VA: 0x495B70 Slot: 16
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0x495CEC Offset: 0x495CEC VA: 0x495CEC Slot: 17
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x495D74 Offset: 0x495D74 VA: 0x495D74 Slot: 18
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x495DFC Offset: 0x495DFC VA: 0x495DFC Slot: 19
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x495E84 Offset: 0x495E84 VA: 0x495E84 Slot: 20
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x495EA4 Offset: 0x495EA4 VA: 0x495EA4 Slot: 3
	public override string ToString() { }

	// RVA: 0x495F30 Offset: 0x495F30 VA: 0x495F30 Slot: 15
	public string ToString(IFormatProvider provider) { }
}

// Namespace: System
[Serializable]
public struct DateTime : IFormattable, IConvertible, IComparable, IComparable<DateTime>, IEquatable<DateTime> // TypeDefIndex: 843
{
	// Fields
	private TimeSpan ticks; // 0x0
	private DateTimeKind kind; // 0x8
	public static readonly DateTime MaxValue; // 0x0
	public static readonly DateTime MinValue; // 0x10
	private static readonly string[] ParseTimeFormats; // 0x20
	private static readonly string[] ParseYearDayMonthFormats; // 0x24
	private static readonly string[] ParseYearMonthDayFormats; // 0x28
	private static readonly string[] ParseDayMonthYearFormats; // 0x2C
	private static readonly string[] ParseMonthDayYearFormats; // 0x30
	private static readonly string[] MonthDayShortFormats; // 0x34
	private static readonly string[] DayMonthShortFormats; // 0x38
	private static readonly int[] daysmonth; // 0x3C
	private static readonly int[] daysmonthleap; // 0x40
	private static object to_local_time_span_object; // 0x44
	private static long last_now; // 0x48

	// Properties
	public int Month { get; }
	public int Day { get; }
	public DayOfWeek DayOfWeek { get; }
	public int Hour { get; }
	public int Minute { get; }
	public int Second { get; }
	public static DateTime Now { get; }
	public long Ticks { get; }
	public static DateTime Today { get; }
	public static DateTime UtcNow { get; }
	public int Year { get; }
	public DateTimeKind Kind { get; }

	// Methods

	// RVA: 0xC8620 Offset: 0xC8620 VA: 0xC8620
	public void .ctor(long ticks) { }

	// RVA: 0xC863C Offset: 0xC863C VA: 0xC863C
	public void .ctor(int year, int month, int day) { }

	// RVA: 0xC866C Offset: 0xC866C VA: 0xC866C
	public void .ctor(int year, int month, int day, int hour, int minute, int second, int millisecond) { }

	// RVA: 0xC86A8 Offset: 0xC86A8 VA: 0xC86A8
	internal void .ctor(bool check, TimeSpan value) { }

	// RVA: 0xC86C4 Offset: 0xC86C4 VA: 0xC86C4
	public void .ctor(long ticks, DateTimeKind kind) { }

	// RVA: 0x2E1B64 Offset: 0x2E1B64 VA: 0x2E1B64
	private static void .cctor() { }

	// RVA: 0xC86F4 Offset: 0xC86F4 VA: 0xC86F4 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xC8704 Offset: 0xC8704 VA: 0xC8704 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xC8714 Offset: 0xC8714 VA: 0xC8714 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xC8724 Offset: 0xC8724 VA: 0xC8724 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xC8734 Offset: 0xC8734 VA: 0xC8734 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xC8744 Offset: 0xC8744 VA: 0xC8744 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xC8754 Offset: 0xC8754 VA: 0xC8754 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xC8764 Offset: 0xC8764 VA: 0xC8764 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xC8774 Offset: 0xC8774 VA: 0xC8774 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xC8784 Offset: 0xC8784 VA: 0xC8784 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xC8794 Offset: 0xC8794 VA: 0xC8794 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xC87A4 Offset: 0xC87A4 VA: 0xC87A4 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xC87AC Offset: 0xC87AC VA: 0xC87AC Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xC87BC Offset: 0xC87BC VA: 0xC87BC Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xC87CC Offset: 0xC87CC VA: 0xC87CC Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x2E16E4 Offset: 0x2E16E4 VA: 0x2E16E4
	private static int AbsoluteDays(int year, int month, int day) { }

	// RVA: 0xC87DC Offset: 0xC87DC VA: 0xC87DC
	private int FromTicks(DateTime.Which what) { }

	// RVA: 0xC87E4 Offset: 0xC87E4 VA: 0xC87E4
	public int get_Month() { }

	// RVA: 0xC87F0 Offset: 0xC87F0 VA: 0xC87F0
	public int get_Day() { }

	// RVA: 0xC87FC Offset: 0xC87FC VA: 0xC87FC
	public DayOfWeek get_DayOfWeek() { }

	// RVA: 0xC8834 Offset: 0xC8834 VA: 0xC8834
	public int get_Hour() { }

	// RVA: 0xC8840 Offset: 0xC8840 VA: 0xC8840
	public int get_Minute() { }

	// RVA: 0xC884C Offset: 0xC884C VA: 0xC884C
	public int get_Second() { }

	// RVA: 0x2E48B8 Offset: 0x2E48B8 VA: 0x2E48B8
	internal static long GetTimeMonotonic() { }

	// RVA: 0x2E48BC Offset: 0x2E48BC VA: 0x2E48BC
	internal static long GetNow() { }

	// RVA: 0x2E48C0 Offset: 0x2E48C0 VA: 0x2E48C0
	public static DateTime get_Now() { }

	// RVA: 0xC8858 Offset: 0xC8858 VA: 0xC8858
	public long get_Ticks() { }

	// RVA: 0x2E4C20 Offset: 0x2E4C20 VA: 0x2E4C20
	public static DateTime get_Today() { }

	// RVA: 0x2E4D2C Offset: 0x2E4D2C VA: 0x2E4D2C
	public static DateTime get_UtcNow() { }

	// RVA: 0xC8864 Offset: 0xC8864 VA: 0xC8864
	public int get_Year() { }

	// RVA: 0xC8870 Offset: 0xC8870 VA: 0xC8870
	public DateTimeKind get_Kind() { }

	// RVA: 0xC8878 Offset: 0xC8878 VA: 0xC8878
	public DateTime Add(TimeSpan value) { }

	// RVA: 0xC8894 Offset: 0xC8894 VA: 0xC8894
	public DateTime AddTicks(long value) { }

	// RVA: 0xC88B0 Offset: 0xC88B0 VA: 0xC88B0
	public DateTime AddMilliseconds(double value) { }

	// RVA: 0xC88D0 Offset: 0xC88D0 VA: 0xC88D0
	public DateTime AddSeconds(double value) { }

	// RVA: 0x2E5158 Offset: 0x2E5158 VA: 0x2E5158
	public static int Compare(DateTime t1, DateTime t2) { }

	// RVA: 0xC8908 Offset: 0xC8908 VA: 0xC8908 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xC8910 Offset: 0xC8910 VA: 0xC8910 Slot: 22
	public int CompareTo(DateTime value) { }

	// RVA: 0xC8938 Offset: 0xC8938 VA: 0xC8938 Slot: 23
	public bool Equals(DateTime value) { }

	// RVA: 0xC8960 Offset: 0xC8960 VA: 0xC8960
	public long ToBinary() { }

	// RVA: 0x2E5668 Offset: 0x2E5668 VA: 0x2E5668
	public static DateTime FromBinary(long dateData) { }

	// RVA: 0x2E5888 Offset: 0x2E5888 VA: 0x2E5888
	public static DateTime SpecifyKind(DateTime value, DateTimeKind kind) { }

	// RVA: 0x2E1510 Offset: 0x2E1510 VA: 0x2E1510
	public static int DaysInMonth(int year, int month) { }

	// RVA: 0xC8968 Offset: 0xC8968 VA: 0xC8968 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0xC8970 Offset: 0xC8970 VA: 0xC8970
	private void CheckDateTimeKind(DateTimeKind kind) { }

	// RVA: 0xC8974 Offset: 0xC8974 VA: 0xC8974 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2E4524 Offset: 0x2E4524 VA: 0x2E4524
	public static bool IsLeapYear(int year) { }

	// RVA: 0x2E59E4 Offset: 0x2E59E4 VA: 0x2E59E4
	public static DateTime Parse(string s, IFormatProvider provider) { }

	// RVA: 0x2E5A80 Offset: 0x2E5A80 VA: 0x2E5A80
	public static DateTime Parse(string s, IFormatProvider provider, DateTimeStyles styles) { }

	// RVA: 0x2E5BEC Offset: 0x2E5BEC VA: 0x2E5BEC
	internal static bool CoreParse(string s, IFormatProvider provider, DateTimeStyles styles, out DateTime result, out DateTimeOffset dto, bool setExceptionOnError, ref Exception exception) { }

	// RVA: 0x2E6A7C Offset: 0x2E6A7C VA: 0x2E6A7C
	private static string[] YearMonthDayFormats(DateTimeFormatInfo dfi, bool setExceptionOnError, ref Exception exc) { }

	// RVA: 0x2EA8A8 Offset: 0x2EA8A8 VA: 0x2EA8A8
	private static int _ParseNumber(string s, int valuePos, int min_digits, int digits, bool leadingzero, bool sloppy_parsing, out int num_parsed) { }

	// RVA: 0x2EAABC Offset: 0x2EAABC VA: 0x2EAABC
	private static int _ParseEnum(string s, int sPos, string[] values, string[] invValues, bool exact, out int num_parsed) { }

	// RVA: 0x2EAED4 Offset: 0x2EAED4 VA: 0x2EAED4
	private static bool _ParseString(string s, int sPos, int maxlength, string value, out int num_parsed) { }

	// RVA: 0x2EB0BC Offset: 0x2EB0BC VA: 0x2EB0BC
	private static bool _ParseAmPm(string s, int valuePos, int num, DateTimeFormatInfo dfi, bool exact, out int num_parsed, ref int ampm) { }

	// RVA: 0x2EB5A4 Offset: 0x2EB5A4 VA: 0x2EB5A4
	private static bool _ParseTimeSeparator(string s, int sPos, DateTimeFormatInfo dfi, bool exact, out int num_parsed) { }

	// RVA: 0x2EB6C8 Offset: 0x2EB6C8 VA: 0x2EB6C8
	private static bool _ParseDateSeparator(string s, int sPos, DateTimeFormatInfo dfi, bool exact, out int num_parsed) { }

	// RVA: 0x2EB4D0 Offset: 0x2EB4D0 VA: 0x2EB4D0
	private static bool IsLetter(string s, int pos) { }

	// RVA: 0x2E6FC0 Offset: 0x2E6FC0 VA: 0x2E6FC0
	private static bool _DoParse(string s, string firstPart, string secondPart, bool exact, out DateTime result, out DateTimeOffset dto, DateTimeFormatInfo dfi, DateTimeStyles style, bool firstPartIsDate, ref bool incompleteFormat, ref bool longYear) { }

	// RVA: 0x2EC140 Offset: 0x2EC140 VA: 0x2EC140
	public static DateTime ParseExact(string s, string format, IFormatProvider provider, DateTimeStyles style) { }

	// RVA: 0x2EC2BC Offset: 0x2EC2BC VA: 0x2EC2BC
	public static DateTime ParseExact(string s, string[] formats, IFormatProvider provider, DateTimeStyles style) { }

	// RVA: 0x2EC530 Offset: 0x2EC530 VA: 0x2EC530
	private static void CheckStyle(DateTimeStyles style) { }

	// RVA: 0x2EA618 Offset: 0x2EA618 VA: 0x2EA618
	private static bool ParseExact(string s, string[] formats, DateTimeFormatInfo dfi, DateTimeStyles style, out DateTime ret, bool exact, ref bool longYear, bool setExceptionOnError, ref Exception exception) { }

	// RVA: 0xC898C Offset: 0xC898C VA: 0xC898C
	public DateTime Subtract(TimeSpan value) { }

	// RVA: 0xC89A8 Offset: 0xC89A8 VA: 0xC89A8 Slot: 3
	public override string ToString() { }

	// RVA: 0xC89B0 Offset: 0xC89B0 VA: 0xC89B0 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xC89C0 Offset: 0xC89C0 VA: 0xC89C0 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xC89C8 Offset: 0xC89C8 VA: 0xC89C8
	public DateTime ToLocalTime() { }

	// RVA: 0xC89DC Offset: 0xC89DC VA: 0xC89DC
	public DateTime ToUniversalTime() { }

	// RVA: 0x2E4B40 Offset: 0x2E4B40 VA: 0x2E4B40
	public static DateTime op_Addition(DateTime d, TimeSpan t) { }

	// RVA: 0x2ECA3C Offset: 0x2ECA3C VA: 0x2ECA3C
	public static bool op_Equality(DateTime d1, DateTime d2) { }

	// RVA: 0x2ECAE4 Offset: 0x2ECAE4 VA: 0x2ECAE4
	public static bool op_GreaterThan(DateTime t1, DateTime t2) { }

	// RVA: 0x2ECB8C Offset: 0x2ECB8C VA: 0x2ECB8C
	public static bool op_GreaterThanOrEqual(DateTime t1, DateTime t2) { }

	// RVA: 0x2EB8B0 Offset: 0x2EB8B0 VA: 0x2EB8B0
	public static bool op_Inequality(DateTime d1, DateTime d2) { }

	// RVA: 0x2ECC34 Offset: 0x2ECC34 VA: 0x2ECC34
	public static bool op_LessThan(DateTime t1, DateTime t2) { }

	// RVA: 0x2ECCDC Offset: 0x2ECCDC VA: 0x2ECCDC
	public static bool op_LessThanOrEqual(DateTime t1, DateTime t2) { }

	// RVA: 0x2ECD84 Offset: 0x2ECD84 VA: 0x2ECD84
	public static TimeSpan op_Subtraction(DateTime d1, DateTime d2) { }

	// RVA: 0x2ECE74 Offset: 0x2ECE74 VA: 0x2ECE74
	public static DateTime op_Subtraction(DateTime d, TimeSpan t) { }
}

// Namespace: 
private enum DateTime.Which // TypeDefIndex: 844
{
	// Fields
	public int value__; // 0x0
	public const DateTime.Which Day = 0;
	public const DateTime.Which DayYear = 1;
	public const DateTime.Which Month = 2;
	public const DateTime.Which Year = 3;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A9AC Offset: 0x9A9AC VA: 0x9A9AC
[Serializable]
public enum DateTimeKind // TypeDefIndex: 845
{
	// Fields
	public int value__; // 0x0
	public const DateTimeKind Unspecified = 0;
	public const DateTimeKind Utc = 1;
	public const DateTimeKind Local = 2;
}

// Namespace: System
[Serializable]
public struct DateTimeOffset : IFormattable, IComparable, ISerializable, IComparable<DateTimeOffset>, IEquatable<DateTimeOffset>, IDeserializationCallback // TypeDefIndex: 846
{
	// Fields
	public static readonly DateTimeOffset MaxValue; // 0x0
	public static readonly DateTimeOffset MinValue; // 0x18
	private DateTime dt; // 0x0
	private TimeSpan utc_offset; // 0x10

	// Properties
	public DateTime DateTime { get; }
	public TimeSpan Offset { get; }
	public DateTime UtcDateTime { get; }

	// Methods

	// RVA: 0xC89F0 Offset: 0xC89F0 VA: 0xC89F0
	public void .ctor(DateTime dateTime) { }

	// RVA: 0xC8A18 Offset: 0xC8A18 VA: 0xC8A18
	public void .ctor(DateTime dateTime, TimeSpan offset) { }

	// RVA: 0xC8A48 Offset: 0xC8A48 VA: 0xC8A48
	public void .ctor(long ticks, TimeSpan offset) { }

	// RVA: 0xC8A70 Offset: 0xC8A70 VA: 0xC8A70
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2ED1E4 Offset: 0x2ED1E4 VA: 0x2ED1E4
	private static void .cctor() { }

	// RVA: 0xC8A8C Offset: 0xC8A8C VA: 0xC8A8C Slot: 5
	private int System.IComparable.CompareTo(object obj) { }

	// RVA: 0xC8A94 Offset: 0xC8A94 VA: 0xC8A94 Slot: 6
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	[MonoTODOAttribute] // RVA: 0x9DC70 Offset: 0x9DC70 VA: 0x9DC70
	// RVA: 0xC8AB0 Offset: 0xC8AB0 VA: 0xC8AB0 Slot: 9
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0xC8AB4 Offset: 0xC8AB4 VA: 0xC8AB4 Slot: 7
	public int CompareTo(DateTimeOffset other) { }

	// RVA: 0xC8AE4 Offset: 0xC8AE4 VA: 0xC8AE4 Slot: 8
	public bool Equals(DateTimeOffset other) { }

	// RVA: 0xC8B14 Offset: 0xC8B14 VA: 0xC8B14 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xC8B1C Offset: 0xC8B1C VA: 0xC8B1C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xC8B4C Offset: 0xC8B4C VA: 0xC8B4C Slot: 3
	public override string ToString() { }

	// RVA: 0xC8B5C Offset: 0xC8B5C VA: 0xC8B5C Slot: 4
	public string ToString(string format, IFormatProvider formatProvider) { }

	// RVA: 0xC8B64 Offset: 0xC8B64 VA: 0xC8B64
	public DateTime get_DateTime() { }

	// RVA: 0xC8B78 Offset: 0xC8B78 VA: 0xC8B78
	public TimeSpan get_Offset() { }

	// RVA: 0xC8B84 Offset: 0xC8B84 VA: 0xC8B84
	public DateTime get_UtcDateTime() { }
}

// Namespace: System
internal static class DateTimeUtils // TypeDefIndex: 847
{
	// Methods

	// RVA: 0x2EF680 Offset: 0x2EF680 VA: 0x2EF680
	public static int CountRepeat(string fmt, int p, char c) { }

	// RVA: 0x2EF6FC Offset: 0x2EF6FC VA: 0x2EF6FC
	public static void ZeroPad(StringBuilder output, int digits, int len) { }

	// RVA: 0x2EF81C Offset: 0x2EF81C VA: 0x2EF81C
	public static int ParseQuotedString(string fmt, int pos, StringBuilder output) { }

	// RVA: 0x2EB890 Offset: 0x2EB890 VA: 0x2EB890
	public static string GetStandardPattern(char format, DateTimeFormatInfo dfi, out bool useutc, out bool use_invariant) { }

	// RVA: 0x2EDD30 Offset: 0x2EDD30 VA: 0x2EDD30
	public static string GetStandardPattern(char format, DateTimeFormatInfo dfi, out bool useutc, out bool use_invariant, bool date_time_offset) { }

	// RVA: 0x2ECA04 Offset: 0x2ECA04 VA: 0x2ECA04
	public static string ToString(DateTime dt, string format, DateTimeFormatInfo dfi) { }

	// RVA: 0x2EE1D4 Offset: 0x2EE1D4 VA: 0x2EE1D4
	public static string ToString(DateTime dt, Nullable<TimeSpan> utc_offset, string format, DateTimeFormatInfo dfi) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A9C0 Offset: 0x9A9C0 VA: 0x9A9C0
[Serializable]
public enum DayOfWeek // TypeDefIndex: 848
{
	// Fields
	public int value__; // 0x0
	public const DayOfWeek Sunday = 0;
	public const DayOfWeek Monday = 1;
	public const DayOfWeek Tuesday = 2;
	public const DayOfWeek Wednesday = 3;
	public const DayOfWeek Thursday = 4;
	public const DayOfWeek Friday = 5;
	public const DayOfWeek Saturday = 6;
}

// Namespace: System
internal class DelegateData // TypeDefIndex: 849
{
	// Fields
	public Type target_type; // 0x8
	public string method_name; // 0xC
}

// Namespace: System
[Serializable]
internal class DelegateSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 850
{
	// Fields
	private Delegate _delegate; // 0x8

	// Methods

	// RVA: 0x2F6310 Offset: 0x2F6310 VA: 0x2F6310
	private void .ctor(SerializationInfo info, StreamingContext ctx) { }

	// RVA: 0x2F5D1C Offset: 0x2F5D1C VA: 0x2F5D1C
	public static void GetDelegateData(Delegate instance, SerializationInfo info, StreamingContext ctx) { }

	// RVA: 0x2F6A98 Offset: 0x2F6A98 VA: 0x2F6A98 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2F6B20 Offset: 0x2F6B20 VA: 0x2F6B20 Slot: 5
	public object GetRealObject(StreamingContext context) { }
}

// Namespace: 
[Serializable]
private class DelegateSerializationHolder.DelegateEntry // TypeDefIndex: 851
{
	// Fields
	private string type; // 0x8
	private string assembly; // 0xC
	public object target; // 0x10
	private string targetTypeAssembly; // 0x14
	private string targetTypeName; // 0x18
	private string methodName; // 0x1C
	public DelegateSerializationHolder.DelegateEntry delegateEntry; // 0x20

	// Methods

	// RVA: 0x2F6878 Offset: 0x2F6878 VA: 0x2F6878
	public void .ctor(Delegate del, string targetLabel) { }

	// RVA: 0x2F65B8 Offset: 0x2F65B8 VA: 0x2F65B8
	public Delegate DeserializeDelegate(SerializationInfo info) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A9D4 Offset: 0x9A9D4 VA: 0x9A9D4
[Serializable]
public class DivideByZeroException : ArithmeticException // TypeDefIndex: 852
{
	// Fields
	private const int Result = -2147352558;

	// Methods

	// RVA: 0x2F1964 Offset: 0x2F1964 VA: 0x2F1964
	public void .ctor() { }

	// RVA: 0x2F82D8 Offset: 0x2F82D8 VA: 0x2F82D8
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A9E8 Offset: 0x9A9E8 VA: 0x9A9E8
[Serializable]
public class DllNotFoundException : TypeLoadException // TypeDefIndex: 853
{
	// Fields
	private const int Result = -2146233052;

	// Methods

	// RVA: 0x2F82F8 Offset: 0x2F82F8 VA: 0x2F82F8
	public void .ctor() { }

	// RVA: 0x2F8378 Offset: 0x2F8378 VA: 0x2F8378
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9A9FC Offset: 0x9A9FC VA: 0x9A9FC
[Serializable]
public class EntryPointNotFoundException : TypeLoadException // TypeDefIndex: 854
{
	// Fields
	private const int Result = -2146233053;

	// Methods

	// RVA: 0x2FA9A8 Offset: 0x2FA9A8 VA: 0x2FA9A8
	public void .ctor() { }

	// RVA: 0x2FAA28 Offset: 0x2FAA28 VA: 0x2FAA28
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
internal struct MonoEnumInfo // TypeDefIndex: 855
{
	// Fields
	internal Type utype; // 0x0
	internal Array values; // 0x4
	internal string[] names; // 0x8
	internal Hashtable name_hash; // 0xC
	[ThreadStaticAttribute] // RVA: 0x9B41C Offset: 0x9B41C VA: 0x9B41C
	private static Hashtable cache; // 0x80000000
	private static Hashtable global_cache; // 0x0
	private static object global_cache_monitor; // 0x4
	internal static MonoEnumInfo.SByteComparer sbyte_comparer; // 0x8
	internal static MonoEnumInfo.ShortComparer short_comparer; // 0xC
	internal static MonoEnumInfo.IntComparer int_comparer; // 0x10
	internal static MonoEnumInfo.LongComparer long_comparer; // 0x14

	// Properties
	private static Hashtable Cache { get; }

	// Methods

	// RVA: 0xEF00C Offset: 0xEF00C VA: 0xEF00C
	private void .ctor(MonoEnumInfo other) { }

	// RVA: 0x460140 Offset: 0x460140 VA: 0x460140
	private static void .cctor() { }

	// RVA: 0x460270 Offset: 0x460270 VA: 0x460270
	private static void get_enum_info(Type enumType, out MonoEnumInfo info) { }

	// RVA: 0x460274 Offset: 0x460274 VA: 0x460274
	private static Hashtable get_Cache() { }

	// RVA: 0x4603BC Offset: 0x4603BC VA: 0x4603BC
	internal static void GetInfo(Type enumType, out MonoEnumInfo info) { }
}

// Namespace: 
internal class MonoEnumInfo.SByteComparer : IComparer<sbyte>, IComparer // TypeDefIndex: 856
{
	// Methods

	// RVA: 0x460260 Offset: 0x460260 VA: 0x460260
	public void .ctor() { }

	// RVA: 0x460DD8 Offset: 0x460DD8 VA: 0x460DD8 Slot: 5
	public int Compare(object x, object y) { }

	// RVA: 0x460E58 Offset: 0x460E58 VA: 0x460E58 Slot: 4
	public int Compare(sbyte ix, sbyte iy) { }
}

// Namespace: 
internal class MonoEnumInfo.ShortComparer : IComparer<short>, IComparer // TypeDefIndex: 857
{
	// Methods

	// RVA: 0x460264 Offset: 0x460264 VA: 0x460264
	public void .ctor() { }

	// RVA: 0x460E68 Offset: 0x460E68 VA: 0x460E68 Slot: 5
	public int Compare(object x, object y) { }

	// RVA: 0x460EE8 Offset: 0x460EE8 VA: 0x460EE8 Slot: 4
	public int Compare(short ix, short iy) { }
}

// Namespace: 
internal class MonoEnumInfo.IntComparer : IComparer<int>, IComparer // TypeDefIndex: 858
{
	// Methods

	// RVA: 0x460268 Offset: 0x460268 VA: 0x460268
	public void .ctor() { }

	// RVA: 0x460C48 Offset: 0x460C48 VA: 0x460C48 Slot: 5
	public int Compare(object x, object y) { }

	// RVA: 0x460CDC Offset: 0x460CDC VA: 0x460CDC Slot: 4
	public int Compare(int ix, int iy) { }
}

// Namespace: 
internal class MonoEnumInfo.LongComparer : IComparer<long>, IComparer // TypeDefIndex: 859
{
	// Methods

	// RVA: 0x46026C Offset: 0x46026C VA: 0x46026C
	public void .ctor() { }

	// RVA: 0x460CF4 Offset: 0x460CF4 VA: 0x460CF4 Slot: 5
	public int Compare(object x, object y) { }

	// RVA: 0x460DA0 Offset: 0x460DA0 VA: 0x460DA0 Slot: 4
	public int Compare(long ix, long iy) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AA10 Offset: 0x9AA10 VA: 0x9AA10
public static class Environment // TypeDefIndex: 860
{
	// Fields
	private const int mono_corlib_version = 82;
	private static OperatingSystem os; // 0x0

	// Properties
	public static bool SocketSecurityEnabled { get; }
	public static string NewLine { get; }
	internal static PlatformID Platform { get; }
	public static OperatingSystem OSVersion { get; }
	public static int TickCount { get; }
	internal static bool IsRunningOnWindows { get; }

	// Methods

	// RVA: 0x2FF87C Offset: 0x2FF87C VA: 0x2FF87C
	public static bool get_SocketSecurityEnabled() { }

	// RVA: 0x2F82CC Offset: 0x2F82CC VA: 0x2F82CC
	public static string get_NewLine() { }

	// RVA: 0x2FF880 Offset: 0x2FF880 VA: 0x2FF880
	internal static PlatformID get_Platform() { }

	// RVA: 0x2FF884 Offset: 0x2FF884 VA: 0x2FF884
	internal static string GetOSVersionString() { }

	// RVA: 0x2FF888 Offset: 0x2FF888 VA: 0x2FF888
	public static OperatingSystem get_OSVersion() { }

	// RVA: 0x2FF954 Offset: 0x2FF954 VA: 0x2FF954
	public static int get_TickCount() { }

	// RVA: 0x2FF958 Offset: 0x2FF958 VA: 0x2FF958
	internal static string internalGetEnvironmentVariable(string variable) { }

	// RVA: 0x2FF95C Offset: 0x2FF95C VA: 0x2FF95C
	public static string GetEnvironmentVariable(string variable) { }

	// RVA: 0x2FF960 Offset: 0x2FF960 VA: 0x2FF960
	private static string GetWindowsFolderPath(int folder) { }

	// RVA: 0x2FF964 Offset: 0x2FF964 VA: 0x2FF964
	public static string GetFolderPath(Environment.SpecialFolder folder) { }

	// RVA: 0x2FFDE0 Offset: 0x2FFDE0 VA: 0x2FFDE0
	private static string ReadXdgUserDir(string config_dir, string home_dir, string key, string fallback) { }

	// RVA: 0x2FF9B4 Offset: 0x2FF9B4 VA: 0x2FF9B4
	internal static string InternalGetFolderPath(Environment.SpecialFolder folder) { }

	// RVA: 0x2FF994 Offset: 0x2FF994 VA: 0x2FF994
	internal static bool get_IsRunningOnWindows() { }

	// RVA: 0x3003E4 Offset: 0x3003E4 VA: 0x3003E4
	internal static string GetMachineConfigPath() { }

	// RVA: 0x3003E0 Offset: 0x3003E0 VA: 0x3003E0
	internal static string internalGetHome() { }
}

// Namespace: 
[ComVisibleAttribute] // RVA: 0x9AA24 Offset: 0x9AA24 VA: 0x9AA24
public enum Environment.SpecialFolder // TypeDefIndex: 861
{
	// Fields
	public int value__; // 0x0
	public const Environment.SpecialFolder MyDocuments = 5;
	public const Environment.SpecialFolder Desktop = 0;
	public const Environment.SpecialFolder MyComputer = 17;
	public const Environment.SpecialFolder Programs = 2;
	public const Environment.SpecialFolder Personal = 5;
	public const Environment.SpecialFolder Favorites = 6;
	public const Environment.SpecialFolder Startup = 7;
	public const Environment.SpecialFolder Recent = 8;
	public const Environment.SpecialFolder SendTo = 9;
	public const Environment.SpecialFolder StartMenu = 11;
	public const Environment.SpecialFolder MyMusic = 13;
	public const Environment.SpecialFolder DesktopDirectory = 16;
	public const Environment.SpecialFolder Templates = 21;
	public const Environment.SpecialFolder ApplicationData = 26;
	public const Environment.SpecialFolder LocalApplicationData = 28;
	public const Environment.SpecialFolder InternetCache = 32;
	public const Environment.SpecialFolder Cookies = 33;
	public const Environment.SpecialFolder History = 34;
	public const Environment.SpecialFolder CommonApplicationData = 35;
	public const Environment.SpecialFolder System = 37;
	public const Environment.SpecialFolder ProgramFiles = 38;
	public const Environment.SpecialFolder MyPictures = 39;
	public const Environment.SpecialFolder CommonProgramFiles = 43;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AA38 Offset: 0x9AA38 VA: 0x9AA38
[Serializable]
public class EventArgs // TypeDefIndex: 862
{
	// Fields
	public static readonly EventArgs Empty; // 0x0

	// Methods

	// RVA: 0x3003E8 Offset: 0x3003E8 VA: 0x3003E8
	public void .ctor() { }

	// RVA: 0x3003F0 Offset: 0x3003F0 VA: 0x3003F0
	private static void .cctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AA4C Offset: 0x9AA4C VA: 0x9AA4C
[Serializable]
public sealed class ExecutionEngineException : SystemException // TypeDefIndex: 863
{
	// Methods

	// RVA: 0x30204C Offset: 0x30204C VA: 0x30204C
	public void .ctor() { }

	// RVA: 0x3020C0 Offset: 0x3020C0 VA: 0x3020C0
	public void .ctor(string message) { }

	// RVA: 0x3020C8 Offset: 0x3020C8 VA: 0x3020C8
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AA60 Offset: 0x9AA60 VA: 0x9AA60
[Serializable]
public class FieldAccessException : MemberAccessException // TypeDefIndex: 864
{
	// Methods

	// RVA: 0x3020E8 Offset: 0x3020E8 VA: 0x3020E8
	public void .ctor() { }

	// RVA: 0x302168 Offset: 0x302168 VA: 0x302168
	public void .ctor(string message) { }

	// RVA: 0x30218C Offset: 0x30218C VA: 0x30218C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AA74 Offset: 0x9AA74 VA: 0x9AA74
[AttributeUsageAttribute] // RVA: 0x9AA74 Offset: 0x9AA74 VA: 0x9AA74
[Serializable]
public class FlagsAttribute : Attribute // TypeDefIndex: 865
{
	// Methods

	// RVA: 0x3021AC Offset: 0x3021AC VA: 0x3021AC
	public void .ctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AAC0 Offset: 0x9AAC0 VA: 0x9AAC0
[Serializable]
public class FormatException : SystemException // TypeDefIndex: 866
{
	// Fields
	private const int Result = -2146233033;

	// Methods

	// RVA: 0x2FA6E0 Offset: 0x2FA6E0 VA: 0x2FA6E0
	public void .ctor() { }

	// RVA: 0x2E69BC Offset: 0x2E69BC VA: 0x2E69BC
	public void .ctor(string message) { }

	// RVA: 0x3021B4 Offset: 0x3021B4 VA: 0x3021B4
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
public static class GC // TypeDefIndex: 867
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0x9DC80 Offset: 0x9DC80 VA: 0x9DC80
	// RVA: 0x3021D4 Offset: 0x3021D4 VA: 0x3021D4
	public static void KeepAlive(object obj) { }

	[ReliabilityContractAttribute] // RVA: 0x9DC98 Offset: 0x9DC98 VA: 0x9DC98
	// RVA: 0x3021D8 Offset: 0x3021D8 VA: 0x3021D8
	public static void SuppressFinalize(object obj) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AAD4 Offset: 0x9AAD4 VA: 0x9AAD4
[Serializable]
public struct Guid : IFormattable, IComparable, IComparable<Guid>, IEquatable<Guid> // TypeDefIndex: 868
{
	// Fields
	private int _a; // 0x0
	private short _b; // 0x4
	private short _c; // 0x6
	private byte _d; // 0x8
	private byte _e; // 0x9
	private byte _f; // 0xA
	private byte _g; // 0xB
	private byte _h; // 0xC
	private byte _i; // 0xD
	private byte _j; // 0xE
	private byte _k; // 0xF
	public static readonly Guid Empty; // 0x0
	private static object _rngAccess; // 0x10
	private static RandomNumberGenerator _rng; // 0x14
	private static RandomNumberGenerator _fastRng; // 0x18

	// Methods

	// RVA: 0xC9D14 Offset: 0xC9D14 VA: 0xC9D14
	public void .ctor(byte[] b) { }

	// RVA: 0xC9D1C Offset: 0xC9D1C VA: 0xC9D1C
	public void .ctor(string g) { }

	// RVA: 0xC9D24 Offset: 0xC9D24 VA: 0xC9D24
	public void .ctor(int a, short b, short c, byte[] d) { }

	// RVA: 0xC9D48 Offset: 0xC9D48 VA: 0xC9D48
	public void .ctor(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k) { }

	// RVA: 0x3F8B08 Offset: 0x3F8B08 VA: 0x3F8B08
	private static void .cctor() { }

	// RVA: 0x3F86D4 Offset: 0x3F86D4 VA: 0x3F86D4
	private static void CheckNull(object o) { }

	// RVA: 0x3F8C34 Offset: 0x3F8C34 VA: 0x3F8C34
	private static void CheckLength(byte[] o, int l) { }

	// RVA: 0x3F853C Offset: 0x3F853C VA: 0x3F853C
	private static void CheckArray(byte[] o, int l) { }

	// RVA: 0x3F8D68 Offset: 0x3F8D68 VA: 0x3F8D68
	private static int Compare(int x, int y) { }

	// RVA: 0xC9DA0 Offset: 0xC9DA0 VA: 0xC9DA0 Slot: 5
	public int CompareTo(object value) { }

	// RVA: 0xC9DA8 Offset: 0xC9DA8 VA: 0xC9DA8 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0xC9DB0 Offset: 0xC9DB0 VA: 0xC9DB0 Slot: 6
	public int CompareTo(Guid value) { }

	// RVA: 0xC9DD4 Offset: 0xC9DD4 VA: 0xC9DD4 Slot: 7
	public bool Equals(Guid g) { }

	// RVA: 0xC9E08 Offset: 0xC9E08 VA: 0xC9E08 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x3F92C8 Offset: 0x3F92C8 VA: 0x3F92C8
	private static char ToHex(int b) { }

	// RVA: 0x3F92E0 Offset: 0x3F92E0 VA: 0x3F92E0
	public static Guid NewGuid() { }

	// RVA: 0x3F9530 Offset: 0x3F9530 VA: 0x3F9530
	internal static byte[] FastNewGuidArray() { }

	// RVA: 0x3F9898 Offset: 0x3F9898 VA: 0x3F9898
	private static void AppendInt(StringBuilder builder, int value) { }

	// RVA: 0x3F9AB0 Offset: 0x3F9AB0 VA: 0x3F9AB0
	private static void AppendShort(StringBuilder builder, short value) { }

	// RVA: 0x3F9BFC Offset: 0x3F9BFC VA: 0x3F9BFC
	private static void AppendByte(StringBuilder builder, byte value) { }

	// RVA: 0xC9E10 Offset: 0xC9E10 VA: 0xC9E10
	private string BaseToString(bool h, bool p, bool b) { }

	// RVA: 0xC9E2C Offset: 0xC9E2C VA: 0xC9E2C Slot: 3
	public override string ToString() { }

	// RVA: 0xC9E54 Offset: 0xC9E54 VA: 0xC9E54
	public string ToString(string format) { }

	// RVA: 0xC9E5C Offset: 0xC9E5C VA: 0xC9E5C Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x3FA314 Offset: 0x3FA314 VA: 0x3FA314
	public static bool op_Equality(Guid a, Guid b) { }
}

// Namespace: 
internal class Guid.GuidParser // TypeDefIndex: 869
{
	// Fields
	private string _src; // 0x8
	private int _length; // 0xC
	private int _cur; // 0x10

	// Methods

	// RVA: 0x3F8788 Offset: 0x3F8788 VA: 0x3F8788
	public void .ctor(string src) { }

	// RVA: 0x3FA370 Offset: 0x3FA370 VA: 0x3FA370
	private void Reset() { }

	// RVA: 0x3FA3AC Offset: 0x3FA3AC VA: 0x3FA3AC
	private bool AtEnd() { }

	// RVA: 0x3FA3C4 Offset: 0x3FA3C4 VA: 0x3FA3C4
	private void ThrowFormatException() { }

	// RVA: 0x3FA46C Offset: 0x3FA46C VA: 0x3FA46C
	private ulong ParseHex(int length, bool strictLength) { }

	// RVA: 0x3FA5E8 Offset: 0x3FA5E8 VA: 0x3FA5E8
	private bool ParseOptChar(char c) { }

	// RVA: 0x3FA650 Offset: 0x3FA650 VA: 0x3FA650
	private void ParseChar(char c) { }

	// RVA: 0x3FA66C Offset: 0x3FA66C VA: 0x3FA66C
	private Guid ParseGuid1() { }

	// RVA: 0x3FA8F8 Offset: 0x3FA8F8 VA: 0x3FA8F8
	private void ParseHexPrefix() { }

	// RVA: 0x3FA930 Offset: 0x3FA930 VA: 0x3FA930
	private Guid ParseGuid2() { }

	// RVA: 0x3F87B0 Offset: 0x3F87B0 VA: 0x3F87B0
	public Guid Parse() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AAE8 Offset: 0x9AAE8 VA: 0x9AAE8
public interface ICustomFormatter // TypeDefIndex: 870
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string Format(string format, object arg, IFormatProvider formatProvider);
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AAFC Offset: 0x9AAFC VA: 0x9AAFC
public interface IFormatProvider // TypeDefIndex: 871
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object GetFormat(Type formatType);
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AB10 Offset: 0x9AB10 VA: 0x9AB10
[Serializable]
public sealed class IndexOutOfRangeException : SystemException // TypeDefIndex: 872
{
	// Methods

	// RVA: 0x454EA8 Offset: 0x454EA8 VA: 0x454EA8
	public void .ctor() { }

	// RVA: 0x454F1C Offset: 0x454F1C VA: 0x454F1C
	public void .ctor(string message) { }

	// RVA: 0x454F24 Offset: 0x454F24 VA: 0x454F24
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AB24 Offset: 0x9AB24 VA: 0x9AB24
[Serializable]
public class InvalidCastException : SystemException // TypeDefIndex: 873
{
	// Fields
	private const int Result = -2147467262;

	// Methods

	// RVA: 0x45C0C4 Offset: 0x45C0C4 VA: 0x45C0C4
	public void .ctor() { }

	// RVA: 0x45C14C Offset: 0x45C14C VA: 0x45C14C
	public void .ctor(string message) { }

	// RVA: 0x45C178 Offset: 0x45C178 VA: 0x45C178
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AB38 Offset: 0x9AB38 VA: 0x9AB38
[Serializable]
public class InvalidOperationException : SystemException // TypeDefIndex: 874
{
	// Fields
	private const int Result = -2146233079;

	// Methods

	// RVA: 0x45C198 Offset: 0x45C198 VA: 0x45C198
	public void .ctor() { }

	// RVA: 0x45C220 Offset: 0x45C220 VA: 0x45C220
	public void .ctor(string message) { }

	// RVA: 0x45C24C Offset: 0x45C24C VA: 0x45C24C
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x45C278 Offset: 0x45C278 VA: 0x45C278
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AB4C Offset: 0x9AB4C VA: 0x9AB4C
[Serializable]
public enum LoaderOptimization // TypeDefIndex: 875
{
	// Fields
	public int value__; // 0x0
	public const LoaderOptimization NotSpecified = 0;
	public const LoaderOptimization SingleDomain = 1;
	public const LoaderOptimization MultiDomain = 2;
	public const LoaderOptimization MultiDomainHost = 3;
	[ObsoleteAttribute] // RVA: 0x9B42C Offset: 0x9B42C VA: 0x9B42C
	public const LoaderOptimization DomainMask = 3;
	[ObsoleteAttribute] // RVA: 0x9B43C Offset: 0x9B43C VA: 0x9B43C
	public const LoaderOptimization DisallowBindings = 4;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AB60 Offset: 0x9AB60 VA: 0x9AB60
public sealed class LocalDataStoreSlot // TypeDefIndex: 876
{
	// Fields
	internal int slot; // 0x8
	internal bool thread_local; // 0xC
	private static object lock_obj; // 0x0
	private static bool[] slot_bitmap_thread; // 0x4
	private static bool[] slot_bitmap_context; // 0x8

	// Methods

	// RVA: 0x45C298 Offset: 0x45C298 VA: 0x45C298
	internal void .ctor(bool in_thread) { }

	// RVA: 0x45C5D4 Offset: 0x45C5D4 VA: 0x45C5D4
	private static void .cctor() { }

	// RVA: 0x45C648 Offset: 0x45C648 VA: 0x45C648 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System
public static class Math // TypeDefIndex: 877
{
	// Methods

	// RVA: 0x45CAC4 Offset: 0x45CAC4 VA: 0x45CAC4
	public static float Abs(float value) { }

	// RVA: 0x45CAE0 Offset: 0x45CAE0 VA: 0x45CAE0
	public static int Abs(int value) { }

	// RVA: 0x45CBA0 Offset: 0x45CBA0 VA: 0x45CBA0
	public static long Abs(long value) { }

	// RVA: 0x45CC6C Offset: 0x45CC6C VA: 0x45CC6C
	public static double Ceiling(double a) { }

	// RVA: 0x45CCA4 Offset: 0x45CCA4 VA: 0x45CCA4
	public static double Floor(double d) { }

	// RVA: 0x45CCA8 Offset: 0x45CCA8 VA: 0x45CCA8
	public static double Log(double a, double newBase) { }

	[ReliabilityContractAttribute] // RVA: 0x9DCB0 Offset: 0x9DCB0 VA: 0x9DCB0
	// RVA: 0x45CCF4 Offset: 0x45CCF4 VA: 0x45CCF4
	public static float Max(float val1, float val2) { }

	[ReliabilityContractAttribute] // RVA: 0x9DCC8 Offset: 0x9DCC8 VA: 0x9DCC8
	// RVA: 0x45CD5C Offset: 0x45CD5C VA: 0x45CD5C
	public static int Max(int val1, int val2) { }

	[ReliabilityContractAttribute] // RVA: 0x9DCE0 Offset: 0x9DCE0 VA: 0x9DCE0
	// RVA: 0x45CD68 Offset: 0x45CD68 VA: 0x45CD68
	public static float Min(float val1, float val2) { }

	[ReliabilityContractAttribute] // RVA: 0x9DCF8 Offset: 0x9DCF8 VA: 0x9DCF8
	// RVA: 0x45CDD0 Offset: 0x45CDD0 VA: 0x45CDD0
	public static int Min(int val1, int val2) { }

	// RVA: 0x45CDDC Offset: 0x45CDDC VA: 0x45CDDC
	public static Decimal Round(Decimal d) { }

	// RVA: 0x45D208 Offset: 0x45D208 VA: 0x45D208
	public static double Round(double a) { }

	// RVA: 0x45D2B8 Offset: 0x45D2B8 VA: 0x45D2B8
	public static double Sin(double a) { }

	// RVA: 0x45D2BC Offset: 0x45D2BC VA: 0x45D2BC
	public static double Cos(double d) { }

	// RVA: 0x45D2C0 Offset: 0x45D2C0 VA: 0x45D2C0
	public static double Log(double d) { }

	// RVA: 0x45D2C4 Offset: 0x45D2C4 VA: 0x45D2C4
	public static double Pow(double x, double y) { }

	[ReliabilityContractAttribute] // RVA: 0x9DD10 Offset: 0x9DD10 VA: 0x9DD10
	// RVA: 0x45D2C8 Offset: 0x45D2C8 VA: 0x45D2C8
	public static double Sqrt(double d) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AB74 Offset: 0x9AB74 VA: 0x9AB74
[Serializable]
public class MemberAccessException : SystemException // TypeDefIndex: 878
{
	// Methods

	// RVA: 0x45D2E4 Offset: 0x45D2E4 VA: 0x45D2E4
	public void .ctor() { }

	// RVA: 0x45D36C Offset: 0x45D36C VA: 0x45D36C
	public void .ctor(string message) { }

	// RVA: 0x45D398 Offset: 0x45D398 VA: 0x45D398
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AB88 Offset: 0x9AB88 VA: 0x9AB88
[Serializable]
public class MethodAccessException : MemberAccessException // TypeDefIndex: 879
{
	// Fields
	private const int Result = -2146233072;

	// Methods

	// RVA: 0x45D3B8 Offset: 0x45D3B8 VA: 0x45D3B8
	public void .ctor() { }

	// RVA: 0x45D454 Offset: 0x45D454 VA: 0x45D454
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AB9C Offset: 0x9AB9C VA: 0x9AB9C
[Serializable]
public class MissingFieldException : MissingMemberException // TypeDefIndex: 880
{
	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x45D474 Offset: 0x45D474 VA: 0x45D474
	public void .ctor() { }

	// RVA: 0x45D538 Offset: 0x45D538 VA: 0x45D538
	public void .ctor(string message) { }

	// RVA: 0x45D560 Offset: 0x45D560 VA: 0x45D560
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x45D780 Offset: 0x45D780 VA: 0x45D780 Slot: 6
	public override string get_Message() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9ABB0 Offset: 0x9ABB0 VA: 0x9ABB0
[Serializable]
public class MissingMemberException : MemberAccessException // TypeDefIndex: 881
{
	// Fields
	protected string ClassName; // 0x34
	protected string MemberName; // 0x38
	protected byte[] Signature; // 0x3C

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x45D914 Offset: 0x45D914 VA: 0x45D914
	public void .ctor() { }

	// RVA: 0x45D4F8 Offset: 0x45D4F8 VA: 0x45D4F8
	public void .ctor(string message) { }

	// RVA: 0x45D578 Offset: 0x45D578 VA: 0x45D578
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x45D9B0 Offset: 0x45D9B0 VA: 0x45D9B0
	public void .ctor(string className, string memberName) { }

	// RVA: 0x45D9E8 Offset: 0x45D9E8 VA: 0x45D9E8 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x45D848 Offset: 0x45D848 VA: 0x45D848 Slot: 6
	public override string get_Message() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9ABC4 Offset: 0x9ABC4 VA: 0x9ABC4
[Serializable]
public class MissingMethodException : MissingMemberException // TypeDefIndex: 882
{
	// Fields
	private const int Result = -2146233069;

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x45DB00 Offset: 0x45DB00 VA: 0x45DB00
	public void .ctor() { }

	// RVA: 0x45DB84 Offset: 0x45DB84 VA: 0x45DB84
	public void .ctor(string message) { }

	// RVA: 0x45DBAC Offset: 0x45DBAC VA: 0x45DBAC
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x45DBC4 Offset: 0x45DBC4 VA: 0x45DBC4
	public void .ctor(string className, string methodName) { }

	// RVA: 0x45DC10 Offset: 0x45DC10 VA: 0x45DC10 Slot: 6
	public override string get_Message() { }
}

// Namespace: System
internal class MonoAsyncCall // TypeDefIndex: 883
{
	// Fields
	private object msg; // 0x8
	private IntPtr cb_method; // 0xC
	private object cb_target; // 0x10
	private object state; // 0x14
	private object res; // 0x18
	private object out_args; // 0x1C
	private long wait_event; // 0x20

	// Methods

	// RVA: 0x45DCD8 Offset: 0x45DCD8 VA: 0x45DCD8
	public void .ctor() { }
}

// Namespace: System
internal class MonoCustomAttrs // TypeDefIndex: 884
{
	// Fields
	private static Assembly corlib; // 0x0
	private static readonly Type AttributeUsageType; // 0x4
	private static readonly AttributeUsageAttribute DefaultAttributeUsage; // 0x8

	// Methods

	// RVA: 0x45DCDC Offset: 0x45DCDC VA: 0x45DCDC
	private static void .cctor() { }

	// RVA: 0x45DDB4 Offset: 0x45DDB4 VA: 0x45DDB4
	private static bool IsUserCattrProvider(object obj) { }

	// RVA: 0x45E060 Offset: 0x45E060 VA: 0x45E060
	internal static object[] GetCustomAttributesInternal(ICustomAttributeProvider obj, Type attributeType, bool pseudoAttrs) { }

	// RVA: 0x45E064 Offset: 0x45E064 VA: 0x45E064
	internal static object[] GetPseudoCustomAttributes(ICustomAttributeProvider obj, Type attributeType) { }

	// RVA: 0x45E320 Offset: 0x45E320 VA: 0x45E320
	internal static object[] GetCustomAttributesBase(ICustomAttributeProvider obj, Type attributeType) { }

	// RVA: 0x45E570 Offset: 0x45E570 VA: 0x45E570
	internal static Attribute GetCustomAttribute(ICustomAttributeProvider obj, Type attributeType, bool inherit) { }

	// RVA: 0x45E770 Offset: 0x45E770 VA: 0x45E770
	internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, Type attributeType, bool inherit) { }

	// RVA: 0x45F754 Offset: 0x45F754 VA: 0x45F754
	internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, bool inherit) { }

	// RVA: 0x45F990 Offset: 0x45F990 VA: 0x45F990
	private static CustomAttributeData[] GetCustomAttributesDataInternal(ICustomAttributeProvider obj) { }

	// RVA: 0x45F994 Offset: 0x45F994 VA: 0x45F994
	internal static IList<CustomAttributeData> GetCustomAttributesData(ICustomAttributeProvider obj) { }

	// RVA: 0x45FA88 Offset: 0x45FA88 VA: 0x45FA88
	internal static bool IsDefined(ICustomAttributeProvider obj, Type attributeType, bool inherit) { }

	// RVA: 0x45FDD4 Offset: 0x45FDD4 VA: 0x45FDD4
	internal static bool IsDefinedInternal(ICustomAttributeProvider obj, Type AttributeType) { }

	// RVA: 0x45FDD8 Offset: 0x45FDD8 VA: 0x45FDD8
	private static PropertyInfo GetBasePropertyDefinition(PropertyInfo property) { }

	// RVA: 0x45F4D0 Offset: 0x45F4D0 VA: 0x45F4D0
	private static ICustomAttributeProvider GetBase(ICustomAttributeProvider obj) { }

	// RVA: 0x45F1C8 Offset: 0x45F1C8 VA: 0x45F1C8
	private static AttributeUsageAttribute RetrieveAttributeUsage(Type attributeType) { }
}

// Namespace: 
private class MonoCustomAttrs.AttributeInfo // TypeDefIndex: 885
{
	// Fields
	private AttributeUsageAttribute _usage; // 0x8
	private int _inheritanceLevel; // 0xC

	// Properties
	public AttributeUsageAttribute Usage { get; }
	public int InheritanceLevel { get; }

	// Methods

	// RVA: 0x45F4C4 Offset: 0x45F4C4 VA: 0x45F4C4
	public void .ctor(AttributeUsageAttribute usage, int inheritanceLevel) { }

	// RVA: 0x45F4B4 Offset: 0x45F4B4 VA: 0x45F4B4
	public AttributeUsageAttribute get_Usage() { }

	// RVA: 0x45F4BC Offset: 0x45F4BC VA: 0x45F4BC
	public int get_InheritanceLevel() { }
}

// Namespace: System
internal class MonoTouchAOTHelper // TypeDefIndex: 886
{
	// Fields
	internal static bool FalseFlag; // 0x0

	// Methods

	// RVA: 0x460F20 Offset: 0x460F20 VA: 0x460F20
	private static void .cctor() { }
}

// Namespace: System
internal class MonoTypeInfo // TypeDefIndex: 887
{
	// Fields
	public string full_name; // 0x8
	public ConstructorInfo default_ctor; // 0xC

	// Methods

	// RVA: 0x461044 Offset: 0x461044 VA: 0x461044
	public void .ctor() { }
}

// Namespace: System
[Serializable]
internal class MonoType : Type, ISerializable // TypeDefIndex: 888
{
	// Fields
	private MonoTypeInfo type_info; // 0xC

	// Properties
	public override Type UnderlyingSystemType { get; }
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override string FullName { get; }
	public override MemberTypes MemberType { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override Module Module { get; }
	public override Type DeclaringType { get; }
	public override Type ReflectedType { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override bool ContainsGenericParameters { get; }
	public override bool IsGenericParameter { get; }

	// Methods

	// RVA: 0x460F24 Offset: 0x460F24 VA: 0x460F24
	private static TypeAttributes get_attributes(Type type) { }

	// RVA: 0x460F28 Offset: 0x460F28 VA: 0x460F28
	internal ConstructorInfo GetDefaultConstructor() { }

	// RVA: 0x461048 Offset: 0x461048 VA: 0x461048 Slot: 62
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x46104C Offset: 0x46104C VA: 0x46104C Slot: 61
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x461580 Offset: 0x461580 VA: 0x461580
	internal ConstructorInfo[] GetConstructors_internal(BindingFlags bindingAttr, Type reflected_type) { }

	// RVA: 0x461584 Offset: 0x461584 VA: 0x461584 Slot: 74
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x46158C Offset: 0x46158C VA: 0x46158C
	private EventInfo InternalGetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x461590 Offset: 0x461590 VA: 0x461590 Slot: 45
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x461654 Offset: 0x461654 VA: 0x461654 Slot: 46
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x461658 Offset: 0x461658 VA: 0x461658
	internal FieldInfo[] GetFields_internal(BindingFlags bindingAttr, Type reflected_type) { }

	// RVA: 0x46165C Offset: 0x46165C VA: 0x46165C Slot: 47
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x461664 Offset: 0x461664 VA: 0x461664 Slot: 40
	public override Type[] GetInterfaces() { }

	// RVA: 0x461668 Offset: 0x461668 VA: 0x461668
	internal MethodInfo[] GetMethodsByName(string name, BindingFlags bindingAttr, bool ignoreCase, Type reflected_type) { }

	// RVA: 0x46166C Offset: 0x46166C VA: 0x46166C Slot: 54
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x461694 Offset: 0x461694 VA: 0x461694 Slot: 53
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x461DD4 Offset: 0x461DD4 VA: 0x461DD4
	internal PropertyInfo[] GetPropertiesByName(string name, BindingFlags bindingAttr, bool icase, Type reflected_type) { }

	// RVA: 0x461DD8 Offset: 0x461DD8 VA: 0x461DD8 Slot: 60
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x461F70 Offset: 0x461F70 VA: 0x461F70 Slot: 63
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x461FD4 Offset: 0x461FD4 VA: 0x461FD4 Slot: 64
	protected override bool IsArrayImpl() { }

	// RVA: 0x462058 Offset: 0x462058 VA: 0x462058 Slot: 65
	protected override bool IsByRefImpl() { }

	// RVA: 0x46205C Offset: 0x46205C VA: 0x46205C Slot: 66
	protected override bool IsPointerImpl() { }

	// RVA: 0x462060 Offset: 0x462060 VA: 0x462060 Slot: 67
	protected override bool IsPrimitiveImpl() { }

	// RVA: 0x462064 Offset: 0x462064 VA: 0x462064 Slot: 39
	public override bool IsSubclassOf(Type type) { }

	// RVA: 0x462124 Offset: 0x462124 VA: 0x462124 Slot: 75
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x4637BC Offset: 0x4637BC VA: 0x4637BC Slot: 44
	public override Type GetElementType() { }

	// RVA: 0x4637C0 Offset: 0x4637C0 VA: 0x4637C0 Slot: 36
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x4637C4 Offset: 0x4637C4 VA: 0x4637C4 Slot: 14
	public override Assembly get_Assembly() { }

	// RVA: 0x4637C8 Offset: 0x4637C8 VA: 0x4637C8 Slot: 15
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x4637D4 Offset: 0x4637D4 VA: 0x4637D4
	private string getFullName(bool full_name, bool assembly_qualified) { }

	// RVA: 0x4637D8 Offset: 0x4637D8 VA: 0x4637D8 Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x4637DC Offset: 0x4637DC VA: 0x4637DC Slot: 18
	public override string get_FullName() { }

	// RVA: 0x46389C Offset: 0x46389C VA: 0x46389C Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x46392C Offset: 0x46392C VA: 0x46392C Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x4639B4 Offset: 0x4639B4 VA: 0x4639B4 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x463AA4 Offset: 0x463AA4 VA: 0x463AA4 Slot: 7
	public override MemberTypes get_MemberType() { }

	// RVA: 0x463AFC Offset: 0x463AFC VA: 0x463AFC Slot: 8
	public override string get_Name() { }

	// RVA: 0x463B00 Offset: 0x463B00 VA: 0x463B00 Slot: 34
	public override string get_Namespace() { }

	// RVA: 0x463B04 Offset: 0x463B04 VA: 0x463B04 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x463B08 Offset: 0x463B08 VA: 0x463B08 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x463B0C Offset: 0x463B0C VA: 0x463B0C Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x463B1C Offset: 0x463B1C VA: 0x463B1C Slot: 35
	public override RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x463B24 Offset: 0x463B24 VA: 0x463B24 Slot: 43
	public override int GetArrayRank() { }

	// RVA: 0x463B28 Offset: 0x463B28 VA: 0x463B28 Slot: 84
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x463B48 Offset: 0x463B48 VA: 0x463B48 Slot: 3
	public override string ToString() { }

	// RVA: 0x463B54 Offset: 0x463B54 VA: 0x463B54 Slot: 76
	public override Type[] GetGenericArguments() { }

	// RVA: 0x463B58 Offset: 0x463B58 VA: 0x463B58 Slot: 77
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x463C8C Offset: 0x463C8C VA: 0x463C8C Slot: 82
	public override bool get_IsGenericParameter() { }

	// RVA: 0x463C90 Offset: 0x463C90 VA: 0x463C90 Slot: 79
	public override Type GetGenericTypeDefinition() { }

	// RVA: 0x4614EC Offset: 0x4614EC VA: 0x4614EC
	private MethodBase CheckMethodSecurity(MethodBase mb) { }

	// RVA: 0x4634A8 Offset: 0x4634A8 VA: 0x4634A8
	private void ReorderParamArrayArguments(ref object[] args, MethodBase method) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9ABD8 Offset: 0x9ABD8 VA: 0x9ABD8
[Serializable]
public sealed class MulticastNotSupportedException : SystemException // TypeDefIndex: 889
{
	// Methods

	// RVA: 0x464CEC Offset: 0x464CEC VA: 0x464CEC
	public void .ctor() { }

	// RVA: 0x464D60 Offset: 0x464D60 VA: 0x464D60
	public void .ctor(string message) { }

	// RVA: 0x464D68 Offset: 0x464D68 VA: 0x464D68
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9ABEC Offset: 0x9ABEC VA: 0x9ABEC
[AttributeUsageAttribute] // RVA: 0x9ABEC Offset: 0x9ABEC VA: 0x9ABEC
public sealed class NonSerializedAttribute : Attribute // TypeDefIndex: 890
{
	// Methods

	// RVA: 0x464D88 Offset: 0x464D88 VA: 0x464D88
	public void .ctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AC38 Offset: 0x9AC38 VA: 0x9AC38
[Serializable]
public class NotImplementedException : SystemException // TypeDefIndex: 891
{
	// Methods

	// RVA: 0x464D90 Offset: 0x464D90 VA: 0x464D90
	public void .ctor() { }

	// RVA: 0x464E18 Offset: 0x464E18 VA: 0x464E18
	public void .ctor(string message) { }

	// RVA: 0x464E44 Offset: 0x464E44 VA: 0x464E44
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AC4C Offset: 0x9AC4C VA: 0x9AC4C
[Serializable]
public class NotSupportedException : SystemException // TypeDefIndex: 892
{
	// Fields
	private const int Result = -2146233067;

	// Methods

	// RVA: 0x464E64 Offset: 0x464E64 VA: 0x464E64
	public void .ctor() { }

	// RVA: 0x464EEC Offset: 0x464EEC VA: 0x464EEC
	public void .ctor(string message) { }

	// RVA: 0x464F18 Offset: 0x464F18 VA: 0x464F18
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AC60 Offset: 0x9AC60 VA: 0x9AC60
[Serializable]
public class NullReferenceException : SystemException // TypeDefIndex: 893
{
	// Fields
	private const int Result = -2147467261;

	// Methods

	// RVA: 0x464F38 Offset: 0x464F38 VA: 0x464F38
	public void .ctor() { }

	// RVA: 0x464FC0 Offset: 0x464FC0 VA: 0x464FC0
	public void .ctor(string message) { }

	// RVA: 0x464FEC Offset: 0x464FEC VA: 0x464FEC
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
internal sealed class NumberFormatter // TypeDefIndex: 894
{
	// Fields
	private static readonly ulong* MantissaBitsTable; // 0x0
	private static readonly int* TensExponentTable; // 0x4
	private static readonly char* DigitLowerTable; // 0x8
	private static readonly char* DigitUpperTable; // 0xC
	private static readonly long* TenPowersList; // 0x10
	private static readonly int* DecHexDigits; // 0x14
	private Thread _thread; // 0x8
	private NumberFormatInfo _nfi; // 0xC
	private bool _NaN; // 0x10
	private bool _infinity; // 0x11
	private bool _isCustomFormat; // 0x12
	private bool _specifierIsUpper; // 0x13
	private bool _positive; // 0x14
	private char _specifier; // 0x16
	private int _precision; // 0x18
	private int _defPrecision; // 0x1C
	private int _digitsLen; // 0x20
	private int _offset; // 0x24
	private int _decPointPos; // 0x28
	private uint _val1; // 0x2C
	private uint _val2; // 0x30
	private uint _val3; // 0x34
	private uint _val4; // 0x38
	private char[] _cbuf; // 0x3C
	private int _ind; // 0x40
	[ThreadStaticAttribute] // RVA: 0x9B44C Offset: 0x9B44C VA: 0x9B44C
	private static NumberFormatter threadNumberFormatter; // 0x80000000

	// Properties
	public CultureInfo CurrentCulture { set; }
	private int IntegerDigits { get; }
	private int DecimalDigits { get; }
	private bool IsFloatingSource { get; }
	private bool IsZero { get; }
	private bool IsZeroInteger { get; }

	// Methods

	// RVA: 0x46500C Offset: 0x46500C VA: 0x46500C
	public void .ctor(Thread current) { }

	// RVA: 0x465124 Offset: 0x465124 VA: 0x465124
	private static void .cctor() { }

	// RVA: 0x4651A8 Offset: 0x4651A8 VA: 0x4651A8
	private static void GetFormatterTables(out ulong* MantissaBitsTable, out int* TensExponentTable, out char* DigitLowerTable, out char* DigitUpperTable, out long* TenPowersList, out int* DecHexDigits) { }

	// RVA: 0x4651AC Offset: 0x4651AC VA: 0x4651AC
	private static long GetTenPowerOf(int i) { }

	// RVA: 0x465244 Offset: 0x465244 VA: 0x465244
	private void InitDecHexDigits(uint value) { }

	// RVA: 0x46551C Offset: 0x46551C VA: 0x46551C
	private void InitDecHexDigits(ulong value) { }

	// RVA: 0x4656F4 Offset: 0x4656F4 VA: 0x4656F4
	private void InitDecHexDigits(uint hi, ulong lo) { }

	// RVA: 0x465330 Offset: 0x465330 VA: 0x465330
	private static uint FastToDecHex(int val) { }

	// RVA: 0x465434 Offset: 0x465434 VA: 0x465434
	private static uint ToDecHex(int val) { }

	// RVA: 0x4659EC Offset: 0x4659EC VA: 0x4659EC
	private static int FastDecHexLen(int val) { }

	// RVA: 0x465A1C Offset: 0x465A1C VA: 0x465A1C
	private static int DecHexLen(uint val) { }

	// RVA: 0x465B08 Offset: 0x465B08 VA: 0x465B08
	private int DecHexLen() { }

	// RVA: 0x465C74 Offset: 0x465C74 VA: 0x465C74
	private static int ScaleOrder(long hi) { }

	// RVA: 0x465D20 Offset: 0x465D20 VA: 0x465D20
	private int InitialFloatingPrecision() { }

	// RVA: 0x465D70 Offset: 0x465D70 VA: 0x465D70
	private static int ParsePrecision(string format) { }

	// RVA: 0x465E04 Offset: 0x465E04 VA: 0x465E04
	private void Init(string format) { }

	// RVA: 0x465F68 Offset: 0x465F68 VA: 0x465F68
	private void InitHex(ulong value) { }

	// RVA: 0x465FD0 Offset: 0x465FD0 VA: 0x465FD0
	private void Init(string format, int value, int defPrecision) { }

	// RVA: 0x466050 Offset: 0x466050 VA: 0x466050
	private void Init(string format, uint value, int defPrecision) { }

	// RVA: 0x4660C4 Offset: 0x4660C4 VA: 0x4660C4
	private void Init(string format, long value) { }

	// RVA: 0x46614C Offset: 0x46614C VA: 0x46614C
	private void Init(string format, ulong value) { }

	// RVA: 0x4661C8 Offset: 0x4661C8 VA: 0x4661C8
	private void Init(string format, double value, int defPrecision) { }

	// RVA: 0x466708 Offset: 0x466708 VA: 0x466708
	private void Init(string format, Decimal value) { }

	// RVA: 0x466990 Offset: 0x466990 VA: 0x466990
	private void ResetCharBuf(int size) { }

	// RVA: 0x466A24 Offset: 0x466A24 VA: 0x466A24
	private void Resize(int len) { }

	// RVA: 0x466AA8 Offset: 0x466AA8 VA: 0x466AA8
	private void Append(char c) { }

	// RVA: 0x466B34 Offset: 0x466B34 VA: 0x466B34
	private void Append(char c, int cnt) { }

	// RVA: 0x466BE4 Offset: 0x466BE4 VA: 0x466BE4
	private void Append(string s) { }

	// RVA: 0x466CDC Offset: 0x466CDC VA: 0x466CDC
	private NumberFormatInfo GetNumberFormatInstance(IFormatProvider fp) { }

	// RVA: 0x4650D4 Offset: 0x4650D4 VA: 0x4650D4
	public void set_CurrentCulture(CultureInfo value) { }

	// RVA: 0x466D78 Offset: 0x466D78 VA: 0x466D78
	private int get_IntegerDigits() { }

	// RVA: 0x466D88 Offset: 0x466D88 VA: 0x466D88
	private int get_DecimalDigits() { }

	// RVA: 0x466D9C Offset: 0x466D9C VA: 0x466D9C
	private bool get_IsFloatingSource() { }

	// RVA: 0x466DB4 Offset: 0x466DB4 VA: 0x466DB4
	private bool get_IsZero() { }

	// RVA: 0x466DC8 Offset: 0x466DC8 VA: 0x466DC8
	private bool get_IsZeroInteger() { }

	// RVA: 0x466DEC Offset: 0x466DEC VA: 0x466DEC
	private void RoundPos(int pos) { }

	// RVA: 0x466F70 Offset: 0x466F70 VA: 0x466F70
	private bool RoundDecimal(int decimals) { }

	// RVA: 0x466DF8 Offset: 0x466DF8 VA: 0x466DF8
	private bool RoundBits(int shift) { }

	// RVA: 0x4670AC Offset: 0x4670AC VA: 0x4670AC
	private void RemoveTrailingZeros() { }

	// RVA: 0x466F84 Offset: 0x466F84 VA: 0x466F84
	private void AddOneToDecHex() { }

	// RVA: 0x4670E8 Offset: 0x4670E8 VA: 0x4670E8
	private static uint AddOneToDecHex(uint val) { }

	// RVA: 0x46659C Offset: 0x46659C VA: 0x46659C
	private int CountTrailingZeros() { }

	// RVA: 0x467194 Offset: 0x467194 VA: 0x467194
	private static int CountTrailingZeros(uint val) { }

	// RVA: 0x467208 Offset: 0x467208 VA: 0x467208
	private static NumberFormatter GetInstance() { }

	// RVA: 0x46731C Offset: 0x46731C VA: 0x46731C
	private void Release() { }

	// RVA: 0x4673B0 Offset: 0x4673B0 VA: 0x4673B0
	internal static void SetThreadCurrentCulture(CultureInfo culture) { }

	// RVA: 0x4674E0 Offset: 0x4674E0 VA: 0x4674E0
	public static string NumberToString(string format, sbyte value, IFormatProvider fp) { }

	// RVA: 0x467804 Offset: 0x467804 VA: 0x467804
	public static string NumberToString(string format, byte value, IFormatProvider fp) { }

	// RVA: 0x467914 Offset: 0x467914 VA: 0x467914
	public static string NumberToString(string format, ushort value, IFormatProvider fp) { }

	// RVA: 0x456368 Offset: 0x456368 VA: 0x456368
	public static string NumberToString(string format, short value, IFormatProvider fp) { }

	// RVA: 0x467A24 Offset: 0x467A24 VA: 0x467A24
	public static string NumberToString(string format, uint value, IFormatProvider fp) { }

	// RVA: 0x4592F4 Offset: 0x4592F4 VA: 0x4592F4
	public static string NumberToString(string format, int value, IFormatProvider fp) { }

	// RVA: 0x467B34 Offset: 0x467B34 VA: 0x467B34
	public static string NumberToString(string format, ulong value, IFormatProvider fp) { }

	// RVA: 0x45BCF0 Offset: 0x45BCF0 VA: 0x45BCF0
	public static string NumberToString(string format, long value, IFormatProvider fp) { }

	// RVA: 0x467C48 Offset: 0x467C48 VA: 0x467C48
	public static string NumberToString(string format, float value, IFormatProvider fp) { }

	// RVA: 0x468070 Offset: 0x468070 VA: 0x468070
	public static string NumberToString(string format, double value, IFormatProvider fp) { }

	// RVA: 0x4682E8 Offset: 0x4682E8 VA: 0x4682E8
	public static string NumberToString(string format, Decimal value, IFormatProvider fp) { }

	// RVA: 0x468430 Offset: 0x468430 VA: 0x468430
	public static string NumberToString(uint value, IFormatProvider fp) { }

	// RVA: 0x456120 Offset: 0x456120 VA: 0x456120
	public static string NumberToString(int value, IFormatProvider fp) { }

	// RVA: 0x468648 Offset: 0x468648 VA: 0x468648
	public static string NumberToString(ulong value, IFormatProvider fp) { }

	// RVA: 0x45BA78 Offset: 0x45BA78 VA: 0x45BA78
	public static string NumberToString(long value, IFormatProvider fp) { }

	// RVA: 0x468774 Offset: 0x468774 VA: 0x468774
	public static string NumberToString(float value, IFormatProvider fp) { }

	// RVA: 0x468A9C Offset: 0x468A9C VA: 0x468A9C
	public static string NumberToString(double value, IFormatProvider fp) { }

	// RVA: 0x468544 Offset: 0x468544 VA: 0x468544
	private string FastIntegerToString(int value, IFormatProvider fp) { }

	// RVA: 0x4675F0 Offset: 0x4675F0 VA: 0x4675F0
	private string IntegerToString(string format, IFormatProvider fp) { }

	// RVA: 0x467E8C Offset: 0x467E8C VA: 0x467E8C
	private string NumberToString(string format, NumberFormatInfo nfi) { }

	// RVA: 0x468EDC Offset: 0x468EDC VA: 0x468EDC
	public string FormatCurrency(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x4694BC Offset: 0x4694BC VA: 0x4694BC
	private string FormatDecimal(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x469C34 Offset: 0x469C34 VA: 0x469C34
	private string FormatHexadecimal(int precision) { }

	// RVA: 0x469600 Offset: 0x469600 VA: 0x469600
	public string FormatFixedPoint(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x468230 Offset: 0x468230 VA: 0x468230
	private string FormatRoundtrip(double origval, NumberFormatInfo nfi) { }

	// RVA: 0x467E0C Offset: 0x467E0C VA: 0x467E0C
	private string FormatRoundtrip(float origval, NumberFormatInfo nfi) { }

	// RVA: 0x468914 Offset: 0x468914 VA: 0x468914
	private string FormatGeneral(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x469734 Offset: 0x469734 VA: 0x469734
	public string FormatNumber(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x4699A0 Offset: 0x4699A0 VA: 0x4699A0
	public string FormatPercent(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x4695B0 Offset: 0x4695B0 VA: 0x4695B0
	public string FormatExponential(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x46AD1C Offset: 0x46AD1C VA: 0x46AD1C
	private string FormatExponential(int precision, NumberFormatInfo nfi, int expDigits) { }

	// RVA: 0x469E00 Offset: 0x469E00 VA: 0x469E00
	public string FormatCustom(string format, NumberFormatInfo nfi) { }

	// RVA: 0x46C070 Offset: 0x46C070 VA: 0x46C070
	private static void ZeroTrimEnd(StringBuilder sb, bool canEmpty) { }

	// RVA: 0x46BF5C Offset: 0x46BF5C VA: 0x46BF5C
	private static bool IsZeroOnly(StringBuilder sb) { }

	// RVA: 0x46BD34 Offset: 0x46BD34 VA: 0x46BD34
	private static void AppendNonNegativeNumber(StringBuilder sb, int v) { }

	// RVA: 0x46BE8C Offset: 0x46BE8C VA: 0x46BE8C
	private void AppendIntegerString(int minLength, StringBuilder sb) { }

	// RVA: 0x46ABE0 Offset: 0x46ABE0 VA: 0x46ABE0
	private void AppendIntegerString(int minLength) { }

	// RVA: 0x46BF28 Offset: 0x46BF28 VA: 0x46BF28
	private void AppendDecimalString(int precision, StringBuilder sb) { }

	// RVA: 0x46A7F4 Offset: 0x46A7F4 VA: 0x46A7F4
	private void AppendDecimalString(int precision) { }

	// RVA: 0x46A59C Offset: 0x46A59C VA: 0x46A59C
	private void AppendIntegerStringWithGroupSeparator(int[] groups, string groupSeparator) { }

	// RVA: 0x46AF24 Offset: 0x46AF24 VA: 0x46AF24
	private void AppendExponent(NumberFormatInfo nfi, int exponent, int minDigits) { }

	// RVA: 0x46AE38 Offset: 0x46AE38 VA: 0x46AE38
	private void AppendOneDigit(int start) { }

	// RVA: 0x468C34 Offset: 0x468C34 VA: 0x468C34
	private void FastAppendDigits(int val, bool force) { }

	// RVA: 0x46A80C Offset: 0x46A80C VA: 0x46A80C
	private void AppendDigits(int start, int end) { }

	// RVA: 0x46CCF8 Offset: 0x46CCF8 VA: 0x46CCF8
	private void AppendDigits(int start, int end, StringBuilder sb) { }

	// RVA: 0x46AE18 Offset: 0x46AE18 VA: 0x46AE18
	private void Multiply10(int count) { }

	// RVA: 0x46BD14 Offset: 0x46BD14 VA: 0x46BD14
	private void Divide10(int count) { }

	// RVA: 0x46AC3C Offset: 0x46AC3C VA: 0x46AC3C
	private NumberFormatter GetClone() { }
}

// Namespace: 
private class NumberFormatter.CustomInfo // TypeDefIndex: 895
{
	// Fields
	public bool UseGroup; // 0x8
	public int DecimalDigits; // 0xC
	public int DecimalPointPos; // 0x10
	public int DecimalTailSharpDigits; // 0x14
	public int IntegerDigits; // 0x18
	public int IntegerHeadSharpDigits; // 0x1C
	public int IntegerHeadPos; // 0x20
	public bool UseExponent; // 0x24
	public int ExponentDigits; // 0x28
	public int ExponentTailSharpDigits; // 0x2C
	public bool ExponentNegativeSignOnly; // 0x30
	public int DividePlaces; // 0x34
	public int Percents; // 0x38
	public int Permilles; // 0x3C

	// Methods

	// RVA: 0x46D018 Offset: 0x46D018 VA: 0x46D018
	public void .ctor() { }

	// RVA: 0x46B0BC Offset: 0x46B0BC VA: 0x46B0BC
	public static void GetActiveSection(string format, ref bool positive, bool zero, ref int offset, ref int length) { }

	// RVA: 0x46B654 Offset: 0x46B654 VA: 0x46B654
	public static NumberFormatter.CustomInfo Parse(string format, int offset, int length, NumberFormatInfo nfi) { }

	// RVA: 0x46C178 Offset: 0x46C178 VA: 0x46C178
	public string Format(string format, int offset, int length, NumberFormatInfo nfi, bool positive, StringBuilder sb_int, StringBuilder sb_dec, StringBuilder sb_exp) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AC74 Offset: 0x9AC74 VA: 0x9AC74
[Serializable]
public class ObjectDisposedException : InvalidOperationException // TypeDefIndex: 896
{
	// Fields
	private string obj_name; // 0x34
	private string msg; // 0x38

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x46D0D0 Offset: 0x46D0D0 VA: 0x46D0D0
	public void .ctor(string objectName) { }

	// RVA: 0x46D170 Offset: 0x46D170 VA: 0x46D170
	public void .ctor(string objectName, string message) { }

	// RVA: 0x46D1B0 Offset: 0x46D1B0 VA: 0x46D1B0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x46D25C Offset: 0x46D25C VA: 0x46D25C Slot: 6
	public override string get_Message() { }

	// RVA: 0x46D264 Offset: 0x46D264 VA: 0x46D264 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AC88 Offset: 0x9AC88 VA: 0x9AC88
[Serializable]
public sealed class OperatingSystem : ICloneable, ISerializable // TypeDefIndex: 897
{
	// Fields
	private PlatformID _platform; // 0x8
	private Version _version; // 0xC
	private string _servicePack; // 0x10

	// Properties
	public PlatformID Platform { get; }

	// Methods

	// RVA: 0x46D364 Offset: 0x46D364 VA: 0x46D364
	public void .ctor(PlatformID platform, Version version) { }

	// RVA: 0x46D474 Offset: 0x46D474 VA: 0x46D474
	public PlatformID get_Platform() { }

	// RVA: 0x46D47C Offset: 0x46D47C VA: 0x46D47C Slot: 4
	public object Clone() { }

	// RVA: 0x46D4F8 Offset: 0x46D4F8 VA: 0x46D4F8 Slot: 5
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x46D60C Offset: 0x46D60C VA: 0x46D60C Slot: 3
	public override string ToString() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AC9C Offset: 0x9AC9C VA: 0x9AC9C
[Serializable]
public class OutOfMemoryException : SystemException // TypeDefIndex: 898
{
	// Fields
	private const int Result = -2147024882;

	// Methods

	// RVA: 0x46DAD4 Offset: 0x46DAD4 VA: 0x46DAD4
	public void .ctor() { }

	// RVA: 0x46DB5C Offset: 0x46DB5C VA: 0x46DB5C
	public void .ctor(string message) { }

	// RVA: 0x46DB88 Offset: 0x46DB88 VA: 0x46DB88
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9ACB0 Offset: 0x9ACB0 VA: 0x9ACB0
[Serializable]
public class OverflowException : ArithmeticException // TypeDefIndex: 899
{
	// Fields
	private const int Result = -2146233066;

	// Methods

	// RVA: 0x46DBA8 Offset: 0x46DBA8 VA: 0x46DBA8
	public void .ctor() { }

	// RVA: 0x455EA0 Offset: 0x455EA0 VA: 0x455EA0
	public void .ctor(string message) { }

	// RVA: 0x46DC30 Offset: 0x46DC30 VA: 0x46DC30
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9ACC4 Offset: 0x9ACC4 VA: 0x9ACC4
[Serializable]
public enum PlatformID // TypeDefIndex: 900
{
	// Fields
	public int value__; // 0x0
	public const PlatformID Win32S = 0;
	public const PlatformID Win32Windows = 1;
	public const PlatformID Win32NT = 2;
	public const PlatformID WinCE = 3;
	public const PlatformID Unix = 4;
	public const PlatformID Xbox = 5;
	public const PlatformID MacOSX = 6;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9ACD8 Offset: 0x9ACD8 VA: 0x9ACD8
[Serializable]
public class PlatformNotSupportedException : NotSupportedException // TypeDefIndex: 901
{
	// Fields
	private const int Result = -2146233031;

	// Methods

	// RVA: 0x46DC58 Offset: 0x46DC58 VA: 0x46DC58
	public void .ctor() { }

	// RVA: 0x46DCF4 Offset: 0x46DCF4 VA: 0x46DCF4
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9ACEC Offset: 0x9ACEC VA: 0x9ACEC
[Serializable]
public class RankException : SystemException // TypeDefIndex: 902
{
	// Methods

	// RVA: 0x46DD14 Offset: 0x46DD14 VA: 0x46DD14
	public void .ctor() { }

	// RVA: 0x46DD9C Offset: 0x46DD9C VA: 0x46DD9C
	public void .ctor(string message) { }

	// RVA: 0x46DDC8 Offset: 0x46DDC8 VA: 0x46DDC8
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AD00 Offset: 0x9AD00 VA: 0x9AD00
public class ResolveEventArgs : EventArgs // TypeDefIndex: 903
{
	// Fields
	private string m_Name; // 0x8

	// Methods

	// RVA: 0x1D61AC Offset: 0x1D61AC VA: 0x1D61AC
	public void .ctor(string name) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AD14 Offset: 0x9AD14 VA: 0x9AD14
[MonoTODOAttribute] // RVA: 0x9AD14 Offset: 0x9AD14 VA: 0x9AD14
[Serializable]
public struct RuntimeMethodHandle : ISerializable // TypeDefIndex: 904
{
	// Fields
	private IntPtr value; // 0x0

	// Properties
	public IntPtr Value { get; }

	// Methods

	// RVA: 0xC9B5C Offset: 0xC9B5C VA: 0xC9B5C
	internal void .ctor(IntPtr v) { }

	// RVA: 0xC9B64 Offset: 0xC9B64 VA: 0xC9B64
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xC9B80 Offset: 0xC9B80 VA: 0xC9B80
	public IntPtr get_Value() { }

	// RVA: 0xC9B88 Offset: 0xC9B88 VA: 0xC9B88 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ReliabilityContractAttribute] // RVA: 0x9DD28 Offset: 0x9DD28 VA: 0x9DD28
	// RVA: 0xC9BA4 Offset: 0xC9BA4 VA: 0xC9BA4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xC9BAC Offset: 0xC9BAC VA: 0xC9BAC Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AD60 Offset: 0x9AD60 VA: 0x9AD60
[Serializable]
public sealed class StackOverflowException : SystemException // TypeDefIndex: 905
{
	// Methods

	// RVA: 0x448248 Offset: 0x448248 VA: 0x448248
	public void .ctor() { }

	// RVA: 0x4482D0 Offset: 0x4482D0 VA: 0x4482D0
	public void .ctor(string message) { }

	// RVA: 0x4482FC Offset: 0x4482FC VA: 0x4482FC
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AD74 Offset: 0x9AD74 VA: 0x9AD74
[Serializable]
public abstract class StringComparer : IComparer<string>, IEqualityComparer<string>, IComparer, IEqualityComparer // TypeDefIndex: 906
{
	// Fields
	private static StringComparer invariantCultureIgnoreCase; // 0x0
	private static StringComparer invariantCulture; // 0x4
	private static StringComparer ordinalIgnoreCase; // 0x8
	private static StringComparer ordinal; // 0xC

	// Properties
	public static StringComparer InvariantCultureIgnoreCase { get; }
	public static StringComparer OrdinalIgnoreCase { get; }

	// Methods

	// RVA: 0x452160 Offset: 0x452160 VA: 0x452160
	protected void .ctor() { }

	// RVA: 0x452168 Offset: 0x452168 VA: 0x452168
	private static void .cctor() { }

	// RVA: 0x4522B0 Offset: 0x4522B0 VA: 0x4522B0
	public static StringComparer get_InvariantCultureIgnoreCase() { }

	// RVA: 0x45233C Offset: 0x45233C VA: 0x45233C
	public static StringComparer get_OrdinalIgnoreCase() { }

	// RVA: 0x4523C8 Offset: 0x4523C8 VA: 0x4523C8 Slot: 7
	public int Compare(object x, object y) { }

	// RVA: 0x452574 Offset: 0x452574 VA: 0x452574 Slot: 8
	public bool Equals(object x, object y) { }

	// RVA: 0x452648 Offset: 0x452648 VA: 0x452648 Slot: 9
	public int GetHashCode(object obj) { }

	// RVA: -1 Offset: -1 Slot: 10
	public abstract int Compare(string x, string y);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract bool Equals(string x, string y);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract int GetHashCode(string obj);
}

// Namespace: System
[Serializable]
internal sealed class CultureAwareComparer : StringComparer // TypeDefIndex: 907
{
	// Fields
	private readonly bool _ignoreCase; // 0x8
	private readonly CompareInfo _compareInfo; // 0xC

	// Methods

	// RVA: 0x49461C Offset: 0x49461C VA: 0x49461C
	public void .ctor(CultureInfo ci, bool ignore_case) { }

	// RVA: 0x4946D4 Offset: 0x4946D4 VA: 0x4946D4 Slot: 10
	public override int Compare(string x, string y) { }

	// RVA: 0x49472C Offset: 0x49472C VA: 0x49472C Slot: 11
	public override bool Equals(string x, string y) { }

	// RVA: 0x49474C Offset: 0x49474C VA: 0x49474C Slot: 12
	public override int GetHashCode(string s) { }
}

// Namespace: System
[Serializable]
internal sealed class OrdinalComparer : StringComparer // TypeDefIndex: 908
{
	// Fields
	private readonly bool _ignoreCase; // 0x8

	// Methods

	// RVA: 0x46D7B0 Offset: 0x46D7B0 VA: 0x46D7B0
	public void .ctor(bool ignoreCase) { }

	// RVA: 0x46D83C Offset: 0x46D83C VA: 0x46D83C Slot: 10
	public override int Compare(string x, string y) { }

	// RVA: 0x46D93C Offset: 0x46D93C VA: 0x46D93C Slot: 11
	public override bool Equals(string x, string y) { }

	// RVA: 0x46D9FC Offset: 0x46D9FC VA: 0x46D9FC Slot: 12
	public override int GetHashCode(string s) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AD88 Offset: 0x9AD88 VA: 0x9AD88
[Serializable]
public enum StringComparison // TypeDefIndex: 909
{
	// Fields
	public int value__; // 0x0
	public const StringComparison CurrentCulture = 0;
	public const StringComparison CurrentCultureIgnoreCase = 1;
	public const StringComparison InvariantCulture = 2;
	public const StringComparison InvariantCultureIgnoreCase = 3;
	public const StringComparison Ordinal = 4;
	public const StringComparison OrdinalIgnoreCase = 5;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AD9C Offset: 0x9AD9C VA: 0x9AD9C
[FlagsAttribute] // RVA: 0x9AD9C Offset: 0x9AD9C VA: 0x9AD9C
public enum StringSplitOptions // TypeDefIndex: 910
{
	// Fields
	public int value__; // 0x0
	public const StringSplitOptions None = 0;
	public const StringSplitOptions RemoveEmptyEntries = 1;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9ADD0 Offset: 0x9ADD0 VA: 0x9ADD0
[Serializable]
public class SystemException : Exception // TypeDefIndex: 911
{
	// Methods

	// RVA: 0x452740 Offset: 0x452740 VA: 0x452740
	public void .ctor() { }

	// RVA: 0x445460 Offset: 0x445460 VA: 0x445460
	public void .ctor(string message) { }

	// RVA: 0x445668 Offset: 0x445668 VA: 0x445668
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x4527C8 Offset: 0x4527C8 VA: 0x4527C8
	public void .ctor(string message, Exception innerException) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x9ADE4 Offset: 0x9ADE4 VA: 0x9ADE4
[ComVisibleAttribute] // RVA: 0x9ADE4 Offset: 0x9ADE4 VA: 0x9ADE4
[Serializable]
public class ThreadStaticAttribute : Attribute // TypeDefIndex: 912
{
	// Methods

	// RVA: 0x42967C Offset: 0x42967C VA: 0x42967C
	public void .ctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AE30 Offset: 0x9AE30 VA: 0x9AE30
[Serializable]
public struct TimeSpan : IComparable, IComparable<TimeSpan>, IEquatable<TimeSpan> // TypeDefIndex: 913
{
	// Fields
	public static readonly TimeSpan MaxValue; // 0x0
	public static readonly TimeSpan MinValue; // 0x8
	public static readonly TimeSpan Zero; // 0x10
	private long _ticks; // 0x0

	// Properties
	public int Days { get; }
	public int Hours { get; }
	public int Milliseconds { get; }
	public int Minutes { get; }
	public int Seconds { get; }
	public long Ticks { get; }
	public double TotalDays { get; }
	public double TotalHours { get; }
	public double TotalMilliseconds { get; }
	public double TotalMinutes { get; }
	public double TotalSeconds { get; }

	// Methods

	// RVA: 0xC9F98 Offset: 0xC9F98 VA: 0xC9F98
	public void .ctor(long ticks) { }

	// RVA: 0xC9FA8 Offset: 0xC9FA8 VA: 0xC9FA8
	public void .ctor(int hours, int minutes, int seconds) { }

	// RVA: 0xC9FC4 Offset: 0xC9FC4 VA: 0xC9FC4
	public void .ctor(int days, int hours, int minutes, int seconds, int milliseconds) { }

	// RVA: 0x42F940 Offset: 0x42F940 VA: 0x42F940
	private static void .cctor() { }

	// RVA: 0x42F7B4 Offset: 0x42F7B4 VA: 0x42F7B4
	internal static long CalculateTicks(int days, int hours, int minutes, int seconds, int milliseconds) { }

	// RVA: 0xC9FEC Offset: 0xC9FEC VA: 0xC9FEC
	public int get_Days() { }

	// RVA: 0xCA00C Offset: 0xCA00C VA: 0xCA00C
	public int get_Hours() { }

	// RVA: 0xCA048 Offset: 0xCA048 VA: 0xCA048
	public int get_Milliseconds() { }

	// RVA: 0xCA07C Offset: 0xCA07C VA: 0xCA07C
	public int get_Minutes() { }

	// RVA: 0xCA0B8 Offset: 0xCA0B8 VA: 0xCA0B8
	public int get_Seconds() { }

	// RVA: 0xCA0F4 Offset: 0xCA0F4 VA: 0xCA0F4
	public long get_Ticks() { }

	// RVA: 0xCA100 Offset: 0xCA100 VA: 0xCA100
	public double get_TotalDays() { }

	// RVA: 0xCA130 Offset: 0xCA130 VA: 0xCA130
	public double get_TotalHours() { }

	// RVA: 0xCA160 Offset: 0xCA160 VA: 0xCA160
	public double get_TotalMilliseconds() { }

	// RVA: 0xCA190 Offset: 0xCA190 VA: 0xCA190
	public double get_TotalMinutes() { }

	// RVA: 0xCA1C0 Offset: 0xCA1C0 VA: 0xCA1C0
	public double get_TotalSeconds() { }

	// RVA: 0xCA1F0 Offset: 0xCA1F0 VA: 0xCA1F0
	public TimeSpan Add(TimeSpan ts) { }

	// RVA: 0x42FDF4 Offset: 0x42FDF4 VA: 0x42FDF4
	public static int Compare(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0xCA20C Offset: 0xCA20C VA: 0xCA20C Slot: 4
	public int CompareTo(object value) { }

	// RVA: 0xCA214 Offset: 0xCA214 VA: 0xCA214 Slot: 5
	public int CompareTo(TimeSpan value) { }

	// RVA: 0xCA230 Offset: 0xCA230 VA: 0xCA230 Slot: 6
	public bool Equals(TimeSpan obj) { }

	// RVA: 0xCA24C Offset: 0xCA24C VA: 0xCA24C
	public TimeSpan Duration() { }

	// RVA: 0xCA2B4 Offset: 0xCA2B4 VA: 0xCA2B4 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x430138 Offset: 0x430138 VA: 0x430138
	public static TimeSpan FromDays(double value) { }

	// RVA: 0x430664 Offset: 0x430664 VA: 0x430664
	public static TimeSpan FromHours(double value) { }

	// RVA: 0x430710 Offset: 0x430710 VA: 0x430710
	public static TimeSpan FromMinutes(double value) { }

	// RVA: 0x4307BC Offset: 0x4307BC VA: 0x4307BC
	public static TimeSpan FromSeconds(double value) { }

	// RVA: 0x430868 Offset: 0x430868 VA: 0x430868
	public static TimeSpan FromMilliseconds(double value) { }

	// RVA: 0x4301E8 Offset: 0x4301E8 VA: 0x4301E8
	private static TimeSpan From(double value, long tickMultiplicator) { }

	// RVA: 0x430910 Offset: 0x430910 VA: 0x430910
	public static TimeSpan FromTicks(long value) { }

	// RVA: 0xCA2BC Offset: 0xCA2BC VA: 0xCA2BC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xCA2C8 Offset: 0xCA2C8 VA: 0xCA2C8
	public TimeSpan Negate() { }

	// RVA: 0xCA2DC Offset: 0xCA2DC VA: 0xCA2DC
	public TimeSpan Subtract(TimeSpan ts) { }

	// RVA: 0xCA2F8 Offset: 0xCA2F8 VA: 0xCA2F8 Slot: 3
	public override string ToString() { }

	// RVA: 0x430F94 Offset: 0x430F94 VA: 0x430F94
	public static TimeSpan op_Addition(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x430FC8 Offset: 0x430FC8 VA: 0x430FC8
	public static bool op_Equality(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x430FE0 Offset: 0x430FE0 VA: 0x430FE0
	public static bool op_GreaterThan(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x430FF8 Offset: 0x430FF8 VA: 0x430FF8
	public static bool op_GreaterThanOrEqual(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x431010 Offset: 0x431010 VA: 0x431010
	public static bool op_Inequality(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x431024 Offset: 0x431024 VA: 0x431024
	public static bool op_LessThan(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x43103C Offset: 0x43103C VA: 0x43103C
	public static bool op_LessThanOrEqual(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x431054 Offset: 0x431054 VA: 0x431054
	public static TimeSpan op_Subtraction(TimeSpan t1, TimeSpan t2) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AE44 Offset: 0x9AE44 VA: 0x9AE44
[Serializable]
public abstract class TimeZone // TypeDefIndex: 914
{
	// Fields
	private static TimeZone currentTimeZone; // 0x0
	private static object tz_lock; // 0x4
	private static long timezone_check; // 0x8

	// Properties
	public static TimeZone CurrentTimeZone { get; }

	// Methods

	// RVA: 0x431088 Offset: 0x431088 VA: 0x431088
	protected void .ctor() { }

	// RVA: 0x431090 Offset: 0x431090 VA: 0x431090
	private static void .cctor() { }

	// RVA: 0x431110 Offset: 0x431110 VA: 0x431110
	public static TimeZone get_CurrentTimeZone() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract DaylightTime GetDaylightChanges(int year);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract TimeSpan GetUtcOffset(DateTime time);

	// RVA: 0x4313A0 Offset: 0x4313A0 VA: 0x4313A0 Slot: 6
	public virtual bool IsDaylightSavingTime(DateTime time) { }

	// RVA: 0x43147C Offset: 0x43147C VA: 0x43147C
	public static bool IsDaylightSavingTime(DateTime time, DaylightTime daylightTimes) { }

	// RVA: 0x4317F8 Offset: 0x4317F8 VA: 0x4317F8 Slot: 7
	public virtual DateTime ToLocalTime(DateTime time) { }

	// RVA: 0x431DA8 Offset: 0x431DA8 VA: 0x431DA8 Slot: 8
	public virtual DateTime ToUniversalTime(DateTime time) { }

	// RVA: 0x4320E8 Offset: 0x4320E8 VA: 0x4320E8
	internal TimeSpan GetLocalTimeDiff(DateTime time) { }

	// RVA: 0x432158 Offset: 0x432158 VA: 0x432158
	internal TimeSpan GetLocalTimeDiff(DateTime time, TimeSpan utc_offset) { }
}

// Namespace: System
[Serializable]
internal class CurrentSystemTimeZone : TimeZone, IDeserializationCallback // TypeDefIndex: 915
{
	// Fields
	private string m_standardName; // 0x8
	private string m_daylightName; // 0xC
	private Hashtable m_CachedDaylightChanges; // 0x10
	private long m_ticksOffset; // 0x18
	private TimeSpan utcOffsetWithOutDLS; // 0x20
	private TimeSpan utcOffsetWithDLS; // 0x28
	private static int this_year; // 0x0
	private static DaylightTime this_year_dlt; // 0x4

	// Methods

	// RVA: 0x494858 Offset: 0x494858 VA: 0x494858
	internal void .ctor() { }

	// RVA: 0x49491C Offset: 0x49491C VA: 0x49491C
	internal void .ctor(long lnow) { }

	// RVA: 0x495004 Offset: 0x495004 VA: 0x495004 Slot: 9
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x494BC4 Offset: 0x494BC4 VA: 0x494BC4
	private static bool GetTimeZoneData(int year, out long[] data, out string[] names) { }

	// RVA: 0x49500C Offset: 0x49500C VA: 0x49500C Slot: 4
	public override DaylightTime GetDaylightChanges(int year) { }

	// RVA: 0x495430 Offset: 0x495430 VA: 0x495430 Slot: 5
	public override TimeSpan GetUtcOffset(DateTime time) { }

	// RVA: 0x494D24 Offset: 0x494D24 VA: 0x494D24
	private void OnDeserialization(DaylightTime dlt) { }

	// RVA: 0x494BC8 Offset: 0x494BC8 VA: 0x494BC8
	private DaylightTime GetDaylightTimeFromData(long[] data) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AE58 Offset: 0x9AE58 VA: 0x9AE58
[Serializable]
public enum TypeCode // TypeDefIndex: 916
{
	// Fields
	public int value__; // 0x0
	public const TypeCode Empty = 0;
	public const TypeCode Object = 1;
	public const TypeCode DBNull = 2;
	public const TypeCode Boolean = 3;
	public const TypeCode Char = 4;
	public const TypeCode SByte = 5;
	public const TypeCode Byte = 6;
	public const TypeCode Int16 = 7;
	public const TypeCode UInt16 = 8;
	public const TypeCode Int32 = 9;
	public const TypeCode UInt32 = 10;
	public const TypeCode Int64 = 11;
	public const TypeCode UInt64 = 12;
	public const TypeCode Single = 13;
	public const TypeCode Double = 14;
	public const TypeCode Decimal = 15;
	public const TypeCode DateTime = 16;
	public const TypeCode String = 18;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AE6C Offset: 0x9AE6C VA: 0x9AE6C
[Serializable]
public sealed class TypeInitializationException : SystemException // TypeDefIndex: 917
{
	// Fields
	private string type_name; // 0x34

	// Methods

	// RVA: 0x5BEB30 Offset: 0x5BEB30 VA: 0x5BEB30
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x5BEBDC Offset: 0x5BEBDC VA: 0x5BEBDC Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AE80 Offset: 0x9AE80 VA: 0x9AE80
[Serializable]
public class TypeLoadException : SystemException // TypeDefIndex: 918
{
	// Fields
	private const int Result = -2146233054;
	private string className; // 0x34
	private string assemblyName; // 0x38

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x5BEC8C Offset: 0x5BEC8C VA: 0x5BEC8C
	public void .ctor() { }

	// RVA: 0x5BED14 Offset: 0x5BED14 VA: 0x5BED14
	public void .ctor(string message) { }

	// RVA: 0x5BED40 Offset: 0x5BED40 VA: 0x5BED40
	internal void .ctor(string className, string assemblyName) { }

	// RVA: 0x5BED64 Offset: 0x5BED64 VA: 0x5BED64
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x5BEE80 Offset: 0x5BEE80 VA: 0x5BEE80 Slot: 6
	public override string get_Message() { }

	// RVA: 0x5BEFEC Offset: 0x5BEFEC VA: 0x5BEFEC Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AE94 Offset: 0x9AE94 VA: 0x9AE94
[Serializable]
public class UnauthorizedAccessException : SystemException // TypeDefIndex: 919
{
	// Methods

	// RVA: 0x5C3F00 Offset: 0x5C3F00 VA: 0x5C3F00
	public void .ctor() { }

	// RVA: 0x5C3F88 Offset: 0x5C3F88 VA: 0x5C3F88
	public void .ctor(string message) { }

	// RVA: 0x5C3FB4 Offset: 0x5C3FB4 VA: 0x5C3FB4
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AEA8 Offset: 0x9AEA8 VA: 0x9AEA8
[Serializable]
public class UnhandledExceptionEventArgs : EventArgs // TypeDefIndex: 920
{
	// Fields
	private object exception; // 0x8
	private bool m_isTerminating; // 0xC

	// Properties
	public object ExceptionObject { get; }
	public bool IsTerminating { get; }

	// Methods

	// RVA: 0x5C3FD4 Offset: 0x5C3FD4 VA: 0x5C3FD4
	public void .ctor(object exception, bool isTerminating) { }

	[ReliabilityContractAttribute] // RVA: 0x9DD40 Offset: 0x9DD40 VA: 0x9DD40
	// RVA: 0x5C4068 Offset: 0x5C4068 VA: 0x5C4068
	public object get_ExceptionObject() { }

	[ReliabilityContractAttribute] // RVA: 0x9DD58 Offset: 0x9DD58 VA: 0x9DD58
	// RVA: 0x5C4070 Offset: 0x5C4070 VA: 0x5C4070
	public bool get_IsTerminating() { }
}

// Namespace: System
[Serializable]
internal class UnitySerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 921
{
	// Fields
	private string _data; // 0x8
	private UnitySerializationHolder.UnityType _unityType; // 0xC
	private string _assemblyName; // 0x10

	// Methods

	// RVA: 0x5C44AC Offset: 0x5C44AC VA: 0x5C44AC
	private void .ctor(SerializationInfo info, StreamingContext ctx) { }

	// RVA: 0x5C45B4 Offset: 0x5C45B4 VA: 0x5C45B4
	public static void GetTypeData(Type instance, SerializationInfo info, StreamingContext ctx) { }

	// RVA: 0x5C4784 Offset: 0x5C4784 VA: 0x5C4784
	public static void GetDBNullData(DBNull instance, SerializationInfo info, StreamingContext ctx) { }

	// RVA: 0x5C495C Offset: 0x5C495C VA: 0x5C495C
	public static void GetModuleData(Module instance, SerializationInfo info, StreamingContext ctx) { }

	// RVA: 0x5C4B2C Offset: 0x5C4B2C VA: 0x5C4B2C Slot: 6
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x5C4BB4 Offset: 0x5C4BB4 VA: 0x5C4BB4 Slot: 7
	public virtual object GetRealObject(StreamingContext context) { }
}

// Namespace: 
private enum UnitySerializationHolder.UnityType // TypeDefIndex: 922
{
	// Fields
	public byte value__; // 0x0
	public const UnitySerializationHolder.UnityType DBNull = 2;
	public const UnitySerializationHolder.UnityType Type = 4;
	public const UnitySerializationHolder.UnityType Module = 5;
	public const UnitySerializationHolder.UnityType Assembly = 6;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AEBC Offset: 0x9AEBC VA: 0x9AEBC
[Serializable]
public sealed class Version : IComparable, ICloneable, IComparable<Version>, IEquatable<Version> // TypeDefIndex: 923
{
	// Fields
	private const int UNDEFINED = -1;
	private int _Major; // 0x8
	private int _Minor; // 0xC
	private int _Build; // 0x10
	private int _Revision; // 0x14

	// Properties
	public int Build { get; }
	public int Major { get; }
	public int Minor { get; }
	public int Revision { get; }

	// Methods

	// RVA: 0x5C4FD0 Offset: 0x5C4FD0 VA: 0x5C4FD0
	public void .ctor() { }

	// RVA: 0x5C5218 Offset: 0x5C5218 VA: 0x5C5218
	public void .ctor(string version) { }

	// RVA: 0x5C5480 Offset: 0x5C5480 VA: 0x5C5480
	public void .ctor(int major, int minor) { }

	// RVA: 0x5C54C8 Offset: 0x5C54C8 VA: 0x5C54C8
	public void .ctor(int major, int minor, int build) { }

	// RVA: 0x5C5510 Offset: 0x5C5510 VA: 0x5C5510
	public void .ctor(int major, int minor, int build, int revision) { }

	// RVA: 0x5C5044 Offset: 0x5C5044 VA: 0x5C5044
	private void CheckedSet(int defined, int major, int minor, int build, int revision) { }

	// RVA: 0x5C555C Offset: 0x5C555C VA: 0x5C555C
	public int get_Build() { }

	// RVA: 0x5C5564 Offset: 0x5C5564 VA: 0x5C5564
	public int get_Major() { }

	// RVA: 0x5C556C Offset: 0x5C556C VA: 0x5C556C
	public int get_Minor() { }

	// RVA: 0x5C5574 Offset: 0x5C5574 VA: 0x5C5574
	public int get_Revision() { }

	// RVA: 0x5C557C Offset: 0x5C557C VA: 0x5C557C Slot: 5
	public object Clone() { }

	// RVA: 0x5C568C Offset: 0x5C568C VA: 0x5C568C Slot: 4
	public int CompareTo(object version) { }

	// RVA: 0x5C5820 Offset: 0x5C5820 VA: 0x5C5820 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x5C5778 Offset: 0x5C5778 VA: 0x5C5778 Slot: 6
	public int CompareTo(Version value) { }

	// RVA: 0x5C58A8 Offset: 0x5C58A8 VA: 0x5C58A8 Slot: 7
	public bool Equals(Version obj) { }

	// RVA: 0x5C5950 Offset: 0x5C5950 VA: 0x5C5950 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x5C5970 Offset: 0x5C5970 VA: 0x5C5970 Slot: 3
	public override string ToString() { }

	// RVA: 0x5C5B08 Offset: 0x5C5B08 VA: 0x5C5B08
	internal static Version CreateFromString(string info) { }

	// RVA: 0x5C5930 Offset: 0x5C5930 VA: 0x5C5930
	public static bool op_Equality(Version v1, Version v2) { }

	// RVA: 0x5C5938 Offset: 0x5C5938 VA: 0x5C5938
	public static bool op_Inequality(Version v1, Version v2) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AED0 Offset: 0x9AED0 VA: 0x9AED0
[Serializable]
public class WeakReference : ISerializable // TypeDefIndex: 924
{
	// Fields
	private bool isLongReference; // 0x8
	private GCHandle gcHandle; // 0xC

	// Properties
	public virtual object Target { get; }
	public virtual bool TrackResurrection { get; }

	// Methods

	// RVA: 0x5C5DC8 Offset: 0x5C5DC8 VA: 0x5C5DC8
	protected void .ctor() { }

	// RVA: 0x5C5DD0 Offset: 0x5C5DD0 VA: 0x5C5DD0
	public void .ctor(object target) { }

	// RVA: 0x5C5E08 Offset: 0x5C5E08 VA: 0x5C5E08
	public void .ctor(object target, bool trackResurrection) { }

	// RVA: 0x5C5E68 Offset: 0x5C5E68 VA: 0x5C5E68
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x5C5E40 Offset: 0x5C5E40 VA: 0x5C5E40
	private void AllocateHandle(object target) { }

	// RVA: 0x5C5FBC Offset: 0x5C5FBC VA: 0x5C5FBC Slot: 5
	public virtual object get_Target() { }

	// RVA: 0x5C5FC8 Offset: 0x5C5FC8 VA: 0x5C5FC8 Slot: 6
	public virtual bool get_TrackResurrection() { }

	// RVA: 0x5C5FD0 Offset: 0x5C5FD0 VA: 0x5C5FD0 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x5C603C Offset: 0x5C603C VA: 0x5C603C Slot: 7
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: Mono.Math.Prime
internal sealed class PrimalityTest : MulticastDelegate // TypeDefIndex: 925
{
	// Methods

	// RVA: 0x4AA33C Offset: 0x4AA33C VA: 0x4AA33C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x4AA7DC Offset: 0x4AA7DC VA: 0x4AA7DC Slot: 11
	public virtual bool Invoke(BigInteger bi, ConfidenceFactor confidence) { }

	// RVA: 0x4AABC4 Offset: 0x4AABC4 VA: 0x4AABC4 Slot: 12
	public virtual IAsyncResult BeginInvoke(BigInteger bi, ConfidenceFactor confidence, AsyncCallback callback, object object) { }

	// RVA: 0x4AAC64 Offset: 0x4AAC64 VA: 0x4AAC64 Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x9AEE4 Offset: 0x9AEE4 VA: 0x9AEE4
[Serializable]
public sealed class MemberFilter : MulticastDelegate // TypeDefIndex: 926
{
	// Methods

	// RVA: 0x297C00 Offset: 0x297C00 VA: 0x297C00
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x297C14 Offset: 0x297C14 VA: 0x297C14 Slot: 11
	public virtual bool Invoke(MemberInfo m, object filterCriteria) { }

	// RVA: 0x297FF4 Offset: 0x297FF4 VA: 0x297FF4 Slot: 12
	public virtual IAsyncResult BeginInvoke(MemberInfo m, object filterCriteria, AsyncCallback callback, object object) { }

	// RVA: 0x29802C Offset: 0x29802C VA: 0x29802C Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x9AEF8 Offset: 0x9AEF8 VA: 0x9AEF8
[Serializable]
public sealed class TypeFilter : MulticastDelegate // TypeDefIndex: 927
{
	// Methods

	// RVA: 0x1D5D48 Offset: 0x1D5D48 VA: 0x1D5D48
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1D5D5C Offset: 0x1D5D5C VA: 0x1D5D5C Slot: 11
	public virtual bool Invoke(Type m, object filterCriteria) { }

	// RVA: 0x1D613C Offset: 0x1D613C VA: 0x1D613C Slot: 12
	public virtual IAsyncResult BeginInvoke(Type m, object filterCriteria, AsyncCallback callback, object object) { }

	// RVA: 0x1D6174 Offset: 0x1D6174 VA: 0x1D6174 Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x9AF0C Offset: 0x9AF0C VA: 0x9AF0C
public sealed class CrossContextDelegate : MulticastDelegate // TypeDefIndex: 928
{
	// Methods

	// RVA: 0x1F24BC Offset: 0x1F24BC VA: 0x1F24BC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1F24D0 Offset: 0x1F24D0 VA: 0x1F24D0 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1F26E0 Offset: 0x1F26E0 VA: 0x1F26E0 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1F270C Offset: 0x1F270C VA: 0x1F270C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x9AF20 Offset: 0x9AF20 VA: 0x9AF20
public sealed class HeaderHandler : MulticastDelegate // TypeDefIndex: 929
{
	// Methods

	// RVA: 0x18FBC4 Offset: 0x18FBC4 VA: 0x18FBC4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x18FBD8 Offset: 0x18FBD8 VA: 0x18FBD8 Slot: 11
	public virtual object Invoke(Header[] headers) { }

	// RVA: 0x18FF98 Offset: 0x18FF98 VA: 0x18FF98 Slot: 12
	public virtual IAsyncResult BeginInvoke(Header[] headers, AsyncCallback callback, object object) { }

	// RVA: 0x18FFC4 Offset: 0x18FFC4 VA: 0x18FFC4 Slot: 13
	public virtual object EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
public sealed class SendOrPostCallback : MulticastDelegate // TypeDefIndex: 930
{
	// Methods

	// RVA: 0x42B59C Offset: 0x42B59C VA: 0x42B59C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x42B5B0 Offset: 0x42B5B0 VA: 0x42B5B0 Slot: 11
	public virtual void Invoke(object state) { }

	// RVA: 0x42B96C Offset: 0x42B96C VA: 0x42B96C Slot: 12
	public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object) { }

	// RVA: 0x42B998 Offset: 0x42B998 VA: 0x42B998 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x9AF34 Offset: 0x9AF34 VA: 0x9AF34
public sealed class ThreadStart : MulticastDelegate // TypeDefIndex: 931
{
	// Methods

	// RVA: 0x42CC60 Offset: 0x42CC60 VA: 0x42CC60
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x42CC74 Offset: 0x42CC74 VA: 0x42CC74 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x42CE84 Offset: 0x42CE84 VA: 0x42CE84 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x42CEB0 Offset: 0x42CEB0 VA: 0x42CEB0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x9AF48 Offset: 0x9AF48 VA: 0x9AF48
public sealed class TimerCallback : MulticastDelegate // TypeDefIndex: 932
{
	// Methods

	// RVA: 0x42E5E0 Offset: 0x42E5E0 VA: 0x42E5E0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x42E5F4 Offset: 0x42E5F4 VA: 0x42E5F4 Slot: 11
	public virtual void Invoke(object state) { }

	// RVA: 0x42E9B0 Offset: 0x42E9B0 VA: 0x42E9B0 Slot: 12
	public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object) { }

	// RVA: 0x42E9DC Offset: 0x42E9DC VA: 0x42E9DC Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x9AF5C Offset: 0x9AF5C VA: 0x9AF5C
public sealed class WaitCallback : MulticastDelegate // TypeDefIndex: 933
{
	// Methods

	// RVA: 0x42AFB0 Offset: 0x42AFB0 VA: 0x42AFB0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x42E9E8 Offset: 0x42E9E8 VA: 0x42E9E8 Slot: 11
	public virtual void Invoke(object state) { }

	// RVA: 0x42C920 Offset: 0x42C920 VA: 0x42C920 Slot: 12
	public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object) { }

	// RVA: 0x42EDA4 Offset: 0x42EDA4 VA: 0x42EDA4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x9AF70 Offset: 0x9AF70 VA: 0x9AF70
public sealed class WaitOrTimerCallback : MulticastDelegate // TypeDefIndex: 934
{
	// Methods

	// RVA: 0x42F600 Offset: 0x42F600 VA: 0x42F600
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x42B1C0 Offset: 0x42B1C0 VA: 0x42B1C0 Slot: 11
	public virtual void Invoke(object state, bool timedOut) { }

	// RVA: 0x42F614 Offset: 0x42F614 VA: 0x42F614 Slot: 12
	public virtual IAsyncResult BeginInvoke(object state, bool timedOut, AsyncCallback callback, object object) { }

	// RVA: 0x42F6B4 Offset: 0x42F6B4 VA: 0x42F6B4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
public sealed class Action<T> : MulticastDelegate // TypeDefIndex: 935
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FAC98 Offset: 0x1FAC98 VA: 0x1FAC98
	|-Action<bool>..ctor
	|
	|-RVA: 0x1FAF78 Offset: 0x1FAF78 VA: 0x1FAF78
	|-Action<object>..ctor
	|-Action<Font>..ctor
	|-Action<SpriteAtlas>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual void Invoke(T obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FACAC Offset: 0x1FACAC VA: 0x1FACAC
	|-Action<bool>.Invoke
	|
	|-RVA: 0x1FAF8C Offset: 0x1FAF8C VA: 0x1FAF8C
	|-Action<object>.Invoke
	|-Action<AsyncOperation>.Invoke
	|-Action<Cubemap>.Invoke
	|-Action<Font>.Invoke
	|-Action<MetaData>.Invoke
	|-Action<SpriteAtlas>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T obj, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FAED0 Offset: 0x1FAED0 VA: 0x1FAED0
	|-Action<bool>.BeginInvoke
	|
	|-RVA: 0x1FB348 Offset: 0x1FB348 VA: 0x1FB348
	|-Action<object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FAF6C Offset: 0x1FAF6C VA: 0x1FAF6C
	|-Action<bool>.EndInvoke
	|
	|-RVA: 0x1FB374 Offset: 0x1FB374 VA: 0x1FB374
	|-Action<object>.EndInvoke
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AF84 Offset: 0x9AF84 VA: 0x9AF84
[Serializable]
public sealed class AppDomainInitializer : MulticastDelegate // TypeDefIndex: 936
{
	// Methods

	// RVA: 0x2BB294 Offset: 0x2BB294 VA: 0x2BB294
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x2BB2A8 Offset: 0x2BB2A8 VA: 0x2BB2A8 Slot: 11
	public virtual void Invoke(string[] args) { }

	// RVA: 0x2BB664 Offset: 0x2BB664 VA: 0x2BB664 Slot: 12
	public virtual IAsyncResult BeginInvoke(string[] args, AsyncCallback callback, object object) { }

	// RVA: 0x2BB690 Offset: 0x2BB690 VA: 0x2BB690 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AF98 Offset: 0x9AF98 VA: 0x9AF98
[Serializable]
public sealed class AssemblyLoadEventHandler : MulticastDelegate // TypeDefIndex: 937
{
	// Methods

	// RVA: 0x4732A8 Offset: 0x4732A8 VA: 0x4732A8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x4732BC Offset: 0x4732BC VA: 0x4732BC Slot: 11
	public virtual void Invoke(object sender, AssemblyLoadEventArgs args) { }

	// RVA: 0x473698 Offset: 0x473698 VA: 0x473698 Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, AssemblyLoadEventArgs args, AsyncCallback callback, object object) { }

	// RVA: 0x4736D0 Offset: 0x4736D0 VA: 0x4736D0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
public sealed class Comparison<T> : MulticastDelegate // TypeDefIndex: 938
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x56BE04 Offset: 0x56BE04 VA: 0x56BE04
	|-Comparison<int>..ctor
	|
	|-RVA: 0x56C14C Offset: 0x56C14C VA: 0x56C14C
	|-Comparison<object>..ctor
	|-Comparison<Graphic>..ctor
	|-Comparison<ICanvasElement>..ctor
	|
	|-RVA: 0x56C5B0 Offset: 0x56C5B0 VA: 0x56C5B0
	|-Comparison<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0x56C9D4 Offset: 0x56C9D4 VA: 0x56C9D4
	|-Comparison<CustomAttributeTypedArgument>..ctor
	|
	|-RVA: 0x56CD8C Offset: 0x56CD8C VA: 0x56CD8C
	|-Comparison<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0x56D144 Offset: 0x56D144 VA: 0x56D144
	|-Comparison<Color32>..ctor
	|
	|-RVA: 0x56D48C Offset: 0x56D48C VA: 0x56D48C
	|-Comparison<RaycastResult>..ctor
	|
	|-RVA: 0x56DF40 Offset: 0x56DF40 VA: 0x56DF40
	|-Comparison<RaycastHit>..ctor
	|
	|-RVA: 0x56E7AC Offset: 0x56E7AC VA: 0x56E7AC
	|-Comparison<UICharInfo>..ctor
	|
	|-RVA: 0x56EBD0 Offset: 0x56EBD0 VA: 0x56EBD0
	|-Comparison<UILineInfo>..ctor
	|
	|-RVA: 0x56F088 Offset: 0x56F088 VA: 0x56F088
	|-Comparison<UIVertex>..ctor
	|
	|-RVA: 0x56FA90 Offset: 0x56FA90 VA: 0x56FA90
	|-Comparison<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0x56FEB4 Offset: 0x56FEB4 VA: 0x56FEB4
	|-Comparison<Vector2>..ctor
	|
	|-RVA: 0x57026C Offset: 0x57026C VA: 0x57026C
	|-Comparison<Vector3>..ctor
	|
	|-RVA: 0x570690 Offset: 0x570690 VA: 0x570690
	|-Comparison<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual int Invoke(T x, T y) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x56BE18 Offset: 0x56BE18 VA: 0x56BE18
	|-Comparison<int>.Invoke
	|
	|-RVA: 0x56C160 Offset: 0x56C160 VA: 0x56C160
	|-Comparison<object>.Invoke
	|
	|-RVA: 0x56C5C4 Offset: 0x56C5C4 VA: 0x56C5C4
	|-Comparison<CustomAttributeNamedArgument>.Invoke
	|
	|-RVA: 0x56C9E8 Offset: 0x56C9E8 VA: 0x56C9E8
	|-Comparison<CustomAttributeTypedArgument>.Invoke
	|
	|-RVA: 0x56CDA0 Offset: 0x56CDA0 VA: 0x56CDA0
	|-Comparison<BeforeRenderHelper.OrderBlock>.Invoke
	|
	|-RVA: 0x56D158 Offset: 0x56D158 VA: 0x56D158
	|-Comparison<Color32>.Invoke
	|
	|-RVA: 0x56D4A0 Offset: 0x56D4A0 VA: 0x56D4A0
	|-Comparison<RaycastResult>.Invoke
	|
	|-RVA: 0x56DF54 Offset: 0x56DF54 VA: 0x56DF54
	|-Comparison<RaycastHit>.Invoke
	|
	|-RVA: 0x56E7C0 Offset: 0x56E7C0 VA: 0x56E7C0
	|-Comparison<UICharInfo>.Invoke
	|
	|-RVA: 0x56EBE4 Offset: 0x56EBE4 VA: 0x56EBE4
	|-Comparison<UILineInfo>.Invoke
	|
	|-RVA: 0x56F09C Offset: 0x56F09C VA: 0x56F09C
	|-Comparison<UIVertex>.Invoke
	|
	|-RVA: 0x56FAA4 Offset: 0x56FAA4 VA: 0x56FAA4
	|-Comparison<UnitySynchronizationContext.WorkRequest>.Invoke
	|
	|-RVA: 0x56FEC8 Offset: 0x56FEC8 VA: 0x56FEC8
	|-Comparison<Vector2>.Invoke
	|
	|-RVA: 0x570280 Offset: 0x570280 VA: 0x570280
	|-Comparison<Vector3>.Invoke
	|
	|-RVA: 0x5706A4 Offset: 0x5706A4 VA: 0x5706A4
	|-Comparison<Vector4>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T x, T y, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x56C064 Offset: 0x56C064 VA: 0x56C064
	|-Comparison<int>.BeginInvoke
	|
	|-RVA: 0x56C540 Offset: 0x56C540 VA: 0x56C540
	|-Comparison<object>.BeginInvoke
	|
	|-RVA: 0x56C8D4 Offset: 0x56C8D4 VA: 0x56C8D4
	|-Comparison<CustomAttributeNamedArgument>.BeginInvoke
	|
	|-RVA: 0x56CCA0 Offset: 0x56CCA0 VA: 0x56CCA0
	|-Comparison<CustomAttributeTypedArgument>.BeginInvoke
	|
	|-RVA: 0x56D058 Offset: 0x56D058 VA: 0x56D058
	|-Comparison<BeforeRenderHelper.OrderBlock>.BeginInvoke
	|
	|-RVA: 0x56D3A4 Offset: 0x56D3A4 VA: 0x56D3A4
	|-Comparison<Color32>.BeginInvoke
	|
	|-RVA: 0x56DD74 Offset: 0x56DD74 VA: 0x56DD74
	|-Comparison<RaycastResult>.BeginInvoke
	|
	|-RVA: 0x56E630 Offset: 0x56E630 VA: 0x56E630
	|-Comparison<RaycastHit>.BeginInvoke
	|
	|-RVA: 0x56EAD0 Offset: 0x56EAD0 VA: 0x56EAD0
	|-Comparison<UICharInfo>.BeginInvoke
	|
	|-RVA: 0x56EF78 Offset: 0x56EF78 VA: 0x56EF78
	|-Comparison<UILineInfo>.BeginInvoke
	|
	|-RVA: 0x56F994 Offset: 0x56F994 VA: 0x56F994
	|-Comparison<UIVertex>.BeginInvoke
	|
	|-RVA: 0x56FDB4 Offset: 0x56FDB4 VA: 0x56FDB4
	|-Comparison<UnitySynchronizationContext.WorkRequest>.BeginInvoke
	|
	|-RVA: 0x570180 Offset: 0x570180 VA: 0x570180
	|-Comparison<Vector2>.BeginInvoke
	|
	|-RVA: 0x570590 Offset: 0x570590 VA: 0x570590
	|-Comparison<Vector3>.BeginInvoke
	|
	|-RVA: 0x570A38 Offset: 0x570A38 VA: 0x570A38
	|-Comparison<Vector4>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual int EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x56C114 Offset: 0x56C114 VA: 0x56C114
	|-Comparison<int>.EndInvoke
	|
	|-RVA: 0x56C578 Offset: 0x56C578 VA: 0x56C578
	|-Comparison<object>.EndInvoke
	|
	|-RVA: 0x56C99C Offset: 0x56C99C VA: 0x56C99C
	|-Comparison<CustomAttributeNamedArgument>.EndInvoke
	|
	|-RVA: 0x56CD54 Offset: 0x56CD54 VA: 0x56CD54
	|-Comparison<CustomAttributeTypedArgument>.EndInvoke
	|
	|-RVA: 0x56D10C Offset: 0x56D10C VA: 0x56D10C
	|-Comparison<BeforeRenderHelper.OrderBlock>.EndInvoke
	|
	|-RVA: 0x56D454 Offset: 0x56D454 VA: 0x56D454
	|-Comparison<Color32>.EndInvoke
	|
	|-RVA: 0x56DF08 Offset: 0x56DF08 VA: 0x56DF08
	|-Comparison<RaycastResult>.EndInvoke
	|
	|-RVA: 0x56E774 Offset: 0x56E774 VA: 0x56E774
	|-Comparison<RaycastHit>.EndInvoke
	|
	|-RVA: 0x56EB98 Offset: 0x56EB98 VA: 0x56EB98
	|-Comparison<UICharInfo>.EndInvoke
	|
	|-RVA: 0x56F050 Offset: 0x56F050 VA: 0x56F050
	|-Comparison<UILineInfo>.EndInvoke
	|
	|-RVA: 0x56FA58 Offset: 0x56FA58 VA: 0x56FA58
	|-Comparison<UIVertex>.EndInvoke
	|
	|-RVA: 0x56FE7C Offset: 0x56FE7C VA: 0x56FE7C
	|-Comparison<UnitySynchronizationContext.WorkRequest>.EndInvoke
	|
	|-RVA: 0x570234 Offset: 0x570234 VA: 0x570234
	|-Comparison<Vector2>.EndInvoke
	|
	|-RVA: 0x570658 Offset: 0x570658 VA: 0x570658
	|-Comparison<Vector3>.EndInvoke
	|
	|-RVA: 0x570B10 Offset: 0x570B10 VA: 0x570B10
	|-Comparison<Vector4>.EndInvoke
	*/
}

// Namespace: System
public sealed class Converter<TInput, TOutput> : MulticastDelegate // TypeDefIndex: 939
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x570B48 Offset: 0x570B48 VA: 0x570B48
	|-Converter<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual TOutput Invoke(TInput input) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x570B5C Offset: 0x570B5C VA: 0x570B5C
	|-Converter<object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(TInput input, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x570F1C Offset: 0x570F1C VA: 0x570F1C
	|-Converter<object, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual TOutput EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x570F48 Offset: 0x570F48 VA: 0x570F48
	|-Converter<object, object>.EndInvoke
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AFAC Offset: 0x9AFAC VA: 0x9AFAC
[Serializable]
public sealed class EventHandler : MulticastDelegate // TypeDefIndex: 940
{
	// Methods

	// RVA: 0x300464 Offset: 0x300464 VA: 0x300464
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x300478 Offset: 0x300478 VA: 0x300478 Slot: 11
	public virtual void Invoke(object sender, EventArgs e) { }

	// RVA: 0x300854 Offset: 0x300854 VA: 0x300854 Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x30088C Offset: 0x30088C VA: 0x30088C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
public sealed class Predicate<T> : MulticastDelegate // TypeDefIndex: 941
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5732D8 Offset: 0x5732D8 VA: 0x5732D8
	|-Predicate<int>..ctor
	|
	|-RVA: 0x5735EC Offset: 0x5735EC VA: 0x5735EC
	|-Predicate<object>..ctor
	|-Predicate<Component>..ctor
	|-Predicate<BaseInvokableCall>..ctor
	|-Predicate<Toggle>..ctor
	|
	|-RVA: 0x573A24 Offset: 0x573A24 VA: 0x573A24
	|-Predicate<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0x573D9C Offset: 0x573D9C VA: 0x573D9C
	|-Predicate<CustomAttributeTypedArgument>..ctor
	|
	|-RVA: 0x5740D4 Offset: 0x5740D4 VA: 0x5740D4
	|-Predicate<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0x57440C Offset: 0x57440C VA: 0x57440C
	|-Predicate<Color32>..ctor
	|
	|-RVA: 0x574720 Offset: 0x574720 VA: 0x574720
	|-Predicate<RaycastResult>..ctor
	|
	|-RVA: 0x574E88 Offset: 0x574E88 VA: 0x574E88
	|-Predicate<UICharInfo>..ctor
	|
	|-RVA: 0x575200 Offset: 0x575200 VA: 0x575200
	|-Predicate<UILineInfo>..ctor
	|
	|-RVA: 0x5755AC Offset: 0x5755AC VA: 0x5755AC
	|-Predicate<UIVertex>..ctor
	|
	|-RVA: 0x575C24 Offset: 0x575C24 VA: 0x575C24
	|-Predicate<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0x575F9C Offset: 0x575F9C VA: 0x575F9C
	|-Predicate<Vector2>..ctor
	|
	|-RVA: 0x5762D4 Offset: 0x5762D4 VA: 0x5762D4
	|-Predicate<Vector3>..ctor
	|
	|-RVA: 0x57664C Offset: 0x57664C VA: 0x57664C
	|-Predicate<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual bool Invoke(T obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5732EC Offset: 0x5732EC VA: 0x5732EC
	|-Predicate<int>.Invoke
	|
	|-RVA: 0x573600 Offset: 0x573600 VA: 0x573600
	|-Predicate<object>.Invoke
	|
	|-RVA: 0x573A38 Offset: 0x573A38 VA: 0x573A38
	|-Predicate<CustomAttributeNamedArgument>.Invoke
	|
	|-RVA: 0x573DB0 Offset: 0x573DB0 VA: 0x573DB0
	|-Predicate<CustomAttributeTypedArgument>.Invoke
	|
	|-RVA: 0x5740E8 Offset: 0x5740E8 VA: 0x5740E8
	|-Predicate<BeforeRenderHelper.OrderBlock>.Invoke
	|
	|-RVA: 0x574420 Offset: 0x574420 VA: 0x574420
	|-Predicate<Color32>.Invoke
	|
	|-RVA: 0x574734 Offset: 0x574734 VA: 0x574734
	|-Predicate<RaycastResult>.Invoke
	|
	|-RVA: 0x574E9C Offset: 0x574E9C VA: 0x574E9C
	|-Predicate<UICharInfo>.Invoke
	|
	|-RVA: 0x575214 Offset: 0x575214 VA: 0x575214
	|-Predicate<UILineInfo>.Invoke
	|
	|-RVA: 0x5755C0 Offset: 0x5755C0 VA: 0x5755C0
	|-Predicate<UIVertex>.Invoke
	|
	|-RVA: 0x575C38 Offset: 0x575C38 VA: 0x575C38
	|-Predicate<UnitySynchronizationContext.WorkRequest>.Invoke
	|
	|-RVA: 0x575FB0 Offset: 0x575FB0 VA: 0x575FB0
	|-Predicate<Vector2>.Invoke
	|
	|-RVA: 0x5762E8 Offset: 0x5762E8 VA: 0x5762E8
	|-Predicate<Vector3>.Invoke
	|
	|-RVA: 0x576660 Offset: 0x576660 VA: 0x576660
	|-Predicate<Vector4>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T obj, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x573518 Offset: 0x573518 VA: 0x573518
	|-Predicate<int>.BeginInvoke
	|
	|-RVA: 0x5739C0 Offset: 0x5739C0 VA: 0x5739C0
	|-Predicate<object>.BeginInvoke
	|
	|-RVA: 0x573CC0 Offset: 0x573CC0 VA: 0x573CC0
	|-Predicate<CustomAttributeNamedArgument>.BeginInvoke
	|
	|-RVA: 0x573FFC Offset: 0x573FFC VA: 0x573FFC
	|-Predicate<CustomAttributeTypedArgument>.BeginInvoke
	|
	|-RVA: 0x574334 Offset: 0x574334 VA: 0x574334
	|-Predicate<BeforeRenderHelper.OrderBlock>.BeginInvoke
	|
	|-RVA: 0x57464C Offset: 0x57464C VA: 0x57464C
	|-Predicate<Color32>.BeginInvoke
	|
	|-RVA: 0x574D54 Offset: 0x574D54 VA: 0x574D54
	|-Predicate<RaycastResult>.BeginInvoke
	|
	|-RVA: 0x575124 Offset: 0x575124 VA: 0x575124
	|-Predicate<UICharInfo>.BeginInvoke
	|
	|-RVA: 0x5754CC Offset: 0x5754CC VA: 0x5754CC
	|-Predicate<UILineInfo>.BeginInvoke
	|
	|-RVA: 0x575B3C Offset: 0x575B3C VA: 0x575B3C
	|-Predicate<UIVertex>.BeginInvoke
	|
	|-RVA: 0x575EC0 Offset: 0x575EC0 VA: 0x575EC0
	|-Predicate<UnitySynchronizationContext.WorkRequest>.BeginInvoke
	|
	|-RVA: 0x5761FC Offset: 0x5761FC VA: 0x5761FC
	|-Predicate<Vector2>.BeginInvoke
	|
	|-RVA: 0x576570 Offset: 0x576570 VA: 0x576570
	|-Predicate<Vector3>.BeginInvoke
	|
	|-RVA: 0x576918 Offset: 0x576918 VA: 0x576918
	|-Predicate<Vector4>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5735B4 Offset: 0x5735B4 VA: 0x5735B4
	|-Predicate<int>.EndInvoke
	|
	|-RVA: 0x5739EC Offset: 0x5739EC VA: 0x5739EC
	|-Predicate<object>.EndInvoke
	|
	|-RVA: 0x573D64 Offset: 0x573D64 VA: 0x573D64
	|-Predicate<CustomAttributeNamedArgument>.EndInvoke
	|
	|-RVA: 0x57409C Offset: 0x57409C VA: 0x57409C
	|-Predicate<CustomAttributeTypedArgument>.EndInvoke
	|
	|-RVA: 0x5743D4 Offset: 0x5743D4 VA: 0x5743D4
	|-Predicate<BeforeRenderHelper.OrderBlock>.EndInvoke
	|
	|-RVA: 0x5746E8 Offset: 0x5746E8 VA: 0x5746E8
	|-Predicate<Color32>.EndInvoke
	|
	|-RVA: 0x574E50 Offset: 0x574E50 VA: 0x574E50
	|-Predicate<RaycastResult>.EndInvoke
	|
	|-RVA: 0x5751C8 Offset: 0x5751C8 VA: 0x5751C8
	|-Predicate<UICharInfo>.EndInvoke
	|
	|-RVA: 0x575574 Offset: 0x575574 VA: 0x575574
	|-Predicate<UILineInfo>.EndInvoke
	|
	|-RVA: 0x575BEC Offset: 0x575BEC VA: 0x575BEC
	|-Predicate<UIVertex>.EndInvoke
	|
	|-RVA: 0x575F64 Offset: 0x575F64 VA: 0x575F64
	|-Predicate<UnitySynchronizationContext.WorkRequest>.EndInvoke
	|
	|-RVA: 0x57629C Offset: 0x57629C VA: 0x57629C
	|-Predicate<Vector2>.EndInvoke
	|
	|-RVA: 0x576614 Offset: 0x576614 VA: 0x576614
	|-Predicate<Vector3>.EndInvoke
	|
	|-RVA: 0x5769C0 Offset: 0x5769C0 VA: 0x5769C0
	|-Predicate<Vector4>.EndInvoke
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AFC0 Offset: 0x9AFC0 VA: 0x9AFC0
[Serializable]
public sealed class ResolveEventHandler : MulticastDelegate // TypeDefIndex: 942
{
	// Methods

	// RVA: 0x1D6238 Offset: 0x1D6238 VA: 0x1D6238
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1D624C Offset: 0x1D624C VA: 0x1D624C Slot: 11
	public virtual Assembly Invoke(object sender, ResolveEventArgs args) { }

	// RVA: 0x1D662C Offset: 0x1D662C VA: 0x1D662C Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, ResolveEventArgs args, AsyncCallback callback, object object) { }

	// RVA: 0x1D6664 Offset: 0x1D6664 VA: 0x1D6664 Slot: 13
	public virtual Assembly EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x9AFD4 Offset: 0x9AFD4 VA: 0x9AFD4
[Serializable]
public sealed class UnhandledExceptionEventHandler : MulticastDelegate // TypeDefIndex: 943
{
	// Methods

	// RVA: 0x5C4078 Offset: 0x5C4078 VA: 0x5C4078
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5C408C Offset: 0x5C408C VA: 0x5C408C Slot: 11
	public virtual void Invoke(object sender, UnhandledExceptionEventArgs e) { }

	// RVA: 0x5C4468 Offset: 0x5C4468 VA: 0x5C4468 Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, UnhandledExceptionEventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x5C44A0 Offset: 0x5C44A0 VA: 0x5C44A0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x9AFE8 Offset: 0x9AFE8 VA: 0x9AFE8
internal class <PrivateImplementationDetails> // TypeDefIndex: 944
{
	// Fields
	internal static <PrivateImplementationDetails>.$ArrayType$56 $$field-0 /*Metadata offset 0x105411*/; // 0x0
	internal static <PrivateImplementationDetails>.$ArrayType$24 $$field-1 /*Metadata offset 0x105449*/; // 0x38
	internal static <PrivateImplementationDetails>.$ArrayType$24 $$field-2 /*Metadata offset 0x105461*/; // 0x50
	internal static <PrivateImplementationDetails>.$ArrayType$24 $$field-3 /*Metadata offset 0x105479*/; // 0x68
	internal static <PrivateImplementationDetails>.$ArrayType$24 $$field-4 /*Metadata offset 0x105491*/; // 0x80
	internal static <PrivateImplementationDetails>.$ArrayType$16 $$field-5 /*Metadata offset 0x1054A9*/; // 0x98
	internal static <PrivateImplementationDetails>.$ArrayType$16 $$field-6 /*Metadata offset 0x1054B9*/; // 0xA8
	internal static <PrivateImplementationDetails>.$ArrayType$3132 $$field-15 /*Metadata offset 0x1054C9*/; // 0xB8
	internal static <PrivateImplementationDetails>.$ArrayType$20 $$field-16 /*Metadata offset 0x106105*/; // 0xCF4
	internal static <PrivateImplementationDetails>.$ArrayType$32 $$field-17 /*Metadata offset 0x106119*/; // 0xD08
	internal static <PrivateImplementationDetails>.$ArrayType$48 $$field-18 /*Metadata offset 0x106139*/; // 0xD28
	internal static <PrivateImplementationDetails>.$ArrayType$64 $$field-19 /*Metadata offset 0x106169*/; // 0xD58
	internal static <PrivateImplementationDetails>.$ArrayType$64 $$field-20 /*Metadata offset 0x1061A9*/; // 0xD98
	internal static <PrivateImplementationDetails>.$ArrayType$64 $$field-21 /*Metadata offset 0x1061E9*/; // 0xDD8
	internal static <PrivateImplementationDetails>.$ArrayType$64 $$field-22 /*Metadata offset 0x106229*/; // 0xE18
	internal static <PrivateImplementationDetails>.$ArrayType$12 $$field-23 /*Metadata offset 0x106269*/; // 0xE58
	internal static <PrivateImplementationDetails>.$ArrayType$12 $$field-24 /*Metadata offset 0x106275*/; // 0xE64
	internal static <PrivateImplementationDetails>.$ArrayType$12 $$field-25 /*Metadata offset 0x106281*/; // 0xE70
	internal static <PrivateImplementationDetails>.$ArrayType$16 $$field-26 /*Metadata offset 0x10628D*/; // 0xE7C
	internal static <PrivateImplementationDetails>.$ArrayType$136 $$field-27 /*Metadata offset 0x10629D*/; // 0xE8C
	internal static <PrivateImplementationDetails>.$ArrayType$72 $$field-30 /*Metadata offset 0x106325*/; // 0xF14
	internal static <PrivateImplementationDetails>.$ArrayType$8 $$field-31 /*Metadata offset 0x10636D*/; // 0xF5C
	internal static <PrivateImplementationDetails>.$ArrayType$20 $$field-32 /*Metadata offset 0x106375*/; // 0xF64
	internal static <PrivateImplementationDetails>.$ArrayType$64 $$field-33 /*Metadata offset 0x106389*/; // 0xF78
	internal static <PrivateImplementationDetails>.$ArrayType$124 $$field-34 /*Metadata offset 0x1063C9*/; // 0xFB8
	internal static <PrivateImplementationDetails>.$ArrayType$32 $$field-35 /*Metadata offset 0x106445*/; // 0x1034
	internal static <PrivateImplementationDetails>.$ArrayType$96 $$field-36 /*Metadata offset 0x106465*/; // 0x1054
	internal static <PrivateImplementationDetails>.$ArrayType$2048 $$field-37 /*Metadata offset 0x1064C5*/; // 0x10B4
	internal static <PrivateImplementationDetails>.$ArrayType$56 $$field-38 /*Metadata offset 0x106CC5*/; // 0x18B4
	internal static <PrivateImplementationDetails>.$ArrayType$16 $$field-39 /*Metadata offset 0x106CFD*/; // 0x18EC
	internal static <PrivateImplementationDetails>.$ArrayType$48 $$field-40 /*Metadata offset 0x106D0D*/; // 0x18FC
	internal static <PrivateImplementationDetails>.$ArrayType$2048 $$field-41 /*Metadata offset 0x106D3D*/; // 0x192C
	internal static <PrivateImplementationDetails>.$ArrayType$2048 $$field-42 /*Metadata offset 0x10753D*/; // 0x212C
	internal static <PrivateImplementationDetails>.$ArrayType$256 $$field-43 /*Metadata offset 0x107D3D*/; // 0x292C
	internal static <PrivateImplementationDetails>.$ArrayType$256 $$field-44 /*Metadata offset 0x107E3D*/; // 0x2A2C
	internal static <PrivateImplementationDetails>.$ArrayType$120 $$field-45 /*Metadata offset 0x107F3D*/; // 0x2B2C
	internal static <PrivateImplementationDetails>.$ArrayType$256 $$field-46 /*Metadata offset 0x107FB5*/; // 0x2BA4
	internal static <PrivateImplementationDetails>.$ArrayType$256 $$field-47 /*Metadata offset 0x1080B5*/; // 0x2CA4
	internal static <PrivateImplementationDetails>.$ArrayType$1024 $$field-48 /*Metadata offset 0x1081B5*/; // 0x2DA4
	internal static <PrivateImplementationDetails>.$ArrayType$1024 $$field-49 /*Metadata offset 0x1085B5*/; // 0x31A4
	internal static <PrivateImplementationDetails>.$ArrayType$1024 $$field-50 /*Metadata offset 0x1089B5*/; // 0x35A4
	internal static <PrivateImplementationDetails>.$ArrayType$1024 $$field-51 /*Metadata offset 0x108DB5*/; // 0x39A4
	internal static <PrivateImplementationDetails>.$ArrayType$1024 $$field-52 /*Metadata offset 0x1091B5*/; // 0x3DA4
	internal static <PrivateImplementationDetails>.$ArrayType$1024 $$field-53 /*Metadata offset 0x1095B5*/; // 0x41A4
	internal static <PrivateImplementationDetails>.$ArrayType$1024 $$field-54 /*Metadata offset 0x1099B5*/; // 0x45A4
	internal static <PrivateImplementationDetails>.$ArrayType$1024 $$field-55 /*Metadata offset 0x109DB5*/; // 0x49A4
	internal static <PrivateImplementationDetails>.$ArrayType$256 $$field-56 /*Metadata offset 0x10A1B5*/; // 0x4DA4
	internal static <PrivateImplementationDetails>.$ArrayType$640 $$field-57 /*Metadata offset 0x10A2B5*/; // 0x4EA4
	internal static <PrivateImplementationDetails>.$ArrayType$12 $$field-60 /*Metadata offset 0x10A535*/; // 0x5124
	internal static <PrivateImplementationDetails>.$ArrayType$128 $$field-62 /*Metadata offset 0x10A541*/; // 0x5130
	internal static <PrivateImplementationDetails>.$ArrayType$256 $$field-63 /*Metadata offset 0x10A5C1*/; // 0x51B0
	internal static <PrivateImplementationDetails>.$ArrayType$52 $$field-64 /*Metadata offset 0x10A6C1*/; // 0x52B0
	internal static <PrivateImplementationDetails>.$ArrayType$52 $$field-65 /*Metadata offset 0x10A6F5*/; // 0x52E4
}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$56 // TypeDefIndex: 945
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$24 // TypeDefIndex: 946
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$16 // TypeDefIndex: 947
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$120 // TypeDefIndex: 948
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$3132 // TypeDefIndex: 949
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$20 // TypeDefIndex: 950
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$32 // TypeDefIndex: 951
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$48 // TypeDefIndex: 952
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$64 // TypeDefIndex: 953
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$12 // TypeDefIndex: 954
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$136 // TypeDefIndex: 955
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$8 // TypeDefIndex: 956
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$72 // TypeDefIndex: 957
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$124 // TypeDefIndex: 958
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$96 // TypeDefIndex: 959
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$2048 // TypeDefIndex: 960
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$256 // TypeDefIndex: 961
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$1024 // TypeDefIndex: 962
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$640 // TypeDefIndex: 963
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$128 // TypeDefIndex: 964
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$52 // TypeDefIndex: 965
{}

// Namespace: System
internal class __Il2CppComObject // TypeDefIndex: 966
{
	// Methods

	// RVA: 0x5C6204 Offset: 0x5C6204 VA: 0x5C6204 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System
internal sealed class __Il2CppComDelegate : __Il2CppComObject // TypeDefIndex: 967
{
	// Methods

	// RVA: 0x5C6200 Offset: 0x5C6200 VA: 0x5C6200 Slot: 1
	protected override void Finalize() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 968
{}

// Namespace: 
internal sealed class Locale // TypeDefIndex: 969
{
	// Methods

	// RVA: 0x324BD0 Offset: 0x324BD0 VA: 0x324BD0
	public static string GetText(string msg) { }

	// RVA: 0x324BD4 Offset: 0x324BD4 VA: 0x324BD4
	public static string GetText(string fmt, object[] args) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x9E588 Offset: 0x9E588 VA: 0x9E588
internal class MonoTODOAttribute : Attribute // TypeDefIndex: 970
{
	// Fields
	private string comment; // 0x8

	// Methods

	// RVA: 0x329868 Offset: 0x329868 VA: 0x329868
	public void .ctor() { }

	// RVA: 0x329870 Offset: 0x329870 VA: 0x329870
	public void .ctor(string comment) { }
}

// Namespace: System.Collections.Generic
[ComVisibleAttribute] // RVA: 0x9E5BC Offset: 0x9E5BC VA: 0x9E5BC
[Serializable]
public class Stack<T> : ICollection, IEnumerable, IEnumerable<T> // TypeDefIndex: 971
{
	// Fields
	private T[] _array; // 0x0
	private int _size; // 0x0
	private int _version; // 0x0

	// Properties
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	public int Count { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x590C64 Offset: 0x590C64 VA: 0x590C64
	|-Stack<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 5
	private bool System.Collections.ICollection.get_IsSynchronized() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x590C90 Offset: 0x590C90 VA: 0x590C90
	|-Stack<object>.System.Collections.ICollection.get_IsSynchronized
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private object System.Collections.ICollection.get_SyncRoot() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x590C98 Offset: 0x590C98 VA: 0x590C98
	|-Stack<object>.System.Collections.ICollection.get_SyncRoot
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private void System.Collections.ICollection.CopyTo(Array dest, int idx) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x590C9C Offset: 0x590C9C VA: 0x590C9C
	|-Stack<object>.System.Collections.ICollection.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 9
	private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x590DEC Offset: 0x590DEC VA: 0x590DEC
	|-Stack<object>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x590E70 Offset: 0x590E70 VA: 0x590E70
	|-Stack<object>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1
	public T Peek() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x590EF4 Offset: 0x590EF4 VA: 0x590EF4
	|-Stack<object>.Peek
	*/

	// RVA: -1 Offset: -1
	public T Pop() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x590FCC Offset: 0x590FCC VA: 0x590FCC
	|-Stack<object>.Pop
	*/

	// RVA: -1 Offset: -1
	public void Push(T t) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5910F8 Offset: 0x5910F8 VA: 0x5910F8
	|-Stack<object>.Push
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x591194 Offset: 0x591194 VA: 0x591194
	|-Stack<object>.get_Count
	*/

	// RVA: -1 Offset: -1
	public Stack.Enumerator<T> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x59119C Offset: 0x59119C VA: 0x59119C
	|-Stack<object>.GetEnumerator
	*/
}

// Namespace: 
[Serializable]
public struct Stack.Enumerator<T> : IEnumerator, IDisposable, IEnumerator<T> // TypeDefIndex: 972
{
	// Fields
	private Stack<T> parent; // 0x0
	private int idx; // 0x0
	private int _version; // 0x0

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(Stack<T> t) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0C5C Offset: 0xF0C5C VA: 0xF0C5C
	|-Stack.Enumerator<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private void System.Collections.IEnumerator.Reset() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0C94 Offset: 0xF0C94 VA: 0xF0C94
	|-Stack.Enumerator<object>.System.Collections.IEnumerator.Reset
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0C9C Offset: 0xF0C9C VA: 0xF0C9C
	|-Stack.Enumerator<object>.System.Collections.IEnumerator.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0CA4 Offset: 0xF0CA4 VA: 0xF0CA4
	|-Stack.Enumerator<object>.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0CB0 Offset: 0xF0CB0 VA: 0xF0CB0
	|-Stack.Enumerator<object>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public T get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0CB8 Offset: 0xF0CB8 VA: 0xF0CB8
	|-Stack.Enumerator<object>.get_Current
	*/
}

// Namespace: System.Collections.Specialized
[DefaultMemberAttribute] // RVA: 0x9E5D0 Offset: 0x9E5D0 VA: 0x9E5D0
[Serializable]
public class HybridDictionary : ICollection, IDictionary, IEnumerable // TypeDefIndex: 973
{
	// Fields
	private bool caseInsensitive; // 0x8
	private Hashtable hashtable; // 0xC
	private ListDictionary list; // 0x10

	// Properties
	private IDictionary inner { get; }
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object Item { get; set; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x324C60 Offset: 0x324C60 VA: 0x324C60
	public void .ctor() { }

	// RVA: 0x324C6C Offset: 0x324C6C VA: 0x324C6C
	public void .ctor(int initialSize, bool caseInsensitive) { }

	// RVA: 0x324E04 Offset: 0x324E04 VA: 0x324E04 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x324EE8 Offset: 0x324EE8 VA: 0x324EE8
	private IDictionary get_inner() { }

	// RVA: 0x324EFC Offset: 0x324EFC VA: 0x324EFC Slot: 4
	public int get_Count() { }

	// RVA: 0x324FDC Offset: 0x324FDC VA: 0x324FDC Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x324FE4 Offset: 0x324FE4 VA: 0x324FE4 Slot: 9
	public object get_Item(object key) { }

	// RVA: 0x3250CC Offset: 0x3250CC VA: 0x3250CC Slot: 10
	public void set_Item(object key, object value) { }

	// RVA: 0x325344 Offset: 0x325344 VA: 0x325344 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x325348 Offset: 0x325348 VA: 0x325348 Slot: 11
	public void Add(object key, object value) { }

	// RVA: 0x32546C Offset: 0x32546C VA: 0x32546C Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0x324E08 Offset: 0x324E08 VA: 0x324E08 Slot: 12
	public IDictionaryEnumerator GetEnumerator() { }

	// RVA: 0x32555C Offset: 0x32555C VA: 0x32555C Slot: 13
	public void Remove(object key) { }

	// RVA: 0x3251F0 Offset: 0x3251F0 VA: 0x3251F0
	private void Switch() { }
}

// Namespace: System.Collections.Specialized
[DefaultMemberAttribute] // RVA: 0x9E604 Offset: 0x9E604 VA: 0x9E604
[Serializable]
public class ListDictionary : ICollection, IDictionary, IEnumerable // TypeDefIndex: 974
{
	// Fields
	private int count; // 0x8
	private int version; // 0xC
	private ListDictionary.DictionaryNode head; // 0x10
	private IComparer comparer; // 0x14

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }
	public object Item { get; set; }

	// Methods

	// RVA: 0x325660 Offset: 0x325660 VA: 0x325660
	public void .ctor() { }

	// RVA: 0x324DD4 Offset: 0x324DD4 VA: 0x324DD4
	public void .ctor(IComparer comparer) { }

	// RVA: 0x325684 Offset: 0x325684 VA: 0x325684 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x325744 Offset: 0x325744 VA: 0x325744
	private ListDictionary.DictionaryNode FindEntry(object key) { }

	// RVA: 0x32591C Offset: 0x32591C VA: 0x32591C
	private ListDictionary.DictionaryNode FindEntry(object key, out ListDictionary.DictionaryNode prev) { }

	// RVA: 0x325B20 Offset: 0x325B20 VA: 0x325B20
	private void AddImpl(object key, object value, ListDictionary.DictionaryNode prev) { }

	// RVA: 0x325C10 Offset: 0x325C10 VA: 0x325C10 Slot: 4
	public int get_Count() { }

	// RVA: 0x325C18 Offset: 0x325C18 VA: 0x325C18 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x325C20 Offset: 0x325C20 VA: 0x325C20 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x325C24 Offset: 0x325C24 VA: 0x325C24 Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0x32610C Offset: 0x32610C VA: 0x32610C Slot: 9
	public object get_Item(object key) { }

	// RVA: 0x326128 Offset: 0x326128 VA: 0x326128 Slot: 10
	public void set_Item(object key, object value) { }

	// RVA: 0x326180 Offset: 0x326180 VA: 0x326180 Slot: 11
	public void Add(object key, object value) { }

	// RVA: 0x325644 Offset: 0x325644 VA: 0x325644 Slot: 14
	public void Clear() { }

	// RVA: 0x32609C Offset: 0x32609C VA: 0x32609C Slot: 12
	public IDictionaryEnumerator GetEnumerator() { }

	// RVA: 0x326278 Offset: 0x326278 VA: 0x326278 Slot: 13
	public void Remove(object key) { }
}

// Namespace: 
[Serializable]
private class ListDictionary.DictionaryNode // TypeDefIndex: 975
{
	// Fields
	public object key; // 0x8
	public object value; // 0xC
	public ListDictionary.DictionaryNode next; // 0x10

	// Methods

	// RVA: 0x325BE0 Offset: 0x325BE0 VA: 0x325BE0
	public void .ctor(object key, object value, ListDictionary.DictionaryNode next) { }
}

// Namespace: 
private class ListDictionary.DictionaryNodeEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 976
{
	// Fields
	private ListDictionary dict; // 0x8
	private bool isAtStart; // 0xC
	private ListDictionary.DictionaryNode current; // 0x10
	private int version; // 0x14

	// Properties
	public object Current { get; }
	private ListDictionary.DictionaryNode DictionaryNode { get; }
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }

	// Methods

	// RVA: 0x3256F4 Offset: 0x3256F4 VA: 0x3256F4
	public void .ctor(ListDictionary dict) { }

	// RVA: 0x326300 Offset: 0x326300 VA: 0x326300
	private void FailFast() { }

	// RVA: 0x3263C4 Offset: 0x3263C4 VA: 0x3263C4 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x3262DC Offset: 0x3262DC VA: 0x3262DC Slot: 6
	public void Reset() { }

	// RVA: 0x326438 Offset: 0x326438 VA: 0x326438 Slot: 4
	public object get_Current() { }

	// RVA: 0x326524 Offset: 0x326524 VA: 0x326524
	private ListDictionary.DictionaryNode get_DictionaryNode() { }

	// RVA: 0x3264BC Offset: 0x3264BC VA: 0x3264BC Slot: 7
	public DictionaryEntry get_Entry() { }

	// RVA: 0x3265D8 Offset: 0x3265D8 VA: 0x3265D8 Slot: 8
	public object get_Key() { }

	// RVA: 0x326600 Offset: 0x326600 VA: 0x326600 Slot: 9
	public object get_Value() { }
}

// Namespace: System.Collections.Specialized
[Serializable]
public abstract class NameObjectCollectionBase : ICollection, IDeserializationCallback, IEnumerable, ISerializable // TypeDefIndex: 977
{
	// Fields
	private Hashtable m_ItemsContainer; // 0x8
	private NameObjectCollectionBase._Item m_NullKeyItem; // 0xC
	private ArrayList m_ItemsArray; // 0x10
	private IHashCodeProvider m_hashprovider; // 0x14
	private IComparer m_comparer; // 0x18
	private int m_defCapacity; // 0x1C
	private bool m_readonly; // 0x20
	private SerializationInfo infoCopy; // 0x24
	private NameObjectCollectionBase.KeysCollection keyscoll; // 0x28
	private IEqualityComparer equality_comparer; // 0x2C

	// Properties
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	public virtual NameObjectCollectionBase.KeysCollection Keys { get; }
	public virtual int Count { get; }
	protected bool IsReadOnly { get; }

	// Methods

	// RVA: 0x326628 Offset: 0x326628 VA: 0x326628
	protected void .ctor() { }

	// RVA: 0x326804 Offset: 0x326804 VA: 0x326804
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x326824 Offset: 0x326824 VA: 0x326824 Slot: 5
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x32682C Offset: 0x32682C VA: 0x32682C Slot: 6
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x326830 Offset: 0x326830 VA: 0x326830 Slot: 7
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x326708 Offset: 0x326708 VA: 0x326708
	private void Init() { }

	// RVA: 0x32692C Offset: 0x32692C VA: 0x32692C Slot: 11
	public virtual NameObjectCollectionBase.KeysCollection get_Keys() { }

	// RVA: 0x3269D0 Offset: 0x3269D0 VA: 0x3269D0 Slot: 12
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x326A74 Offset: 0x326A74 VA: 0x326A74 Slot: 13
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x327260 Offset: 0x327260 VA: 0x327260 Slot: 14
	public virtual int get_Count() { }

	// RVA: 0x327294 Offset: 0x327294 VA: 0x327294 Slot: 15
	public virtual void OnDeserialization(object sender) { }

	// RVA: 0x327AD0 Offset: 0x327AD0 VA: 0x327AD0
	protected bool get_IsReadOnly() { }

	// RVA: 0x327948 Offset: 0x327948 VA: 0x327948
	protected void BaseAdd(string name, object value) { }

	// RVA: 0x327B00 Offset: 0x327B00 VA: 0x327B00
	protected object BaseGet(int index) { }

	// RVA: 0x327C98 Offset: 0x327C98 VA: 0x327C98
	protected object BaseGet(string name) { }

	// RVA: 0x327DE8 Offset: 0x327DE8 VA: 0x327DE8
	protected string BaseGetKey(int index) { }

	[MonoTODOAttribute] // RVA: 0x9EBE4 Offset: 0x9EBE4 VA: 0x9EBE4
	// RVA: 0x327CB4 Offset: 0x327CB4 VA: 0x327CB4
	private NameObjectCollectionBase._Item FindFirstMatchedItem(string name) { }
}

// Namespace: 
internal class NameObjectCollectionBase._Item // TypeDefIndex: 978
{
	// Fields
	public string key; // 0x8
	public object value; // 0xC

	// Methods

	// RVA: 0x327AD8 Offset: 0x327AD8 VA: 0x327AD8
	public void .ctor(string key, object value) { }
}

// Namespace: 
[Serializable]
internal class NameObjectCollectionBase._KeysEnumerator : IEnumerator // TypeDefIndex: 979
{
	// Fields
	private NameObjectCollectionBase m_collection; // 0x8
	private int m_position; // 0xC

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x326A4C Offset: 0x326A4C VA: 0x326A4C
	internal void .ctor(NameObjectCollectionBase collection) { }

	// RVA: 0x328528 Offset: 0x328528 VA: 0x328528 Slot: 4
	public object get_Current() { }

	// RVA: 0x328614 Offset: 0x328614 VA: 0x328614 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x32851C Offset: 0x32851C VA: 0x32851C Slot: 6
	public void Reset() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0x9E638 Offset: 0x9E638 VA: 0x9E638
[Serializable]
public class NameObjectCollectionBase.KeysCollection : ICollection, IEnumerable // TypeDefIndex: 980
{
	// Fields
	private NameObjectCollectionBase m_collection; // 0x8

	// Properties
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	public int Count { get; }

	// Methods

	// RVA: 0x3269B0 Offset: 0x3269B0 VA: 0x3269B0
	internal void .ctor(NameObjectCollectionBase collection) { }

	// RVA: 0x327F80 Offset: 0x327F80 VA: 0x327F80 Slot: 7
	private void System.Collections.ICollection.CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x328458 Offset: 0x328458 VA: 0x328458 Slot: 5
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x328460 Offset: 0x328460 VA: 0x328460 Slot: 6
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x328468 Offset: 0x328468 VA: 0x328468 Slot: 4
	public int get_Count() { }

	// RVA: 0x32849C Offset: 0x32849C VA: 0x32849C Slot: 8
	public IEnumerator GetEnumerator() { }
}

// Namespace: System.Collections.Specialized
[DefaultMemberAttribute] // RVA: 0x9E66C Offset: 0x9E66C VA: 0x9E66C
[Serializable]
public class NameValueCollection : NameObjectCollectionBase // TypeDefIndex: 981
{
	// Fields
	private string[] cachedAllKeys; // 0x30
	private string[] cachedAll; // 0x34

	// Methods

	// RVA: 0x328664 Offset: 0x328664 VA: 0x328664
	public void .ctor() { }

	// RVA: 0x328668 Offset: 0x328668 VA: 0x328668
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x328688 Offset: 0x328688 VA: 0x328688 Slot: 16
	public virtual void Add(string name, string val) { }

	// RVA: 0x328884 Offset: 0x328884 VA: 0x328884 Slot: 17
	public virtual string Get(int index) { }

	// RVA: 0x32898C Offset: 0x32898C VA: 0x32898C
	private static string AsSingleString(ArrayList values) { }

	// RVA: 0x328EC4 Offset: 0x328EC4 VA: 0x328EC4 Slot: 18
	public virtual string GetKey(int index) { }

	// RVA: 0x328874 Offset: 0x328874 VA: 0x328874
	protected void InvalidateCachedArrays() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0x9E6A0 Offset: 0x9E6A0 VA: 0x9E6A0
public sealed class EditorBrowsableAttribute : Attribute // TypeDefIndex: 982
{
	// Fields
	private EditorBrowsableState state; // 0x8

	// Properties
	public EditorBrowsableState State { get; }

	// Methods

	// RVA: 0x328EC8 Offset: 0x328EC8 VA: 0x328EC8
	public void .ctor(EditorBrowsableState state) { }

	// RVA: 0x328EE8 Offset: 0x328EE8 VA: 0x328EE8
	public EditorBrowsableState get_State() { }

	// RVA: 0x328EF0 Offset: 0x328EF0 VA: 0x328EF0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x328F8C Offset: 0x328F8C VA: 0x328F8C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.ComponentModel
public enum EditorBrowsableState // TypeDefIndex: 983
{
	// Fields
	public int value__; // 0x0
	public const EditorBrowsableState Always = 0;
	public const EditorBrowsableState Never = 1;
	public const EditorBrowsableState Advanced = 2;
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0x9E6B4 Offset: 0x9E6B4 VA: 0x9E6B4
public class TypeConverter // TypeDefIndex: 984
{}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0x9E6C8 Offset: 0x9E6C8 VA: 0x9E6C8
[AttributeUsageAttribute] // RVA: 0x9E6C8 Offset: 0x9E6C8 VA: 0x9E6C8
public sealed class TypeConverterAttribute : Attribute // TypeDefIndex: 985
{
	// Fields
	public static readonly TypeConverterAttribute Default; // 0x0
	private string converter_type; // 0x8

	// Properties
	public string ConverterTypeName { get; }

	// Methods

	// RVA: 0x329010 Offset: 0x329010 VA: 0x329010
	public void .ctor() { }

	// RVA: 0x3290B0 Offset: 0x3290B0 VA: 0x3290B0
	public void .ctor(Type type) { }

	// RVA: 0x3290F4 Offset: 0x3290F4 VA: 0x3290F4
	private static void .cctor() { }

	// RVA: 0x329164 Offset: 0x329164 VA: 0x329164 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x329228 Offset: 0x329228 VA: 0x329228 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x329220 Offset: 0x329220 VA: 0x329220
	public string get_ConverterTypeName() { }
}

// Namespace: System.Diagnostics
public class Stopwatch // TypeDefIndex: 986
{
	// Fields
	public static readonly long Frequency; // 0x0
	public static readonly bool IsHighResolution; // 0x8
	private long elapsed; // 0x8
	private long started; // 0x10
	private bool is_running; // 0x18

	// Properties
	public TimeSpan Elapsed { get; }
	public long ElapsedMilliseconds { get; }
	public long ElapsedTicks { get; }

	// Methods

	// RVA: 0x329364 Offset: 0x329364 VA: 0x329364
	public void .ctor() { }

	// RVA: 0x32936C Offset: 0x32936C VA: 0x32936C
	private static void .cctor() { }

	// RVA: 0x3293EC Offset: 0x3293EC VA: 0x3293EC
	public static long GetTimestamp() { }

	// RVA: 0x3293F0 Offset: 0x3293F0 VA: 0x3293F0
	public TimeSpan get_Elapsed() { }

	// RVA: 0x329650 Offset: 0x329650 VA: 0x329650
	public long get_ElapsedMilliseconds() { }

	// RVA: 0x3295A0 Offset: 0x3295A0 VA: 0x3295A0
	public long get_ElapsedTicks() { }

	// RVA: 0x3297D4 Offset: 0x3297D4 VA: 0x3297D4
	public void Start() { }
}

// Namespace: System.Net.Security
public enum AuthenticationLevel // TypeDefIndex: 987
{
	// Fields
	public int value__; // 0x0
	public const AuthenticationLevel None = 0;
	public const AuthenticationLevel MutualAuthRequested = 1;
	public const AuthenticationLevel MutualAuthRequired = 2;
}

// Namespace: System.Net.Security
[FlagsAttribute] // RVA: 0x9E700 Offset: 0x9E700 VA: 0x9E700
public enum SslPolicyErrors // TypeDefIndex: 988
{
	// Fields
	public int value__; // 0x0
	public const SslPolicyErrors None = 0;
	public const SslPolicyErrors RemoteCertificateNotAvailable = 1;
	public const SslPolicyErrors RemoteCertificateNameMismatch = 2;
	public const SslPolicyErrors RemoteCertificateChainErrors = 4;
}

// Namespace: System.Net.Sockets
public enum AddressFamily // TypeDefIndex: 989
{
	// Fields
	public int value__; // 0x0
	public const AddressFamily Unknown = -1;
	public const AddressFamily Unspecified = 0;
	public const AddressFamily Unix = 1;
	public const AddressFamily InterNetwork = 2;
	public const AddressFamily ImpLink = 3;
	public const AddressFamily Pup = 4;
	public const AddressFamily Chaos = 5;
	public const AddressFamily NS = 6;
	public const AddressFamily Ipx = 6;
	public const AddressFamily Iso = 7;
	public const AddressFamily Osi = 7;
	public const AddressFamily Ecma = 8;
	public const AddressFamily DataKit = 9;
	public const AddressFamily Ccitt = 10;
	public const AddressFamily Sna = 11;
	public const AddressFamily DecNet = 12;
	public const AddressFamily DataLink = 13;
	public const AddressFamily Lat = 14;
	public const AddressFamily HyperChannel = 15;
	public const AddressFamily AppleTalk = 16;
	public const AddressFamily NetBios = 17;
	public const AddressFamily VoiceView = 18;
	public const AddressFamily FireFox = 19;
	public const AddressFamily Banyan = 21;
	public const AddressFamily Atm = 22;
	public const AddressFamily InterNetworkV6 = 23;
	public const AddressFamily Cluster = 24;
	public const AddressFamily Ieee12844 = 25;
	public const AddressFamily Irda = 26;
	public const AddressFamily NetworkDesigners = 28;
	public const AddressFamily Max = 29;
}

// Namespace: System.Net
internal class DefaultCertificatePolicy : ICertificatePolicy // TypeDefIndex: 990
{
	// Methods

	// RVA: 0x329890 Offset: 0x329890 VA: 0x329890
	public void .ctor() { }

	// RVA: 0x329898 Offset: 0x329898 VA: 0x329898 Slot: 4
	public bool CheckValidationResult(ServicePoint point, X509Certificate certificate, WebRequest request, int certificateProblem) { }
}

// Namespace: System.Net
[Serializable]
public class FileWebRequest : WebRequest, ISerializable // TypeDefIndex: 991
{
	// Fields
	private Uri uri; // 0x10
	private WebHeaderCollection webHeaders; // 0x14
	private string connectionGroup; // 0x18
	private long contentLength; // 0x20
	private FileAccess fileAccess; // 0x28
	private string method; // 0x2C
	private IWebProxy proxy; // 0x30
	private bool preAuthenticate; // 0x34
	private int timeout; // 0x38

	// Methods

	// RVA: 0x3299CC Offset: 0x3299CC VA: 0x3299CC
	internal void .ctor(Uri uri) { }

	[ObsoleteAttribute] // RVA: 0x9EBF4 Offset: 0x9EBF4 VA: 0x9EBF4
	// RVA: 0x329AB4 Offset: 0x329AB4 VA: 0x329AB4
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x32A004 Offset: 0x32A004 VA: 0x32A004 Slot: 6
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x32A02C Offset: 0x32A02C VA: 0x32A02C Slot: 7
	protected override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
}

// Namespace: System.Net
internal class FileWebRequestCreator : IWebRequestCreate // TypeDefIndex: 992
{
	// Methods

	// RVA: 0x32A330 Offset: 0x32A330 VA: 0x32A330
	internal void .ctor() { }

	// RVA: 0x32A338 Offset: 0x32A338 VA: 0x32A338 Slot: 4
	public WebRequest Create(Uri uri) { }
}

// Namespace: System.Net
internal class FtpRequestCreator : IWebRequestCreate // TypeDefIndex: 993
{
	// Methods

	// RVA: 0x32A3A8 Offset: 0x32A3A8 VA: 0x32A3A8
	public void .ctor() { }

	// RVA: 0x32A3B0 Offset: 0x32A3B0 VA: 0x32A3B0 Slot: 4
	public WebRequest Create(Uri uri) { }
}

// Namespace: System.Net
public sealed class FtpWebRequest : WebRequest // TypeDefIndex: 994
{
	// Fields
	private Uri requestUri; // 0x10
	private IWebProxy proxy; // 0x14
	private int timeout; // 0x18
	private int rwTimeout; // 0x1C
	private bool binary; // 0x20
	private bool usePassive; // 0x21
	private string method; // 0x24
	private object locker; // 0x28
	private static readonly string[] supportedCommands; // 0x0
	private RemoteCertificateValidationCallback callback; // 0x2C
	[CompilerGeneratedAttribute] // RVA: 0x9EB24 Offset: 0x9EB24 VA: 0x9EB24
	private static RemoteCertificateValidationCallback <>f__am$cache1C; // 0x4

	// Methods

	// RVA: 0x32A420 Offset: 0x32A420 VA: 0x32A420
	internal void .ctor(Uri uri) { }

	// RVA: 0x32A6A4 Offset: 0x32A6A4 VA: 0x32A6A4
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0x9EC2C Offset: 0x9EC2C VA: 0x9EC2C
	// RVA: 0x32ACAC Offset: 0x32ACAC VA: 0x32ACAC
	private static bool <callback>m__B(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { }
}

// Namespace: System.Net
[ObsoleteAttribute] // RVA: 0x9E710 Offset: 0x9E710 VA: 0x9E710
public class GlobalProxySelection // TypeDefIndex: 995
{
	// Properties
	public static IWebProxy Select { get; }

	// Methods

	// RVA: 0x32A62C Offset: 0x32A62C VA: 0x32A62C
	public static IWebProxy get_Select() { }
}

// Namespace: System.Net
internal class HttpRequestCreator : IWebRequestCreate // TypeDefIndex: 996
{
	// Methods

	// RVA: 0x32B4A4 Offset: 0x32B4A4 VA: 0x32B4A4
	internal void .ctor() { }

	// RVA: 0x32B4AC Offset: 0x32B4AC VA: 0x32B4AC Slot: 4
	public WebRequest Create(Uri uri) { }
}

// Namespace: System.Net
public class HttpVersion // TypeDefIndex: 997
{
	// Fields
	public static readonly Version Version10; // 0x0
	public static readonly Version Version11; // 0x4

	// Methods

	// RVA: 0x32B6EC Offset: 0x32B6EC VA: 0x32B6EC
	private static void .cctor() { }
}

// Namespace: System.Net
[Serializable]
public class HttpWebRequest : WebRequest, ISerializable // TypeDefIndex: 998
{
	// Fields
	private Uri requestUri; // 0x10
	private Uri actualUri; // 0x14
	private bool hostChanged; // 0x18
	private bool allowAutoRedirect; // 0x19
	private bool allowBuffering; // 0x1A
	private X509CertificateCollection certificates; // 0x1C
	private string connectionGroup; // 0x20
	private long contentLength; // 0x28
	private WebHeaderCollection webHeaders; // 0x30
	private bool keepAlive; // 0x34
	private int maxAutoRedirect; // 0x38
	private string mediaType; // 0x3C
	private string method; // 0x40
	private string initialMethod; // 0x44
	private bool pipelined; // 0x48
	private Version version; // 0x4C
	private IWebProxy proxy; // 0x50
	private bool sendChunked; // 0x54
	private ServicePoint servicePoint; // 0x58
	private int timeout; // 0x5C
	private int redirects; // 0x60
	private object locker; // 0x64
	private static int defaultMaxResponseHeadersLength; // 0x0
	private int readWriteTimeout; // 0x68

	// Properties
	public Uri Address { get; }
	public ServicePoint ServicePoint { get; }

	// Methods

	// RVA: 0x32B51C Offset: 0x32B51C VA: 0x32B51C
	public void .ctor(Uri uri) { }

	[ObsoleteAttribute] // RVA: 0x9EC3C Offset: 0x9EC3C VA: 0x9EC3C
	// RVA: 0x32B7B8 Offset: 0x32B7B8 VA: 0x32B7B8
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x32C230 Offset: 0x32C230 VA: 0x32C230
	private static void .cctor() { }

	// RVA: 0x32C298 Offset: 0x32C298 VA: 0x32C298 Slot: 6
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x32C2C0 Offset: 0x32C2C0 VA: 0x32C2C0
	public Uri get_Address() { }

	// RVA: 0x32C2C8 Offset: 0x32C2C8 VA: 0x32C2C8
	public ServicePoint get_ServicePoint() { }

	// RVA: 0x32C2CC Offset: 0x32C2CC VA: 0x32C2CC
	internal ServicePoint GetServicePoint() { }

	// RVA: 0x32CCA8 Offset: 0x32CCA8 VA: 0x32CCA8 Slot: 7
	protected override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
}

// Namespace: System.Net
public interface ICertificatePolicy // TypeDefIndex: 999
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate, WebRequest request, int certificateProblem);
}

// Namespace: System.Net
public interface ICredentials // TypeDefIndex: 1000
{}

// Namespace: System.Net
[Serializable]
public class IPAddress // TypeDefIndex: 1001
{
	// Fields
	private long m_Address; // 0x8
	private AddressFamily m_Family; // 0x10
	private ushort[] m_Numbers; // 0x14
	private long m_ScopeId; // 0x18
	public static readonly IPAddress Any; // 0x0
	public static readonly IPAddress Broadcast; // 0x4
	public static readonly IPAddress Loopback; // 0x8
	public static readonly IPAddress None; // 0xC
	public static readonly IPAddress IPv6Any; // 0x10
	public static readonly IPAddress IPv6Loopback; // 0x14
	public static readonly IPAddress IPv6None; // 0x18
	private int m_HashCode; // 0x20

	// Properties
	internal long InternalIPv4Address { get; }
	public long ScopeId { get; }
	public AddressFamily AddressFamily { get; }

	// Methods

	// RVA: 0x32D214 Offset: 0x32D214 VA: 0x32D214
	public void .ctor(long addr) { }

	// RVA: 0x32D244 Offset: 0x32D244 VA: 0x32D244
	internal void .ctor(ushort[] address, long scopeId) { }

	// RVA: 0x32D444 Offset: 0x32D444 VA: 0x32D444
	private static void .cctor() { }

	// RVA: 0x32D75C Offset: 0x32D75C VA: 0x32D75C
	private static short SwapShort(short number) { }

	// RVA: 0x32D374 Offset: 0x32D374 VA: 0x32D374
	public static short HostToNetworkOrder(short host) { }

	// RVA: 0x32D764 Offset: 0x32D764 VA: 0x32D764
	public static short NetworkToHostOrder(short network) { }

	// RVA: 0x32D574 Offset: 0x32D574 VA: 0x32D574
	public static IPAddress Parse(string ipString) { }

	// RVA: 0x32D834 Offset: 0x32D834 VA: 0x32D834
	public static bool TryParse(string ipString, out IPAddress address) { }

	// RVA: 0x32D970 Offset: 0x32D970 VA: 0x32D970
	private static IPAddress ParseIPV4(string ip) { }

	// RVA: 0x32D668 Offset: 0x32D668 VA: 0x32D668
	private static IPAddress ParseIPV6(string ip) { }

	// RVA: 0x32EAD0 Offset: 0x32EAD0 VA: 0x32EAD0
	internal long get_InternalIPv4Address() { }

	// RVA: 0x32EAD8 Offset: 0x32EAD8 VA: 0x32EAD8
	public long get_ScopeId() { }

	// RVA: 0x32EB88 Offset: 0x32EB88 VA: 0x32EB88
	public AddressFamily get_AddressFamily() { }

	// RVA: 0x32EB90 Offset: 0x32EB90 VA: 0x32EB90
	public static bool IsLoopback(IPAddress addr) { }

	// RVA: 0x32ECC4 Offset: 0x32ECC4 VA: 0x32ECC4 Slot: 3
	public override string ToString() { }

	// RVA: 0x32EEA8 Offset: 0x32EEA8 VA: 0x32EEA8
	private static string ToString(long addr) { }

	// RVA: 0x32F398 Offset: 0x32F398 VA: 0x32F398 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x32F520 Offset: 0x32F520 VA: 0x32F520 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x32F7A8 Offset: 0x32F7A8 VA: 0x32F7A8
	private static int Hash(int i, int j, int k, int l) { }
}

// Namespace: System.Net
[DefaultMemberAttribute] // RVA: 0x9E760 Offset: 0x9E760 VA: 0x9E760
[Serializable]
internal class IPv6Address // TypeDefIndex: 1002
{
	// Fields
	private ushort[] address; // 0x8
	private int prefixLength; // 0xC
	private long scopeId; // 0x10
	public static readonly IPv6Address Loopback; // 0x0
	public static readonly IPv6Address Unspecified; // 0x4

	// Properties
	public ushort[] Address { get; }
	public long ScopeId { get; set; }

	// Methods

	// RVA: 0x32F27C Offset: 0x32F27C VA: 0x32F27C
	public void .ctor(ushort[] addr) { }

	// RVA: 0x32F7D0 Offset: 0x32F7D0 VA: 0x32F7D0
	public void .ctor(ushort[] addr, int prefixLength) { }

	// RVA: 0x32F890 Offset: 0x32F890 VA: 0x32F890
	public void .ctor(ushort[] addr, int prefixLength, int scopeId) { }

	// RVA: 0x32F8B0 Offset: 0x32F8B0 VA: 0x32F8B0
	private static void .cctor() { }

	// RVA: 0x32F944 Offset: 0x32F944 VA: 0x32F944
	public static IPv6Address Parse(string ipString) { }

	// RVA: 0x32FA84 Offset: 0x32FA84 VA: 0x32FA84
	private static int Fill(ushort[] addr, string ipString) { }

	// RVA: 0x32FC98 Offset: 0x32FC98 VA: 0x32FC98
	private static bool TryParse(string prefix, out int res) { }

	// RVA: 0x32E254 Offset: 0x32E254 VA: 0x32E254
	public static bool TryParse(string ipString, out IPv6Address result) { }

	// RVA: 0x32EAC0 Offset: 0x32EAC0 VA: 0x32EAC0
	public ushort[] get_Address() { }

	// RVA: 0x32EAC8 Offset: 0x32EAC8 VA: 0x32EAC8
	public long get_ScopeId() { }

	// RVA: 0x32F388 Offset: 0x32F388 VA: 0x32F388
	public void set_ScopeId(long value) { }

	// RVA: 0x32FD40 Offset: 0x32FD40 VA: 0x32FD40
	public static bool IsLoopback(IPv6Address addr) { }

	// RVA: 0x32FEBC Offset: 0x32FEBC VA: 0x32FEBC
	private static ushort SwapUShort(ushort number) { }

	// RVA: 0x32FEC4 Offset: 0x32FEC4 VA: 0x32FEC4
	private int AsIPv4Int() { }

	// RVA: 0x32FFB4 Offset: 0x32FFB4 VA: 0x32FFB4
	public bool IsIPv4Compatible() { }

	// RVA: 0x33003C Offset: 0x33003C VA: 0x33003C
	public bool IsIPv4Mapped() { }

	// RVA: 0x3300D8 Offset: 0x3300D8 VA: 0x3300D8 Slot: 3
	public override string ToString() { }

	// RVA: 0x33051C Offset: 0x33051C VA: 0x33051C
	public string ToString(bool fullLength) { }

	// RVA: 0x33074C Offset: 0x33074C VA: 0x33074C Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x330A2C Offset: 0x330A2C VA: 0x330A2C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x330CA0 Offset: 0x330CA0 VA: 0x330CA0
	private static int Hash(int i, int j, int k, int l) { }
}

// Namespace: System.Net
public interface IWebProxy // TypeDefIndex: 1003
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Uri GetProxy(Uri destination);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool IsBypassed(Uri host);
}

// Namespace: System.Net
public interface IWebRequestCreate // TypeDefIndex: 1004
{}

// Namespace: System.Net
[FlagsAttribute] // RVA: 0x9E794 Offset: 0x9E794 VA: 0x9E794
public enum SecurityProtocolType // TypeDefIndex: 1005
{
	// Fields
	public int value__; // 0x0
	public const SecurityProtocolType Ssl3 = 48;
	public const SecurityProtocolType Tls = 192;
}

// Namespace: System.Net
public class ServicePoint // TypeDefIndex: 1006
{
	// Fields
	private Uri uri; // 0x8
	private int connectionLimit; // 0xC
	private int maxIdleTime; // 0x10
	private int currentConnections; // 0x14
	private DateTime idleSince; // 0x18
	private bool usesProxy; // 0x28
	private bool sendContinue; // 0x29
	private bool useConnect; // 0x2A
	private object locker; // 0x2C
	private object hostE; // 0x30
	private bool useNagle; // 0x34

	// Properties
	public Uri Address { get; }
	public int CurrentConnections { get; }
	public DateTime IdleSince { get; set; }
	public bool Expect100Continue { set; }
	public bool UseNagleAlgorithm { set; }
	internal bool SendContinue { set; }
	internal bool UsesProxy { set; }
	internal bool UseConnect { set; }
	internal bool AvailableForRecycling { get; }

	// Methods

	// RVA: 0x330DAC Offset: 0x330DAC VA: 0x330DAC
	internal void .ctor(Uri uri, int connectionLimit, int maxIdleTime) { }

	// RVA: 0x330EB8 Offset: 0x330EB8 VA: 0x330EB8
	public Uri get_Address() { }

	// RVA: 0x330EC0 Offset: 0x330EC0 VA: 0x330EC0
	public int get_CurrentConnections() { }

	// RVA: 0x330EC8 Offset: 0x330EC8 VA: 0x330EC8
	public DateTime get_IdleSince() { }

	// RVA: 0x330ED8 Offset: 0x330ED8 VA: 0x330ED8
	internal void set_IdleSince(DateTime value) { }

	// RVA: 0x330F24 Offset: 0x330F24 VA: 0x330F24
	public void set_Expect100Continue(bool value) { }

	// RVA: 0x330F34 Offset: 0x330F34 VA: 0x330F34
	public void set_UseNagleAlgorithm(bool value) { }

	// RVA: 0x330F2C Offset: 0x330F2C VA: 0x330F2C
	internal void set_SendContinue(bool value) { }

	// RVA: 0x330F3C Offset: 0x330F3C VA: 0x330F3C
	internal void set_UsesProxy(bool value) { }

	// RVA: 0x330F44 Offset: 0x330F44 VA: 0x330F44
	internal void set_UseConnect(bool value) { }

	// RVA: 0x330F4C Offset: 0x330F4C VA: 0x330F4C
	internal bool get_AvailableForRecycling() { }
}

// Namespace: System.Net
public class ServicePointManager // TypeDefIndex: 1007
{
	// Fields
	private static HybridDictionary servicePoints; // 0x0
	private static ICertificatePolicy policy; // 0x4
	private static int defaultConnectionLimit; // 0x8
	private static int maxServicePointIdleTime; // 0xC
	private static int maxServicePoints; // 0x10
	private static bool _checkCRL; // 0x14
	private static SecurityProtocolType _securityProtocol; // 0x18
	private static bool expectContinue; // 0x1C
	private static bool useNagle; // 0x1D
	private static RemoteCertificateValidationCallback server_cert_cb; // 0x20

	// Properties
	[ObsoleteAttribute] // RVA: 0x9EE84 Offset: 0x9EE84 VA: 0x9EE84
	public static ICertificatePolicy CertificatePolicy { get; }
	[MonoTODOAttribute] // RVA: 0x9EEE4 Offset: 0x9EEE4 VA: 0x9EEE4
	public static bool CheckCertificateRevocationList { get; }
	public static SecurityProtocolType SecurityProtocol { get; }
	public static RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; }

	// Methods

	// RVA: 0x33104C Offset: 0x33104C VA: 0x33104C
	private static void .cctor() { }

	// RVA: 0x331144 Offset: 0x331144 VA: 0x331144
	public static ICertificatePolicy get_CertificatePolicy() { }

	// RVA: 0x3311D0 Offset: 0x3311D0 VA: 0x3311D0
	public static bool get_CheckCertificateRevocationList() { }

	// RVA: 0x33125C Offset: 0x33125C VA: 0x33125C
	public static SecurityProtocolType get_SecurityProtocol() { }

	// RVA: 0x329940 Offset: 0x329940 VA: 0x329940
	public static RemoteCertificateValidationCallback get_ServerCertificateValidationCallback() { }

	// RVA: 0x32C3E4 Offset: 0x32C3E4 VA: 0x32C3E4
	public static ServicePoint FindServicePoint(Uri address, IWebProxy proxy) { }

	// RVA: 0x3312E8 Offset: 0x3312E8 VA: 0x3312E8
	internal static void RecycleServicePoints() { }
}

// Namespace: 
private class ServicePointManager.SPKey // TypeDefIndex: 1008
{
	// Fields
	private Uri uri; // 0x8
	private bool use_connect; // 0xC

	// Methods

	// RVA: 0x331DA4 Offset: 0x331DA4 VA: 0x331DA4
	public void .ctor(Uri uri, bool use_connect) { }

	// RVA: 0x331DCC Offset: 0x331DCC VA: 0x331DCC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x331E0C Offset: 0x331E0C VA: 0x331E0C Slot: 0
	public override bool Equals(object obj) { }
}

// Namespace: System.Net
[ComVisibleAttribute] // RVA: 0x9E7A4 Offset: 0x9E7A4 VA: 0x9E7A4
[DefaultMemberAttribute] // RVA: 0x9E7A4 Offset: 0x9E7A4 VA: 0x9E7A4
[Serializable]
public class WebHeaderCollection : NameValueCollection, ISerializable // TypeDefIndex: 1009
{
	// Fields
	private static readonly Hashtable restricted; // 0x0
	private static readonly Hashtable multiValue; // 0x4
	private static readonly Dictionary<string, bool> restricted_response; // 0x8
	private bool internallyCreated; // 0x38
	private static bool[] allowed_chars; // 0xC

	// Properties
	public override int Count { get; }
	public override NameObjectCollectionBase.KeysCollection Keys { get; }

	// Methods

	// RVA: 0x329AB0 Offset: 0x329AB0 VA: 0x329AB0
	public void .ctor() { }

	// RVA: 0x331F10 Offset: 0x331F10 VA: 0x331F10
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x32B79C Offset: 0x32B79C VA: 0x32B79C
	internal void .ctor(bool internallyCreated) { }

	// RVA: 0x332264 Offset: 0x332264 VA: 0x332264
	private static void .cctor() { }

	// RVA: 0x333654 Offset: 0x333654 VA: 0x333654 Slot: 10
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x33367C Offset: 0x33367C VA: 0x33367C Slot: 16
	public override void Add(string name, string value) { }

	// RVA: 0x333A10 Offset: 0x333A10 VA: 0x333A10
	protected void AddWithoutValidate(string headerName, string headerValue) { }

	// RVA: 0x3337CC Offset: 0x3337CC VA: 0x3337CC
	public static bool IsRestricted(string headerName) { }

	// RVA: 0x333EA8 Offset: 0x333EA8 VA: 0x333EA8 Slot: 15
	public override void OnDeserialization(object sender) { }

	// RVA: 0x333EAC Offset: 0x333EAC VA: 0x333EAC Slot: 3
	public override string ToString() { }

	// RVA: 0x334094 Offset: 0x334094 VA: 0x334094 Slot: 13
	public override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x33422C Offset: 0x33422C VA: 0x33422C Slot: 14
	public override int get_Count() { }

	// RVA: 0x334260 Offset: 0x334260 VA: 0x334260 Slot: 11
	public override NameObjectCollectionBase.KeysCollection get_Keys() { }

	// RVA: 0x334264 Offset: 0x334264 VA: 0x334264 Slot: 17
	public override string Get(int index) { }

	// RVA: 0x334268 Offset: 0x334268 VA: 0x334268 Slot: 18
	public override string GetKey(int index) { }

	// RVA: 0x33426C Offset: 0x33426C VA: 0x33426C Slot: 12
	public override IEnumerator GetEnumerator() { }

	// RVA: 0x333DD4 Offset: 0x333DD4 VA: 0x333DD4
	internal static bool IsHeaderValue(string value) { }

	// RVA: 0x333C88 Offset: 0x333C88 VA: 0x333C88
	internal static bool IsHeaderName(string name) { }
}

// Namespace: System.Net
[Serializable]
public class WebProxy : ISerializable, IWebProxy // TypeDefIndex: 1010
{
	// Fields
	private Uri address; // 0x8
	private bool bypassOnLocal; // 0xC
	private ArrayList bypassList; // 0x10
	private ICredentials credentials; // 0x14
	private bool useDefaultCredentials; // 0x18

	// Properties
	[MonoTODOAttribute] // RVA: 0x9EF2C Offset: 0x9EF2C VA: 0x9EF2C
	public bool UseDefaultCredentials { get; }

	// Methods

	// RVA: 0x334270 Offset: 0x334270 VA: 0x334270
	public void .ctor() { }

	// RVA: 0x33429C Offset: 0x33429C VA: 0x33429C
	public void .ctor(Uri address, bool bypassOnLocal, string[] bypassList, ICredentials credentials) { }

	// RVA: 0x3344B4 Offset: 0x3344B4 VA: 0x3344B4
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x334780 Offset: 0x334780 VA: 0x334780 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x3347A8 Offset: 0x3347A8 VA: 0x3347A8
	public bool get_UseDefaultCredentials() { }

	// RVA: 0x3347B0 Offset: 0x3347B0 VA: 0x3347B0 Slot: 5
	public Uri GetProxy(Uri destination) { }

	// RVA: 0x3347D4 Offset: 0x3347D4 VA: 0x3347D4 Slot: 6
	public bool IsBypassed(Uri host) { }

	// RVA: 0x334F5C Offset: 0x334F5C VA: 0x334F5C Slot: 7
	protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x334348 Offset: 0x334348 VA: 0x334348
	private void CheckBypassList() { }
}

// Namespace: System.Net
[Serializable]
public abstract class WebRequest : MarshalByRefObject, ISerializable // TypeDefIndex: 1011
{
	// Fields
	private static HybridDictionary prefixes; // 0x0
	private static bool isDefaultWebProxySet; // 0x4
	private static IWebProxy defaultWebProxy; // 0x8
	private AuthenticationLevel authentication_level; // 0xC
	private static readonly object lockobj; // 0xC

	// Properties
	public static IWebProxy DefaultWebProxy { get; }

	// Methods

	// RVA: 0x329AA0 Offset: 0x329AA0 VA: 0x329AA0
	protected void .ctor() { }

	// RVA: 0x33508C Offset: 0x33508C VA: 0x33508C
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x33509C Offset: 0x33509C VA: 0x33509C
	private static void .cctor() { }

	// RVA: 0x33534C Offset: 0x33534C VA: 0x33534C Slot: 6
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x3351D0 Offset: 0x3351D0 VA: 0x3351D0
	private static void AddDynamicPrefix(string protocol, string implementor) { }

	// RVA: 0x33549C Offset: 0x33549C VA: 0x33549C
	private static Exception GetMustImplement() { }

	// RVA: 0x32B2B8 Offset: 0x32B2B8 VA: 0x32B2B8
	public static IWebProxy get_DefaultWebProxy() { }

	[MonoTODOAttribute] // RVA: 0x9EC74 Offset: 0x9EC74 VA: 0x9EC74
	// RVA: 0x33551C Offset: 0x33551C VA: 0x33551C
	private static IWebProxy GetDefaultWebProxy() { }

	// RVA: 0x335524 Offset: 0x335524 VA: 0x335524 Slot: 7
	protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x3353D4 Offset: 0x3353D4 VA: 0x3353D4
	internal static void AddPrefix(string prefix, Type type) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[FlagsAttribute] // RVA: 0x9E7F0 Offset: 0x9E7F0 VA: 0x9E7F0
public enum OpenFlags // TypeDefIndex: 1012
{
	// Fields
	public int value__; // 0x0
	public const OpenFlags ReadOnly = 0;
	public const OpenFlags ReadWrite = 1;
	public const OpenFlags MaxAllowed = 2;
	public const OpenFlags OpenExistingOnly = 4;
	public const OpenFlags IncludeArchived = 8;
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class PublicKey // TypeDefIndex: 1013
{
	// Fields
	private AsymmetricAlgorithm _key; // 0x8
	private AsnEncodedData _keyValue; // 0xC
	private AsnEncodedData _params; // 0x10
	private Oid _oid; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0x9EB34 Offset: 0x9EB34 VA: 0x9EB34
	private static Dictionary<string, int> <>f__switch$map9; // 0x0

	// Properties
	public AsnEncodedData EncodedKeyValue { get; }
	public AsnEncodedData EncodedParameters { get; }
	public AsymmetricAlgorithm Key { get; }
	public Oid Oid { get; }

	// Methods

	// RVA: 0x338FDC Offset: 0x338FDC VA: 0x338FDC
	internal void .ctor(X509Certificate certificate) { }

	// RVA: 0x339528 Offset: 0x339528 VA: 0x339528
	public AsnEncodedData get_EncodedKeyValue() { }

	// RVA: 0x339530 Offset: 0x339530 VA: 0x339530
	public AsnEncodedData get_EncodedParameters() { }

	// RVA: 0x339538 Offset: 0x339538 VA: 0x339538
	public AsymmetricAlgorithm get_Key() { }

	// RVA: 0x33A1B4 Offset: 0x33A1B4 VA: 0x33A1B4
	public Oid get_Oid() { }

	// RVA: 0x33A1BC Offset: 0x33A1BC VA: 0x33A1BC
	private static byte[] GetUnsignedBigInteger(byte[] integer) { }

	// RVA: 0x339C54 Offset: 0x339C54 VA: 0x339C54
	internal static DSA DecodeDSA(byte[] rawPublicKey, byte[] rawParameters) { }

	// RVA: 0x339840 Offset: 0x339840 VA: 0x339840
	internal static RSA DecodeRSA(byte[] rawPublicKey) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum StoreLocation // TypeDefIndex: 1014
{
	// Fields
	public int value__; // 0x0
	public const StoreLocation CurrentUser = 1;
	public const StoreLocation LocalMachine = 2;
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum StoreName // TypeDefIndex: 1015
{
	// Fields
	public int value__; // 0x0
	public const StoreName AddressBook = 1;
	public const StoreName AuthRoot = 2;
	public const StoreName CertificateAuthority = 3;
	public const StoreName Disallowed = 4;
	public const StoreName My = 5;
	public const StoreName Root = 6;
	public const StoreName TrustedPeople = 7;
	public const StoreName TrustedPublisher = 8;
}

// Namespace: System.Security.Cryptography.X509Certificates
[MonoTODOAttribute] // RVA: 0x9E800 Offset: 0x9E800 VA: 0x9E800
public sealed class X500DistinguishedName : AsnEncodedData // TypeDefIndex: 1016
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x33A298 Offset: 0x33A298 VA: 0x33A298
	public void .ctor(byte[] encodedDistinguishedName) { }

	// RVA: 0x33A51C Offset: 0x33A51C VA: 0x33A51C
	public string Decode(X500DistinguishedNameFlags flag) { }

	// RVA: 0x33A6D8 Offset: 0x33A6D8 VA: 0x33A6D8
	private static string GetSeparator(X500DistinguishedNameFlags flag) { }

	// RVA: 0x33A3EC Offset: 0x33A3EC VA: 0x33A3EC
	private void DecodeRawData() { }

	// RVA: 0x33A778 Offset: 0x33A778 VA: 0x33A778
	private static string Canonize(string s) { }

	// RVA: 0x33AA38 Offset: 0x33AA38 VA: 0x33AA38
	internal static bool AreEqual(X500DistinguishedName name1, X500DistinguishedName name2) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[FlagsAttribute] // RVA: 0x9E834 Offset: 0x9E834 VA: 0x9E834
public enum X500DistinguishedNameFlags // TypeDefIndex: 1017
{
	// Fields
	public int value__; // 0x0
	public const X500DistinguishedNameFlags None = 0;
	public const X500DistinguishedNameFlags Reversed = 1;
	public const X500DistinguishedNameFlags UseSemicolons = 16;
	public const X500DistinguishedNameFlags DoNotUsePlusSign = 32;
	public const X500DistinguishedNameFlags DoNotUseQuotes = 64;
	public const X500DistinguishedNameFlags UseCommas = 128;
	public const X500DistinguishedNameFlags UseNewLines = 256;
	public const X500DistinguishedNameFlags UseUTF8Encoding = 4096;
	public const X500DistinguishedNameFlags UseT61Encoding = 8192;
	public const X500DistinguishedNameFlags ForceUTF8Encoding = 16384;
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509BasicConstraintsExtension : X509Extension // TypeDefIndex: 1018
{
	// Fields
	internal const string oid = "2.5.29.19";
	internal const string friendlyName = "Basic Constraints";
	private bool _certificateAuthority; // 0x11
	private bool _hasPathLengthConstraint; // 0x12
	private int _pathLengthConstraint; // 0x14
	private AsnDecodeStatus _status; // 0x18

	// Properties
	public bool CertificateAuthority { get; }
	public bool HasPathLengthConstraint { get; }
	public int PathLengthConstraint { get; }

	// Methods

	// RVA: 0x33ACB0 Offset: 0x33ACB0 VA: 0x33ACB0
	public void .ctor() { }

	// RVA: 0x3371F8 Offset: 0x3371F8 VA: 0x3371F8
	public void .ctor(AsnEncodedData encodedBasicConstraints, bool critical) { }

	// RVA: 0x33AFC8 Offset: 0x33AFC8 VA: 0x33AFC8
	public void .ctor(bool certificateAuthority, bool hasPathLengthConstraint, int pathLengthConstraint, bool critical) { }

	// RVA: 0x33B2D0 Offset: 0x33B2D0 VA: 0x33B2D0
	public bool get_CertificateAuthority() { }

	// RVA: 0x33B384 Offset: 0x33B384 VA: 0x33B384
	public bool get_HasPathLengthConstraint() { }

	// RVA: 0x33B438 Offset: 0x33B438 VA: 0x33B438
	public int get_PathLengthConstraint() { }

	// RVA: 0x33B4EC Offset: 0x33B4EC VA: 0x33B4EC Slot: 4
	public override void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x33AD68 Offset: 0x33AD68 VA: 0x33AD68
	internal AsnDecodeStatus Decode(byte[] extension) { }

	// RVA: 0x33B10C Offset: 0x33B10C VA: 0x33B10C
	internal byte[] Encode() { }

	// RVA: 0x3372D0 Offset: 0x3372D0 VA: 0x3372D0 Slot: 5
	internal override string ToString(bool multiLine) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509Certificate2 : X509Certificate // TypeDefIndex: 1019
{
	// Fields
	private bool _archived; // 0x1C
	private X509ExtensionCollection _extensions; // 0x20
	private string _name; // 0x24
	private string _serial; // 0x28
	private PublicKey _publicKey; // 0x2C
	private X500DistinguishedName issuer_name; // 0x30
	private X500DistinguishedName subject_name; // 0x34
	private Oid signature_algorithm; // 0x38
	private X509Certificate _cert; // 0x3C
	private static string empty_error; // 0x0
	private static byte[] commonName; // 0x4
	private static byte[] email; // 0x8
	private static byte[] signedData; // 0xC

	// Properties
	public X509ExtensionCollection Extensions { get; }
	public X500DistinguishedName IssuerName { get; }
	public DateTime NotAfter { get; }
	public DateTime NotBefore { get; }
	public AsymmetricAlgorithm PrivateKey { get; }
	public PublicKey PublicKey { get; }
	public string SerialNumber { get; }
	public Oid SignatureAlgorithm { get; }
	public X500DistinguishedName SubjectName { get; }
	public string Thumbprint { get; }
	public int Version { get; }
	internal X509Certificate MonoCertificate { get; }

	// Methods

	// RVA: 0x33B828 Offset: 0x33B828 VA: 0x33B828
	public void .ctor(byte[] rawData) { }

	// RVA: 0x33B8F8 Offset: 0x33B8F8 VA: 0x33B8F8
	private static void .cctor() { }

	// RVA: 0x33BA94 Offset: 0x33BA94 VA: 0x33BA94
	public X509ExtensionCollection get_Extensions() { }

	// RVA: 0x33C380 Offset: 0x33C380 VA: 0x33C380
	public X500DistinguishedName get_IssuerName() { }

	// RVA: 0x33C4CC Offset: 0x33C4CC VA: 0x33C4CC
	public DateTime get_NotAfter() { }

	// RVA: 0x33C5F8 Offset: 0x33C5F8 VA: 0x33C5F8
	public DateTime get_NotBefore() { }

	// RVA: 0x33C724 Offset: 0x33C724 VA: 0x33C724
	public AsymmetricAlgorithm get_PrivateKey() { }

	// RVA: 0x33CB4C Offset: 0x33CB4C VA: 0x33CB4C
	public PublicKey get_PublicKey() { }

	// RVA: 0x33CD40 Offset: 0x33CD40 VA: 0x33CD40
	public string get_SerialNumber() { }

	// RVA: 0x33CF34 Offset: 0x33CF34 VA: 0x33CF34
	public Oid get_SignatureAlgorithm() { }

	// RVA: 0x33D060 Offset: 0x33D060 VA: 0x33D060
	public X500DistinguishedName get_SubjectName() { }

	// RVA: 0x33D1AC Offset: 0x33D1AC VA: 0x33D1AC
	public string get_Thumbprint() { }

	// RVA: 0x33D1B4 Offset: 0x33D1B4 VA: 0x33D1B4
	public int get_Version() { }

	[MonoTODOAttribute] // RVA: 0x9ECA8 Offset: 0x9ECA8 VA: 0x9ECA8
	// RVA: 0x33D2A0 Offset: 0x33D2A0 VA: 0x33D2A0
	public string GetNameInfo(X509NameType nameType, bool forIssuer) { }

	// RVA: 0x33D7FC Offset: 0x33D7FC VA: 0x33D7FC
	private ASN1 Find(byte[] oid, ASN1 dn) { }

	// RVA: 0x33D948 Offset: 0x33D948 VA: 0x33D948
	private string GetValueAsString(ASN1 pair) { }

	// RVA: 0x33DC48 Offset: 0x33DC48 VA: 0x33DC48
	private void ImportPkcs12(byte[] rawData, string password) { }

	[MonoTODOAttribute] // RVA: 0x9ECDC Offset: 0x9ECDC VA: 0x9ECDC
	// RVA: 0x33DF30 Offset: 0x33DF30 VA: 0x33DF30 Slot: 16
	public override void Import(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags) { }

	// RVA: 0x33E208 Offset: 0x33E208 VA: 0x33E208 Slot: 17
	public override void Reset() { }

	// RVA: 0x33E2C8 Offset: 0x33E2C8 VA: 0x33E2C8 Slot: 3
	public override string ToString() { }

	// RVA: 0x33E344 Offset: 0x33E344 VA: 0x33E344 Slot: 15
	public override string ToString(bool verbose) { }

	// RVA: 0x33E9F0 Offset: 0x33E9F0 VA: 0x33E9F0
	private static void AppendBuffer(StringBuilder sb, byte[] buffer) { }

	[MonoTODOAttribute] // RVA: 0x9ED10 Offset: 0x9ED10 VA: 0x9ED10
	// RVA: 0x33EB08 Offset: 0x33EB08 VA: 0x33EB08
	public bool Verify() { }

	// RVA: 0x33F3A8 Offset: 0x33F3A8 VA: 0x33F3A8
	internal X509Certificate get_MonoCertificate() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[DefaultMemberAttribute] // RVA: 0x9E844 Offset: 0x9E844 VA: 0x9E844
public class X509Certificate2Collection : X509CertificateCollection // TypeDefIndex: 1020
{
	// Properties
	public X509Certificate2 Item { get; }

	// Methods

	// RVA: 0x33F3B0 Offset: 0x33F3B0 VA: 0x33F3B0
	public void .ctor() { }

	// RVA: 0x33F3C0 Offset: 0x33F3C0 VA: 0x33F3C0
	public void .ctor(X509Certificate2Collection certificates) { }

	// RVA: 0x33F4D0 Offset: 0x33F4D0 VA: 0x33F4D0
	public X509Certificate2 get_Item(int index) { }

	// RVA: 0x33F6DC Offset: 0x33F6DC VA: 0x33F6DC
	public int Add(X509Certificate2 certificate) { }

	[MonoTODOAttribute] // RVA: 0x9ED70 Offset: 0x9ED70 VA: 0x9ED70
	// RVA: 0x33F3E8 Offset: 0x33F3E8 VA: 0x33F3E8
	public void AddRange(X509Certificate2Collection certificates) { }

	// RVA: 0x33F7C4 Offset: 0x33F7C4 VA: 0x33F7C4
	public bool Contains(X509Certificate2 certificate) { }

	[MonoTODOAttribute] // RVA: 0x9EDCC Offset: 0x9EDCC VA: 0x9EDCC
	// RVA: 0x33FC10 Offset: 0x33FC10 VA: 0x33FC10
	public X509Certificate2Collection Find(X509FindType findType, object findValue, bool validOnly) { }

	// RVA: 0x341954 Offset: 0x341954 VA: 0x341954
	public X509Certificate2Enumerator GetEnumerator() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509Certificate2Enumerator : IEnumerator // TypeDefIndex: 1021
{
	// Fields
	private IEnumerator enumerator; // 0x8

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public X509Certificate2 Current { get; }

	// Methods

	// RVA: 0x3419C4 Offset: 0x3419C4 VA: 0x3419C4
	internal void .ctor(X509Certificate2Collection collection) { }

	// RVA: 0x341AAC Offset: 0x341AAC VA: 0x341AAC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x341B84 Offset: 0x341B84 VA: 0x341B84 Slot: 5
	private bool System.Collections.IEnumerator.MoveNext() { }

	// RVA: 0x341C5C Offset: 0x341C5C VA: 0x341C5C Slot: 6
	private void System.Collections.IEnumerator.Reset() { }

	// RVA: 0x341D34 Offset: 0x341D34 VA: 0x341D34
	public X509Certificate2 get_Current() { }

	// RVA: 0x341EB4 Offset: 0x341EB4 VA: 0x341EB4 Slot: 7
	public bool MoveNext() { }

	// RVA: 0x341F8C Offset: 0x341F8C VA: 0x341F8C Slot: 8
	public void Reset() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[DefaultMemberAttribute] // RVA: 0x9E878 Offset: 0x9E878 VA: 0x9E878
[Serializable]
public class X509CertificateCollection : CollectionBase // TypeDefIndex: 1022
{
	// Properties
	public X509Certificate Item { get; }

	// Methods

	// RVA: 0x33F3B8 Offset: 0x33F3B8 VA: 0x33F3B8
	public void .ctor() { }

	// RVA: 0x342064 Offset: 0x342064 VA: 0x342064
	public void .ctor(X509Certificate[] value) { }

	// RVA: 0x3421B8 Offset: 0x3421B8 VA: 0x3421B8
	public X509Certificate get_Item(int index) { }

	// RVA: 0x34208C Offset: 0x34208C VA: 0x34208C
	public void AddRange(X509Certificate[] value) { }

	// RVA: 0x3422E4 Offset: 0x3422E4 VA: 0x3422E4
	public X509CertificateCollection.X509CertificateEnumerator GetEnumerator() { }

	// RVA: 0x34243C Offset: 0x34243C VA: 0x34243C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: 
public class X509CertificateCollection.X509CertificateEnumerator : IEnumerator // TypeDefIndex: 1023
{
	// Fields
	private IEnumerator enumerator; // 0x8

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public X509Certificate Current { get; }

	// Methods

	// RVA: 0x342354 Offset: 0x342354 VA: 0x342354
	public void .ctor(X509CertificateCollection mappings) { }

	// RVA: 0x342478 Offset: 0x342478 VA: 0x342478 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x342550 Offset: 0x342550 VA: 0x342550 Slot: 5
	private bool System.Collections.IEnumerator.MoveNext() { }

	// RVA: 0x342628 Offset: 0x342628 VA: 0x342628 Slot: 6
	private void System.Collections.IEnumerator.Reset() { }

	// RVA: 0x342700 Offset: 0x342700 VA: 0x342700
	public X509Certificate get_Current() { }

	// RVA: 0x342880 Offset: 0x342880 VA: 0x342880 Slot: 7
	public bool MoveNext() { }

	// RVA: 0x342958 Offset: 0x342958 VA: 0x342958 Slot: 8
	public void Reset() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509Chain // TypeDefIndex: 1024
{
	// Fields
	private StoreLocation location; // 0x8
	private X509ChainElementCollection elements; // 0xC
	private X509ChainPolicy policy; // 0x10
	private X509ChainStatus[] status; // 0x14
	private static X509ChainStatus[] Empty; // 0x0
	private int max_path_length; // 0x18
	private X500DistinguishedName working_issuer_name; // 0x1C
	private AsymmetricAlgorithm working_public_key; // 0x20
	private X509ChainElement bce_restriction; // 0x24
	private X509Store roots; // 0x28
	private X509Store cas; // 0x2C
	private X509Certificate2Collection collection; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0x9EB44 Offset: 0x9EB44 VA: 0x9EB44
	private static Dictionary<string, int> <>f__switch$mapB; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0x9EB54 Offset: 0x9EB54 VA: 0x9EB54
	private static Dictionary<string, int> <>f__switch$mapC; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0x9EB64 Offset: 0x9EB64 VA: 0x9EB64
	private static Dictionary<string, int> <>f__switch$mapD; // 0xC

	// Properties
	public X509ChainPolicy ChainPolicy { get; }
	private X509Store Roots { get; }
	private X509Store CertificateAuthorities { get; }
	private X509Certificate2Collection CertificateCollection { get; }

	// Methods

	// RVA: 0x342A30 Offset: 0x342A30 VA: 0x342A30
	public void .ctor() { }

	// RVA: 0x342A38 Offset: 0x342A38 VA: 0x342A38
	public void .ctor(bool useMachineContext) { }

	// RVA: 0x342B9C Offset: 0x342B9C VA: 0x342B9C
	private static void .cctor() { }

	// RVA: 0x342C14 Offset: 0x342C14 VA: 0x342C14
	public X509ChainPolicy get_ChainPolicy() { }

	[MonoTODOAttribute] // RVA: 0x9EE00 Offset: 0x9EE00 VA: 0x9EE00
	// RVA: 0x33ECE4 Offset: 0x33ECE4 VA: 0x33ECE4
	public bool Build(X509Certificate2 certificate) { }

	// RVA: 0x342C1C Offset: 0x342C1C VA: 0x342C1C
	public void Reset() { }

	// RVA: 0x3433AC Offset: 0x3433AC VA: 0x3433AC
	private X509Store get_Roots() { }

	// RVA: 0x343458 Offset: 0x343458 VA: 0x343458
	private X509Store get_CertificateAuthorities() { }

	// RVA: 0x343504 Offset: 0x343504 VA: 0x343504
	private X509Certificate2Collection get_CertificateCollection() { }

	// RVA: 0x342D10 Offset: 0x342D10 VA: 0x342D10
	private X509ChainStatusFlags BuildChainFrom(X509Certificate2 certificate) { }

	// RVA: 0x343CBC Offset: 0x343CBC VA: 0x343CBC
	private X509Certificate2 SelectBestFromCollection(X509Certificate2 child, X509Certificate2Collection c) { }

	// RVA: 0x343784 Offset: 0x343784 VA: 0x343784
	private X509Certificate2 FindParent(X509Certificate2 certificate) { }

	// RVA: 0x343A20 Offset: 0x343A20 VA: 0x343A20
	private bool IsChainComplete(X509Certificate2 certificate) { }

	// RVA: 0x34415C Offset: 0x34415C VA: 0x34415C
	private bool IsSelfIssued(X509Certificate2 certificate) { }

	// RVA: 0x342EB0 Offset: 0x342EB0 VA: 0x342EB0
	private void ValidateChain(X509ChainStatusFlags flag) { }

	// RVA: 0x34423C Offset: 0x34423C VA: 0x34423C
	private void Process(int n) { }

	// RVA: 0x3449A0 Offset: 0x3449A0 VA: 0x3449A0
	private void PrepareForNextCertificate(int n) { }

	// RVA: 0x344FC4 Offset: 0x344FC4 VA: 0x344FC4
	private void WrapUp() { }

	// RVA: 0x3450FC Offset: 0x3450FC VA: 0x3450FC
	private void ProcessCertificateExtensions(X509ChainElement element) { }

	// RVA: 0x3450A4 Offset: 0x3450A4 VA: 0x3450A4
	private bool IsSignedWith(X509Certificate2 signed, AsymmetricAlgorithm pubkey) { }

	// RVA: 0x344000 Offset: 0x344000 VA: 0x344000
	private string GetSubjectKeyIdentifier(X509Certificate2 certificate) { }

	// RVA: 0x343F4C Offset: 0x343F4C VA: 0x343F4C
	private string GetAuthorityKeyIdentifier(X509Certificate2 certificate) { }

	// RVA: 0x34594C Offset: 0x34594C VA: 0x34594C
	private string GetAuthorityKeyIdentifier(X509Crl crl) { }

	// RVA: 0x345754 Offset: 0x345754 VA: 0x345754
	private string GetAuthorityKeyIdentifier(X509Extension ext) { }

	// RVA: 0x344D08 Offset: 0x344D08 VA: 0x344D08
	private void CheckRevocationOnChain(X509ChainStatusFlags flag) { }

	// RVA: 0x3459FC Offset: 0x3459FC VA: 0x3459FC
	private X509ChainStatusFlags CheckRevocation(X509Certificate2 certificate, int ca, bool online) { }

	// RVA: 0x345B2C Offset: 0x345B2C VA: 0x345B2C
	private X509ChainStatusFlags CheckRevocation(X509Certificate2 certificate, X509Certificate2 ca_cert, bool online) { }

	// RVA: 0x345E34 Offset: 0x345E34 VA: 0x345E34
	private X509Crl FindCrl(X509Certificate2 caCertificate) { }

	// RVA: 0x346DDC Offset: 0x346DDC VA: 0x346DDC
	private bool ProcessCrlExtensions(X509Crl crl) { }

	// RVA: 0x346804 Offset: 0x346804 VA: 0x346804
	private bool ProcessCrlEntryExtensions(X509Crl.X509CrlEntry entry) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509ChainElement // TypeDefIndex: 1025
{
	// Fields
	private X509Certificate2 certificate; // 0x8
	private X509ChainStatus[] status; // 0xC
	private string info; // 0x10
	private X509ChainStatusFlags compressed_status_flags; // 0x14

	// Properties
	public X509Certificate2 Certificate { get; }
	public X509ChainStatus[] ChainElementStatus { get; }
	internal X509ChainStatusFlags StatusFlags { get; set; }

	// Methods

	// RVA: 0x347404 Offset: 0x347404 VA: 0x347404
	internal void .ctor(X509Certificate2 certificate) { }

	// RVA: 0x344234 Offset: 0x344234 VA: 0x344234
	public X509Certificate2 get_Certificate() { }

	// RVA: 0x343234 Offset: 0x343234 VA: 0x343234
	public X509ChainStatus[] get_ChainElementStatus() { }

	// RVA: 0x343CAC Offset: 0x343CAC VA: 0x343CAC
	internal X509ChainStatusFlags get_StatusFlags() { }

	// RVA: 0x343CB4 Offset: 0x343CB4 VA: 0x343CB4
	internal void set_StatusFlags(X509ChainStatusFlags value) { }

	// RVA: 0x3474AC Offset: 0x3474AC VA: 0x3474AC
	private int Count(X509ChainStatusFlags flags) { }

	// RVA: 0x3474D4 Offset: 0x3474D4 VA: 0x3474D4
	private void Set(X509ChainStatus[] status, ref int position, X509ChainStatusFlags flags, X509ChainStatusFlags mask) { }

	// RVA: 0x3446C4 Offset: 0x3446C4 VA: 0x3446C4
	internal void UncompressFlags() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[DefaultMemberAttribute] // RVA: 0x9E8AC Offset: 0x9E8AC VA: 0x9E8AC
public sealed class X509ChainElementCollection : ICollection, IEnumerable // TypeDefIndex: 1026
{
	// Fields
	private ArrayList _list; // 0x8

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public X509ChainElement Item { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x342B00 Offset: 0x342B00 VA: 0x342B00
	internal void .ctor() { }

	// RVA: 0x347728 Offset: 0x347728 VA: 0x347728 Slot: 7
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x34776C Offset: 0x34776C VA: 0x34776C Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x343344 Offset: 0x343344 VA: 0x343344 Slot: 4
	public int get_Count() { }

	// RVA: 0x3478C8 Offset: 0x3478C8 VA: 0x3478C8 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x343B88 Offset: 0x343B88 VA: 0x343B88
	public X509ChainElement get_Item(int index) { }

	// RVA: 0x3478FC Offset: 0x3478FC VA: 0x3478FC Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x343040 Offset: 0x343040 VA: 0x343040
	public X509ChainElementEnumerator GetEnumerator() { }

	// RVA: 0x3436E8 Offset: 0x3436E8 VA: 0x3436E8
	internal void Add(X509Certificate2 certificate) { }

	// RVA: 0x343378 Offset: 0x343378 VA: 0x343378
	internal void Clear() { }

	// RVA: 0x3438B4 Offset: 0x3438B4 VA: 0x3438B4
	internal bool Contains(X509Certificate2 certificate) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ChainElementEnumerator : IEnumerator // TypeDefIndex: 1027
{
	// Fields
	private IEnumerator enumerator; // 0x8

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public X509ChainElement Current { get; }

	// Methods

	// RVA: 0x3477E0 Offset: 0x3477E0 VA: 0x3477E0
	internal void .ctor(IEnumerable enumerable) { }

	// RVA: 0x347930 Offset: 0x347930 VA: 0x347930 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x3430B4 Offset: 0x3430B4 VA: 0x3430B4
	public X509ChainElement get_Current() { }

	// RVA: 0x343244 Offset: 0x343244 VA: 0x343244 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x347A08 Offset: 0x347A08 VA: 0x347A08 Slot: 6
	public void Reset() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ChainPolicy // TypeDefIndex: 1028
{
	// Fields
	private OidCollection apps; // 0x8
	private OidCollection cert; // 0xC
	private X509Certificate2Collection store; // 0x10
	private X509RevocationFlag rflag; // 0x14
	private X509RevocationMode mode; // 0x18
	private TimeSpan timeout; // 0x20
	private X509VerificationFlags vflags; // 0x28
	private DateTime vtime; // 0x30

	// Properties
	public X509Certificate2Collection ExtraStore { get; }
	public X509RevocationFlag RevocationFlag { get; }
	public X509RevocationMode RevocationMode { get; }
	public X509VerificationFlags VerificationFlags { get; }
	public DateTime VerificationTime { get; }

	// Methods

	// RVA: 0x342B7C Offset: 0x342B7C VA: 0x342B7C
	public void .ctor() { }

	// RVA: 0x3436E0 Offset: 0x3436E0 VA: 0x3436E0
	public X509Certificate2Collection get_ExtraStore() { }

	// RVA: 0x3459F4 Offset: 0x3459F4 VA: 0x3459F4
	public X509RevocationFlag get_RevocationFlag() { }

	// RVA: 0x3459EC Offset: 0x3459EC VA: 0x3459EC
	public X509RevocationMode get_RevocationMode() { }

	// RVA: 0x34333C Offset: 0x34333C VA: 0x34333C
	public X509VerificationFlags get_VerificationFlags() { }

	// RVA: 0x343F3C Offset: 0x343F3C VA: 0x343F3C
	public DateTime get_VerificationTime() { }

	// RVA: 0x347AE0 Offset: 0x347AE0 VA: 0x347AE0
	public void Reset() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public struct X509ChainStatus // TypeDefIndex: 1029
{
	// Fields
	private X509ChainStatusFlags status; // 0x0
	private string info; // 0x4

	// Properties
	public X509ChainStatusFlags Status { get; set; }
	public string StatusInformation { set; }

	// Methods

	// RVA: 0xC974C Offset: 0xC974C VA: 0xC974C
	internal void .ctor(X509ChainStatusFlags flag) { }

	// RVA: 0xC976C Offset: 0xC976C VA: 0xC976C
	public X509ChainStatusFlags get_Status() { }

	// RVA: 0xC9774 Offset: 0xC9774 VA: 0xC9774
	public void set_Status(X509ChainStatusFlags value) { }

	// RVA: 0xC977C Offset: 0xC977C VA: 0xC977C
	public void set_StatusInformation(string value) { }

	// RVA: 0x347574 Offset: 0x347574 VA: 0x347574
	internal static string GetInformation(X509ChainStatusFlags flags) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[FlagsAttribute] // RVA: 0x9E8E0 Offset: 0x9E8E0 VA: 0x9E8E0
public enum X509ChainStatusFlags // TypeDefIndex: 1030
{
	// Fields
	public int value__; // 0x0
	public const X509ChainStatusFlags NoError = 0;
	public const X509ChainStatusFlags NotTimeValid = 1;
	public const X509ChainStatusFlags NotTimeNested = 2;
	public const X509ChainStatusFlags Revoked = 4;
	public const X509ChainStatusFlags NotSignatureValid = 8;
	public const X509ChainStatusFlags NotValidForUsage = 16;
	public const X509ChainStatusFlags UntrustedRoot = 32;
	public const X509ChainStatusFlags RevocationStatusUnknown = 64;
	public const X509ChainStatusFlags Cyclic = 128;
	public const X509ChainStatusFlags InvalidExtension = 256;
	public const X509ChainStatusFlags InvalidPolicyConstraints = 512;
	public const X509ChainStatusFlags InvalidBasicConstraints = 1024;
	public const X509ChainStatusFlags InvalidNameConstraints = 2048;
	public const X509ChainStatusFlags HasNotSupportedNameConstraint = 4096;
	public const X509ChainStatusFlags HasNotDefinedNameConstraint = 8192;
	public const X509ChainStatusFlags HasNotPermittedNameConstraint = 16384;
	public const X509ChainStatusFlags HasExcludedNameConstraint = 32768;
	public const X509ChainStatusFlags PartialChain = 65536;
	public const X509ChainStatusFlags CtlNotTimeValid = 131072;
	public const X509ChainStatusFlags CtlNotSignatureValid = 262144;
	public const X509ChainStatusFlags CtlNotValidForUsage = 524288;
	public const X509ChainStatusFlags OfflineRevocation = 16777216;
	public const X509ChainStatusFlags NoIssuanceChainPolicy = 33554432;
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509EnhancedKeyUsageExtension : X509Extension // TypeDefIndex: 1031
{
	// Fields
	private OidCollection _enhKeyUsage; // 0x14
	private AsnDecodeStatus _status; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0x9EB74 Offset: 0x9EB74 VA: 0x9EB74
	private static Dictionary<string, int> <>f__switch$mapE; // 0x0

	// Methods

	// RVA: 0x33763C Offset: 0x33763C VA: 0x33763C
	public void .ctor(AsnEncodedData encodedEnhancedKeyUsages, bool critical) { }

	// RVA: 0x347EDC Offset: 0x347EDC VA: 0x347EDC Slot: 4
	public override void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x347C38 Offset: 0x347C38 VA: 0x347C38
	internal AsnDecodeStatus Decode(byte[] extension) { }

	// RVA: 0x337714 Offset: 0x337714 VA: 0x337714 Slot: 5
	internal override string ToString(bool multiLine) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509Extension : AsnEncodedData // TypeDefIndex: 1032
{
	// Fields
	private bool _critical; // 0x10

	// Properties
	public bool Critical { get; set; }

	// Methods

	// RVA: 0x33AD58 Offset: 0x33AD58 VA: 0x33AD58
	protected void .ctor() { }

	// RVA: 0x3480B4 Offset: 0x3480B4 VA: 0x3480B4
	public void .ctor(string oid, byte[] rawData, bool critical) { }

	// RVA: 0x33B6C4 Offset: 0x33B6C4 VA: 0x33B6C4
	public bool get_Critical() { }

	// RVA: 0x33AD60 Offset: 0x33AD60 VA: 0x33AD60
	public void set_Critical(bool value) { }

	// RVA: 0x3480D0 Offset: 0x3480D0 VA: 0x3480D0 Slot: 4
	public override void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x33B6CC Offset: 0x33B6CC VA: 0x33B6CC
	internal string FormatUnkownData(byte[] data) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[DefaultMemberAttribute] // RVA: 0x9E8F0 Offset: 0x9E8F0 VA: 0x9E8F0
public sealed class X509ExtensionCollection : ICollection, IEnumerable // TypeDefIndex: 1033
{
	// Fields
	private ArrayList _list; // 0x8

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }
	public X509Extension Item { get; }

	// Methods

	// RVA: 0x33BBAC Offset: 0x33BBAC VA: 0x33BBAC
	internal void .ctor(X509Certificate cert) { }

	// RVA: 0x348218 Offset: 0x348218 VA: 0x348218 Slot: 7
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x3483A0 Offset: 0x3483A0 VA: 0x3483A0 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x34186C Offset: 0x34186C VA: 0x34186C Slot: 4
	public int get_Count() { }

	// RVA: 0x348458 Offset: 0x348458 VA: 0x348458 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x34848C Offset: 0x34848C VA: 0x34848C Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x3413C4 Offset: 0x3413C4 VA: 0x3413C4
	public X509Extension get_Item(string oid) { }

	// RVA: 0x345488 Offset: 0x345488 VA: 0x345488
	public X509ExtensionEnumerator GetEnumerator() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ExtensionEnumerator : IEnumerator // TypeDefIndex: 1034
{
	// Fields
	private IEnumerator enumerator; // 0x8

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public X509Extension Current { get; }

	// Methods

	// RVA: 0x348414 Offset: 0x348414 VA: 0x348414
	internal void .ctor(ArrayList list) { }

	// RVA: 0x348490 Offset: 0x348490 VA: 0x348490 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x3454FC Offset: 0x3454FC VA: 0x3454FC
	public X509Extension get_Current() { }

	// RVA: 0x34567C Offset: 0x34567C VA: 0x34567C Slot: 5
	public bool MoveNext() { }

	// RVA: 0x348568 Offset: 0x348568 VA: 0x348568 Slot: 6
	public void Reset() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509FindType // TypeDefIndex: 1035
{
	// Fields
	public int value__; // 0x0
	public const X509FindType FindByThumbprint = 0;
	public const X509FindType FindBySubjectName = 1;
	public const X509FindType FindBySubjectDistinguishedName = 2;
	public const X509FindType FindByIssuerName = 3;
	public const X509FindType FindByIssuerDistinguishedName = 4;
	public const X509FindType FindBySerialNumber = 5;
	public const X509FindType FindByTimeValid = 6;
	public const X509FindType FindByTimeNotYetValid = 7;
	public const X509FindType FindByTimeExpired = 8;
	public const X509FindType FindByTemplateName = 9;
	public const X509FindType FindByApplicationPolicy = 10;
	public const X509FindType FindByCertificatePolicy = 11;
	public const X509FindType FindByExtension = 12;
	public const X509FindType FindByKeyUsage = 13;
	public const X509FindType FindBySubjectKeyIdentifier = 14;
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509KeyUsageExtension : X509Extension // TypeDefIndex: 1036
{
	// Fields
	internal const string oid = "2.5.29.15";
	internal const string friendlyName = "Key Usage";
	internal const X509KeyUsageFlags all = 33023;
	private X509KeyUsageFlags _keyUsages; // 0x14
	private AsnDecodeStatus _status; // 0x18

	// Properties
	public X509KeyUsageFlags KeyUsages { get; }

	// Methods

	// RVA: 0x348640 Offset: 0x348640 VA: 0x348640
	public void .ctor() { }

	// RVA: 0x337C88 Offset: 0x337C88 VA: 0x337C88
	public void .ctor(AsnEncodedData encodedKeyUsage, bool critical) { }

	// RVA: 0x3488FC Offset: 0x3488FC VA: 0x3488FC
	public void .ctor(X509KeyUsageFlags keyUsages, bool critical) { }

	// RVA: 0x3418A0 Offset: 0x3418A0 VA: 0x3418A0
	public X509KeyUsageFlags get_KeyUsages() { }

	// RVA: 0x348C30 Offset: 0x348C30 VA: 0x348C30 Slot: 4
	public override void CopyFrom(AsnEncodedData encodedData) { }

	// RVA: 0x3489D8 Offset: 0x3489D8 VA: 0x3489D8
	internal X509KeyUsageFlags GetValidFlags(X509KeyUsageFlags flags) { }

	// RVA: 0x3486E8 Offset: 0x3486E8 VA: 0x3486E8
	internal AsnDecodeStatus Decode(byte[] extension) { }

	// RVA: 0x3489EC Offset: 0x3489EC VA: 0x3489EC
	internal byte[] Encode() { }

	// RVA: 0x337D60 Offset: 0x337D60 VA: 0x337D60 Slot: 5
	internal override string ToString(bool multiLine) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[FlagsAttribute] // RVA: 0x9E924 Offset: 0x9E924 VA: 0x9E924
public enum X509KeyUsageFlags // TypeDefIndex: 1037
{
	// Fields
	public int value__; // 0x0
	public const X509KeyUsageFlags None = 0;
	public const X509KeyUsageFlags EncipherOnly = 1;
	public const X509KeyUsageFlags CrlSign = 2;
	public const X509KeyUsageFlags KeyCertSign = 4;
	public const X509KeyUsageFlags KeyAgreement = 8;
	public const X509KeyUsageFlags DataEncipherment = 16;
	public const X509KeyUsageFlags KeyEncipherment = 32;
	public const X509KeyUsageFlags NonRepudiation = 64;
	public const X509KeyUsageFlags DigitalSignature = 128;
	public const X509KeyUsageFlags DecipherOnly = 32768;
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509NameType // TypeDefIndex: 1038
{
	// Fields
	public int value__; // 0x0
	public const X509NameType SimpleName = 0;
	public const X509NameType EmailName = 1;
	public const X509NameType UpnName = 2;
	public const X509NameType DnsName = 3;
	public const X509NameType DnsFromAlternativeName = 4;
	public const X509NameType UrlName = 5;
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509RevocationFlag // TypeDefIndex: 1039
{
	// Fields
	public int value__; // 0x0
	public const X509RevocationFlag EndCertificateOnly = 0;
	public const X509RevocationFlag EntireChain = 1;
	public const X509RevocationFlag ExcludeRoot = 2;
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509RevocationMode // TypeDefIndex: 1040
{
	// Fields
	public int value__; // 0x0
	public const X509RevocationMode NoCheck = 0;
	public const X509RevocationMode Online = 1;
	public const X509RevocationMode Offline = 2;
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509Store // TypeDefIndex: 1041
{
	// Fields
	private string _name; // 0x8
	private StoreLocation _location; // 0xC
	private X509Certificate2Collection list; // 0x10
	private OpenFlags _flags; // 0x14
	private X509Store store; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0x9EB84 Offset: 0x9EB84 VA: 0x9EB84
	private static Dictionary<string, int> <>f__switch$mapF; // 0x0

	// Properties
	public X509Certificate2Collection Certificates { get; }
	private X509Stores Factory { get; }
	internal X509Store Store { get; }

	// Methods

	// RVA: 0x4B5D64 Offset: 0x4B5D64 VA: 0x4B5D64
	public void .ctor(StoreName storeName, StoreLocation storeLocation) { }

	// RVA: 0x4B5EE8 Offset: 0x4B5EE8 VA: 0x4B5EE8
	public X509Certificate2Collection get_Certificates() { }

	// RVA: 0x4B5F88 Offset: 0x4B5F88 VA: 0x4B5F88
	private X509Stores get_Factory() { }

	// RVA: 0x4B5FA4 Offset: 0x4B5FA4 VA: 0x4B5FA4
	internal X509Store get_Store() { }

	// RVA: 0x4B5FAC Offset: 0x4B5FAC VA: 0x4B5FAC
	public void Close() { }

	// RVA: 0x4B5FCC Offset: 0x4B5FCC VA: 0x4B5FCC
	public void Open(OpenFlags flags) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509SubjectKeyIdentifierExtension : X509Extension // TypeDefIndex: 1042
{
	// Fields
	internal const string oid = "2.5.29.14";
	internal const string friendlyName = "Subject Key Identifier";
	private byte[] _subjectKeyIdentifier; // 0x14
	private string _ski; // 0x18
	private AsnDecodeStatus _status; // 0x1C

	// Properties
	public string SubjectKeyIdentifier { get; }

	// Methods

	// RVA: 0x4B64E0 Offset: 0x4B64E0 VA: 0x4B64E0
	public void .ctor() { }

	// RVA: 0x4B6580 Offset: 0x4B6580 VA: 0x4B6580
	public void .ctor(AsnEncodedData encodedSubjectKeyIdentifier, bool critical) { }

	// RVA: 0x4B684C Offset: 0x4B684C VA: 0x4B684C
	public void .ctor(byte[] subjectKeyIdentifier, bool critical) { }

	// RVA: 0x4B6B10 Offset: 0x4B6B10 VA: 0x4B6B10
	public void .ctor(string subjectKeyIdentifier, bool critical) { }

	// RVA: 0x4B6DD4 Offset: 0x4B6DD4 VA: 0x4B6DD4
	public void .ctor(PublicKey key, bool critical) { }

	// RVA: 0x4B6DF4 Offset: 0x4B6DF4 VA: 0x4B6DF4
	public void .ctor(PublicKey key, X509SubjectKeyIdentifierHashAlgorithm algorithm, bool critical) { }

	// RVA: 0x4B7334 Offset: 0x4B7334 VA: 0x4B7334
	public string get_SubjectKeyIdentifier() { }

	// RVA: 0x4B7408 Offset: 0x4B7408 VA: 0x4B7408 Slot: 4
	public override void CopyFrom(AsnEncodedData encodedData) { }

	// RVA: 0x4B7618 Offset: 0x4B7618 VA: 0x4B7618
	internal static byte FromHexChar(char c) { }

	// RVA: 0x4B7664 Offset: 0x4B7664 VA: 0x4B7664
	internal static byte FromHexChars(char c1, char c2) { }

	// RVA: 0x4B6CA4 Offset: 0x4B6CA4 VA: 0x4B6CA4
	internal static byte[] FromHex(string hex) { }

	// RVA: 0x4B6674 Offset: 0x4B6674 VA: 0x4B6674
	internal AsnDecodeStatus Decode(byte[] extension) { }

	// RVA: 0x4B6A74 Offset: 0x4B6A74 VA: 0x4B6A74
	internal byte[] Encode() { }

	// RVA: 0x4B770C Offset: 0x4B770C VA: 0x4B770C Slot: 5
	internal override string ToString(bool multiLine) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509SubjectKeyIdentifierHashAlgorithm // TypeDefIndex: 1043
{
	// Fields
	public int value__; // 0x0
	public const X509SubjectKeyIdentifierHashAlgorithm Sha1 = 0;
	public const X509SubjectKeyIdentifierHashAlgorithm ShortSha1 = 1;
	public const X509SubjectKeyIdentifierHashAlgorithm CapiSha1 = 2;
}

// Namespace: System.Security.Cryptography.X509Certificates
[FlagsAttribute] // RVA: 0x9E934 Offset: 0x9E934 VA: 0x9E934
public enum X509VerificationFlags // TypeDefIndex: 1044
{
	// Fields
	public int value__; // 0x0
	public const X509VerificationFlags NoFlag = 0;
	public const X509VerificationFlags IgnoreNotTimeValid = 1;
	public const X509VerificationFlags IgnoreCtlNotTimeValid = 2;
	public const X509VerificationFlags IgnoreNotTimeNested = 4;
	public const X509VerificationFlags IgnoreInvalidBasicConstraints = 8;
	public const X509VerificationFlags AllowUnknownCertificateAuthority = 16;
	public const X509VerificationFlags IgnoreWrongUsage = 32;
	public const X509VerificationFlags IgnoreInvalidName = 64;
	public const X509VerificationFlags IgnoreInvalidPolicy = 128;
	public const X509VerificationFlags IgnoreEndRevocationUnknown = 256;
	public const X509VerificationFlags IgnoreCtlSignerRevocationUnknown = 512;
	public const X509VerificationFlags IgnoreCertificateAuthorityRevocationUnknown = 1024;
	public const X509VerificationFlags IgnoreRootRevocationUnknown = 2048;
	public const X509VerificationFlags AllFlags = 4095;
}

// Namespace: System.Security.Cryptography
internal enum AsnDecodeStatus // TypeDefIndex: 1045
{
	// Fields
	public int value__; // 0x0
	public const AsnDecodeStatus NotDecoded = -1;
	public const AsnDecodeStatus Ok = 0;
	public const AsnDecodeStatus BadAsn = 1;
	public const AsnDecodeStatus BadTag = 2;
	public const AsnDecodeStatus BadLength = 3;
	public const AsnDecodeStatus InformationNotAvailable = 4;
}

// Namespace: System.Security.Cryptography
public class AsnEncodedData // TypeDefIndex: 1046
{
	// Fields
	internal Oid _oid; // 0x8
	internal byte[] _raw; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0x9EB94 Offset: 0x9EB94 VA: 0x9EB94
	private static Dictionary<string, int> <>f__switch$mapA; // 0x0

	// Properties
	public Oid Oid { get; set; }
	public byte[] RawData { get; set; }

	// Methods

	// RVA: 0x3355B8 Offset: 0x3355B8 VA: 0x3355B8
	protected void .ctor() { }

	// RVA: 0x3355C0 Offset: 0x3355C0 VA: 0x3355C0
	public void .ctor(string oid, byte[] rawData) { }

	// RVA: 0x335878 Offset: 0x335878 VA: 0x335878
	public void .ctor(Oid oid, byte[] rawData) { }

	// RVA: 0x335934 Offset: 0x335934 VA: 0x335934
	public Oid get_Oid() { }

	// RVA: 0x3358B0 Offset: 0x3358B0 VA: 0x3358B0
	public void set_Oid(Oid value) { }

	// RVA: 0x335A04 Offset: 0x335A04 VA: 0x335A04
	public byte[] get_RawData() { }

	// RVA: 0x335720 Offset: 0x335720 VA: 0x335720
	public void set_RawData(byte[] value) { }

	// RVA: 0x335A0C Offset: 0x335A0C VA: 0x335A0C Slot: 4
	public virtual void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x335B48 Offset: 0x335B48 VA: 0x335B48 Slot: 5
	internal virtual string ToString(bool multiLine) { }

	// RVA: 0x337078 Offset: 0x337078 VA: 0x337078
	internal string Default(bool multiLine) { }

	// RVA: 0x335F04 Offset: 0x335F04 VA: 0x335F04
	internal string BasicConstraintsExtension(bool multiLine) { }

	// RVA: 0x33606C Offset: 0x33606C VA: 0x33606C
	internal string EnhancedKeyUsageExtension(bool multiLine) { }

	// RVA: 0x3361D4 Offset: 0x3361D4 VA: 0x3361D4
	internal string KeyUsageExtension(bool multiLine) { }

	// RVA: 0x33633C Offset: 0x33633C VA: 0x33633C
	internal string SubjectKeyIdentifierExtension(bool multiLine) { }

	// RVA: 0x3364AC Offset: 0x3364AC VA: 0x3364AC
	internal string SubjectAltName(bool multiLine) { }

	// RVA: 0x336A44 Offset: 0x336A44 VA: 0x336A44
	internal string NetscapeCertType(bool multiLine) { }
}

// Namespace: System.Security.Cryptography
public sealed class Oid // TypeDefIndex: 1047
{
	// Fields
	private string _value; // 0x8
	private string _name; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0x9EBA4 Offset: 0x9EBA4 VA: 0x9EBA4
	private static Dictionary<string, int> <>f__switch$map10; // 0x0

	// Properties
	public string FriendlyName { get; }
	public string Value { get; }

	// Methods

	// RVA: 0x338534 Offset: 0x338534 VA: 0x338534
	public void .ctor() { }

	// RVA: 0x335650 Offset: 0x335650 VA: 0x335650
	public void .ctor(string oid) { }

	// RVA: 0x338AE0 Offset: 0x338AE0 VA: 0x338AE0
	public void .ctor(string value, string friendlyName) { }

	// RVA: 0x33593C Offset: 0x33593C VA: 0x33593C
	public void .ctor(Oid oid) { }

	// RVA: 0x338B08 Offset: 0x338B08 VA: 0x338B08
	public string get_FriendlyName() { }

	// RVA: 0x335EFC Offset: 0x335EFC VA: 0x335EFC
	public string get_Value() { }

	// RVA: 0x33853C Offset: 0x33853C VA: 0x33853C
	private string GetName(string oid) { }
}

// Namespace: System.Security.Cryptography
[DefaultMemberAttribute] // RVA: 0x9E944 Offset: 0x9E944 VA: 0x9E944
public sealed class OidCollection : ICollection, IEnumerable // TypeDefIndex: 1048
{
	// Fields
	private ArrayList _list; // 0x8
	private bool _readOnly; // 0xC

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public Oid Item { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x338B10 Offset: 0x338B10 VA: 0x338B10
	public void .ctor() { }

	// RVA: 0x338B8C Offset: 0x338B8C VA: 0x338B8C Slot: 7
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x338BD0 Offset: 0x338BD0 VA: 0x338BD0 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x338C74 Offset: 0x338C74 VA: 0x338C74 Slot: 4
	public int get_Count() { }

	// RVA: 0x338CA8 Offset: 0x338CA8 VA: 0x338CA8 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x338CDC Offset: 0x338CDC VA: 0x338CDC
	public Oid get_Item(int index) { }

	// RVA: 0x338DE4 Offset: 0x338DE4 VA: 0x338DE4 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x338E18 Offset: 0x338E18 VA: 0x338E18
	public int Add(Oid oid) { }
}

// Namespace: System.Security.Cryptography
public sealed class OidEnumerator : IEnumerator // TypeDefIndex: 1049
{
	// Fields
	private OidCollection _collection; // 0x8
	private int _position; // 0xC

	// Properties
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: 0x338C4C Offset: 0x338C4C VA: 0x338C4C
	internal void .ctor(OidCollection collection) { }

	// RVA: 0x338E64 Offset: 0x338E64 VA: 0x338E64 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x338F20 Offset: 0x338F20 VA: 0x338F20 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x338FD0 Offset: 0x338FD0 VA: 0x338FD0 Slot: 6
	public void Reset() { }
}

// Namespace: System.Text.RegularExpressions
internal abstract class BaseMachine : IMachine // TypeDefIndex: 1050
{
	// Fields
	protected bool needs_groups_or_captures; // 0x8

	// Methods

	// RVA: 0x4B7A48 Offset: 0x4B7A48 VA: 0x4B7A48
	protected void .ctor() { }

	// RVA: 0x4B7A58 Offset: 0x4B7A58 VA: 0x4B7A58 Slot: 5
	public virtual Match Scan(Regex regex, string text, int start, int end) { }
}

// Namespace: System.Text.RegularExpressions
[Serializable]
public class Capture // TypeDefIndex: 1051
{
	// Fields
	internal int index; // 0x8
	internal int length; // 0xC
	internal string text; // 0x10

	// Properties
	public int Index { get; }
	public int Length { get; }
	public string Value { get; }
	internal string Text { get; }

	// Methods

	// RVA: 0x4B7AF4 Offset: 0x4B7AF4 VA: 0x4B7AF4
	internal void .ctor(string text) { }

	// RVA: 0x4B7B20 Offset: 0x4B7B20 VA: 0x4B7B20
	internal void .ctor(string text, int index, int length) { }

	// RVA: 0x4B7B50 Offset: 0x4B7B50 VA: 0x4B7B50
	public int get_Index() { }

	// RVA: 0x4B7B58 Offset: 0x4B7B58 VA: 0x4B7B58
	public int get_Length() { }

	// RVA: 0x4B7B60 Offset: 0x4B7B60 VA: 0x4B7B60
	public string get_Value() { }

	// RVA: 0x4B7C10 Offset: 0x4B7C10 VA: 0x4B7C10 Slot: 3
	public override string ToString() { }

	// RVA: 0x4B7C14 Offset: 0x4B7C14 VA: 0x4B7C14
	internal string get_Text() { }
}

// Namespace: System.Text.RegularExpressions
[DefaultMemberAttribute] // RVA: 0x9E978 Offset: 0x9E978 VA: 0x9E978
[Serializable]
public class CaptureCollection : ICollection, IEnumerable // TypeDefIndex: 1052
{
	// Fields
	private Capture[] list; // 0x8

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x4B7C1C Offset: 0x4B7C1C VA: 0x4B7C1C
	internal void .ctor(int n) { }

	// RVA: 0x4B7C94 Offset: 0x4B7C94 VA: 0x4B7C94 Slot: 4
	public int get_Count() { }

	// RVA: 0x4B7CB8 Offset: 0x4B7CB8 VA: 0x4B7CB8 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x4B7CC0 Offset: 0x4B7CC0 VA: 0x4B7CC0
	internal void SetValue(Capture cap, int i) { }

	// RVA: 0x4B7D3C Offset: 0x4B7D3C VA: 0x4B7D3C Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x4B7D44 Offset: 0x4B7D44 VA: 0x4B7D44 Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0x4B7D80 Offset: 0x4B7D80 VA: 0x4B7D80 Slot: 8
	public IEnumerator GetEnumerator() { }
}

// Namespace: System.Text.RegularExpressions
[Serializable]
public class Group : Capture // TypeDefIndex: 1053
{
	// Fields
	internal static Group Fail; // 0x0
	private bool success; // 0x14
	private CaptureCollection captures; // 0x18

	// Properties
	public CaptureCollection Captures { get; }
	public bool Success { get; }

	// Methods

	// RVA: 0x4B992C Offset: 0x4B992C VA: 0x4B992C
	internal void .ctor(string text, int index, int length, int n_caps) { }

	// RVA: 0x4B99EC Offset: 0x4B99EC VA: 0x4B99EC
	internal void .ctor(string text, int index, int length) { }

	// RVA: 0x4B9A24 Offset: 0x4B9A24 VA: 0x4B9A24
	internal void .ctor() { }

	// RVA: 0x4B9AF8 Offset: 0x4B9AF8 VA: 0x4B9AF8
	private static void .cctor() { }

	// RVA: 0x4B9B68 Offset: 0x4B9B68 VA: 0x4B9B68
	public CaptureCollection get_Captures() { }

	// RVA: 0x4B9B70 Offset: 0x4B9B70 VA: 0x4B9B70
	public bool get_Success() { }
}

// Namespace: System.Text.RegularExpressions
[DefaultMemberAttribute] // RVA: 0x9E9AC Offset: 0x9E9AC VA: 0x9E9AC
[Serializable]
public class GroupCollection : ICollection, IEnumerable // TypeDefIndex: 1054
{
	// Fields
	private Group[] list; // 0x8
	private int gap; // 0xC

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public Group Item { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x4B9B78 Offset: 0x4B9B78 VA: 0x4B9B78
	internal void .ctor(int n, int gap) { }

	// RVA: 0x4B9BF8 Offset: 0x4B9BF8 VA: 0x4B9BF8 Slot: 4
	public int get_Count() { }

	// RVA: 0x4B9C1C Offset: 0x4B9C1C VA: 0x4B9C1C Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x4B9C24 Offset: 0x4B9C24 VA: 0x4B9C24
	public Group get_Item(int i) { }

	// RVA: 0x4B9F90 Offset: 0x4B9F90 VA: 0x4B9F90
	internal void SetValue(Group g, int i) { }

	// RVA: 0x4BA00C Offset: 0x4BA00C VA: 0x4BA00C Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x4BA014 Offset: 0x4BA014 VA: 0x4BA014 Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0x4BA050 Offset: 0x4BA050 VA: 0x4BA050 Slot: 8
	public IEnumerator GetEnumerator() { }
}

// Namespace: System.Text.RegularExpressions
[Serializable]
public class Match : Group // TypeDefIndex: 1055
{
	// Fields
	private Regex regex; // 0x1C
	private IMachine machine; // 0x20
	private int text_length; // 0x24
	private GroupCollection groups; // 0x28
	private static Match empty; // 0x0

	// Properties
	public static Match Empty { get; }
	public virtual GroupCollection Groups { get; }
	internal Regex Regex { get; }

	// Methods

	// RVA: 0x4BFC10 Offset: 0x4BFC10 VA: 0x4BFC10
	private void .ctor() { }

	// RVA: 0x4BE234 Offset: 0x4BE234 VA: 0x4BE234
	internal void .ctor(Regex regex, IMachine machine, string text, int text_length, int n_groups, int index, int length) { }

	// RVA: 0x4BE2F8 Offset: 0x4BE2F8 VA: 0x4BE2F8
	internal void .ctor(Regex regex, IMachine machine, string text, int text_length, int n_groups, int index, int length, int n_caps) { }

	// RVA: 0x4BFCF0 Offset: 0x4BFCF0 VA: 0x4BFCF0
	private static void .cctor() { }

	// RVA: 0x4B9E4C Offset: 0x4B9E4C VA: 0x4B9E4C
	public static Match get_Empty() { }

	// RVA: 0x4BFD60 Offset: 0x4BFD60 VA: 0x4BFD60 Slot: 4
	public virtual GroupCollection get_Groups() { }

	// RVA: 0x4BFD68 Offset: 0x4BFD68 VA: 0x4BFD68
	public Match NextMatch() { }

	// RVA: 0x4B9ED8 Offset: 0x4B9ED8 VA: 0x4B9ED8
	internal Regex get_Regex() { }
}

// Namespace: System.Text.RegularExpressions
[DefaultMemberAttribute] // RVA: 0x9E9E0 Offset: 0x9E9E0 VA: 0x9E9E0
[Serializable]
public class MatchCollection : ICollection, IEnumerable // TypeDefIndex: 1056
{
	// Fields
	private Match current; // 0x8
	private ArrayList list; // 0xC

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public virtual Match Item { get; }
	public object SyncRoot { get; }
	private ICollection FullList { get; }

	// Methods

	// RVA: 0x4BFF40 Offset: 0x4BFF40 VA: 0x4BFF40
	internal void .ctor(Match start) { }

	// RVA: 0x4BFFC4 Offset: 0x4BFFC4 VA: 0x4BFFC4 Slot: 4
	public int get_Count() { }

	// RVA: 0x4C015C Offset: 0x4C015C VA: 0x4C015C Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x4C0164 Offset: 0x4C0164 VA: 0x4C0164 Slot: 9
	public virtual Match get_Item(int i) { }

	// RVA: 0x4C0444 Offset: 0x4C0444 VA: 0x4C0444 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x4C044C Offset: 0x4C044C VA: 0x4C044C Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0x4C053C Offset: 0x4C053C VA: 0x4C053C Slot: 8
	public IEnumerator GetEnumerator() { }

	// RVA: 0x4C0334 Offset: 0x4C0334 VA: 0x4C0334
	private bool TryToGet(int i) { }

	// RVA: 0x4C00A4 Offset: 0x4C00A4 VA: 0x4C00A4
	private ICollection get_FullList() { }
}

// Namespace: 
private class MatchCollection.Enumerator : IEnumerator // TypeDefIndex: 1057
{
	// Fields
	private int index; // 0x8
	private MatchCollection coll; // 0xC

	// Properties
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: 0x4C0604 Offset: 0x4C0604 VA: 0x4C0604
	internal void .ctor(MatchCollection coll) { }

	// RVA: 0x4C062C Offset: 0x4C062C VA: 0x4C062C Slot: 6
	private void System.Collections.IEnumerator.Reset() { }

	// RVA: 0x4C0638 Offset: 0x4C0638 VA: 0x4C0638 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x4C08C8 Offset: 0x4C08C8 VA: 0x4C08C8 Slot: 5
	private bool System.Collections.IEnumerator.MoveNext() { }
}

// Namespace: System.Text.RegularExpressions
[Serializable]
public class Regex : ISerializable // TypeDefIndex: 1058
{
	// Fields
	private static FactoryCache cache; // 0x0
	private IMachineFactory machineFactory; // 0x8
	private IDictionary mapping; // 0xC
	private int group_count; // 0x10
	private int gap; // 0x14
	private string[] group_names; // 0x18
	private int[] group_numbers; // 0x1C
	protected internal string pattern; // 0x20
	protected internal RegexOptions roptions; // 0x24

	// Properties
	public RegexOptions Options { get; }
	public bool RightToLeft { get; }
	internal int Gap { get; }
	private int[] GroupNumbers { get; }

	// Methods

	// RVA: 0x4C1F8C Offset: 0x4C1F8C VA: 0x4C1F8C
	protected void .ctor() { }

	// RVA: 0x4C1F94 Offset: 0x4C1F94 VA: 0x4C1F94
	public void .ctor(string pattern) { }

	// RVA: 0x4C1F9C Offset: 0x4C1F9C VA: 0x4C1F9C
	public void .ctor(string pattern, RegexOptions options) { }

	// RVA: 0x4C24AC Offset: 0x4C24AC VA: 0x4C24AC
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x4C25CC Offset: 0x4C25CC VA: 0x4C25CC
	private static void .cctor() { }

	// RVA: 0x4C264C Offset: 0x4C264C VA: 0x4C264C Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x4C20A0 Offset: 0x4C20A0 VA: 0x4C20A0
	private static void validate_options(RegexOptions options) { }

	// RVA: 0x4C21AC Offset: 0x4C21AC VA: 0x4C21AC
	private void Init() { }

	// RVA: 0x4C27C0 Offset: 0x4C27C0 VA: 0x4C27C0
	private void InitNewRegex() { }

	// RVA: 0x4C2AE0 Offset: 0x4C2AE0 VA: 0x4C2AE0
	private static IMachineFactory CreateMachineFactory(string pattern, RegexOptions options) { }

	// RVA: 0x4C27B8 Offset: 0x4C27B8 VA: 0x4C27B8
	public RegexOptions get_Options() { }

	// RVA: 0x4BFF34 Offset: 0x4BFF34 VA: 0x4BFF34
	public bool get_RightToLeft() { }

	// RVA: 0x4B9EE0 Offset: 0x4B9EE0 VA: 0x4B9EE0
	internal int GetGroupIndex(int number) { }

	// RVA: 0x4C3B10 Offset: 0x4C3B10 VA: 0x4C3B10
	private int default_startat(string input) { }

	// RVA: 0x4C3B34 Offset: 0x4C3B34 VA: 0x4C3B34
	public bool IsMatch(string input) { }

	// RVA: 0x4C3B78 Offset: 0x4C3B78 VA: 0x4C3B78
	public bool IsMatch(string input, int startat) { }

	// RVA: 0x4C3BA0 Offset: 0x4C3BA0 VA: 0x4C3BA0
	public Match Match(string input, int startat) { }

	// RVA: 0x4C3E50 Offset: 0x4C3E50 VA: 0x4C3E50
	public MatchCollection Matches(string input) { }

	// RVA: 0x4C3E94 Offset: 0x4C3E94 VA: 0x4C3E94
	public MatchCollection Matches(string input, int startat) { }

	// RVA: 0x4C3F20 Offset: 0x4C3F20 VA: 0x4C3F20 Slot: 3
	public override string ToString() { }

	// RVA: 0x4BFCE8 Offset: 0x4BFCE8 VA: 0x4BFCE8
	internal int get_Gap() { }

	// RVA: 0x4C3D78 Offset: 0x4C3D78 VA: 0x4C3D78
	private IMachine CreateMachine() { }

	// RVA: 0x4C3564 Offset: 0x4C3564 VA: 0x4C3564
	private static string[] GetGroupNamesArray(int groupCount, IDictionary mapping) { }

	// RVA: 0x4C3994 Offset: 0x4C3994 VA: 0x4C3994
	private int[] get_GroupNumbers() { }
}

// Namespace: System.Text.RegularExpressions
[FlagsAttribute] // RVA: 0x9EA14 Offset: 0x9EA14 VA: 0x9EA14
public enum RegexOptions // TypeDefIndex: 1059
{
	// Fields
	public int value__; // 0x0
	public const RegexOptions None = 0;
	public const RegexOptions IgnoreCase = 1;
	public const RegexOptions Multiline = 2;
	public const RegexOptions ExplicitCapture = 4;
	public const RegexOptions Singleline = 16;
	public const RegexOptions IgnorePatternWhitespace = 32;
	public const RegexOptions RightToLeft = 64;
	public const RegexOptions ECMAScript = 256;
	public const RegexOptions CultureInvariant = 512;
}

// Namespace: System.Text.RegularExpressions
internal enum OpCode // TypeDefIndex: 1060
{
	// Fields
	public ushort value__; // 0x0
	public const OpCode False = 0;
	public const OpCode True = 1;
	public const OpCode Position = 2;
	public const OpCode String = 3;
	public const OpCode Reference = 4;
	public const OpCode Character = 5;
	public const OpCode Category = 6;
	public const OpCode NotCategory = 7;
	public const OpCode Range = 8;
	public const OpCode Set = 9;
	public const OpCode In = 10;
	public const OpCode Open = 11;
	public const OpCode Close = 12;
	public const OpCode Balance = 13;
	public const OpCode BalanceStart = 14;
	public const OpCode IfDefined = 15;
	public const OpCode Sub = 16;
	public const OpCode Test = 17;
	public const OpCode Branch = 18;
	public const OpCode Jump = 19;
	public const OpCode Repeat = 20;
	public const OpCode Until = 21;
	public const OpCode FastRepeat = 22;
	public const OpCode Anchor = 23;
	public const OpCode Info = 24;
}

// Namespace: System.Text.RegularExpressions
[FlagsAttribute] // RVA: 0x9EA24 Offset: 0x9EA24 VA: 0x9EA24
internal enum OpFlags // TypeDefIndex: 1061
{
	// Fields
	public ushort value__; // 0x0
	public const OpFlags None = 0;
	public const OpFlags Negate = 256;
	public const OpFlags IgnoreCase = 512;
	public const OpFlags RightToLeft = 1024;
	public const OpFlags Lazy = 2048;
}

// Namespace: System.Text.RegularExpressions
internal enum Position // TypeDefIndex: 1062
{
	// Fields
	public ushort value__; // 0x0
	public const Position Any = 0;
	public const Position Start = 1;
	public const Position StartOfString = 2;
	public const Position StartOfLine = 3;
	public const Position StartOfScan = 4;
	public const Position End = 5;
	public const Position EndOfString = 6;
	public const Position EndOfLine = 7;
	public const Position Boundary = 8;
	public const Position NonBoundary = 9;
}

// Namespace: System.Text.RegularExpressions
internal interface IMachine // TypeDefIndex: 1063
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Match Scan(Regex regex, string text, int start, int end);
}

// Namespace: System.Text.RegularExpressions
internal interface IMachineFactory // TypeDefIndex: 1064
{
	// Properties
	public abstract IDictionary Mapping { get; set; }
	public abstract int GroupCount { get; }
	public abstract int Gap { get; set; }
	public abstract string[] NamesMapping { get; set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMachine NewInstance();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IDictionary get_Mapping();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void set_Mapping(IDictionary value);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract int get_GroupCount();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_Gap();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void set_Gap(int value);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract string[] get_NamesMapping();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void set_NamesMapping(string[] value);
}

// Namespace: System.Text.RegularExpressions
internal class FactoryCache // TypeDefIndex: 1065
{
	// Fields
	private int capacity; // 0x8
	private Hashtable factories; // 0xC
	private MRUList mru_list; // 0x10

	// Methods

	// RVA: 0x4B8D84 Offset: 0x4B8D84 VA: 0x4B8D84
	public void .ctor(int capacity) { }

	// RVA: 0x4B8E60 Offset: 0x4B8E60 VA: 0x4B8E60
	public void Add(string pattern, RegexOptions options, IMachineFactory factory) { }

	// RVA: 0x4B8FD0 Offset: 0x4B8FD0 VA: 0x4B8FD0
	private void Cleanup() { }

	// RVA: 0x4B9344 Offset: 0x4B9344 VA: 0x4B9344
	public IMachineFactory Lookup(string pattern, RegexOptions options) { }
}

// Namespace: 
private class FactoryCache.Key // TypeDefIndex: 1066
{
	// Fields
	public string pattern; // 0x8
	public RegexOptions options; // 0xC

	// Methods

	// RVA: 0x4B8FA8 Offset: 0x4B8FA8 VA: 0x4B8FA8
	public void .ctor(string pattern, RegexOptions options) { }

	// RVA: 0x4B9560 Offset: 0x4B9560 VA: 0x4B9560 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x4B9598 Offset: 0x4B9598 VA: 0x4B9598 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x4B9668 Offset: 0x4B9668 VA: 0x4B9668 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Text.RegularExpressions
internal class MRUList // TypeDefIndex: 1067
{
	// Fields
	private MRUList.Node head; // 0x8
	private MRUList.Node tail; // 0xC

	// Methods

	// RVA: 0x4B8E3C Offset: 0x4B8E3C VA: 0x4B8E3C
	public void .ctor() { }

	// RVA: 0x4B915C Offset: 0x4B915C VA: 0x4B915C
	public void Use(object o) { }

	// RVA: 0x4B930C Offset: 0x4B930C VA: 0x4B930C
	public object Evict() { }
}

// Namespace: 
private class MRUList.Node // TypeDefIndex: 1068
{
	// Fields
	public object value; // 0x8
	public MRUList.Node previous; // 0xC
	public MRUList.Node next; // 0x10

	// Methods

	// RVA: 0x4BFBF0 Offset: 0x4BFBF0 VA: 0x4BFBF0
	public void .ctor(object value) { }
}

// Namespace: System.Text.RegularExpressions
internal enum Category // TypeDefIndex: 1069
{
	// Fields
	public ushort value__; // 0x0
	public const Category None = 0;
	public const Category Any = 1;
	public const Category AnySingleline = 2;
	public const Category Word = 3;
	public const Category Digit = 4;
	public const Category WhiteSpace = 5;
	public const Category EcmaAny = 6;
	public const Category EcmaAnySingleline = 7;
	public const Category EcmaWord = 8;
	public const Category EcmaDigit = 9;
	public const Category EcmaWhiteSpace = 10;
	public const Category UnicodeL = 11;
	public const Category UnicodeM = 12;
	public const Category UnicodeN = 13;
	public const Category UnicodeZ = 14;
	public const Category UnicodeP = 15;
	public const Category UnicodeS = 16;
	public const Category UnicodeC = 17;
	public const Category UnicodeLu = 18;
	public const Category UnicodeLl = 19;
	public const Category UnicodeLt = 20;
	public const Category UnicodeLm = 21;
	public const Category UnicodeLo = 22;
	public const Category UnicodeMn = 23;
	public const Category UnicodeMe = 24;
	public const Category UnicodeMc = 25;
	public const Category UnicodeNd = 26;
	public const Category UnicodeNl = 27;
	public const Category UnicodeNo = 28;
	public const Category UnicodeZs = 29;
	public const Category UnicodeZl = 30;
	public const Category UnicodeZp = 31;
	public const Category UnicodePd = 32;
	public const Category UnicodePs = 33;
	public const Category UnicodePi = 34;
	public const Category UnicodePe = 35;
	public const Category UnicodePf = 36;
	public const Category UnicodePc = 37;
	public const Category UnicodePo = 38;
	public const Category UnicodeSm = 39;
	public const Category UnicodeSc = 40;
	public const Category UnicodeSk = 41;
	public const Category UnicodeSo = 42;
	public const Category UnicodeCc = 43;
	public const Category UnicodeCf = 44;
	public const Category UnicodeCo = 45;
	public const Category UnicodeCs = 46;
	public const Category UnicodeCn = 47;
	public const Category UnicodeBasicLatin = 48;
	public const Category UnicodeLatin1Supplement = 49;
	public const Category UnicodeLatinExtendedA = 50;
	public const Category UnicodeLatinExtendedB = 51;
	public const Category UnicodeIPAExtensions = 52;
	public const Category UnicodeSpacingModifierLetters = 53;
	public const Category UnicodeCombiningDiacriticalMarks = 54;
	public const Category UnicodeGreek = 55;
	public const Category UnicodeCyrillic = 56;
	public const Category UnicodeArmenian = 57;
	public const Category UnicodeHebrew = 58;
	public const Category UnicodeArabic = 59;
	public const Category UnicodeSyriac = 60;
	public const Category UnicodeThaana = 61;
	public const Category UnicodeDevanagari = 62;
	public const Category UnicodeBengali = 63;
	public const Category UnicodeGurmukhi = 64;
	public const Category UnicodeGujarati = 65;
	public const Category UnicodeOriya = 66;
	public const Category UnicodeTamil = 67;
	public const Category UnicodeTelugu = 68;
	public const Category UnicodeKannada = 69;
	public const Category UnicodeMalayalam = 70;
	public const Category UnicodeSinhala = 71;
	public const Category UnicodeThai = 72;
	public const Category UnicodeLao = 73;
	public const Category UnicodeTibetan = 74;
	public const Category UnicodeMyanmar = 75;
	public const Category UnicodeGeorgian = 76;
	public const Category UnicodeHangulJamo = 77;
	public const Category UnicodeEthiopic = 78;
	public const Category UnicodeCherokee = 79;
	public const Category UnicodeUnifiedCanadianAboriginalSyllabics = 80;
	public const Category UnicodeOgham = 81;
	public const Category UnicodeRunic = 82;
	public const Category UnicodeKhmer = 83;
	public const Category UnicodeMongolian = 84;
	public const Category UnicodeLatinExtendedAdditional = 85;
	public const Category UnicodeGreekExtended = 86;
	public const Category UnicodeGeneralPunctuation = 87;
	public const Category UnicodeSuperscriptsandSubscripts = 88;
	public const Category UnicodeCurrencySymbols = 89;
	public const Category UnicodeCombiningMarksforSymbols = 90;
	public const Category UnicodeLetterlikeSymbols = 91;
	public const Category UnicodeNumberForms = 92;
	public const Category UnicodeArrows = 93;
	public const Category UnicodeMathematicalOperators = 94;
	public const Category UnicodeMiscellaneousTechnical = 95;
	public const Category UnicodeControlPictures = 96;
	public const Category UnicodeOpticalCharacterRecognition = 97;
	public const Category UnicodeEnclosedAlphanumerics = 98;
	public const Category UnicodeBoxDrawing = 99;
	public const Category UnicodeBlockElements = 100;
	public const Category UnicodeGeometricShapes = 101;
	public const Category UnicodeMiscellaneousSymbols = 102;
	public const Category UnicodeDingbats = 103;
	public const Category UnicodeBraillePatterns = 104;
	public const Category UnicodeCJKRadicalsSupplement = 105;
	public const Category UnicodeKangxiRadicals = 106;
	public const Category UnicodeIdeographicDescriptionCharacters = 107;
	public const Category UnicodeCJKSymbolsandPunctuation = 108;
	public const Category UnicodeHiragana = 109;
	public const Category UnicodeKatakana = 110;
	public const Category UnicodeBopomofo = 111;
	public const Category UnicodeHangulCompatibilityJamo = 112;
	public const Category UnicodeKanbun = 113;
	public const Category UnicodeBopomofoExtended = 114;
	public const Category UnicodeEnclosedCJKLettersandMonths = 115;
	public const Category UnicodeCJKCompatibility = 116;
	public const Category UnicodeCJKUnifiedIdeographsExtensionA = 117;
	public const Category UnicodeCJKUnifiedIdeographs = 118;
	public const Category UnicodeYiSyllables = 119;
	public const Category UnicodeYiRadicals = 120;
	public const Category UnicodeHangulSyllables = 121;
	public const Category UnicodeHighSurrogates = 122;
	public const Category UnicodeHighPrivateUseSurrogates = 123;
	public const Category UnicodeLowSurrogates = 124;
	public const Category UnicodePrivateUse = 125;
	public const Category UnicodeCJKCompatibilityIdeographs = 126;
	public const Category UnicodeAlphabeticPresentationForms = 127;
	public const Category UnicodeArabicPresentationFormsA = 128;
	public const Category UnicodeCombiningHalfMarks = 129;
	public const Category UnicodeCJKCompatibilityForms = 130;
	public const Category UnicodeSmallFormVariants = 131;
	public const Category UnicodeArabicPresentationFormsB = 132;
	public const Category UnicodeSpecials = 133;
	public const Category UnicodeHalfwidthandFullwidthForms = 134;
	public const Category UnicodeOldItalic = 135;
	public const Category UnicodeGothic = 136;
	public const Category UnicodeDeseret = 137;
	public const Category UnicodeByzantineMusicalSymbols = 138;
	public const Category UnicodeMusicalSymbols = 139;
	public const Category UnicodeMathematicalAlphanumericSymbols = 140;
	public const Category UnicodeCJKUnifiedIdeographsExtensionB = 141;
	public const Category UnicodeCJKCompatibilityIdeographsSupplement = 142;
	public const Category UnicodeTags = 143;
	public const Category LastValue = 144;
}

// Namespace: System.Text.RegularExpressions
internal class CategoryUtils // TypeDefIndex: 1070
{
	// Methods

	// RVA: 0x4B7DAC Offset: 0x4B7DAC VA: 0x4B7DAC
	public static Category CategoryFromName(string name) { }

	// RVA: 0x4B7FE0 Offset: 0x4B7FE0 VA: 0x4B7FE0
	public static bool IsCategory(Category cat, char c) { }

	// RVA: 0x4B8CEC Offset: 0x4B8CEC VA: 0x4B8CEC
	private static bool IsCategory(UnicodeCategory uc, char c) { }
}

// Namespace: System.Text.RegularExpressions
internal abstract class LinkRef // TypeDefIndex: 1071
{
	// Methods

	// RVA: 0x4BFA94 Offset: 0x4BFA94 VA: 0x4BFA94
	protected void .ctor() { }
}

// Namespace: System.Text.RegularExpressions
internal interface ICompiler // TypeDefIndex: 1072
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMachineFactory GetMachineFactory();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void EmitFalse();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void EmitTrue();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void EmitCharacter(char c, bool negate, bool ignore, bool reverse);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void EmitCategory(Category cat, bool negate, bool reverse);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void EmitNotCategory(Category cat, bool negate, bool reverse);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void EmitRange(char lo, char hi, bool negate, bool ignore, bool reverse);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void EmitSet(char lo, BitArray set, bool negate, bool ignore, bool reverse);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract void EmitString(string str, bool ignore, bool reverse);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract void EmitPosition(Position pos);

	// RVA: -1 Offset: -1 Slot: 10
	public abstract void EmitOpen(int gid);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract void EmitClose(int gid);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract void EmitBalanceStart(int gid, int balance, bool capture, LinkRef tail);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract void EmitBalance();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract void EmitReference(int gid, bool ignore, bool reverse);

	// RVA: -1 Offset: -1 Slot: 15
	public abstract void EmitIfDefined(int gid, LinkRef tail);

	// RVA: -1 Offset: -1 Slot: 16
	public abstract void EmitSub(LinkRef tail);

	// RVA: -1 Offset: -1 Slot: 17
	public abstract void EmitTest(LinkRef yes, LinkRef tail);

	// RVA: -1 Offset: -1 Slot: 18
	public abstract void EmitBranch(LinkRef next);

	// RVA: -1 Offset: -1 Slot: 19
	public abstract void EmitJump(LinkRef target);

	// RVA: -1 Offset: -1 Slot: 20
	public abstract void EmitRepeat(int min, int max, bool lazy, LinkRef until);

	// RVA: -1 Offset: -1 Slot: 21
	public abstract void EmitUntil(LinkRef repeat);

	// RVA: -1 Offset: -1 Slot: 22
	public abstract void EmitIn(LinkRef tail);

	// RVA: -1 Offset: -1 Slot: 23
	public abstract void EmitInfo(int count, int min, int max);

	// RVA: -1 Offset: -1 Slot: 24
	public abstract void EmitFastRepeat(int min, int max, bool lazy, LinkRef tail);

	// RVA: -1 Offset: -1 Slot: 25
	public abstract void EmitAnchor(bool reverse, int offset, LinkRef tail);

	// RVA: -1 Offset: -1 Slot: 26
	public abstract void EmitBranchEnd();

	// RVA: -1 Offset: -1 Slot: 27
	public abstract void EmitAlternationEnd();

	// RVA: -1 Offset: -1 Slot: 28
	public abstract LinkRef NewLink();

	// RVA: -1 Offset: -1 Slot: 29
	public abstract void ResolveLink(LinkRef link);
}

// Namespace: System.Text.RegularExpressions
internal class InterpreterFactory : IMachineFactory // TypeDefIndex: 1073
{
	// Fields
	private IDictionary mapping; // 0x8
	private ushort[] pattern; // 0xC
	private string[] namesMapping; // 0x10
	private int gap; // 0x14

	// Properties
	public int GroupCount { get; }
	public int Gap { get; set; }
	public IDictionary Mapping { get; set; }
	public string[] NamesMapping { get; set; }

	// Methods

	// RVA: 0x4BE418 Offset: 0x4BE418 VA: 0x4BE418
	public void .ctor(ushort[] pattern) { }

	// RVA: 0x4BE438 Offset: 0x4BE438 VA: 0x4BE438 Slot: 4
	public IMachine NewInstance() { }

	// RVA: 0x4BE4AC Offset: 0x4BE4AC VA: 0x4BE4AC Slot: 7
	public int get_GroupCount() { }

	// RVA: 0x4BE4EC Offset: 0x4BE4EC VA: 0x4BE4EC Slot: 8
	public int get_Gap() { }

	// RVA: 0x4BE4F4 Offset: 0x4BE4F4 VA: 0x4BE4F4 Slot: 9
	public void set_Gap(int value) { }

	// RVA: 0x4BE4FC Offset: 0x4BE4FC VA: 0x4BE4FC Slot: 5
	public IDictionary get_Mapping() { }

	// RVA: 0x4BE504 Offset: 0x4BE504 VA: 0x4BE504 Slot: 6
	public void set_Mapping(IDictionary value) { }

	// RVA: 0x4BE50C Offset: 0x4BE50C VA: 0x4BE50C Slot: 10
	public string[] get_NamesMapping() { }

	// RVA: 0x4BE514 Offset: 0x4BE514 VA: 0x4BE514 Slot: 11
	public void set_NamesMapping(string[] value) { }
}

// Namespace: System.Text.RegularExpressions
internal class PatternCompiler : ICompiler // TypeDefIndex: 1074
{
	// Fields
	private ArrayList pgm; // 0x8

	// Properties
	private int CurrentAddress { get; }

	// Methods

	// RVA: 0x4C0A64 Offset: 0x4C0A64 VA: 0x4C0A64
	public void .ctor() { }

	// RVA: 0x4C0AE0 Offset: 0x4C0AE0 VA: 0x4C0AE0
	public static ushort EncodeOp(OpCode op, OpFlags flags) { }

	// RVA: 0x4C0AEC Offset: 0x4C0AEC VA: 0x4C0AEC Slot: 4
	public IMachineFactory GetMachineFactory() { }

	// RVA: 0x4C0BD0 Offset: 0x4C0BD0 VA: 0x4C0BD0 Slot: 5
	public void EmitFalse() { }

	// RVA: 0x4C0BDC Offset: 0x4C0BDC VA: 0x4C0BDC Slot: 6
	public void EmitTrue() { }

	// RVA: 0x4C0BE4 Offset: 0x4C0BE4 VA: 0x4C0BE4
	private void EmitCount(int count) { }

	// RVA: 0x4C0CB0 Offset: 0x4C0CB0 VA: 0x4C0CB0 Slot: 7
	public void EmitCharacter(char c, bool negate, bool ignore, bool reverse) { }

	// RVA: 0x4C0DA4 Offset: 0x4C0DA4 VA: 0x4C0DA4 Slot: 8
	public void EmitCategory(Category cat, bool negate, bool reverse) { }

	// RVA: 0x4C0DD8 Offset: 0x4C0DD8 VA: 0x4C0DD8 Slot: 9
	public void EmitNotCategory(Category cat, bool negate, bool reverse) { }

	// RVA: 0x4C0E0C Offset: 0x4C0E0C VA: 0x4C0E0C Slot: 10
	public void EmitRange(char lo, char hi, bool negate, bool ignore, bool reverse) { }

	// RVA: 0x4C0E64 Offset: 0x4C0E64 VA: 0x4C0E64 Slot: 11
	public void EmitSet(char lo, BitArray set, bool negate, bool ignore, bool reverse) { }

	// RVA: 0x4C0F90 Offset: 0x4C0F90 VA: 0x4C0F90 Slot: 12
	public void EmitString(string str, bool ignore, bool reverse) { }

	// RVA: 0x4C105C Offset: 0x4C105C VA: 0x4C105C Slot: 13
	public void EmitPosition(Position pos) { }

	// RVA: 0x4C1084 Offset: 0x4C1084 VA: 0x4C1084 Slot: 14
	public void EmitOpen(int gid) { }

	// RVA: 0x4C10AC Offset: 0x4C10AC VA: 0x4C10AC Slot: 15
	public void EmitClose(int gid) { }

	// RVA: 0x4C10D4 Offset: 0x4C10D4 VA: 0x4C10D4 Slot: 16
	public void EmitBalanceStart(int gid, int balance, bool capture, LinkRef tail) { }

	// RVA: 0x4C13DC Offset: 0x4C13DC VA: 0x4C13DC Slot: 17
	public void EmitBalance() { }

	// RVA: 0x4C13E4 Offset: 0x4C13E4 VA: 0x4C13E4 Slot: 18
	public void EmitReference(int gid, bool ignore, bool reverse) { }

	// RVA: 0x4C1418 Offset: 0x4C1418 VA: 0x4C1418 Slot: 19
	public void EmitIfDefined(int gid, LinkRef tail) { }

	// RVA: 0x4C145C Offset: 0x4C145C VA: 0x4C145C Slot: 20
	public void EmitSub(LinkRef tail) { }

	// RVA: 0x4C148C Offset: 0x4C148C VA: 0x4C148C Slot: 21
	public void EmitTest(LinkRef yes, LinkRef tail) { }

	// RVA: 0x4C14D8 Offset: 0x4C14D8 VA: 0x4C14D8 Slot: 22
	public void EmitBranch(LinkRef next) { }

	// RVA: 0x4C1508 Offset: 0x4C1508 VA: 0x4C1508 Slot: 23
	public void EmitJump(LinkRef target) { }

	// RVA: 0x4C1538 Offset: 0x4C1538 VA: 0x4C1538 Slot: 24
	public void EmitRepeat(int min, int max, bool lazy, LinkRef until) { }

	// RVA: 0x4C15B0 Offset: 0x4C15B0 VA: 0x4C15B0 Slot: 25
	public void EmitUntil(LinkRef repeat) { }

	// RVA: 0x4C1780 Offset: 0x4C1780 VA: 0x4C1780 Slot: 28
	public void EmitFastRepeat(int min, int max, bool lazy, LinkRef tail) { }

	// RVA: 0x4C17F8 Offset: 0x4C17F8 VA: 0x4C17F8 Slot: 26
	public void EmitIn(LinkRef tail) { }

	// RVA: 0x4C1828 Offset: 0x4C1828 VA: 0x4C1828 Slot: 29
	public void EmitAnchor(bool reverse, int offset, LinkRef tail) { }

	// RVA: 0x4C1878 Offset: 0x4C1878 VA: 0x4C1878 Slot: 27
	public void EmitInfo(int count, int min, int max) { }

	// RVA: 0x4C18E4 Offset: 0x4C18E4 VA: 0x4C18E4 Slot: 32
	public LinkRef NewLink() { }

	// RVA: 0x4C15D0 Offset: 0x4C15D0 VA: 0x4C15D0 Slot: 33
	public void ResolveLink(LinkRef lref) { }

	// RVA: 0x4C1998 Offset: 0x4C1998 VA: 0x4C1998 Slot: 30
	public void EmitBranchEnd() { }

	// RVA: 0x4C199C Offset: 0x4C199C VA: 0x4C199C Slot: 31
	public void EmitAlternationEnd() { }

	// RVA: 0x4C0D7C Offset: 0x4C0D7C VA: 0x4C0D7C
	private static OpFlags MakeFlags(bool negate, bool ignore, bool reverse, bool lazy) { }

	// RVA: 0x4C0BD8 Offset: 0x4C0BD8 VA: 0x4C0BD8
	private void Emit(OpCode op) { }

	// RVA: 0x4C0D98 Offset: 0x4C0D98 VA: 0x4C0D98
	private void Emit(OpCode op, OpFlags flags) { }

	// RVA: 0x4C0C0C Offset: 0x4C0C0C VA: 0x4C0C0C
	private void Emit(ushort word) { }

	// RVA: 0x4C1958 Offset: 0x4C1958 VA: 0x4C1958
	private int get_CurrentAddress() { }

	// RVA: 0x4C1148 Offset: 0x4C1148 VA: 0x4C1148
	private void BeginLink(LinkRef lref) { }

	// RVA: 0x4C1278 Offset: 0x4C1278 VA: 0x4C1278
	private void EmitLink(LinkRef lref) { }
}

// Namespace: 
private class PatternCompiler.PatternLinkStack : LinkStack // TypeDefIndex: 1075
{
	// Fields
	private PatternCompiler.PatternLinkStack.Link link; // 0xC

	// Properties
	public int BaseAddress { set; }
	public int OffsetAddress { get; set; }

	// Methods

	// RVA: 0x4C194C Offset: 0x4C194C VA: 0x4C194C
	public void .ctor() { }

	// RVA: 0x4C19A0 Offset: 0x4C19A0 VA: 0x4C19A0
	public void set_BaseAddress(int value) { }

	// RVA: 0x4C1950 Offset: 0x4C1950 VA: 0x4C1950
	public int get_OffsetAddress() { }

	// RVA: 0x4C19A8 Offset: 0x4C19A8 VA: 0x4C19A8
	public void set_OffsetAddress(int value) { }

	// RVA: 0x4C198C Offset: 0x4C198C VA: 0x4C198C
	public int GetOffset(int target_addr) { }

	// RVA: 0x4C19B0 Offset: 0x4C19B0 VA: 0x4C19B0 Slot: 4
	protected override object GetCurrent() { }

	// RVA: 0x4C1A28 Offset: 0x4C1A28 VA: 0x4C1A28 Slot: 5
	protected override void SetCurrent(object l) { }
}

// Namespace: 
private struct PatternCompiler.PatternLinkStack.Link // TypeDefIndex: 1076
{
	// Fields
	public int base_addr; // 0x0
	public int offset_addr; // 0x4
}

// Namespace: System.Text.RegularExpressions
internal abstract class LinkStack : LinkRef // TypeDefIndex: 1077
{
	// Fields
	private Stack stack; // 0x8

	// Methods

	// RVA: 0x4BFA9C Offset: 0x4BFA9C VA: 0x4BFA9C
	public void .ctor() { }

	// RVA: 0x4BFB18 Offset: 0x4BFB18 VA: 0x4BFB18
	public void Push() { }

	// RVA: 0x4BFB64 Offset: 0x4BFB64 VA: 0x4BFB64
	public bool Pop() { }

	// RVA: -1 Offset: -1 Slot: 4
	protected abstract object GetCurrent();

	// RVA: -1 Offset: -1 Slot: 5
	protected abstract void SetCurrent(object l);
}

// Namespace: System.Text.RegularExpressions
internal struct Mark // TypeDefIndex: 1078
{
	// Fields
	public int Start; // 0x0
	public int End; // 0x4
	public int Previous; // 0x8

	// Properties
	public bool IsDefined { get; }
	public int Index { get; }
	public int Length { get; }

	// Methods

	// RVA: 0xF0258 Offset: 0xF0258 VA: 0xF0258
	public bool get_IsDefined() { }

	// RVA: 0xF027C Offset: 0xF027C VA: 0xF027C
	public int get_Index() { }

	// RVA: 0xF0290 Offset: 0xF0290 VA: 0xF0290
	public int get_Length() { }
}

// Namespace: System.Text.RegularExpressions
internal class Interpreter : BaseMachine // TypeDefIndex: 1079
{
	// Fields
	private ushort[] program; // 0xC
	private int program_start; // 0x10
	private string text; // 0x14
	private int text_end; // 0x18
	private int group_count; // 0x1C
	private int match_min; // 0x20
	private QuickSearch qs; // 0x24
	private int scan_ptr; // 0x28
	private Interpreter.RepeatContext repeat; // 0x2C
	private Interpreter.RepeatContext fast; // 0x30
	private Interpreter.IntStack stack; // 0x34
	private Interpreter.RepeatContext deep; // 0x3C
	private Mark[] marks; // 0x40
	private int mark_start; // 0x44
	private int mark_end; // 0x48
	private int[] groups; // 0x4C

	// Methods

	// RVA: 0x4BA07C Offset: 0x4BA07C VA: 0x4BA07C
	public void .ctor(ushort[] program) { }

	// RVA: 0x4BA13C Offset: 0x4BA13C VA: 0x4BA13C
	private int ReadProgramCount(int ptr) { }

	// RVA: 0x4BA1CC Offset: 0x4BA1CC VA: 0x4BA1CC Slot: 5
	public override Match Scan(Regex regex, string text, int start, int end) { }

	// RVA: 0x4BC388 Offset: 0x4BC388 VA: 0x4BC388
	private void Reset() { }

	// RVA: 0x4BA29C Offset: 0x4BA29C VA: 0x4BA29C
	private bool Eval(Interpreter.Mode mode, ref int ref_ptr, int pc) { }

	// RVA: 0x4BD05C Offset: 0x4BD05C VA: 0x4BD05C
	private bool EvalChar(Interpreter.Mode mode, ref int ptr, ref int pc, bool multi) { }

	// RVA: 0x4BC548 Offset: 0x4BC548 VA: 0x4BC548
	private bool TryMatch(ref int ref_ptr, int pc) { }

	// RVA: 0x4BCCA4 Offset: 0x4BCCA4 VA: 0x4BCCA4
	private bool IsPosition(Position pos, int ptr) { }

	// RVA: 0x4BDD18 Offset: 0x4BDD18 VA: 0x4BDD18
	private bool IsWordChar(char c) { }

	// RVA: 0x4BC690 Offset: 0x4BC690 VA: 0x4BC690
	private string GetString(int pc) { }

	// RVA: 0x4BD50C Offset: 0x4BD50C VA: 0x4BD50C
	private void Open(int gid, int ptr) { }

	// RVA: 0x4BD640 Offset: 0x4BD640 VA: 0x4BD640
	private void Close(int gid, int ptr) { }

	// RVA: 0x4BD6C8 Offset: 0x4BD6C8 VA: 0x4BD6C8
	private bool Balance(int gid, int balance_gid, bool capture, int ptr) { }

	// RVA: 0x4BD8BC Offset: 0x4BD8BC VA: 0x4BD8BC
	private int Checkpoint() { }

	// RVA: 0x4BD8CC Offset: 0x4BD8CC VA: 0x4BD8CC
	private void Backtrack(int cp) { }

	// RVA: 0x4BC3A8 Offset: 0x4BC3A8 VA: 0x4BC3A8
	private void ResetGroups() { }

	// RVA: 0x4BCF58 Offset: 0x4BCF58 VA: 0x4BCF58
	private int GetLastDefined(int gid) { }

	// RVA: 0x4BDD44 Offset: 0x4BDD44 VA: 0x4BDD44
	private int CreateMark(int previous) { }

	// RVA: 0x4BDED8 Offset: 0x4BDED8 VA: 0x4BDED8
	private void GetGroupInfo(int gid, out int first_mark_index, out int n_caps) { }

	// RVA: 0x4BDFE4 Offset: 0x4BDFE4 VA: 0x4BDFE4
	private void PopulateGroup(Group g, int first_mark_index, int n_caps) { }

	// RVA: 0x4BBF2C Offset: 0x4BBF2C VA: 0x4BBF2C
	private Match GenerateMatch(Regex regex) { }
}

// Namespace: 
private struct Interpreter.IntStack // TypeDefIndex: 1080
{
	// Fields
	private int[] values; // 0x0
	private int count; // 0x4

	// Properties
	public int Count { get; set; }

	// Methods

	// RVA: 0xEFFF4 Offset: 0xEFFF4 VA: 0xEFFF4
	public int Pop() { }

	// RVA: 0xEFFFC Offset: 0xEFFFC VA: 0xEFFFC
	public void Push(int value) { }

	// RVA: 0xF0004 Offset: 0xF0004 VA: 0xF0004
	public int get_Count() { }

	// RVA: 0xF000C Offset: 0xF000C VA: 0xF000C
	public void set_Count(int value) { }
}

// Namespace: 
private class Interpreter.RepeatContext // TypeDefIndex: 1081
{
	// Fields
	private int start; // 0x8
	private int min; // 0xC
	private int max; // 0x10
	private bool lazy; // 0x14
	private int expr_pc; // 0x18
	private Interpreter.RepeatContext previous; // 0x1C
	private int count; // 0x20

	// Properties
	public int Count { get; set; }
	public int Start { get; set; }
	public bool IsMinimum { get; }
	public bool IsMaximum { get; }
	public bool IsLazy { get; }
	public int Expression { get; }
	public Interpreter.RepeatContext Previous { get; }

	// Methods

	// RVA: 0x4BD9C4 Offset: 0x4BD9C4 VA: 0x4BD9C4
	public void .ctor(Interpreter.RepeatContext previous, int min, int max, bool lazy, int expr_pc) { }

	// RVA: 0x4BDA20 Offset: 0x4BDA20 VA: 0x4BDA20
	public int get_Count() { }

	// RVA: 0x4BDA28 Offset: 0x4BDA28 VA: 0x4BDA28
	public void set_Count(int value) { }

	// RVA: 0x4BDA18 Offset: 0x4BDA18 VA: 0x4BDA18
	public int get_Start() { }

	// RVA: 0x4BDA30 Offset: 0x4BDA30 VA: 0x4BDA30
	public void set_Start(int value) { }

	// RVA: 0x4BDA40 Offset: 0x4BDA40 VA: 0x4BDA40
	public bool get_IsMinimum() { }

	// RVA: 0x4BDA60 Offset: 0x4BDA60 VA: 0x4BDA60
	public bool get_IsMaximum() { }

	// RVA: 0x4BDA58 Offset: 0x4BDA58 VA: 0x4BDA58
	public bool get_IsLazy() { }

	// RVA: 0x4BDA38 Offset: 0x4BDA38 VA: 0x4BDA38
	public int get_Expression() { }

	// RVA: 0x4BDA10 Offset: 0x4BDA10 VA: 0x4BDA10
	public Interpreter.RepeatContext get_Previous() { }
}

// Namespace: 
private enum Interpreter.Mode // TypeDefIndex: 1082
{
	// Fields
	public int value__; // 0x0
	public const Interpreter.Mode Search = 0;
	public const Interpreter.Mode Match = 1;
	public const Interpreter.Mode Count = 2;
}

// Namespace: System.Text.RegularExpressions
internal struct Interval : IComparable // TypeDefIndex: 1083
{
	// Fields
	public int low; // 0x0
	public int high; // 0x4
	public bool contiguous; // 0x8

	// Properties
	public static Interval Empty { get; }
	public bool IsDiscontiguous { get; }
	public bool IsSingleton { get; }
	public bool IsEmpty { get; }
	public int Size { get; }

	// Methods

	// RVA: 0xF0058 Offset: 0xF0058 VA: 0xF0058
	public void .ctor(int low, int high) { }

	// RVA: 0x4BE53C Offset: 0x4BE53C VA: 0x4BE53C
	public static Interval get_Empty() { }

	// RVA: 0xF007C Offset: 0xF007C VA: 0xF007C
	public bool get_IsDiscontiguous() { }

	// RVA: 0xF0090 Offset: 0xF0090 VA: 0xF0090
	public bool get_IsSingleton() { }

	// RVA: 0xF00B8 Offset: 0xF00B8 VA: 0xF00B8
	public bool get_IsEmpty() { }

	// RVA: 0xF00D0 Offset: 0xF00D0 VA: 0xF00D0
	public int get_Size() { }

	// RVA: 0xF00EC Offset: 0xF00EC VA: 0xF00EC
	public bool IsDisjoint(Interval i) { }

	// RVA: 0xF0128 Offset: 0xF0128 VA: 0xF0128
	public bool IsAdjacent(Interval i) { }

	// RVA: 0xF016C Offset: 0xF016C VA: 0xF016C
	public bool Contains(Interval i) { }

	// RVA: 0xF01B8 Offset: 0xF01B8 VA: 0xF01B8
	public bool Contains(int i) { }

	// RVA: 0xF01E0 Offset: 0xF01E0 VA: 0xF01E0
	public bool Intersects(Interval i) { }

	// RVA: 0xF01FC Offset: 0xF01FC VA: 0xF01FC
	public void Merge(Interval i) { }

	// RVA: 0xF0234 Offset: 0xF0234 VA: 0xF0234 Slot: 4
	public int CompareTo(object o) { }
}

// Namespace: System.Text.RegularExpressions
[DefaultMemberAttribute] // RVA: 0x9EA34 Offset: 0x9EA34 VA: 0x9EA34
internal class IntervalCollection : ICollection, IEnumerable // TypeDefIndex: 1084
{
	// Fields
	private ArrayList intervals; // 0x8

	// Properties
	public Interval Item { get; }
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x4BE7CC Offset: 0x4BE7CC VA: 0x4BE7CC
	public void .ctor() { }

	// RVA: 0x4BE848 Offset: 0x4BE848 VA: 0x4BE848
	public Interval get_Item(int i) { }

	// RVA: 0x4BE8EC Offset: 0x4BE8EC VA: 0x4BE8EC
	public void Add(Interval i) { }

	// RVA: 0x4BE99C Offset: 0x4BE99C VA: 0x4BE99C
	public void Normalize() { }

	// RVA: 0x4BEBD8 Offset: 0x4BEBD8 VA: 0x4BEBD8
	public IntervalCollection GetMetaCollection(IntervalCollection.CostDelegate cost_del) { }

	// RVA: 0x4BED04 Offset: 0x4BED04 VA: 0x4BED04
	private void Optimize(int begin, int end, IntervalCollection meta, IntervalCollection.CostDelegate cost_del) { }

	// RVA: 0x4BECD0 Offset: 0x4BECD0 VA: 0x4BECD0 Slot: 4
	public int get_Count() { }

	// RVA: 0x4BF1DC Offset: 0x4BF1DC VA: 0x4BF1DC Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x4BF1E4 Offset: 0x4BF1E4 VA: 0x4BF1E4 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x4BF1EC Offset: 0x4BF1EC VA: 0x4BF1EC Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0x4BF560 Offset: 0x4BF560 VA: 0x4BF560 Slot: 8
	public IEnumerator GetEnumerator() { }
}

// Namespace: 
private class IntervalCollection.Enumerator : IEnumerator // TypeDefIndex: 1085
{
	// Fields
	private IList list; // 0x8
	private int ptr; // 0xC

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x4BF5E0 Offset: 0x4BF5E0 VA: 0x4BF5E0
	public void .ctor(IList list) { }

	// RVA: 0x4BF708 Offset: 0x4BF708 VA: 0x4BF708 Slot: 4
	public object get_Current() { }

	// RVA: 0x4BF8C4 Offset: 0x4BF8C4 VA: 0x4BF8C4 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x4BF6FC Offset: 0x4BF6FC VA: 0x4BF6FC Slot: 6
	public void Reset() { }
}

// Namespace: 
public sealed class IntervalCollection.CostDelegate : MulticastDelegate // TypeDefIndex: 1086
{
	// Methods

	// RVA: 0x4BF608 Offset: 0x4BF608 VA: 0x4BF608
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x4BEF50 Offset: 0x4BEF50 VA: 0x4BEF50 Slot: 11
	public virtual double Invoke(Interval i) { }

	// RVA: 0x4BF61C Offset: 0x4BF61C VA: 0x4BF61C Slot: 12
	public virtual IAsyncResult BeginInvoke(Interval i, AsyncCallback callback, object object) { }

	// RVA: 0x4BF6C0 Offset: 0x4BF6C0 VA: 0x4BF6C0 Slot: 13
	public virtual double EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Parser // TypeDefIndex: 1087
{
	// Fields
	private string pattern; // 0x8
	private int ptr; // 0xC
	private ArrayList caps; // 0x10
	private Hashtable refs; // 0x14
	private int num_groups; // 0x18
	private int gap; // 0x1C

	// Methods

	// RVA: 0x4C2F80 Offset: 0x4C2F80 VA: 0x4C2F80
	public void .ctor() { }

	// RVA: 0x4C9AF0 Offset: 0x4C9AF0 VA: 0x4C9AF0
	public static int ParseDecimal(string str, ref int ptr) { }

	// RVA: 0x4C5408 Offset: 0x4C5408 VA: 0x4C5408
	public static int ParseOctal(string str, ref int ptr) { }

	// RVA: 0x4C9C0C Offset: 0x4C9C0C VA: 0x4C9C0C
	public static int ParseHex(string str, ref int ptr, int digits) { }

	// RVA: 0x4C9B18 Offset: 0x4C9B18 VA: 0x4C9B18
	public static int ParseNumber(string str, ref int ptr, int b, int min, int max) { }

	// RVA: 0x4C9CD0 Offset: 0x4C9CD0 VA: 0x4C9CD0
	public static string ParseName(string str, ref int ptr) { }

	// RVA: 0x4C3020 Offset: 0x4C3020 VA: 0x4C3020
	public RegularExpression ParseRegularExpression(string pattern, RegexOptions options) { }

	// RVA: 0x4C31F4 Offset: 0x4C31F4 VA: 0x4C31F4
	public int GetMapping(Hashtable mapping) { }

	// RVA: 0x4C9F4C Offset: 0x4C9F4C VA: 0x4C9F4C
	private void ParseGroup(Group group, RegexOptions options, Assertion assertion) { }

	// RVA: 0x4CD414 Offset: 0x4CD414 VA: 0x4CD414
	private Expression ParseGroupingConstruct(ref RegexOptions options) { }

	// RVA: 0x4CE128 Offset: 0x4CE128 VA: 0x4CE128
	private bool ParseAssertionType(ExpressionAssertion assertion) { }

	// RVA: 0x4CE044 Offset: 0x4CE044 VA: 0x4CE044
	private void ParseOptions(ref RegexOptions options, bool negate) { }

	// RVA: 0x4CCCB0 Offset: 0x4CCCB0 VA: 0x4CCCB0
	private Expression ParseCharacterClass(RegexOptions options) { }

	// RVA: 0x4CDD94 Offset: 0x4CDD94 VA: 0x4CDD94
	private bool ParseRepetitionBounds(out int min, out int max, RegexOptions options) { }

	// RVA: 0x4CE2A8 Offset: 0x4CE2A8 VA: 0x4CE2A8
	private Category ParseUnicodeCategory() { }

	// RVA: 0x4CC624 Offset: 0x4CC624 VA: 0x4CC624
	private Expression ParseSpecial(RegexOptions options) { }

	// RVA: 0x4CC2A8 Offset: 0x4CC2A8 VA: 0x4CC2A8
	private int ParseEscape() { }

	// RVA: 0x4CE290 Offset: 0x4CE290 VA: 0x4CE290
	private string ParseName() { }

	// RVA: 0x4C9E54 Offset: 0x4C9E54 VA: 0x4C9E54
	private static bool IsNameChar(char c) { }

	// RVA: 0x4CE490 Offset: 0x4CE490 VA: 0x4CE490
	private int ParseNumber(int b, int min, int max) { }

	// RVA: 0x4C9C30 Offset: 0x4C9C30 VA: 0x4C9C30
	private static int ParseDigit(char c, int b, int n) { }

	// RVA: 0x4CBF0C Offset: 0x4CBF0C VA: 0x4CBF0C
	private void ConsumeWhitespace(bool ignore) { }

	// RVA: 0x4CAA04 Offset: 0x4CAA04 VA: 0x4CAA04
	private void ResolveReferences() { }

	// RVA: 0x4CE4C8 Offset: 0x4CE4C8 VA: 0x4CE4C8
	private void HandleExplicitNumericGroups(ArrayList explicit_numeric_groups) { }

	// RVA: 0x4CD40C Offset: 0x4CD40C VA: 0x4CD40C
	private static bool IsIgnoreCase(RegexOptions options) { }

	// RVA: 0x4CC278 Offset: 0x4CC278 VA: 0x4CC278
	private static bool IsMultiline(RegexOptions options) { }

	// RVA: 0x4CE03C Offset: 0x4CE03C VA: 0x4CE03C
	private static bool IsExplicitCapture(RegexOptions options) { }

	// RVA: 0x4CC2A0 Offset: 0x4CC2A0 VA: 0x4CC2A0
	private static bool IsSingleline(RegexOptions options) { }

	// RVA: 0x4CBF04 Offset: 0x4CBF04 VA: 0x4CBF04
	private static bool IsIgnorePatternWhitespace(RegexOptions options) { }

	// RVA: 0x4CE2A0 Offset: 0x4CE2A0 VA: 0x4CE2A0
	private static bool IsECMAScript(RegexOptions options) { }

	// RVA: 0x4CBE14 Offset: 0x4CBE14 VA: 0x4CBE14
	private ArgumentException NewParseException(string msg) { }
}

// Namespace: System.Text.RegularExpressions
internal class QuickSearch // TypeDefIndex: 1088
{
	// Fields
	private string str; // 0x8
	private int len; // 0xC
	private bool ignore; // 0x10
	private bool reverse; // 0x11
	private byte[] shift; // 0x14
	private Hashtable shiftExtended; // 0x18
	private static readonly int THRESHOLD; // 0x0

	// Properties
	public int Length { get; }

	// Methods

	// RVA: 0x4BC800 Offset: 0x4BC800 VA: 0x4BC800
	public void .ctor(string str, bool ignore, bool reverse) { }

	// RVA: 0x4C1D2C Offset: 0x4C1D2C VA: 0x4C1D2C
	private static void .cctor() { }

	// RVA: 0x4BCC9C Offset: 0x4BCC9C VA: 0x4BCC9C
	public int get_Length() { }

	// RVA: 0x4BC910 Offset: 0x4BC910 VA: 0x4BC910
	public int Search(string text, int start, int end) { }

	// RVA: 0x4C1AA0 Offset: 0x4C1AA0 VA: 0x4C1AA0
	private void SetupShiftTable() { }

	// RVA: 0x4C1E30 Offset: 0x4C1E30 VA: 0x4C1E30
	private int GetShiftDistance(char c) { }

	// RVA: 0x4C1D94 Offset: 0x4C1D94 VA: 0x4C1D94
	private char GetChar(char c) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
[DefaultMemberAttribute] // RVA: 0x9EA68 Offset: 0x9EA68 VA: 0x9EA68
internal class ExpressionCollection : CollectionBase // TypeDefIndex: 1089
{
	// Properties
	public Expression Item { get; set; }

	// Methods

	// RVA: 0x4C7BB0 Offset: 0x4C7BB0 VA: 0x4C7BB0
	public void .ctor() { }

	// RVA: 0x4C3FE8 Offset: 0x4C3FE8 VA: 0x4C3FE8
	public void Add(Expression e) { }

	// RVA: 0x4C4D34 Offset: 0x4C4D34 VA: 0x4C4D34
	public Expression get_Item(int i) { }

	// RVA: 0x4C4EFC Offset: 0x4C4EFC VA: 0x4C4EFC
	public void set_Item(int i, Expression value) { }

	// RVA: 0x4C8904 Offset: 0x4C8904 VA: 0x4C8904 Slot: 28
	protected override void OnValidate(object o) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal abstract class Expression // TypeDefIndex: 1090
{
	// Methods

	// RVA: 0x4C685C Offset: 0x4C685C VA: 0x4C685C
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Compile(ICompiler cmp, bool reverse);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void GetWidth(out int min, out int max);

	// RVA: 0x4C6308 Offset: 0x4C6308 VA: 0x4C6308
	public int GetFixedWidth() { }

	// RVA: 0x4C7FC0 Offset: 0x4C7FC0 VA: 0x4C7FC0 Slot: 6
	public virtual AnchorInfo GetAnchorInfo(bool reverse) { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool IsComplex();
}

// Namespace: System.Text.RegularExpressions.Syntax
internal abstract class CompositeExpression : Expression // TypeDefIndex: 1091
{
	// Fields
	private ExpressionCollection expressions; // 0x8

	// Properties
	protected ExpressionCollection Expressions { get; }

	// Methods

	// RVA: 0x4C3F2C Offset: 0x4C3F2C VA: 0x4C3F2C
	public void .ctor() { }

	// RVA: 0x4C3FB0 Offset: 0x4C3FB0 VA: 0x4C3FB0
	protected ExpressionCollection get_Expressions() { }

	// RVA: 0x4C49C8 Offset: 0x4C49C8 VA: 0x4C49C8
	protected void GetWidth(out int min, out int max, int count) { }

	// RVA: 0x4C7BB8 Offset: 0x4C7BB8 VA: 0x4C7BB8 Slot: 7
	public override bool IsComplex() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Group : CompositeExpression // TypeDefIndex: 1092
{
	// Methods

	// RVA: 0x4C63B8 Offset: 0x4C63B8 VA: 0x4C63B8
	public void .ctor() { }

	// RVA: 0x4C8908 Offset: 0x4C8908 VA: 0x4C8908
	public void AppendExpression(Expression e) { }

	// RVA: 0x4C6560 Offset: 0x4C6560 VA: 0x4C6560 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x4C8938 Offset: 0x4C8938 VA: 0x4C8938 Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0x4C8CE0 Offset: 0x4C8CE0 VA: 0x4C8CE0 Slot: 6
	public override AnchorInfo GetAnchorInfo(bool reverse) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class RegularExpression : Group // TypeDefIndex: 1093
{
	// Fields
	private int group_count; // 0xC

	// Properties
	public int GroupCount { set; }

	// Methods

	// RVA: 0x4C9F30 Offset: 0x4C9F30 VA: 0x4C9F30
	public void .ctor() { }

	// RVA: 0x4CBE0C Offset: 0x4CBE0C VA: 0x4CBE0C
	public void set_GroupCount(int value) { }

	// RVA: 0x4CE934 Offset: 0x4CE934 VA: 0x4CE934 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class CapturingGroup : Group, IComparable // TypeDefIndex: 1094
{
	// Fields
	private int gid; // 0xC
	private string name; // 0x10

	// Properties
	public int Index { get; set; }
	public string Name { get; set; }
	public bool IsNamed { get; }

	// Methods

	// RVA: 0x4C57DC Offset: 0x4C57DC VA: 0x4C57DC
	public void .ctor() { }

	// RVA: 0x4C5B68 Offset: 0x4C5B68 VA: 0x4C5B68
	public int get_Index() { }

	// RVA: 0x4C63BC Offset: 0x4C63BC VA: 0x4C63BC
	public void set_Index(int value) { }

	// RVA: 0x4C63C4 Offset: 0x4C63C4 VA: 0x4C63C4
	public string get_Name() { }

	// RVA: 0x4C63CC Offset: 0x4C63CC VA: 0x4C63CC
	public void set_Name(string value) { }

	// RVA: 0x4C5B70 Offset: 0x4C5B70 VA: 0x4C5B70
	public bool get_IsNamed() { }

	// RVA: 0x4C63D4 Offset: 0x4C63D4 VA: 0x4C63D4 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x4C6618 Offset: 0x4C6618 VA: 0x4C6618 Slot: 7
	public override bool IsComplex() { }

	// RVA: 0x4C6620 Offset: 0x4C6620 VA: 0x4C6620 Slot: 8
	public int CompareTo(object other) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class BalancingGroup : CapturingGroup // TypeDefIndex: 1095
{
	// Fields
	private CapturingGroup balance; // 0x14

	// Properties
	public CapturingGroup Balance { set; }

	// Methods

	// RVA: 0x4C57B8 Offset: 0x4C57B8 VA: 0x4C57B8
	public void .ctor() { }

	// RVA: 0x4C57FC Offset: 0x4C57FC VA: 0x4C57FC
	public void set_Balance(CapturingGroup value) { }

	// RVA: 0x4C5804 Offset: 0x4C5804 VA: 0x4C5804 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class NonBacktrackingGroup : Group // TypeDefIndex: 1096
{
	// Methods

	// RVA: 0x4C984C Offset: 0x4C984C VA: 0x4C984C
	public void .ctor() { }

	// RVA: 0x4C9850 Offset: 0x4C9850 VA: 0x4C9850 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x4C9AE8 Offset: 0x4C9AE8 VA: 0x4C9AE8 Slot: 7
	public override bool IsComplex() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Repetition : CompositeExpression // TypeDefIndex: 1097
{
	// Fields
	private int min; // 0xC
	private int max; // 0x10
	private bool lazy; // 0x14

	// Properties
	public Expression Expression { get; set; }
	public int Minimum { get; }

	// Methods

	// RVA: 0x4CDFBC Offset: 0x4CDFBC VA: 0x4CDFBC
	public void .ctor(int min, int max, bool lazy) { }

	// RVA: 0x4CEEDC Offset: 0x4CEEDC VA: 0x4CEEDC
	public Expression get_Expression() { }

	// RVA: 0x4CE008 Offset: 0x4CE008 VA: 0x4CE008
	public void set_Expression(Expression value) { }

	// RVA: 0x4CEF08 Offset: 0x4CEF08 VA: 0x4CEF08
	public int get_Minimum() { }

	// RVA: 0x4CEF10 Offset: 0x4CEF10 VA: 0x4CEF10 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x4CF370 Offset: 0x4CF370 VA: 0x4CF370 Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0x4CF3F4 Offset: 0x4CF3F4 VA: 0x4CF3F4 Slot: 6
	public override AnchorInfo GetAnchorInfo(bool reverse) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal abstract class Assertion : CompositeExpression // TypeDefIndex: 1098
{
	// Properties
	public Expression TrueExpression { get; set; }
	public Expression FalseExpression { get; set; }

	// Methods

	// RVA: 0x4C4CB4 Offset: 0x4C4CB4 VA: 0x4C4CB4
	public void .ctor() { }

	// RVA: 0x4C4D08 Offset: 0x4C4D08 VA: 0x4C4D08
	public Expression get_TrueExpression() { }

	// RVA: 0x4C4EC8 Offset: 0x4C4EC8 VA: 0x4C4EC8
	public void set_TrueExpression(Expression value) { }

	// RVA: 0x4C4FF0 Offset: 0x4C4FF0 VA: 0x4C4FF0
	public Expression get_FalseExpression() { }

	// RVA: 0x4C501C Offset: 0x4C501C VA: 0x4C501C
	public void set_FalseExpression(Expression value) { }

	// RVA: 0x4C5050 Offset: 0x4C5050 VA: 0x4C5050 Slot: 5
	public override void GetWidth(out int min, out int max) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class CaptureAssertion : Assertion // TypeDefIndex: 1099
{
	// Fields
	private ExpressionAssertion alternate; // 0xC
	private CapturingGroup group; // 0x10
	private Literal literal; // 0x14

	// Properties
	public CapturingGroup CapturingGroup { set; }
	private ExpressionAssertion Alternate { get; }

	// Methods

	// RVA: 0x4C5B80 Offset: 0x4C5B80 VA: 0x4C5B80
	public void .ctor(Literal l) { }

	// RVA: 0x4C5B9C Offset: 0x4C5B9C VA: 0x4C5B9C
	public void set_CapturingGroup(CapturingGroup value) { }

	// RVA: 0x4C5BA4 Offset: 0x4C5BA4 VA: 0x4C5BA4 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x4C61C8 Offset: 0x4C61C8 VA: 0x4C61C8 Slot: 7
	public override bool IsComplex() { }

	// RVA: 0x4C60D4 Offset: 0x4C60D4 VA: 0x4C60D4
	private ExpressionAssertion get_Alternate() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class ExpressionAssertion : Assertion // TypeDefIndex: 1100
{
	// Fields
	private bool reverse; // 0xC
	private bool negate; // 0xD

	// Properties
	public bool Reverse { set; }
	public bool Negate { set; }
	public Expression TestExpression { get; set; }

	// Methods

	// RVA: 0x4C6350 Offset: 0x4C6350 VA: 0x4C6350
	public void .ctor() { }

	// RVA: 0x4C8088 Offset: 0x4C8088 VA: 0x4C8088
	public void set_Reverse(bool value) { }

	// RVA: 0x4C8090 Offset: 0x4C8090 VA: 0x4C8090
	public void set_Negate(bool value) { }

	// RVA: 0x4C8098 Offset: 0x4C8098 VA: 0x4C8098
	public Expression get_TestExpression() { }

	// RVA: 0x4C6384 Offset: 0x4C6384 VA: 0x4C6384
	public void set_TestExpression(Expression value) { }

	// RVA: 0x4C80C4 Offset: 0x4C80C4 VA: 0x4C80C4 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x4C88FC Offset: 0x4C88FC VA: 0x4C88FC Slot: 7
	public override bool IsComplex() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Alternation : CompositeExpression // TypeDefIndex: 1101
{
	// Properties
	public ExpressionCollection Alternatives { get; }

	// Methods

	// RVA: 0x4C3F28 Offset: 0x4C3F28 VA: 0x4C3F28
	public void .ctor() { }

	// RVA: 0x4C3FA8 Offset: 0x4C3FA8 VA: 0x4C3FA8
	public ExpressionCollection get_Alternatives() { }

	// RVA: 0x4C3FB8 Offset: 0x4C3FB8 VA: 0x4C3FB8
	public void AddAlternative(Expression e) { }

	// RVA: 0x4C40D4 Offset: 0x4C40D4 VA: 0x4C40D4 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x4C4974 Offset: 0x4C4974 VA: 0x4C4974 Slot: 5
	public override void GetWidth(out int min, out int max) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Literal : Expression // TypeDefIndex: 1102
{
	// Fields
	private string str; // 0x8
	private bool ignore; // 0xC

	// Methods

	// RVA: 0x4C9708 Offset: 0x4C9708 VA: 0x4C9708
	public void .ctor(string str, bool ignore) { }

	// RVA: 0x4C55B0 Offset: 0x4C55B0 VA: 0x4C55B0
	public static void CompileLiteral(string str, ICompiler cmp, bool ignore, bool reverse) { }

	// RVA: 0x4C9730 Offset: 0x4C9730 VA: 0x4C9730 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x4C9754 Offset: 0x4C9754 VA: 0x4C9754 Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0x4C9790 Offset: 0x4C9790 VA: 0x4C9790 Slot: 6
	public override AnchorInfo GetAnchorInfo(bool reverse) { }

	// RVA: 0x4C9844 Offset: 0x4C9844 VA: 0x4C9844 Slot: 7
	public override bool IsComplex() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class PositionAssertion : Expression // TypeDefIndex: 1103
{
	// Fields
	private Position pos; // 0x8

	// Methods

	// RVA: 0x4CC280 Offset: 0x4CC280 VA: 0x4CC280
	public void .ctor(Position pos) { }

	// RVA: 0x4CE774 Offset: 0x4CE774 VA: 0x4CE774 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x4CE854 Offset: 0x4CE854 VA: 0x4CE854 Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0x4CE864 Offset: 0x4CE864 VA: 0x4CE864 Slot: 7
	public override bool IsComplex() { }

	// RVA: 0x4CE86C Offset: 0x4CE86C VA: 0x4CE86C Slot: 6
	public override AnchorInfo GetAnchorInfo(bool revers) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Reference : Expression // TypeDefIndex: 1104
{
	// Fields
	private CapturingGroup group; // 0x8
	private bool ignore; // 0xC

	// Properties
	public CapturingGroup CapturingGroup { get; set; }
	public bool IgnoreCase { get; }

	// Methods

	// RVA: 0x4C50C4 Offset: 0x4C50C4 VA: 0x4C50C4
	public void .ctor(bool ignore) { }

	// RVA: 0x4C5488 Offset: 0x4C5488 VA: 0x4C5488
	public CapturingGroup get_CapturingGroup() { }

	// RVA: 0x4C5400 Offset: 0x4C5400 VA: 0x4C5400
	public void set_CapturingGroup(CapturingGroup value) { }

	// RVA: 0x4C55A8 Offset: 0x4C55A8 VA: 0x4C55A8
	public bool get_IgnoreCase() { }

	// RVA: 0x4C5490 Offset: 0x4C5490 VA: 0x4C5490 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x4CE918 Offset: 0x4CE918 VA: 0x4CE918 Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0x4CE92C Offset: 0x4CE92C VA: 0x4CE92C Slot: 7
	public override bool IsComplex() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class BackslashNumber : Reference // TypeDefIndex: 1105
{
	// Fields
	private string literal; // 0x10
	private bool ecma; // 0x14

	// Methods

	// RVA: 0x4C509C Offset: 0x4C509C VA: 0x4C509C
	public void .ctor(bool ignore, bool ecma) { }

	// RVA: 0x4C50E4 Offset: 0x4C50E4 VA: 0x4C50E4
	public bool ResolveReference(string num_str, Hashtable groups) { }

	// RVA: 0x4C5430 Offset: 0x4C5430 VA: 0x4C5430 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class CharacterClass : Expression // TypeDefIndex: 1106
{
	// Fields
	private static Interval upper_case_characters; // 0x0
	private bool negate; // 0x8
	private bool ignore; // 0x9
	private BitArray pos_cats; // 0xC
	private BitArray neg_cats; // 0x10
	private IntervalCollection intervals; // 0x14

	// Methods

	// RVA: 0x4C6790 Offset: 0x4C6790 VA: 0x4C6790
	public void .ctor(bool negate, bool ignore) { }

	// RVA: 0x4C6864 Offset: 0x4C6864 VA: 0x4C6864
	public void .ctor(Category cat, bool negate) { }

	// RVA: 0x4C68D8 Offset: 0x4C68D8 VA: 0x4C68D8
	private static void .cctor() { }

	// RVA: 0x4C6898 Offset: 0x4C6898 VA: 0x4C6898
	public void AddCategory(Category cat, bool negate) { }

	// RVA: 0x4C694C Offset: 0x4C694C VA: 0x4C694C
	public void AddCharacter(char c) { }

	// RVA: 0x4C6954 Offset: 0x4C6954 VA: 0x4C6954
	public void AddRange(char lo, char hi) { }

	// RVA: 0x4C6BB8 Offset: 0x4C6BB8 VA: 0x4C6BB8 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x4C7B4C Offset: 0x4C7B4C VA: 0x4C7B4C Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0x4C7B5C Offset: 0x4C7B5C VA: 0x4C7B5C Slot: 7
	public override bool IsComplex() { }

	// RVA: 0x4C7B64 Offset: 0x4C7B64 VA: 0x4C7B64
	private static double GetIntervalCost(Interval i) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class AnchorInfo // TypeDefIndex: 1107
{
	// Fields
	private Expression expr; // 0x8
	private Position pos; // 0xC
	private int offset; // 0x10
	private string str; // 0x14
	private int width; // 0x18
	private bool ignore; // 0x1C

	// Properties
	public int Offset { get; }
	public int Width { get; }
	public int Length { get; }
	public bool IsUnknownWidth { get; }
	public bool IsComplete { get; }
	public string Substring { get; }
	public bool IgnoreCase { get; }
	public Position Position { get; }
	public bool IsSubstring { get; }
	public bool IsPosition { get; }

	// Methods

	// RVA: 0x4C4A98 Offset: 0x4C4A98 VA: 0x4C4A98
	public void .ctor(Expression expr, int width) { }

	// RVA: 0x4C4AD4 Offset: 0x4C4AD4 VA: 0x4C4AD4
	public void .ctor(Expression expr, int offset, int width, string str, bool ignore) { }

	// RVA: 0x4C4B4C Offset: 0x4C4B4C VA: 0x4C4B4C
	public void .ctor(Expression expr, int offset, int width, Position pos) { }

	// RVA: 0x4C4B90 Offset: 0x4C4B90 VA: 0x4C4B90
	public int get_Offset() { }

	// RVA: 0x4C4B98 Offset: 0x4C4B98 VA: 0x4C4B98
	public int get_Width() { }

	// RVA: 0x4C4BA0 Offset: 0x4C4BA0 VA: 0x4C4BA0
	public int get_Length() { }

	// RVA: 0x4C4BB8 Offset: 0x4C4BB8 VA: 0x4C4BB8
	public bool get_IsUnknownWidth() { }

	// RVA: 0x4C4BC4 Offset: 0x4C4BC4 VA: 0x4C4BC4
	public bool get_IsComplete() { }

	// RVA: 0x4C4C04 Offset: 0x4C4C04 VA: 0x4C4C04
	public string get_Substring() { }

	// RVA: 0x4C4C0C Offset: 0x4C4C0C VA: 0x4C4C0C
	public bool get_IgnoreCase() { }

	// RVA: 0x4C4C14 Offset: 0x4C4C14 VA: 0x4C4C14
	public Position get_Position() { }

	// RVA: 0x4C4C1C Offset: 0x4C4C1C VA: 0x4C4C1C
	public bool get_IsSubstring() { }

	// RVA: 0x4C4C2C Offset: 0x4C4C2C VA: 0x4C4C2C
	public bool get_IsPosition() { }

	// RVA: 0x4C4C3C Offset: 0x4C4C3C VA: 0x4C4C3C
	public Interval GetInterval(int start) { }
}

// Namespace: System
internal class DefaultUriParser : UriParser // TypeDefIndex: 1108
{
	// Methods

	// RVA: 0x329254 Offset: 0x329254 VA: 0x329254
	public void .ctor() { }

	// RVA: 0x3292D8 Offset: 0x3292D8 VA: 0x3292D8
	public void .ctor(string scheme) { }
}

// Namespace: System
public class GenericUriParser : UriParser // TypeDefIndex: 1109
{}

// Namespace: System
[TypeConverterAttribute] // RVA: 0x9EA9C Offset: 0x9EA9C VA: 0x9EA9C
[Serializable]
public class Uri : ISerializable // TypeDefIndex: 1110
{
	// Fields
	private bool isUnixFilePath; // 0x8
	private string source; // 0xC
	private string scheme; // 0x10
	private string host; // 0x14
	private int port; // 0x18
	private string path; // 0x1C
	private string query; // 0x20
	private string fragment; // 0x24
	private string userinfo; // 0x28
	private bool isUnc; // 0x2C
	private bool isOpaquePart; // 0x2D
	private bool isAbsoluteUri; // 0x2E
	private bool userEscaped; // 0x2F
	private string cachedAbsoluteUri; // 0x30
	private string cachedToString; // 0x34
	private int cachedHashCode; // 0x38
	private static readonly string hexUpperChars; // 0x0
	public static readonly string SchemeDelimiter; // 0x4
	public static readonly string UriSchemeFile; // 0x8
	public static readonly string UriSchemeFtp; // 0xC
	public static readonly string UriSchemeGopher; // 0x10
	public static readonly string UriSchemeHttp; // 0x14
	public static readonly string UriSchemeHttps; // 0x18
	public static readonly string UriSchemeMailto; // 0x1C
	public static readonly string UriSchemeNews; // 0x20
	public static readonly string UriSchemeNntp; // 0x24
	public static readonly string UriSchemeNetPipe; // 0x28
	public static readonly string UriSchemeNetTcp; // 0x2C
	private static Uri.UriScheme[] schemes; // 0x30
	private UriParser parser; // 0x3C
	[CompilerGeneratedAttribute] // RVA: 0x9EBB4 Offset: 0x9EBB4 VA: 0x9EBB4
	private static Dictionary<string, int> <>f__switch$map14; // 0x34
	[CompilerGeneratedAttribute] // RVA: 0x9EBC4 Offset: 0x9EBC4 VA: 0x9EBC4
	private static Dictionary<string, int> <>f__switch$map15; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0x9EBD4 Offset: 0x9EBD4 VA: 0x9EBD4
	private static Dictionary<string, int> <>f__switch$map16; // 0x3C

	// Properties
	public string AbsoluteUri { get; }
	public string Authority { get; }
	public string Host { get; }
	public bool IsFile { get; }
	public bool IsLoopback { get; }
	public bool IsUnc { get; }
	public string Scheme { get; }
	public bool IsAbsoluteUri { get; }
	public string OriginalString { get; }
	private UriParser Parser { get; }

	// Methods

	// RVA: 0x4CF6E0 Offset: 0x4CF6E0 VA: 0x4CF6E0
	public void .ctor(string uriString) { }

	// RVA: 0x4CF88C Offset: 0x4CF88C VA: 0x4CF88C
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x4CF918 Offset: 0x4CF918 VA: 0x4CF918
	public void .ctor(string uriString, UriKind uriKind) { }

	// RVA: 0x4CFDE4 Offset: 0x4CFDE4 VA: 0x4CFDE4
	public void .ctor(Uri baseUri, Uri relativeUri) { }

	[ObsoleteAttribute] // RVA: 0x9EE34 Offset: 0x9EE34 VA: 0x9EE34
	// RVA: 0x4CF6E8 Offset: 0x4CF6E8 VA: 0x4CF6E8
	public void .ctor(string uriString, bool dontEscape) { }

	// RVA: 0x4D0ECC Offset: 0x4D0ECC VA: 0x4D0ECC
	private static void .cctor() { }

	// RVA: 0x4D13DC Offset: 0x4D13DC VA: 0x4D13DC Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x4CFFCC Offset: 0x4CFFCC VA: 0x4CFFCC
	private void Merge(Uri baseUri, string relativeUri) { }

	// RVA: 0x4D1468 Offset: 0x4D1468 VA: 0x4D1468
	public string get_AbsoluteUri() { }

	// RVA: 0x4D25EC Offset: 0x4D25EC VA: 0x4D25EC
	public string get_Authority() { }

	// RVA: 0x4D27A8 Offset: 0x4D27A8 VA: 0x4D27A8
	public string get_Host() { }

	// RVA: 0x4D27C0 Offset: 0x4D27C0 VA: 0x4D27C0
	public bool get_IsFile() { }

	// RVA: 0x4D28A0 Offset: 0x4D28A0 VA: 0x4D28A0
	public bool get_IsLoopback() { }

	// RVA: 0x4D2B4C Offset: 0x4D2B4C VA: 0x4D2B4C
	public bool get_IsUnc() { }

	// RVA: 0x4D15C0 Offset: 0x4D15C0 VA: 0x4D15C0
	public string get_Scheme() { }

	// RVA: 0x4CFDDC Offset: 0x4CFDDC VA: 0x4CFDDC
	public bool get_IsAbsoluteUri() { }

	// RVA: 0x4CFFAC Offset: 0x4CFFAC VA: 0x4CFFAC
	public string get_OriginalString() { }

	// RVA: 0x4D2B64 Offset: 0x4D2B64 VA: 0x4D2B64
	public static UriHostNameType CheckHostName(string name) { }

	// RVA: 0x4D2CAC Offset: 0x4D2CAC VA: 0x4D2CAC
	internal static bool IsIPv4Address(string name) { }

	// RVA: 0x4D2E54 Offset: 0x4D2E54 VA: 0x4D2E54
	internal static bool IsDomainAddress(string name) { }

	// RVA: 0x4D2FE4 Offset: 0x4D2FE4 VA: 0x4D2FE4
	public static bool CheckSchemeName(string schemeName) { }

	// RVA: 0x4D3198 Offset: 0x4D3198 VA: 0x4D3198
	private static bool IsAlpha(char c) { }

	// RVA: 0x4D31C4 Offset: 0x4D31C4 VA: 0x4D31C4 Slot: 0
	public override bool Equals(object comparant) { }

	// RVA: 0x4D3298 Offset: 0x4D3298 VA: 0x4D3298
	private bool InternalEquals(Uri uri) { }

	// RVA: 0x4D3544 Offset: 0x4D3544 VA: 0x4D3544 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x4D1BDC Offset: 0x4D1BDC VA: 0x4D1BDC
	public string GetLeftPart(UriPartial part) { }

	// RVA: 0x4D43D0 Offset: 0x4D43D0 VA: 0x4D43D0
	public static int FromHex(char digit) { }

	// RVA: 0x4D44B4 Offset: 0x4D44B4 VA: 0x4D44B4
	public static string HexEscape(char character) { }

	// RVA: 0x4D4698 Offset: 0x4D4698 VA: 0x4D4698
	public static bool IsHexDigit(char digit) { }

	// RVA: 0x4D46D4 Offset: 0x4D46D4 VA: 0x4D46D4
	public static bool IsHexEncoding(string pattern, int index) { }

	// RVA: 0x4D4888 Offset: 0x4D4888 VA: 0x4D4888
	private void AppendQueryAndFragment(ref string result) { }

	// RVA: 0x4D4DB0 Offset: 0x4D4DB0 VA: 0x4D4DB0 Slot: 3
	public override string ToString() { }

	[ObsoleteAttribute] // RVA: 0x9EE44 Offset: 0x9EE44 VA: 0x9EE44
	// RVA: 0x4D1A9C Offset: 0x4D1A9C VA: 0x4D1A9C
	protected static string EscapeString(string str) { }

	// RVA: 0x4D4E90 Offset: 0x4D4E90 VA: 0x4D4E90
	internal static string EscapeString(string str, bool escapeReserved, bool escapeHex, bool escapeBrackets) { }

	// RVA: 0x4CFBB0 Offset: 0x4CFBB0 VA: 0x4CFBB0
	private void ParseUri(UriKind kind) { }

	[ObsoleteAttribute] // RVA: 0x9EE54 Offset: 0x9EE54 VA: 0x9EE54
	// RVA: 0x4D53EC Offset: 0x4D53EC VA: 0x4D53EC Slot: 5
	protected virtual string Unescape(string str) { }

	// RVA: 0x4D4AF0 Offset: 0x4D4AF0 VA: 0x4D4AF0
	internal static string Unescape(string str, bool excludeSpecial) { }

	// RVA: 0x4D5938 Offset: 0x4D5938 VA: 0x4D5938
	private void ParseAsWindowsUNC(string uriString) { }

	// RVA: 0x4D5BD0 Offset: 0x4D5BD0 VA: 0x4D5BD0
	private string ParseAsWindowsAbsoluteFilePath(string uriString) { }

	// RVA: 0x4D5DB0 Offset: 0x4D5DB0 VA: 0x4D5DB0
	private void ParseAsUnixAbsoluteFilePath(string uriString) { }

	// RVA: 0x4D52E4 Offset: 0x4D52E4 VA: 0x4D52E4
	private void Parse(UriKind kind, string uriString) { }

	// RVA: 0x4D6020 Offset: 0x4D6020 VA: 0x4D6020
	private string ParseNoExceptions(UriKind kind, string uriString) { }

	// RVA: 0x4D3790 Offset: 0x4D3790 VA: 0x4D3790
	private static bool CompactEscaped(string scheme) { }

	// RVA: 0x4D3AB0 Offset: 0x4D3AB0 VA: 0x4D3AB0
	private static string Reduce(string path, bool compact_escaped) { }

	// RVA: 0x4D5470 Offset: 0x4D5470 VA: 0x4D5470
	private static char HexUnescapeMultiByte(string pattern, ref int index, out char surrogate) { }

	// RVA: 0x4D7D28 Offset: 0x4D7D28 VA: 0x4D7D28
	internal static string GetSchemeDelimiter(string scheme) { }

	// RVA: 0x4D270C Offset: 0x4D270C VA: 0x4D270C
	internal static int GetDefaultPort(string scheme) { }

	// RVA: 0x4D36F0 Offset: 0x4D36F0 VA: 0x4D36F0
	private string GetOpaqueWiseSchemeDelimiter() { }

	// RVA: 0x4D15D8 Offset: 0x4D15D8 VA: 0x4D15D8
	private static bool IsPredefinedScheme(string scheme) { }

	// RVA: 0x4D7C40 Offset: 0x4D7C40 VA: 0x4D7C40
	private UriParser get_Parser() { }

	// RVA: 0x4D1B30 Offset: 0x4D1B30 VA: 0x4D1B30
	private void EnsureAbsoluteUri() { }

	// RVA: 0x4CFFA4 Offset: 0x4CFFA4 VA: 0x4CFFA4
	public static bool op_Equality(Uri u1, Uri u2) { }
}

// Namespace: 
private struct Uri.UriScheme // TypeDefIndex: 1111
{
	// Fields
	public string scheme; // 0x0
	public string delimiter; // 0x4
	public int defaultPort; // 0x8

	// Methods

	// RVA: 0xF3CDC Offset: 0xF3CDC VA: 0xF3CDC
	public void .ctor(string s, string d, int p) { }
}

// Namespace: System
[Serializable]
public class UriFormatException : FormatException, ISerializable // TypeDefIndex: 1112
{
	// Methods

	// RVA: 0x5F1BB4 Offset: 0x5F1BB4 VA: 0x5F1BB4
	public void .ctor() { }

	// RVA: 0x5F1C28 Offset: 0x5F1C28 VA: 0x5F1C28
	public void .ctor(string message) { }

	// RVA: 0x5F1C30 Offset: 0x5F1C30 VA: 0x5F1C30
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x5F1C50 Offset: 0x5F1C50 VA: 0x5F1C50 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
public enum UriHostNameType // TypeDefIndex: 1113
{
	// Fields
	public int value__; // 0x0
	public const UriHostNameType Unknown = 0;
	public const UriHostNameType Basic = 1;
	public const UriHostNameType Dns = 2;
	public const UriHostNameType IPv4 = 3;
	public const UriHostNameType IPv6 = 4;
}

// Namespace: System
public enum UriKind // TypeDefIndex: 1114
{
	// Fields
	public int value__; // 0x0
	public const UriKind RelativeOrAbsolute = 0;
	public const UriKind Absolute = 1;
	public const UriKind Relative = 2;
}

// Namespace: System
public abstract class UriParser // TypeDefIndex: 1115
{
	// Fields
	private static object lock_object; // 0x0
	private static Hashtable table; // 0x4
	internal string scheme_name; // 0x8
	private int default_port; // 0xC
	private static readonly Regex uri_regex; // 0x8
	private static readonly Regex auth_regex; // 0xC

	// Properties
	internal string SchemeName { set; }
	internal int DefaultPort { get; set; }

	// Methods

	// RVA: 0x5F1C70 Offset: 0x5F1C70 VA: 0x5F1C70
	protected void .ctor() { }

	// RVA: 0x5F1C78 Offset: 0x5F1C78 VA: 0x5F1C78
	private static void .cctor() { }

	// RVA: 0x5F1D6C Offset: 0x5F1D6C VA: 0x5F1D6C Slot: 4
	protected internal virtual void InitializeAndValidate(Uri uri, out UriFormatException parsingError) { }

	[MonoTODOAttribute] // RVA: 0x9EE64 Offset: 0x9EE64 VA: 0x9EE64
	// RVA: 0x5F1EBC Offset: 0x5F1EBC VA: 0x5F1EBC Slot: 5
	protected virtual void OnRegister(string schemeName, int defaultPort) { }

	// RVA: 0x5F1EC0 Offset: 0x5F1EC0 VA: 0x5F1EC0
	internal void set_SchemeName(string value) { }

	// RVA: 0x5F1EC8 Offset: 0x5F1EC8 VA: 0x5F1EC8
	internal int get_DefaultPort() { }

	// RVA: 0x5F1ED0 Offset: 0x5F1ED0 VA: 0x5F1ED0
	internal void set_DefaultPort(int value) { }

	// RVA: 0x5F1ED8 Offset: 0x5F1ED8 VA: 0x5F1ED8
	private static void CreateDefaults() { }

	// RVA: 0x5F232C Offset: 0x5F232C VA: 0x5F232C
	private static void InternalRegister(Hashtable table, UriParser uriParser, string schemeName, int defaultPort) { }

	// RVA: 0x5F24AC Offset: 0x5F24AC VA: 0x5F24AC
	internal static UriParser GetParser(string schemeName) { }
}

// Namespace: System
public enum UriPartial // TypeDefIndex: 1116
{
	// Fields
	public int value__; // 0x0
	public const UriPartial Scheme = 0;
	public const UriPartial Authority = 1;
	public const UriPartial Path = 2;
	public const UriPartial Query = 3;
}

// Namespace: System
public class UriTypeConverter : TypeConverter // TypeDefIndex: 1117
{}

// Namespace: System.Net.Security
public sealed class RemoteCertificateValidationCallback : MulticastDelegate // TypeDefIndex: 1118
{
	// Methods

	// RVA: 0x32A618 Offset: 0x32A618 VA: 0x32A618
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x32AE6C Offset: 0x32AE6C VA: 0x32AE6C Slot: 11
	public virtual bool Invoke(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { }

	// RVA: 0x330CC8 Offset: 0x330CC8 VA: 0x330CC8 Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors, AsyncCallback callback, object object) { }

	// RVA: 0x330D74 Offset: 0x330D74 VA: 0x330D74 Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x9EB14 Offset: 0x9EB14 VA: 0x9EB14
internal class <PrivateImplementationDetails> // TypeDefIndex: 1119
{
	// Fields
	internal static <PrivateImplementationDetails>.$ArrayType$128 $$field-2 /*Metadata offset 0x10ABBE*/; // 0x0
	internal static <PrivateImplementationDetails>.$ArrayType$12 $$field-3 /*Metadata offset 0x10AC3E*/; // 0x80
	internal static <PrivateImplementationDetails>.$ArrayType$12 $$field-4 /*Metadata offset 0x10AC4A*/; // 0x8C
}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$128 // TypeDefIndex: 1120
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$12 // TypeDefIndex: 1121
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 1122
{}

// Namespace: 
internal sealed class Locale // TypeDefIndex: 1123
{
	// Methods

	// RVA: 0x3D1634 Offset: 0x3D1634 VA: 0x3D1634
	public static string GetText(string msg) { }
}

// Namespace: Mono.Math
public class BigInteger // TypeDefIndex: 1124
{
	// Fields
	private uint length; // 0x8
	private uint[] data; // 0xC
	internal static readonly uint[] smallPrimes; // 0x0
	private static RandomNumberGenerator rng; // 0x4

	// Properties
	private static RandomNumberGenerator Rng { get; }

	// Methods

	[CLSCompliantAttribute] // RVA: 0x9F400 Offset: 0x9F400 VA: 0x9F400
	// RVA: 0x3D1638 Offset: 0x3D1638 VA: 0x3D1638
	public void .ctor(BigInteger.Sign sign, uint len) { }

	// RVA: 0x3D16BC Offset: 0x3D16BC VA: 0x3D16BC
	public void .ctor(BigInteger bi) { }

	[CLSCompliantAttribute] // RVA: 0x9F414 Offset: 0x9F414 VA: 0x9F414
	// RVA: 0x3D17F4 Offset: 0x3D17F4 VA: 0x3D17F4
	public void .ctor(BigInteger bi, uint len) { }

	// RVA: 0x3D1910 Offset: 0x3D1910 VA: 0x3D1910
	public void .ctor(byte[] inData) { }

	[CLSCompliantAttribute] // RVA: 0x9F428 Offset: 0x9F428 VA: 0x9F428
	// RVA: 0x3D1E74 Offset: 0x3D1E74 VA: 0x3D1E74
	public void .ctor(uint ui) { }

	// RVA: 0x3D1F28 Offset: 0x3D1F28 VA: 0x3D1F28
	private static void .cctor() { }

	// RVA: 0x3D1FC0 Offset: 0x3D1FC0 VA: 0x3D1FC0
	private static RandomNumberGenerator get_Rng() { }

	// RVA: 0x3D20D8 Offset: 0x3D20D8 VA: 0x3D20D8
	public static BigInteger GenerateRandom(int bits, RandomNumberGenerator rng) { }

	// RVA: 0x3D22D4 Offset: 0x3D22D4 VA: 0x3D22D4
	public static BigInteger GenerateRandom(int bits) { }

	// RVA: 0x3D235C Offset: 0x3D235C VA: 0x3D235C
	public int BitCount() { }

	// RVA: 0x3D23F0 Offset: 0x3D23F0 VA: 0x3D23F0
	public bool TestBit(int bitNum) { }

	[CLSCompliantAttribute] // RVA: 0x9F43C Offset: 0x9F43C VA: 0x9F43C
	// RVA: 0x3D2530 Offset: 0x3D2530 VA: 0x3D2530
	public void SetBit(uint bitNum) { }

	[CLSCompliantAttribute] // RVA: 0x9F450 Offset: 0x9F450 VA: 0x9F450
	// RVA: 0x3D2538 Offset: 0x3D2538 VA: 0x3D2538
	public void SetBit(uint bitNum, bool value) { }

	// RVA: 0x3D25AC Offset: 0x3D25AC VA: 0x3D25AC
	public int LowestSetBit() { }

	// RVA: 0x3D26E4 Offset: 0x3D26E4 VA: 0x3D26E4
	public byte[] GetBytes() { }

	[CLSCompliantAttribute] // RVA: 0x9F464 Offset: 0x9F464 VA: 0x9F464
	// RVA: 0x3D28A8 Offset: 0x3D28A8 VA: 0x3D28A8
	public string ToString(uint radix) { }

	[CLSCompliantAttribute] // RVA: 0x9F478 Offset: 0x9F478 VA: 0x9F478
	// RVA: 0x3D2914 Offset: 0x3D2914 VA: 0x3D2914
	public string ToString(uint radix, string characterSet) { }

	// RVA: 0x3D1DF0 Offset: 0x3D1DF0 VA: 0x3D1DF0
	private void Normalize() { }

	// RVA: 0x3D2DCC Offset: 0x3D2DCC VA: 0x3D2DCC
	public void Clear() { }

	// RVA: 0x3D2E3C Offset: 0x3D2E3C VA: 0x3D2E3C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x3D2EB0 Offset: 0x3D2EB0 VA: 0x3D2EB0 Slot: 3
	public override string ToString() { }

	// RVA: 0x3D2EB8 Offset: 0x3D2EB8 VA: 0x3D2EB8 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x3D347C Offset: 0x3D347C VA: 0x3D347C
	public BigInteger ModInverse(BigInteger modulus) { }

	// RVA: 0x3D3D64 Offset: 0x3D3D64 VA: 0x3D3D64
	public BigInteger ModPow(BigInteger exp, BigInteger n) { }

	// RVA: 0x3D4074 Offset: 0x3D4074 VA: 0x3D4074
	public static BigInteger GeneratePseudoPrime(int bits) { }

	// RVA: 0x3D4110 Offset: 0x3D4110 VA: 0x3D4110
	public void Incr2() { }

	[CLSCompliantAttribute] // RVA: 0x9F48C Offset: 0x9F48C VA: 0x9F48C
	// RVA: 0x3D427C Offset: 0x3D427C VA: 0x3D427C
	public static BigInteger op_Implicit(uint value) { }

	// RVA: 0x3D42EC Offset: 0x3D42EC VA: 0x3D42EC
	public static BigInteger op_Implicit(int value) { }

	// RVA: 0x3D43BC Offset: 0x3D43BC VA: 0x3D43BC
	public static BigInteger op_Addition(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x3D47F4 Offset: 0x3D47F4 VA: 0x3D47F4
	public static BigInteger op_Subtraction(BigInteger bi1, BigInteger bi2) { }

	[CLSCompliantAttribute] // RVA: 0x9F4A0 Offset: 0x9F4A0 VA: 0x9F4A0
	// RVA: 0x3D4D24 Offset: 0x3D4D24 VA: 0x3D4D24
	public static uint op_Modulus(BigInteger bi, uint ui) { }

	// RVA: 0x3D4DC4 Offset: 0x3D4DC4 VA: 0x3D4DC4
	public static BigInteger op_Modulus(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x3D5818 Offset: 0x3D5818 VA: 0x3D5818
	public static BigInteger op_Division(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x3D585C Offset: 0x3D585C VA: 0x3D585C
	public static BigInteger op_Multiply(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x3D5C6C Offset: 0x3D5C6C VA: 0x3D5C6C
	public static BigInteger op_LeftShift(BigInteger bi1, int shiftVal) { }

	// RVA: 0x3D5FF8 Offset: 0x3D5FF8 VA: 0x3D5FF8
	public static BigInteger op_RightShift(BigInteger bi1, int shiftVal) { }

	[CLSCompliantAttribute] // RVA: 0x9F4B4 Offset: 0x9F4B4 VA: 0x9F4B4
	// RVA: 0x3D265C Offset: 0x3D265C VA: 0x3D265C
	public static bool op_Equality(BigInteger bi1, uint ui) { }

	[CLSCompliantAttribute] // RVA: 0x9F4C8 Offset: 0x9F4C8 VA: 0x9F4C8
	// RVA: 0x3D2D44 Offset: 0x3D2D44 VA: 0x3D2D44
	public static bool op_Inequality(BigInteger bi1, uint ui) { }

	// RVA: 0x3D3090 Offset: 0x3D3090 VA: 0x3D3090
	public static bool op_Equality(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x3D62BC Offset: 0x3D62BC VA: 0x3D62BC
	public static bool op_Inequality(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x3D63BC Offset: 0x3D63BC VA: 0x3D63BC
	public static bool op_GreaterThan(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x3D63DC Offset: 0x3D63DC VA: 0x3D63DC
	public static bool op_LessThan(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x3D63F0 Offset: 0x3D63F0 VA: 0x3D63F0
	public static bool op_GreaterThanOrEqual(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x3D6410 Offset: 0x3D6410 VA: 0x3D6410
	public static bool op_LessThanOrEqual(BigInteger bi1, BigInteger bi2) { }
}

// Namespace: 
public enum BigInteger.Sign // TypeDefIndex: 1125
{
	// Fields
	public int value__; // 0x0
	public const BigInteger.Sign Negative = -1;
	public const BigInteger.Sign Zero = 0;
	public const BigInteger.Sign Positive = 1;
}

// Namespace: 
public sealed class BigInteger.ModulusRing // TypeDefIndex: 1126
{
	// Fields
	private BigInteger mod; // 0x8
	private BigInteger constant; // 0xC

	// Methods

	// RVA: 0x3D3DF8 Offset: 0x3D3DF8 VA: 0x3D3DF8
	public void .ctor(BigInteger modulus) { }

	// RVA: 0x3D708C Offset: 0x3D708C VA: 0x3D708C
	public void BarrettReduction(BigInteger x) { }

	// RVA: 0x3D7464 Offset: 0x3D7464 VA: 0x3D7464
	public BigInteger Multiply(BigInteger a, BigInteger b) { }

	// RVA: 0x3D6E10 Offset: 0x3D6E10 VA: 0x3D6E10
	public BigInteger Difference(BigInteger a, BigInteger b) { }

	// RVA: 0x3D3F2C Offset: 0x3D3F2C VA: 0x3D3F2C
	public BigInteger Pow(BigInteger a, BigInteger k) { }

	[CLSCompliantAttribute] // RVA: 0x9F4DC Offset: 0x9F4DC VA: 0x9F4DC
	// RVA: 0x3D76E4 Offset: 0x3D76E4 VA: 0x3D76E4
	public BigInteger Pow(uint b, BigInteger exp) { }
}

// Namespace: 
private sealed class BigInteger.Kernel // TypeDefIndex: 1127
{
	// Methods

	// RVA: 0x3D44D4 Offset: 0x3D44D4 VA: 0x3D44D4
	public static BigInteger AddSameSign(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x3D4A14 Offset: 0x3D4A14 VA: 0x3D4A14
	public static BigInteger Subtract(BigInteger big, BigInteger small) { }

	// RVA: 0x3D6430 Offset: 0x3D6430 VA: 0x3D6430
	public static void MinusEq(BigInteger big, BigInteger small) { }

	// RVA: 0x3D6640 Offset: 0x3D6640 VA: 0x3D6640
	public static void PlusEq(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x3D3194 Offset: 0x3D3194 VA: 0x3D3194
	public static BigInteger.Sign Compare(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x3D2C4C Offset: 0x3D2C4C VA: 0x3D2C4C
	public static uint SingleByteDivideInPlace(BigInteger n, uint d) { }

	// RVA: 0x3D4D28 Offset: 0x3D4D28 VA: 0x3D4D28
	public static uint DwordMod(BigInteger n, uint d) { }

	// RVA: 0x3D6948 Offset: 0x3D6948 VA: 0x3D6948
	public static BigInteger[] DwordDivMod(BigInteger n, uint d) { }

	// RVA: 0x3D4E08 Offset: 0x3D4E08 VA: 0x3D4E08
	public static BigInteger[] multiByteDivide(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x3D5C70 Offset: 0x3D5C70 VA: 0x3D5C70
	public static BigInteger LeftShift(BigInteger bi, int n) { }

	// RVA: 0x3D5FFC Offset: 0x3D5FFC VA: 0x3D5FFC
	public static BigInteger RightShift(BigInteger bi, int n) { }

	// RVA: 0x3D5B38 Offset: 0x3D5B38 VA: 0x3D5B38
	public static void Multiply(uint[] x, uint xOffset, uint xLen, uint[] y, uint yOffset, uint yLen, uint[] d, uint dOffset) { }

	// RVA: 0x3D6BF0 Offset: 0x3D6BF0 VA: 0x3D6BF0
	public static void MultiplyMod2p32pmod(uint[] x, int xOffset, int xLen, uint[] y, int yOffest, int yLen, uint[] d, int dOffset, int mod) { }

	// RVA: 0x3D6D1C Offset: 0x3D6D1C VA: 0x3D6D1C
	public static uint modInverse(BigInteger bi, uint modulus) { }

	// RVA: 0x3D3480 Offset: 0x3D3480 VA: 0x3D3480
	public static BigInteger modInverse(BigInteger bi, BigInteger modulus) { }
}

// Namespace: Mono.Math.Prime
public enum ConfidenceFactor // TypeDefIndex: 1128
{
	// Fields
	public int value__; // 0x0
	public const ConfidenceFactor ExtraLow = 0;
	public const ConfidenceFactor Low = 1;
	public const ConfidenceFactor Medium = 2;
	public const ConfidenceFactor High = 3;
	public const ConfidenceFactor ExtraHigh = 4;
	public const ConfidenceFactor Provable = 5;
}

// Namespace: Mono.Math.Prime
public sealed class PrimalityTests // TypeDefIndex: 1129
{
	// Methods

	// RVA: 0x3D8158 Offset: 0x3D8158 VA: 0x3D8158
	private static int GetSPPRounds(BigInteger bi, ConfidenceFactor confidence) { }

	// RVA: 0x3D8348 Offset: 0x3D8348 VA: 0x3D8348
	public static bool RabinMillerTest(BigInteger n, ConfidenceFactor confidence) { }
}

// Namespace: Mono.Math.Prime.Generator
public abstract class PrimeGeneratorBase // TypeDefIndex: 1130
{
	// Properties
	public virtual ConfidenceFactor Confidence { get; }
	public virtual PrimalityTest PrimalityTest { get; }
	public virtual int TrialDivisionBounds { get; }

	// Methods

	// RVA: 0x3D7768 Offset: 0x3D7768 VA: 0x3D7768
	protected void .ctor() { }

	// RVA: 0x3D7770 Offset: 0x3D7770 VA: 0x3D7770 Slot: 4
	public virtual ConfidenceFactor get_Confidence() { }

	// RVA: 0x3D7778 Offset: 0x3D7778 VA: 0x3D7778 Slot: 5
	public virtual PrimalityTest get_PrimalityTest() { }

	// RVA: 0x3D780C Offset: 0x3D780C VA: 0x3D780C Slot: 6
	public virtual int get_TrialDivisionBounds() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract BigInteger GenerateNewPrime(int bits);
}

// Namespace: Mono.Math.Prime.Generator
public class SequentialSearchPrimeGeneratorBase : PrimeGeneratorBase // TypeDefIndex: 1131
{
	// Methods

	// RVA: 0x3D4108 Offset: 0x3D4108 VA: 0x3D4108
	public void .ctor() { }

	// RVA: 0x3D7814 Offset: 0x3D7814 VA: 0x3D7814 Slot: 8
	protected virtual BigInteger GenerateSearchBase(int bits, object context) { }

	// RVA: 0x3D78BC Offset: 0x3D78BC VA: 0x3D78BC Slot: 7
	public override BigInteger GenerateNewPrime(int bits) { }

	// RVA: 0x3D78D0 Offset: 0x3D78D0 VA: 0x3D78D0 Slot: 9
	public virtual BigInteger GenerateNewPrime(int bits, object context) { }

	// RVA: 0x3D8078 Offset: 0x3D8078 VA: 0x3D8078 Slot: 10
	protected virtual bool IsPrimeAcceptable(BigInteger bi, object context) { }
}

// Namespace: Mono.Security
[DefaultMemberAttribute] // RVA: 0x9F1CC Offset: 0x9F1CC VA: 0x9F1CC
public class ASN1 // TypeDefIndex: 1132
{
	// Fields
	private byte m_nTag; // 0x8
	private byte[] m_aValue; // 0xC
	private ArrayList elist; // 0x10

	// Properties
	public int Count { get; }
	public byte Tag { get; }
	public int Length { get; }
	public byte[] Value { get; set; }
	public ASN1 Item { get; }

	// Methods

	// RVA: 0x3D8764 Offset: 0x3D8764 VA: 0x3D8764
	public void .ctor(byte tag) { }

	// RVA: 0x3D878C Offset: 0x3D878C VA: 0x3D878C
	public void .ctor(byte tag, byte[] data) { }

	// RVA: 0x3D87B4 Offset: 0x3D87B4 VA: 0x3D87B4
	public void .ctor(byte[] data) { }

	// RVA: 0x3D8AE4 Offset: 0x3D8AE4 VA: 0x3D8AE4
	public int get_Count() { }

	// RVA: 0x3D8B04 Offset: 0x3D8B04 VA: 0x3D8B04
	public byte get_Tag() { }

	// RVA: 0x3D8B0C Offset: 0x3D8B0C VA: 0x3D8B0C
	public int get_Length() { }

	// RVA: 0x3D8B20 Offset: 0x3D8B20 VA: 0x3D8B20
	public byte[] get_Value() { }

	// RVA: 0x3D8C48 Offset: 0x3D8C48 VA: 0x3D8C48
	public void set_Value(byte[] value) { }

	// RVA: 0x3D8D48 Offset: 0x3D8D48 VA: 0x3D8D48
	private bool CompareArray(byte[] array1, byte[] array2) { }

	// RVA: 0x3D8E10 Offset: 0x3D8E10 VA: 0x3D8E10
	public bool CompareValue(byte[] value) { }

	// RVA: 0x3D8E1C Offset: 0x3D8E1C VA: 0x3D8E1C
	public ASN1 Add(ASN1 asn1) { }

	// RVA: 0x3D8ED4 Offset: 0x3D8ED4 VA: 0x3D8ED4 Slot: 4
	public virtual byte[] GetBytes() { }

	// RVA: 0x3D8994 Offset: 0x3D8994 VA: 0x3D8994
	protected void Decode(byte[] asn1, ref int anPos, int anLength) { }

	// RVA: 0x3D97E0 Offset: 0x3D97E0 VA: 0x3D97E0
	protected void DecodeTLV(byte[] asn1, ref int pos, out byte tag, out int length, out byte[] content) { }

	// RVA: 0x3D9958 Offset: 0x3D9958 VA: 0x3D9958
	public ASN1 get_Item(int index) { }

	// RVA: 0x3D9B2C Offset: 0x3D9B2C VA: 0x3D9B2C
	public ASN1 Element(int index, byte anTag) { }

	// RVA: 0x3D9D20 Offset: 0x3D9D20 VA: 0x3D9D20 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security
public static class ASN1Convert // TypeDefIndex: 1133
{
	// Methods

	// RVA: 0x3DA02C Offset: 0x3DA02C VA: 0x3DA02C
	public static ASN1 FromInt32(int value) { }

	// RVA: 0x3DA1EC Offset: 0x3DA1EC VA: 0x3DA1EC
	public static ASN1 FromOid(string oid) { }

	// RVA: 0x3DA2F8 Offset: 0x3DA2F8 VA: 0x3DA2F8
	public static int ToInt32(ASN1 asn1) { }

	// RVA: 0x3DA474 Offset: 0x3DA474 VA: 0x3DA474
	public static string ToOid(ASN1 asn1) { }

	// RVA: 0x3DA884 Offset: 0x3DA884 VA: 0x3DA884
	public static DateTime ToDateTime(ASN1 time) { }
}

// Namespace: Mono.Security
internal sealed class BitConverterLE // TypeDefIndex: 1134
{
	// Methods

	// RVA: 0x3DB114 Offset: 0x3DB114 VA: 0x3DB114
	private static byte[] GetUIntBytes(byte* bytes) { }

	// RVA: 0x3DA1CC Offset: 0x3DA1CC VA: 0x3DA1CC
	internal static byte[] GetBytes(int value) { }
}

// Namespace: Mono.Security
public sealed class PKCS7 // TypeDefIndex: 1135
{}

// Namespace: 
public class PKCS7.ContentInfo // TypeDefIndex: 1136
{
	// Fields
	private string contentType; // 0x8
	private ASN1 content; // 0xC

	// Properties
	public ASN1 ASN1 { get; }
	public ASN1 Content { get; set; }
	public string ContentType { get; set; }

	// Methods

	// RVA: 0x3E483C Offset: 0x3E483C VA: 0x3E483C
	public void .ctor() { }

	// RVA: 0x3E48C8 Offset: 0x3E48C8 VA: 0x3E48C8
	public void .ctor(string oid) { }

	// RVA: 0x3E48E4 Offset: 0x3E48E4 VA: 0x3E48E4
	public void .ctor(byte[] data) { }

	// RVA: 0x3E4960 Offset: 0x3E4960 VA: 0x3E4960
	public void .ctor(ASN1 asn1) { }

	// RVA: 0x3E4BA0 Offset: 0x3E4BA0 VA: 0x3E4BA0
	public ASN1 get_ASN1() { }

	// RVA: 0x3E4C98 Offset: 0x3E4C98 VA: 0x3E4C98
	public ASN1 get_Content() { }

	// RVA: 0x3E4CA0 Offset: 0x3E4CA0 VA: 0x3E4CA0
	public void set_Content(ASN1 value) { }

	// RVA: 0x3E4CA8 Offset: 0x3E4CA8 VA: 0x3E4CA8
	public string get_ContentType() { }

	// RVA: 0x3E4CB0 Offset: 0x3E4CB0 VA: 0x3E4CB0
	public void set_ContentType(string value) { }

	// RVA: 0x3E4BA4 Offset: 0x3E4BA4 VA: 0x3E4BA4
	internal ASN1 GetASN1() { }
}

// Namespace: 
public class PKCS7.EncryptedData // TypeDefIndex: 1137
{
	// Fields
	private byte _version; // 0x8
	private PKCS7.ContentInfo _content; // 0xC
	private PKCS7.ContentInfo _encryptionAlgorithm; // 0x10
	private byte[] _encrypted; // 0x14

	// Properties
	public PKCS7.ContentInfo EncryptionAlgorithm { get; }
	public byte[] EncryptedContent { get; }

	// Methods

	// RVA: 0x3E4CB8 Offset: 0x3E4CB8 VA: 0x3E4CB8
	public void .ctor() { }

	// RVA: 0x3E4CD8 Offset: 0x3E4CD8 VA: 0x3E4CD8
	public void .ctor(ASN1 asn1) { }

	// RVA: 0x3E50FC Offset: 0x3E50FC VA: 0x3E50FC
	public PKCS7.ContentInfo get_EncryptionAlgorithm() { }

	// RVA: 0x3E5104 Offset: 0x3E5104 VA: 0x3E5104
	public byte[] get_EncryptedContent() { }
}

// Namespace: Mono.Security.Cryptography
public class ARC4Managed : RC4, IDisposable, ICryptoTransform // TypeDefIndex: 1138
{
	// Fields
	private byte[] key; // 0x30
	private byte[] state; // 0x34
	private byte x; // 0x38
	private byte y; // 0x39
	private bool m_disposed; // 0x3A

	// Properties
	public override byte[] Key { get; set; }
	public bool CanReuseTransform { get; }

	// Methods

	// RVA: 0x3DB2F4 Offset: 0x3DB2F4 VA: 0x3DB2F4
	public void .ctor() { }

	// RVA: 0x3DB458 Offset: 0x3DB458 VA: 0x3DB458 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x3DB4D0 Offset: 0x3DB4D0 VA: 0x3DB4D0 Slot: 5
	protected override void Dispose(bool disposing) { }

	// RVA: 0x3DB558 Offset: 0x3DB558 VA: 0x3DB558 Slot: 11
	public override byte[] get_Key() { }

	// RVA: 0x3DB660 Offset: 0x3DB660 VA: 0x3DB660 Slot: 12
	public override void set_Key(byte[] value) { }

	// RVA: 0x3DB974 Offset: 0x3DB974 VA: 0x3DB974 Slot: 26
	public bool get_CanReuseTransform() { }

	// RVA: 0x3DB97C Offset: 0x3DB97C VA: 0x3DB97C Slot: 23
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgvIV) { }

	// RVA: 0x3DB9A4 Offset: 0x3DB9A4 VA: 0x3DB9A4 Slot: 21
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgvIV) { }

	// RVA: 0x3DB9DC Offset: 0x3DB9DC VA: 0x3DB9DC Slot: 24
	public override void GenerateIV() { }

	// RVA: 0x3DBA58 Offset: 0x3DBA58 VA: 0x3DBA58 Slot: 25
	public override void GenerateKey() { }

	// RVA: 0x3DB774 Offset: 0x3DB774 VA: 0x3DB774
	private void KeySetup(byte[] key) { }

	// RVA: 0x3DBB28 Offset: 0x3DBB28 VA: 0x3DBB28
	private void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x3DBD00 Offset: 0x3DBD00 VA: 0x3DBD00 Slot: 27
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x3DBEC0 Offset: 0x3DBEC0 VA: 0x3DBEC0
	private int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x3DC180 Offset: 0x3DC180 VA: 0x3DC180 Slot: 28
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: Mono.Security.Cryptography
public sealed class CryptoConvert // TypeDefIndex: 1139
{
	// Methods

	// RVA: 0x3DC230 Offset: 0x3DC230 VA: 0x3DC230
	public static string ToHex(byte[] input) { }
}

// Namespace: Mono.Security.Cryptography
public sealed class KeyBuilder // TypeDefIndex: 1140
{
	// Fields
	private static RandomNumberGenerator rng; // 0x0

	// Properties
	private static RandomNumberGenerator Rng { get; }

	// Methods

	// RVA: 0x3DCD74 Offset: 0x3DCD74 VA: 0x3DCD74
	private static RandomNumberGenerator get_Rng() { }

	// RVA: 0x3DBA8C Offset: 0x3DBA8C VA: 0x3DBA8C
	public static byte[] Key(int size) { }
}

// Namespace: Mono.Security.Cryptography
public abstract class MD2 : HashAlgorithm // TypeDefIndex: 1141
{
	// Methods

	// RVA: 0x3DCE08 Offset: 0x3DCE08 VA: 0x3DCE08
	protected void .ctor() { }

	// RVA: 0x3DCE28 Offset: 0x3DCE28 VA: 0x3DCE28
	public static MD2 Create() { }

	// RVA: 0x3DCE84 Offset: 0x3DCE84 VA: 0x3DCE84
	public static MD2 Create(string hashName) { }
}

// Namespace: Mono.Security.Cryptography
public class MD2Managed : MD2 // TypeDefIndex: 1142
{
	// Fields
	private byte[] state; // 0x18
	private byte[] checksum; // 0x1C
	private byte[] buffer; // 0x20
	private int count; // 0x24
	private byte[] x; // 0x28
	private static readonly byte[] PI_SUBST; // 0x0

	// Methods

	// RVA: 0x3DCFD4 Offset: 0x3DCFD4 VA: 0x3DCFD4
	public void .ctor() { }

	// RVA: 0x3DD094 Offset: 0x3DD094 VA: 0x3DD094
	private static void .cctor() { }

	// RVA: 0x3DD12C Offset: 0x3DD12C VA: 0x3DD12C
	private byte[] Padding(int nLength) { }

	// RVA: 0x3DD1F0 Offset: 0x3DD1F0 VA: 0x3DD1F0 Slot: 13
	public override void Initialize() { }

	// RVA: 0x3DD258 Offset: 0x3DD258 VA: 0x3DD258 Slot: 10
	protected override void HashCore(byte[] array, int ibStart, int cbSize) { }

	// RVA: 0x3DD710 Offset: 0x3DD710 VA: 0x3DD710 Slot: 11
	protected override byte[] HashFinal() { }

	// RVA: 0x3DD334 Offset: 0x3DD334 VA: 0x3DD334
	private void MD2Transform(byte[] state, byte[] checksum, byte[] block, int index) { }
}

// Namespace: Mono.Security.Cryptography
public abstract class MD4 : HashAlgorithm // TypeDefIndex: 1143
{
	// Methods

	// RVA: 0x3DD88C Offset: 0x3DD88C VA: 0x3DD88C
	protected void .ctor() { }

	// RVA: 0x3DD8AC Offset: 0x3DD8AC VA: 0x3DD8AC
	public static MD4 Create() { }

	// RVA: 0x3DD908 Offset: 0x3DD908 VA: 0x3DD908
	public static MD4 Create(string hashName) { }
}

// Namespace: Mono.Security.Cryptography
public class MD4Managed : MD4 // TypeDefIndex: 1144
{
	// Fields
	private uint[] state; // 0x18
	private byte[] buffer; // 0x1C
	private uint[] count; // 0x20
	private uint[] x; // 0x24
	private byte[] digest; // 0x28

	// Methods

	// RVA: 0x3DDA58 Offset: 0x3DDA58 VA: 0x3DDA58
	public void .ctor() { }

	// RVA: 0x3DDB34 Offset: 0x3DDB34 VA: 0x3DDB34 Slot: 13
	public override void Initialize() { }

	// RVA: 0x3DDCCC Offset: 0x3DDCCC VA: 0x3DDCCC Slot: 10
	protected override void HashCore(byte[] array, int ibStart, int cbSize) { }

	// RVA: 0x3DF094 Offset: 0x3DF094 VA: 0x3DF094 Slot: 11
	protected override byte[] HashFinal() { }

	// RVA: 0x3DF370 Offset: 0x3DF370 VA: 0x3DF370
	private byte[] Padding(int nLength) { }

	// RVA: 0x3DF420 Offset: 0x3DF420 VA: 0x3DF420
	private uint F(uint x, uint y, uint z) { }

	// RVA: 0x3DF430 Offset: 0x3DF430 VA: 0x3DF430
	private uint G(uint x, uint y, uint z) { }

	// RVA: 0x3DF444 Offset: 0x3DF444 VA: 0x3DF444
	private uint H(uint x, uint y, uint z) { }

	// RVA: 0x3DF450 Offset: 0x3DF450 VA: 0x3DF450
	private uint ROL(uint x, byte n) { }

	// RVA: 0x3DF460 Offset: 0x3DF460 VA: 0x3DF460
	private void FF(ref uint a, uint b, uint c, uint d, uint x, byte s) { }

	// RVA: 0x3DF4A0 Offset: 0x3DF4A0 VA: 0x3DF4A0
	private void GG(ref uint a, uint b, uint c, uint d, uint x, byte s) { }

	// RVA: 0x3DF4F0 Offset: 0x3DF4F0 VA: 0x3DF4F0
	private void HH(ref uint a, uint b, uint c, uint d, uint x, byte s) { }

	// RVA: 0x3DF1CC Offset: 0x3DF1CC VA: 0x3DF1CC
	private void Encode(byte[] output, uint[] input) { }

	// RVA: 0x3DF538 Offset: 0x3DF538 VA: 0x3DF538
	private void Decode(uint[] output, byte[] input, int index) { }

	// RVA: 0x3DDEC8 Offset: 0x3DDEC8 VA: 0x3DDEC8
	private void MD4Transform(uint[] state, byte[] block, int index) { }
}

// Namespace: Mono.Security.Cryptography
public sealed class PKCS1 // TypeDefIndex: 1145
{
	// Fields
	private static byte[] emptySHA1; // 0x0
	private static byte[] emptySHA256; // 0x4
	private static byte[] emptySHA384; // 0x8
	private static byte[] emptySHA512; // 0xC

	// Methods

	// RVA: 0x3DFC8C Offset: 0x3DFC8C VA: 0x3DFC8C
	private static void .cctor() { }

	// RVA: 0x3DFDCC Offset: 0x3DFDCC VA: 0x3DFDCC
	private static bool Compare(byte[] array1, byte[] array2) { }

	// RVA: 0x3DFE94 Offset: 0x3DFE94 VA: 0x3DFE94
	public static byte[] I2OSP(byte[] x, int size) { }

	// RVA: 0x3DFF58 Offset: 0x3DFF58 VA: 0x3DFF58
	public static byte[] OS2IP(byte[] x) { }

	// RVA: 0x3E0064 Offset: 0x3E0064 VA: 0x3E0064
	public static byte[] RSASP1(RSA rsa, byte[] m) { }

	// RVA: 0x3E00A0 Offset: 0x3E00A0 VA: 0x3E00A0
	public static byte[] RSAVP1(RSA rsa, byte[] s) { }

	// RVA: 0x3E00DC Offset: 0x3E00DC VA: 0x3E00DC
	public static byte[] Sign_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue) { }

	// RVA: 0x3E0628 Offset: 0x3E0628 VA: 0x3E0628
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature) { }

	// RVA: 0x3E06D0 Offset: 0x3E06D0 VA: 0x3E06D0
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature, bool tryNonStandardEncoding) { }

	// RVA: 0x3E01BC Offset: 0x3E01BC VA: 0x3E01BC
	public static byte[] Encode_v15(HashAlgorithm hash, byte[] hashValue, int emLength) { }
}

// Namespace: Mono.Security.Cryptography
public sealed class PKCS8 // TypeDefIndex: 1146
{}

// Namespace: 
public class PKCS8.PrivateKeyInfo // TypeDefIndex: 1147
{
	// Fields
	private int _version; // 0x8
	private string _algorithm; // 0xC
	private byte[] _key; // 0x10
	private ArrayList _list; // 0x14

	// Properties
	public byte[] PrivateKey { get; }

	// Methods

	// RVA: 0x3E0FDC Offset: 0x3E0FDC VA: 0x3E0FDC
	public void .ctor() { }

	// RVA: 0x3E1060 Offset: 0x3E1060 VA: 0x3E1060
	public void .ctor(byte[] data) { }

	// RVA: 0x3E13E8 Offset: 0x3E13E8 VA: 0x3E13E8
	public byte[] get_PrivateKey() { }

	// RVA: 0x3E1084 Offset: 0x3E1084 VA: 0x3E1084
	private void Decode(byte[] data) { }

	// RVA: 0x3E14E4 Offset: 0x3E14E4 VA: 0x3E14E4
	private static byte[] RemoveLeadingZero(byte[] bigInt) { }

	// RVA: 0x3E15D0 Offset: 0x3E15D0 VA: 0x3E15D0
	private static byte[] Normalize(byte[] bigInt, int length) { }

	// RVA: 0x3E16A0 Offset: 0x3E16A0 VA: 0x3E16A0
	public static RSA DecodeRSA(byte[] keypair) { }

	// RVA: 0x3E1BB0 Offset: 0x3E1BB0 VA: 0x3E1BB0
	public static DSA DecodeDSA(byte[] privateKey, DSAParameters dsaParameters) { }
}

// Namespace: 
public class PKCS8.EncryptedPrivateKeyInfo // TypeDefIndex: 1148
{
	// Fields
	private string _algorithm; // 0x8
	private byte[] _salt; // 0xC
	private int _iterations; // 0x10
	private byte[] _data; // 0x14

	// Properties
	public string Algorithm { get; }
	public byte[] EncryptedData { get; }
	public byte[] Salt { get; }
	public int IterationCount { get; }

	// Methods

	// RVA: 0x3E0960 Offset: 0x3E0960 VA: 0x3E0960
	public void .ctor() { }

	// RVA: 0x3E0968 Offset: 0x3E0968 VA: 0x3E0968
	public void .ctor(byte[] data) { }

	// RVA: 0x3E0D68 Offset: 0x3E0D68 VA: 0x3E0D68
	public string get_Algorithm() { }

	// RVA: 0x3E0D70 Offset: 0x3E0D70 VA: 0x3E0D70
	public byte[] get_EncryptedData() { }

	// RVA: 0x3E0E6C Offset: 0x3E0E6C VA: 0x3E0E6C
	public byte[] get_Salt() { }

	// RVA: 0x3E0FD4 Offset: 0x3E0FD4 VA: 0x3E0FD4
	public int get_IterationCount() { }

	// RVA: 0x3E0990 Offset: 0x3E0990 VA: 0x3E0990
	private void Decode(byte[] data) { }
}

// Namespace: Mono.Security.Cryptography
public abstract class RC4 : SymmetricAlgorithm // TypeDefIndex: 1149
{
	// Fields
	private static KeySizes[] s_legalBlockSizes; // 0x0
	private static KeySizes[] s_legalKeySizes; // 0x4

	// Properties
	public override byte[] IV { get; set; }

	// Methods

	// RVA: 0x3DB398 Offset: 0x3DB398 VA: 0x3DB398
	public void .ctor() { }

	// RVA: 0x3E1D20 Offset: 0x3E1D20 VA: 0x3E1D20
	private static void .cctor() { }

	// RVA: 0x3E1F00 Offset: 0x3E1F00 VA: 0x3E1F00 Slot: 9
	public override byte[] get_IV() { }

	// RVA: 0x3E1F60 Offset: 0x3E1F60 VA: 0x3E1F60 Slot: 10
	public override void set_IV(byte[] value) { }
}

// Namespace: Mono.Security.Cryptography
public class RSAManaged : RSA // TypeDefIndex: 1150
{
	// Fields
	private bool isCRTpossible; // 0x10
	private bool keyBlinding; // 0x11
	private bool keypairGenerated; // 0x12
	private bool m_disposed; // 0x13
	private BigInteger d; // 0x14
	private BigInteger p; // 0x18
	private BigInteger q; // 0x1C
	private BigInteger dp; // 0x20
	private BigInteger dq; // 0x24
	private BigInteger qInv; // 0x28
	private BigInteger n; // 0x2C
	private BigInteger e; // 0x30
	private RSAManaged.KeyGeneratedEventHandler KeyGenerated; // 0x34

	// Properties
	public override int KeySize { get; }
	public bool PublicOnly { get; }

	// Methods

	// RVA: 0x3E1F64 Offset: 0x3E1F64 VA: 0x3E1F64
	public void .ctor() { }

	// RVA: 0x3E1F6C Offset: 0x3E1F6C VA: 0x3E1F6C
	public void .ctor(int keySize) { }

	// RVA: 0x3E2098 Offset: 0x3E2098 VA: 0x3E2098 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x3E2110 Offset: 0x3E2110 VA: 0x3E2110
	private void GenerateKeyPair() { }

	// RVA: 0x3E2870 Offset: 0x3E2870 VA: 0x3E2870 Slot: 5
	public override int get_KeySize() { }

	// RVA: 0x3E28BC Offset: 0x3E28BC VA: 0x3E28BC
	public bool get_PublicOnly() { }

	// RVA: 0x3E29A4 Offset: 0x3E29A4 VA: 0x3E29A4 Slot: 11
	public override byte[] DecryptValue(byte[] rgb) { }

	// RVA: 0x3E2EF4 Offset: 0x3E2EF4 VA: 0x3E2EF4 Slot: 10
	public override byte[] EncryptValue(byte[] rgb) { }

	// RVA: 0x3E305C Offset: 0x3E305C VA: 0x3E305C Slot: 12
	public override RSAParameters ExportParameters(bool includePrivateParameters) { }

	// RVA: 0x3E34DC Offset: 0x3E34DC VA: 0x3E34DC Slot: 13
	public override void ImportParameters(RSAParameters parameters) { }

	// RVA: 0x3E3B6C Offset: 0x3E3B6C VA: 0x3E3B6C Slot: 7
	protected override void Dispose(bool disposing) { }

	// RVA: 0x3E3F18 Offset: 0x3E3F18 VA: 0x3E3F18 Slot: 9
	public override string ToXmlString(bool includePrivateParameters) { }

	// RVA: 0x3E2E08 Offset: 0x3E2E08 VA: 0x3E2E08
	private byte[] GetPaddedValue(BigInteger value, int length) { }
}

// Namespace: 
public sealed class RSAManaged.KeyGeneratedEventHandler : MulticastDelegate // TypeDefIndex: 1151
{
	// Methods

	// RVA: 0x3E47E4 Offset: 0x3E47E4 VA: 0x3E47E4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x3E2494 Offset: 0x3E2494 VA: 0x3E2494 Slot: 11
	public virtual void Invoke(object sender, EventArgs e) { }

	// RVA: 0x3E47F8 Offset: 0x3E47F8 VA: 0x3E47F8 Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x3E4830 Offset: 0x3E4830 VA: 0x3E4830 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: Mono.Security.X509
internal class SafeBag // TypeDefIndex: 1152
{
	// Fields
	private string _bagOID; // 0x8
	private ASN1 _asn1; // 0xC

	// Properties
	public string BagOID { get; }
	public ASN1 ASN1 { get; }

	// Methods

	// RVA: 0x273E80 Offset: 0x273E80 VA: 0x273E80
	public void .ctor(string bagOID, ASN1 asn1) { }

	// RVA: 0x272080 Offset: 0x272080 VA: 0x272080
	public string get_BagOID() { }

	// RVA: 0x272088 Offset: 0x272088 VA: 0x272088
	public ASN1 get_ASN1() { }
}

// Namespace: Mono.Security.X509
public class PKCS12 : ICloneable // TypeDefIndex: 1153
{
	// Fields
	private static int recommendedIterationCount; // 0x0
	private byte[] _password; // 0x8
	private ArrayList _keyBags; // 0xC
	private ArrayList _secretBags; // 0x10
	private X509CertificateCollection _certs; // 0x14
	private bool _keyBagsChanged; // 0x18
	private bool _secretBagsChanged; // 0x19
	private bool _certsChanged; // 0x1A
	private int _iterations; // 0x1C
	private ArrayList _safeBags; // 0x20
	private RandomNumberGenerator _rng; // 0x24
	private static int password_max_length; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0x9F320 Offset: 0x9F320 VA: 0x9F320
	private static Dictionary<string, int> <>f__switch$map5; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0x9F330 Offset: 0x9F330 VA: 0x9F330
	private static Dictionary<string, int> <>f__switch$map6; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0x9F340 Offset: 0x9F340 VA: 0x9F340
	private static Dictionary<string, int> <>f__switch$map7; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0x9F350 Offset: 0x9F350 VA: 0x9F350
	private static Dictionary<string, int> <>f__switch$map8; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0x9F360 Offset: 0x9F360 VA: 0x9F360
	private static Dictionary<string, int> <>f__switch$mapC; // 0x18

	// Properties
	public string Password { set; }
	public int IterationCount { get; set; }
	public ArrayList Keys { get; }
	public X509CertificateCollection Certificates { get; }
	internal RandomNumberGenerator RNG { get; }
	public static int MaximumPasswordLength { get; }

	// Methods

	// RVA: 0x26F1B4 Offset: 0x26F1B4 VA: 0x26F1B4
	public void .ctor() { }

	// RVA: 0x26F2D8 Offset: 0x26F2D8 VA: 0x26F2D8
	public void .ctor(byte[] data) { }

	// RVA: 0x270290 Offset: 0x270290 VA: 0x270290
	public void .ctor(byte[] data, string password) { }

	// RVA: 0x2702C4 Offset: 0x2702C4 VA: 0x2702C4
	private static void .cctor() { }

	// RVA: 0x26F510 Offset: 0x26F510 VA: 0x26F510
	private void Decode(byte[] data) { }

	// RVA: 0x27167C Offset: 0x27167C VA: 0x27167C Slot: 1
	protected override void Finalize() { }

	// RVA: 0x26F340 Offset: 0x26F340 VA: 0x26F340
	public void set_Password(string value) { }

	// RVA: 0x27178C Offset: 0x27178C VA: 0x27178C
	public int get_IterationCount() { }

	// RVA: 0x271794 Offset: 0x271794 VA: 0x271794
	public void set_IterationCount(int value) { }

	// RVA: 0x27179C Offset: 0x27179C VA: 0x27179C
	public ArrayList get_Keys() { }

	// RVA: 0x272260 Offset: 0x272260 VA: 0x272260
	public X509CertificateCollection get_Certificates() { }

	// RVA: 0x27277C Offset: 0x27277C VA: 0x27277C
	internal RandomNumberGenerator get_RNG() { }

	// RVA: 0x270548 Offset: 0x270548 VA: 0x270548
	private bool Compare(byte[] expected, byte[] actual) { }

	// RVA: 0x2727A4 Offset: 0x2727A4 VA: 0x2727A4
	private SymmetricAlgorithm GetSymmetricAlgorithm(string algorithmOid, byte[] salt, int iterationCount) { }

	// RVA: 0x272090 Offset: 0x272090 VA: 0x272090
	public byte[] Decrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] encryptedData) { }

	// RVA: 0x2714FC Offset: 0x2714FC VA: 0x2714FC
	public byte[] Decrypt(PKCS7.EncryptedData ed) { }

	// RVA: 0x2733F0 Offset: 0x2733F0 VA: 0x2733F0
	public byte[] Encrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] data) { }

	// RVA: 0x273634 Offset: 0x273634 VA: 0x273634
	private DSAParameters GetExistingParameters(out bool found) { }

	// RVA: 0x273CA0 Offset: 0x273CA0 VA: 0x273CA0
	private void AddPrivateKey(PKCS8.PrivateKeyInfo pki) { }

	// RVA: 0x270610 Offset: 0x270610 VA: 0x270610
	private void ReadSafeBag(ASN1 safeBag) { }

	// RVA: 0x273EA8 Offset: 0x273EA8 VA: 0x273EA8
	private ASN1 CertificateSafeBag(X509Certificate x509, IDictionary attributes) { }

	// RVA: 0x27033C Offset: 0x27033C VA: 0x27033C
	private byte[] MAC(byte[] password, byte[] salt, int iterations, byte[] data) { }

	// RVA: 0x275274 Offset: 0x275274 VA: 0x275274
	public byte[] GetBytes() { }

	// RVA: 0x277D74 Offset: 0x277D74 VA: 0x277D74
	private PKCS7.ContentInfo EncryptedContentInfo(ASN1 safeBags, string algorithmOid) { }

	// RVA: 0x277D6C Offset: 0x277D6C VA: 0x277D6C
	public void AddCertificate(X509Certificate cert) { }

	// RVA: 0x278194 Offset: 0x278194 VA: 0x278194
	public void AddCertificate(X509Certificate cert, IDictionary attributes) { }

	// RVA: 0x277D64 Offset: 0x277D64 VA: 0x277D64
	public void RemoveCertificate(X509Certificate cert) { }

	// RVA: 0x278508 Offset: 0x278508 VA: 0x278508
	public void RemoveCertificate(X509Certificate cert, IDictionary attrs) { }

	// RVA: 0x278CA0 Offset: 0x278CA0 VA: 0x278CA0 Slot: 4
	public object Clone() { }

	// RVA: 0x271700 Offset: 0x271700 VA: 0x271700
	public static int get_MaximumPasswordLength() { }
}

// Namespace: 
public class PKCS12.DeriveBytes // TypeDefIndex: 1154
{
	// Fields
	private static byte[] keyDiversifier; // 0x0
	private static byte[] ivDiversifier; // 0x4
	private static byte[] macDiversifier; // 0x8
	private string _hashName; // 0x8
	private int _iterations; // 0xC
	private byte[] _password; // 0x10
	private byte[] _salt; // 0x14

	// Properties
	public string HashName { set; }
	public int IterationCount { set; }
	public byte[] Password { set; }
	public byte[] Salt { set; }

	// Methods

	// RVA: 0x273078 Offset: 0x273078 VA: 0x273078
	public void .ctor() { }

	// RVA: 0x278DD0 Offset: 0x278DD0 VA: 0x278DD0
	private static void .cctor() { }

	// RVA: 0x2732A8 Offset: 0x2732A8 VA: 0x2732A8
	public void set_HashName(string value) { }

	// RVA: 0x2732A0 Offset: 0x2732A0 VA: 0x2732A0
	public void set_IterationCount(int value) { }

	// RVA: 0x273080 Offset: 0x273080 VA: 0x273080
	public void set_Password(byte[] value) { }

	// RVA: 0x2731A0 Offset: 0x2731A0 VA: 0x2731A0
	public void set_Salt(byte[] value) { }

	// RVA: 0x278ED8 Offset: 0x278ED8 VA: 0x278ED8
	private void Adjust(byte[] a, int aOff, byte[] b) { }

	// RVA: 0x27906C Offset: 0x27906C VA: 0x27906C
	private byte[] Derive(byte[] diversifier, int n) { }

	// RVA: 0x2732B0 Offset: 0x2732B0 VA: 0x2732B0
	public byte[] DeriveKey(int size) { }

	// RVA: 0x273350 Offset: 0x273350 VA: 0x273350
	public byte[] DeriveIV(int size) { }

	// RVA: 0x2751D4 Offset: 0x2751D4 VA: 0x2751D4
	public byte[] DeriveMAC(int size) { }
}

// Namespace: Mono.Security.X509
public sealed class X501 // TypeDefIndex: 1155
{
	// Fields
	private static byte[] countryName; // 0x0
	private static byte[] organizationName; // 0x4
	private static byte[] organizationalUnitName; // 0x8
	private static byte[] commonName; // 0xC
	private static byte[] localityName; // 0x10
	private static byte[] stateOrProvinceName; // 0x14
	private static byte[] streetAddress; // 0x18
	private static byte[] domainComponent; // 0x1C
	private static byte[] userid; // 0x20
	private static byte[] email; // 0x24
	private static byte[] dnQualifier; // 0x28
	private static byte[] title; // 0x2C
	private static byte[] surname; // 0x30
	private static byte[] givenName; // 0x34
	private static byte[] initial; // 0x38

	// Methods

	// RVA: 0x27972C Offset: 0x27972C VA: 0x27972C
	private static void .cctor() { }

	// RVA: 0x26C550 Offset: 0x26C550 VA: 0x26C550
	public static string ToString(ASN1 seq) { }

	// RVA: 0x27AE34 Offset: 0x27AE34 VA: 0x27AE34
	public static string ToString(ASN1 seq, bool reversed, string separator, bool quotes) { }

	// RVA: 0x27A058 Offset: 0x27A058 VA: 0x27A058
	private static void AppendEntry(StringBuilder sb, ASN1 entry, bool quotes) { }
}

// Namespace: Mono.Security.X509
public class X509Certificate : ISerializable // TypeDefIndex: 1156
{
	// Fields
	private ASN1 decoder; // 0x8
	private byte[] m_encodedcert; // 0xC
	private DateTime m_from; // 0x10
	private DateTime m_until; // 0x20
	private ASN1 issuer; // 0x30
	private string m_issuername; // 0x34
	private string m_keyalgo; // 0x38
	private byte[] m_keyalgoparams; // 0x3C
	private ASN1 subject; // 0x40
	private string m_subject; // 0x44
	private byte[] m_publickey; // 0x48
	private byte[] signature; // 0x4C
	private string m_signaturealgo; // 0x50
	private byte[] m_signaturealgoparams; // 0x54
	private byte[] certhash; // 0x58
	private RSA _rsa; // 0x5C
	private DSA _dsa; // 0x60
	private int version; // 0x64
	private byte[] serialnumber; // 0x68
	private byte[] issuerUniqueID; // 0x6C
	private byte[] subjectUniqueID; // 0x70
	private X509ExtensionCollection extensions; // 0x74
	private static string encoding_error; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0x9F370 Offset: 0x9F370 VA: 0x9F370
	private static Dictionary<string, int> <>f__switch$mapF; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0x9F380 Offset: 0x9F380 VA: 0x9F380
	private static Dictionary<string, int> <>f__switch$map10; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0x9F390 Offset: 0x9F390 VA: 0x9F390
	private static Dictionary<string, int> <>f__switch$map11; // 0xC

	// Properties
	public DSA DSA { get; set; }
	public X509ExtensionCollection Extensions { get; }
	public byte[] Hash { get; }
	public virtual string IssuerName { get; }
	public virtual string KeyAlgorithm { get; }
	public virtual byte[] KeyAlgorithmParameters { get; set; }
	public virtual byte[] PublicKey { get; }
	public virtual RSA RSA { get; set; }
	public virtual byte[] RawData { get; }
	public virtual byte[] SerialNumber { get; }
	public virtual byte[] Signature { get; }
	public virtual string SignatureAlgorithm { get; }
	public virtual string SubjectName { get; }
	public virtual DateTime ValidFrom { get; }
	public virtual DateTime ValidUntil { get; }
	public int Version { get; }
	public bool IsCurrent { get; }
	public bool IsSelfSigned { get; }

	// Methods

	// RVA: 0x269964 Offset: 0x269964 VA: 0x269964
	public void .ctor(byte[] data) { }

	// RVA: 0x27BF40 Offset: 0x27BF40 VA: 0x27BF40
	private static void .cctor() { }

	// RVA: 0x27B270 Offset: 0x27B270 VA: 0x27B270
	private void Parse(byte[] data) { }

	// RVA: 0x27BFB8 Offset: 0x27BFB8 VA: 0x27BFB8
	private byte[] GetUnsignedBigInteger(byte[] integer) { }

	// RVA: 0x273914 Offset: 0x273914 VA: 0x273914
	public DSA get_DSA() { }

	// RVA: 0x27C094 Offset: 0x27C094 VA: 0x27C094
	public void set_DSA(DSA value) { }

	// RVA: 0x27C0A8 Offset: 0x27C0A8 VA: 0x27C0A8
	public X509ExtensionCollection get_Extensions() { }

	// RVA: 0x27C0B0 Offset: 0x27C0B0 VA: 0x27C0B0
	public byte[] get_Hash() { }

	// RVA: 0x27C708 Offset: 0x27C708 VA: 0x27C708 Slot: 5
	public virtual string get_IssuerName() { }

	// RVA: 0x27C710 Offset: 0x27C710 VA: 0x27C710 Slot: 6
	public virtual string get_KeyAlgorithm() { }

	// RVA: 0x27C718 Offset: 0x27C718 VA: 0x27C718 Slot: 7
	public virtual byte[] get_KeyAlgorithmParameters() { }

	// RVA: 0x27C814 Offset: 0x27C814 VA: 0x27C814 Slot: 8
	public virtual void set_KeyAlgorithmParameters(byte[] value) { }

	// RVA: 0x27C81C Offset: 0x27C81C VA: 0x27C81C Slot: 9
	public virtual byte[] get_PublicKey() { }

	// RVA: 0x27C918 Offset: 0x27C918 VA: 0x27C918 Slot: 10
	public virtual RSA get_RSA() { }

	// RVA: 0x27CB00 Offset: 0x27CB00 VA: 0x27CB00 Slot: 11
	public virtual void set_RSA(RSA value) { }

	// RVA: 0x27CB14 Offset: 0x27CB14 VA: 0x27CB14 Slot: 12
	public virtual byte[] get_RawData() { }

	// RVA: 0x27CC10 Offset: 0x27CC10 VA: 0x27CC10 Slot: 13
	public virtual byte[] get_SerialNumber() { }

	// RVA: 0x27CD0C Offset: 0x27CD0C VA: 0x27CD0C Slot: 14
	public virtual byte[] get_Signature() { }

	// RVA: 0x27D4D0 Offset: 0x27D4D0 VA: 0x27D4D0 Slot: 15
	public virtual string get_SignatureAlgorithm() { }

	// RVA: 0x27D4D8 Offset: 0x27D4D8 VA: 0x27D4D8 Slot: 16
	public virtual string get_SubjectName() { }

	// RVA: 0x27D4E0 Offset: 0x27D4E0 VA: 0x27D4E0 Slot: 17
	public virtual DateTime get_ValidFrom() { }

	// RVA: 0x27D4F0 Offset: 0x27D4F0 VA: 0x27D4F0 Slot: 18
	public virtual DateTime get_ValidUntil() { }

	// RVA: 0x27D500 Offset: 0x27D500 VA: 0x27D500
	public int get_Version() { }

	// RVA: 0x27D508 Offset: 0x27D508 VA: 0x27D508
	public bool get_IsCurrent() { }

	// RVA: 0x27D5B0 Offset: 0x27D5B0 VA: 0x27D5B0
	public bool WasCurrent(DateTime instant) { }

	// RVA: 0x27D6F4 Offset: 0x27D6F4 VA: 0x27D6F4
	internal bool VerifySignature(DSA dsa) { }

	// RVA: 0x27D7EC Offset: 0x27D7EC VA: 0x27D7EC
	internal bool VerifySignature(RSA rsa) { }

	// RVA: 0x27DE88 Offset: 0x27DE88 VA: 0x27DE88
	public bool VerifySignature(AsymmetricAlgorithm aa) { }

	// RVA: 0x27E058 Offset: 0x27E058 VA: 0x27E058
	public bool get_IsSelfSigned() { }

	// RVA: 0x27E118 Offset: 0x27E118 VA: 0x27E118
	public ASN1 GetIssuerName() { }

	// RVA: 0x27E120 Offset: 0x27E120 VA: 0x27E120
	public ASN1 GetSubjectName() { }

	// RVA: 0x27E128 Offset: 0x27E128 VA: 0x27E128 Slot: 19
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x27B070 Offset: 0x27B070 VA: 0x27B070
	private static byte[] PEM(string type, byte[] data) { }
}

// Namespace: Mono.Security.X509
[DefaultMemberAttribute] // RVA: 0x9F200 Offset: 0x9F200 VA: 0x9F200
[Serializable]
public class X509CertificateCollection : CollectionBase, IEnumerable // TypeDefIndex: 1157
{
	// Properties
	public X509Certificate Item { get; }

	// Methods

	// RVA: 0x5D61B4 Offset: 0x5D61B4 VA: 0x5D61B4
	public void .ctor() { }

	// RVA: 0x5D61BC Offset: 0x5D61BC VA: 0x5D61BC
	public void .ctor(X509CertificateCollection value) { }

	// RVA: 0x5D6324 Offset: 0x5D6324 VA: 0x5D6324 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x5D6360 Offset: 0x5D6360 VA: 0x5D6360
	public X509Certificate get_Item(int index) { }

	// RVA: 0x5D648C Offset: 0x5D648C VA: 0x5D648C
	public int Add(X509Certificate value) { }

	// RVA: 0x5D61E4 Offset: 0x5D61E4 VA: 0x5D61E4
	public void AddRange(X509CertificateCollection value) { }

	// RVA: 0x5D6574 Offset: 0x5D6574 VA: 0x5D6574
	public bool Contains(X509Certificate value) { }

	// RVA: 0x5D67A4 Offset: 0x5D67A4 VA: 0x5D67A4
	public X509CertificateCollection.X509CertificateEnumerator GetEnumerator() { }

	// RVA: 0x5D68FC Offset: 0x5D68FC VA: 0x5D68FC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x5D6594 Offset: 0x5D6594 VA: 0x5D6594
	public int IndexOf(X509Certificate value) { }

	// RVA: 0x5D69F8 Offset: 0x5D69F8 VA: 0x5D69F8
	public void Remove(X509Certificate value) { }

	// RVA: 0x5D6938 Offset: 0x5D6938 VA: 0x5D6938
	private bool Compare(byte[] array1, byte[] array2) { }
}

// Namespace: 
public class X509CertificateCollection.X509CertificateEnumerator : IEnumerator // TypeDefIndex: 1158
{
	// Fields
	private IEnumerator enumerator; // 0x8

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public X509Certificate Current { get; }

	// Methods

	// RVA: 0x5D6814 Offset: 0x5D6814 VA: 0x5D6814
	public void .ctor(X509CertificateCollection mappings) { }

	// RVA: 0x5D6A3C Offset: 0x5D6A3C VA: 0x5D6A3C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x5D6B14 Offset: 0x5D6B14 VA: 0x5D6B14 Slot: 5
	private bool System.Collections.IEnumerator.MoveNext() { }

	// RVA: 0x5D6BEC Offset: 0x5D6BEC VA: 0x5D6BEC Slot: 6
	private void System.Collections.IEnumerator.Reset() { }

	// RVA: 0x5D6CC4 Offset: 0x5D6CC4 VA: 0x5D6CC4
	public X509Certificate get_Current() { }

	// RVA: 0x5D6E44 Offset: 0x5D6E44 VA: 0x5D6E44 Slot: 7
	public bool MoveNext() { }

	// RVA: 0x5D6F1C Offset: 0x5D6F1C VA: 0x5D6F1C Slot: 8
	public void Reset() { }
}

// Namespace: Mono.Security.X509
public class X509Chain // TypeDefIndex: 1159
{
	// Fields
	private X509CertificateCollection roots; // 0x8
	private X509CertificateCollection certs; // 0xC
	private X509Certificate _root; // 0x10
	private X509CertificateCollection _chain; // 0x14
	private X509ChainStatusFlags _status; // 0x18

	// Properties
	public X509ChainStatusFlags Status { get; }
	public X509CertificateCollection TrustAnchors { get; }

	// Methods

	// RVA: 0x5D6FF4 Offset: 0x5D6FF4 VA: 0x5D6FF4
	public void .ctor() { }

	// RVA: 0x5D7070 Offset: 0x5D7070 VA: 0x5D7070
	public void .ctor(X509CertificateCollection chain) { }

	// RVA: 0x5D7108 Offset: 0x5D7108 VA: 0x5D7108
	public X509ChainStatusFlags get_Status() { }

	// RVA: 0x5D7110 Offset: 0x5D7110 VA: 0x5D7110
	public X509CertificateCollection get_TrustAnchors() { }

	// RVA: 0x5D7300 Offset: 0x5D7300 VA: 0x5D7300
	public bool Build(X509Certificate leaf) { }

	// RVA: 0x5D7DCC Offset: 0x5D7DCC VA: 0x5D7DCC
	private bool IsValid(X509Certificate cert) { }

	// RVA: 0x5D771C Offset: 0x5D771C VA: 0x5D771C
	private X509Certificate FindCertificateParent(X509Certificate child) { }

	// RVA: 0x5D7948 Offset: 0x5D7948 VA: 0x5D7948
	private X509Certificate FindCertificateRoot(X509Certificate potentialRoot) { }

	// RVA: 0x5D7E8C Offset: 0x5D7E8C VA: 0x5D7E8C
	private bool IsTrusted(X509Certificate potentialTrusted) { }

	// RVA: 0x5D7BE8 Offset: 0x5D7BE8 VA: 0x5D7BE8
	private bool IsParent(X509Certificate child, X509Certificate parent) { }
}

// Namespace: Mono.Security.X509
[FlagsAttribute] // RVA: 0x9F234 Offset: 0x9F234 VA: 0x9F234
[Serializable]
public enum X509ChainStatusFlags // TypeDefIndex: 1160
{
	// Fields
	public int value__; // 0x0
	public const X509ChainStatusFlags InvalidBasicConstraints = 1024;
	public const X509ChainStatusFlags NoError = 0;
	public const X509ChainStatusFlags NotSignatureValid = 8;
	public const X509ChainStatusFlags NotTimeNested = 2;
	public const X509ChainStatusFlags NotTimeValid = 1;
	public const X509ChainStatusFlags PartialChain = 65536;
	public const X509ChainStatusFlags UntrustedRoot = 32;
}

// Namespace: Mono.Security.X509
[DefaultMemberAttribute] // RVA: 0x9F244 Offset: 0x9F244 VA: 0x9F244
public class X509Crl // TypeDefIndex: 1161
{
	// Fields
	private string issuer; // 0x8
	private byte version; // 0xC
	private DateTime thisUpdate; // 0x10
	private DateTime nextUpdate; // 0x20
	private ArrayList entries; // 0x30
	private string signatureOID; // 0x34
	private byte[] signature; // 0x38
	private X509ExtensionCollection extensions; // 0x3C
	private byte[] encoded; // 0x40
	private byte[] hash_value; // 0x44
	[CompilerGeneratedAttribute] // RVA: 0x9F3A0 Offset: 0x9F3A0 VA: 0x9F3A0
	private static Dictionary<string, int> <>f__switch$map13; // 0x0

	// Properties
	public X509ExtensionCollection Extensions { get; }
	public byte[] Hash { get; }
	public string IssuerName { get; }
	public DateTime NextUpdate { get; }

	// Methods

	// RVA: 0x5D8014 Offset: 0x5D8014 VA: 0x5D8014
	public void .ctor(byte[] crl) { }

	// RVA: 0x5D8180 Offset: 0x5D8180 VA: 0x5D8180
	private void Parse(byte[] crl) { }

	// RVA: 0x5D8DC8 Offset: 0x5D8DC8 VA: 0x5D8DC8
	public X509ExtensionCollection get_Extensions() { }

	// RVA: 0x5D8DD0 Offset: 0x5D8DD0 VA: 0x5D8DD0
	public byte[] get_Hash() { }

	// RVA: 0x5D91E4 Offset: 0x5D91E4 VA: 0x5D91E4
	public string get_IssuerName() { }

	// RVA: 0x5D91EC Offset: 0x5D91EC VA: 0x5D91EC
	public DateTime get_NextUpdate() { }

	// RVA: 0x5D91FC Offset: 0x5D91FC VA: 0x5D91FC
	private bool Compare(byte[] array1, byte[] array2) { }

	// RVA: 0x5D92BC Offset: 0x5D92BC VA: 0x5D92BC
	public X509Crl.X509CrlEntry GetCrlEntry(X509Certificate x509) { }

	// RVA: 0x5D938C Offset: 0x5D938C VA: 0x5D938C
	public X509Crl.X509CrlEntry GetCrlEntry(byte[] serialNumber) { }

	// RVA: 0x5D8ED4 Offset: 0x5D8ED4 VA: 0x5D8ED4
	private string GetHashName() { }

	// RVA: 0x5D9678 Offset: 0x5D9678 VA: 0x5D9678
	internal bool VerifySignature(DSA dsa) { }

	// RVA: 0x5D9A3C Offset: 0x5D9A3C VA: 0x5D9A3C
	internal bool VerifySignature(RSA rsa) { }

	// RVA: 0x5D9B20 Offset: 0x5D9B20 VA: 0x5D9B20
	public bool VerifySignature(AsymmetricAlgorithm aa) { }
}

// Namespace: 
public class X509Crl.X509CrlEntry // TypeDefIndex: 1162
{
	// Fields
	private byte[] sn; // 0x8
	private DateTime revocationDate; // 0x10
	private X509ExtensionCollection extensions; // 0x20

	// Properties
	public byte[] SerialNumber { get; }
	public DateTime RevocationDate { get; }
	public X509ExtensionCollection Extensions { get; }

	// Methods

	// RVA: 0x5D8B1C Offset: 0x5D8B1C VA: 0x5D8B1C
	internal void .ctor(ASN1 entry) { }

	// RVA: 0x5D9570 Offset: 0x5D9570 VA: 0x5D9570
	public byte[] get_SerialNumber() { }

	// RVA: 0x5D9CF0 Offset: 0x5D9CF0 VA: 0x5D9CF0
	public DateTime get_RevocationDate() { }

	// RVA: 0x5D9D00 Offset: 0x5D9D00 VA: 0x5D9D00
	public X509ExtensionCollection get_Extensions() { }
}

// Namespace: Mono.Security.X509
public class X509Extension // TypeDefIndex: 1163
{
	// Fields
	protected string extnOid; // 0x8
	protected bool extnCritical; // 0xC
	protected ASN1 extnValue; // 0x10

	// Properties
	public string Oid { get; }
	public bool Critical { get; }
	public ASN1 Value { get; }

	// Methods

	// RVA: 0x5D9D08 Offset: 0x5D9D08 VA: 0x5D9D08
	public void .ctor(ASN1 asn1) { }

	// RVA: 0x5DA1C4 Offset: 0x5DA1C4 VA: 0x5DA1C4
	public void .ctor(X509Extension extension) { }

	// RVA: 0x5DA3F0 Offset: 0x5DA3F0 VA: 0x5DA3F0 Slot: 4
	protected virtual void Decode() { }

	// RVA: 0x5DA3F4 Offset: 0x5DA3F4 VA: 0x5DA3F4 Slot: 5
	protected virtual void Encode() { }

	// RVA: 0x5DA3E0 Offset: 0x5DA3E0 VA: 0x5DA3E0
	public string get_Oid() { }

	// RVA: 0x5DA3E8 Offset: 0x5DA3E8 VA: 0x5DA3E8
	public bool get_Critical() { }

	// RVA: 0x5DA3AC Offset: 0x5DA3AC VA: 0x5DA3AC
	public ASN1 get_Value() { }

	// RVA: 0x5DA3F8 Offset: 0x5DA3F8 VA: 0x5DA3F8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x5DA5F8 Offset: 0x5DA5F8 VA: 0x5DA5F8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x5DA624 Offset: 0x5DA624 VA: 0x5DA624
	private void WriteLine(StringBuilder sb, int n, int pos) { }

	// RVA: 0x5DA920 Offset: 0x5DA920 VA: 0x5DA920 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509
[DefaultMemberAttribute] // RVA: 0x9F278 Offset: 0x9F278 VA: 0x9F278
public sealed class X509ExtensionCollection : CollectionBase, IEnumerable // TypeDefIndex: 1164
{
	// Fields
	private bool readOnly; // 0xC

	// Properties
	public X509Extension Item { get; }

	// Methods

	// RVA: 0x5DAA40 Offset: 0x5DAA40 VA: 0x5DAA40
	public void .ctor() { }

	// RVA: 0x5D8C54 Offset: 0x5D8C54 VA: 0x5D8C54
	public void .ctor(ASN1 asn1) { }

	// RVA: 0x5DAA48 Offset: 0x5DAA48 VA: 0x5DAA48 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x5DAA84 Offset: 0x5DAA84 VA: 0x5DAA84
	public int IndexOf(string oid) { }

	// RVA: 0x5D7ED0 Offset: 0x5D7ED0 VA: 0x5D7ED0
	public X509Extension get_Item(string oid) { }
}

// Namespace: Mono.Security.X509
public class X509Store // TypeDefIndex: 1165
{
	// Fields
	private string _storePath; // 0x8
	private X509CertificateCollection _certificates; // 0xC
	private ArrayList _crls; // 0x10
	private bool _crl; // 0x14

	// Properties
	public X509CertificateCollection Certificates { get; }
	public ArrayList Crls { get; }

	// Methods

	// RVA: 0x5DACA8 Offset: 0x5DACA8 VA: 0x5DACA8
	internal void .ctor(string path, bool crl) { }

	// RVA: 0x5DACD0 Offset: 0x5DACD0 VA: 0x5DACD0
	public X509CertificateCollection get_Certificates() { }

	// RVA: 0x5DAEE8 Offset: 0x5DAEE8 VA: 0x5DAEE8
	public ArrayList get_Crls() { }

	// RVA: 0x5DB184 Offset: 0x5DB184 VA: 0x5DB184
	private byte[] Load(string filename) { }

	// RVA: 0x5DB3B8 Offset: 0x5DB3B8 VA: 0x5DB3B8
	private X509Certificate LoadCertificate(string filename) { }

	// RVA: 0x5DB438 Offset: 0x5DB438 VA: 0x5DB438
	private X509Crl LoadCrl(string filename) { }

	// RVA: 0x5DB4B4 Offset: 0x5DB4B4 VA: 0x5DB4B4
	private bool CheckStore(string path, bool throwException) { }

	// RVA: 0x5DACFC Offset: 0x5DACFC VA: 0x5DACFC
	private X509CertificateCollection BuildCertificatesCollection(string storeName) { }

	// RVA: 0x5DAF8C Offset: 0x5DAF8C VA: 0x5DAF8C
	private ArrayList BuildCrlsCollection(string storeName) { }
}

// Namespace: Mono.Security.X509
public sealed class X509StoreManager // TypeDefIndex: 1166
{
	// Fields
	private static X509Stores _userStore; // 0x0
	private static X509Stores _machineStore; // 0x4

	// Properties
	public static X509Stores CurrentUser { get; }
	public static X509Stores LocalMachine { get; }
	public static X509CertificateCollection TrustedRootCertificates { get; }

	// Methods

	// RVA: 0x5DB5F4 Offset: 0x5DB5F4 VA: 0x5DB5F4
	public static X509Stores get_CurrentUser() { }

	// RVA: 0x5DB738 Offset: 0x5DB738 VA: 0x5DB738
	public static X509Stores get_LocalMachine() { }

	// RVA: 0x5D71B4 Offset: 0x5D71B4 VA: 0x5D71B4
	public static X509CertificateCollection get_TrustedRootCertificates() { }
}

// Namespace: Mono.Security.X509
public class X509Stores // TypeDefIndex: 1167
{
	// Fields
	private string _storePath; // 0x8
	private X509Store _trusted; // 0xC

	// Properties
	public X509Store TrustedRoot { get; }

	// Methods

	// RVA: 0x5DB718 Offset: 0x5DB718 VA: 0x5DB718
	internal void .ctor(string path) { }

	// RVA: 0x5DB858 Offset: 0x5DB858 VA: 0x5DB858
	public X509Store get_TrustedRoot() { }

	// RVA: 0x5DB934 Offset: 0x5DB934 VA: 0x5DB934
	public X509Store Open(string storeName, bool create) { }
}

// Namespace: Mono.Security.X509.Extensions
public class AuthorityKeyIdentifierExtension : X509Extension // TypeDefIndex: 1168
{
	// Fields
	private byte[] aki; // 0x14

	// Properties
	public byte[] Identifier { get; }

	// Methods

	// RVA: 0x26A720 Offset: 0x26A720 VA: 0x26A720
	public void .ctor(X509Extension extension) { }

	// RVA: 0x26A728 Offset: 0x26A728 VA: 0x26A728 Slot: 4
	protected override void Decode() { }

	// RVA: 0x26A8CC Offset: 0x26A8CC VA: 0x26A8CC
	public byte[] get_Identifier() { }

	// RVA: 0x26A9C8 Offset: 0x26A9C8 VA: 0x26A9C8 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
public class BasicConstraintsExtension : X509Extension // TypeDefIndex: 1169
{
	// Fields
	private bool cA; // 0x14
	private int pathLenConstraint; // 0x18

	// Properties
	public bool CertificateAuthority { get; }

	// Methods

	// RVA: 0x26ABBC Offset: 0x26ABBC VA: 0x26ABBC
	public void .ctor(X509Extension extension) { }

	// RVA: 0x26ABC4 Offset: 0x26ABC4 VA: 0x26ABC4 Slot: 4
	protected override void Decode() { }

	// RVA: 0x26ADC4 Offset: 0x26ADC4 VA: 0x26ADC4 Slot: 5
	protected override void Encode() { }

	// RVA: 0x26AF64 Offset: 0x26AF64 VA: 0x26AF64
	public bool get_CertificateAuthority() { }

	// RVA: 0x26AF6C Offset: 0x26AF6C VA: 0x26AF6C Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
public class ExtendedKeyUsageExtension : X509Extension // TypeDefIndex: 1170
{
	// Fields
	private ArrayList keyPurpose; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0x9F3B0 Offset: 0x9F3B0 VA: 0x9F3B0
	private static Dictionary<string, int> <>f__switch$map14; // 0x0

	// Properties
	public ArrayList KeyPurpose { get; }

	// Methods

	// RVA: 0x26B19C Offset: 0x26B19C VA: 0x26B19C
	public void .ctor(X509Extension extension) { }

	// RVA: 0x26B1A4 Offset: 0x26B1A4 VA: 0x26B1A4 Slot: 4
	protected override void Decode() { }

	// RVA: 0x26B35C Offset: 0x26B35C VA: 0x26B35C Slot: 5
	protected override void Encode() { }

	// RVA: 0x26B728 Offset: 0x26B728 VA: 0x26B728
	public ArrayList get_KeyPurpose() { }

	// RVA: 0x26B730 Offset: 0x26B730 VA: 0x26B730 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
internal class GeneralNames // TypeDefIndex: 1171
{
	// Fields
	private ArrayList rfc822Name; // 0x8
	private ArrayList dnsName; // 0xC
	private ArrayList directoryNames; // 0x10
	private ArrayList uris; // 0x14
	private ArrayList ipAddr; // 0x18

	// Properties
	public string[] DNSNames { get; }
	public string[] IPAddresses { get; }

	// Methods

	// RVA: 0x26BF8C Offset: 0x26BF8C VA: 0x26BF8C
	public void .ctor(ASN1 sequence) { }

	// RVA: 0x26C6BC Offset: 0x26C6BC VA: 0x26C6BC
	public string[] get_DNSNames() { }

	// RVA: 0x26C830 Offset: 0x26C830 VA: 0x26C830
	public string[] get_IPAddresses() { }

	// RVA: 0x26C9A4 Offset: 0x26C9A4 VA: 0x26C9A4 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
[FlagsAttribute] // RVA: 0x9F2AC Offset: 0x9F2AC VA: 0x9F2AC
public enum KeyUsages // TypeDefIndex: 1172
{
	// Fields
	public int value__; // 0x0
	public const KeyUsages digitalSignature = 128;
	public const KeyUsages nonRepudiation = 64;
	public const KeyUsages keyEncipherment = 32;
	public const KeyUsages dataEncipherment = 16;
	public const KeyUsages keyAgreement = 8;
	public const KeyUsages keyCertSign = 4;
	public const KeyUsages cRLSign = 2;
	public const KeyUsages encipherOnly = 1;
	public const KeyUsages decipherOnly = 2048;
	public const KeyUsages none = 0;
}

// Namespace: Mono.Security.X509.Extensions
public class KeyUsageExtension : X509Extension // TypeDefIndex: 1173
{
	// Fields
	private int kubits; // 0x14

	// Methods

	// RVA: 0x26DC04 Offset: 0x26DC04 VA: 0x26DC04
	public void .ctor(X509Extension extension) { }

	// RVA: 0x26DC0C Offset: 0x26DC0C VA: 0x26DC0C Slot: 4
	protected override void Decode() { }

	// RVA: 0x26DDC4 Offset: 0x26DDC4 VA: 0x26DDC4 Slot: 5
	protected override void Encode() { }

	// RVA: 0x26E08C Offset: 0x26E08C VA: 0x26E08C
	public bool Support(KeyUsages usage) { }

	// RVA: 0x26E190 Offset: 0x26E190 VA: 0x26E190 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
public class NetscapeCertTypeExtension : X509Extension // TypeDefIndex: 1174
{
	// Fields
	private int ctbits; // 0x14

	// Methods

	// RVA: 0x26E7F0 Offset: 0x26E7F0 VA: 0x26E7F0
	public void .ctor(X509Extension extension) { }

	// RVA: 0x26E7F8 Offset: 0x26E7F8 VA: 0x26E7F8 Slot: 4
	protected override void Decode() { }

	// RVA: 0x26E9B0 Offset: 0x26E9B0 VA: 0x26E9B0
	public bool Support(NetscapeCertTypeExtension.CertTypes usage) { }

	// RVA: 0x26EAB4 Offset: 0x26EAB4 VA: 0x26EAB4 Slot: 3
	public override string ToString() { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0x9F2BC Offset: 0x9F2BC VA: 0x9F2BC
public enum NetscapeCertTypeExtension.CertTypes // TypeDefIndex: 1175
{
	// Fields
	public int value__; // 0x0
	public const NetscapeCertTypeExtension.CertTypes SslClient = 128;
	public const NetscapeCertTypeExtension.CertTypes SslServer = 64;
	public const NetscapeCertTypeExtension.CertTypes Smime = 32;
	public const NetscapeCertTypeExtension.CertTypes ObjectSigning = 16;
	public const NetscapeCertTypeExtension.CertTypes SslCA = 4;
	public const NetscapeCertTypeExtension.CertTypes SmimeCA = 2;
	public const NetscapeCertTypeExtension.CertTypes ObjectSigningCA = 1;
}

// Namespace: Mono.Security.X509.Extensions
public class SubjectAltNameExtension : X509Extension // TypeDefIndex: 1176
{
	// Fields
	private GeneralNames _names; // 0x14

	// Properties
	public string[] DNSNames { get; }
	public string[] IPAddresses { get; }

	// Methods

	// RVA: 0x26EFF4 Offset: 0x26EFF4 VA: 0x26EFF4
	public void .ctor(X509Extension extension) { }

	// RVA: 0x26EFFC Offset: 0x26EFFC VA: 0x26EFFC Slot: 4
	protected override void Decode() { }

	// RVA: 0x26F130 Offset: 0x26F130 VA: 0x26F130
	public string[] get_DNSNames() { }

	// RVA: 0x26F158 Offset: 0x26F158 VA: 0x26F158
	public string[] get_IPAddresses() { }

	// RVA: 0x26F180 Offset: 0x26F180 VA: 0x26F180 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.Cryptography
internal class HMAC : KeyedHashAlgorithm // TypeDefIndex: 1177
{
	// Fields
	private HashAlgorithm hash; // 0x1C
	private bool hashing; // 0x20
	private byte[] innerPad; // 0x24
	private byte[] outerPad; // 0x28

	// Properties
	public override byte[] Key { get; set; }

	// Methods

	// RVA: 0x3DC398 Offset: 0x3DC398 VA: 0x3DC398
	public void .ctor(string hashName, byte[] rgbKey) { }

	// RVA: 0x3DC564 Offset: 0x3DC564 VA: 0x3DC564 Slot: 15
	public override byte[] get_Key() { }

	// RVA: 0x3DC66C Offset: 0x3DC66C VA: 0x3DC66C Slot: 16
	public override void set_Key(byte[] value) { }

	// RVA: 0x3DCA3C Offset: 0x3DCA3C VA: 0x3DCA3C Slot: 13
	public override void Initialize() { }

	// RVA: 0x3DCA84 Offset: 0x3DCA84 VA: 0x3DCA84 Slot: 11
	protected override byte[] HashFinal() { }

	// RVA: 0x3DCCB0 Offset: 0x3DCCB0 VA: 0x3DCCB0 Slot: 10
	protected override void HashCore(byte[] array, int ibStart, int cbSize) { }

	// RVA: 0x3DC818 Offset: 0x3DC818 VA: 0x3DC818
	private void initializePad() { }
}

// Namespace: Mono.Security.Cryptography
internal class MD5SHA1 : HashAlgorithm // TypeDefIndex: 1178
{
	// Fields
	private HashAlgorithm md5; // 0x18
	private HashAlgorithm sha; // 0x1C
	private bool hashing; // 0x20

	// Methods

	// RVA: 0x3DF678 Offset: 0x3DF678 VA: 0x3DF678
	public void .ctor() { }

	// RVA: 0x3DF704 Offset: 0x3DF704 VA: 0x3DF704 Slot: 13
	public override void Initialize() { }

	// RVA: 0x3DF76C Offset: 0x3DF76C VA: 0x3DF76C Slot: 11
	protected override byte[] HashFinal() { }

	// RVA: 0x3DF910 Offset: 0x3DF910 VA: 0x3DF910 Slot: 10
	protected override void HashCore(byte[] array, int ibStart, int cbSize) { }

	// RVA: 0x3DF9A8 Offset: 0x3DF9A8 VA: 0x3DF9A8
	public byte[] CreateSignature(RSA rsa) { }

	// RVA: 0x3DFAF0 Offset: 0x3DFAF0 VA: 0x3DFAF0
	public bool VerifySignature(RSA rsa, byte[] rgbSignature) { }
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal enum AlertLevel // TypeDefIndex: 1179
{
	// Fields
	public byte value__; // 0x0
	public const AlertLevel Warning = 1;
	public const AlertLevel Fatal = 2;
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal enum AlertDescription // TypeDefIndex: 1180
{
	// Fields
	public byte value__; // 0x0
	public const AlertDescription CloseNotify = 0;
	public const AlertDescription UnexpectedMessage = 10;
	public const AlertDescription BadRecordMAC = 20;
	public const AlertDescription DecryptionFailed = 21;
	public const AlertDescription RecordOverflow = 22;
	public const AlertDescription DecompressionFailiure = 30;
	public const AlertDescription HandshakeFailiure = 40;
	public const AlertDescription NoCertificate = 41;
	public const AlertDescription BadCertificate = 42;
	public const AlertDescription UnsupportedCertificate = 43;
	public const AlertDescription CertificateRevoked = 44;
	public const AlertDescription CertificateExpired = 45;
	public const AlertDescription CertificateUnknown = 46;
	public const AlertDescription IlegalParameter = 47;
	public const AlertDescription UnknownCA = 48;
	public const AlertDescription AccessDenied = 49;
	public const AlertDescription DecodeError = 50;
	public const AlertDescription DecryptError = 51;
	public const AlertDescription ExportRestriction = 60;
	public const AlertDescription ProtocolVersion = 70;
	public const AlertDescription InsuficientSecurity = 71;
	public const AlertDescription InternalError = 80;
	public const AlertDescription UserCancelled = 90;
	public const AlertDescription NoRenegotiation = 100;
}

// Namespace: Mono.Security.Protocol.Tls
internal class Alert // TypeDefIndex: 1181
{
	// Fields
	private AlertLevel level; // 0x8
	private AlertDescription description; // 0x9

	// Properties
	public AlertLevel Level { get; }
	public AlertDescription Description { get; }
	public bool IsWarning { get; }
	public bool IsCloseNotify { get; }

	// Methods

	// RVA: 0x3E5200 Offset: 0x3E5200 VA: 0x3E5200
	public void .ctor(AlertDescription description) { }

	// RVA: 0x3E52E0 Offset: 0x3E52E0 VA: 0x3E52E0
	public void .ctor(AlertLevel level, AlertDescription description) { }

	// RVA: 0x3E5308 Offset: 0x3E5308 VA: 0x3E5308
	public AlertLevel get_Level() { }

	// RVA: 0x3E5310 Offset: 0x3E5310 VA: 0x3E5310
	public AlertDescription get_Description() { }

	// RVA: 0x3E5318 Offset: 0x3E5318 VA: 0x3E5318
	public bool get_IsWarning() { }

	// RVA: 0x3E5328 Offset: 0x3E5328 VA: 0x3E5328
	public bool get_IsCloseNotify() { }

	// RVA: 0x3E5278 Offset: 0x3E5278 VA: 0x3E5278
	private void inferAlertLevel() { }

	// RVA: 0x3E534C Offset: 0x3E534C VA: 0x3E534C
	public static string GetAlertMessage(AlertDescription description) { }
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
public enum CipherAlgorithmType // TypeDefIndex: 1182
{
	// Fields
	public int value__; // 0x0
	public const CipherAlgorithmType Des = 0;
	public const CipherAlgorithmType None = 1;
	public const CipherAlgorithmType Rc2 = 2;
	public const CipherAlgorithmType Rc4 = 3;
	public const CipherAlgorithmType Rijndael = 4;
	public const CipherAlgorithmType SkipJack = 5;
	public const CipherAlgorithmType TripleDes = 6;
}

// Namespace: Mono.Security.Protocol.Tls
internal abstract class CipherSuite // TypeDefIndex: 1183
{
	// Fields
	public static byte[] EmptyArray; // 0x0
	private short code; // 0x8
	private string name; // 0xC
	private CipherAlgorithmType cipherAlgorithmType; // 0x10
	private HashAlgorithmType hashAlgorithmType; // 0x14
	private ExchangeAlgorithmType exchangeAlgorithmType; // 0x18
	private bool isExportable; // 0x1C
	private CipherMode cipherMode; // 0x20
	private byte keyMaterialSize; // 0x24
	private int keyBlockSize; // 0x28
	private byte expandedKeyMaterialSize; // 0x2C
	private short effectiveKeyBits; // 0x2E
	private byte ivSize; // 0x30
	private byte blockSize; // 0x31
	private Context context; // 0x34
	private SymmetricAlgorithm encryptionAlgorithm; // 0x38
	private ICryptoTransform encryptionCipher; // 0x3C
	private SymmetricAlgorithm decryptionAlgorithm; // 0x40
	private ICryptoTransform decryptionCipher; // 0x44
	private KeyedHashAlgorithm clientHMAC; // 0x48
	private KeyedHashAlgorithm serverHMAC; // 0x4C

	// Properties
	protected ICryptoTransform EncryptionCipher { get; }
	protected ICryptoTransform DecryptionCipher { get; }
	protected KeyedHashAlgorithm ClientHMAC { get; }
	protected KeyedHashAlgorithm ServerHMAC { get; }
	public CipherAlgorithmType CipherAlgorithmType { get; }
	public string HashAlgorithmName { get; }
	public HashAlgorithmType HashAlgorithmType { get; }
	public int HashSize { get; }
	public ExchangeAlgorithmType ExchangeAlgorithmType { get; }
	public CipherMode CipherMode { get; }
	public short Code { get; }
	public string Name { get; }
	public bool IsExportable { get; }
	public byte KeyMaterialSize { get; }
	public int KeyBlockSize { get; }
	public byte ExpandedKeyMaterialSize { get; }
	public short EffectiveKeyBits { get; }
	public byte IvSize { get; }
	public Context Context { get; set; }

	// Methods

	// RVA: 0x3E60C8 Offset: 0x3E60C8 VA: 0x3E60C8
	public void .ctor(short code, string name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBits, byte ivSize, byte blockSize) { }

	// RVA: 0x3E6190 Offset: 0x3E6190 VA: 0x3E6190
	private static void .cctor() { }

	// RVA: 0x3E6208 Offset: 0x3E6208 VA: 0x3E6208
	protected ICryptoTransform get_EncryptionCipher() { }

	// RVA: 0x3E6210 Offset: 0x3E6210 VA: 0x3E6210
	protected ICryptoTransform get_DecryptionCipher() { }

	// RVA: 0x3E6218 Offset: 0x3E6218 VA: 0x3E6218
	protected KeyedHashAlgorithm get_ClientHMAC() { }

	// RVA: 0x3E6220 Offset: 0x3E6220 VA: 0x3E6220
	protected KeyedHashAlgorithm get_ServerHMAC() { }

	// RVA: 0x3E6228 Offset: 0x3E6228 VA: 0x3E6228
	public CipherAlgorithmType get_CipherAlgorithmType() { }

	// RVA: 0x3E6230 Offset: 0x3E6230 VA: 0x3E6230
	public string get_HashAlgorithmName() { }

	// RVA: 0x3E62B0 Offset: 0x3E62B0 VA: 0x3E62B0
	public HashAlgorithmType get_HashAlgorithmType() { }

	// RVA: 0x3E6170 Offset: 0x3E6170 VA: 0x3E6170
	public int get_HashSize() { }

	// RVA: 0x3E62B8 Offset: 0x3E62B8 VA: 0x3E62B8
	public ExchangeAlgorithmType get_ExchangeAlgorithmType() { }

	// RVA: 0x3E62C0 Offset: 0x3E62C0 VA: 0x3E62C0
	public CipherMode get_CipherMode() { }

	// RVA: 0x3E62C8 Offset: 0x3E62C8 VA: 0x3E62C8
	public short get_Code() { }

	// RVA: 0x3E62D0 Offset: 0x3E62D0 VA: 0x3E62D0
	public string get_Name() { }

	// RVA: 0x3E62D8 Offset: 0x3E62D8 VA: 0x3E62D8
	public bool get_IsExportable() { }

	// RVA: 0x3E62E0 Offset: 0x3E62E0 VA: 0x3E62E0
	public byte get_KeyMaterialSize() { }

	// RVA: 0x3E62E8 Offset: 0x3E62E8 VA: 0x3E62E8
	public int get_KeyBlockSize() { }

	// RVA: 0x3E62F0 Offset: 0x3E62F0 VA: 0x3E62F0
	public byte get_ExpandedKeyMaterialSize() { }

	// RVA: 0x3E62F8 Offset: 0x3E62F8 VA: 0x3E62F8
	public short get_EffectiveKeyBits() { }

	// RVA: 0x3E6300 Offset: 0x3E6300 VA: 0x3E6300
	public byte get_IvSize() { }

	// RVA: 0x3E6308 Offset: 0x3E6308 VA: 0x3E6308
	public Context get_Context() { }

	// RVA: 0x3E6310 Offset: 0x3E6310 VA: 0x3E6310
	public void set_Context(Context value) { }

	// RVA: 0x3E6318 Offset: 0x3E6318 VA: 0x3E6318
	internal void Write(byte[] array, int offset, short value) { }

	// RVA: 0x3E6430 Offset: 0x3E6430 VA: 0x3E6430
	internal void Write(byte[] array, int offset, ulong value) { }

	// RVA: 0x3E665C Offset: 0x3E665C VA: 0x3E665C
	public void InitializeCipher() { }

	// RVA: 0x3E6F70 Offset: 0x3E6F70 VA: 0x3E6F70
	public byte[] EncryptRecord(byte[] fragment, byte[] mac) { }

	// RVA: 0x3E71B4 Offset: 0x3E71B4 VA: 0x3E71B4
	public void DecryptRecord(byte[] fragment, out byte[] dcrFragment, out byte[] dcrMAC) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract byte[] ComputeClientRecordMAC(ContentType contentType, byte[] fragment);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract byte[] ComputeServerRecordMAC(ContentType contentType, byte[] fragment);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void ComputeMasterSecret(byte[] preMasterSecret);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void ComputeKeys();

	// RVA: 0x3E7450 Offset: 0x3E7450 VA: 0x3E7450
	public byte[] CreatePremasterSecret() { }

	// RVA: 0x3E7678 Offset: 0x3E7678 VA: 0x3E7678
	public byte[] PRF(byte[] secret, string label, byte[] data, int length) { }

	// RVA: 0x3E79D0 Offset: 0x3E79D0 VA: 0x3E79D0
	public byte[] Expand(string hashName, byte[] secret, byte[] seed, int length) { }

	// RVA: 0x3E6678 Offset: 0x3E6678 VA: 0x3E6678
	private void createEncryptionCipher() { }

	// RVA: 0x3E6AF4 Offset: 0x3E6AF4 VA: 0x3E6AF4
	private void createDecryptionCipher() { }
}

// Namespace: Mono.Security.Protocol.Tls
[DefaultMemberAttribute] // RVA: 0x9F2CC Offset: 0x9F2CC VA: 0x9F2CC
internal sealed class CipherSuiteCollection : IEnumerable, ICollection, IList // TypeDefIndex: 1184
{
	// Fields
	private ArrayList cipherSuites; // 0x8
	private SecurityProtocolType protocol; // 0xC

	// Properties
	private object System.Collections.IList.Item { get; set; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	public CipherSuite Item { get; }
	public CipherSuite Item { get; set; }
	public CipherSuite Item { get; }
	public int Count { get; }
	public bool IsFixedSize { get; }
	public bool IsReadOnly { get; }

	// Methods

	// RVA: 0x3E7F90 Offset: 0x3E7F90 VA: 0x3E7F90
	public void .ctor(SecurityProtocolType protocol) { }

	// RVA: 0x3E8014 Offset: 0x3E8014 VA: 0x3E8014 Slot: 11
	private object System.Collections.IList.get_Item(int index) { }

	// RVA: 0x3E813C Offset: 0x3E813C VA: 0x3E813C Slot: 12
	private void System.Collections.IList.set_Item(int index, object value) { }

	// RVA: 0x3E82A4 Offset: 0x3E82A4 VA: 0x3E82A4 Slot: 6
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x3E82D8 Offset: 0x3E82D8 VA: 0x3E82D8 Slot: 7
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x3E830C Offset: 0x3E830C VA: 0x3E830C Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x3E8340 Offset: 0x3E8340 VA: 0x3E8340 Slot: 15
	private bool System.Collections.IList.Contains(object value) { }

	// RVA: 0x3E8400 Offset: 0x3E8400 VA: 0x3E8400 Slot: 16
	private int System.Collections.IList.IndexOf(object value) { }

	// RVA: 0x3E84C0 Offset: 0x3E84C0 VA: 0x3E84C0 Slot: 17
	private void System.Collections.IList.Insert(int index, object value) { }

	// RVA: 0x3E8588 Offset: 0x3E8588 VA: 0x3E8588 Slot: 18
	private void System.Collections.IList.Remove(object value) { }

	// RVA: 0x3E8648 Offset: 0x3E8648 VA: 0x3E8648 Slot: 19
	private void System.Collections.IList.RemoveAt(int index) { }

	// RVA: 0x3E8684 Offset: 0x3E8684 VA: 0x3E8684 Slot: 13
	private int System.Collections.IList.Add(object value) { }

	// RVA: 0x3E8744 Offset: 0x3E8744 VA: 0x3E8744
	public CipherSuite get_Item(string name) { }

	// RVA: 0x3E8018 Offset: 0x3E8018 VA: 0x3E8018
	public CipherSuite get_Item(int index) { }

	// RVA: 0x3E8260 Offset: 0x3E8260 VA: 0x3E8260
	public void set_Item(int index, CipherSuite value) { }

	// RVA: 0x3E8C50 Offset: 0x3E8C50 VA: 0x3E8C50
	public CipherSuite get_Item(short code) { }

	// RVA: 0x3E915C Offset: 0x3E915C VA: 0x3E915C Slot: 5
	public int get_Count() { }

	// RVA: 0x3E9190 Offset: 0x3E9190 VA: 0x3E9190 Slot: 9
	public bool get_IsFixedSize() { }

	// RVA: 0x3E91C4 Offset: 0x3E91C4 VA: 0x3E91C4 Slot: 10
	public bool get_IsReadOnly() { }

	// RVA: 0x3E91F8 Offset: 0x3E91F8 VA: 0x3E91F8 Slot: 8
	public void CopyTo(Array array, int index) { }

	// RVA: 0x3E923C Offset: 0x3E923C VA: 0x3E923C Slot: 14
	public void Clear() { }

	// RVA: 0x3E8878 Offset: 0x3E8878 VA: 0x3E8878
	public int IndexOf(string name) { }

	// RVA: 0x3E8D84 Offset: 0x3E8D84 VA: 0x3E8D84
	public int IndexOf(short code) { }

	// RVA: 0x3E936C Offset: 0x3E936C VA: 0x3E936C
	public CipherSuite Add(short code, string name, CipherAlgorithmType cipherType, HashAlgorithmType hashType, ExchangeAlgorithmType exchangeType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBytes, byte ivSize, byte blockSize) { }

	// RVA: 0x3E9564 Offset: 0x3E9564 VA: 0x3E9564
	private TlsCipherSuite add(TlsCipherSuite cipherSuite) { }

	// RVA: 0x3E95A4 Offset: 0x3E95A4 VA: 0x3E95A4
	private SslCipherSuite add(SslCipherSuite cipherSuite) { }

	// RVA: 0x3E9270 Offset: 0x3E9270 VA: 0x3E9270
	private bool cultureAwareCompare(string strA, string strB) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class CipherSuiteFactory // TypeDefIndex: 1185
{
	// Methods

	// RVA: 0x3E95E4 Offset: 0x3E95E4 VA: 0x3E95E4
	public static CipherSuiteCollection GetSupportedCiphers(SecurityProtocolType protocol) { }

	// RVA: 0x3E96AC Offset: 0x3E96AC VA: 0x3E96AC
	private static CipherSuiteCollection GetTls1SupportedCiphers() { }

	// RVA: 0x3E9F14 Offset: 0x3E9F14 VA: 0x3E9F14
	private static CipherSuiteCollection GetSsl3SupportedCiphers() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class ClientContext : Context // TypeDefIndex: 1186
{
	// Fields
	private SslClientStream sslStream; // 0x80
	private short clientHelloProtocol; // 0x84

	// Properties
	public SslClientStream SslStream { get; }
	public short ClientHelloProtocol { get; set; }

	// Methods

	// RVA: 0x3EA6EC Offset: 0x3EA6EC VA: 0x3EA6EC
	public void .ctor(SslClientStream stream, SecurityProtocolType securityProtocolType, string targetHost, X509CertificateCollection clientCertificates) { }

	// RVA: 0x3EA84C Offset: 0x3EA84C VA: 0x3EA84C
	public SslClientStream get_SslStream() { }

	// RVA: 0x3E7670 Offset: 0x3E7670 VA: 0x3E7670
	public short get_ClientHelloProtocol() { }

	// RVA: 0x3EA854 Offset: 0x3EA854 VA: 0x3EA854
	public void set_ClientHelloProtocol(short value) { }

	// RVA: 0x3EA85C Offset: 0x3EA85C VA: 0x3EA85C Slot: 4
	public override void Clear() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class ClientRecordProtocol : RecordProtocol // TypeDefIndex: 1187
{
	// Methods

	// RVA: 0x3EA944 Offset: 0x3EA944 VA: 0x3EA944
	public void .ctor(Stream innerStream, ClientContext context) { }

	// RVA: 0x3EA9D8 Offset: 0x3EA9D8 VA: 0x3EA9D8 Slot: 7
	public override HandshakeMessage GetMessage(HandshakeType type) { }

	// RVA: 0x3EAC2C Offset: 0x3EAC2C VA: 0x3EAC2C Slot: 5
	protected override void ProcessHandshakeMessage(TlsStream handMsg) { }

	// RVA: 0x3EA9DC Offset: 0x3EA9DC VA: 0x3EA9DC
	private HandshakeMessage createClientHandshakeMessage(HandshakeType type) { }

	// RVA: 0x3EAE94 Offset: 0x3EAE94 VA: 0x3EAE94
	private HandshakeMessage createServerHandshakeMessage(HandshakeType type, byte[] buffer) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class ClientSessionInfo : IDisposable // TypeDefIndex: 1188
{
	// Fields
	private static readonly int ValidityInterval; // 0x0
	private bool disposed; // 0x8
	private DateTime validuntil; // 0x10
	private string host; // 0x20
	private byte[] sid; // 0x24
	private byte[] masterSecret; // 0x28

	// Properties
	public string HostName { get; }
	public byte[] Id { get; }
	public bool Valid { get; }

	// Methods

	// RVA: 0x3EB8CC Offset: 0x3EB8CC VA: 0x3EB8CC
	public void .ctor(string hostname, byte[] id) { }

	// RVA: 0x3EC8D8 Offset: 0x3EC8D8 VA: 0x3EC8D8
	private static void .cctor() { }

	// RVA: 0x3EC9F8 Offset: 0x3EC9F8 VA: 0x3EC9F8 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x3EB8FC Offset: 0x3EB8FC VA: 0x3EB8FC
	public string get_HostName() { }

	// RVA: 0x3EC100 Offset: 0x3EC100 VA: 0x3EC100
	public byte[] get_Id() { }

	// RVA: 0x3EC034 Offset: 0x3EC034 VA: 0x3EC034
	public bool get_Valid() { }

	// RVA: 0x3EC544 Offset: 0x3EC544 VA: 0x3EC544
	public void GetContext(Context context) { }

	// RVA: 0x3EC7C0 Offset: 0x3EC7C0 VA: 0x3EC7C0
	public void SetContext(Context context) { }

	// RVA: 0x3EB904 Offset: 0x3EB904 VA: 0x3EB904
	public void KeepAlive() { }

	// RVA: 0x3EBA20 Offset: 0x3EBA20 VA: 0x3EBA20 Slot: 4
	public void Dispose() { }

	// RVA: 0x3ECA60 Offset: 0x3ECA60 VA: 0x3ECA60
	private void Dispose(bool disposing) { }

	// RVA: 0x3ECB3C Offset: 0x3ECB3C VA: 0x3ECB3C
	private void CheckDisposed() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class ClientSessionCache // TypeDefIndex: 1189
{
	// Fields
	private static Hashtable cache; // 0x0
	private static object locker; // 0x4

	// Methods

	// RVA: 0x3EB3C8 Offset: 0x3EB3C8 VA: 0x3EB3C8
	private static void .cctor() { }

	// RVA: 0x3EB474 Offset: 0x3EB474 VA: 0x3EB474
	public static void Add(string host, byte[] id) { }

	// RVA: 0x3EBA44 Offset: 0x3EBA44 VA: 0x3EBA44
	public static byte[] FromHost(string host) { }

	// RVA: 0x3EC108 Offset: 0x3EC108 VA: 0x3EC108
	private static ClientSessionInfo FromContext(Context context, bool checkValidity) { }

	// RVA: 0x3EC3E4 Offset: 0x3EC3E4 VA: 0x3EC3E4
	public static bool SetContextInCache(Context context) { }

	// RVA: 0x3EC65C Offset: 0x3EC65C VA: 0x3EC65C
	public static bool SetContextFromCache(Context context) { }
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal enum ContentType // TypeDefIndex: 1190
{
	// Fields
	public byte value__; // 0x0
	public const ContentType ChangeCipherSpec = 20;
	public const ContentType Alert = 21;
	public const ContentType Handshake = 22;
	public const ContentType ApplicationData = 23;
}

// Namespace: Mono.Security.Protocol.Tls
internal abstract class Context // TypeDefIndex: 1191
{
	// Fields
	private SecurityProtocolType securityProtocol; // 0x8
	private byte[] sessionId; // 0xC
	private SecurityCompressionType compressionMethod; // 0x10
	private TlsServerSettings serverSettings; // 0x14
	private TlsClientSettings clientSettings; // 0x18
	private SecurityParameters current; // 0x1C
	private SecurityParameters negotiating; // 0x20
	private SecurityParameters read; // 0x24
	private SecurityParameters write; // 0x28
	private CipherSuiteCollection supportedCiphers; // 0x2C
	private HandshakeType lastHandshakeMsg; // 0x30
	private HandshakeState handshakeState; // 0x34
	private bool abbreviatedHandshake; // 0x38
	private bool receivedConnectionEnd; // 0x39
	private bool sentConnectionEnd; // 0x3A
	private bool protocolNegotiated; // 0x3B
	private ulong writeSequenceNumber; // 0x40
	private ulong readSequenceNumber; // 0x48
	private byte[] clientRandom; // 0x50
	private byte[] serverRandom; // 0x54
	private byte[] randomCS; // 0x58
	private byte[] randomSC; // 0x5C
	private byte[] masterSecret; // 0x60
	private byte[] clientWriteKey; // 0x64
	private byte[] serverWriteKey; // 0x68
	private byte[] clientWriteIV; // 0x6C
	private byte[] serverWriteIV; // 0x70
	private TlsStream handshakeMessages; // 0x74
	private RandomNumberGenerator random; // 0x78
	private RecordProtocol recordProtocol; // 0x7C

	// Properties
	public bool AbbreviatedHandshake { get; set; }
	public bool ProtocolNegotiated { get; set; }
	public SecurityProtocolType SecurityProtocol { get; set; }
	public SecurityProtocolType SecurityProtocolFlags { get; }
	public short Protocol { get; }
	public byte[] SessionId { get; set; }
	public SecurityCompressionType CompressionMethod { get; set; }
	public TlsServerSettings ServerSettings { get; }
	public TlsClientSettings ClientSettings { get; }
	public HandshakeType LastHandshakeMsg { get; set; }
	public HandshakeState HandshakeState { get; set; }
	public bool ReceivedConnectionEnd { get; set; }
	public bool SentConnectionEnd { get; set; }
	public CipherSuiteCollection SupportedCiphers { get; set; }
	public TlsStream HandshakeMessages { get; }
	public ulong WriteSequenceNumber { get; set; }
	public ulong ReadSequenceNumber { get; set; }
	public byte[] ClientRandom { get; set; }
	public byte[] ServerRandom { get; set; }
	public byte[] RandomCS { get; set; }
	public byte[] RandomSC { get; set; }
	public byte[] MasterSecret { get; set; }
	public byte[] ClientWriteKey { get; set; }
	public byte[] ServerWriteKey { get; set; }
	public byte[] ClientWriteIV { get; set; }
	public byte[] ServerWriteIV { get; set; }
	public RecordProtocol RecordProtocol { get; set; }
	public SecurityParameters Current { get; }
	public SecurityParameters Negotiating { get; }
	public SecurityParameters Read { get; }
	public SecurityParameters Write { get; }

	// Methods

	// RVA: 0x3EA75C Offset: 0x3EA75C VA: 0x3EA75C
	public void .ctor(SecurityProtocolType securityProtocolType) { }

	// RVA: 0x3ECC00 Offset: 0x3ECC00 VA: 0x3ECC00
	public bool get_AbbreviatedHandshake() { }

	// RVA: 0x3ECC08 Offset: 0x3ECC08 VA: 0x3ECC08
	public void set_AbbreviatedHandshake(bool value) { }

	// RVA: 0x3ECC10 Offset: 0x3ECC10 VA: 0x3ECC10
	public bool get_ProtocolNegotiated() { }

	// RVA: 0x3ECC18 Offset: 0x3ECC18 VA: 0x3ECC18
	public void set_ProtocolNegotiated(bool value) { }

	// RVA: 0x3ECC20 Offset: 0x3ECC20 VA: 0x3ECC20
	public SecurityProtocolType get_SecurityProtocol() { }

	// RVA: 0x3ECBF8 Offset: 0x3ECBF8 VA: 0x3ECBF8
	public void set_SecurityProtocol(SecurityProtocolType value) { }

	// RVA: 0x3ECCEC Offset: 0x3ECCEC VA: 0x3ECCEC
	public SecurityProtocolType get_SecurityProtocolFlags() { }

	// RVA: 0x3ECCF4 Offset: 0x3ECCF4 VA: 0x3ECCF4
	public short get_Protocol() { }

	// RVA: 0x3EC3DC Offset: 0x3EC3DC VA: 0x3EC3DC
	public byte[] get_SessionId() { }

	// RVA: 0x3ECDC4 Offset: 0x3ECDC4 VA: 0x3ECDC4
	public void set_SessionId(byte[] value) { }

	// RVA: 0x3ECDCC Offset: 0x3ECDCC VA: 0x3ECDCC
	public SecurityCompressionType get_CompressionMethod() { }

	// RVA: 0x3ECDD4 Offset: 0x3ECDD4 VA: 0x3ECDD4
	public void set_CompressionMethod(SecurityCompressionType value) { }

	// RVA: 0x3ECDDC Offset: 0x3ECDDC VA: 0x3ECDDC
	public TlsServerSettings get_ServerSettings() { }

	// RVA: 0x3EA844 Offset: 0x3EA844 VA: 0x3EA844
	public TlsClientSettings get_ClientSettings() { }

	// RVA: 0x3ECDE4 Offset: 0x3ECDE4 VA: 0x3ECDE4
	public HandshakeType get_LastHandshakeMsg() { }

	// RVA: 0x3EB2F4 Offset: 0x3EB2F4 VA: 0x3EB2F4
	public void set_LastHandshakeMsg(HandshakeType value) { }

	// RVA: 0x3EB340 Offset: 0x3EB340 VA: 0x3EB340
	public HandshakeState get_HandshakeState() { }

	// RVA: 0x3EB348 Offset: 0x3EB348 VA: 0x3EB348
	public void set_HandshakeState(HandshakeState value) { }

	// RVA: 0x3ECDEC Offset: 0x3ECDEC VA: 0x3ECDEC
	public bool get_ReceivedConnectionEnd() { }

	// RVA: 0x3ECDF4 Offset: 0x3ECDF4 VA: 0x3ECDF4
	public void set_ReceivedConnectionEnd(bool value) { }

	// RVA: 0x3ECDFC Offset: 0x3ECDFC VA: 0x3ECDFC
	public bool get_SentConnectionEnd() { }

	// RVA: 0x3ECE04 Offset: 0x3ECE04 VA: 0x3ECE04
	public void set_SentConnectionEnd(bool value) { }

	// RVA: 0x3ECE0C Offset: 0x3ECE0C VA: 0x3ECE0C
	public CipherSuiteCollection get_SupportedCiphers() { }

	// RVA: 0x3ECE14 Offset: 0x3ECE14 VA: 0x3ECE14
	public void set_SupportedCiphers(CipherSuiteCollection value) { }

	// RVA: 0x3EB2FC Offset: 0x3EB2FC VA: 0x3EB2FC
	public TlsStream get_HandshakeMessages() { }

	// RVA: 0x3ECE1C Offset: 0x3ECE1C VA: 0x3ECE1C
	public ulong get_WriteSequenceNumber() { }

	// RVA: 0x3ECE24 Offset: 0x3ECE24 VA: 0x3ECE24
	public void set_WriteSequenceNumber(ulong value) { }

	// RVA: 0x3ECE34 Offset: 0x3ECE34 VA: 0x3ECE34
	public ulong get_ReadSequenceNumber() { }

	// RVA: 0x3ECE3C Offset: 0x3ECE3C VA: 0x3ECE3C
	public void set_ReadSequenceNumber(ulong value) { }

	// RVA: 0x3ECE4C Offset: 0x3ECE4C VA: 0x3ECE4C
	public byte[] get_ClientRandom() { }

	// RVA: 0x3ECE54 Offset: 0x3ECE54 VA: 0x3ECE54
	public void set_ClientRandom(byte[] value) { }

	// RVA: 0x3ECE5C Offset: 0x3ECE5C VA: 0x3ECE5C
	public byte[] get_ServerRandom() { }

	// RVA: 0x3ECE64 Offset: 0x3ECE64 VA: 0x3ECE64
	public void set_ServerRandom(byte[] value) { }

	// RVA: 0x3ECE6C Offset: 0x3ECE6C VA: 0x3ECE6C
	public byte[] get_RandomCS() { }

	// RVA: 0x3ECE74 Offset: 0x3ECE74 VA: 0x3ECE74
	public void set_RandomCS(byte[] value) { }

	// RVA: 0x3ECE7C Offset: 0x3ECE7C VA: 0x3ECE7C
	public byte[] get_RandomSC() { }

	// RVA: 0x3ECE84 Offset: 0x3ECE84 VA: 0x3ECE84
	public void set_RandomSC(byte[] value) { }

	// RVA: 0x3ECBE8 Offset: 0x3ECBE8 VA: 0x3ECBE8
	public byte[] get_MasterSecret() { }

	// RVA: 0x3ECBF0 Offset: 0x3ECBF0 VA: 0x3ECBF0
	public void set_MasterSecret(byte[] value) { }

	// RVA: 0x3E7E90 Offset: 0x3E7E90 VA: 0x3E7E90
	public byte[] get_ClientWriteKey() { }

	// RVA: 0x3ECE8C Offset: 0x3ECE8C VA: 0x3ECE8C
	public void set_ClientWriteKey(byte[] value) { }

	// RVA: 0x3E7EA0 Offset: 0x3E7EA0 VA: 0x3E7EA0
	public byte[] get_ServerWriteKey() { }

	// RVA: 0x3ECE94 Offset: 0x3ECE94 VA: 0x3ECE94
	public void set_ServerWriteKey(byte[] value) { }

	// RVA: 0x3E7E98 Offset: 0x3E7E98 VA: 0x3E7E98
	public byte[] get_ClientWriteIV() { }

	// RVA: 0x3ECE9C Offset: 0x3ECE9C VA: 0x3ECE9C
	public void set_ClientWriteIV(byte[] value) { }

	// RVA: 0x3E7EA8 Offset: 0x3E7EA8 VA: 0x3E7EA8
	public byte[] get_ServerWriteIV() { }

	// RVA: 0x3ECEA4 Offset: 0x3ECEA4 VA: 0x3ECEA4
	public void set_ServerWriteIV(byte[] value) { }

	// RVA: 0x3ECEAC Offset: 0x3ECEAC VA: 0x3ECEAC
	public RecordProtocol get_RecordProtocol() { }

	// RVA: 0x3ECEB4 Offset: 0x3ECEB4 VA: 0x3ECEB4
	public void set_RecordProtocol(RecordProtocol value) { }

	// RVA: 0x3ECEBC Offset: 0x3ECEBC VA: 0x3ECEBC
	public int GetUnixTime() { }

	// RVA: 0x3E75D4 Offset: 0x3E75D4 VA: 0x3E75D4
	public byte[] GetSecureRandomBytes(int count) { }

	// RVA: 0x3EA868 Offset: 0x3EA868 VA: 0x3EA868 Slot: 4
	public virtual void Clear() { }

	// RVA: 0x3ECF90 Offset: 0x3ECF90 VA: 0x3ECF90 Slot: 5
	public virtual void ClearKeyInfo() { }

	// RVA: 0x3ED104 Offset: 0x3ED104 VA: 0x3ED104
	public SecurityProtocolType DecodeProtocolCode(short code) { }

	// RVA: 0x3ED1C4 Offset: 0x3ED1C4 VA: 0x3ED1C4
	public void ChangeProtocol(short protocol) { }

	// RVA: 0x3ED2E8 Offset: 0x3ED2E8 VA: 0x3ED2E8
	public SecurityParameters get_Current() { }

	// RVA: 0x3E7EB0 Offset: 0x3E7EB0 VA: 0x3E7EB0
	public SecurityParameters get_Negotiating() { }

	// RVA: 0x3ED3C8 Offset: 0x3ED3C8 VA: 0x3ED3C8
	public SecurityParameters get_Read() { }

	// RVA: 0x3ED3D0 Offset: 0x3ED3D0 VA: 0x3ED3D0
	public SecurityParameters get_Write() { }

	// RVA: 0x3ED3D8 Offset: 0x3ED3D8 VA: 0x3ED3D8
	public void StartSwitchingSecurityParameters(bool client) { }

	// RVA: 0x3ED408 Offset: 0x3ED408 VA: 0x3ED408
	public void EndSwitchingSecurityParameters(bool client) { }
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
public enum ExchangeAlgorithmType // TypeDefIndex: 1192
{
	// Fields
	public int value__; // 0x0
	public const ExchangeAlgorithmType DiffieHellman = 0;
	public const ExchangeAlgorithmType Fortezza = 1;
	public const ExchangeAlgorithmType None = 2;
	public const ExchangeAlgorithmType RsaKeyX = 3;
	public const ExchangeAlgorithmType RsaSign = 4;
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal enum HandshakeState // TypeDefIndex: 1193
{
	// Fields
	public int value__; // 0x0
	public const HandshakeState None = 0;
	public const HandshakeState Started = 1;
	public const HandshakeState Finished = 2;
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
public enum HashAlgorithmType // TypeDefIndex: 1194
{
	// Fields
	public int value__; // 0x0
	public const HashAlgorithmType Md5 = 0;
	public const HashAlgorithmType None = 1;
	public const HashAlgorithmType Sha1 = 2;
}

// Namespace: Mono.Security.Protocol.Tls
internal class HttpsClientStream : SslClientStream // TypeDefIndex: 1195
{
	// Fields
	private HttpWebRequest _request; // 0x44
	private int _status; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0x9F3C0 Offset: 0x9F3C0 VA: 0x9F3C0
	private static CertificateSelectionCallback <>f__am$cache2; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0x9F3D0 Offset: 0x9F3D0 VA: 0x9F3D0
	private static PrivateKeySelectionCallback <>f__am$cache3; // 0x4

	// Properties
	public bool TrustFailure { get; }

	// Methods

	// RVA: 0x259D7C Offset: 0x259D7C VA: 0x259D7C
	public void .ctor(Stream stream, X509CertificateCollection clientCertificates, HttpWebRequest request, byte[] buffer) { }

	// RVA: 0x25A3FC Offset: 0x25A3FC VA: 0x25A3FC
	public bool get_TrustFailure() { }

	// RVA: 0x25A428 Offset: 0x25A428 VA: 0x25A428 Slot: 31
	internal override bool RaiseServerCertificateValidation(X509Certificate certificate, int[] certificateErrors) { }

	[CompilerGeneratedAttribute] // RVA: 0x9F4F0 Offset: 0x9F4F0 VA: 0x9F4F0
	// RVA: 0x25A7B8 Offset: 0x25A7B8 VA: 0x25A7B8
	private static X509Certificate <HttpsClientStream>m__0(X509CertificateCollection clientCerts, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates) { }

	[CompilerGeneratedAttribute] // RVA: 0x9F500 Offset: 0x9F500 VA: 0x9F500
	// RVA: 0x25A7FC Offset: 0x25A7FC VA: 0x25A7FC
	private static AsymmetricAlgorithm <HttpsClientStream>m__1(X509Certificate certificate, string targetHost) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal abstract class RecordProtocol // TypeDefIndex: 1196
{
	// Fields
	private static ManualResetEvent record_processing; // 0x0
	protected Stream innerStream; // 0x8
	protected Context context; // 0xC

	// Properties
	public Context Context { get; }

	// Methods

	// RVA: 0x25B568 Offset: 0x25B568 VA: 0x25B568
	public void .ctor(Stream innerStream, Context context) { }

	// RVA: 0x25B5B0 Offset: 0x25B5B0 VA: 0x25B5B0
	private static void .cctor() { }

	// RVA: 0x25B634 Offset: 0x25B634 VA: 0x25B634
	public Context get_Context() { }

	// RVA: 0x25B63C Offset: 0x25B63C VA: 0x25B63C Slot: 4
	public virtual void SendRecord(HandshakeType type) { }

	// RVA: -1 Offset: -1 Slot: 5
	protected abstract void ProcessHandshakeMessage(TlsStream handMsg);

	// RVA: 0x25B910 Offset: 0x25B910 VA: 0x25B910 Slot: 6
	protected virtual void ProcessChangeCipherSpec() { }

	// RVA: 0x25BA10 Offset: 0x25BA10 VA: 0x25BA10 Slot: 7
	public virtual HandshakeMessage GetMessage(HandshakeType type) { }

	// RVA: 0x25BA98 Offset: 0x25BA98 VA: 0x25BA98
	public IAsyncResult BeginReceiveRecord(Stream record, AsyncCallback callback, object state) { }

	// RVA: 0x25BD78 Offset: 0x25BD78 VA: 0x25BD78
	private void InternalReceiveRecordCallback(IAsyncResult asyncResult) { }

	// RVA: 0x25C9E8 Offset: 0x25C9E8 VA: 0x25C9E8
	public byte[] EndReceiveRecord(IAsyncResult asyncResult) { }

	// RVA: 0x25CD3C Offset: 0x25CD3C VA: 0x25CD3C
	public byte[] ReceiveRecord(Stream record) { }

	// RVA: 0x25C3DC Offset: 0x25C3DC VA: 0x25C3DC
	private byte[] ReadRecordBuffer(int contentType, Stream record) { }

	// RVA: 0x25CD64 Offset: 0x25CD64 VA: 0x25CD64
	private byte[] ReadClientHelloV2(Stream record) { }

	// RVA: 0x25D2D0 Offset: 0x25D2D0 VA: 0x25D2D0
	private byte[] ReadStandardRecordBuffer(Stream record) { }

	// RVA: 0x25C8BC Offset: 0x25C8BC VA: 0x25C8BC
	private void ProcessAlert(AlertLevel alertLevel, AlertDescription alertDesc) { }

	// RVA: 0x25D9E8 Offset: 0x25D9E8 VA: 0x25D9E8
	public void SendAlert(AlertDescription description) { }

	// RVA: 0x25DBD0 Offset: 0x25DBD0 VA: 0x25DBD0
	public void SendAlert(AlertLevel level, AlertDescription description) { }

	// RVA: 0x25DA68 Offset: 0x25DA68 VA: 0x25DA68
	public void SendAlert(Alert alert) { }

	// RVA: 0x25DC90 Offset: 0x25DC90 VA: 0x25DC90
	public void SendChangeCipherSpec() { }

	// RVA: 0x25B66C Offset: 0x25B66C VA: 0x25B66C
	public IAsyncResult BeginSendRecord(HandshakeType handshakeType, AsyncCallback callback, object state) { }

	// RVA: 0x25DFDC Offset: 0x25DFDC VA: 0x25DFDC
	private void InternalSendRecordCallback(IAsyncResult ar) { }

	// RVA: 0x25DE94 Offset: 0x25DE94 VA: 0x25DE94
	public IAsyncResult BeginSendRecord(ContentType contentType, byte[] recordData, AsyncCallback callback, object state) { }

	// RVA: 0x25B7BC Offset: 0x25B7BC VA: 0x25B7BC
	public void EndSendRecord(IAsyncResult asyncResult) { }

	// RVA: 0x25DC58 Offset: 0x25DC58 VA: 0x25DC58
	public void SendRecord(ContentType contentType, byte[] recordData) { }

	// RVA: 0x25E308 Offset: 0x25E308 VA: 0x25E308
	public byte[] EncodeRecord(ContentType contentType, byte[] recordData) { }

	// RVA: 0x25E4D4 Offset: 0x25E4D4 VA: 0x25E4D4
	public byte[] EncodeRecord(ContentType contentType, byte[] recordData, int offset, int count) { }

	// RVA: 0x25E7A8 Offset: 0x25E7A8 VA: 0x25E7A8
	private byte[] encryptRecordFragment(ContentType contentType, byte[] fragment) { }

	// RVA: 0x25C55C Offset: 0x25C55C VA: 0x25C55C
	private byte[] decryptRecordFragment(ContentType contentType, byte[] fragment) { }

	// RVA: 0x25EB6C Offset: 0x25EB6C VA: 0x25EB6C
	private bool Compare(byte[] array1, byte[] array2) { }

	// RVA: 0x25D61C Offset: 0x25D61C VA: 0x25D61C
	private void ProcessCipherSpecV2Buffer(SecurityProtocolType protocol, byte[] buffer) { }

	// RVA: 0x25EC2C Offset: 0x25EC2C VA: 0x25EC2C
	private CipherSuite MapV2CipherCode(string prefix, int code) { }
}

// Namespace: 
private class RecordProtocol.ReceiveRecordAsyncResult : IAsyncResult // TypeDefIndex: 1197
{
	// Fields
	private object locker; // 0x8
	private AsyncCallback _userCallback; // 0xC
	private object _userState; // 0x10
	private Exception _asyncException; // 0x14
	private ManualResetEvent handle; // 0x18
	private byte[] _resultingBuffer; // 0x1C
	private Stream _record; // 0x20
	private bool completed; // 0x24
	private byte[] _initialBuffer; // 0x28

	// Properties
	public Stream Record { get; }
	public byte[] ResultingBuffer { get; }
	public byte[] InitialBuffer { get; }
	public object AsyncState { get; }
	public Exception AsyncException { get; }
	public bool CompletedWithError { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public bool IsCompleted { get; }

	// Methods

	// RVA: 0x25BCD4 Offset: 0x25BCD4 VA: 0x25BCD4
	public void .ctor(AsyncCallback userCallback, object userState, byte[] initialBuffer, Stream record) { }

	// RVA: 0x25C3C8 Offset: 0x25C3C8 VA: 0x25C3C8
	public Stream get_Record() { }

	// RVA: 0x25CD34 Offset: 0x25CD34 VA: 0x25CD34
	public byte[] get_ResultingBuffer() { }

	// RVA: 0x25BD70 Offset: 0x25BD70 VA: 0x25BD70
	public byte[] get_InitialBuffer() { }

	// RVA: 0x25EFBC Offset: 0x25EFBC VA: 0x25EFBC Slot: 4
	public object get_AsyncState() { }

	// RVA: 0x25CD2C Offset: 0x25CD2C VA: 0x25CD2C
	public Exception get_AsyncException() { }

	// RVA: 0x25CCE0 Offset: 0x25CCE0 VA: 0x25CCE0
	public bool get_CompletedWithError() { }

	// RVA: 0x25CBE8 Offset: 0x25CBE8 VA: 0x25CBE8 Slot: 5
	public WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x25CBB4 Offset: 0x25CBB4 VA: 0x25CBB4 Slot: 6
	public bool get_IsCompleted() { }

	// RVA: 0x25EFC4 Offset: 0x25EFC4 VA: 0x25EFC4
	private void SetComplete(Exception ex, byte[] resultingBuffer) { }

	// RVA: 0x25C9E0 Offset: 0x25C9E0 VA: 0x25C9E0
	public void SetComplete(Exception ex) { }

	// RVA: 0x25C3D0 Offset: 0x25C3D0 VA: 0x25C3D0
	public void SetComplete(byte[] resultingBuffer) { }
}

// Namespace: 
private class RecordProtocol.SendRecordAsyncResult : IAsyncResult // TypeDefIndex: 1198
{
	// Fields
	private object locker; // 0x8
	private AsyncCallback _userCallback; // 0xC
	private object _userState; // 0x10
	private Exception _asyncException; // 0x14
	private ManualResetEvent handle; // 0x18
	private HandshakeMessage _message; // 0x1C
	private bool completed; // 0x20

	// Properties
	public HandshakeMessage Message { get; }
	public object AsyncState { get; }
	public Exception AsyncException { get; }
	public bool CompletedWithError { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public bool IsCompleted { get; }

	// Methods

	// RVA: 0x25DE00 Offset: 0x25DE00 VA: 0x25DE00
	public void .ctor(AsyncCallback userCallback, object userState, HandshakeMessage message) { }

	// RVA: 0x25E21C Offset: 0x25E21C VA: 0x25E21C
	public HandshakeMessage get_Message() { }

	// RVA: 0x25F0A8 Offset: 0x25F0A8 VA: 0x25F0A8 Slot: 4
	public object get_AsyncState() { }

	// RVA: 0x25E4CC Offset: 0x25E4CC VA: 0x25E4CC
	public Exception get_AsyncException() { }

	// RVA: 0x25E480 Offset: 0x25E480 VA: 0x25E480
	public bool get_CompletedWithError() { }

	// RVA: 0x25E388 Offset: 0x25E388 VA: 0x25E388 Slot: 5
	public WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x25E354 Offset: 0x25E354 VA: 0x25E354 Slot: 6
	public bool get_IsCompleted() { }

	// RVA: 0x25E22C Offset: 0x25E22C VA: 0x25E22C
	public void SetComplete(Exception ex) { }

	// RVA: 0x25E224 Offset: 0x25E224 VA: 0x25E224
	public void SetComplete() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class RSASslSignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 1199
{
	// Fields
	private RSA key; // 0x8
	private HashAlgorithm hash; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0x9F3E0 Offset: 0x9F3E0 VA: 0x9F3E0
	private static Dictionary<string, int> <>f__switch$map15; // 0x0

	// Methods

	// RVA: 0x25ACD4 Offset: 0x25ACD4 VA: 0x25ACD4
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x25AD08 Offset: 0x25AD08 VA: 0x25AD08 Slot: 6
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature) { }

	// RVA: 0x25AEAC Offset: 0x25AEAC VA: 0x25AEAC Slot: 4
	public override void SetHashAlgorithm(string strName) { }

	// RVA: 0x25B040 Offset: 0x25B040 VA: 0x25B040 Slot: 5
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class RSASslSignatureFormatter : AsymmetricSignatureFormatter // TypeDefIndex: 1200
{
	// Fields
	private RSA key; // 0x8
	private HashAlgorithm hash; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0x9F3F0 Offset: 0x9F3F0 VA: 0x9F3F0
	private static Dictionary<string, int> <>f__switch$map16; // 0x0

	// Methods

	// RVA: 0x25B128 Offset: 0x25B128 VA: 0x25B128
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x25B15C Offset: 0x25B15C VA: 0x25B15C Slot: 6
	public override byte[] CreateSignature(byte[] rgbHash) { }

	// RVA: 0x25B2EC Offset: 0x25B2EC VA: 0x25B2EC Slot: 4
	public override void SetHashAlgorithm(string strName) { }

	// RVA: 0x25B480 Offset: 0x25B480 VA: 0x25B480 Slot: 5
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: Mono.Security.Protocol.Tls
public enum SecurityCompressionType // TypeDefIndex: 1201
{
	// Fields
	public int value__; // 0x0
	public const SecurityCompressionType None = 0;
	public const SecurityCompressionType Zlib = 1;
}

// Namespace: Mono.Security.Protocol.Tls
internal class SecurityParameters // TypeDefIndex: 1202
{
	// Fields
	private CipherSuite cipher; // 0x8
	private byte[] clientWriteMAC; // 0xC
	private byte[] serverWriteMAC; // 0x10

	// Properties
	public CipherSuite Cipher { get; set; }
	public byte[] ClientWriteMAC { get; set; }
	public byte[] ServerWriteMAC { get; set; }

	// Methods

	// RVA: 0x25F0B0 Offset: 0x25F0B0 VA: 0x25F0B0
	public void .ctor() { }

	// RVA: 0x25C554 Offset: 0x25C554 VA: 0x25C554
	public CipherSuite get_Cipher() { }

	// RVA: 0x258BC8 Offset: 0x258BC8 VA: 0x258BC8
	public void set_Cipher(CipherSuite value) { }

	// RVA: 0x25F0B8 Offset: 0x25F0B8 VA: 0x25F0B8
	public byte[] get_ClientWriteMAC() { }

	// RVA: 0x25F0C0 Offset: 0x25F0C0 VA: 0x25F0C0
	public void set_ClientWriteMAC(byte[] value) { }

	// RVA: 0x25F0C8 Offset: 0x25F0C8 VA: 0x25F0C8
	public byte[] get_ServerWriteMAC() { }

	// RVA: 0x25F0D0 Offset: 0x25F0D0 VA: 0x25F0D0
	public void set_ServerWriteMAC(byte[] value) { }

	// RVA: 0x25F0D8 Offset: 0x25F0D8 VA: 0x25F0D8
	public void Clear() { }
}

// Namespace: Mono.Security.Protocol.Tls
[FlagsAttribute] // RVA: 0x9F300 Offset: 0x9F300 VA: 0x9F300
[Serializable]
public enum SecurityProtocolType // TypeDefIndex: 1203
{
	// Fields
	public int value__; // 0x0
	public const SecurityProtocolType Default = -1073741824;
	public const SecurityProtocolType Ssl2 = 12;
	public const SecurityProtocolType Ssl3 = 48;
	public const SecurityProtocolType Tls = 192;
}

// Namespace: Mono.Security.Protocol.Tls
internal class ServerContext : Context // TypeDefIndex: 1204
{}

// Namespace: Mono.Security.Protocol.Tls
public class ValidationResult // TypeDefIndex: 1205
{
	// Fields
	private bool trusted; // 0x8
	private int error_code; // 0xC

	// Properties
	public bool Trusted { get; }
	public int ErrorCode { get; }

	// Methods

	// RVA: 0x26A710 Offset: 0x26A710 VA: 0x26A710
	public bool get_Trusted() { }

	// RVA: 0x26A718 Offset: 0x26A718 VA: 0x26A718
	public int get_ErrorCode() { }
}

// Namespace: Mono.Security.Protocol.Tls
public class SslClientStream : SslStreamBase // TypeDefIndex: 1206
{
	// Fields
	private CertificateValidationCallback ServerCertValidation; // 0x34
	private CertificateSelectionCallback ClientCertSelection; // 0x38
	private PrivateKeySelectionCallback PrivateKeySelection; // 0x3C
	private CertificateValidationCallback2 ServerCertValidation2; // 0x40

	// Properties
	internal Stream InputBuffer { get; }
	public X509CertificateCollection ClientCertificates { get; }
	public X509Certificate SelectedClientCertificate { get; }
	public CertificateValidationCallback ServerCertValidationDelegate { get; set; }
	public CertificateSelectionCallback ClientCertSelectionDelegate { get; set; }
	public PrivateKeySelectionCallback PrivateKeyCertSelectionDelegate { get; set; }
	internal override bool HaveRemoteValidation2Callback { get; }

	// Methods

	// RVA: 0x260FD4 Offset: 0x260FD4 VA: 0x260FD4
	public void .ctor(Stream stream, string targetHost, bool ownsStream) { }

	// RVA: 0x260FFC Offset: 0x260FFC VA: 0x260FFC
	public void .ctor(Stream stream, string targetHost, X509Certificate clientCertificate) { }

	// RVA: 0x261118 Offset: 0x261118 VA: 0x261118
	public void .ctor(Stream stream, string targetHost, X509CertificateCollection clientCertificates) { }

	// RVA: 0x261140 Offset: 0x261140 VA: 0x261140
	public void .ctor(Stream stream, string targetHost, bool ownsStream, SecurityProtocolType securityProtocolType) { }

	// RVA: 0x259FF4 Offset: 0x259FF4 VA: 0x259FF4
	public void .ctor(Stream stream, string targetHost, bool ownsStream, SecurityProtocolType securityProtocolType, X509CertificateCollection clientCertificates) { }

	// RVA: 0x261488 Offset: 0x261488 VA: 0x261488
	internal void add_ServerCertValidation(CertificateValidationCallback value) { }

	// RVA: 0x261574 Offset: 0x261574 VA: 0x261574
	internal void remove_ServerCertValidation(CertificateValidationCallback value) { }

	// RVA: 0x25A210 Offset: 0x25A210 VA: 0x25A210
	internal void add_ClientCertSelection(CertificateSelectionCallback value) { }

	// RVA: 0x261660 Offset: 0x261660 VA: 0x261660
	internal void remove_ClientCertSelection(CertificateSelectionCallback value) { }

	// RVA: 0x25A310 Offset: 0x25A310 VA: 0x25A310
	internal void add_PrivateKeySelection(PrivateKeySelectionCallback value) { }

	// RVA: 0x26174C Offset: 0x26174C VA: 0x26174C
	internal void remove_PrivateKeySelection(PrivateKeySelectionCallback value) { }

	// RVA: 0x261838 Offset: 0x261838 VA: 0x261838
	public void add_ServerCertValidation2(CertificateValidationCallback2 value) { }

	// RVA: 0x261924 Offset: 0x261924 VA: 0x261924
	public void remove_ServerCertValidation2(CertificateValidationCallback2 value) { }

	// RVA: 0x25A200 Offset: 0x25A200 VA: 0x25A200
	internal Stream get_InputBuffer() { }

	// RVA: 0x261A10 Offset: 0x261A10 VA: 0x261A10
	public X509CertificateCollection get_ClientCertificates() { }

	// RVA: 0x261A5C Offset: 0x261A5C VA: 0x261A5C
	public X509Certificate get_SelectedClientCertificate() { }

	// RVA: 0x261AA8 Offset: 0x261AA8 VA: 0x261AA8
	public CertificateValidationCallback get_ServerCertValidationDelegate() { }

	// RVA: 0x261AB0 Offset: 0x261AB0 VA: 0x261AB0
	public void set_ServerCertValidationDelegate(CertificateValidationCallback value) { }

	// RVA: 0x261AB8 Offset: 0x261AB8 VA: 0x261AB8
	public CertificateSelectionCallback get_ClientCertSelectionDelegate() { }

	// RVA: 0x261AC0 Offset: 0x261AC0 VA: 0x261AC0
	public void set_ClientCertSelectionDelegate(CertificateSelectionCallback value) { }

	// RVA: 0x261AC8 Offset: 0x261AC8 VA: 0x261AC8
	public PrivateKeySelectionCallback get_PrivateKeyCertSelectionDelegate() { }

	// RVA: 0x261AD0 Offset: 0x261AD0 VA: 0x261AD0
	public void set_PrivateKeyCertSelectionDelegate(PrivateKeySelectionCallback value) { }

	// RVA: 0x261AD8 Offset: 0x261AD8 VA: 0x261AD8 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x261D84 Offset: 0x261D84 VA: 0x261D84 Slot: 11
	protected override void Dispose(bool disposing) { }

	// RVA: 0x261DB0 Offset: 0x261DB0 VA: 0x261DB0 Slot: 24
	internal override IAsyncResult OnBeginNegotiateHandshake(AsyncCallback callback, object state) { }

	// RVA: 0x2620AC Offset: 0x2620AC VA: 0x2620AC
	private void SafeReceiveRecord(Stream s) { }

	// RVA: 0x26219C Offset: 0x26219C VA: 0x26219C Slot: 25
	internal override void OnNegotiateHandshakeCallback(IAsyncResult asyncResult) { }

	// RVA: 0x262748 Offset: 0x262748 VA: 0x262748 Slot: 26
	internal override X509Certificate OnLocalCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates) { }

	// RVA: 0x262784 Offset: 0x262784 VA: 0x262784 Slot: 29
	internal override bool get_HaveRemoteValidation2Callback() { }

	// RVA: 0x262794 Offset: 0x262794 VA: 0x262794 Slot: 28
	internal override ValidationResult OnRemoteCertificateValidation2(X509CertificateCollection collection) { }

	// RVA: 0x2627AC Offset: 0x2627AC VA: 0x2627AC Slot: 27
	internal override bool OnRemoteCertificateValidation(X509Certificate certificate, int[] errors) { }

	// RVA: 0x2627E0 Offset: 0x2627E0 VA: 0x2627E0 Slot: 31
	internal virtual bool RaiseServerCertificateValidation(X509Certificate certificate, int[] certificateErrors) { }

	// RVA: 0x262800 Offset: 0x262800 VA: 0x262800 Slot: 32
	internal virtual ValidationResult RaiseServerCertificateValidation2(X509CertificateCollection collection) { }

	// RVA: 0x262820 Offset: 0x262820 VA: 0x262820
	internal X509Certificate RaiseClientCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates) { }

	// RVA: 0x262878 Offset: 0x262878 VA: 0x262878 Slot: 30
	internal override AsymmetricAlgorithm OnLocalPrivateKeySelection(X509Certificate certificate, string targetHost) { }

	// RVA: 0x262890 Offset: 0x262890 VA: 0x262890
	internal AsymmetricAlgorithm RaisePrivateKeySelection(X509Certificate certificate, string targetHost) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class SslCipherSuite : CipherSuite // TypeDefIndex: 1207
{
	// Fields
	private byte[] pad1; // 0x50
	private byte[] pad2; // 0x54
	private byte[] header; // 0x58

	// Methods

	// RVA: 0x25F0E4 Offset: 0x25F0E4 VA: 0x25F0E4
	public void .ctor(short code, string name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBytes, byte ivSize, byte blockSize) { }

	// RVA: 0x25F2B4 Offset: 0x25F2B4 VA: 0x25F2B4 Slot: 5
	public override byte[] ComputeServerRecordMAC(ContentType contentType, byte[] fragment) { }

	// RVA: 0x25F800 Offset: 0x25F800 VA: 0x25F800 Slot: 4
	public override byte[] ComputeClientRecordMAC(ContentType contentType, byte[] fragment) { }

	// RVA: 0x25FD4C Offset: 0x25FD4C VA: 0x25FD4C Slot: 6
	public override void ComputeMasterSecret(byte[] preMasterSecret) { }

	// RVA: 0x2601E0 Offset: 0x2601E0 VA: 0x2601E0 Slot: 7
	public override void ComputeKeys() { }

	// RVA: 0x25FF64 Offset: 0x25FF64 VA: 0x25FF64
	private byte[] prf(byte[] secret, string label, byte[] random) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class SslHandshakeHash : HashAlgorithm // TypeDefIndex: 1208
{
	// Fields
	private HashAlgorithm md5; // 0x18
	private HashAlgorithm sha; // 0x1C
	private bool hashing; // 0x20
	private byte[] secret; // 0x24
	private byte[] innerPadMD5; // 0x28
	private byte[] outerPadMD5; // 0x2C
	private byte[] innerPadSHA; // 0x30
	private byte[] outerPadSHA; // 0x34

	// Methods

	// RVA: 0x2628B0 Offset: 0x2628B0 VA: 0x2628B0
	public void .ctor(byte[] secret) { }

	// RVA: 0x2629B8 Offset: 0x2629B8 VA: 0x2629B8 Slot: 13
	public override void Initialize() { }

	// RVA: 0x262BD4 Offset: 0x262BD4 VA: 0x262BD4 Slot: 11
	protected override byte[] HashFinal() { }

	// RVA: 0x26309C Offset: 0x26309C VA: 0x26309C Slot: 10
	protected override void HashCore(byte[] array, int ibStart, int cbSize) { }

	// RVA: 0x263134 Offset: 0x263134 VA: 0x263134
	public byte[] CreateSignature(RSA rsa) { }

	// RVA: 0x262A28 Offset: 0x262A28 VA: 0x262A28
	private void initializePad() { }
}

// Namespace: Mono.Security.Protocol.Tls
public abstract class SslStreamBase : Stream, IDisposable // TypeDefIndex: 1209
{
	// Fields
	private const int WaitTimeOut = 300000;
	private static ManualResetEvent record_processing; // 0x0
	internal Stream innerStream; // 0x8
	internal MemoryStream inputBuffer; // 0xC
	internal Context context; // 0x10
	internal RecordProtocol protocol; // 0x14
	internal bool ownsStream; // 0x18
	private bool disposed; // 0x19
	private bool checkCertRevocationStatus; // 0x1A
	private object negotiate; // 0x1C
	private object read; // 0x20
	private object write; // 0x24
	private ManualResetEvent negotiationComplete; // 0x28
	private byte[] recbuf; // 0x2C
	private MemoryStream recordStream; // 0x30

	// Properties
	internal bool MightNeedHandshake { get; }
	internal abstract bool HaveRemoteValidation2Callback { get; }
	public bool CheckCertRevocationStatus { get; set; }
	public CipherAlgorithmType CipherAlgorithm { get; }
	public int CipherStrength { get; }
	public HashAlgorithmType HashAlgorithm { get; }
	public int HashStrength { get; }
	public int KeyExchangeStrength { get; }
	public ExchangeAlgorithmType KeyExchangeAlgorithm { get; }
	public SecurityProtocolType SecurityProtocol { get; }
	public X509Certificate ServerCertificate { get; }
	internal X509CertificateCollection ServerCertificates { get; }
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x2611E0 Offset: 0x2611E0 VA: 0x2611E0
	protected void .ctor(Stream stream, bool ownsStream) { }

	// RVA: 0x263290 Offset: 0x263290 VA: 0x263290
	private static void .cctor() { }

	// RVA: 0x263314 Offset: 0x263314 VA: 0x263314
	private void AsyncHandshakeCallback(IAsyncResult asyncResult) { }

	// RVA: 0x2641F0 Offset: 0x2641F0 VA: 0x2641F0
	internal bool get_MightNeedHandshake() { }

	// RVA: 0x2642C8 Offset: 0x2642C8 VA: 0x2642C8
	internal void NegotiateHandshake() { }

	// RVA: -1 Offset: -1 Slot: 24
	internal abstract IAsyncResult OnBeginNegotiateHandshake(AsyncCallback callback, object state);

	// RVA: -1 Offset: -1 Slot: 25
	internal abstract void OnNegotiateHandshakeCallback(IAsyncResult asyncResult);

	// RVA: -1 Offset: -1 Slot: 26
	internal abstract X509Certificate OnLocalCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates);

	// RVA: -1 Offset: -1 Slot: 27
	internal abstract bool OnRemoteCertificateValidation(X509Certificate certificate, int[] errors);

	// RVA: -1 Offset: -1 Slot: 28
	internal abstract ValidationResult OnRemoteCertificateValidation2(X509CertificateCollection collection);

	// RVA: -1 Offset: -1 Slot: 29
	internal abstract bool get_HaveRemoteValidation2Callback();

	// RVA: -1 Offset: -1 Slot: 30
	internal abstract AsymmetricAlgorithm OnLocalPrivateKeySelection(X509Certificate certificate, string targetHost);

	// RVA: 0x26284C Offset: 0x26284C VA: 0x26284C
	internal X509Certificate RaiseLocalCertificateSelection(X509CertificateCollection certificates, X509Certificate remoteCertificate, string targetHost, X509CertificateCollection requestedCertificates) { }

	// RVA: 0x2627F0 Offset: 0x2627F0 VA: 0x2627F0
	internal bool RaiseRemoteCertificateValidation(X509Certificate certificate, int[] errors) { }

	// RVA: 0x262810 Offset: 0x262810 VA: 0x262810
	internal ValidationResult RaiseRemoteCertificateValidation2(X509CertificateCollection collection) { }

	// RVA: 0x2628A0 Offset: 0x2628A0 VA: 0x2628A0
	internal AsymmetricAlgorithm RaiseLocalPrivateKeySelection(X509Certificate certificate, string targetHost) { }

	// RVA: 0x2648DC Offset: 0x2648DC VA: 0x2648DC
	public bool get_CheckCertRevocationStatus() { }

	// RVA: 0x25A208 Offset: 0x25A208 VA: 0x25A208
	public void set_CheckCertRevocationStatus(bool value) { }

	// RVA: 0x2648E4 Offset: 0x2648E4 VA: 0x2648E4
	public CipherAlgorithmType get_CipherAlgorithm() { }

	// RVA: 0x264974 Offset: 0x264974 VA: 0x264974
	public int get_CipherStrength() { }

	// RVA: 0x264A0C Offset: 0x264A0C VA: 0x264A0C
	public HashAlgorithmType get_HashAlgorithm() { }

	// RVA: 0x264A9C Offset: 0x264A9C VA: 0x264A9C
	public int get_HashStrength() { }

	// RVA: 0x264B34 Offset: 0x264B34 VA: 0x264B34
	public int get_KeyExchangeStrength() { }

	// RVA: 0x264C20 Offset: 0x264C20 VA: 0x264C20
	public ExchangeAlgorithmType get_KeyExchangeAlgorithm() { }

	// RVA: 0x264CB0 Offset: 0x264CB0 VA: 0x264CB0
	public SecurityProtocolType get_SecurityProtocol() { }

	// RVA: 0x264D0C Offset: 0x264D0C VA: 0x264D0C
	public X509Certificate get_ServerCertificate() { }

	// RVA: 0x264ED4 Offset: 0x264ED4 VA: 0x264ED4
	internal X509CertificateCollection get_ServerCertificates() { }

	// RVA: 0x264474 Offset: 0x264474 VA: 0x264474
	private bool BeginNegotiateHandshake(SslStreamBase.InternalAsyncResult asyncResult) { }

	// RVA: 0x2647EC Offset: 0x2647EC VA: 0x2647EC
	private void EndNegotiateHandshake(SslStreamBase.InternalAsyncResult asyncResult) { }

	// RVA: 0x265098 Offset: 0x265098 VA: 0x265098 Slot: 20
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x263B78 Offset: 0x263B78 VA: 0x263B78
	private void InternalBeginRead(SslStreamBase.InternalAsyncResult asyncResult) { }

	// RVA: 0x265490 Offset: 0x265490 VA: 0x265490
	private void InternalReadCallback(IAsyncResult result) { }

	// RVA: 0x2637C0 Offset: 0x2637C0 VA: 0x2637C0
	private void InternalBeginWrite(SslStreamBase.InternalAsyncResult asyncResult) { }

	// RVA: 0x266244 Offset: 0x266244 VA: 0x266244
	private void InternalWriteCallback(IAsyncResult ar) { }

	// RVA: 0x2664C0 Offset: 0x2664C0 VA: 0x2664C0 Slot: 21
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x266760 Offset: 0x266760 VA: 0x266760 Slot: 22
	public override int EndRead(IAsyncResult asyncResult) { }

	// RVA: 0x2669F4 Offset: 0x2669F4 VA: 0x2669F4 Slot: 23
	public override void EndWrite(IAsyncResult asyncResult) { }

	// RVA: 0x266C18 Offset: 0x266C18 VA: 0x266C18 Slot: 12
	public override void Close() { }

	// RVA: 0x266C20 Offset: 0x266C20 VA: 0x266C20 Slot: 13
	public override void Flush() { }

	// RVA: 0x266C5C Offset: 0x266C5C VA: 0x266C5C
	public int Read(byte[] buffer) { }

	// RVA: 0x266CAC Offset: 0x266CAC VA: 0x266CAC Slot: 14
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x267A4C Offset: 0x267A4C VA: 0x267A4C Slot: 16
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x267AD4 Offset: 0x267AD4 VA: 0x267AD4 Slot: 17
	public override void SetLength(long value) { }

	// RVA: 0x267B5C Offset: 0x267B5C VA: 0x267B5C
	public void Write(byte[] buffer) { }

	// RVA: 0x267BAC Offset: 0x267BAC VA: 0x267BAC Slot: 18
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x2680A8 Offset: 0x2680A8 VA: 0x2680A8 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x2680DC Offset: 0x2680DC VA: 0x2680DC Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x2680E4 Offset: 0x2680E4 VA: 0x2680E4 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x268118 Offset: 0x268118 VA: 0x268118 Slot: 8
	public override long get_Length() { }

	// RVA: 0x2681A0 Offset: 0x2681A0 VA: 0x2681A0 Slot: 9
	public override long get_Position() { }

	// RVA: 0x268228 Offset: 0x268228 VA: 0x268228 Slot: 10
	public override void set_Position(long value) { }

	// RVA: 0x261D0C Offset: 0x261D0C VA: 0x261D0C Slot: 1
	protected override void Finalize() { }

	// RVA: 0x261B38 Offset: 0x261B38 VA: 0x261B38 Slot: 11
	protected override void Dispose(bool disposing) { }

	// RVA: 0x2653F4 Offset: 0x2653F4 VA: 0x2653F4
	private void resetBuffer() { }

	// RVA: 0x26533C Offset: 0x26533C VA: 0x26533C
	internal void checkDisposed() { }
}

// Namespace: 
private class SslStreamBase.InternalAsyncResult : IAsyncResult // TypeDefIndex: 1210
{
	// Fields
	private object locker; // 0x8
	private AsyncCallback _userCallback; // 0xC
	private object _userState; // 0x10
	private Exception _asyncException; // 0x14
	private ManualResetEvent handle; // 0x18
	private bool completed; // 0x1C
	private int _bytesRead; // 0x20
	private bool _fromWrite; // 0x24
	private bool _proceedAfterHandshake; // 0x25
	private byte[] _buffer; // 0x28
	private int _offset; // 0x2C
	private int _count; // 0x30

	// Properties
	public bool ProceedAfterHandshake { get; }
	public bool FromWrite { get; }
	public byte[] Buffer { get; }
	public int Offset { get; }
	public int Count { get; }
	public int BytesRead { get; }
	public object AsyncState { get; }
	public Exception AsyncException { get; }
	public bool CompletedWithError { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public bool IsCompleted { get; }

	// Methods

	// RVA: 0x2643B8 Offset: 0x2643B8 VA: 0x2643B8
	public void .ctor(AsyncCallback userCallback, object userState, byte[] buffer, int offset, int count, bool fromWrite, bool proceedAfterHandshake) { }

	// RVA: 0x2637B0 Offset: 0x2637B0 VA: 0x2637B0
	public bool get_ProceedAfterHandshake() { }

	// RVA: 0x2637B8 Offset: 0x2637B8 VA: 0x2637B8
	public bool get_FromWrite() { }

	// RVA: 0x265474 Offset: 0x265474 VA: 0x265474
	public byte[] get_Buffer() { }

	// RVA: 0x26547C Offset: 0x26547C VA: 0x26547C
	public int get_Offset() { }

	// RVA: 0x2653EC Offset: 0x2653EC VA: 0x2653EC
	public int get_Count() { }

	// RVA: 0x2669EC Offset: 0x2669EC VA: 0x2669EC
	public int get_BytesRead() { }

	// RVA: 0x2682B0 Offset: 0x2682B0 VA: 0x2682B0 Slot: 4
	public object get_AsyncState() { }

	// RVA: 0x265090 Offset: 0x265090 VA: 0x265090
	public Exception get_AsyncException() { }

	// RVA: 0x265044 Offset: 0x265044 VA: 0x265044
	public bool get_CompletedWithError() { }

	// RVA: 0x264F4C Offset: 0x264F4C VA: 0x264F4C Slot: 5
	public WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x264F18 Offset: 0x264F18 VA: 0x264F18 Slot: 6
	public bool get_IsCompleted() { }

	// RVA: 0x2682B8 Offset: 0x2682B8 VA: 0x2682B8
	private void SetComplete(Exception ex, int bytesRead) { }

	// RVA: 0x2641E8 Offset: 0x2641E8 VA: 0x2641E8
	public void SetComplete(Exception ex) { }

	// RVA: 0x265484 Offset: 0x265484 VA: 0x265484
	public void SetComplete(int bytesRead) { }

	// RVA: 0x2641DC Offset: 0x2641DC VA: 0x2641DC
	public void SetComplete() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class TlsCipherSuite : CipherSuite // TypeDefIndex: 1211
{
	// Fields
	private byte[] header; // 0x50
	private object headerLock; // 0x54

	// Methods

	// RVA: 0x2683A0 Offset: 0x2683A0 VA: 0x2683A0
	public void .ctor(short code, string name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBytes, byte ivSize, byte blockSize) { }

	// RVA: 0x2684B4 Offset: 0x2684B4 VA: 0x2684B4 Slot: 5
	public override byte[] ComputeServerRecordMAC(ContentType contentType, byte[] fragment) { }

	// RVA: 0x26887C Offset: 0x26887C VA: 0x26887C Slot: 4
	public override byte[] ComputeClientRecordMAC(ContentType contentType, byte[] fragment) { }

	// RVA: 0x268C44 Offset: 0x268C44 VA: 0x268C44 Slot: 6
	public override void ComputeMasterSecret(byte[] preMasterSecret) { }

	// RVA: 0x268D84 Offset: 0x268D84 VA: 0x268D84 Slot: 7
	public override void ComputeKeys() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal sealed class TlsClientSettings // TypeDefIndex: 1212
{
	// Fields
	private string targetHost; // 0x8
	private X509CertificateCollection certificates; // 0xC
	private X509Certificate clientCertificate; // 0x10
	private RSAManaged certificateRSA; // 0x14

	// Properties
	public string TargetHost { get; set; }
	public X509CertificateCollection Certificates { get; set; }
	public X509Certificate ClientCertificate { get; set; }

	// Methods

	// RVA: 0x2696E0 Offset: 0x2696E0 VA: 0x2696E0
	public void .ctor() { }

	// RVA: 0x2591F8 Offset: 0x2591F8 VA: 0x2591F8
	public string get_TargetHost() { }

	// RVA: 0x2697A4 Offset: 0x2697A4 VA: 0x2697A4
	public void set_TargetHost(string value) { }

	// RVA: 0x261A54 Offset: 0x261A54 VA: 0x261A54
	public X509CertificateCollection get_Certificates() { }

	// RVA: 0x2697AC Offset: 0x2697AC VA: 0x2697AC
	public void set_Certificates(X509CertificateCollection value) { }

	// RVA: 0x261AA0 Offset: 0x261AA0 VA: 0x261AA0
	public X509Certificate get_ClientCertificate() { }

	// RVA: 0x2697B4 Offset: 0x2697B4 VA: 0x2697B4
	public void set_ClientCertificate(X509Certificate value) { }

	// RVA: 0x2697BC Offset: 0x2697BC VA: 0x2697BC
	public void UpdateCertificateRSA() { }
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal sealed class TlsException : Exception // TypeDefIndex: 1213
{
	// Fields
	private Alert alert; // 0x34

	// Properties
	public Alert Alert { get; }

	// Methods

	// RVA: 0x25D9A0 Offset: 0x25D9A0 VA: 0x25D9A0
	internal void .ctor(string message) { }

	// RVA: 0x269B48 Offset: 0x269B48 VA: 0x269B48
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x25D9A8 Offset: 0x25D9A8 VA: 0x25D9A8
	internal void .ctor(AlertLevel level, AlertDescription description) { }

	// RVA: 0x269B68 Offset: 0x269B68 VA: 0x269B68
	internal void .ctor(AlertLevel level, AlertDescription description, string message) { }

	// RVA: 0x25D2A0 Offset: 0x25D2A0 VA: 0x25D2A0
	internal void .ctor(AlertDescription description) { }

	// RVA: 0x2592B4 Offset: 0x2592B4 VA: 0x2592B4
	internal void .ctor(AlertDescription description, string message) { }

	// RVA: 0x2620A4 Offset: 0x2620A4 VA: 0x2620A4
	public Alert get_Alert() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class TlsServerSettings // TypeDefIndex: 1214
{
	// Fields
	private X509CertificateCollection certificates; // 0x8
	private RSA certificateRSA; // 0xC
	private RSAParameters rsaParameters; // 0x10
	private byte[] signedParams; // 0x30
	private string[] distinguisedNames; // 0x34
	private bool serverKeyExchange; // 0x38
	private bool certificateRequest; // 0x39
	private ClientCertificateType[] certificateTypes; // 0x3C

	// Properties
	public bool ServerKeyExchange { get; set; }
	public X509CertificateCollection Certificates { get; set; }
	public RSA CertificateRSA { get; }
	public RSAParameters RsaParameters { get; set; }
	public byte[] SignedParams { set; }
	public bool CertificateRequest { get; set; }
	public ClientCertificateType[] CertificateTypes { set; }
	public string[] DistinguisedNames { set; }

	// Methods

	// RVA: 0x269BFC Offset: 0x269BFC VA: 0x269BFC
	public void .ctor() { }

	// RVA: 0x269C04 Offset: 0x269C04 VA: 0x269C04
	public bool get_ServerKeyExchange() { }

	// RVA: 0x2596FC Offset: 0x2596FC VA: 0x2596FC
	public void set_ServerKeyExchange(bool value) { }

	// RVA: 0x264C18 Offset: 0x264C18 VA: 0x264C18
	public X509CertificateCollection get_Certificates() { }

	// RVA: 0x269C0C Offset: 0x269C0C VA: 0x269C0C
	public void set_Certificates(X509CertificateCollection value) { }

	// RVA: 0x25996C Offset: 0x25996C VA: 0x25996C
	public RSA get_CertificateRSA() { }

	// RVA: 0x269C14 Offset: 0x269C14 VA: 0x269C14
	public RSAParameters get_RsaParameters() { }

	// RVA: 0x259704 Offset: 0x259704 VA: 0x259704
	public void set_RsaParameters(RSAParameters value) { }

	// RVA: 0x259730 Offset: 0x259730 VA: 0x259730
	public void set_SignedParams(byte[] value) { }

	// RVA: 0x262740 Offset: 0x262740 VA: 0x262740
	public bool get_CertificateRequest() { }

	// RVA: 0x269C30 Offset: 0x269C30 VA: 0x269C30
	public void set_CertificateRequest(bool value) { }

	// RVA: 0x269C38 Offset: 0x269C38 VA: 0x269C38
	public void set_CertificateTypes(ClientCertificateType[] value) { }

	// RVA: 0x269C40 Offset: 0x269C40 VA: 0x269C40
	public void set_DistinguisedNames(string[] value) { }

	// RVA: 0x269C48 Offset: 0x269C48 VA: 0x269C48
	public void UpdateCertificateRSA() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class TlsStream : Stream // TypeDefIndex: 1215
{
	// Fields
	private bool canRead; // 0x8
	private bool canWrite; // 0x9
	private MemoryStream buffer; // 0xC
	private byte[] temp; // 0x10

	// Properties
	public bool EOF { get; }
	public override bool CanWrite { get; }
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override long Position { get; set; }
	public override long Length { get; }

	// Methods

	// RVA: 0x2597B4 Offset: 0x2597B4 VA: 0x2597B4
	public void .ctor() { }

	// RVA: 0x2599CC Offset: 0x2599CC VA: 0x2599CC
	public void .ctor(byte[] data) { }

	// RVA: 0x25C98C Offset: 0x25C98C VA: 0x25C98C
	public bool get_EOF() { }

	// RVA: 0x269E2C Offset: 0x269E2C VA: 0x269E2C Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x269E34 Offset: 0x269E34 VA: 0x269E34 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x269E3C Offset: 0x269E3C VA: 0x269E3C Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x269E70 Offset: 0x269E70 VA: 0x269E70 Slot: 9
	public override long get_Position() { }

	// RVA: 0x269EA4 Offset: 0x269EA4 VA: 0x269EA4 Slot: 10
	public override void set_Position(long value) { }

	// RVA: 0x269EF4 Offset: 0x269EF4 VA: 0x269EF4 Slot: 8
	public override long get_Length() { }

	// RVA: 0x269F28 Offset: 0x269F28 VA: 0x269F28
	private byte[] ReadSmallValue(int length) { }

	// RVA: 0x2591B0 Offset: 0x2591B0 VA: 0x2591B0
	public byte ReadByte() { }

	// RVA: 0x258E68 Offset: 0x258E68 VA: 0x258E68
	public short ReadInt16() { }

	// RVA: 0x26A0D8 Offset: 0x26A0D8 VA: 0x26A0D8
	public int ReadInt24() { }

	// RVA: 0x2590B8 Offset: 0x2590B8 VA: 0x2590B8
	public byte[] ReadBytes(int count) { }

	// RVA: 0x25E97C Offset: 0x25E97C VA: 0x25E97C
	public void Write(byte value) { }

	// RVA: 0x25EA58 Offset: 0x25EA58 VA: 0x25EA58
	public void Write(short value) { }

	// RVA: 0x26A16C Offset: 0x26A16C VA: 0x26A16C
	public void WriteInt24(int value) { }

	// RVA: 0x26A2B8 Offset: 0x26A2B8 VA: 0x26A2B8
	public void Write(int value) { }

	// RVA: 0x259868 Offset: 0x259868 VA: 0x259868
	public void Write(byte[] buffer) { }

	// RVA: 0x2598EC Offset: 0x2598EC VA: 0x2598EC
	public void Reset() { }

	// RVA: 0x2598B8 Offset: 0x2598B8 VA: 0x2598B8
	public byte[] ToArray() { }

	// RVA: 0x26A43C Offset: 0x26A43C VA: 0x26A43C Slot: 13
	public override void Flush() { }

	// RVA: 0x26A470 Offset: 0x26A470 VA: 0x26A470 Slot: 17
	public override void SetLength(long length) { }

	// RVA: 0x26A4C0 Offset: 0x26A4C0 VA: 0x26A4C0 Slot: 16
	public override long Seek(long offset, SeekOrigin loc) { }

	// RVA: 0x26A518 Offset: 0x26A518 VA: 0x26A518 Slot: 14
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x26A614 Offset: 0x26A614 VA: 0x26A614 Slot: 18
	public override void Write(byte[] buffer, int offset, int count) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake
[Serializable]
internal enum ClientCertificateType // TypeDefIndex: 1216
{
	// Fields
	public int value__; // 0x0
	public const ClientCertificateType RSA = 1;
	public const ClientCertificateType DSS = 2;
	public const ClientCertificateType RSAFixed = 3;
	public const ClientCertificateType DSSFixed = 4;
	public const ClientCertificateType Unknown = 255;
}

// Namespace: Mono.Security.Protocol.Tls.Handshake
internal abstract class HandshakeMessage : TlsStream // TypeDefIndex: 1217
{
	// Fields
	private Context context; // 0x14
	private HandshakeType handshakeType; // 0x18
	private ContentType contentType; // 0x19
	private byte[] cache; // 0x1C

	// Properties
	public Context Context { get; }
	public HandshakeType HandshakeType { get; }
	public ContentType ContentType { get; }

	// Methods

	// RVA: 0x259974 Offset: 0x259974 VA: 0x259974
	public void .ctor(Context context, HandshakeType handshakeType) { }

	// RVA: 0x2599A0 Offset: 0x2599A0 VA: 0x2599A0
	public void .ctor(Context context, HandshakeType handshakeType, ContentType contentType) { }

	// RVA: 0x2587F0 Offset: 0x2587F0 VA: 0x2587F0
	public void .ctor(Context context, HandshakeType handshakeType, byte[] data) { }

	// RVA: 0x258BC0 Offset: 0x258BC0 VA: 0x258BC0
	public Context get_Context() { }

	// RVA: 0x259A98 Offset: 0x259A98 VA: 0x259A98
	public HandshakeType get_HandshakeType() { }

	// RVA: 0x259AA0 Offset: 0x259AA0 VA: 0x259AA0
	public ContentType get_ContentType() { }

	// RVA: -1 Offset: -1 Slot: 24
	protected abstract void ProcessAsTls1();

	// RVA: -1 Offset: -1 Slot: 25
	protected abstract void ProcessAsSsl3();

	// RVA: 0x259AA8 Offset: 0x259AA8 VA: 0x259AA8
	public void Process() { }

	// RVA: 0x258B1C Offset: 0x258B1C VA: 0x258B1C Slot: 26
	public virtual void Update() { }

	// RVA: 0x259BA8 Offset: 0x259BA8 VA: 0x259BA8 Slot: 27
	public virtual byte[] EncodeMessage() { }

	// RVA: 0x259200 Offset: 0x259200 VA: 0x259200
	public static bool Compare(byte[] buffer1, byte[] buffer2) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake
[Serializable]
internal enum HandshakeType // TypeDefIndex: 1218
{
	// Fields
	public byte value__; // 0x0
	public const HandshakeType HelloRequest = 0;
	public const HandshakeType ClientHello = 1;
	public const HandshakeType ServerHello = 2;
	public const HandshakeType Certificate = 11;
	public const HandshakeType ServerKeyExchange = 12;
	public const HandshakeType CertificateRequest = 13;
	public const HandshakeType ServerHelloDone = 14;
	public const HandshakeType CertificateVerify = 15;
	public const HandshakeType ClientKeyExchange = 16;
	public const HandshakeType Finished = 20;
	public const HandshakeType None = 255;
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientCertificate : HandshakeMessage // TypeDefIndex: 1219
{
	// Fields
	private bool clientCertSelected; // 0x20
	private X509Certificate clientCert; // 0x24

	// Properties
	public X509Certificate ClientCertificate { get; }

	// Methods

	// RVA: 0x3EB310 Offset: 0x3EB310 VA: 0x3EB310
	public void .ctor(Context context) { }

	// RVA: 0x3ED454 Offset: 0x3ED454 VA: 0x3ED454
	public X509Certificate get_ClientCertificate() { }

	// RVA: 0x3ED790 Offset: 0x3ED790 VA: 0x3ED790 Slot: 26
	public override void Update() { }

	// RVA: 0x3ED484 Offset: 0x3ED484 VA: 0x3ED484
	private void GetClientCertificate() { }

	// RVA: 0x3ED7B4 Offset: 0x3ED7B4 VA: 0x3ED7B4
	private void SendCertificates() { }

	// RVA: 0x3EDCAC Offset: 0x3EDCAC VA: 0x3EDCAC Slot: 25
	protected override void ProcessAsSsl3() { }

	// RVA: 0x3EDCEC Offset: 0x3EDCEC VA: 0x3EDCEC Slot: 24
	protected override void ProcessAsTls1() { }

	// RVA: 0x3ED930 Offset: 0x3ED930 VA: 0x3ED930
	private X509Certificate FindParentCertificate(X509Certificate cert) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientCertificateVerify : HandshakeMessage // TypeDefIndex: 1220
{
	// Methods

	// RVA: 0x3EB328 Offset: 0x3EB328 VA: 0x3EB328
	public void .ctor(Context context) { }

	// RVA: 0x3EDD40 Offset: 0x3EDD40 VA: 0x3EDD40 Slot: 26
	public override void Update() { }

	// RVA: 0x3EDD64 Offset: 0x3EDD64 VA: 0x3EDD64 Slot: 25
	protected override void ProcessAsSsl3() { }

	// RVA: 0x3EE4C4 Offset: 0x3EE4C4 VA: 0x3EE4C4 Slot: 24
	protected override void ProcessAsTls1() { }

	// RVA: 0x3EE25C Offset: 0x3EE25C VA: 0x3EE25C
	private RSA getClientCertRSA(RSA privKey) { }

	// RVA: 0x3EE9A8 Offset: 0x3EE9A8 VA: 0x3EE9A8
	private byte[] getUnsignedBigInteger(byte[] integer) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientFinished : HandshakeMessage // TypeDefIndex: 1221
{
	// Fields
	private static byte[] Ssl3Marker; // 0x0

	// Methods

	// RVA: 0x3EB334 Offset: 0x3EB334 VA: 0x3EB334
	public void .ctor(Context context) { }

	// RVA: 0x3EEA84 Offset: 0x3EEA84 VA: 0x3EEA84
	private static void .cctor() { }

	// RVA: 0x3EEB1C Offset: 0x3EEB1C VA: 0x3EEB1C Slot: 26
	public override void Update() { }

	// RVA: 0x3EEB40 Offset: 0x3EEB40 VA: 0x3EEB40 Slot: 25
	protected override void ProcessAsSsl3() { }

	// RVA: 0x3EEDC4 Offset: 0x3EEDC4 VA: 0x3EEDC4 Slot: 24
	protected override void ProcessAsTls1() { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientHello : HandshakeMessage // TypeDefIndex: 1222
{
	// Fields
	private byte[] random; // 0x20

	// Methods

	// RVA: 0x3EB304 Offset: 0x3EB304 VA: 0x3EB304
	public void .ctor(Context context) { }

	// RVA: 0x3EEF68 Offset: 0x3EEF68 VA: 0x3EEF68 Slot: 26
	public override void Update() { }

	// RVA: 0x3EF0BC Offset: 0x3EF0BC VA: 0x3EF0BC Slot: 25
	protected override void ProcessAsSsl3() { }

	// RVA: 0x3EF0CC Offset: 0x3EF0CC VA: 0x3EF0CC Slot: 24
	protected override void ProcessAsTls1() { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientKeyExchange : HandshakeMessage // TypeDefIndex: 1223
{
	// Methods

	// RVA: 0x3EB31C Offset: 0x3EB31C VA: 0x3EB31C
	public void .ctor(Context context) { }

	// RVA: 0x3EF57C Offset: 0x3EF57C VA: 0x3EF57C Slot: 25
	protected override void ProcessAsSsl3() { }

	// RVA: 0x3EF91C Offset: 0x3EF91C VA: 0x3EF91C Slot: 24
	protected override void ProcessAsTls1() { }

	// RVA: 0x3EF584 Offset: 0x3EF584 VA: 0x3EF584
	public void ProcessCommon(bool sendLength) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerCertificate : HandshakeMessage // TypeDefIndex: 1224
{
	// Fields
	private X509CertificateCollection certificates; // 0x20

	// Methods

	// RVA: 0x3EB350 Offset: 0x3EB350 VA: 0x3EB350
	public void .ctor(Context context, byte[] buffer) { }

	// RVA: 0x3EF924 Offset: 0x3EF924 VA: 0x3EF924 Slot: 26
	public override void Update() { }

	// RVA: 0x3EF9C4 Offset: 0x3EF9C4 VA: 0x3EF9C4 Slot: 25
	protected override void ProcessAsSsl3() { }

	// RVA: 0x3EF9D4 Offset: 0x3EF9D4 VA: 0x3EF9D4 Slot: 24
	protected override void ProcessAsTls1() { }

	// RVA: 0x3F0384 Offset: 0x3F0384 VA: 0x3F0384
	private bool checkCertificateUsage(X509Certificate cert) { }

	// RVA: 0x3EFAF8 Offset: 0x3EFAF8 VA: 0x3EFAF8
	private void validateCertificates(X509CertificateCollection certificates) { }

	// RVA: 0x3F0864 Offset: 0x3F0864 VA: 0x3F0864
	private bool checkServerIdentity(X509Certificate cert) { }

	// RVA: 0x3F0F7C Offset: 0x3F0F7C VA: 0x3F0F7C
	private bool checkDomainName(string subjectName) { }

	// RVA: 0x3F0B5C Offset: 0x3F0B5C VA: 0x3F0B5C
	private static bool Match(string hostname, string pattern) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerCertificateRequest : HandshakeMessage // TypeDefIndex: 1225
{
	// Fields
	private ClientCertificateType[] certificateTypes; // 0x20
	private string[] distinguisedNames; // 0x24

	// Methods

	// RVA: 0x3EB378 Offset: 0x3EB378 VA: 0x3EB378
	public void .ctor(Context context, byte[] buffer) { }

	// RVA: 0x3F126C Offset: 0x3F126C VA: 0x3F126C Slot: 26
	public override void Update() { }

	// RVA: 0x3F1358 Offset: 0x3F1358 VA: 0x3F1358 Slot: 25
	protected override void ProcessAsSsl3() { }

	// RVA: 0x3F1368 Offset: 0x3F1368 VA: 0x3F1368 Slot: 24
	protected override void ProcessAsTls1() { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerFinished : HandshakeMessage // TypeDefIndex: 1226
{
	// Fields
	private static byte[] Ssl3Marker; // 0x0

	// Methods

	// RVA: 0x3EB3A0 Offset: 0x3EB3A0 VA: 0x3EB3A0
	public void .ctor(Context context, byte[] buffer) { }

	// RVA: 0x3F168C Offset: 0x3F168C VA: 0x3F168C
	private static void .cctor() { }

	// RVA: 0x3F1724 Offset: 0x3F1724 VA: 0x3F1724 Slot: 26
	public override void Update() { }

	// RVA: 0x3F1764 Offset: 0x3F1764 VA: 0x3F1764 Slot: 25
	protected override void ProcessAsSsl3() { }

	// RVA: 0x3F1A54 Offset: 0x3F1A54 VA: 0x3F1A54 Slot: 24
	protected override void ProcessAsTls1() { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerHello : HandshakeMessage // TypeDefIndex: 1227
{
	// Fields
	private SecurityCompressionType compressionMethod; // 0x20
	private byte[] random; // 0x24
	private byte[] sessionId; // 0x28
	private CipherSuite cipherSuite; // 0x2C

	// Methods

	// RVA: 0x2587C8 Offset: 0x2587C8 VA: 0x2587C8
	public void .ctor(Context context, byte[] buffer) { }

	// RVA: 0x258818 Offset: 0x258818 VA: 0x258818 Slot: 26
	public override void Update() { }

	// RVA: 0x258BD0 Offset: 0x258BD0 VA: 0x258BD0 Slot: 25
	protected override void ProcessAsSsl3() { }

	// RVA: 0x258BE0 Offset: 0x258BE0 VA: 0x258BE0 Slot: 24
	protected override void ProcessAsTls1() { }

	// RVA: 0x258ED8 Offset: 0x258ED8 VA: 0x258ED8
	private void processProtocol(short protocol) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerHelloDone : HandshakeMessage // TypeDefIndex: 1228
{
	// Methods

	// RVA: 0x259340 Offset: 0x259340 VA: 0x259340
	public void .ctor(Context context, byte[] buffer) { }

	// RVA: 0x259368 Offset: 0x259368 VA: 0x259368 Slot: 25
	protected override void ProcessAsSsl3() { }

	// RVA: 0x25936C Offset: 0x25936C VA: 0x25936C Slot: 24
	protected override void ProcessAsTls1() { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerKeyExchange : HandshakeMessage // TypeDefIndex: 1229
{
	// Fields
	private RSAParameters rsaParams; // 0x20
	private byte[] signedParams; // 0x40

	// Methods

	// RVA: 0x259370 Offset: 0x259370 VA: 0x259370
	public void .ctor(Context context, byte[] buffer) { }

	// RVA: 0x259614 Offset: 0x259614 VA: 0x259614 Slot: 26
	public override void Update() { }

	// RVA: 0x259738 Offset: 0x259738 VA: 0x259738 Slot: 25
	protected override void ProcessAsSsl3() { }

	// RVA: 0x259748 Offset: 0x259748 VA: 0x259748 Slot: 24
	protected override void ProcessAsTls1() { }

	// RVA: 0x2593A0 Offset: 0x2593A0 VA: 0x2593A0
	private void verifySignature() { }
}

// Namespace: Mono.Math.Prime
public sealed class PrimalityTest : MulticastDelegate // TypeDefIndex: 1230
{
	// Methods

	// RVA: 0x3D77F8 Offset: 0x3D77F8 VA: 0x3D77F8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x3D7C98 Offset: 0x3D7C98 VA: 0x3D7C98 Slot: 11
	public virtual bool Invoke(BigInteger bi, ConfidenceFactor confidence) { }

	// RVA: 0x3D8080 Offset: 0x3D8080 VA: 0x3D8080 Slot: 12
	public virtual IAsyncResult BeginInvoke(BigInteger bi, ConfidenceFactor confidence, AsyncCallback callback, object object) { }

	// RVA: 0x3D8120 Offset: 0x3D8120 VA: 0x3D8120 Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: Mono.Security.Protocol.Tls
public sealed class CertificateValidationCallback : MulticastDelegate // TypeDefIndex: 1231
{
	// Methods

	// RVA: 0x3E5858 Offset: 0x3E5858 VA: 0x3E5858
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x3E586C Offset: 0x3E586C VA: 0x3E586C Slot: 11
	public virtual bool Invoke(X509Certificate certificate, int[] certificateErrors) { }

	// RVA: 0x3E5C4C Offset: 0x3E5C4C VA: 0x3E5C4C Slot: 12
	public virtual IAsyncResult BeginInvoke(X509Certificate certificate, int[] certificateErrors, AsyncCallback callback, object object) { }

	// RVA: 0x3E5C84 Offset: 0x3E5C84 VA: 0x3E5C84 Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: Mono.Security.Protocol.Tls
public sealed class CertificateValidationCallback2 : MulticastDelegate // TypeDefIndex: 1232
{
	// Methods

	// RVA: 0x3E5CBC Offset: 0x3E5CBC VA: 0x3E5CBC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x3E5CD0 Offset: 0x3E5CD0 VA: 0x3E5CD0 Slot: 11
	public virtual ValidationResult Invoke(X509CertificateCollection collection) { }

	// RVA: 0x3E6090 Offset: 0x3E6090 VA: 0x3E6090 Slot: 12
	public virtual IAsyncResult BeginInvoke(X509CertificateCollection collection, AsyncCallback callback, object object) { }

	// RVA: 0x3E60BC Offset: 0x3E60BC VA: 0x3E60BC Slot: 13
	public virtual ValidationResult EndInvoke(IAsyncResult result) { }
}

// Namespace: Mono.Security.Protocol.Tls
public sealed class CertificateSelectionCallback : MulticastDelegate // TypeDefIndex: 1233
{
	// Methods

	// RVA: 0x3E53A8 Offset: 0x3E53A8 VA: 0x3E53A8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x3E53BC Offset: 0x3E53BC VA: 0x3E53BC Slot: 11
	public virtual X509Certificate Invoke(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates) { }

	// RVA: 0x3E5808 Offset: 0x3E5808 VA: 0x3E5808 Slot: 12
	public virtual IAsyncResult BeginInvoke(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates, AsyncCallback callback, object object) { }

	// RVA: 0x3E584C Offset: 0x3E584C VA: 0x3E584C Slot: 13
	public virtual X509Certificate EndInvoke(IAsyncResult result) { }
}

// Namespace: Mono.Security.Protocol.Tls
public sealed class PrivateKeySelectionCallback : MulticastDelegate // TypeDefIndex: 1234
{
	// Methods

	// RVA: 0x25A2FC Offset: 0x25A2FC VA: 0x25A2FC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x25A8B0 Offset: 0x25A8B0 VA: 0x25A8B0 Slot: 11
	public virtual AsymmetricAlgorithm Invoke(X509Certificate certificate, string targetHost) { }

	// RVA: 0x25AC90 Offset: 0x25AC90 VA: 0x25AC90 Slot: 12
	public virtual IAsyncResult BeginInvoke(X509Certificate certificate, string targetHost, AsyncCallback callback, object object) { }

	// RVA: 0x25ACC8 Offset: 0x25ACC8 VA: 0x25ACC8 Slot: 13
	public virtual AsymmetricAlgorithm EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x9F310 Offset: 0x9F310 VA: 0x9F310
internal class <PrivateImplementationDetails> // TypeDefIndex: 1235
{
	// Fields
	internal static <PrivateImplementationDetails>.$ArrayType$3132 $$field-0 /*Metadata offset 0x10AD7B*/; // 0x0
	internal static <PrivateImplementationDetails>.$ArrayType$256 $$field-5 /*Metadata offset 0x10B9B7*/; // 0xC3C
	internal static <PrivateImplementationDetails>.$ArrayType$20 $$field-6 /*Metadata offset 0x10BAB7*/; // 0xD3C
	internal static <PrivateImplementationDetails>.$ArrayType$32 $$field-7 /*Metadata offset 0x10BACB*/; // 0xD50
	internal static <PrivateImplementationDetails>.$ArrayType$48 $$field-8 /*Metadata offset 0x10BAEB*/; // 0xD70
	internal static <PrivateImplementationDetails>.$ArrayType$64 $$field-9 /*Metadata offset 0x10BB1B*/; // 0xDA0
	internal static <PrivateImplementationDetails>.$ArrayType$64 $$field-11 /*Metadata offset 0x10BB5B*/; // 0xDE0
	internal static <PrivateImplementationDetails>.$ArrayType$64 $$field-12 /*Metadata offset 0x10BB9B*/; // 0xE20
	internal static <PrivateImplementationDetails>.$ArrayType$64 $$field-13 /*Metadata offset 0x10BBDB*/; // 0xE60
	internal static <PrivateImplementationDetails>.$ArrayType$12 $$field-14 /*Metadata offset 0x10BC1B*/; // 0xEA0
	internal static <PrivateImplementationDetails>.$ArrayType$12 $$field-15 /*Metadata offset 0x10BC27*/; // 0xEAC
	internal static <PrivateImplementationDetails>.$ArrayType$12 $$field-16 /*Metadata offset 0x10BC33*/; // 0xEB8
	internal static <PrivateImplementationDetails>.$ArrayType$16 $$field-17 /*Metadata offset 0x10BC3F*/; // 0xEC4
	internal static <PrivateImplementationDetails>.$ArrayType$4 $$field-21 /*Metadata offset 0x10BC4F*/; // 0xED4
	internal static <PrivateImplementationDetails>.$ArrayType$4 $$field-22 /*Metadata offset 0x10BC53*/; // 0xED8
}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$3132 // TypeDefIndex: 1236
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$256 // TypeDefIndex: 1237
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$20 // TypeDefIndex: 1238
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$32 // TypeDefIndex: 1239
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$48 // TypeDefIndex: 1240
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$64 // TypeDefIndex: 1241
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$12 // TypeDefIndex: 1242
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$16 // TypeDefIndex: 1243
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$4 // TypeDefIndex: 1244
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 1245
{}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x9F6C0 Offset: 0x9F6C0 VA: 0x9F6C0
public sealed class ExtensionAttribute : Attribute // TypeDefIndex: 1246
{
	// Methods

	// RVA: 0x5C8978 Offset: 0x5C8978 VA: 0x5C8978
	public void .ctor() { }
}

// Namespace: 
internal sealed class Locale // TypeDefIndex: 1247
{
	// Methods

	// RVA: 0x5C624C Offset: 0x5C624C VA: 0x5C624C
	public static string GetText(string msg) { }

	// RVA: 0x5C6250 Offset: 0x5C6250 VA: 0x5C6250
	public static string GetText(string fmt, object[] args) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x9F6D4 Offset: 0x9F6D4 VA: 0x9F6D4
internal class MonoTODOAttribute : Attribute // TypeDefIndex: 1248
{
	// Methods

	// RVA: 0x5C8970 Offset: 0x5C8970 VA: 0x5C8970
	public void .ctor() { }
}

// Namespace: Mono.Security.Cryptography
public sealed class KeyBuilder // TypeDefIndex: 1249
{
	// Fields
	private static RandomNumberGenerator rng; // 0x0

	// Properties
	private static RandomNumberGenerator Rng { get; }

	// Methods

	// RVA: 0x5C62DC Offset: 0x5C62DC VA: 0x5C62DC
	private static RandomNumberGenerator get_Rng() { }

	// RVA: 0x5C6370 Offset: 0x5C6370 VA: 0x5C6370
	public static byte[] Key(int size) { }

	// RVA: 0x5C640C Offset: 0x5C640C VA: 0x5C640C
	public static byte[] IV(int size) { }
}

// Namespace: Mono.Security.Cryptography
internal abstract class SymmetricTransform : IDisposable, ICryptoTransform // TypeDefIndex: 1250
{
	// Fields
	protected SymmetricAlgorithm algo; // 0x8
	protected bool encrypt; // 0xC
	private int BlockSizeByte; // 0x10
	private byte[] temp; // 0x14
	private byte[] temp2; // 0x18
	private byte[] workBuff; // 0x1C
	private byte[] workout; // 0x20
	private int FeedBackByte; // 0x24
	private int FeedBackIter; // 0x28
	private bool m_disposed; // 0x2C
	private bool lastBlock; // 0x2D
	private RandomNumberGenerator _rng; // 0x30

	// Properties
	public virtual bool CanReuseTransform { get; }
	private bool KeepLastBlock { get; }

	// Methods

	// RVA: 0x5C64A8 Offset: 0x5C64A8 VA: 0x5C64A8
	public void .ctor(SymmetricAlgorithm symmAlgo, bool encryption, byte[] rgbIV) { }

	// RVA: 0x5C67FC Offset: 0x5C67FC VA: 0x5C67FC Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x5C6830 Offset: 0x5C6830 VA: 0x5C6830 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x5C68A8 Offset: 0x5C68A8 VA: 0x5C68A8 Slot: 8
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x5C6908 Offset: 0x5C6908 VA: 0x5C6908 Slot: 9
	public virtual bool get_CanReuseTransform() { }

	// RVA: 0x5C6910 Offset: 0x5C6910 VA: 0x5C6910 Slot: 10
	protected virtual void Transform(byte[] input, byte[] output) { }

	// RVA: -1 Offset: -1 Slot: 11
	protected abstract void ECB(byte[] input, byte[] output);

	// RVA: 0x5C6B28 Offset: 0x5C6B28 VA: 0x5C6B28 Slot: 12
	protected virtual void CBC(byte[] input, byte[] output) { }

	// RVA: 0x5C6D18 Offset: 0x5C6D18 VA: 0x5C6D18 Slot: 13
	protected virtual void CFB(byte[] input, byte[] output) { }

	// RVA: 0x5C7050 Offset: 0x5C7050 VA: 0x5C7050 Slot: 14
	protected virtual void OFB(byte[] input, byte[] output) { }

	// RVA: 0x5C70EC Offset: 0x5C70EC VA: 0x5C70EC Slot: 15
	protected virtual void CTS(byte[] input, byte[] output) { }

	// RVA: 0x5C7188 Offset: 0x5C7188 VA: 0x5C7188
	private void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x5C7360 Offset: 0x5C7360 VA: 0x5C7360 Slot: 16
	public virtual int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x5C76E8 Offset: 0x5C76E8 VA: 0x5C76E8
	private bool get_KeepLastBlock() { }

	// RVA: 0x5C7770 Offset: 0x5C7770 VA: 0x5C7770
	private int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x5C7998 Offset: 0x5C7998 VA: 0x5C7998
	private void Random(byte[] buffer, int start, int length) { }

	// RVA: 0x5C7A78 Offset: 0x5C7A78 VA: 0x5C7A78
	private void ThrowBadPaddingException(PaddingMode padding, int length, int position) { }

	// RVA: 0x5C7C94 Offset: 0x5C7C94 VA: 0x5C7C94
	private byte[] FinalEncrypt(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x5C8060 Offset: 0x5C8060 VA: 0x5C8060
	private byte[] FinalDecrypt(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x5C8464 Offset: 0x5C8464 VA: 0x5C8464 Slot: 17
	public virtual byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: System.Collections.Generic
[Serializable]
public class HashSet<T> : ICollection<T>, IEnumerable<T>, IEnumerable, ISerializable, IDeserializationCallback // TypeDefIndex: 1251
{
	// Fields
	private const int INITIAL_SIZE = 10;
	private const float DEFAULT_LOAD_FACTOR = 0.9;
	private const int NO_SLOT = -1;
	private const int HASH_FLAG = -2147483648;
	private int[] table; // 0x0
	private HashSet.Link<T>[] links; // 0x0
	private T[] slots; // 0x0
	private int touched; // 0x0
	private int empty_slot; // 0x0
	private int count; // 0x0
	private int threshold; // 0x0
	private IEqualityComparer<T> comparer; // 0x0
	private SerializationInfo si; // 0x0
	private int generation; // 0x0

	// Properties
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	public int Count { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DB098 Offset: 0x4DB098 VA: 0x4DB098
	|-HashSet<object>..ctor
	|-HashSet<IClippable>..ctor
	|-HashSet<Text>..ctor
	*/

	// RVA: -1 Offset: -1
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DB100 Offset: 0x4DB100 VA: 0x4DB100
	|-HashSet<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DB134 Offset: 0x4DB134 VA: 0x4DB134
	|-HashSet<object>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 5
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DB1A4 Offset: 0x4DB1A4 VA: 0x4DB1A4
	|-HashSet<object>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 9
	private void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DB1AC Offset: 0x4DB1AC VA: 0x4DB1AC
	|-HashSet<object>.System.Collections.Generic.ICollection<T>.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private void System.Collections.Generic.ICollection<T>.Add(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DB1F8 Offset: 0x4DB1F8 VA: 0x4DB1F8
	|-HashSet<object>.System.Collections.Generic.ICollection<T>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 11
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DB23C Offset: 0x4DB23C VA: 0x4DB23C
	|-HashSet<object>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DB2AC Offset: 0x4DB2AC VA: 0x4DB2AC
	|-HashSet<object>.get_Count
	|-HashSet<Text>.get_Count
	*/

	// RVA: -1 Offset: -1
	private void Init(int capacity, IEqualityComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DB2B4 Offset: 0x4DB2B4 VA: 0x4DB2B4
	|-HashSet<object>.Init
	*/

	// RVA: -1 Offset: -1
	private void InitArrays(int size) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DB47C Offset: 0x4DB47C VA: 0x4DB47C
	|-HashSet<object>.InitArrays
	*/

	// RVA: -1 Offset: -1
	private bool SlotsContainsAt(int index, int hash, T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DB5C0 Offset: 0x4DB5C0 VA: 0x4DB5C0
	|-HashSet<object>.SlotsContainsAt
	*/

	// RVA: -1 Offset: -1 Slot: 15
	public void CopyTo(T[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DB80C Offset: 0x4DB80C VA: 0x4DB80C
	|-HashSet<object>.CopyTo
	*/

	// RVA: -1 Offset: -1
	public void CopyTo(T[] array, int index, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DB86C Offset: 0x4DB86C VA: 0x4DB86C
	|-HashSet<object>.CopyTo
	*/

	// RVA: -1 Offset: -1
	private void Resize(int size) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DBAC0 Offset: 0x4DBAC0 VA: 0x4DBAC0
	|-HashSet<object>.Resize
	*/

	// RVA: -1 Offset: -1
	private int GetLinkHashCode(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DBE74 Offset: 0x4DBE74 VA: 0x4DBE74
	|-HashSet<object>.GetLinkHashCode
	*/

	// RVA: -1 Offset: -1
	private int GetItemHashCode(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DBEC0 Offset: 0x4DBEC0 VA: 0x4DBEC0
	|-HashSet<object>.GetItemHashCode
	*/

	// RVA: -1 Offset: -1
	public bool Add(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DBF8C Offset: 0x4DBF8C VA: 0x4DBF8C
	|-HashSet<object>.Add
	|-HashSet<IClippable>.Add
	|-HashSet<Text>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public void Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DC23C Offset: 0x4DC23C VA: 0x4DC23C
	|-HashSet<object>.Clear
	|-HashSet<IClippable>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public bool Contains(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DC2E8 Offset: 0x4DC2E8 VA: 0x4DC2E8
	|-HashSet<object>.Contains
	|-HashSet<IClippable>.Contains
	|-HashSet<Text>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 10
	public bool Remove(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DC37C Offset: 0x4DC37C VA: 0x4DC37C
	|-HashSet<object>.Remove
	|-HashSet<IClippable>.Remove
	|-HashSet<Text>.Remove
	*/

	[MonoTODOAttribute] // RVA: 0x9F738 Offset: 0x9F738 VA: 0x9F738
	// RVA: -1 Offset: -1 Slot: 16
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DC81C Offset: 0x4DC81C VA: 0x4DC81C
	|-HashSet<object>.GetObjectData
	*/

	[MonoTODOAttribute] // RVA: 0x9F748 Offset: 0x9F748 VA: 0x9F748
	// RVA: -1 Offset: -1 Slot: 17
	public virtual void OnDeserialization(object sender) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DC8A4 Offset: 0x4DC8A4 VA: 0x4DC8A4
	|-HashSet<object>.OnDeserialization
	*/

	// RVA: -1 Offset: -1
	public HashSet.Enumerator<T> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DC93C Offset: 0x4DC93C VA: 0x4DC93C
	|-HashSet<IClippable>.GetEnumerator
	|-HashSet<Text>.GetEnumerator
	|-HashSet<object>.GetEnumerator
	*/
}

// Namespace: 
private struct HashSet.Link<T> // TypeDefIndex: 1252
{
	// Fields
	public int HashCode; // 0x0
	public int Next; // 0x0
}

// Namespace: 
[Serializable]
public struct HashSet.Enumerator<T> : IEnumerator, IDisposable, IEnumerator<T> // TypeDefIndex: 1253
{
	// Fields
	private HashSet<T> hashset; // 0x0
	private int next; // 0x0
	private int stamp; // 0x0
	private T current; // 0x0

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(HashSet<T> hashset) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF02A4 Offset: 0xF02A4 VA: 0xF02A4
	|-HashSet.Enumerator<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF02D4 Offset: 0xF02D4 VA: 0xF02D4
	|-HashSet.Enumerator<object>.System.Collections.IEnumerator.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private void System.Collections.IEnumerator.Reset() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF02DC Offset: 0xF02DC VA: 0xF02DC
	|-HashSet.Enumerator<object>.System.Collections.IEnumerator.Reset
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF02E4 Offset: 0xF02E4 VA: 0xF02E4
	|-HashSet.Enumerator<object>.MoveNext
	|-HashSet.Enumerator<IClippable>.MoveNext
	|-HashSet.Enumerator<Text>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public T get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF02EC Offset: 0xF02EC VA: 0xF02EC
	|-HashSet.Enumerator<IClippable>.get_Current
	|-HashSet.Enumerator<Text>.get_Current
	|-HashSet.Enumerator<object>.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF02F4 Offset: 0xF02F4 VA: 0xF02F4
	|-HashSet.Enumerator<object>.Dispose
	|-HashSet.Enumerator<IClippable>.Dispose
	|-HashSet.Enumerator<Text>.Dispose
	*/

	// RVA: -1 Offset: -1
	private void CheckState() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF0300 Offset: 0xF0300 VA: 0xF0300
	|-HashSet.Enumerator<object>.CheckState
	*/
}

// Namespace: 
private static class HashSet.PrimeHelper<T> // TypeDefIndex: 1254
{
	// Fields
	private static readonly int[] primes_table; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DA988 Offset: 0x4DA988 VA: 0x4DA988
	|-HashSet.PrimeHelper<object>..cctor
	*/

	// RVA: -1 Offset: -1
	private static bool TestPrime(int x) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DAA48 Offset: 0x4DAA48 VA: 0x4DAA48
	|-HashSet.PrimeHelper<object>.TestPrime
	*/

	// RVA: -1 Offset: -1
	private static int CalcPrime(int x) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DAAD8 Offset: 0x4DAAD8 VA: 0x4DAAD8
	|-HashSet.PrimeHelper<object>.CalcPrime
	*/

	// RVA: -1 Offset: -1
	public static int ToPrime(int x) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4DAC24 Offset: 0x4DAC24 VA: 0x4DAC24
	|-HashSet.PrimeHelper<object>.ToPrime
	*/
}

// Namespace: System.Linq
internal static class Check // TypeDefIndex: 1255
{
	// Methods

	// RVA: 0x5C87D0 Offset: 0x5C87D0 VA: 0x5C87D0
	public static void Source(object source) { }

	// RVA: 0x5C8878 Offset: 0x5C8878 VA: 0x5C8878
	public static void SourceAndPredicate(object source, object predicate) { }
}

// Namespace: System.Linq
[ExtensionAttribute] // RVA: 0x9F708 Offset: 0x9F708 VA: 0x9F708
public static class Enumerable // TypeDefIndex: 1256
{
	// Methods

	[ExtensionAttribute] // RVA: 0x9F758 Offset: 0x9F758 VA: 0x9F758
	// RVA: -1 Offset: -1
	public static bool Any<TSource>(IEnumerable<TSource> source) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3A92BC Offset: 0x3A92BC VA: 0x3A92BC
	|-Enumerable.Any<object>
	|-Enumerable.Any<PlayerEditorConnectionEvents.MessageTypeSubscribers>
	*/

	[ExtensionAttribute] // RVA: 0x9F768 Offset: 0x9F768 VA: 0x9F768
	// RVA: -1 Offset: -1
	public static bool Any<TSource>(IEnumerable<TSource> source, Func<TSource, bool> predicate) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3A9620 Offset: 0x3A9620 VA: 0x3A9620
	|-Enumerable.Any<object>
	|-Enumerable.Any<PlayerEditorConnectionEvents.MessageTypeSubscribers>
	*/

	[ExtensionAttribute] // RVA: 0x9F778 Offset: 0x9F778 VA: 0x9F778
	// RVA: -1 Offset: -1
	private static TSource Single<TSource>(IEnumerable<TSource> source, Func<TSource, bool> predicate, Enumerable.Fallback fallback) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BD17C Offset: 0x5BD17C VA: 0x5BD17C
	|-Enumerable.Single<object>
	*/

	[ExtensionAttribute] // RVA: 0x9F788 Offset: 0x9F788 VA: 0x9F788
	// RVA: -1 Offset: -1
	public static TSource SingleOrDefault<TSource>(IEnumerable<TSource> source, Func<TSource, bool> predicate) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BD5A0 Offset: 0x5BD5A0 VA: 0x5BD5A0
	|-Enumerable.SingleOrDefault<PlayerEditorConnectionEvents.MessageTypeSubscribers>
	|-Enumerable.SingleOrDefault<object>
	*/

	[ExtensionAttribute] // RVA: 0x9F798 Offset: 0x9F798 VA: 0x9F798
	// RVA: -1 Offset: -1
	public static IEnumerable<TSource> Where<TSource>(IEnumerable<TSource> source, Func<TSource, bool> predicate) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3ABC0C Offset: 0x3ABC0C VA: 0x3ABC0C
	|-Enumerable.Where<PlayerEditorConnectionEvents.MessageTypeSubscribers>
	|-Enumerable.Where<Toggle>
	|-Enumerable.Where<object>
	*/

	[DebuggerHiddenAttribute] // RVA: 0x9F7A8 Offset: 0x9F7A8 VA: 0x9F7A8
	// RVA: -1 Offset: -1
	private static IEnumerable<TSource> CreateWhereIterator<TSource>(IEnumerable<TSource> source, Func<TSource, bool> predicate) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3ABB48 Offset: 0x3ABB48 VA: 0x3ABB48
	|-Enumerable.CreateWhereIterator<object>
	*/
}

// Namespace: 
private enum Enumerable.Fallback // TypeDefIndex: 1257
{
	// Fields
	public int value__; // 0x0
	public const Enumerable.Fallback Default = 0;
	public const Enumerable.Fallback Throw = 1;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x9F718 Offset: 0x9F718 VA: 0x9F718
private sealed class Enumerable.<CreateWhereIterator>c__Iterator1D<TSource> : IEnumerator, IDisposable, IEnumerable, IEnumerable<TSource>, IEnumerator<TSource> // TypeDefIndex: 1258
{
	// Fields
	internal IEnumerable<TSource> source; // 0x0
	internal IEnumerator<TSource> <$s_120>__0; // 0x0
	internal TSource <element>__1; // 0x0
	internal Func<TSource, bool> predicate; // 0x0
	internal int $PC; // 0x0
	internal TSource $current; // 0x0
	internal IEnumerable<TSource> <$>source; // 0x0
	internal Func<TSource, bool> <$>predicate; // 0x0

	// Properties
	private TSource System.Collections.Generic.IEnumerator<TSource>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x572848 Offset: 0x572848 VA: 0x572848
	|-Enumerable.<CreateWhereIterator>c__Iterator1D<object>..ctor
	*/

	[DebuggerHiddenAttribute] // RVA: 0x9F7B8 Offset: 0x9F7B8 VA: 0x9F7B8
	// RVA: -1 Offset: -1 Slot: 10
	private TSource System.Collections.Generic.IEnumerator<TSource>.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x572874 Offset: 0x572874 VA: 0x572874
	|-Enumerable.<CreateWhereIterator>c__Iterator1D<object>.System.Collections.Generic.IEnumerator<TSource>.get_Current
	*/

	[DebuggerHiddenAttribute] // RVA: 0x9F7C8 Offset: 0x9F7C8 VA: 0x9F7C8
	// RVA: -1 Offset: -1 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57287C Offset: 0x57287C VA: 0x57287C
	|-Enumerable.<CreateWhereIterator>c__Iterator1D<object>.System.Collections.IEnumerator.get_Current
	*/

	[DebuggerHiddenAttribute] // RVA: 0x9F7D8 Offset: 0x9F7D8 VA: 0x9F7D8
	// RVA: -1 Offset: -1 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x572884 Offset: 0x572884 VA: 0x572884
	|-Enumerable.<CreateWhereIterator>c__Iterator1D<object>.System.Collections.IEnumerable.GetEnumerator
	*/

	[DebuggerHiddenAttribute] // RVA: 0x9F7E8 Offset: 0x9F7E8 VA: 0x9F7E8
	// RVA: -1 Offset: -1 Slot: 9
	private IEnumerator<TSource> System.Collections.Generic.IEnumerable<TSource>.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5728C0 Offset: 0x5728C0 VA: 0x5728C0
	|-Enumerable.<CreateWhereIterator>c__Iterator1D<object>.System.Collections.Generic.IEnumerable<TSource>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x572978 Offset: 0x572978 VA: 0x572978
	|-Enumerable.<CreateWhereIterator>c__Iterator1D<object>.MoveNext
	*/

	[DebuggerHiddenAttribute] // RVA: 0x9F7F8 Offset: 0x9F7F8 VA: 0x9F7F8
	// RVA: -1 Offset: -1 Slot: 7
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x572D70 Offset: 0x572D70 VA: 0x572D70
	|-Enumerable.<CreateWhereIterator>c__Iterator1D<object>.Dispose
	*/

	[DebuggerHiddenAttribute] // RVA: 0x9F808 Offset: 0x9F808 VA: 0x9F808
	// RVA: -1 Offset: -1 Slot: 6
	public void Reset() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x572E58 Offset: 0x572E58 VA: 0x572E58
	|-Enumerable.<CreateWhereIterator>c__Iterator1D<object>.Reset
	*/
}

// Namespace: System.Security.Cryptography
public abstract class Aes : SymmetricAlgorithm // TypeDefIndex: 1259
{
	// Methods

	// RVA: 0x5C8980 Offset: 0x5C8980 VA: 0x5C8980
	protected void .ctor() { }
}

// Namespace: System.Security.Cryptography
public sealed class AesManaged : Aes // TypeDefIndex: 1260
{
	// Properties
	public override byte[] IV { get; set; }
	public override byte[] Key { get; set; }
	public override int KeySize { get; set; }

	// Methods

	// RVA: 0x5C8B54 Offset: 0x5C8B54 VA: 0x5C8B54
	public void .ctor() { }

	// RVA: 0x5C8B58 Offset: 0x5C8B58 VA: 0x5C8B58 Slot: 24
	public override void GenerateIV() { }

	// RVA: 0x5C8B78 Offset: 0x5C8B78 VA: 0x5C8B78 Slot: 25
	public override void GenerateKey() { }

	// RVA: 0x5C8B98 Offset: 0x5C8B98 VA: 0x5C8B98 Slot: 21
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0x5C97A0 Offset: 0x5C97A0 VA: 0x5C97A0 Slot: 23
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0x5C982C Offset: 0x5C982C VA: 0x5C982C Slot: 9
	public override byte[] get_IV() { }

	// RVA: 0x5C9834 Offset: 0x5C9834 VA: 0x5C9834 Slot: 10
	public override void set_IV(byte[] value) { }

	// RVA: 0x5C983C Offset: 0x5C983C VA: 0x5C983C Slot: 11
	public override byte[] get_Key() { }

	// RVA: 0x5C9844 Offset: 0x5C9844 VA: 0x5C9844 Slot: 12
	public override void set_Key(byte[] value) { }

	// RVA: 0x5C984C Offset: 0x5C984C VA: 0x5C984C Slot: 13
	public override int get_KeySize() { }

	// RVA: 0x5C9854 Offset: 0x5C9854 VA: 0x5C9854 Slot: 14
	public override void set_KeySize(int value) { }

	// RVA: 0x5C985C Offset: 0x5C985C VA: 0x5C985C Slot: 20
	public override ICryptoTransform CreateDecryptor() { }

	// RVA: 0x5C9894 Offset: 0x5C9894 VA: 0x5C9894 Slot: 22
	public override ICryptoTransform CreateEncryptor() { }

	// RVA: 0x5C98CC Offset: 0x5C98CC VA: 0x5C98CC Slot: 5
	protected override void Dispose(bool disposing) { }
}

// Namespace: System.Security.Cryptography
internal class AesTransform : SymmetricTransform // TypeDefIndex: 1261
{
	// Fields
	private uint[] expandedKey; // 0x34
	private int Nk; // 0x38
	private int Nr; // 0x3C
	private static readonly uint[] Rcon; // 0x0
	private static readonly byte[] SBox; // 0x4
	private static readonly byte[] iSBox; // 0x8
	private static readonly uint[] T0; // 0xC
	private static readonly uint[] T1; // 0x10
	private static readonly uint[] T2; // 0x14
	private static readonly uint[] T3; // 0x18
	private static readonly uint[] iT0; // 0x1C
	private static readonly uint[] iT1; // 0x20
	private static readonly uint[] iT2; // 0x24
	private static readonly uint[] iT3; // 0x28

	// Methods

	// RVA: 0x5C8C24 Offset: 0x5C8C24 VA: 0x5C8C24
	public void .ctor(Aes algo, bool encryption, byte[] key, byte[] iv) { }

	// RVA: 0x5C9A98 Offset: 0x5C9A98 VA: 0x5C9A98
	private static void .cctor() { }

	// RVA: 0x5C9D6C Offset: 0x5C9D6C VA: 0x5C9D6C Slot: 11
	protected override void ECB(byte[] input, byte[] output) { }

	// RVA: 0x5C98D4 Offset: 0x5C98D4 VA: 0x5C98D4
	private uint SubByte(uint a) { }

	// RVA: 0x5C9DA0 Offset: 0x5C9DA0 VA: 0x5C9DA0
	private void Encrypt128(byte[] indata, byte[] outdata, uint[] ekey) { }

	// RVA: 0x5D0078 Offset: 0x5D0078 VA: 0x5D0078
	private void Decrypt128(byte[] indata, byte[] outdata, uint[] ekey) { }
}

// Namespace: System
public sealed class Action : MulticastDelegate // TypeDefIndex: 1262
{
	// Methods

	// RVA: 0x5C8574 Offset: 0x5C8574 VA: 0x5C8574
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5C8588 Offset: 0x5C8588 VA: 0x5C8588 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x5C8798 Offset: 0x5C8798 VA: 0x5C8798 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x5C87C4 Offset: 0x5C87C4 VA: 0x5C87C4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
public sealed class Action<T1, T2> : MulticastDelegate // TypeDefIndex: 1263
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FB380 Offset: 0x1FB380 VA: 0x1FB380
	|-Action<object, bool>..ctor
	|
	|-RVA: 0x1FB81C Offset: 0x1FB81C VA: 0x1FB81C
	|-Action<object, object>..ctor
	|
	|-RVA: 0x1FBC50 Offset: 0x1FBC50 VA: 0x1FBC50
	|-Action<object, ReflectionProbe.ReflectionProbeEvent>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual void Invoke(T1 arg1, T2 arg2) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FB394 Offset: 0x1FB394 VA: 0x1FB394
	|-Action<object, bool>.Invoke
	|-Action<string, bool>.Invoke
	|
	|-RVA: 0x1FB830 Offset: 0x1FB830 VA: 0x1FB830
	|-Action<object, object>.Invoke
	|-Action<string, Action<SpriteAtlas>>.Invoke
	|
	|-RVA: 0x1FBC64 Offset: 0x1FBC64 VA: 0x1FBC64
	|-Action<object, ReflectionProbe.ReflectionProbeEvent>.Invoke
	|-Action<ReflectionProbe, ReflectionProbe.ReflectionProbeEvent>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FB770 Offset: 0x1FB770 VA: 0x1FB770
	|-Action<object, bool>.BeginInvoke
	|
	|-RVA: 0x1FBC0C Offset: 0x1FBC0C VA: 0x1FBC0C
	|-Action<object, object>.BeginInvoke
	|
	|-RVA: 0x1FC040 Offset: 0x1FC040 VA: 0x1FC040
	|-Action<object, ReflectionProbe.ReflectionProbeEvent>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FB810 Offset: 0x1FB810 VA: 0x1FB810
	|-Action<object, bool>.EndInvoke
	|
	|-RVA: 0x1FBC44 Offset: 0x1FBC44 VA: 0x1FBC44
	|-Action<object, object>.EndInvoke
	|
	|-RVA: 0x1FC0E0 Offset: 0x1FC0E0 VA: 0x1FC0E0
	|-Action<object, ReflectionProbe.ReflectionProbeEvent>.EndInvoke
	*/
}

// Namespace: System
public sealed class Action<T1, T2, T3> : MulticastDelegate // TypeDefIndex: 1264
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FC0EC Offset: 0x1FC0EC VA: 0x1FC0EC
	|-Action<bool, bool, int>..ctor
	|
	|-RVA: 0x1FC458 Offset: 0x1FC458 VA: 0x1FC458
	|-Action<object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FC100 Offset: 0x1FC100 VA: 0x1FC100
	|-Action<bool, bool, int>.Invoke
	|
	|-RVA: 0x1FC46C Offset: 0x1FC46C VA: 0x1FC46C
	|-Action<object, object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FC378 Offset: 0x1FC378 VA: 0x1FC378
	|-Action<bool, bool, int>.BeginInvoke
	|
	|-RVA: 0x1FC894 Offset: 0x1FC894 VA: 0x1FC894
	|-Action<object, object, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FC44C Offset: 0x1FC44C VA: 0x1FC44C
	|-Action<bool, bool, int>.EndInvoke
	|
	|-RVA: 0x1FC8D4 Offset: 0x1FC8D4 VA: 0x1FC8D4
	|-Action<object, object, object>.EndInvoke
	*/
}

// Namespace: System
public sealed class Func<TResult> : MulticastDelegate // TypeDefIndex: 1265
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x570F54 Offset: 0x570F54 VA: 0x570F54
	|-Func<bool>..ctor
	|
	|-RVA: 0x5711E0 Offset: 0x5711E0 VA: 0x5711E0
	|-Func<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual TResult Invoke() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x570F68 Offset: 0x570F68 VA: 0x570F68
	|-Func<bool>.Invoke
	|
	|-RVA: 0x5711F4 Offset: 0x5711F4 VA: 0x5711F4
	|-Func<object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57117C Offset: 0x57117C VA: 0x57117C
	|-Func<bool>.BeginInvoke
	|
	|-RVA: 0x571408 Offset: 0x571408 VA: 0x571408
	|-Func<object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual TResult EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5711A8 Offset: 0x5711A8 VA: 0x5711A8
	|-Func<bool>.EndInvoke
	|
	|-RVA: 0x571434 Offset: 0x571434 VA: 0x571434
	|-Func<object>.EndInvoke
	*/
}

// Namespace: System
public sealed class Func<T, TResult> : MulticastDelegate // TypeDefIndex: 1266
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x571440 Offset: 0x571440 VA: 0x571440
	|-Func<object, bool>..ctor
	|-Func<PlayerEditorConnectionEvents.MessageTypeSubscribers, bool>..ctor
	|-Func<Toggle, bool>..ctor
	|
	|-RVA: 0x571878 Offset: 0x571878 VA: 0x571878
	|-Func<object, object>..ctor
	|
	|-RVA: 0x571C84 Offset: 0x571C84 VA: 0x571C84
	|-Func<object, float>..ctor
	|-Func<ILayoutElement, float>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual TResult Invoke(T arg1) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x571454 Offset: 0x571454 VA: 0x571454
	|-Func<Exception, bool>.Invoke
	|-Func<object, bool>.Invoke
	|
	|-RVA: 0x571C98 Offset: 0x571C98 VA: 0x571C98
	|-Func<ILayoutElement, float>.Invoke
	|-Func<object, float>.Invoke
	|
	|-RVA: 0x57188C Offset: 0x57188C VA: 0x57188C
	|-Func<object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T arg1, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x571814 Offset: 0x571814 VA: 0x571814
	|-Func<object, bool>.BeginInvoke
	|
	|-RVA: 0x571C4C Offset: 0x571C4C VA: 0x571C4C
	|-Func<object, object>.BeginInvoke
	|
	|-RVA: 0x572058 Offset: 0x572058 VA: 0x572058
	|-Func<object, float>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual TResult EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x571840 Offset: 0x571840 VA: 0x571840
	|-Func<object, bool>.EndInvoke
	|
	|-RVA: 0x571C78 Offset: 0x571C78 VA: 0x571C78
	|-Func<object, object>.EndInvoke
	|
	|-RVA: 0x572084 Offset: 0x572084 VA: 0x572084
	|-Func<object, float>.EndInvoke
	*/
}

// Namespace: System
public sealed class Func<T1, T2, TResult> : MulticastDelegate // TypeDefIndex: 1267
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5720BC Offset: 0x5720BC VA: 0x5720BC
	|-Func<int, IntPtr, bool>..ctor
	|
	|-RVA: 0x572410 Offset: 0x572410 VA: 0x572410
	|-Func<object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual TResult Invoke(T1 arg1, T2 arg2) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5720D0 Offset: 0x5720D0 VA: 0x5720D0
	|-Func<int, IntPtr, bool>.Invoke
	|
	|-RVA: 0x572424 Offset: 0x572424 VA: 0x572424
	|-Func<object, object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57231C Offset: 0x57231C VA: 0x57231C
	|-Func<int, IntPtr, bool>.BeginInvoke
	|
	|-RVA: 0x572804 Offset: 0x572804 VA: 0x572804
	|-Func<object, object, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual TResult EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5723D8 Offset: 0x5723D8 VA: 0x5723D8
	|-Func<int, IntPtr, bool>.EndInvoke
	|
	|-RVA: 0x57283C Offset: 0x57283C VA: 0x57283C
	|-Func<object, object, object>.EndInvoke
	*/
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x9F728 Offset: 0x9F728 VA: 0x9F728
internal class <PrivateImplementationDetails> // TypeDefIndex: 1268
{
	// Fields
	internal static <PrivateImplementationDetails>.$ArrayType$136 $$field-0 /*Metadata offset 0x10BC6F*/; // 0x0
	internal static <PrivateImplementationDetails>.$ArrayType$120 $$field-1 /*Metadata offset 0x10BCF7*/; // 0x88
	internal static <PrivateImplementationDetails>.$ArrayType$256 $$field-2 /*Metadata offset 0x10BD6F*/; // 0x100
	internal static <PrivateImplementationDetails>.$ArrayType$256 $$field-3 /*Metadata offset 0x10BE6F*/; // 0x200
	internal static <PrivateImplementationDetails>.$ArrayType$1024 $$field-4 /*Metadata offset 0x10BF6F*/; // 0x300
	internal static <PrivateImplementationDetails>.$ArrayType$1024 $$field-5 /*Metadata offset 0x10C36F*/; // 0x700
	internal static <PrivateImplementationDetails>.$ArrayType$1024 $$field-6 /*Metadata offset 0x10C76F*/; // 0xB00
	internal static <PrivateImplementationDetails>.$ArrayType$1024 $$field-7 /*Metadata offset 0x10CB6F*/; // 0xF00
	internal static <PrivateImplementationDetails>.$ArrayType$1024 $$field-8 /*Metadata offset 0x10CF6F*/; // 0x1300
	internal static <PrivateImplementationDetails>.$ArrayType$1024 $$field-9 /*Metadata offset 0x10D36F*/; // 0x1700
	internal static <PrivateImplementationDetails>.$ArrayType$1024 $$field-10 /*Metadata offset 0x10D76F*/; // 0x1B00
	internal static <PrivateImplementationDetails>.$ArrayType$1024 $$field-11 /*Metadata offset 0x10DB6F*/; // 0x1F00
}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$136 // TypeDefIndex: 1269
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$120 // TypeDefIndex: 1270
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$256 // TypeDefIndex: 1271
{}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType$1024 // TypeDefIndex: 1272
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 1273
{}

// Namespace: UnityEngine.Scripting
[AttributeUsageAttribute] // RVA: 0x9FAB8 Offset: 0x9FAB8 VA: 0x9FAB8
[VisibleToOtherModulesAttribute] // RVA: 0x9FAB8 Offset: 0x9FAB8 VA: 0x9FAB8
internal class UsedByNativeCodeAttribute : Attribute // TypeDefIndex: 1274
{
	// Methods

	// RVA: 0x5F2FE0 Offset: 0x5F2FE0 VA: 0x5F2FE0
	public void .ctor() { }
}

// Namespace: UnityEngine.Scripting
[VisibleToOtherModulesAttribute] // RVA: 0x9FB00 Offset: 0x9FB00 VA: 0x9FB00
[AttributeUsageAttribute] // RVA: 0x9FB00 Offset: 0x9FB00 VA: 0x9FB00
internal class RequiredByNativeCodeAttribute : Attribute // TypeDefIndex: 1275
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x9FFE8 Offset: 0x9FFE8 VA: 0x9FFE8
	[DebuggerBrowsableAttribute] // RVA: 0x9FFE8 Offset: 0x9FFE8 VA: 0x9FFE8
	private bool <Optional>k__BackingField; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0xA001C Offset: 0xA001C VA: 0xA001C
	[CompilerGeneratedAttribute] // RVA: 0xA001C Offset: 0xA001C VA: 0xA001C
	private bool <GenerateProxy>k__BackingField; // 0x9

	// Properties
	public bool Optional { set; }
	public bool GenerateProxy { set; }

	// Methods

	// RVA: 0x5F2FC8 Offset: 0x5F2FC8 VA: 0x5F2FC8
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xA04C8 Offset: 0xA04C8 VA: 0xA04C8
	// RVA: 0x5F2FD0 Offset: 0x5F2FD0 VA: 0x5F2FD0
	public void set_Optional(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xA04D8 Offset: 0xA04D8 VA: 0xA04D8
	// RVA: 0x5F2FD8 Offset: 0x5F2FD8 VA: 0x5F2FD8
	public void set_GenerateProxy(bool value) { }
}

// Namespace: UnityEngine.Scripting
[VisibleToOtherModulesAttribute] // RVA: 0x9FB48 Offset: 0x9FB48 VA: 0x9FB48
internal class GeneratedByOldBindingsGeneratorAttribute : Attribute // TypeDefIndex: 1276
{
	// Methods

	// RVA: 0x5F2FC0 Offset: 0x5F2FC0 VA: 0x5F2FC0
	public void .ctor() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x9FB58 Offset: 0x9FB58 VA: 0x9FB58
[VisibleToOtherModulesAttribute] // RVA: 0x9FB58 Offset: 0x9FB58 VA: 0x9FB58
internal sealed class AssetFileNameExtensionAttribute : Attribute // TypeDefIndex: 1277
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xA0050 Offset: 0xA0050 VA: 0xA0050
	[CompilerGeneratedAttribute] // RVA: 0xA0050 Offset: 0xA0050 VA: 0xA0050
	private readonly string <preferredExtension>k__BackingField; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0xA0084 Offset: 0xA0084 VA: 0xA0084
	[CompilerGeneratedAttribute] // RVA: 0xA0084 Offset: 0xA0084 VA: 0xA0084
	private readonly IEnumerable<string> <otherExtensions>k__BackingField; // 0xC

	// Methods

	// RVA: 0x5F2664 Offset: 0x5F2664 VA: 0x5F2664
	public void .ctor(string preferredExtension, string[] otherExtensions) { }
}

// Namespace: UnityEngine
[VisibleToOtherModulesAttribute] // RVA: 0x9FBA0 Offset: 0x9FBA0 VA: 0x9FBA0
internal class ThreadAndSerializationSafeAttribute : Attribute // TypeDefIndex: 1278
{
	// Methods

	// RVA: 0x5F2FE8 Offset: 0x5F2FE8 VA: 0x5F2FE8
	public void .ctor() { }
}

// Namespace: UnityEngine
[VisibleToOtherModulesAttribute] // RVA: 0x9FBB0 Offset: 0x9FBB0 VA: 0x9FBB0
[AttributeUsageAttribute] // RVA: 0x9FBB0 Offset: 0x9FBB0 VA: 0x9FBB0
internal class WritableAttribute : Attribute // TypeDefIndex: 1279
{
	// Methods

	// RVA: 0x5F3084 Offset: 0x5F3084 VA: 0x5F3084
	public void .ctor() { }
}

// Namespace: UnityEngine
[VisibleToOtherModulesAttribute] // RVA: 0x9FBF8 Offset: 0x9FBF8 VA: 0x9FBF8
[AttributeUsageAttribute] // RVA: 0x9FBF8 Offset: 0x9FBF8 VA: 0x9FBF8
internal class UnityEngineModuleAssembly : Attribute // TypeDefIndex: 1280
{
	// Methods

	// RVA: 0x5F2FF0 Offset: 0x5F2FF0 VA: 0x5F2FF0
	public void .ctor() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x9FC2C Offset: 0x9FC2C VA: 0x9FC2C
[VisibleToOtherModulesAttribute] // RVA: 0x9FC2C Offset: 0x9FC2C VA: 0x9FC2C
internal sealed class NativeClassAttribute : Attribute // TypeDefIndex: 1281
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xA00B8 Offset: 0xA00B8 VA: 0xA00B8
	[CompilerGeneratedAttribute] // RVA: 0xA00B8 Offset: 0xA00B8 VA: 0xA00B8
	private string <QualifiedNativeName>k__BackingField; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0xA00EC Offset: 0xA00EC VA: 0xA00EC
	[CompilerGeneratedAttribute] // RVA: 0xA00EC Offset: 0xA00EC VA: 0xA00EC
	private string <Declaration>k__BackingField; // 0xC

	// Properties
	private string QualifiedNativeName { set; }
	private string Declaration { set; }

	// Methods

	// RVA: 0x5F2EDC Offset: 0x5F2EDC VA: 0x5F2EDC
	public void .ctor(string qualifiedCppName) { }

	// RVA: 0x5F2F98 Offset: 0x5F2F98 VA: 0x5F2F98
	public void .ctor(string qualifiedCppName, string declaration) { }

	[CompilerGeneratedAttribute] // RVA: 0xA04E8 Offset: 0xA04E8 VA: 0xA04E8
	// RVA: 0x5F2F88 Offset: 0x5F2F88 VA: 0x5F2F88
	private void set_QualifiedNativeName(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xA04F8 Offset: 0xA04F8 VA: 0xA04F8
	// RVA: 0x5F2F90 Offset: 0x5F2F90 VA: 0x5F2F90
	private void set_Declaration(string value) { }
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x9FC74 Offset: 0x9FC74 VA: 0x9FC74
[AttributeUsageAttribute] // RVA: 0x9FC74 Offset: 0x9FC74 VA: 0x9FC74
internal class VisibleToOtherModulesAttribute : Attribute // TypeDefIndex: 1282
{
	// Methods

	// RVA: 0x5F2ECC Offset: 0x5F2ECC VA: 0x5F2ECC
	public void .ctor() { }

	// RVA: 0x5F2ED4 Offset: 0x5F2ED4 VA: 0x5F2ED4
	public void .ctor(string[] modules) { }
}

// Namespace: UnityEngine.Bindings
internal interface IBindingsAttribute // TypeDefIndex: 1283
{}

// Namespace: UnityEngine.Bindings
internal interface IBindingsNameProviderAttribute : IBindingsAttribute // TypeDefIndex: 1284
{}

// Namespace: UnityEngine.Bindings
internal interface IBindingsHeaderProviderAttribute : IBindingsAttribute // TypeDefIndex: 1285
{}

// Namespace: UnityEngine.Bindings
internal interface IBindingsIsThreadSafeProviderAttribute : IBindingsAttribute // TypeDefIndex: 1286
{}

// Namespace: UnityEngine.Bindings
internal interface IBindingsIsFreeFunctionProviderAttribute : IBindingsAttribute // TypeDefIndex: 1287
{}

// Namespace: UnityEngine.Bindings
internal interface IBindingsThrowsProviderAttribute : IBindingsAttribute // TypeDefIndex: 1288
{}

// Namespace: UnityEngine.Bindings
internal interface IBindingsGenerateMarshallingTypeAttribute : IBindingsAttribute // TypeDefIndex: 1289
{}

// Namespace: UnityEngine.Bindings
internal interface IBindingsWritableSelfProviderAttribute : IBindingsAttribute // TypeDefIndex: 1290
{}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x9FCBC Offset: 0x9FCBC VA: 0x9FCBC
[AttributeUsageAttribute] // RVA: 0x9FCBC Offset: 0x9FCBC VA: 0x9FCBC
internal class NativeConditionalAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1291
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA0120 Offset: 0xA0120 VA: 0xA0120
	[DebuggerBrowsableAttribute] // RVA: 0xA0120 Offset: 0xA0120 VA: 0xA0120
	private string <Condition>k__BackingField; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0xA0154 Offset: 0xA0154 VA: 0xA0154
	[CompilerGeneratedAttribute] // RVA: 0xA0154 Offset: 0xA0154 VA: 0xA0154
	private bool <Enabled>k__BackingField; // 0xC

	// Properties
	public string Condition { set; }
	public bool Enabled { set; }

	// Methods

	// RVA: 0x5F274C Offset: 0x5F274C VA: 0x5F274C
	public void .ctor(string condition) { }

	[CompilerGeneratedAttribute] // RVA: 0xA0508 Offset: 0xA0508 VA: 0xA0508
	// RVA: 0x5F2774 Offset: 0x5F2774 VA: 0x5F2774
	public void set_Condition(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xA0518 Offset: 0xA0518 VA: 0xA0518
	// RVA: 0x5F277C Offset: 0x5F277C VA: 0x5F277C
	public void set_Enabled(bool value) { }
}

// Namespace: UnityEngine.Bindings
[AttributeUsageAttribute] // RVA: 0x9FCF0 Offset: 0x9FCF0 VA: 0x9FCF0
[VisibleToOtherModulesAttribute] // RVA: 0x9FCF0 Offset: 0x9FCF0 VA: 0x9FCF0
internal class NativeHeaderAttribute : Attribute, IBindingsHeaderProviderAttribute, IBindingsAttribute // TypeDefIndex: 1292
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xA0188 Offset: 0xA0188 VA: 0xA0188
	[CompilerGeneratedAttribute] // RVA: 0xA0188 Offset: 0xA0188 VA: 0xA0188
	private string <Header>k__BackingField; // 0x8

	// Properties
	public string Header { set; }

	// Methods

	// RVA: 0x5F2784 Offset: 0x5F2784 VA: 0x5F2784
	public void .ctor(string header) { }

	[CompilerGeneratedAttribute] // RVA: 0xA0528 Offset: 0xA0528 VA: 0xA0528
	// RVA: 0x5F28E4 Offset: 0x5F28E4 VA: 0x5F28E4 Slot: 4
	public void set_Header(string value) { }
}

// Namespace: UnityEngine.Bindings
[AttributeUsageAttribute] // RVA: 0x9FD38 Offset: 0x9FD38 VA: 0x9FD38
[VisibleToOtherModulesAttribute] // RVA: 0x9FD38 Offset: 0x9FD38 VA: 0x9FD38
internal class NativeNameAttribute : Attribute, IBindingsNameProviderAttribute, IBindingsAttribute // TypeDefIndex: 1293
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA01BC Offset: 0xA01BC VA: 0xA01BC
	[DebuggerBrowsableAttribute] // RVA: 0xA01BC Offset: 0xA01BC VA: 0xA01BC
	private string <Name>k__BackingField; // 0x8

	// Properties
	public string Name { set; }

	// Methods

	// RVA: 0x5F2A6C Offset: 0x5F2A6C VA: 0x5F2A6C
	public void .ctor(string name) { }

	[CompilerGeneratedAttribute] // RVA: 0xA0538 Offset: 0xA0538 VA: 0xA0538
	// RVA: 0x5F2BCC Offset: 0x5F2BCC VA: 0x5F2BCC Slot: 4
	public void set_Name(string value) { }
}

// Namespace: UnityEngine.Bindings
[AttributeUsageAttribute] // RVA: 0x9FD6C Offset: 0x9FD6C VA: 0x9FD6C
[VisibleToOtherModulesAttribute] // RVA: 0x9FD6C Offset: 0x9FD6C VA: 0x9FD6C
internal sealed class NativeWritableSelfAttribute : Attribute, IBindingsWritableSelfProviderAttribute, IBindingsAttribute // TypeDefIndex: 1294
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA01F0 Offset: 0xA01F0 VA: 0xA01F0
	[DebuggerBrowsableAttribute] // RVA: 0xA01F0 Offset: 0xA01F0 VA: 0xA01F0
	private bool <WritableSelf>k__BackingField; // 0x8

	// Properties
	public bool WritableSelf { set; }

	// Methods

	// RVA: 0x5F2E1C Offset: 0x5F2E1C VA: 0x5F2E1C
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xA0548 Offset: 0xA0548 VA: 0xA0548
	// RVA: 0x5F2E3C Offset: 0x5F2E3C VA: 0x5F2E3C Slot: 4
	public void set_WritableSelf(bool value) { }
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x9FDA0 Offset: 0x9FDA0 VA: 0x9FDA0
[AttributeUsageAttribute] // RVA: 0x9FDA0 Offset: 0x9FDA0 VA: 0x9FDA0
internal class NativeMethodAttribute : Attribute, IBindingsNameProviderAttribute, IBindingsIsThreadSafeProviderAttribute, IBindingsIsFreeFunctionProviderAttribute, IBindingsThrowsProviderAttribute, IBindingsAttribute // TypeDefIndex: 1295
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xA0224 Offset: 0xA0224 VA: 0xA0224
	[CompilerGeneratedAttribute] // RVA: 0xA0224 Offset: 0xA0224 VA: 0xA0224
	private string <Name>k__BackingField; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0xA0258 Offset: 0xA0258 VA: 0xA0258
	[CompilerGeneratedAttribute] // RVA: 0xA0258 Offset: 0xA0258 VA: 0xA0258
	private bool <IsThreadSafe>k__BackingField; // 0xC
	[DebuggerBrowsableAttribute] // RVA: 0xA028C Offset: 0xA028C VA: 0xA028C
	[CompilerGeneratedAttribute] // RVA: 0xA028C Offset: 0xA028C VA: 0xA028C
	private bool <IsFreeFunction>k__BackingField; // 0xD
	[DebuggerBrowsableAttribute] // RVA: 0xA02C0 Offset: 0xA02C0 VA: 0xA02C0
	[CompilerGeneratedAttribute] // RVA: 0xA02C0 Offset: 0xA02C0 VA: 0xA02C0
	private bool <ThrowsException>k__BackingField; // 0xE
	[DebuggerBrowsableAttribute] // RVA: 0xA02F4 Offset: 0xA02F4 VA: 0xA02F4
	[CompilerGeneratedAttribute] // RVA: 0xA02F4 Offset: 0xA02F4 VA: 0xA02F4
	private bool <HasExplicitThis>k__BackingField; // 0xF

	// Properties
	public string Name { set; }
	public bool IsThreadSafe { set; }
	public bool IsFreeFunction { set; }
	public bool ThrowsException { set; }
	public bool HasExplicitThis { set; }

	// Methods

	// RVA: 0x5F26AC Offset: 0x5F26AC VA: 0x5F26AC
	public void .ctor() { }

	// RVA: 0x5F28EC Offset: 0x5F28EC VA: 0x5F28EC
	public void .ctor(string name) { }

	// RVA: 0x5F26D8 Offset: 0x5F26D8 VA: 0x5F26D8
	public void .ctor(string name, bool isFreeFunction) { }

	// RVA: 0x5F2718 Offset: 0x5F2718 VA: 0x5F2718
	public void .ctor(string name, bool isFreeFunction, bool isThreadSafe) { }

	[CompilerGeneratedAttribute] // RVA: 0xA0558 Offset: 0xA0558 VA: 0xA0558
	// RVA: 0x5F2A4C Offset: 0x5F2A4C VA: 0x5F2A4C Slot: 4
	public void set_Name(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xA0568 Offset: 0xA0568 VA: 0xA0568
	// RVA: 0x5F2A54 Offset: 0x5F2A54 VA: 0x5F2A54 Slot: 5
	public void set_IsThreadSafe(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xA0578 Offset: 0xA0578 VA: 0xA0578
	// RVA: 0x5F26B4 Offset: 0x5F26B4 VA: 0x5F26B4 Slot: 6
	public void set_IsFreeFunction(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xA0588 Offset: 0xA0588 VA: 0xA0588
	// RVA: 0x5F2A5C Offset: 0x5F2A5C VA: 0x5F2A5C Slot: 7
	public void set_ThrowsException(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xA0598 Offset: 0xA0598 VA: 0xA0598
	// RVA: 0x5F2A64 Offset: 0x5F2A64 VA: 0x5F2A64 Slot: 8
	public void set_HasExplicitThis(bool value) { }
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x9FDD4 Offset: 0x9FDD4 VA: 0x9FDD4
internal enum TargetType // TypeDefIndex: 1296
{
	// Fields
	public int value__; // 0x0
	public const TargetType Function = 0;
	public const TargetType Field = 1;
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x9FDE4 Offset: 0x9FDE4 VA: 0x9FDE4
[AttributeUsageAttribute] // RVA: 0x9FDE4 Offset: 0x9FDE4 VA: 0x9FDE4
internal class NativePropertyAttribute : NativeMethodAttribute // TypeDefIndex: 1297
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA0328 Offset: 0xA0328 VA: 0xA0328
	[DebuggerBrowsableAttribute] // RVA: 0xA0328 Offset: 0xA0328 VA: 0xA0328
	private TargetType <TargetType>k__BackingField; // 0x10

	// Properties
	public TargetType TargetType { set; }

	// Methods

	// RVA: 0x5F2BD4 Offset: 0x5F2BD4 VA: 0x5F2BD4
	public void .ctor() { }

	// RVA: 0x5F2BDC Offset: 0x5F2BDC VA: 0x5F2BDC
	public void .ctor(string name) { }

	// RVA: 0x5F2BE0 Offset: 0x5F2BE0 VA: 0x5F2BE0
	public void .ctor(string name, bool isFree, TargetType targetType) { }

	[CompilerGeneratedAttribute] // RVA: 0xA05A8 Offset: 0xA05A8 VA: 0xA05A8
	// RVA: 0x5F2C04 Offset: 0x5F2C04 VA: 0x5F2C04
	public void set_TargetType(TargetType value) { }
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x9FE18 Offset: 0x9FE18 VA: 0x9FE18
internal enum CodegenOptions // TypeDefIndex: 1298
{
	// Fields
	public int value__; // 0x0
	public const CodegenOptions Auto = 0;
	public const CodegenOptions Custom = 1;
	public const CodegenOptions Force = 2;
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x9FE28 Offset: 0x9FE28 VA: 0x9FE28
[AttributeUsageAttribute] // RVA: 0x9FE28 Offset: 0x9FE28 VA: 0x9FE28
internal class NativeTypeAttribute : Attribute, IBindingsHeaderProviderAttribute, IBindingsGenerateMarshallingTypeAttribute, IBindingsAttribute // TypeDefIndex: 1299
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xA035C Offset: 0xA035C VA: 0xA035C
	[CompilerGeneratedAttribute] // RVA: 0xA035C Offset: 0xA035C VA: 0xA035C
	private string <Header>k__BackingField; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xA0390 Offset: 0xA0390 VA: 0xA0390
	[DebuggerBrowsableAttribute] // RVA: 0xA0390 Offset: 0xA0390 VA: 0xA0390
	private string <IntermediateScriptingStructName>k__BackingField; // 0xC
	[DebuggerBrowsableAttribute] // RVA: 0xA03C4 Offset: 0xA03C4 VA: 0xA03C4
	[CompilerGeneratedAttribute] // RVA: 0xA03C4 Offset: 0xA03C4 VA: 0xA03C4
	private CodegenOptions <CodegenOptions>k__BackingField; // 0x10

	// Properties
	public string Header { set; }
	public string IntermediateScriptingStructName { set; }
	public CodegenOptions CodegenOptions { set; }

	// Methods

	// RVA: 0x5F2C34 Offset: 0x5F2C34 VA: 0x5F2C34
	public void .ctor() { }

	// RVA: 0x5F2C5C Offset: 0x5F2C5C VA: 0x5F2C5C
	public void .ctor(CodegenOptions codegenOptions) { }

	// RVA: 0x5F2C7C Offset: 0x5F2C7C VA: 0x5F2C7C
	public void .ctor(string header) { }

	// RVA: 0x5F2DEC Offset: 0x5F2DEC VA: 0x5F2DEC
	public void .ctor(CodegenOptions codegenOptions, string intermediateStructName) { }

	[CompilerGeneratedAttribute] // RVA: 0xA05B8 Offset: 0xA05B8 VA: 0xA05B8
	// RVA: 0x5F2DE4 Offset: 0x5F2DE4 VA: 0x5F2DE4 Slot: 4
	public void set_Header(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xA05C8 Offset: 0xA05C8 VA: 0xA05C8
	// RVA: 0x5F2E14 Offset: 0x5F2E14 VA: 0x5F2E14
	public void set_IntermediateScriptingStructName(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xA05D8 Offset: 0xA05D8 VA: 0xA05D8
	// RVA: 0x5F2C54 Offset: 0x5F2C54 VA: 0x5F2C54 Slot: 5
	public void set_CodegenOptions(CodegenOptions value) { }
}

// Namespace: UnityEngine.Bindings
[AttributeUsageAttribute] // RVA: 0x9FE5C Offset: 0x9FE5C VA: 0x9FE5C
[VisibleToOtherModulesAttribute] // RVA: 0x9FE5C Offset: 0x9FE5C VA: 0x9FE5C
internal class NotNullAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1300
{
	// Methods

	// RVA: 0x5F2E44 Offset: 0x5F2E44 VA: 0x5F2E44
	public void .ctor() { }
}

// Namespace: UnityEngine.Bindings
[AttributeUsageAttribute] // RVA: 0x9FE90 Offset: 0x9FE90 VA: 0x9FE90
[VisibleToOtherModulesAttribute] // RVA: 0x9FE90 Offset: 0x9FE90 VA: 0x9FE90
internal class UnmarshalledAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1301
{
	// Methods

	// RVA: 0x5F2EC4 Offset: 0x5F2EC4 VA: 0x5F2EC4
	public void .ctor() { }
}

// Namespace: UnityEngine.Bindings
[AttributeUsageAttribute] // RVA: 0x9FEC4 Offset: 0x9FEC4 VA: 0x9FEC4
[VisibleToOtherModulesAttribute] // RVA: 0x9FEC4 Offset: 0x9FEC4 VA: 0x9FEC4
internal class FreeFunctionAttribute : NativeMethodAttribute // TypeDefIndex: 1302
{
	// Methods

	// RVA: 0x5F268C Offset: 0x5F268C VA: 0x5F268C
	public void .ctor() { }

	// RVA: 0x5F26BC Offset: 0x5F26BC VA: 0x5F26BC
	public void .ctor(string name) { }

	// RVA: 0x5F26F4 Offset: 0x5F26F4 VA: 0x5F26F4
	public void .ctor(string name, bool isThreadSafe) { }
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x9FEF8 Offset: 0x9FEF8 VA: 0x9FEF8
[AttributeUsageAttribute] // RVA: 0x9FEF8 Offset: 0x9FEF8 VA: 0x9FEF8
internal class ThreadSafeAttribute : NativeMethodAttribute // TypeDefIndex: 1303
{
	// Methods

	// RVA: 0x5F2EA4 Offset: 0x5F2EA4 VA: 0x5F2EA4
	public void .ctor() { }
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x9FF2C Offset: 0x9FF2C VA: 0x9FF2C
internal enum StaticAccessorType // TypeDefIndex: 1304
{
	// Fields
	public int value__; // 0x0
	public const StaticAccessorType Dot = 0;
	public const StaticAccessorType Arrow = 1;
	public const StaticAccessorType DoubleColon = 2;
	public const StaticAccessorType ArrowWithDefaultReturnIfNull = 3;
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x9FF3C Offset: 0x9FF3C VA: 0x9FF3C
[AttributeUsageAttribute] // RVA: 0x9FF3C Offset: 0x9FF3C VA: 0x9FF3C
internal class StaticAccessorAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1305
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xA03F8 Offset: 0xA03F8 VA: 0xA03F8
	[CompilerGeneratedAttribute] // RVA: 0xA03F8 Offset: 0xA03F8 VA: 0xA03F8
	private string <Name>k__BackingField; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0xA042C Offset: 0xA042C VA: 0xA042C
	[CompilerGeneratedAttribute] // RVA: 0xA042C Offset: 0xA042C VA: 0xA042C
	private StaticAccessorType <Type>k__BackingField; // 0xC

	// Properties
	public string Name { set; }
	public StaticAccessorType Type { set; }

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xA05E8 Offset: 0xA05E8 VA: 0xA05E8
	// RVA: 0x5F2E4C Offset: 0x5F2E4C VA: 0x5F2E4C
	internal void .ctor(string name) { }

	// RVA: 0x5F2E74 Offset: 0x5F2E74 VA: 0x5F2E74
	public void .ctor(string name, StaticAccessorType type) { }

	[CompilerGeneratedAttribute] // RVA: 0xA05F8 Offset: 0xA05F8 VA: 0xA05F8
	// RVA: 0x5F2E6C Offset: 0x5F2E6C VA: 0x5F2E6C
	public void set_Name(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xA0608 Offset: 0xA0608 VA: 0xA0608
	// RVA: 0x5F2E9C Offset: 0x5F2E9C VA: 0x5F2E9C
	public void set_Type(StaticAccessorType value) { }
}

// Namespace: UnityEngine.Bindings
[AttributeUsageAttribute] // RVA: 0x9FF70 Offset: 0x9FF70 VA: 0x9FF70
[VisibleToOtherModulesAttribute] // RVA: 0x9FF70 Offset: 0x9FF70 VA: 0x9FF70
internal class NativeThrowsAttribute : Attribute, IBindingsThrowsProviderAttribute, IBindingsAttribute // TypeDefIndex: 1306
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xA0460 Offset: 0xA0460 VA: 0xA0460
	[CompilerGeneratedAttribute] // RVA: 0xA0460 Offset: 0xA0460 VA: 0xA0460
	private bool <ThrowsException>k__BackingField; // 0x8

	// Properties
	public bool ThrowsException { set; }

	// Methods

	// RVA: 0x5F2C0C Offset: 0x5F2C0C VA: 0x5F2C0C
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xA0618 Offset: 0xA0618 VA: 0xA0618
	// RVA: 0x5F2C2C Offset: 0x5F2C2C VA: 0x5F2C2C Slot: 4
	public void set_ThrowsException(bool value) { }
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x9FFA4 Offset: 0x9FFA4 VA: 0x9FFA4
[AttributeUsageAttribute] // RVA: 0x9FFA4 Offset: 0x9FFA4 VA: 0x9FFA4
internal class IgnoreAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1307
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA0494 Offset: 0xA0494 VA: 0xA0494
	[DebuggerBrowsableAttribute] // RVA: 0xA0494 Offset: 0xA0494 VA: 0xA0494
	private bool <DoesNotContributeToSize>k__BackingField; // 0x8

	// Properties
	public bool DoesNotContributeToSize { set; }

	// Methods

	// RVA: 0x5F273C Offset: 0x5F273C VA: 0x5F273C
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xA0628 Offset: 0xA0628 VA: 0xA0628
	// RVA: 0x5F2744 Offset: 0x5F2744 VA: 0x5F2744
	public void set_DoesNotContributeToSize(bool value) { }
}

// Namespace: UnityEngine
[VisibleToOtherModulesAttribute] // RVA: 0x9FFD8 Offset: 0x9FFD8 VA: 0x9FFD8
internal sealed class UnityString // TypeDefIndex: 1308
{
	// Methods

	// RVA: 0x5F2FF8 Offset: 0x5F2FF8 VA: 0x5F2FF8
	public static string Format(string fmt, object[] args) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1309
{}

// Namespace: UnityEngine
[NativeTypeAttribute] // RVA: 0xA1930 Offset: 0xA1930 VA: 0xA1930
public struct jvalue // TypeDefIndex: 1310
{
	// Fields
	public bool z; // 0x0
	public byte b; // 0x0
	public char c; // 0x0
	public short s; // 0x0
	public int i; // 0x0
	public long j; // 0x0
	public float f; // 0x0
	public double d; // 0x0
	public IntPtr l; // 0x0
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xA1970 Offset: 0xA1970 VA: 0xA1970
[StaticAccessorAttribute] // RVA: 0xA1970 Offset: 0xA1970 VA: 0xA1970
[NativeHeaderAttribute] // RVA: 0xA1970 Offset: 0xA1970 VA: 0xA1970
public class AndroidJNIHelper // TypeDefIndex: 1311
{
	// Properties
	public static bool debug { get; set; }

	// Methods

	// RVA: 0x30BBE0 Offset: 0x30BBE0 VA: 0x30BBE0
	private void .ctor() { }

	// RVA: 0x30BBE8 Offset: 0x30BBE8 VA: 0x30BBE8
	public static bool get_debug() { }

	// RVA: 0x30BC78 Offset: 0x30BC78 VA: 0x30BC78
	public static void set_debug(bool value) { }

	// RVA: 0x30BD18 Offset: 0x30BD18 VA: 0x30BD18
	public static IntPtr GetConstructorID(IntPtr javaClass) { }

	// RVA: 0x30BD80 Offset: 0x30BD80 VA: 0x30BD80
	public static IntPtr GetConstructorID(IntPtr javaClass, string signature) { }

	// RVA: 0x30BD88 Offset: 0x30BD88 VA: 0x30BD88
	public static IntPtr GetMethodID(IntPtr javaClass, string methodName) { }

	// RVA: 0x30BE28 Offset: 0x30BE28 VA: 0x30BE28
	public static IntPtr GetMethodID(IntPtr javaClass, string methodName, string signature) { }

	// RVA: 0x30BE08 Offset: 0x30BE08 VA: 0x30BE08
	public static IntPtr GetMethodID(IntPtr javaClass, string methodName, string signature, bool isStatic) { }

	// RVA: 0x30BE4C Offset: 0x30BE4C VA: 0x30BE4C
	public static IntPtr GetFieldID(IntPtr javaClass, string fieldName) { }

	// RVA: 0x30BEEC Offset: 0x30BEEC VA: 0x30BEEC
	public static IntPtr GetFieldID(IntPtr javaClass, string fieldName, string signature) { }

	// RVA: 0x30BECC Offset: 0x30BECC VA: 0x30BECC
	public static IntPtr GetFieldID(IntPtr javaClass, string fieldName, string signature, bool isStatic) { }

	// RVA: 0x30BF10 Offset: 0x30BF10 VA: 0x30BF10
	public static IntPtr CreateJavaRunnable(AndroidJavaRunnable jrunnable) { }

	[ThreadSafeAttribute] // RVA: 0xA83B0 Offset: 0xA83B0 VA: 0xA83B0
	// RVA: 0x30BF18 Offset: 0x30BF18 VA: 0x30BF18
	public static IntPtr CreateJavaProxy(AndroidJavaProxy proxy) { }

	// RVA: 0x30BF90 Offset: 0x30BF90 VA: 0x30BF90
	public static IntPtr ConvertToJNIArray(Array array) { }

	// RVA: 0x30BF98 Offset: 0x30BF98 VA: 0x30BF98
	public static jvalue[] CreateJNIArgArray(object[] args) { }

	// RVA: 0x30BFA0 Offset: 0x30BFA0 VA: 0x30BFA0
	public static void DeleteJNIArgArray(object[] args, jvalue[] jniArgs) { }

	// RVA: 0x30BFA8 Offset: 0x30BFA8 VA: 0x30BFA8
	public static IntPtr GetConstructorID(IntPtr jclass, object[] args) { }

	// RVA: 0x30BFB0 Offset: 0x30BFB0 VA: 0x30BFB0
	public static IntPtr GetMethodID(IntPtr jclass, string methodName, object[] args, bool isStatic) { }

	// RVA: 0x30BFD0 Offset: 0x30BFD0 VA: 0x30BFD0
	public static string GetSignature(object obj) { }

	// RVA: 0x30BFD8 Offset: 0x30BFD8 VA: 0x30BFD8
	public static string GetSignature(object[] args) { }

	// RVA: -1 Offset: -1
	public static ArrayType ConvertFromJNIArray<ArrayType>(IntPtr array) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x38C2D4 Offset: 0x38C2D4 VA: 0x38C2D4
	|-AndroidJNIHelper.ConvertFromJNIArray<bool>
	|
	|-RVA: 0x38C2E4 Offset: 0x38C2E4 VA: 0x38C2E4
	|-AndroidJNIHelper.ConvertFromJNIArray<byte>
	|
	|-RVA: 0x38C2F4 Offset: 0x38C2F4 VA: 0x38C2F4
	|-AndroidJNIHelper.ConvertFromJNIArray<char>
	|
	|-RVA: 0x38C304 Offset: 0x38C304 VA: 0x38C304
	|-AndroidJNIHelper.ConvertFromJNIArray<double>
	|
	|-RVA: 0x38C314 Offset: 0x38C314 VA: 0x38C314
	|-AndroidJNIHelper.ConvertFromJNIArray<short>
	|
	|-RVA: 0x38C324 Offset: 0x38C324 VA: 0x38C324
	|-AndroidJNIHelper.ConvertFromJNIArray<int>
	|
	|-RVA: 0x38C334 Offset: 0x38C334 VA: 0x38C334
	|-AndroidJNIHelper.ConvertFromJNIArray<long>
	|
	|-RVA: 0x38C344 Offset: 0x38C344 VA: 0x38C344
	|-AndroidJNIHelper.ConvertFromJNIArray<object>
	|
	|-RVA: 0x38C354 Offset: 0x38C354 VA: 0x38C354
	|-AndroidJNIHelper.ConvertFromJNIArray<float>
	*/

	// RVA: -1 Offset: -1
	public static IntPtr GetMethodID<ReturnType>(IntPtr jclass, string methodName, object[] args, bool isStatic) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x522D94 Offset: 0x522D94 VA: 0x522D94
	|-AndroidJNIHelper.GetMethodID<bool>
	|
	|-RVA: 0x522DC0 Offset: 0x522DC0 VA: 0x522DC0
	|-AndroidJNIHelper.GetMethodID<byte>
	|
	|-RVA: 0x522DEC Offset: 0x522DEC VA: 0x522DEC
	|-AndroidJNIHelper.GetMethodID<char>
	|
	|-RVA: 0x522E18 Offset: 0x522E18 VA: 0x522E18
	|-AndroidJNIHelper.GetMethodID<double>
	|
	|-RVA: 0x522E44 Offset: 0x522E44 VA: 0x522E44
	|-AndroidJNIHelper.GetMethodID<short>
	|
	|-RVA: 0x522E70 Offset: 0x522E70 VA: 0x522E70
	|-AndroidJNIHelper.GetMethodID<int>
	|
	|-RVA: 0x522E9C Offset: 0x522E9C VA: 0x522E9C
	|-AndroidJNIHelper.GetMethodID<long>
	|
	|-RVA: 0x522EC8 Offset: 0x522EC8 VA: 0x522EC8
	|-AndroidJNIHelper.GetMethodID<object>
	|
	|-RVA: 0x522EF4 Offset: 0x522EF4 VA: 0x522EF4
	|-AndroidJNIHelper.GetMethodID<float>
	*/

	// RVA: -1 Offset: -1
	public static IntPtr GetFieldID<FieldType>(IntPtr jclass, string fieldName, bool isStatic) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x522D84 Offset: 0x522D84 VA: 0x522D84
	|-AndroidJNIHelper.GetFieldID<object>
	*/

	// RVA: -1 Offset: -1
	public static string GetSignature<ReturnType>(object[] args) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5233F8 Offset: 0x5233F8 VA: 0x5233F8
	|-AndroidJNIHelper.GetSignature<object>
	*/
}

// Namespace: UnityEngine
[StaticAccessorAttribute] // RVA: 0xA19E4 Offset: 0xA19E4 VA: 0xA19E4
[NativeHeaderAttribute] // RVA: 0xA19E4 Offset: 0xA19E4 VA: 0xA19E4
public class AndroidJNI // TypeDefIndex: 1312
{
	// Methods

	// RVA: 0x306C18 Offset: 0x306C18 VA: 0x306C18
	private void .ctor() { }

	[ThreadSafeAttribute] // RVA: 0xA83C0 Offset: 0xA83C0 VA: 0xA83C0
	// RVA: 0x306C20 Offset: 0x306C20 VA: 0x306C20
	public static int AttachCurrentThread() { }

	[ThreadSafeAttribute] // RVA: 0xA83D0 Offset: 0xA83D0 VA: 0xA83D0
	// RVA: 0x306CB4 Offset: 0x306CB4 VA: 0x306CB4
	public static int DetachCurrentThread() { }

	[ThreadSafeAttribute] // RVA: 0xA83E0 Offset: 0xA83E0 VA: 0xA83E0
	// RVA: 0x306D48 Offset: 0x306D48 VA: 0x306D48
	public static int GetVersion() { }

	[ThreadSafeAttribute] // RVA: 0xA83F0 Offset: 0xA83F0 VA: 0xA83F0
	// RVA: 0x306DD4 Offset: 0x306DD4 VA: 0x306DD4
	public static IntPtr FindClass(string name) { }

	[ThreadSafeAttribute] // RVA: 0xA8400 Offset: 0xA8400 VA: 0xA8400
	// RVA: 0x306E70 Offset: 0x306E70 VA: 0x306E70
	public static IntPtr FromReflectedMethod(IntPtr refMethod) { }

	[ThreadSafeAttribute] // RVA: 0xA8410 Offset: 0xA8410 VA: 0xA8410
	// RVA: 0x306F14 Offset: 0x306F14 VA: 0x306F14
	public static IntPtr FromReflectedField(IntPtr refField) { }

	[ThreadSafeAttribute] // RVA: 0xA8420 Offset: 0xA8420 VA: 0xA8420
	// RVA: 0x306FB8 Offset: 0x306FB8 VA: 0x306FB8
	public static IntPtr ToReflectedMethod(IntPtr clazz, IntPtr methodID, bool isStatic) { }

	[ThreadSafeAttribute] // RVA: 0xA8430 Offset: 0xA8430 VA: 0xA8430
	// RVA: 0x307040 Offset: 0x307040 VA: 0x307040
	public static IntPtr ToReflectedField(IntPtr clazz, IntPtr fieldID, bool isStatic) { }

	[ThreadSafeAttribute] // RVA: 0xA8440 Offset: 0xA8440 VA: 0xA8440
	// RVA: 0x3070C8 Offset: 0x3070C8 VA: 0x3070C8
	public static IntPtr GetSuperclass(IntPtr clazz) { }

	[ThreadSafeAttribute] // RVA: 0xA8450 Offset: 0xA8450 VA: 0xA8450
	// RVA: 0x307168 Offset: 0x307168 VA: 0x307168
	public static bool IsAssignableFrom(IntPtr clazz1, IntPtr clazz2) { }

	[ThreadSafeAttribute] // RVA: 0xA8460 Offset: 0xA8460 VA: 0xA8460
	// RVA: 0x3071E8 Offset: 0x3071E8 VA: 0x3071E8
	public static int Throw(IntPtr obj) { }

	[ThreadSafeAttribute] // RVA: 0xA8470 Offset: 0xA8470 VA: 0xA8470
	// RVA: 0x307280 Offset: 0x307280 VA: 0x307280
	public static int ThrowNew(IntPtr clazz, string message) { }

	[ThreadSafeAttribute] // RVA: 0xA8480 Offset: 0xA8480 VA: 0xA8480
	// RVA: 0x307330 Offset: 0x307330 VA: 0x307330
	public static IntPtr ExceptionOccurred() { }

	[ThreadSafeAttribute] // RVA: 0xA8490 Offset: 0xA8490 VA: 0xA8490
	// RVA: 0x3073C0 Offset: 0x3073C0 VA: 0x3073C0
	public static void ExceptionDescribe() { }

	[ThreadSafeAttribute] // RVA: 0xA84A0 Offset: 0xA84A0 VA: 0xA84A0
	// RVA: 0x307450 Offset: 0x307450 VA: 0x307450
	public static void ExceptionClear() { }

	[ThreadSafeAttribute] // RVA: 0xA84B0 Offset: 0xA84B0 VA: 0xA84B0
	// RVA: 0x3074E0 Offset: 0x3074E0 VA: 0x3074E0
	public static void FatalError(string message) { }

	[ThreadSafeAttribute] // RVA: 0xA84C0 Offset: 0xA84C0 VA: 0xA84C0
	// RVA: 0x30757C Offset: 0x30757C VA: 0x30757C
	public static int PushLocalFrame(int capacity) { }

	[ThreadSafeAttribute] // RVA: 0xA84D0 Offset: 0xA84D0 VA: 0xA84D0
	// RVA: 0x30761C Offset: 0x30761C VA: 0x30761C
	public static IntPtr PopLocalFrame(IntPtr ptr) { }

	[ThreadSafeAttribute] // RVA: 0xA84E0 Offset: 0xA84E0 VA: 0xA84E0
	// RVA: 0x3076BC Offset: 0x3076BC VA: 0x3076BC
	public static IntPtr NewGlobalRef(IntPtr obj) { }

	[ThreadSafeAttribute] // RVA: 0xA84F0 Offset: 0xA84F0 VA: 0xA84F0
	// RVA: 0x307758 Offset: 0x307758 VA: 0x307758
	public static void DeleteGlobalRef(IntPtr obj) { }

	[ThreadSafeAttribute] // RVA: 0xA8500 Offset: 0xA8500 VA: 0xA8500
	// RVA: 0x3077F8 Offset: 0x3077F8 VA: 0x3077F8
	public static IntPtr NewLocalRef(IntPtr obj) { }

	[ThreadSafeAttribute] // RVA: 0xA8510 Offset: 0xA8510 VA: 0xA8510
	// RVA: 0x307894 Offset: 0x307894 VA: 0x307894
	public static void DeleteLocalRef(IntPtr obj) { }

	[ThreadSafeAttribute] // RVA: 0xA8520 Offset: 0xA8520 VA: 0xA8520
	// RVA: 0x307934 Offset: 0x307934 VA: 0x307934
	public static bool IsSameObject(IntPtr obj1, IntPtr obj2) { }

	[ThreadSafeAttribute] // RVA: 0xA8530 Offset: 0xA8530 VA: 0xA8530
	// RVA: 0x3079B4 Offset: 0x3079B4 VA: 0x3079B4
	public static int EnsureLocalCapacity(int capacity) { }

	[ThreadSafeAttribute] // RVA: 0xA8540 Offset: 0xA8540 VA: 0xA8540
	// RVA: 0x307A58 Offset: 0x307A58 VA: 0x307A58
	public static IntPtr AllocObject(IntPtr clazz) { }

	[ThreadSafeAttribute] // RVA: 0xA8550 Offset: 0xA8550 VA: 0xA8550
	// RVA: 0x307AF4 Offset: 0x307AF4 VA: 0x307AF4
	public static IntPtr NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8560 Offset: 0xA8560 VA: 0xA8560
	// RVA: 0x307B7C Offset: 0x307B7C VA: 0x307B7C
	public static IntPtr GetObjectClass(IntPtr obj) { }

	[ThreadSafeAttribute] // RVA: 0xA8570 Offset: 0xA8570 VA: 0xA8570
	// RVA: 0x307C1C Offset: 0x307C1C VA: 0x307C1C
	public static bool IsInstanceOf(IntPtr obj, IntPtr clazz) { }

	[ThreadSafeAttribute] // RVA: 0xA8580 Offset: 0xA8580 VA: 0xA8580
	// RVA: 0x307C9C Offset: 0x307C9C VA: 0x307C9C
	public static IntPtr GetMethodID(IntPtr clazz, string name, string sig) { }

	[ThreadSafeAttribute] // RVA: 0xA8590 Offset: 0xA8590 VA: 0xA8590
	// RVA: 0x307D24 Offset: 0x307D24 VA: 0x307D24
	public static IntPtr GetFieldID(IntPtr clazz, string name, string sig) { }

	[ThreadSafeAttribute] // RVA: 0xA85A0 Offset: 0xA85A0 VA: 0xA85A0
	// RVA: 0x307DAC Offset: 0x307DAC VA: 0x307DAC
	public static IntPtr GetStaticMethodID(IntPtr clazz, string name, string sig) { }

	[ThreadSafeAttribute] // RVA: 0xA85B0 Offset: 0xA85B0 VA: 0xA85B0
	// RVA: 0x307E34 Offset: 0x307E34 VA: 0x307E34
	public static IntPtr GetStaticFieldID(IntPtr clazz, string name, string sig) { }

	[ThreadSafeAttribute] // RVA: 0xA85C0 Offset: 0xA85C0 VA: 0xA85C0
	// RVA: 0x307EBC Offset: 0x307EBC VA: 0x307EBC
	public static IntPtr NewStringUTF(string bytes) { }

	[ThreadSafeAttribute] // RVA: 0xA85D0 Offset: 0xA85D0 VA: 0xA85D0
	// RVA: 0x307F58 Offset: 0x307F58 VA: 0x307F58
	public static int GetStringUTFLength(IntPtr str) { }

	[ThreadSafeAttribute] // RVA: 0xA85E0 Offset: 0xA85E0 VA: 0xA85E0
	// RVA: 0x307FFC Offset: 0x307FFC VA: 0x307FFC
	public static string GetStringUTFChars(IntPtr str) { }

	[ThreadSafeAttribute] // RVA: 0xA85F0 Offset: 0xA85F0 VA: 0xA85F0
	// RVA: 0x3080A0 Offset: 0x3080A0 VA: 0x3080A0
	public static string CallStringMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8600 Offset: 0xA8600 VA: 0xA8600
	// RVA: 0x308128 Offset: 0x308128 VA: 0x308128
	public static IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8610 Offset: 0xA8610 VA: 0xA8610
	// RVA: 0x3081B0 Offset: 0x3081B0 VA: 0x3081B0
	public static int CallIntMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8620 Offset: 0xA8620 VA: 0xA8620
	// RVA: 0x308238 Offset: 0x308238 VA: 0x308238
	public static bool CallBooleanMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8630 Offset: 0xA8630 VA: 0xA8630
	// RVA: 0x3082C0 Offset: 0x3082C0 VA: 0x3082C0
	public static short CallShortMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8640 Offset: 0xA8640 VA: 0xA8640
	// RVA: 0x308348 Offset: 0x308348 VA: 0x308348
	public static byte CallByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8650 Offset: 0xA8650 VA: 0xA8650
	// RVA: 0x3083D0 Offset: 0x3083D0 VA: 0x3083D0
	public static char CallCharMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8660 Offset: 0xA8660 VA: 0xA8660
	// RVA: 0x308458 Offset: 0x308458 VA: 0x308458
	public static float CallFloatMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8670 Offset: 0xA8670 VA: 0xA8670
	// RVA: 0x3084E0 Offset: 0x3084E0 VA: 0x3084E0
	public static double CallDoubleMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8680 Offset: 0xA8680 VA: 0xA8680
	// RVA: 0x308568 Offset: 0x308568 VA: 0x308568
	public static long CallLongMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8690 Offset: 0xA8690 VA: 0xA8690
	// RVA: 0x3085F0 Offset: 0x3085F0 VA: 0x3085F0
	public static void CallVoidMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA86A0 Offset: 0xA86A0 VA: 0xA86A0
	// RVA: 0x308678 Offset: 0x308678 VA: 0x308678
	public static string GetStringField(IntPtr obj, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA86B0 Offset: 0xA86B0 VA: 0xA86B0
	// RVA: 0x3086F8 Offset: 0x3086F8 VA: 0x3086F8
	public static IntPtr GetObjectField(IntPtr obj, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA86C0 Offset: 0xA86C0 VA: 0xA86C0
	// RVA: 0x308778 Offset: 0x308778 VA: 0x308778
	public static bool GetBooleanField(IntPtr obj, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA86D0 Offset: 0xA86D0 VA: 0xA86D0
	// RVA: 0x3087F8 Offset: 0x3087F8 VA: 0x3087F8
	public static byte GetByteField(IntPtr obj, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA86E0 Offset: 0xA86E0 VA: 0xA86E0
	// RVA: 0x308878 Offset: 0x308878 VA: 0x308878
	public static char GetCharField(IntPtr obj, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA86F0 Offset: 0xA86F0 VA: 0xA86F0
	// RVA: 0x3088F8 Offset: 0x3088F8 VA: 0x3088F8
	public static short GetShortField(IntPtr obj, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA8700 Offset: 0xA8700 VA: 0xA8700
	// RVA: 0x308978 Offset: 0x308978 VA: 0x308978
	public static int GetIntField(IntPtr obj, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA8710 Offset: 0xA8710 VA: 0xA8710
	// RVA: 0x3089F8 Offset: 0x3089F8 VA: 0x3089F8
	public static long GetLongField(IntPtr obj, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA8720 Offset: 0xA8720 VA: 0xA8720
	// RVA: 0x308A78 Offset: 0x308A78 VA: 0x308A78
	public static float GetFloatField(IntPtr obj, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA8730 Offset: 0xA8730 VA: 0xA8730
	// RVA: 0x308AF8 Offset: 0x308AF8 VA: 0x308AF8
	public static double GetDoubleField(IntPtr obj, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA8740 Offset: 0xA8740 VA: 0xA8740
	// RVA: 0x308B78 Offset: 0x308B78 VA: 0x308B78
	public static void SetStringField(IntPtr obj, IntPtr fieldID, string val) { }

	[ThreadSafeAttribute] // RVA: 0xA8750 Offset: 0xA8750 VA: 0xA8750
	// RVA: 0x308C00 Offset: 0x308C00 VA: 0x308C00
	public static void SetObjectField(IntPtr obj, IntPtr fieldID, IntPtr val) { }

	[ThreadSafeAttribute] // RVA: 0xA8760 Offset: 0xA8760 VA: 0xA8760
	// RVA: 0x308C88 Offset: 0x308C88 VA: 0x308C88
	public static void SetBooleanField(IntPtr obj, IntPtr fieldID, bool val) { }

	[ThreadSafeAttribute] // RVA: 0xA8770 Offset: 0xA8770 VA: 0xA8770
	// RVA: 0x308D10 Offset: 0x308D10 VA: 0x308D10
	public static void SetByteField(IntPtr obj, IntPtr fieldID, byte val) { }

	[ThreadSafeAttribute] // RVA: 0xA8780 Offset: 0xA8780 VA: 0xA8780
	// RVA: 0x308D98 Offset: 0x308D98 VA: 0x308D98
	public static void SetCharField(IntPtr obj, IntPtr fieldID, char val) { }

	[ThreadSafeAttribute] // RVA: 0xA8790 Offset: 0xA8790 VA: 0xA8790
	// RVA: 0x308E20 Offset: 0x308E20 VA: 0x308E20
	public static void SetShortField(IntPtr obj, IntPtr fieldID, short val) { }

	[ThreadSafeAttribute] // RVA: 0xA87A0 Offset: 0xA87A0 VA: 0xA87A0
	// RVA: 0x308EA8 Offset: 0x308EA8 VA: 0x308EA8
	public static void SetIntField(IntPtr obj, IntPtr fieldID, int val) { }

	[ThreadSafeAttribute] // RVA: 0xA87B0 Offset: 0xA87B0 VA: 0xA87B0
	// RVA: 0x308F30 Offset: 0x308F30 VA: 0x308F30
	public static void SetLongField(IntPtr obj, IntPtr fieldID, long val) { }

	[ThreadSafeAttribute] // RVA: 0xA87C0 Offset: 0xA87C0 VA: 0xA87C0
	// RVA: 0x308FC0 Offset: 0x308FC0 VA: 0x308FC0
	public static void SetFloatField(IntPtr obj, IntPtr fieldID, float val) { }

	[ThreadSafeAttribute] // RVA: 0xA87D0 Offset: 0xA87D0 VA: 0xA87D0
	// RVA: 0x309048 Offset: 0x309048 VA: 0x309048
	public static void SetDoubleField(IntPtr obj, IntPtr fieldID, double val) { }

	[ThreadSafeAttribute] // RVA: 0xA87E0 Offset: 0xA87E0 VA: 0xA87E0
	// RVA: 0x3090D8 Offset: 0x3090D8 VA: 0x3090D8
	public static string CallStaticStringMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA87F0 Offset: 0xA87F0 VA: 0xA87F0
	// RVA: 0x309160 Offset: 0x309160 VA: 0x309160
	public static IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8800 Offset: 0xA8800 VA: 0xA8800
	// RVA: 0x3091E8 Offset: 0x3091E8 VA: 0x3091E8
	public static int CallStaticIntMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8810 Offset: 0xA8810 VA: 0xA8810
	// RVA: 0x309270 Offset: 0x309270 VA: 0x309270
	public static bool CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8820 Offset: 0xA8820 VA: 0xA8820
	// RVA: 0x3092F8 Offset: 0x3092F8 VA: 0x3092F8
	public static short CallStaticShortMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8830 Offset: 0xA8830 VA: 0xA8830
	// RVA: 0x309380 Offset: 0x309380 VA: 0x309380
	public static byte CallStaticByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8840 Offset: 0xA8840 VA: 0xA8840
	// RVA: 0x309408 Offset: 0x309408 VA: 0x309408
	public static char CallStaticCharMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8850 Offset: 0xA8850 VA: 0xA8850
	// RVA: 0x309490 Offset: 0x309490 VA: 0x309490
	public static float CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8860 Offset: 0xA8860 VA: 0xA8860
	// RVA: 0x309518 Offset: 0x309518 VA: 0x309518
	public static double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8870 Offset: 0xA8870 VA: 0xA8870
	// RVA: 0x3095A0 Offset: 0x3095A0 VA: 0x3095A0
	public static long CallStaticLongMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8880 Offset: 0xA8880 VA: 0xA8880
	// RVA: 0x309628 Offset: 0x309628 VA: 0x309628
	public static void CallStaticVoidMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	[ThreadSafeAttribute] // RVA: 0xA8890 Offset: 0xA8890 VA: 0xA8890
	// RVA: 0x3096B0 Offset: 0x3096B0 VA: 0x3096B0
	public static string GetStaticStringField(IntPtr clazz, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA88A0 Offset: 0xA88A0 VA: 0xA88A0
	// RVA: 0x309730 Offset: 0x309730 VA: 0x309730
	public static IntPtr GetStaticObjectField(IntPtr clazz, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA88B0 Offset: 0xA88B0 VA: 0xA88B0
	// RVA: 0x3097B0 Offset: 0x3097B0 VA: 0x3097B0
	public static bool GetStaticBooleanField(IntPtr clazz, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA88C0 Offset: 0xA88C0 VA: 0xA88C0
	// RVA: 0x309830 Offset: 0x309830 VA: 0x309830
	public static byte GetStaticByteField(IntPtr clazz, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA88D0 Offset: 0xA88D0 VA: 0xA88D0
	// RVA: 0x3098B0 Offset: 0x3098B0 VA: 0x3098B0
	public static char GetStaticCharField(IntPtr clazz, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA88E0 Offset: 0xA88E0 VA: 0xA88E0
	// RVA: 0x309930 Offset: 0x309930 VA: 0x309930
	public static short GetStaticShortField(IntPtr clazz, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA88F0 Offset: 0xA88F0 VA: 0xA88F0
	// RVA: 0x3099B0 Offset: 0x3099B0 VA: 0x3099B0
	public static int GetStaticIntField(IntPtr clazz, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA8900 Offset: 0xA8900 VA: 0xA8900
	// RVA: 0x309A30 Offset: 0x309A30 VA: 0x309A30
	public static long GetStaticLongField(IntPtr clazz, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA8910 Offset: 0xA8910 VA: 0xA8910
	// RVA: 0x309AB0 Offset: 0x309AB0 VA: 0x309AB0
	public static float GetStaticFloatField(IntPtr clazz, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA8920 Offset: 0xA8920 VA: 0xA8920
	// RVA: 0x309B30 Offset: 0x309B30 VA: 0x309B30
	public static double GetStaticDoubleField(IntPtr clazz, IntPtr fieldID) { }

	[ThreadSafeAttribute] // RVA: 0xA8930 Offset: 0xA8930 VA: 0xA8930
	// RVA: 0x309BB0 Offset: 0x309BB0 VA: 0x309BB0
	public static void SetStaticStringField(IntPtr clazz, IntPtr fieldID, string val) { }

	[ThreadSafeAttribute] // RVA: 0xA8940 Offset: 0xA8940 VA: 0xA8940
	// RVA: 0x309C38 Offset: 0x309C38 VA: 0x309C38
	public static void SetStaticObjectField(IntPtr clazz, IntPtr fieldID, IntPtr val) { }

	[ThreadSafeAttribute] // RVA: 0xA8950 Offset: 0xA8950 VA: 0xA8950
	// RVA: 0x309CC0 Offset: 0x309CC0 VA: 0x309CC0
	public static void SetStaticBooleanField(IntPtr clazz, IntPtr fieldID, bool val) { }

	[ThreadSafeAttribute] // RVA: 0xA8960 Offset: 0xA8960 VA: 0xA8960
	// RVA: 0x309D48 Offset: 0x309D48 VA: 0x309D48
	public static void SetStaticByteField(IntPtr clazz, IntPtr fieldID, byte val) { }

	[ThreadSafeAttribute] // RVA: 0xA8970 Offset: 0xA8970 VA: 0xA8970
	// RVA: 0x309DD0 Offset: 0x309DD0 VA: 0x309DD0
	public static void SetStaticCharField(IntPtr clazz, IntPtr fieldID, char val) { }

	[ThreadSafeAttribute] // RVA: 0xA8980 Offset: 0xA8980 VA: 0xA8980
	// RVA: 0x309E58 Offset: 0x309E58 VA: 0x309E58
	public static void SetStaticShortField(IntPtr clazz, IntPtr fieldID, short val) { }

	[ThreadSafeAttribute] // RVA: 0xA8990 Offset: 0xA8990 VA: 0xA8990
	// RVA: 0x309EE0 Offset: 0x309EE0 VA: 0x309EE0
	public static void SetStaticIntField(IntPtr clazz, IntPtr fieldID, int val) { }

	[ThreadSafeAttribute] // RVA: 0xA89A0 Offset: 0xA89A0 VA: 0xA89A0
	// RVA: 0x309F68 Offset: 0x309F68 VA: 0x309F68
	public static void SetStaticLongField(IntPtr clazz, IntPtr fieldID, long val) { }

	[ThreadSafeAttribute] // RVA: 0xA89B0 Offset: 0xA89B0 VA: 0xA89B0
	// RVA: 0x309FF8 Offset: 0x309FF8 VA: 0x309FF8
	public static void SetStaticFloatField(IntPtr clazz, IntPtr fieldID, float val) { }

	[ThreadSafeAttribute] // RVA: 0xA89C0 Offset: 0xA89C0 VA: 0xA89C0
	// RVA: 0x30A080 Offset: 0x30A080 VA: 0x30A080
	public static void SetStaticDoubleField(IntPtr clazz, IntPtr fieldID, double val) { }

	[ThreadSafeAttribute] // RVA: 0xA89D0 Offset: 0xA89D0 VA: 0xA89D0
	// RVA: 0x30A110 Offset: 0x30A110 VA: 0x30A110
	public static IntPtr ToBooleanArray(bool[] array) { }

	[ThreadSafeAttribute] // RVA: 0xA89E0 Offset: 0xA89E0 VA: 0xA89E0
	// RVA: 0x30A1B4 Offset: 0x30A1B4 VA: 0x30A1B4
	public static IntPtr ToByteArray(byte[] array) { }

	[ThreadSafeAttribute] // RVA: 0xA89F0 Offset: 0xA89F0 VA: 0xA89F0
	// RVA: 0x30A250 Offset: 0x30A250 VA: 0x30A250
	public static IntPtr ToCharArray(char[] array) { }

	[ThreadSafeAttribute] // RVA: 0xA8A00 Offset: 0xA8A00 VA: 0xA8A00
	// RVA: 0x30A2EC Offset: 0x30A2EC VA: 0x30A2EC
	public static IntPtr ToShortArray(short[] array) { }

	[ThreadSafeAttribute] // RVA: 0xA8A10 Offset: 0xA8A10 VA: 0xA8A10
	// RVA: 0x30A38C Offset: 0x30A38C VA: 0x30A38C
	public static IntPtr ToIntArray(int[] array) { }

	[ThreadSafeAttribute] // RVA: 0xA8A20 Offset: 0xA8A20 VA: 0xA8A20
	// RVA: 0x30A428 Offset: 0x30A428 VA: 0x30A428
	public static IntPtr ToLongArray(long[] array) { }

	[ThreadSafeAttribute] // RVA: 0xA8A30 Offset: 0xA8A30 VA: 0xA8A30
	// RVA: 0x30A4C4 Offset: 0x30A4C4 VA: 0x30A4C4
	public static IntPtr ToFloatArray(float[] array) { }

	[ThreadSafeAttribute] // RVA: 0xA8A40 Offset: 0xA8A40 VA: 0xA8A40
	// RVA: 0x30A564 Offset: 0x30A564 VA: 0x30A564
	public static IntPtr ToDoubleArray(double[] array) { }

	[ThreadSafeAttribute] // RVA: 0xA8A50 Offset: 0xA8A50 VA: 0xA8A50
	// RVA: 0x30A604 Offset: 0x30A604 VA: 0x30A604
	public static IntPtr ToObjectArray(IntPtr[] array, IntPtr arrayClass) { }

	// RVA: 0x30A684 Offset: 0x30A684 VA: 0x30A684
	public static IntPtr ToObjectArray(IntPtr[] array) { }

	[ThreadSafeAttribute] // RVA: 0xA8A60 Offset: 0xA8A60 VA: 0xA8A60
	// RVA: 0x30A6DC Offset: 0x30A6DC VA: 0x30A6DC
	public static bool[] FromBooleanArray(IntPtr array) { }

	[ThreadSafeAttribute] // RVA: 0xA8A70 Offset: 0xA8A70 VA: 0xA8A70
	// RVA: 0x30A77C Offset: 0x30A77C VA: 0x30A77C
	public static byte[] FromByteArray(IntPtr array) { }

	[ThreadSafeAttribute] // RVA: 0xA8A80 Offset: 0xA8A80 VA: 0xA8A80
	// RVA: 0x30A81C Offset: 0x30A81C VA: 0x30A81C
	public static char[] FromCharArray(IntPtr array) { }

	[ThreadSafeAttribute] // RVA: 0xA8A90 Offset: 0xA8A90 VA: 0xA8A90
	// RVA: 0x30A8BC Offset: 0x30A8BC VA: 0x30A8BC
	public static short[] FromShortArray(IntPtr array) { }

	[ThreadSafeAttribute] // RVA: 0xA8AA0 Offset: 0xA8AA0 VA: 0xA8AA0
	// RVA: 0x30A95C Offset: 0x30A95C VA: 0x30A95C
	public static int[] FromIntArray(IntPtr array) { }

	[ThreadSafeAttribute] // RVA: 0xA8AB0 Offset: 0xA8AB0 VA: 0xA8AB0
	// RVA: 0x30A9F8 Offset: 0x30A9F8 VA: 0x30A9F8
	public static long[] FromLongArray(IntPtr array) { }

	[ThreadSafeAttribute] // RVA: 0xA8AC0 Offset: 0xA8AC0 VA: 0xA8AC0
	// RVA: 0x30AA98 Offset: 0x30AA98 VA: 0x30AA98
	public static float[] FromFloatArray(IntPtr array) { }

	[ThreadSafeAttribute] // RVA: 0xA8AD0 Offset: 0xA8AD0 VA: 0xA8AD0
	// RVA: 0x30AB38 Offset: 0x30AB38 VA: 0x30AB38
	public static double[] FromDoubleArray(IntPtr array) { }

	[ThreadSafeAttribute] // RVA: 0xA8AE0 Offset: 0xA8AE0 VA: 0xA8AE0
	// RVA: 0x30ABD8 Offset: 0x30ABD8 VA: 0x30ABD8
	public static IntPtr[] FromObjectArray(IntPtr array) { }

	[ThreadSafeAttribute] // RVA: 0xA8AF0 Offset: 0xA8AF0 VA: 0xA8AF0
	// RVA: 0x30AC78 Offset: 0x30AC78 VA: 0x30AC78
	public static int GetArrayLength(IntPtr array) { }

	[ThreadSafeAttribute] // RVA: 0xA8B00 Offset: 0xA8B00 VA: 0xA8B00
	// RVA: 0x30AD18 Offset: 0x30AD18 VA: 0x30AD18
	public static IntPtr NewBooleanArray(int size) { }

	[ThreadSafeAttribute] // RVA: 0xA8B10 Offset: 0xA8B10 VA: 0xA8B10
	// RVA: 0x30ADB8 Offset: 0x30ADB8 VA: 0x30ADB8
	public static IntPtr NewByteArray(int size) { }

	[ThreadSafeAttribute] // RVA: 0xA8B20 Offset: 0xA8B20 VA: 0xA8B20
	// RVA: 0x30AE54 Offset: 0x30AE54 VA: 0x30AE54
	public static IntPtr NewCharArray(int size) { }

	[ThreadSafeAttribute] // RVA: 0xA8B30 Offset: 0xA8B30 VA: 0xA8B30
	// RVA: 0x30AEF0 Offset: 0x30AEF0 VA: 0x30AEF0
	public static IntPtr NewShortArray(int size) { }

	[ThreadSafeAttribute] // RVA: 0xA8B40 Offset: 0xA8B40 VA: 0xA8B40
	// RVA: 0x30AF8C Offset: 0x30AF8C VA: 0x30AF8C
	public static IntPtr NewIntArray(int size) { }

	[ThreadSafeAttribute] // RVA: 0xA8B50 Offset: 0xA8B50 VA: 0xA8B50
	// RVA: 0x30B028 Offset: 0x30B028 VA: 0x30B028
	public static IntPtr NewLongArray(int size) { }

	[ThreadSafeAttribute] // RVA: 0xA8B60 Offset: 0xA8B60 VA: 0xA8B60
	// RVA: 0x30B0C4 Offset: 0x30B0C4 VA: 0x30B0C4
	public static IntPtr NewFloatArray(int size) { }

	[ThreadSafeAttribute] // RVA: 0xA8B70 Offset: 0xA8B70 VA: 0xA8B70
	// RVA: 0x30B160 Offset: 0x30B160 VA: 0x30B160
	public static IntPtr NewDoubleArray(int size) { }

	[ThreadSafeAttribute] // RVA: 0xA8B80 Offset: 0xA8B80 VA: 0xA8B80
	// RVA: 0x30B200 Offset: 0x30B200 VA: 0x30B200
	public static IntPtr NewObjectArray(int size, IntPtr clazz, IntPtr obj) { }

	[ThreadSafeAttribute] // RVA: 0xA8B90 Offset: 0xA8B90 VA: 0xA8B90
	// RVA: 0x30B288 Offset: 0x30B288 VA: 0x30B288
	public static bool GetBooleanArrayElement(IntPtr array, int index) { }

	[ThreadSafeAttribute] // RVA: 0xA8BA0 Offset: 0xA8BA0 VA: 0xA8BA0
	// RVA: 0x30B308 Offset: 0x30B308 VA: 0x30B308
	public static byte GetByteArrayElement(IntPtr array, int index) { }

	[ThreadSafeAttribute] // RVA: 0xA8BB0 Offset: 0xA8BB0 VA: 0xA8BB0
	// RVA: 0x30B388 Offset: 0x30B388 VA: 0x30B388
	public static char GetCharArrayElement(IntPtr array, int index) { }

	[ThreadSafeAttribute] // RVA: 0xA8BC0 Offset: 0xA8BC0 VA: 0xA8BC0
	// RVA: 0x30B408 Offset: 0x30B408 VA: 0x30B408
	public static short GetShortArrayElement(IntPtr array, int index) { }

	[ThreadSafeAttribute] // RVA: 0xA8BD0 Offset: 0xA8BD0 VA: 0xA8BD0
	// RVA: 0x30B488 Offset: 0x30B488 VA: 0x30B488
	public static int GetIntArrayElement(IntPtr array, int index) { }

	[ThreadSafeAttribute] // RVA: 0xA8BE0 Offset: 0xA8BE0 VA: 0xA8BE0
	// RVA: 0x30B508 Offset: 0x30B508 VA: 0x30B508
	public static long GetLongArrayElement(IntPtr array, int index) { }

	[ThreadSafeAttribute] // RVA: 0xA8BF0 Offset: 0xA8BF0 VA: 0xA8BF0
	// RVA: 0x30B588 Offset: 0x30B588 VA: 0x30B588
	public static float GetFloatArrayElement(IntPtr array, int index) { }

	[ThreadSafeAttribute] // RVA: 0xA8C00 Offset: 0xA8C00 VA: 0xA8C00
	// RVA: 0x30B608 Offset: 0x30B608 VA: 0x30B608
	public static double GetDoubleArrayElement(IntPtr array, int index) { }

	[ThreadSafeAttribute] // RVA: 0xA8C10 Offset: 0xA8C10 VA: 0xA8C10
	// RVA: 0x30B688 Offset: 0x30B688 VA: 0x30B688
	public static IntPtr GetObjectArrayElement(IntPtr array, int index) { }

	[ThreadSafeAttribute] // RVA: 0xA8C20 Offset: 0xA8C20 VA: 0xA8C20
	// RVA: 0x30B708 Offset: 0x30B708 VA: 0x30B708
	public static void SetBooleanArrayElement(IntPtr array, int index, byte val) { }

	[ThreadSafeAttribute] // RVA: 0xA8C30 Offset: 0xA8C30 VA: 0xA8C30
	// RVA: 0x30B790 Offset: 0x30B790 VA: 0x30B790
	public static void SetByteArrayElement(IntPtr array, int index, sbyte val) { }

	[ThreadSafeAttribute] // RVA: 0xA8C40 Offset: 0xA8C40 VA: 0xA8C40
	// RVA: 0x30B818 Offset: 0x30B818 VA: 0x30B818
	public static void SetCharArrayElement(IntPtr array, int index, char val) { }

	[ThreadSafeAttribute] // RVA: 0xA8C50 Offset: 0xA8C50 VA: 0xA8C50
	// RVA: 0x30B8A0 Offset: 0x30B8A0 VA: 0x30B8A0
	public static void SetShortArrayElement(IntPtr array, int index, short val) { }

	[ThreadSafeAttribute] // RVA: 0xA8C60 Offset: 0xA8C60 VA: 0xA8C60
	// RVA: 0x30B928 Offset: 0x30B928 VA: 0x30B928
	public static void SetIntArrayElement(IntPtr array, int index, int val) { }

	[ThreadSafeAttribute] // RVA: 0xA8C70 Offset: 0xA8C70 VA: 0xA8C70
	// RVA: 0x30B9B0 Offset: 0x30B9B0 VA: 0x30B9B0
	public static void SetLongArrayElement(IntPtr array, int index, long val) { }

	[ThreadSafeAttribute] // RVA: 0xA8C80 Offset: 0xA8C80 VA: 0xA8C80
	// RVA: 0x30BA40 Offset: 0x30BA40 VA: 0x30BA40
	public static void SetFloatArrayElement(IntPtr array, int index, float val) { }

	[ThreadSafeAttribute] // RVA: 0xA8C90 Offset: 0xA8C90 VA: 0xA8C90
	// RVA: 0x30BAC8 Offset: 0x30BAC8 VA: 0x30BAC8
	public static void SetDoubleArrayElement(IntPtr array, int index, double val) { }

	[ThreadSafeAttribute] // RVA: 0xA8CA0 Offset: 0xA8CA0 VA: 0xA8CA0
	// RVA: 0x30BB58 Offset: 0x30BB58 VA: 0x30BB58
	public static void SetObjectArrayElement(IntPtr array, int index, IntPtr obj) { }
}

// Namespace: UnityEngine
internal class AndroidJNISafe // TypeDefIndex: 1313
{
	// Methods

	// RVA: 0x30BFE0 Offset: 0x30BFE0 VA: 0x30BFE0
	public static void CheckException() { }

	// RVA: 0x30C2AC Offset: 0x30C2AC VA: 0x30C2AC
	public static void DeleteGlobalRef(IntPtr globalref) { }

	// RVA: 0x30C240 Offset: 0x30C240 VA: 0x30C240
	public static void DeleteLocalRef(IntPtr localref) { }

	// RVA: 0x30C318 Offset: 0x30C318 VA: 0x30C318
	public static IntPtr NewStringUTF(string bytes) { }

	// RVA: 0x30C374 Offset: 0x30C374 VA: 0x30C374
	public static string GetStringUTFChars(IntPtr str) { }

	// RVA: 0x30C3D0 Offset: 0x30C3D0 VA: 0x30C3D0
	public static IntPtr GetObjectClass(IntPtr ptr) { }

	// RVA: 0x30C42C Offset: 0x30C42C VA: 0x30C42C
	public static IntPtr GetStaticMethodID(IntPtr clazz, string name, string sig) { }

	// RVA: 0x30C488 Offset: 0x30C488 VA: 0x30C488
	public static IntPtr GetMethodID(IntPtr obj, string name, string sig) { }

	// RVA: 0x30C4E4 Offset: 0x30C4E4 VA: 0x30C4E4
	public static IntPtr GetFieldID(IntPtr clazz, string name, string sig) { }

	// RVA: 0x30C540 Offset: 0x30C540 VA: 0x30C540
	public static IntPtr GetStaticFieldID(IntPtr clazz, string name, string sig) { }

	// RVA: 0x30C59C Offset: 0x30C59C VA: 0x30C59C
	public static IntPtr FromReflectedMethod(IntPtr refMethod) { }

	// RVA: 0x30C5F8 Offset: 0x30C5F8 VA: 0x30C5F8
	public static IntPtr FromReflectedField(IntPtr refField) { }

	// RVA: 0x30C654 Offset: 0x30C654 VA: 0x30C654
	public static IntPtr FindClass(string name) { }

	// RVA: 0x30C6B0 Offset: 0x30C6B0 VA: 0x30C6B0
	public static IntPtr NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30C70C Offset: 0x30C70C VA: 0x30C70C
	public static void SetStaticObjectField(IntPtr clazz, IntPtr fieldID, IntPtr val) { }

	// RVA: 0x30C75C Offset: 0x30C75C VA: 0x30C75C
	public static void SetStaticStringField(IntPtr clazz, IntPtr fieldID, string val) { }

	// RVA: 0x30C7AC Offset: 0x30C7AC VA: 0x30C7AC
	public static void SetStaticCharField(IntPtr clazz, IntPtr fieldID, char val) { }

	// RVA: 0x30C7FC Offset: 0x30C7FC VA: 0x30C7FC
	public static void SetStaticDoubleField(IntPtr clazz, IntPtr fieldID, double val) { }

	// RVA: 0x30C85C Offset: 0x30C85C VA: 0x30C85C
	public static void SetStaticFloatField(IntPtr clazz, IntPtr fieldID, float val) { }

	// RVA: 0x30C8AC Offset: 0x30C8AC VA: 0x30C8AC
	public static void SetStaticLongField(IntPtr clazz, IntPtr fieldID, long val) { }

	// RVA: 0x30C90C Offset: 0x30C90C VA: 0x30C90C
	public static void SetStaticShortField(IntPtr clazz, IntPtr fieldID, short val) { }

	// RVA: 0x30C95C Offset: 0x30C95C VA: 0x30C95C
	public static void SetStaticByteField(IntPtr clazz, IntPtr fieldID, byte val) { }

	// RVA: 0x30C9AC Offset: 0x30C9AC VA: 0x30C9AC
	public static void SetStaticBooleanField(IntPtr clazz, IntPtr fieldID, bool val) { }

	// RVA: 0x30C9FC Offset: 0x30C9FC VA: 0x30C9FC
	public static void SetStaticIntField(IntPtr clazz, IntPtr fieldID, int val) { }

	// RVA: 0x30CA4C Offset: 0x30CA4C VA: 0x30CA4C
	public static IntPtr GetStaticObjectField(IntPtr clazz, IntPtr fieldID) { }

	// RVA: 0x30CAA8 Offset: 0x30CAA8 VA: 0x30CAA8
	public static string GetStaticStringField(IntPtr clazz, IntPtr fieldID) { }

	// RVA: 0x30CB04 Offset: 0x30CB04 VA: 0x30CB04
	public static char GetStaticCharField(IntPtr clazz, IntPtr fieldID) { }

	// RVA: 0x30CB60 Offset: 0x30CB60 VA: 0x30CB60
	public static double GetStaticDoubleField(IntPtr clazz, IntPtr fieldID) { }

	// RVA: 0x30CBC4 Offset: 0x30CBC4 VA: 0x30CBC4
	public static float GetStaticFloatField(IntPtr clazz, IntPtr fieldID) { }

	// RVA: 0x30CC2C Offset: 0x30CC2C VA: 0x30CC2C
	public static long GetStaticLongField(IntPtr clazz, IntPtr fieldID) { }

	// RVA: 0x30CC94 Offset: 0x30CC94 VA: 0x30CC94
	public static short GetStaticShortField(IntPtr clazz, IntPtr fieldID) { }

	// RVA: 0x30CCF0 Offset: 0x30CCF0 VA: 0x30CCF0
	public static byte GetStaticByteField(IntPtr clazz, IntPtr fieldID) { }

	// RVA: 0x30CD4C Offset: 0x30CD4C VA: 0x30CD4C
	public static bool GetStaticBooleanField(IntPtr clazz, IntPtr fieldID) { }

	// RVA: 0x30CDA8 Offset: 0x30CDA8 VA: 0x30CDA8
	public static int GetStaticIntField(IntPtr clazz, IntPtr fieldID) { }

	// RVA: 0x30CE04 Offset: 0x30CE04 VA: 0x30CE04
	public static void CallStaticVoidMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30CE54 Offset: 0x30CE54 VA: 0x30CE54
	public static IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30CEB0 Offset: 0x30CEB0 VA: 0x30CEB0
	public static string CallStaticStringMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30CF0C Offset: 0x30CF0C VA: 0x30CF0C
	public static char CallStaticCharMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30CF68 Offset: 0x30CF68 VA: 0x30CF68
	public static double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30CFCC Offset: 0x30CFCC VA: 0x30CFCC
	public static float CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30D034 Offset: 0x30D034 VA: 0x30D034
	public static long CallStaticLongMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30D09C Offset: 0x30D09C VA: 0x30D09C
	public static short CallStaticShortMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30D0F8 Offset: 0x30D0F8 VA: 0x30D0F8
	public static byte CallStaticByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30D154 Offset: 0x30D154 VA: 0x30D154
	public static bool CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30D1B0 Offset: 0x30D1B0 VA: 0x30D1B0
	public static int CallStaticIntMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30D20C Offset: 0x30D20C VA: 0x30D20C
	public static void SetObjectField(IntPtr obj, IntPtr fieldID, IntPtr val) { }

	// RVA: 0x30D25C Offset: 0x30D25C VA: 0x30D25C
	public static void SetStringField(IntPtr obj, IntPtr fieldID, string val) { }

	// RVA: 0x30D2AC Offset: 0x30D2AC VA: 0x30D2AC
	public static void SetCharField(IntPtr obj, IntPtr fieldID, char val) { }

	// RVA: 0x30D2FC Offset: 0x30D2FC VA: 0x30D2FC
	public static void SetDoubleField(IntPtr obj, IntPtr fieldID, double val) { }

	// RVA: 0x30D35C Offset: 0x30D35C VA: 0x30D35C
	public static void SetFloatField(IntPtr obj, IntPtr fieldID, float val) { }

	// RVA: 0x30D3AC Offset: 0x30D3AC VA: 0x30D3AC
	public static void SetLongField(IntPtr obj, IntPtr fieldID, long val) { }

	// RVA: 0x30D40C Offset: 0x30D40C VA: 0x30D40C
	public static void SetShortField(IntPtr obj, IntPtr fieldID, short val) { }

	// RVA: 0x30D45C Offset: 0x30D45C VA: 0x30D45C
	public static void SetByteField(IntPtr obj, IntPtr fieldID, byte val) { }

	// RVA: 0x30D4AC Offset: 0x30D4AC VA: 0x30D4AC
	public static void SetBooleanField(IntPtr obj, IntPtr fieldID, bool val) { }

	// RVA: 0x30D4FC Offset: 0x30D4FC VA: 0x30D4FC
	public static void SetIntField(IntPtr obj, IntPtr fieldID, int val) { }

	// RVA: 0x30D54C Offset: 0x30D54C VA: 0x30D54C
	public static IntPtr GetObjectField(IntPtr obj, IntPtr fieldID) { }

	// RVA: 0x30D5A8 Offset: 0x30D5A8 VA: 0x30D5A8
	public static string GetStringField(IntPtr obj, IntPtr fieldID) { }

	// RVA: 0x30D604 Offset: 0x30D604 VA: 0x30D604
	public static char GetCharField(IntPtr obj, IntPtr fieldID) { }

	// RVA: 0x30D660 Offset: 0x30D660 VA: 0x30D660
	public static double GetDoubleField(IntPtr obj, IntPtr fieldID) { }

	// RVA: 0x30D6C4 Offset: 0x30D6C4 VA: 0x30D6C4
	public static float GetFloatField(IntPtr obj, IntPtr fieldID) { }

	// RVA: 0x30D72C Offset: 0x30D72C VA: 0x30D72C
	public static long GetLongField(IntPtr obj, IntPtr fieldID) { }

	// RVA: 0x30D794 Offset: 0x30D794 VA: 0x30D794
	public static short GetShortField(IntPtr obj, IntPtr fieldID) { }

	// RVA: 0x30D7F0 Offset: 0x30D7F0 VA: 0x30D7F0
	public static byte GetByteField(IntPtr obj, IntPtr fieldID) { }

	// RVA: 0x30D84C Offset: 0x30D84C VA: 0x30D84C
	public static bool GetBooleanField(IntPtr obj, IntPtr fieldID) { }

	// RVA: 0x30D8A8 Offset: 0x30D8A8 VA: 0x30D8A8
	public static int GetIntField(IntPtr obj, IntPtr fieldID) { }

	// RVA: 0x30D904 Offset: 0x30D904 VA: 0x30D904
	public static void CallVoidMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30D954 Offset: 0x30D954 VA: 0x30D954
	public static IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30D9B0 Offset: 0x30D9B0 VA: 0x30D9B0
	public static string CallStringMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30DA0C Offset: 0x30DA0C VA: 0x30DA0C
	public static char CallCharMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30DA68 Offset: 0x30DA68 VA: 0x30DA68
	public static double CallDoubleMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30DACC Offset: 0x30DACC VA: 0x30DACC
	public static float CallFloatMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30DB34 Offset: 0x30DB34 VA: 0x30DB34
	public static long CallLongMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30DB9C Offset: 0x30DB9C VA: 0x30DB9C
	public static short CallShortMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30DBF8 Offset: 0x30DBF8 VA: 0x30DBF8
	public static byte CallByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30DC54 Offset: 0x30DC54 VA: 0x30DC54
	public static bool CallBooleanMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30DCB0 Offset: 0x30DCB0 VA: 0x30DCB0
	public static int CallIntMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }

	// RVA: 0x30DD0C Offset: 0x30DD0C VA: 0x30DD0C
	public static char[] FromCharArray(IntPtr array) { }

	// RVA: 0x30DD68 Offset: 0x30DD68 VA: 0x30DD68
	public static double[] FromDoubleArray(IntPtr array) { }

	// RVA: 0x30DDC4 Offset: 0x30DDC4 VA: 0x30DDC4
	public static float[] FromFloatArray(IntPtr array) { }

	// RVA: 0x30DE20 Offset: 0x30DE20 VA: 0x30DE20
	public static long[] FromLongArray(IntPtr array) { }

	// RVA: 0x30DE7C Offset: 0x30DE7C VA: 0x30DE7C
	public static short[] FromShortArray(IntPtr array) { }

	// RVA: 0x30DED8 Offset: 0x30DED8 VA: 0x30DED8
	public static byte[] FromByteArray(IntPtr array) { }

	// RVA: 0x30DF34 Offset: 0x30DF34 VA: 0x30DF34
	public static bool[] FromBooleanArray(IntPtr array) { }

	// RVA: 0x30DF90 Offset: 0x30DF90 VA: 0x30DF90
	public static int[] FromIntArray(IntPtr array) { }

	// RVA: 0x30DFEC Offset: 0x30DFEC VA: 0x30DFEC
	public static IntPtr ToObjectArray(IntPtr[] array, IntPtr type) { }

	// RVA: 0x30E048 Offset: 0x30E048 VA: 0x30E048
	public static IntPtr ToCharArray(char[] array) { }

	// RVA: 0x30E0A4 Offset: 0x30E0A4 VA: 0x30E0A4
	public static IntPtr ToDoubleArray(double[] array) { }

	// RVA: 0x30E100 Offset: 0x30E100 VA: 0x30E100
	public static IntPtr ToFloatArray(float[] array) { }

	// RVA: 0x30E15C Offset: 0x30E15C VA: 0x30E15C
	public static IntPtr ToLongArray(long[] array) { }

	// RVA: 0x30E1B8 Offset: 0x30E1B8 VA: 0x30E1B8
	public static IntPtr ToShortArray(short[] array) { }

	// RVA: 0x30E214 Offset: 0x30E214 VA: 0x30E214
	public static IntPtr ToByteArray(byte[] array) { }

	// RVA: 0x30E270 Offset: 0x30E270 VA: 0x30E270
	public static IntPtr ToBooleanArray(bool[] array) { }

	// RVA: 0x30E2CC Offset: 0x30E2CC VA: 0x30E2CC
	public static IntPtr ToIntArray(int[] array) { }

	// RVA: 0x30E328 Offset: 0x30E328 VA: 0x30E328
	public static IntPtr GetObjectArrayElement(IntPtr array, int index) { }

	// RVA: 0x30E384 Offset: 0x30E384 VA: 0x30E384
	public static int GetArrayLength(IntPtr array) { }
}

// Namespace: UnityEngine
public class AndroidJavaObject : IDisposable // TypeDefIndex: 1314
{
	// Fields
	private static bool enableDebugPrints; // 0x0
	internal GlobalJavaObjectRef m_jobject; // 0x8
	internal GlobalJavaObjectRef m_jclass; // 0xC
	private static AndroidJavaClass s_JavaLangClass; // 0x4

	// Properties
	protected static AndroidJavaClass JavaLangClass { get; }

	// Methods

	// RVA: 0x30EB54 Offset: 0x30EB54 VA: 0x30EB54
	public void .ctor(string className, object[] args) { }

	// RVA: 0x30EF48 Offset: 0x30EF48 VA: 0x30EF48
	internal void .ctor(IntPtr jobject) { }

	// RVA: 0x30E474 Offset: 0x30E474 VA: 0x30E474
	internal void .ctor() { }

	// RVA: 0x30F064 Offset: 0x30F064 VA: 0x30F064 Slot: 4
	public void Dispose() { }

	// RVA: 0x30F0CC Offset: 0x30F0CC VA: 0x30F0CC
	public void Call(string methodName, object[] args) { }

	// RVA: 0x30F220 Offset: 0x30F220 VA: 0x30F220
	public void CallStatic(string methodName, object[] args) { }

	// RVA: -1 Offset: -1
	public FieldType Get<FieldType>(string fieldName) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x390BFC Offset: 0x390BFC VA: 0x390BFC
	|-AndroidJavaObject.Get<object>
	*/

	// RVA: -1 Offset: -1
	public void Set<FieldType>(string fieldName, FieldType val) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5105A8 Offset: 0x5105A8 VA: 0x5105A8
	|-AndroidJavaObject.Set<object>
	*/

	// RVA: -1 Offset: -1
	public FieldType GetStatic<FieldType>(string fieldName) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x390C3C Offset: 0x390C3C VA: 0x390C3C
	|-AndroidJavaObject.GetStatic<object>
	*/

	// RVA: -1 Offset: -1
	public void SetStatic<FieldType>(string fieldName, FieldType val) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5105F0 Offset: 0x5105F0 VA: 0x5105F0
	|-AndroidJavaObject.SetStatic<object>
	*/

	// RVA: 0x30EA94 Offset: 0x30EA94 VA: 0x30EA94
	public IntPtr GetRawObject() { }

	// RVA: 0x30F398 Offset: 0x30F398 VA: 0x30F398
	public IntPtr GetRawClass() { }

	// RVA: -1 Offset: -1
	public ReturnType Call<ReturnType>(string methodName, object[] args) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x392DBC Offset: 0x392DBC VA: 0x392DBC
	|-AndroidJavaObject.Call<bool>
	|
	|-RVA: 0x392E04 Offset: 0x392E04 VA: 0x392E04
	|-AndroidJavaObject.Call<byte>
	|
	|-RVA: 0x392E4C Offset: 0x392E4C VA: 0x392E4C
	|-AndroidJavaObject.Call<char>
	|
	|-RVA: 0x392E94 Offset: 0x392E94 VA: 0x392E94
	|-AndroidJavaObject.Call<double>
	|
	|-RVA: 0x392EDC Offset: 0x392EDC VA: 0x392EDC
	|-AndroidJavaObject.Call<short>
	|
	|-RVA: 0x392F24 Offset: 0x392F24 VA: 0x392F24
	|-AndroidJavaObject.Call<int>
	|
	|-RVA: 0x392F6C Offset: 0x392F6C VA: 0x392F6C
	|-AndroidJavaObject.Call<long>
	|
	|-RVA: 0x392FB4 Offset: 0x392FB4 VA: 0x392FB4
	|-AndroidJavaObject.Call<object>
	|-AndroidJavaObject.Call<string>
	|-AndroidJavaObject.Call<AndroidJavaObject>
	|
	|-RVA: 0x392FFC Offset: 0x392FFC VA: 0x392FFC
	|-AndroidJavaObject.Call<float>
	*/

	// RVA: -1 Offset: -1
	public ReturnType CallStatic<ReturnType>(string methodName, object[] args) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x393044 Offset: 0x393044 VA: 0x393044
	|-AndroidJavaObject.CallStatic<int>
	|
	|-RVA: 0x39308C Offset: 0x39308C VA: 0x39308C
	|-AndroidJavaObject.CallStatic<object>
	|-AndroidJavaObject.CallStatic<AndroidJavaObject>
	*/

	// RVA: 0x30E868 Offset: 0x30E868 VA: 0x30E868
	protected void DebugPrint(string msg) { }

	// RVA: 0x30F4F0 Offset: 0x30F4F0 VA: 0x30F4F0
	protected void DebugPrint(string call, string methodName, string signature, object[] args) { }

	// RVA: 0x30EB84 Offset: 0x30EB84 VA: 0x30EB84
	private void _AndroidJavaObject(string className, object[] args) { }

	// RVA: 0x30FA30 Offset: 0x30FA30 VA: 0x30FA30 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x30FAA8 Offset: 0x30FAA8 VA: 0x30FAA8 Slot: 5
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x30F098 Offset: 0x30F098 VA: 0x30F098
	protected void _Dispose() { }

	// RVA: 0x30F0D0 Offset: 0x30F0D0 VA: 0x30F0D0
	protected void _Call(string methodName, object[] args) { }

	// RVA: -1 Offset: -1
	protected ReturnType _Call<ReturnType>(string methodName, object[] args) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3930D4 Offset: 0x3930D4 VA: 0x3930D4
	|-AndroidJavaObject._Call<bool>
	|
	|-RVA: 0x393F38 Offset: 0x393F38 VA: 0x393F38
	|-AndroidJavaObject._Call<byte>
	|
	|-RVA: 0x394D94 Offset: 0x394D94 VA: 0x394D94
	|-AndroidJavaObject._Call<char>
	|
	|-RVA: 0x395BF0 Offset: 0x395BF0 VA: 0x395BF0
	|-AndroidJavaObject._Call<double>
	|
	|-RVA: 0x396A5C Offset: 0x396A5C VA: 0x396A5C
	|-AndroidJavaObject._Call<short>
	|
	|-RVA: 0x3978B8 Offset: 0x3978B8 VA: 0x3978B8
	|-AndroidJavaObject._Call<int>
	|
	|-RVA: 0x398714 Offset: 0x398714 VA: 0x398714
	|-AndroidJavaObject._Call<long>
	|
	|-RVA: 0x399590 Offset: 0x399590 VA: 0x399590
	|-AndroidJavaObject._Call<object>
	|
	|-RVA: 0x39A878 Offset: 0x39A878 VA: 0x39A878
	|-AndroidJavaObject._Call<float>
	*/

	// RVA: -1 Offset: -1
	protected FieldType _Get<FieldType>(string fieldName) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x390C7C Offset: 0x390C7C VA: 0x390C7C
	|-AndroidJavaObject._Get<object>
	*/

	// RVA: -1 Offset: -1
	protected void _Set<FieldType>(string fieldName, FieldType val) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x510638 Offset: 0x510638 VA: 0x510638
	|-AndroidJavaObject._Set<object>
	*/

	// RVA: 0x30F224 Offset: 0x30F224 VA: 0x30F224
	protected void _CallStatic(string methodName, object[] args) { }

	// RVA: -1 Offset: -1
	protected ReturnType _CallStatic<ReturnType>(string methodName, object[] args) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x39B6E4 Offset: 0x39B6E4 VA: 0x39B6E4
	|-AndroidJavaObject._CallStatic<int>
	|
	|-RVA: 0x39C540 Offset: 0x39C540 VA: 0x39C540
	|-AndroidJavaObject._CallStatic<object>
	*/

	// RVA: -1 Offset: -1
	protected FieldType _GetStatic<FieldType>(string fieldName) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x391D1C Offset: 0x391D1C VA: 0x391D1C
	|-AndroidJavaObject._GetStatic<object>
	*/

	// RVA: -1 Offset: -1
	protected void _SetStatic<FieldType>(string fieldName, FieldType val) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5112B4 Offset: 0x5112B4 VA: 0x5112B4
	|-AndroidJavaObject._SetStatic<object>
	*/

	// RVA: 0x30FB6C Offset: 0x30FB6C VA: 0x30FB6C
	internal static AndroidJavaObject AndroidJavaObjectDeleteLocalRef(IntPtr jobject) { }

	// RVA: 0x30FC30 Offset: 0x30FC30 VA: 0x30FC30
	internal static AndroidJavaClass AndroidJavaClassDeleteLocalRef(IntPtr jclass) { }

	// RVA: 0x30F374 Offset: 0x30F374 VA: 0x30F374
	protected IntPtr _GetRawObject() { }

	// RVA: 0x30F3BC Offset: 0x30F3BC VA: 0x30F3BC
	protected IntPtr _GetRawClass() { }

	// RVA: 0x30E934 Offset: 0x30E934 VA: 0x30E934
	protected static AndroidJavaObject FindClass(string name) { }

	// RVA: 0x30FCF4 Offset: 0x30FCF4 VA: 0x30FCF4
	protected static AndroidJavaClass get_JavaLangClass() { }

	// RVA: 0x30FE38 Offset: 0x30FE38 VA: 0x30FE38
	private static void .cctor() { }
}

// Namespace: UnityEngine
public class AndroidJavaClass : AndroidJavaObject // TypeDefIndex: 1315
{
	// Methods

	// RVA: 0x30E3E0 Offset: 0x30E3E0 VA: 0x30E3E0
	public void .ctor(string className) { }

	// RVA: 0x30E6A8 Offset: 0x30E6A8 VA: 0x30E6A8
	internal void .ctor(IntPtr jclass) { }

	// RVA: 0x30E47C Offset: 0x30E47C VA: 0x30E47C
	private void _AndroidJavaClass(string className) { }
}

// Namespace: UnityEngine
public sealed class AndroidJavaRunnable : MulticastDelegate // TypeDefIndex: 1316
{
	// Methods

	// RVA: 0x310FA4 Offset: 0x310FA4 VA: 0x310FA4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x310FB8 Offset: 0x310FB8 VA: 0x310FB8 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x3111C8 Offset: 0x3111C8 VA: 0x3111C8 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x3111F4 Offset: 0x3111F4 VA: 0x3111F4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public sealed class AndroidJavaException : Exception // TypeDefIndex: 1317
{
	// Fields
	private string mJavaStackTrace; // 0x34

	// Properties
	public override string StackTrace { get; }

	// Methods

	// RVA: 0x30C220 Offset: 0x30C220 VA: 0x30C220
	internal void .ctor(string message, string javaStackTrace) { }

	// RVA: 0x30EAB8 Offset: 0x30EAB8 VA: 0x30EAB8 Slot: 8
	public override string get_StackTrace() { }
}

// Namespace: UnityEngine
internal class GlobalJavaObjectRef // TypeDefIndex: 1318
{
	// Fields
	private bool m_disposed; // 0x8
	protected IntPtr m_jobject; // 0xC

	// Methods

	// RVA: 0x30E7DC Offset: 0x30E7DC VA: 0x30E7DC
	public void .ctor(IntPtr jobject) { }

	// RVA: 0x31F92C Offset: 0x31F92C VA: 0x31F92C Slot: 1
	protected override void Finalize() { }

	// RVA: 0x30FA0C Offset: 0x30FA0C VA: 0x30FA0C
	public static IntPtr op_Implicit(GlobalJavaObjectRef obj) { }

	// RVA: 0x30FAE8 Offset: 0x30FAE8 VA: 0x30FAE8
	public void Dispose() { }
}

// Namespace: UnityEngine
internal class AndroidJavaRunnableProxy : AndroidJavaProxy // TypeDefIndex: 1319
{
	// Fields
	private AndroidJavaRunnable mRunnable; // 0x10

	// Methods

	// RVA: 0x311200 Offset: 0x311200 VA: 0x311200
	public void .ctor(AndroidJavaRunnable runnable) { }

	// RVA: 0x311298 Offset: 0x311298 VA: 0x311298
	public void run() { }
}

// Namespace: UnityEngine
public class AndroidJavaProxy // TypeDefIndex: 1320
{
	// Fields
	public readonly AndroidJavaClass javaInterface; // 0x8
	internal AndroidJavaObject proxyObject; // 0xC
	private static readonly GlobalJavaObjectRef s_JavaLangSystemClass; // 0x0
	private static readonly IntPtr s_HashCodeMethodID; // 0x4

	// Methods

	// RVA: 0x30FEA0 Offset: 0x30FEA0 VA: 0x30FEA0
	public void .ctor(string javaInterface) { }

	// RVA: 0x30FF20 Offset: 0x30FF20 VA: 0x30FF20
	public void .ctor(AndroidJavaClass javaInterface) { }

	// RVA: 0x30FF40 Offset: 0x30FF40 VA: 0x30FF40 Slot: 4
	public virtual AndroidJavaObject Invoke(string methodName, object[] args) { }

	// RVA: 0x310918 Offset: 0x310918 VA: 0x310918 Slot: 5
	public virtual AndroidJavaObject Invoke(string methodName, AndroidJavaObject[] javaArgs) { }

	// RVA: 0x310B5C Offset: 0x310B5C VA: 0x310B5C Slot: 6
	public virtual bool equals(AndroidJavaObject obj) { }

	// RVA: 0x310CAC Offset: 0x310CAC VA: 0x310CAC Slot: 7
	public virtual int hashCode() { }

	// RVA: 0x310DF0 Offset: 0x310DF0 VA: 0x310DF0 Slot: 8
	public virtual string toString() { }

	// RVA: 0x310C10 Offset: 0x310C10 VA: 0x310C10
	internal AndroidJavaObject GetProxy() { }

	// RVA: 0x310E9C Offset: 0x310E9C VA: 0x310E9C
	private static void .cctor() { }
}

// Namespace: UnityEngine
internal class AndroidReflection // TypeDefIndex: 1321
{
	// Fields
	private static readonly GlobalJavaObjectRef s_ReflectionHelperClass; // 0x0
	private static readonly IntPtr s_ReflectionHelperGetConstructorID; // 0x4
	private static readonly IntPtr s_ReflectionHelperGetMethodID; // 0x8
	private static readonly IntPtr s_ReflectionHelperGetFieldID; // 0xC
	private static readonly IntPtr s_ReflectionHelperNewProxyInstance; // 0x10

	// Methods

	// RVA: 0x3112C4 Offset: 0x3112C4 VA: 0x3112C4
	public static bool IsPrimitive(Type t) { }

	// RVA: 0x3112F0 Offset: 0x3112F0 VA: 0x3112F0
	public static bool IsAssignableFrom(Type t, Type from) { }

	// RVA: 0x31132C Offset: 0x31132C VA: 0x31132C
	private static IntPtr GetStaticMethodID(string clazz, string methodName, string signature) { }

	// RVA: 0x3113A8 Offset: 0x3113A8 VA: 0x3113A8
	public static IntPtr GetConstructorMember(IntPtr jclass, string signature) { }

	// RVA: 0x311590 Offset: 0x311590 VA: 0x311590
	public static IntPtr GetMethodMember(IntPtr jclass, string methodName, string signature, bool isStatic) { }

	// RVA: 0x3117FC Offset: 0x3117FC VA: 0x3117FC
	public static IntPtr GetFieldMember(IntPtr jclass, string fieldName, string signature, bool isStatic) { }

	// RVA: 0x311A68 Offset: 0x311A68 VA: 0x311A68
	public static IntPtr NewProxyInstance(int delegateHandle, IntPtr interfaze) { }

	// RVA: 0x311B9C Offset: 0x311B9C VA: 0x311B9C
	private static void .cctor() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xA1A48 Offset: 0xA1A48 VA: 0xA1A48
internal sealed class _AndroidJNIHelper // TypeDefIndex: 1322
{
	// Methods

	// RVA: 0x2DB53C Offset: 0x2DB53C VA: 0x2DB53C
	public void .ctor() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA8CB0 Offset: 0xA8CB0 VA: 0xA8CB0
	// RVA: 0x2DB544 Offset: 0x2DB544 VA: 0x2DB544
	public static IntPtr CreateJavaProxy(int delegateHandle, AndroidJavaProxy proxy) { }

	// RVA: 0x2DB604 Offset: 0x2DB604 VA: 0x2DB604
	public static IntPtr CreateJavaRunnable(AndroidJavaRunnable jrunnable) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA8CC0 Offset: 0xA8CC0 VA: 0xA8CC0
	// RVA: 0x2DB680 Offset: 0x2DB680 VA: 0x2DB680
	public static IntPtr InvokeJavaProxyMethod(AndroidJavaProxy proxy, IntPtr jmethodName, IntPtr jargs) { }

	// RVA: 0x2DB9A0 Offset: 0x2DB9A0 VA: 0x2DB9A0
	public static jvalue[] CreateJNIArgArray(object[] args) { }

	// RVA: 0x2DD350 Offset: 0x2DD350 VA: 0x2DD350
	public static object UnboxArray(AndroidJavaObject obj) { }

	// RVA: 0x2DDBF0 Offset: 0x2DDBF0 VA: 0x2DDBF0
	public static object Unbox(AndroidJavaObject obj) { }

	// RVA: 0x2DE648 Offset: 0x2DE648 VA: 0x2DE648
	public static AndroidJavaObject Box(object obj) { }

	// RVA: 0x2DF2E0 Offset: 0x2DF2E0 VA: 0x2DF2E0
	public static void DeleteJNIArgArray(object[] args, jvalue[] jniArgs) { }

	// RVA: 0x2DC628 Offset: 0x2DC628 VA: 0x2DC628
	public static IntPtr ConvertToJNIArray(Array array) { }

	// RVA: -1 Offset: -1
	public static ArrayType ConvertFromJNIArray<ArrayType>(IntPtr array) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x38C364 Offset: 0x38C364 VA: 0x38C364
	|-_AndroidJNIHelper.ConvertFromJNIArray<bool>
	|
	|-RVA: 0x38CAE4 Offset: 0x38CAE4 VA: 0x38CAE4
	|-_AndroidJNIHelper.ConvertFromJNIArray<byte>
	|
	|-RVA: 0x38D264 Offset: 0x38D264 VA: 0x38D264
	|-_AndroidJNIHelper.ConvertFromJNIArray<char>
	|
	|-RVA: 0x38D9E4 Offset: 0x38D9E4 VA: 0x38D9E4
	|-_AndroidJNIHelper.ConvertFromJNIArray<double>
	|
	|-RVA: 0x38E170 Offset: 0x38E170 VA: 0x38E170
	|-_AndroidJNIHelper.ConvertFromJNIArray<short>
	|
	|-RVA: 0x38E8F0 Offset: 0x38E8F0 VA: 0x38E8F0
	|-_AndroidJNIHelper.ConvertFromJNIArray<int>
	|
	|-RVA: 0x38F060 Offset: 0x38F060 VA: 0x38F060
	|-_AndroidJNIHelper.ConvertFromJNIArray<long>
	|
	|-RVA: 0x38F7E8 Offset: 0x38F7E8 VA: 0x38F7E8
	|-_AndroidJNIHelper.ConvertFromJNIArray<object>
	|
	|-RVA: 0x390484 Offset: 0x390484 VA: 0x390484
	|-_AndroidJNIHelper.ConvertFromJNIArray<float>
	*/

	// RVA: 0x2DF430 Offset: 0x2DF430 VA: 0x2DF430
	public static IntPtr GetConstructorID(IntPtr jclass, object[] args) { }

	// RVA: 0x2DF5BC Offset: 0x2DF5BC VA: 0x2DF5BC
	public static IntPtr GetMethodID(IntPtr jclass, string methodName, object[] args, bool isStatic) { }

	// RVA: -1 Offset: -1
	public static IntPtr GetMethodID<ReturnType>(IntPtr jclass, string methodName, object[] args, bool isStatic) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x522FE4 Offset: 0x522FE4 VA: 0x522FE4
	|-_AndroidJNIHelper.GetMethodID<bool>
	|
	|-RVA: 0x523038 Offset: 0x523038 VA: 0x523038
	|-_AndroidJNIHelper.GetMethodID<byte>
	|
	|-RVA: 0x52308C Offset: 0x52308C VA: 0x52308C
	|-_AndroidJNIHelper.GetMethodID<char>
	|
	|-RVA: 0x5230E0 Offset: 0x5230E0 VA: 0x5230E0
	|-_AndroidJNIHelper.GetMethodID<double>
	|
	|-RVA: 0x523134 Offset: 0x523134 VA: 0x523134
	|-_AndroidJNIHelper.GetMethodID<short>
	|
	|-RVA: 0x523188 Offset: 0x523188 VA: 0x523188
	|-_AndroidJNIHelper.GetMethodID<int>
	|
	|-RVA: 0x5231DC Offset: 0x5231DC VA: 0x5231DC
	|-_AndroidJNIHelper.GetMethodID<long>
	|
	|-RVA: 0x523230 Offset: 0x523230 VA: 0x523230
	|-_AndroidJNIHelper.GetMethodID<object>
	|
	|-RVA: 0x523284 Offset: 0x523284 VA: 0x523284
	|-_AndroidJNIHelper.GetMethodID<float>
	*/

	// RVA: -1 Offset: -1
	public static IntPtr GetFieldID<ReturnType>(IntPtr jclass, string fieldName, bool isStatic) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x522F20 Offset: 0x522F20 VA: 0x522F20
	|-_AndroidJNIHelper.GetFieldID<object>
	*/

	// RVA: 0x2DF600 Offset: 0x2DF600 VA: 0x2DF600
	public static IntPtr GetConstructorID(IntPtr jclass, string signature) { }

	// RVA: 0x2DF810 Offset: 0x2DF810 VA: 0x2DF810
	public static IntPtr GetMethodID(IntPtr jclass, string methodName, string signature, bool isStatic) { }

	// RVA: 0x2DFA30 Offset: 0x2DFA30 VA: 0x2DFA30
	private static IntPtr GetMethodIDFallback(IntPtr jclass, string methodName, string signature, bool isStatic) { }

	// RVA: 0x2DFB4C Offset: 0x2DFB4C VA: 0x2DFB4C
	public static IntPtr GetFieldID(IntPtr jclass, string fieldName, string signature, bool isStatic) { }

	// RVA: 0x2DFD94 Offset: 0x2DFD94 VA: 0x2DFD94
	public static string GetSignature(object obj) { }

	// RVA: 0x2DF458 Offset: 0x2DF458 VA: 0x2DF458
	public static string GetSignature(object[] args) { }

	// RVA: -1 Offset: -1
	public static string GetSignature<ReturnType>(object[] args) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x523408 Offset: 0x523408 VA: 0x523408
	|-_AndroidJNIHelper.GetSignature<bool>
	|
	|-RVA: 0x5235C8 Offset: 0x5235C8 VA: 0x5235C8
	|-_AndroidJNIHelper.GetSignature<byte>
	|
	|-RVA: 0x523788 Offset: 0x523788 VA: 0x523788
	|-_AndroidJNIHelper.GetSignature<char>
	|
	|-RVA: 0x523948 Offset: 0x523948 VA: 0x523948
	|-_AndroidJNIHelper.GetSignature<double>
	|
	|-RVA: 0x523B08 Offset: 0x523B08 VA: 0x523B08
	|-_AndroidJNIHelper.GetSignature<short>
	|
	|-RVA: 0x523CC8 Offset: 0x523CC8 VA: 0x523CC8
	|-_AndroidJNIHelper.GetSignature<int>
	|
	|-RVA: 0x523E88 Offset: 0x523E88 VA: 0x523E88
	|-_AndroidJNIHelper.GetSignature<long>
	|
	|-RVA: 0x524048 Offset: 0x524048 VA: 0x524048
	|-_AndroidJNIHelper.GetSignature<object>
	|
	|-RVA: 0x524208 Offset: 0x524208 VA: 0x524208
	|-_AndroidJNIHelper.GetSignature<float>
	*/
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA1A58 Offset: 0xA1A58 VA: 0xA1A58
public struct Keyframe // TypeDefIndex: 1323
{
	// Fields
	private float m_Time; // 0x0
	private float m_Value; // 0x4
	private float m_InTangent; // 0x8
	private float m_OutTangent; // 0xC
	private int m_WeightedMode; // 0x10
	private float m_InWeight; // 0x14
	private float m_OutWeight; // 0x18
}

// Namespace: UnityEngine
[ThreadAndSerializationSafeAttribute] // RVA: 0xA1A68 Offset: 0xA1A68 VA: 0xA1A68
[DefaultMemberAttribute] // RVA: 0xA1A68 Offset: 0xA1A68 VA: 0xA1A68
[RequiredByNativeCodeAttribute] // RVA: 0xA1A68 Offset: 0xA1A68 VA: 0xA1A68
[NativeHeaderAttribute] // RVA: 0xA1A68 Offset: 0xA1A68 VA: 0xA1A68
public class AnimationCurve : IEquatable<AnimationCurve> // TypeDefIndex: 1324
{
	// Fields
	internal IntPtr m_Ptr; // 0x8

	// Methods

	// RVA: 0x311D04 Offset: 0x311D04 VA: 0x311D04
	public void .ctor(Keyframe[] keys) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA8CD0 Offset: 0xA8CD0 VA: 0xA8CD0
	// RVA: 0x311DA4 Offset: 0x311DA4 VA: 0x311DA4
	public void .ctor() { }

	[FreeFunctionAttribute] // RVA: 0xA8CE0 Offset: 0xA8CE0 VA: 0xA8CE0
	// RVA: 0x311DC8 Offset: 0x311DC8 VA: 0x311DC8
	private static void Internal_Destroy(IntPtr ptr) { }

	[FreeFunctionAttribute] // RVA: 0xA8D48 Offset: 0xA8D48 VA: 0xA8D48
	// RVA: 0x311D2C Offset: 0x311D2C VA: 0x311D2C
	private static IntPtr Internal_Create(Keyframe[] keys) { }

	[FreeFunctionAttribute] // RVA: 0xA8DAC Offset: 0xA8DAC VA: 0xA8DAC
	// RVA: 0x311E6C Offset: 0x311E6C VA: 0x311E6C
	private bool Internal_Equals(IntPtr other) { }

	// RVA: 0x311F18 Offset: 0x311F18 VA: 0x311F18 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x311F80 Offset: 0x311F80 VA: 0x311F80 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x3120BC Offset: 0x3120BC VA: 0x3120BC Slot: 4
	public bool Equals(AnimationCurve other) { }

	// RVA: 0x31217C Offset: 0x31217C VA: 0x31217C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
[NativeHeaderAttribute] // RVA: 0xA1B08 Offset: 0xA1B08 VA: 0xA1B08
public class Application // TypeDefIndex: 1325
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA65E0 Offset: 0xA65E0 VA: 0xA65E0
	[DebuggerBrowsableAttribute] // RVA: 0xA65E0 Offset: 0xA65E0 VA: 0xA65E0
	private static Application.LowMemoryCallback lowMemory; // 0x0
	private static Application.LogCallback s_LogCallbackHandler; // 0x4
	private static Application.LogCallback s_LogCallbackHandlerThreaded; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xA6614 Offset: 0xA6614 VA: 0xA6614
	[DebuggerBrowsableAttribute] // RVA: 0xA6614 Offset: 0xA6614 VA: 0xA6614
	private static Action<bool> focusChanged; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0xA6648 Offset: 0xA6648 VA: 0xA6648
	[DebuggerBrowsableAttribute] // RVA: 0xA6648 Offset: 0xA6648 VA: 0xA6648
	private static Func<bool> wantsToQuit; // 0x10
	[DebuggerBrowsableAttribute] // RVA: 0xA667C Offset: 0xA667C VA: 0xA667C
	[CompilerGeneratedAttribute] // RVA: 0xA667C Offset: 0xA667C VA: 0xA667C
	private static Action quitting; // 0x14

	// Properties
	public static bool isPlaying { get; }
	public static RuntimePlatform platform { get; }
	public static bool isEditor { get; }

	// Methods

	[FreeFunctionAttribute] // RVA: 0xA8E10 Offset: 0xA8E10 VA: 0xA8E10
	// RVA: 0x312188 Offset: 0x312188 VA: 0x312188
	public static bool get_isPlaying() { }

	[FreeFunctionAttribute] // RVA: 0xA8E4C Offset: 0xA8E4C VA: 0xA8E4C
	// RVA: 0x312218 Offset: 0x312218 VA: 0x312218
	public static RuntimePlatform get_platform() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA8EA8 Offset: 0xA8EA8 VA: 0xA8EA8
	// RVA: 0x3122A4 Offset: 0x3122A4 VA: 0x3122A4
	private static void CallLowMemory() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA8EB8 Offset: 0xA8EB8 VA: 0xA8EB8
	// RVA: 0x312524 Offset: 0x312524 VA: 0x312524
	private static void CallLogCallback(string logString, string stackTrace, LogType type, bool invokedOnMainThread) { }

	// RVA: 0x312A24 Offset: 0x312A24 VA: 0x312A24
	public static bool get_isEditor() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA8EC8 Offset: 0xA8EC8 VA: 0xA8EC8
	// RVA: 0x312A2C Offset: 0x312A2C VA: 0x312A2C
	private static bool Internal_ApplicationWantsToQuit() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA8ED8 Offset: 0xA8ED8 VA: 0xA8ED8
	// RVA: 0x312D8C Offset: 0x312D8C VA: 0x312D8C
	private static void Internal_ApplicationQuit() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA8EE8 Offset: 0xA8EE8 VA: 0xA8EE8
	// RVA: 0x312DFC Offset: 0x312DFC VA: 0x312DFC
	internal static void InvokeOnBeforeRender() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA8EF8 Offset: 0xA8EF8 VA: 0xA8EF8
	// RVA: 0x313090 Offset: 0x313090 VA: 0x313090
	internal static void InvokeFocusChanged(bool focus) { }
}

// Namespace: 
public sealed class Application.LowMemoryCallback : MulticastDelegate // TypeDefIndex: 1326
{
	// Methods

	// RVA: 0x3131DC Offset: 0x3131DC VA: 0x3131DC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x312314 Offset: 0x312314 VA: 0x312314 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x3131F0 Offset: 0x3131F0 VA: 0x3131F0 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x31321C Offset: 0x31321C VA: 0x31321C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class Application.LogCallback : MulticastDelegate // TypeDefIndex: 1327
{
	// Methods

	// RVA: 0x313114 Offset: 0x313114 VA: 0x313114
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x3125FC Offset: 0x3125FC VA: 0x3125FC Slot: 11
	public virtual void Invoke(string condition, string stackTrace, LogType type) { }

	// RVA: 0x313128 Offset: 0x313128 VA: 0x313128 Slot: 12
	public virtual IAsyncResult BeginInvoke(string condition, string stackTrace, LogType type, AsyncCallback callback, object object) { }

	// RVA: 0x3131D0 Offset: 0x3131D0 VA: 0x3131D0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA1E18 Offset: 0xA1E18 VA: 0xA1E18
[RequiredByNativeCodeAttribute] // RVA: 0xA1E18 Offset: 0xA1E18 VA: 0xA1E18
[ThreadAndSerializationSafeAttribute] // RVA: 0xA1E18 Offset: 0xA1E18 VA: 0xA1E18
[NativeHeaderAttribute] // RVA: 0xA1E18 Offset: 0xA1E18 VA: 0xA1E18
public class AsyncOperation : YieldInstruction // TypeDefIndex: 1328
{
	// Fields
	internal IntPtr m_Ptr; // 0x8
	private Action<AsyncOperation> m_completeCallback; // 0xC

	// Methods

	// RVA: 0x313E1C Offset: 0x313E1C VA: 0x313E1C
	public void .ctor() { }

	[NativeMethodAttribute] // RVA: 0xA8F08 Offset: 0xA8F08 VA: 0xA8F08
	[StaticAccessorAttribute] // RVA: 0xA8F08 Offset: 0xA8F08 VA: 0xA8F08
	// RVA: 0x313E24 Offset: 0x313E24 VA: 0x313E24
	private static void InternalDestroy(IntPtr ptr) { }

	// RVA: 0x313EC8 Offset: 0x313EC8 VA: 0x313EC8 Slot: 1
	protected override void Finalize() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA8F78 Offset: 0xA8F78 VA: 0xA8F78
	// RVA: 0x313F30 Offset: 0x313F30 VA: 0x313F30
	internal void InvokeCompletionEvent() { }
}

// Namespace: UnityEngine
internal class AttributeHelperEngine // TypeDefIndex: 1329
{
	// Fields
	public static DisallowMultipleComponent[] _disallowMultipleComponentArray; // 0x0
	public static ExecuteInEditMode[] _executeInEditModeArray; // 0x4
	public static RequireComponent[] _requireComponentArray; // 0x8

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xA8F88 Offset: 0xA8F88 VA: 0xA8F88
	// RVA: 0x313FA8 Offset: 0x313FA8 VA: 0x313FA8
	private static Type GetParentTypeDisallowingMultipleInclusion(Type type) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA8F98 Offset: 0xA8F98 VA: 0xA8F98
	// RVA: 0x3140DC Offset: 0x3140DC VA: 0x3140DC
	private static Type[] GetRequiredComponents(Type klass) { }

	// RVA: 0x314608 Offset: 0x314608 VA: 0x314608
	private static int GetExecuteMode(Type klass) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA8FA8 Offset: 0xA8FA8 VA: 0xA8FA8
	// RVA: 0x314774 Offset: 0x314774 VA: 0x314774
	private static int CheckIsEditorScript(Type klass) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA8FB8 Offset: 0xA8FB8 VA: 0xA8FB8
	// RVA: 0x31488C Offset: 0x31488C VA: 0x31488C
	private static int GetDefaultExecutionOrderFor(Type klass) { }

	// RVA: -1 Offset: -1
	private static T GetCustomAttributeOfType<T>(Type klass) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BBD20 Offset: 0x5BBD20 VA: 0x5BBD20
	|-AttributeHelperEngine.GetCustomAttributeOfType<object>
	|-AttributeHelperEngine.GetCustomAttributeOfType<DefaultExecutionOrder>
	*/

	// RVA: 0x314930 Offset: 0x314930 VA: 0x314930
	private static void .cctor() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xA1ED4 Offset: 0xA1ED4 VA: 0xA1ED4
public sealed class DisallowMultipleComponent : Attribute // TypeDefIndex: 1330
{
	// Methods

	// RVA: 0x319B8C Offset: 0x319B8C VA: 0x319B8C
	public void .ctor() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xA1F08 Offset: 0xA1F08 VA: 0xA1F08
public sealed class RequireComponent : Attribute // TypeDefIndex: 1331
{
	// Fields
	public Type m_Type0; // 0x8
	public Type m_Type1; // 0xC
	public Type m_Type2; // 0x10

	// Methods

	// RVA: 0x2CF554 Offset: 0x2CF554 VA: 0x2CF554
	public void .ctor(Type requiredComponent) { }
}

// Namespace: UnityEngine
public sealed class AddComponentMenu : Attribute // TypeDefIndex: 1332
{
	// Fields
	private string m_AddComponentMenu; // 0x8
	private int m_Ordering; // 0xC

	// Methods

	// RVA: 0x306BC8 Offset: 0x306BC8 VA: 0x306BC8
	public void .ctor(string menuName) { }

	// RVA: 0x306BF0 Offset: 0x306BF0 VA: 0x306BF0
	public void .ctor(string menuName, int order) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA1F3C Offset: 0xA1F3C VA: 0xA1F3C
[AttributeUsageAttribute] // RVA: 0xA1F3C Offset: 0xA1F3C VA: 0xA1F3C
public sealed class ContextMenu : Attribute // TypeDefIndex: 1333
{}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xA1F84 Offset: 0xA1F84 VA: 0xA1F84
public sealed class ExecuteInEditMode : Attribute // TypeDefIndex: 1334
{
	// Methods

	// RVA: 0x31D2AC Offset: 0x31D2AC VA: 0x31D2AC
	public void .ctor() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xA1F94 Offset: 0xA1F94 VA: 0xA1F94
public sealed class ExecuteAlways : Attribute // TypeDefIndex: 1335
{
	// Methods

	// RVA: 0x31D2A4 Offset: 0x31D2A4 VA: 0x31D2A4
	public void .ctor() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xA1FA4 Offset: 0xA1FA4 VA: 0xA1FA4
[AttributeUsageAttribute] // RVA: 0xA1FA4 Offset: 0xA1FA4 VA: 0xA1FA4
public class DefaultExecutionOrder : Attribute // TypeDefIndex: 1336
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xA66B0 Offset: 0xA66B0 VA: 0xA66B0
	[CompilerGeneratedAttribute] // RVA: 0xA66B0 Offset: 0xA66B0 VA: 0xA66B0
	private int <order>k__BackingField; // 0x8

	// Properties
	public int order { get; }

	// Methods

	[CompilerGeneratedAttribute] // RVA: 0xA8FC8 Offset: 0xA8FC8 VA: 0xA8FC8
	// RVA: 0x314928 Offset: 0x314928 VA: 0x314928
	public int get_order() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xA1FD8 Offset: 0xA1FD8 VA: 0xA1FD8
[RequiredByNativeCodeAttribute] // RVA: 0xA1FD8 Offset: 0xA1FD8 VA: 0xA1FD8
public class AssemblyIsEditorAssembly : Attribute // TypeDefIndex: 1337
{}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xA200C Offset: 0xA200C VA: 0xA200C
[UsedByNativeCodeAttribute] // RVA: 0xA200C Offset: 0xA200C VA: 0xA200C
public class ExcludeFromPresetAttribute : Attribute // TypeDefIndex: 1338
{
	// Methods

	// RVA: 0x31D29C Offset: 0x31D29C VA: 0x31D29C
	public void .ctor() { }
}

// Namespace: UnityEngine
public enum SendMessageOptions // TypeDefIndex: 1339
{
	// Fields
	public int value__; // 0x0
	public const SendMessageOptions RequireReceiver = 0;
	public const SendMessageOptions DontRequireReceiver = 1;
}

// Namespace: UnityEngine
public enum RuntimePlatform // TypeDefIndex: 1340
{
	// Fields
	public int value__; // 0x0
	public const RuntimePlatform OSXEditor = 0;
	public const RuntimePlatform OSXPlayer = 1;
	public const RuntimePlatform WindowsPlayer = 2;
	[ObsoleteAttribute] // RVA: 0xA66E4 Offset: 0xA66E4 VA: 0xA66E4
	public const RuntimePlatform OSXWebPlayer = 3;
	[ObsoleteAttribute] // RVA: 0xA671C Offset: 0xA671C VA: 0xA671C
	public const RuntimePlatform OSXDashboardPlayer = 4;
	[ObsoleteAttribute] // RVA: 0xA6754 Offset: 0xA6754 VA: 0xA6754
	public const RuntimePlatform WindowsWebPlayer = 5;
	public const RuntimePlatform WindowsEditor = 7;
	public const RuntimePlatform IPhonePlayer = 8;
	[ObsoleteAttribute] // RVA: 0xA678C Offset: 0xA678C VA: 0xA678C
	public const RuntimePlatform XBOX360 = 10;
	[ObsoleteAttribute] // RVA: 0xA67F0 Offset: 0xA67F0 VA: 0xA67F0
	public const RuntimePlatform PS3 = 9;
	public const RuntimePlatform Android = 11;
	[ObsoleteAttribute] // RVA: 0xA6850 Offset: 0xA6850 VA: 0xA6850
	public const RuntimePlatform NaCl = 12;
	[ObsoleteAttribute] // RVA: 0xA68B0 Offset: 0xA68B0 VA: 0xA68B0
	public const RuntimePlatform FlashPlayer = 15;
	public const RuntimePlatform LinuxPlayer = 13;
	public const RuntimePlatform LinuxEditor = 16;
	public const RuntimePlatform WebGLPlayer = 17;
	[ObsoleteAttribute] // RVA: 0xA6918 Offset: 0xA6918 VA: 0xA6918
	public const RuntimePlatform MetroPlayerX86 = 18;
	public const RuntimePlatform WSAPlayerX86 = 18;
	[ObsoleteAttribute] // RVA: 0xA6960 Offset: 0xA6960 VA: 0xA6960
	public const RuntimePlatform MetroPlayerX64 = 19;
	public const RuntimePlatform WSAPlayerX64 = 19;
	[ObsoleteAttribute] // RVA: 0xA69A8 Offset: 0xA69A8 VA: 0xA69A8
	public const RuntimePlatform MetroPlayerARM = 20;
	public const RuntimePlatform WSAPlayerARM = 20;
	[ObsoleteAttribute] // RVA: 0xA69F0 Offset: 0xA69F0 VA: 0xA69F0
	public const RuntimePlatform WP8Player = 21;
	[ObsoleteAttribute] // RVA: 0xA6A40 Offset: 0xA6A40 VA: 0xA6A40
	public const RuntimePlatform BlackBerryPlayer = 22;
	[ObsoleteAttribute] // RVA: 0xA6AAC Offset: 0xA6AAC VA: 0xA6AAC
	public const RuntimePlatform TizenPlayer = 23;
	[ObsoleteAttribute] // RVA: 0xA6B14 Offset: 0xA6B14 VA: 0xA6B14
	public const RuntimePlatform PSP2 = 24;
	public const RuntimePlatform PS4 = 25;
	[ObsoleteAttribute] // RVA: 0xA6B70 Offset: 0xA6B70 VA: 0xA6B70
	public const RuntimePlatform PSM = 26;
	public const RuntimePlatform XboxOne = 27;
	[ObsoleteAttribute] // RVA: 0xA6BD0 Offset: 0xA6BD0 VA: 0xA6BD0
	public const RuntimePlatform SamsungTVPlayer = 28;
	[ObsoleteAttribute] // RVA: 0xA6C3C Offset: 0xA6C3C VA: 0xA6C3C
	public const RuntimePlatform WiiU = 30;
	public const RuntimePlatform tvOS = 31;
	public const RuntimePlatform Switch = 32;
	public const RuntimePlatform Lumin = 33;
}

// Namespace: UnityEngine
public enum LogType // TypeDefIndex: 1341
{
	// Fields
	public int value__; // 0x0
	public const LogType Error = 0;
	public const LogType Assert = 1;
	public const LogType Warning = 2;
	public const LogType Log = 3;
	public const LogType Exception = 4;
}

// Namespace: UnityEngine
internal static class BeforeRenderHelper // TypeDefIndex: 1342
{
	// Fields
	private static List<BeforeRenderHelper.OrderBlock> s_OrderBlocks; // 0x0

	// Methods

	// RVA: 0x312E74 Offset: 0x312E74 VA: 0x312E74
	public static void Invoke() { }

	// RVA: 0x314C00 Offset: 0x314C00 VA: 0x314C00
	private static void .cctor() { }
}

// Namespace: 
private struct BeforeRenderHelper.OrderBlock // TypeDefIndex: 1343
{
	// Fields
	internal int order; // 0x0
	internal UnityAction callback; // 0x4
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA2054 Offset: 0xA2054 VA: 0xA2054
[UsedByNativeCodeAttribute] // RVA: 0xA2054 Offset: 0xA2054 VA: 0xA2054
public class Behaviour : Component // TypeDefIndex: 1344
{
	// Properties
	[NativePropertyAttribute] // RVA: 0xAD05C Offset: 0xAD05C VA: 0xAD05C
	[RequiredByNativeCodeAttribute] // RVA: 0xAD05C Offset: 0xAD05C VA: 0xAD05C
	public bool enabled { get; set; }
	[NativePropertyAttribute] // RVA: 0xAD08C Offset: 0xAD08C VA: 0xAD08C
	public bool isActiveAndEnabled { get; }

	// Methods

	// RVA: 0x314C90 Offset: 0x314C90 VA: 0x314C90
	public void .ctor() { }

	// RVA: 0x314D18 Offset: 0x314D18 VA: 0x314D18
	public bool get_enabled() { }

	// RVA: 0x314DA8 Offset: 0x314DA8 VA: 0x314DA8
	public void set_enabled(bool value) { }

	[NativeMethodAttribute] // RVA: 0xA8FD8 Offset: 0xA8FD8 VA: 0xA8FD8
	// RVA: 0x314E4C Offset: 0x314E4C VA: 0x314E4C
	public bool get_isActiveAndEnabled() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA209C Offset: 0xA209C VA: 0xA209C
internal class BootConfigData // TypeDefIndex: 1345
{
	// Fields
	private IntPtr m_Ptr; // 0x8

	// Methods

	// RVA: 0x314EE4 Offset: 0x314EE4 VA: 0x314EE4
	private void .ctor(IntPtr nativeHandle) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA9018 Offset: 0xA9018 VA: 0xA9018
	// RVA: 0x314FB0 Offset: 0x314FB0 VA: 0x314FB0
	private static BootConfigData WrapBootConfigData(IntPtr nativeHandle) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA20F0 Offset: 0xA20F0 VA: 0xA20F0
[NativeHeaderAttribute] // RVA: 0xA20F0 Offset: 0xA20F0 VA: 0xA20F0
[ThreadAndSerializationSafeAttribute] // RVA: 0xA20F0 Offset: 0xA20F0 VA: 0xA20F0
[RequiredByNativeCodeAttribute] // RVA: 0xA20F0 Offset: 0xA20F0 VA: 0xA20F0
[NativeHeaderAttribute] // RVA: 0xA20F0 Offset: 0xA20F0 VA: 0xA20F0
[NativeHeaderAttribute] // RVA: 0xA20F0 Offset: 0xA20F0 VA: 0xA20F0
[NativeTypeAttribute] // RVA: 0xA20F0 Offset: 0xA20F0 VA: 0xA20F0
[NativeClassAttribute] // RVA: 0xA20F0 Offset: 0xA20F0 VA: 0xA20F0
public struct Bounds : IEquatable<Bounds> // TypeDefIndex: 1346
{
	// Fields
	private Vector3 m_Center; // 0x0
	[NativeNameAttribute] // RVA: 0xA6C98 Offset: 0xA6C98 VA: 0xA6C98
	private Vector3 m_Extents; // 0xC

	// Properties
	public Vector3 center { get; set; }
	public Vector3 size { get; set; }
	public Vector3 extents { get; set; }
	public Vector3 min { get; }
	public Vector3 max { get; }

	// Methods

	// RVA: 0xC90B0 Offset: 0xC90B0 VA: 0xC90B0
	public void .ctor(Vector3 center, Vector3 size) { }

	// RVA: 0xC90E0 Offset: 0xC90E0 VA: 0xC90E0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xC90E8 Offset: 0xC90E8 VA: 0xC90E8 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xC90F0 Offset: 0xC90F0 VA: 0xC90F0 Slot: 4
	public bool Equals(Bounds other) { }

	// RVA: 0xC9120 Offset: 0xC9120 VA: 0xC9120
	public Vector3 get_center() { }

	// RVA: 0xC9134 Offset: 0xC9134 VA: 0xC9134
	public void set_center(Vector3 value) { }

	// RVA: 0xC9140 Offset: 0xC9140 VA: 0xC9140
	public Vector3 get_size() { }

	// RVA: 0xC9154 Offset: 0xC9154 VA: 0xC9154
	public void set_size(Vector3 value) { }

	// RVA: 0xC9170 Offset: 0xC9170 VA: 0xC9170
	public Vector3 get_extents() { }

	// RVA: 0xC9184 Offset: 0xC9184 VA: 0xC9184
	public void set_extents(Vector3 value) { }

	// RVA: 0xC9190 Offset: 0xC9190 VA: 0xC9190
	public Vector3 get_min() { }

	// RVA: 0xC91A4 Offset: 0xC91A4 VA: 0xC91A4
	public Vector3 get_max() { }

	// RVA: 0x315630 Offset: 0x315630 VA: 0x315630
	public static bool op_Equality(Bounds lhs, Bounds rhs) { }

	// RVA: 0x31575C Offset: 0x31575C VA: 0x31575C
	public static bool op_Inequality(Bounds lhs, Bounds rhs) { }

	// RVA: 0xC91B8 Offset: 0xC91B8 VA: 0xC91B8
	public void SetMinMax(Vector3 min, Vector3 max) { }

	// RVA: 0xC91E8 Offset: 0xC91E8 VA: 0xC91E8
	public void Encapsulate(Vector3 point) { }

	// RVA: 0xC9204 Offset: 0xC9204 VA: 0xC9204 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA2274 Offset: 0xA2274 VA: 0xA2274
[NativeHeaderAttribute] // RVA: 0xA2274 Offset: 0xA2274 VA: 0xA2274
[NativeHeaderAttribute] // RVA: 0xA2274 Offset: 0xA2274 VA: 0xA2274
[NativeHeaderAttribute] // RVA: 0xA2274 Offset: 0xA2274 VA: 0xA2274
[NativeHeaderAttribute] // RVA: 0xA2274 Offset: 0xA2274 VA: 0xA2274
[RequireComponent] // RVA: 0xA2274 Offset: 0xA2274 VA: 0xA2274
[NativeHeaderAttribute] // RVA: 0xA2274 Offset: 0xA2274 VA: 0xA2274
[NativeHeaderAttribute] // RVA: 0xA2274 Offset: 0xA2274 VA: 0xA2274
[UsedByNativeCodeAttribute] // RVA: 0xA2274 Offset: 0xA2274 VA: 0xA2274
public sealed class Camera : Behaviour // TypeDefIndex: 1347
{
	// Fields
	public static Camera.CameraCallback onPreCull; // 0x0
	public static Camera.CameraCallback onPreRender; // 0x4
	public static Camera.CameraCallback onPostRender; // 0x8

	// Properties
	[NativePropertyAttribute] // RVA: 0xAD09C Offset: 0xAD09C VA: 0xAD09C
	public float nearClipPlane { get; }
	[NativePropertyAttribute] // RVA: 0xAD0D0 Offset: 0xAD0D0 VA: 0xAD0D0
	public float farClipPlane { get; }
	public float depth { get; }
	public int cullingMask { get; }
	public int eventMask { get; }
	public CameraClearFlags clearFlags { get; }
	[NativePropertyAttribute] // RVA: 0xAD100 Offset: 0xAD100 VA: 0xAD100
	public Rect pixelRect { get; }
	public RenderTexture targetTexture { get; }
	public int targetDisplay { get; }
	public static Camera main { get; }
	public static int allCamerasCount { get; }

	// Methods

	// RVA: 0x315B5C Offset: 0x315B5C VA: 0x315B5C
	public void .ctor() { }

	// RVA: 0x315B60 Offset: 0x315B60 VA: 0x315B60
	public float get_nearClipPlane() { }

	// RVA: 0x315BF0 Offset: 0x315BF0 VA: 0x315BF0
	public float get_farClipPlane() { }

	// RVA: 0x315C80 Offset: 0x315C80 VA: 0x315C80
	public float get_depth() { }

	// RVA: 0x315D08 Offset: 0x315D08 VA: 0x315D08
	public int get_cullingMask() { }

	// RVA: 0x315D98 Offset: 0x315D98 VA: 0x315D98
	public int get_eventMask() { }

	// RVA: 0x315E24 Offset: 0x315E24 VA: 0x315E24
	public CameraClearFlags get_clearFlags() { }

	// RVA: 0x315EB4 Offset: 0x315EB4 VA: 0x315EB4
	public Rect get_pixelRect() { }

	// RVA: 0x315F9C Offset: 0x315F9C VA: 0x315F9C
	public RenderTexture get_targetTexture() { }

	// RVA: 0x31602C Offset: 0x31602C VA: 0x31602C
	public int get_targetDisplay() { }

	// RVA: 0x3160BC Offset: 0x3160BC VA: 0x3160BC
	public Vector3 WorldToScreenPoint(Vector3 position, Camera.MonoOrStereoscopicEye eye) { }

	// RVA: 0x3161B0 Offset: 0x3161B0 VA: 0x3161B0
	public Vector3 WorldToScreenPoint(Vector3 position) { }

	// RVA: 0x316228 Offset: 0x316228 VA: 0x316228
	public Vector3 ScreenToViewportPoint(Vector3 position) { }

	// RVA: 0x31630C Offset: 0x31630C VA: 0x31630C
	private Ray ScreenPointToRay(Vector2 pos, Camera.MonoOrStereoscopicEye eye) { }

	// RVA: 0x316404 Offset: 0x316404 VA: 0x316404
	public Ray ScreenPointToRay(Vector3 pos, Camera.MonoOrStereoscopicEye eye) { }

	// RVA: 0x316534 Offset: 0x316534 VA: 0x316534
	public Ray ScreenPointToRay(Vector3 pos) { }

	[FreeFunctionAttribute] // RVA: 0xA9028 Offset: 0xA9028 VA: 0xA9028
	// RVA: 0x316590 Offset: 0x316590 VA: 0x316590
	internal GameObject RaycastTry(Ray ray, float distance, int layerMask) { }

	[FreeFunctionAttribute] // RVA: 0xA9080 Offset: 0xA9080 VA: 0xA9080
	// RVA: 0x316664 Offset: 0x316664 VA: 0x316664
	internal GameObject RaycastTry2D(Ray ray, float distance, int layerMask) { }

	[FreeFunctionAttribute] // RVA: 0xA90DC Offset: 0xA90DC VA: 0xA90DC
	// RVA: 0x316738 Offset: 0x316738 VA: 0x316738
	public static Camera get_main() { }

	[FreeFunctionAttribute] // RVA: 0xA9118 Offset: 0xA9118 VA: 0xA9118
	// RVA: 0x3167BC Offset: 0x3167BC VA: 0x3167BC
	private static int GetAllCamerasCount() { }

	[FreeFunctionAttribute] // RVA: 0xA9168 Offset: 0xA9168 VA: 0xA9168
	// RVA: 0x31684C Offset: 0x31684C VA: 0x31684C
	private static int GetAllCamerasImpl([Out] Camera[] cam) { }

	// RVA: 0x3168F0 Offset: 0x3168F0 VA: 0x3168F0
	public static int get_allCamerasCount() { }

	// RVA: 0x3168F4 Offset: 0x3168F4 VA: 0x3168F4
	public static int GetAllCameras(Camera[] cameras) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA91B4 Offset: 0xA91B4 VA: 0xA91B4
	// RVA: 0x3169E8 Offset: 0x3169E8 VA: 0x3169E8
	private static void FireOnPreCull(Camera cam) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA91C4 Offset: 0xA91C4 VA: 0xA91C4
	// RVA: 0x316E1C Offset: 0x316E1C VA: 0x316E1C
	private static void FireOnPreRender(Camera cam) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA91D4 Offset: 0xA91D4 VA: 0xA91D4
	// RVA: 0x316E94 Offset: 0x316E94 VA: 0x316E94
	private static void FireOnPostRender(Camera cam) { }

	// RVA: 0x315EEC Offset: 0x315EEC VA: 0x315EEC
	private void get_pixelRect_Injected(out Rect ret) { }

	// RVA: 0x316120 Offset: 0x316120 VA: 0x316120
	private void WorldToScreenPoint_Injected(ref Vector3 position, Camera.MonoOrStereoscopicEye eye, out Vector3 ret) { }

	// RVA: 0x316284 Offset: 0x316284 VA: 0x316284
	private void ScreenToViewportPoint_Injected(ref Vector3 position, out Vector3 ret) { }

	// RVA: 0x316374 Offset: 0x316374 VA: 0x316374
	private void ScreenPointToRay_Injected(ref Vector2 pos, Camera.MonoOrStereoscopicEye eye, out Ray ret) { }

	// RVA: 0x3165D4 Offset: 0x3165D4 VA: 0x3165D4
	private GameObject RaycastTry_Injected(ref Ray ray, float distance, int layerMask) { }

	// RVA: 0x3166A8 Offset: 0x3166A8 VA: 0x3166A8
	private GameObject RaycastTry2D_Injected(ref Ray ray, float distance, int layerMask) { }
}

// Namespace: 
public enum Camera.MonoOrStereoscopicEye // TypeDefIndex: 1348
{
	// Fields
	public int value__; // 0x0
	public const Camera.MonoOrStereoscopicEye Left = 0;
	public const Camera.MonoOrStereoscopicEye Right = 1;
	public const Camera.MonoOrStereoscopicEye Mono = 2;
}

// Namespace: 
public sealed class Camera.CameraCallback : MulticastDelegate // TypeDefIndex: 1349
{
	// Methods

	// RVA: 0x316F0C Offset: 0x316F0C VA: 0x316F0C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x316A60 Offset: 0x316A60 VA: 0x316A60 Slot: 11
	public virtual void Invoke(Camera cam) { }

	// RVA: 0x316F20 Offset: 0x316F20 VA: 0x316F20 Slot: 12
	public virtual IAsyncResult BeginInvoke(Camera cam, AsyncCallback callback, object object) { }

	// RVA: 0x316F4C Offset: 0x316F4C VA: 0x316F4C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
internal struct CastHelper<T> // TypeDefIndex: 1350
{
	// Fields
	public T t; // 0x0
	public IntPtr onePointerFurtherThanT; // 0x0
}

// Namespace: UnityEngine
internal static class ClassLibraryInitializer // TypeDefIndex: 1351
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xA91E4 Offset: 0xA91E4 VA: 0xA91E4
	// RVA: 0x316F58 Offset: 0x316F58 VA: 0x316F58
	private static void Init() { }
}

// Namespace: UnityEngine
internal class LowerResBlitTexture : Object // TypeDefIndex: 1352
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xA91F4 Offset: 0xA91F4 VA: 0xA91F4
	// RVA: 0x32104C Offset: 0x32104C VA: 0x32104C
	internal void LowerResBlitTextureDontStripMe() { }
}

// Namespace: UnityEngine
internal class PreloadData : Object // TypeDefIndex: 1353
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xA9204 Offset: 0xA9204 VA: 0xA9204
	// RVA: 0x2C93A4 Offset: 0x2C93A4 VA: 0x2C93A4
	internal void PreloadDataDontStripMe() { }
}

// Namespace: UnityEngine
[NativeClassAttribute] // RVA: 0xA2478 Offset: 0xA2478 VA: 0xA2478
[RequiredByNativeCodeAttribute] // RVA: 0xA2478 Offset: 0xA2478 VA: 0xA2478
[NativeHeaderAttribute] // RVA: 0xA2478 Offset: 0xA2478 VA: 0xA2478
[DefaultMemberAttribute] // RVA: 0xA2478 Offset: 0xA2478 VA: 0xA2478
public struct Color : IEquatable<Color> // TypeDefIndex: 1354
{
	// Fields
	public float r; // 0x0
	public float g; // 0x4
	public float b; // 0x8
	public float a; // 0xC

	// Properties
	public static Color red { get; }
	public static Color white { get; }
	public static Color black { get; }
	public static Color clear { get; }

	// Methods

	// RVA: 0xC920C Offset: 0xC920C VA: 0xC920C
	public void .ctor(float r, float g, float b, float a) { }

	// RVA: 0xC9220 Offset: 0xC9220 VA: 0xC9220
	public void .ctor(float r, float g, float b) { }

	// RVA: 0xC9230 Offset: 0xC9230 VA: 0xC9230 Slot: 3
	public override string ToString() { }

	// RVA: 0xC9238 Offset: 0xC9238 VA: 0xC9238 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xC9240 Offset: 0xC9240 VA: 0xC9240 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xC9248 Offset: 0xC9248 VA: 0xC9248 Slot: 4
	public bool Equals(Color other) { }

	// RVA: 0x3173B4 Offset: 0x3173B4 VA: 0x3173B4
	public static Color op_Multiply(Color a, float b) { }

	// RVA: 0x3173EC Offset: 0x3173EC VA: 0x3173EC
	public static bool op_Equality(Color lhs, Color rhs) { }

	// RVA: 0x317510 Offset: 0x317510 VA: 0x317510
	public static Color Lerp(Color a, Color b, float t) { }

	// RVA: 0x317668 Offset: 0x317668 VA: 0x317668
	public static Color get_red() { }

	// RVA: 0x317688 Offset: 0x317688 VA: 0x317688
	public static Color get_white() { }

	// RVA: 0x317698 Offset: 0x317698 VA: 0x317698
	public static Color get_black() { }

	// RVA: 0x3176B8 Offset: 0x3176B8 VA: 0x3176B8
	public static Color get_clear() { }

	// RVA: 0x317248 Offset: 0x317248 VA: 0x317248
	public static Vector4 op_Implicit(Color c) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xA2548 Offset: 0xA2548 VA: 0xA2548
public struct Color32 // TypeDefIndex: 1355
{
	// Fields
	[IgnoreAttribute] // RVA: 0xA6CD0 Offset: 0xA6CD0 VA: 0xA6CD0
	private int rgba; // 0x0
	public byte r; // 0x0
	public byte g; // 0x1
	public byte b; // 0x2
	public byte a; // 0x3

	// Methods

	// RVA: 0xC926C Offset: 0xC926C VA: 0xC926C
	public void .ctor(byte r, byte g, byte b, byte a) { }

	// RVA: 0x3176E0 Offset: 0x3176E0 VA: 0x3176E0
	public static Color32 op_Implicit(Color c) { }

	// RVA: 0x317868 Offset: 0x317868 VA: 0x317868
	public static Color op_Implicit(Color32 c) { }

	// RVA: 0xC9284 Offset: 0xC9284 VA: 0xC9284 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA2558 Offset: 0xA2558 VA: 0xA2558
[NativeClassAttribute] // RVA: 0xA2558 Offset: 0xA2558 VA: 0xA2558
[RequiredByNativeCodeAttribute] // RVA: 0xA2558 Offset: 0xA2558 VA: 0xA2558
public class Component : Object // TypeDefIndex: 1356
{
	// Properties
	public Transform transform { get; }
	public GameObject gameObject { get; }

	// Methods

	// RVA: 0x314C94 Offset: 0x314C94 VA: 0x314C94
	public void .ctor() { }

	[FreeFunctionAttribute] // RVA: 0xA9214 Offset: 0xA9214 VA: 0xA9214
	// RVA: 0x317B30 Offset: 0x317B30 VA: 0x317B30
	public Transform get_transform() { }

	[FreeFunctionAttribute] // RVA: 0xA9270 Offset: 0xA9270 VA: 0xA9270
	// RVA: 0x317BC0 Offset: 0x317BC0 VA: 0x317BC0
	public GameObject get_gameObject() { }

	[TypeInferenceRuleAttribute] // RVA: 0xA92BC Offset: 0xA92BC VA: 0xA92BC
	// RVA: 0x317C50 Offset: 0x317C50 VA: 0x317C50
	public Component GetComponent(Type type) { }

	[FreeFunctionAttribute] // RVA: 0xA92D0 Offset: 0xA92D0 VA: 0xA92D0
	// RVA: 0x317D28 Offset: 0x317D28 VA: 0x317D28
	internal void GetComponentFastPath(Type type, IntPtr oneFurtherThanResultValue) { }

	// RVA: -1 Offset: -1
	public T GetComponent<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BBEA0 Offset: 0x5BBEA0 VA: 0x5BBEA0
	|-Component.GetComponent<Animator>
	|-Component.GetComponent<AudioSource>
	|-Component.GetComponent<Camera>
	|-Component.GetComponent<Canvas>
	|-Component.GetComponent<CanvasRenderer>
	|-Component.GetComponent<EventSystem>
	|-Component.GetComponent<RectTransform>
	|-Component.GetComponent<Renderer>
	|-Component.GetComponent<Rigidbody2D>
	|-Component.GetComponent<Transform>
	|-Component.GetComponent<Graphic>
	|-Component.GetComponent<Image>
	|-Component.GetComponent<Mask>
	|-Component.GetComponent<object>
	|-Component.GetComponent<GUILayer>
	*/

	[TypeInferenceRuleAttribute] // RVA: 0xA9310 Offset: 0xA9310 VA: 0xA9310
	// RVA: 0x317DB0 Offset: 0x317DB0 VA: 0x317DB0
	public Component GetComponentInChildren(Type t, bool includeInactive) { }

	[ExcludeFromDocsAttribute] // RVA: 0xA9324 Offset: 0xA9324 VA: 0xA9324
	// RVA: -1 Offset: -1
	public T GetComponentInChildren<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BBF88 Offset: 0x5BBF88 VA: 0x5BBF88
	|-Component.GetComponentInChildren<Toggle>
	|-Component.GetComponentInChildren<object>
	*/

	// RVA: -1 Offset: -1
	public void GetComponentsInChildren<T>(bool includeInactive, List<T> result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5127DC Offset: 0x5127DC VA: 0x5127DC
	|-Component.GetComponentsInChildren<object>
	*/

	// RVA: -1 Offset: -1
	public void GetComponentsInChildren<T>(List<T> results) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x512844 Offset: 0x512844 VA: 0x512844
	|-Component.GetComponentsInChildren<object>
	|-Component.GetComponentsInChildren<Component>
	*/

	[TypeInferenceRuleAttribute] // RVA: 0xA9334 Offset: 0xA9334 VA: 0xA9334
	// RVA: 0x317E74 Offset: 0x317E74 VA: 0x317E74
	public Component GetComponentInParent(Type t) { }

	// RVA: -1 Offset: -1
	public T GetComponentInParent<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BC0E8 Offset: 0x5BC0E8 VA: 0x5BC0E8
	|-Component.GetComponentInParent<Dropdown>
	|-Component.GetComponentInParent<object>
	*/

	// RVA: -1 Offset: -1
	public void GetComponentsInParent<T>(bool includeInactive, List<T> results) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x512888 Offset: 0x512888 VA: 0x512888
	|-Component.GetComponentsInParent<object>
	|-Component.GetComponentsInParent<Canvas>
	|-Component.GetComponentsInParent<RectMask2D>
	*/

	[FreeFunctionAttribute] // RVA: 0xA9348 Offset: 0xA9348 VA: 0xA9348
	// RVA: 0x317F54 Offset: 0x317F54 VA: 0x317F54
	private void GetComponentsForListInternal(Type searchType, object resultList) { }

	// RVA: 0x317FDC Offset: 0x317FDC VA: 0x317FDC
	public void GetComponents(Type type, List<Component> results) { }

	// RVA: -1 Offset: -1
	public void GetComponents<T>(List<T> results) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x512720 Offset: 0x512720 VA: 0x512720
	|-Component.GetComponents<object>
	|-Component.GetComponents<CanvasGroup>
	|-Component.GetComponents<Component>
	|-Component.GetComponents<BaseInputModule>
	|-Component.GetComponents<Mask>
	*/

	// RVA: -1 Offset: -1
	public T[] GetComponents<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BDC58 Offset: 0x5BDC58 VA: 0x5BDC58
	|-Component.GetComponents<BaseInput>
	|-Component.GetComponents<object>
	*/

	// RVA: 0x317FE0 Offset: 0x317FE0 VA: 0x317FE0
	public bool CompareTag(string tag) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA25F0 Offset: 0xA25F0 VA: 0xA25F0
[NativeHeaderAttribute] // RVA: 0xA25F0 Offset: 0xA25F0 VA: 0xA25F0
public sealed class Coroutine : YieldInstruction // TypeDefIndex: 1357
{
	// Fields
	internal IntPtr m_Ptr; // 0x8

	// Methods

	// RVA: 0x318160 Offset: 0x318160 VA: 0x318160
	private void .ctor() { }

	// RVA: 0x318168 Offset: 0x318168 VA: 0x318168 Slot: 1
	protected override void Finalize() { }

	[FreeFunctionAttribute] // RVA: 0xA9388 Offset: 0xA9388 VA: 0xA9388
	// RVA: 0x3181D0 Offset: 0x3181D0 VA: 0x3181D0
	private static void ReleaseCoroutine(IntPtr ptr) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA264C Offset: 0xA264C VA: 0xA264C
internal class SetupCoroutine // TypeDefIndex: 1358
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xA93D8 Offset: 0xA93D8 VA: 0xA93D8
	// RVA: 0x2D2140 Offset: 0x2D2140 VA: 0x2D2140
	public static void InvokeMoveNext(IEnumerator enumerator, IntPtr returnValueAddress) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA93E8 Offset: 0xA93E8 VA: 0xA93E8
	// RVA: 0x2D22AC Offset: 0x2D22AC VA: 0x2D22AC
	public static object InvokeMember(object behaviour, string name, object variable) { }
}

// Namespace: UnityEngine
public struct CullingGroupEvent // TypeDefIndex: 1359
{
	// Fields
	private int m_Index; // 0x0
	private byte m_PrevState; // 0x4
	private byte m_ThisState; // 0x5
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA265C Offset: 0xA265C VA: 0xA265C
public class CullingGroup : IDisposable // TypeDefIndex: 1360
{
	// Fields
	internal IntPtr m_Ptr; // 0x8
	private CullingGroup.StateChanged m_OnStateChanged; // 0xC

	// Methods

	// RVA: 0x318940 Offset: 0x318940 VA: 0x318940 Slot: 1
	protected override void Finalize() { }

	[FreeFunctionAttribute] // RVA: 0xA93F8 Offset: 0xA93F8 VA: 0xA93F8
	// RVA: 0x318A98 Offset: 0x318A98 VA: 0x318A98
	private void DisposeInternal() { }

	// RVA: 0x318B2C Offset: 0x318B2C VA: 0x318B2C Slot: 4
	public void Dispose() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA9454 Offset: 0xA9454 VA: 0xA9454
	// RVA: 0x318B88 Offset: 0x318B88 VA: 0x318B88
	private static void SendEvents(CullingGroup cullingGroup, IntPtr eventsPtr, int count) { }

	[FreeFunctionAttribute] // RVA: 0xA9464 Offset: 0xA9464 VA: 0xA9464
	// RVA: 0x318A00 Offset: 0x318A00 VA: 0x318A00
	private void FinalizerFailure() { }
}

// Namespace: 
public sealed class CullingGroup.StateChanged : MulticastDelegate // TypeDefIndex: 1361
{
	// Methods

	// RVA: 0x318E6C Offset: 0x318E6C VA: 0x318E6C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x318C24 Offset: 0x318C24 VA: 0x318C24 Slot: 11
	public virtual void Invoke(CullingGroupEvent sphere) { }

	// RVA: 0x318E80 Offset: 0x318E80 VA: 0x318E80 Slot: 12
	public virtual IAsyncResult BeginInvoke(CullingGroupEvent sphere, AsyncCallback callback, object object) { }

	// RVA: 0x318F20 Offset: 0x318F20 VA: 0x318F20 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public enum CursorLockMode // TypeDefIndex: 1362
{
	// Fields
	public int value__; // 0x0
	public const CursorLockMode None = 0;
	public const CursorLockMode Locked = 1;
	public const CursorLockMode Confined = 2;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA26B0 Offset: 0xA26B0 VA: 0xA26B0
public class Cursor // TypeDefIndex: 1363
{
	// Properties
	public static CursorLockMode lockState { get; }

	// Methods

	// RVA: 0x318F2C Offset: 0x318F2C VA: 0x318F2C
	public static CursorLockMode get_lockState() { }
}

// Namespace: UnityEngine
public abstract class CustomYieldInstruction : IEnumerator // TypeDefIndex: 1364
{
	// Properties
	public abstract bool keepWaiting { get; }
	public object Current { get; }

	// Methods

	// RVA: 0x318FB4 Offset: 0x318FB4 VA: 0x318FB4
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool get_keepWaiting();

	// RVA: 0x318FBC Offset: 0x318FBC VA: 0x318FBC Slot: 4
	public object get_Current() { }

	// RVA: 0x318FC4 Offset: 0x318FC4 VA: 0x318FC4 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x318FD4 Offset: 0x318FD4 VA: 0x318FD4 Slot: 6
	public void Reset() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA2700 Offset: 0xA2700 VA: 0xA2700
internal sealed class DebugLogHandler : ILogHandler // TypeDefIndex: 1365
{
	// Methods

	// RVA: 0x3198EC Offset: 0x3198EC VA: 0x3198EC
	public void .ctor() { }

	[ThreadAndSerializationSafeAttribute] // RVA: 0xA94D8 Offset: 0xA94D8 VA: 0xA94D8
	// RVA: 0x319924 Offset: 0x319924 VA: 0x319924
	internal static void Internal_Log(LogType level, string msg, Object obj) { }

	[ThreadAndSerializationSafeAttribute] // RVA: 0xA94E8 Offset: 0xA94E8 VA: 0xA94E8
	// RVA: 0x3199AC Offset: 0x3199AC VA: 0x3199AC
	internal static void Internal_LogException(Exception exception, Object obj) { }

	// RVA: 0x319A2C Offset: 0x319A2C VA: 0x319A2C Slot: 4
	public void LogFormat(LogType logType, Object context, string format, object[] args) { }

	// RVA: 0x319AD0 Offset: 0x319AD0 VA: 0x319AD0 Slot: 5
	public void LogException(Exception exception, Object context) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA2734 Offset: 0xA2734 VA: 0xA2734
public class Debug // TypeDefIndex: 1366
{
	// Fields
	internal static ILogger s_Logger; // 0x0

	// Properties
	public static ILogger unityLogger { get; }

	// Methods

	// RVA: 0x318FD8 Offset: 0x318FD8 VA: 0x318FD8
	public static ILogger get_unityLogger() { }

	// RVA: 0x30F3E0 Offset: 0x30F3E0 VA: 0x30F3E0
	public static void Log(object message) { }

	// RVA: 0x319064 Offset: 0x319064 VA: 0x319064
	public static void LogError(object message) { }

	// RVA: 0x319174 Offset: 0x319174 VA: 0x319174
	public static void LogError(object message, Object context) { }

	// RVA: 0x319298 Offset: 0x319298 VA: 0x319298
	public static void LogErrorFormat(Object context, string format, object[] args) { }

	// RVA: 0x312C7C Offset: 0x312C7C VA: 0x312C7C
	public static void LogException(Exception exception) { }

	// RVA: 0x3193C4 Offset: 0x3193C4 VA: 0x3193C4
	public static void LogException(Exception exception, Object context) { }

	// RVA: 0x3194D8 Offset: 0x3194D8 VA: 0x3194D8
	public static void LogWarning(object message) { }

	// RVA: 0x3195E8 Offset: 0x3195E8 VA: 0x3195E8
	public static void LogWarning(object message, Object context) { }

	// RVA: 0x31970C Offset: 0x31970C VA: 0x31970C
	public static void LogWarningFormat(Object context, string format, object[] args) { }

	[ConditionalAttribute] // RVA: 0xA94F8 Offset: 0xA94F8 VA: 0xA94F8
	// RVA: 0x313464 Offset: 0x313464 VA: 0x313464
	public static void LogAssertion(object message) { }

	// RVA: 0x319838 Offset: 0x319838 VA: 0x319838
	private static void .cctor() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xA2768 Offset: 0xA2768 VA: 0xA2768
[NativeHeaderAttribute] // RVA: 0xA2768 Offset: 0xA2768 VA: 0xA2768
public class Display // TypeDefIndex: 1367
{
	// Fields
	internal IntPtr nativeDisplay; // 0x8
	public static Display[] displays; // 0x0
	private static Display _mainDisplay; // 0x4
	[DebuggerBrowsableAttribute] // RVA: 0xA6D00 Offset: 0xA6D00 VA: 0xA6D00
	[CompilerGeneratedAttribute] // RVA: 0xA6D00 Offset: 0xA6D00 VA: 0xA6D00
	private static Display.DisplaysUpdatedDelegate onDisplaysUpdated; // 0x8

	// Properties
	public int renderingWidth { get; }
	public int renderingHeight { get; }
	public int systemWidth { get; }
	public int systemHeight { get; }
	public static Display main { get; }

	// Methods

	// RVA: 0x319B94 Offset: 0x319B94 VA: 0x319B94
	internal void .ctor() { }

	// RVA: 0x319BD4 Offset: 0x319BD4 VA: 0x319BD4
	internal void .ctor(IntPtr nativeDisplay) { }

	// RVA: 0x319BF4 Offset: 0x319BF4 VA: 0x319BF4
	public int get_renderingWidth() { }

	// RVA: 0x319D20 Offset: 0x319D20 VA: 0x319D20
	public int get_renderingHeight() { }

	// RVA: 0x319DC4 Offset: 0x319DC4 VA: 0x319DC4
	public int get_systemWidth() { }

	// RVA: 0x319EF0 Offset: 0x319EF0 VA: 0x319EF0
	public int get_systemHeight() { }

	// RVA: 0x319F94 Offset: 0x319F94 VA: 0x319F94
	public static Vector3 RelativeMouseAt(Vector3 inputMouseCoordinates) { }

	// RVA: 0x31A108 Offset: 0x31A108 VA: 0x31A108
	public static Display get_main() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA952C Offset: 0xA952C VA: 0xA952C
	// RVA: 0x31A194 Offset: 0x31A194 VA: 0x31A194
	private static void RecreateDisplayList(IntPtr[] nativeDisplay) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA953C Offset: 0xA953C VA: 0xA953C
	// RVA: 0x31A414 Offset: 0x31A414 VA: 0x31A414
	private static void FireDisplaysUpdated() { }

	[FreeFunctionAttribute] // RVA: 0xA954C Offset: 0xA954C VA: 0xA954C
	// RVA: 0x319E68 Offset: 0x319E68 VA: 0x319E68
	private static void GetSystemExtImpl(IntPtr nativeDisplay, out int w, out int h) { }

	[FreeFunctionAttribute] // RVA: 0xA95A4 Offset: 0xA95A4 VA: 0xA95A4
	// RVA: 0x319C98 Offset: 0x319C98 VA: 0x319C98
	private static void GetRenderingExtImpl(IntPtr nativeDisplay, out int w, out int h) { }

	[FreeFunctionAttribute] // RVA: 0xA9600 Offset: 0xA9600 VA: 0xA9600
	// RVA: 0x31A078 Offset: 0x31A078 VA: 0x31A078
	private static int RelativeMouseAtImpl(int x, int y, out int rx, out int ry) { }

	// RVA: 0x31A70C Offset: 0x31A70C VA: 0x31A70C
	private static void .cctor() { }
}

// Namespace: 
public sealed class Display.DisplaysUpdatedDelegate : MulticastDelegate // TypeDefIndex: 1368
{
	// Methods

	// RVA: 0x31A890 Offset: 0x31A890 VA: 0x31A890
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x31A4FC Offset: 0x31A4FC VA: 0x31A4FC Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x31A8A4 Offset: 0x31A8A4 VA: 0x31A8A4 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x31A8D0 Offset: 0x31A8D0 VA: 0x31A8D0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xA27CC Offset: 0xA27CC VA: 0xA27CC
[AttributeUsageAttribute] // RVA: 0xA27CC Offset: 0xA27CC VA: 0xA27CC
public class ExcludeFromObjectFactoryAttribute : Attribute // TypeDefIndex: 1369
{
	// Methods

	// RVA: 0x31D294 Offset: 0x31D294 VA: 0x31D294
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA2800 Offset: 0xA2800 VA: 0xA2800
[NativeClassAttribute] // RVA: 0xA2800 Offset: 0xA2800 VA: 0xA2800
[ExcludeFromObjectFactoryAttribute] // RVA: 0xA2800 Offset: 0xA2800 VA: 0xA2800
internal class FailedToLoadScriptObject : Object // TypeDefIndex: 1370
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA2844 Offset: 0xA2844 VA: 0xA2844
[NativeHeaderAttribute] // RVA: 0xA2844 Offset: 0xA2844 VA: 0xA2844
[UsedByNativeCodeAttribute] // RVA: 0xA2844 Offset: 0xA2844 VA: 0xA2844
[Serializable]
public class RectOffset // TypeDefIndex: 1371
{
	// Fields
	[VisibleToOtherModulesAttribute] // RVA: 0xA6D34 Offset: 0xA6D34 VA: 0xA6D34
	internal IntPtr m_Ptr; // 0x8
	private readonly object m_SourceStyle; // 0xC

	// Properties
	[NativePropertyAttribute] // RVA: 0xAD140 Offset: 0xAD140 VA: 0xAD140
	public int left { get; }
	[NativePropertyAttribute] // RVA: 0xAD188 Offset: 0xAD188 VA: 0xAD188
	public int right { get; }
	[NativePropertyAttribute] // RVA: 0xAD1D0 Offset: 0xAD1D0 VA: 0xAD1D0
	public int top { get; }
	[NativePropertyAttribute] // RVA: 0xAD214 Offset: 0xAD214 VA: 0xAD214
	public int bottom { get; }
	public int horizontal { get; }
	public int vertical { get; }

	// Methods

	// RVA: 0x2CB8EC Offset: 0x2CB8EC VA: 0x2CB8EC
	public void .ctor() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xA9650 Offset: 0xA9650 VA: 0xA9650
	// RVA: 0x2CB99C Offset: 0x2CB99C VA: 0x2CB99C
	internal void .ctor(object sourceStyle, IntPtr source) { }

	[ThreadAndSerializationSafeAttribute] // RVA: 0xA96E0 Offset: 0xA96E0 VA: 0xA96E0
	// RVA: 0x2CB90C Offset: 0x2CB90C VA: 0x2CB90C
	private static IntPtr InternalCreate() { }

	[ThreadAndSerializationSafeAttribute] // RVA: 0xA96F0 Offset: 0xA96F0 VA: 0xA96F0
	// RVA: 0x2CB9C4 Offset: 0x2CB9C4 VA: 0x2CB9C4
	private static void InternalDestroy(IntPtr ptr) { }

	// RVA: 0x2CBA64 Offset: 0x2CBA64 VA: 0x2CBA64
	public int get_left() { }

	// RVA: 0x2CBAF0 Offset: 0x2CBAF0 VA: 0x2CBAF0
	public int get_right() { }

	// RVA: 0x2CBB7C Offset: 0x2CBB7C VA: 0x2CBB7C
	public int get_top() { }

	// RVA: 0x2CBC08 Offset: 0x2CBC08 VA: 0x2CBC08
	public int get_bottom() { }

	// RVA: 0x2CBC98 Offset: 0x2CBC98 VA: 0x2CBC98
	public int get_horizontal() { }

	// RVA: 0x2CBD2C Offset: 0x2CBD2C VA: 0x2CBD2C
	public int get_vertical() { }

	// RVA: 0x2CBDBC Offset: 0x2CBDBC VA: 0x2CBDBC Slot: 1
	protected override void Finalize() { }

	// RVA: 0x2CBEA4 Offset: 0x2CBEA4 VA: 0x2CBEA4 Slot: 3
	public override string ToString() { }

	// RVA: 0x2CBE30 Offset: 0x2CBE30 VA: 0x2CBE30
	private void Destroy() { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xA28E8 Offset: 0xA28E8 VA: 0xA28E8
public class GUIElement : Behaviour // TypeDefIndex: 1372
{
	// Methods

	// RVA: 0x31EFB8 Offset: 0x31EFB8 VA: 0x31EFB8
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xA2960 Offset: 0xA2960 VA: 0xA2960
[ObsoleteAttribute] // RVA: 0xA2960 Offset: 0xA2960 VA: 0xA2960
public class GUILayer : Behaviour // TypeDefIndex: 1373
{
	// Methods

	// RVA: 0x31EFBC Offset: 0x31EFBC VA: 0x31EFBC
	public GUIElement HitTest(Vector3 screenPosition) { }

	// RVA: 0x31F004 Offset: 0x31F004 VA: 0x31F004
	private GUIElement HitTest(Vector2 screenPosition) { }

	// RVA: 0x31F020 Offset: 0x31F020 VA: 0x31F020
	private GUIElement HitTest_Injected(ref Vector2 screenPosition) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xA2A00 Offset: 0xA2A00 VA: 0xA2A00
[NativeHeaderAttribute] // RVA: 0xA2A00 Offset: 0xA2A00 VA: 0xA2A00
[ExcludeFromPresetAttribute] // RVA: 0xA2A00 Offset: 0xA2A00 VA: 0xA2A00
public sealed class GameObject : Object // TypeDefIndex: 1374
{
	// Properties
	public Transform transform { get; }
	public int layer { get; set; }
	public bool activeSelf { get; }
	public bool activeInHierarchy { get; }

	// Methods

	// RVA: 0x31F0D0 Offset: 0x31F0D0 VA: 0x31F0D0
	public void .ctor(string name) { }

	// RVA: 0x31F1E4 Offset: 0x31F1E4 VA: 0x31F1E4
	public void .ctor() { }

	// RVA: 0x31F274 Offset: 0x31F274 VA: 0x31F274
	public void .ctor(string name, Type[] components) { }

	// RVA: -1 Offset: -1
	public T GetComponent<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BC6A0 Offset: 0x5BC6A0 VA: 0x5BC6A0
	|-GameObject.GetComponent<BoxCollider2D>
	|-GameObject.GetComponent<Canvas>
	|-GameObject.GetComponent<CanvasGroup>
	|-GameObject.GetComponent<CanvasRenderer>
	|-GameObject.GetComponent<RectTransform>
	|-GameObject.GetComponent<SpriteRenderer>
	|-GameObject.GetComponent<Scrollbar>
	|-GameObject.GetComponent<object>
	*/

	[TypeInferenceRuleAttribute] // RVA: 0xA9700 Offset: 0xA9700 VA: 0xA9700
	[FreeFunctionAttribute] // RVA: 0xA9700 Offset: 0xA9700 VA: 0xA9700
	// RVA: 0x317C84 Offset: 0x317C84 VA: 0x317C84
	public Component GetComponent(Type type) { }

	[FreeFunctionAttribute] // RVA: 0xA979C Offset: 0xA979C VA: 0xA979C
	[NativeWritableSelfAttribute] // RVA: 0xA979C Offset: 0xA979C VA: 0xA979C
	// RVA: 0x31F360 Offset: 0x31F360 VA: 0x31F360
	internal void GetComponentFastPath(Type type, IntPtr oneFurtherThanResultValue) { }

	[FreeFunctionAttribute] // RVA: 0xA9834 Offset: 0xA9834 VA: 0xA9834
	[TypeInferenceRuleAttribute] // RVA: 0xA9834 Offset: 0xA9834 VA: 0xA9834
	// RVA: 0x317DEC Offset: 0x317DEC VA: 0x317DEC
	public Component GetComponentInChildren(Type type, bool includeInactive) { }

	[ExcludeFromDocsAttribute] // RVA: 0xA98D0 Offset: 0xA98D0 VA: 0xA98D0
	// RVA: -1 Offset: -1
	public T GetComponentInChildren<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BC788 Offset: 0x5BC788 VA: 0x5BC788
	|-GameObject.GetComponentInChildren<Rigidbody2D>
	|-GameObject.GetComponentInChildren<Dropdown.DropdownItem>
	|-GameObject.GetComponentInChildren<object>
	*/

	// RVA: -1 Offset: -1
	public T GetComponentInChildren<T>(bool includeInactive) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BC7C4 Offset: 0x5BC7C4 VA: 0x5BC7C4
	|-GameObject.GetComponentInChildren<object>
	*/

	[FreeFunctionAttribute] // RVA: 0xA98E0 Offset: 0xA98E0 VA: 0xA98E0
	[TypeInferenceRuleAttribute] // RVA: 0xA98E0 Offset: 0xA98E0 VA: 0xA98E0
	// RVA: 0x317EA8 Offset: 0x317EA8 VA: 0x317EA8
	public Component GetComponentInParent(Type type) { }

	[FreeFunctionAttribute] // RVA: 0xA997C Offset: 0xA997C VA: 0xA997C
	// RVA: 0x31F3E8 Offset: 0x31F3E8 VA: 0x31F3E8
	private Array GetComponentsInternal(Type type, bool useSearchTypeAsArrayReturnType, bool recursive, bool includeInactive, bool reverse, object resultList) { }

	// RVA: -1 Offset: -1
	public T[] GetComponents<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BDCB0 Offset: 0x5BDCB0 VA: 0x5BDCB0
	|-GameObject.GetComponents<object>
	*/

	// RVA: -1 Offset: -1
	public void GetComponents<T>(List<T> results) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x513814 Offset: 0x513814 VA: 0x513814
	|-GameObject.GetComponents<object>
	|-GameObject.GetComponents<Component>
	*/

	// RVA: -1 Offset: -1
	public void GetComponentsInChildren<T>(bool includeInactive, List<T> results) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5138EC Offset: 0x5138EC VA: 0x5138EC
	|-GameObject.GetComponentsInChildren<object>
	*/

	// RVA: -1 Offset: -1
	public void GetComponentsInParent<T>(bool includeInactive, List<T> results) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5139C4 Offset: 0x5139C4 VA: 0x5139C4
	|-GameObject.GetComponentsInParent<object>
	|-GameObject.GetComponentsInParent<Canvas>
	*/

	[FreeFunctionAttribute] // RVA: 0xA9A00 Offset: 0xA9A00 VA: 0xA9A00
	// RVA: 0x31F490 Offset: 0x31F490 VA: 0x31F490
	private Component Internal_AddComponentWithType(Type componentType) { }

	[TypeInferenceRuleAttribute] // RVA: 0xA9A64 Offset: 0xA9A64 VA: 0xA9A64
	// RVA: 0x31F35C Offset: 0x31F35C VA: 0x31F35C
	public Component AddComponent(Type componentType) { }

	// RVA: -1 Offset: -1
	public T AddComponent<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BC514 Offset: 0x5BC514 VA: 0x5BC514
	|-GameObject.AddComponent<Canvas>
	|-GameObject.AddComponent<BaseInput>
	|-GameObject.AddComponent<RectTransform>
	|-GameObject.AddComponent<Button>
	|-GameObject.AddComponent<Dropdown.DropdownItem>
	|-GameObject.AddComponent<Dropdown>
	|-GameObject.AddComponent<GraphicRaycaster>
	|-GameObject.AddComponent<Image>
	|-GameObject.AddComponent<InputField>
	|-GameObject.AddComponent<LayoutElement>
	|-GameObject.AddComponent<Mask>
	|-GameObject.AddComponent<RawImage>
	|-GameObject.AddComponent<ScrollRect>
	|-GameObject.AddComponent<Scrollbar>
	|-GameObject.AddComponent<Slider>
	|-GameObject.AddComponent<Text>
	|-GameObject.AddComponent<Toggle>
	|-GameObject.AddComponent<object>
	*/

	[FreeFunctionAttribute] // RVA: 0xA9A78 Offset: 0xA9A78 VA: 0xA9A78
	// RVA: 0x31F510 Offset: 0x31F510 VA: 0x31F510
	public Transform get_transform() { }

	// RVA: 0x31F5A0 Offset: 0x31F5A0 VA: 0x31F5A0
	public int get_layer() { }

	// RVA: 0x31F62C Offset: 0x31F62C VA: 0x31F62C
	public void set_layer(int value) { }

	[NativeMethodAttribute] // RVA: 0xA9AD8 Offset: 0xA9AD8 VA: 0xA9AD8
	// RVA: 0x31F6CC Offset: 0x31F6CC VA: 0x31F6CC
	public void SetActive(bool value) { }

	[NativeMethodAttribute] // RVA: 0xA9B20 Offset: 0xA9B20 VA: 0xA9B20
	// RVA: 0x31F770 Offset: 0x31F770 VA: 0x31F770
	public bool get_activeSelf() { }

	[NativeMethodAttribute] // RVA: 0xA9B68 Offset: 0xA9B68 VA: 0xA9B68
	// RVA: 0x31F804 Offset: 0x31F804 VA: 0x31F804
	public bool get_activeInHierarchy() { }

	[FreeFunctionAttribute] // RVA: 0xA9BAC Offset: 0xA9BAC VA: 0xA9BAC
	// RVA: 0x318014 Offset: 0x318014 VA: 0x318014
	public bool CompareTag(string tag) { }

	[FreeFunctionAttribute] // RVA: 0xA9C14 Offset: 0xA9C14 VA: 0xA9C14
	// RVA: 0x31F89C Offset: 0x31F89C VA: 0x31F89C
	public void SendMessage(string methodName, object value, SendMessageOptions options) { }

	[FreeFunctionAttribute] // RVA: 0xA9C7C Offset: 0xA9C7C VA: 0xA9C7C
	// RVA: 0x31F164 Offset: 0x31F164 VA: 0x31F164
	private static void Internal_CreateGameObject(GameObject self, string name) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA2A78 Offset: 0xA2A78 VA: 0xA2A78
[RequiredByNativeCodeAttribute] // RVA: 0xA2A78 Offset: 0xA2A78 VA: 0xA2A78
public class Gradient : IEquatable<Gradient> // TypeDefIndex: 1375
{
	// Fields
	internal IntPtr m_Ptr; // 0x8

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xA9CE4 Offset: 0xA9CE4 VA: 0xA9CE4
	// RVA: 0x31F990 Offset: 0x31F990 VA: 0x31F990
	public void .ctor() { }

	[FreeFunctionAttribute] // RVA: 0xA9CF4 Offset: 0xA9CF4 VA: 0xA9CF4
	// RVA: 0x31F9B0 Offset: 0x31F9B0 VA: 0x31F9B0
	private static IntPtr Init() { }

	[FreeFunctionAttribute] // RVA: 0xA9D54 Offset: 0xA9D54 VA: 0xA9D54
	// RVA: 0x31FA34 Offset: 0x31FA34 VA: 0x31FA34
	private void Cleanup() { }

	[FreeFunctionAttribute] // RVA: 0xA9DC8 Offset: 0xA9DC8 VA: 0xA9DC8
	// RVA: 0x31FABC Offset: 0x31FABC VA: 0x31FABC
	private bool Internal_Equals(IntPtr other) { }

	// RVA: 0x31FB64 Offset: 0x31FB64 VA: 0x31FB64 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x31FBC8 Offset: 0x31FBC8 VA: 0x31FBC8 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x31FD04 Offset: 0x31FD04 VA: 0x31FD04 Slot: 4
	public bool Equals(Gradient other) { }

	// RVA: 0x31FDC4 Offset: 0x31FDC4 VA: 0x31FDC4 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine
[StaticAccessorAttribute] // RVA: 0xA2ADC Offset: 0xA2ADC VA: 0xA2ADC
[NativeHeaderAttribute] // RVA: 0xA2ADC Offset: 0xA2ADC VA: 0xA2ADC
[NativeHeaderAttribute] // RVA: 0xA2ADC Offset: 0xA2ADC VA: 0xA2ADC
public sealed class Screen // TypeDefIndex: 1376
{
	// Properties
	public static int width { get; }
	public static int height { get; }
	public static float dpi { get; }

	// Methods

	[NativeMethodAttribute] // RVA: 0xA9E38 Offset: 0xA9E38 VA: 0xA9E38
	// RVA: 0x2CFDE0 Offset: 0x2CFDE0 VA: 0x2CFDE0
	public static int get_width() { }

	[NativeMethodAttribute] // RVA: 0xA9E8C Offset: 0xA9E8C VA: 0xA9E8C
	// RVA: 0x2CFE64 Offset: 0x2CFE64 VA: 0x2CFE64
	public static int get_height() { }

	[NativeNameAttribute] // RVA: 0xA9EE0 Offset: 0xA9EE0 VA: 0xA9EE0
	// RVA: 0x2CFEEC Offset: 0x2CFEEC VA: 0x2CFEEC
	public static float get_dpi() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA2B90 Offset: 0xA2B90 VA: 0xA2B90
public struct Resolution // TypeDefIndex: 1377
{
	// Fields
	private int m_Width; // 0x0
	private int m_Height; // 0x4
	private int m_RefreshRate; // 0x8

	// Methods

	// RVA: 0xC8208 Offset: 0xC8208 VA: 0xC8208 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
[StaticAccessorAttribute] // RVA: 0xA2BA0 Offset: 0xA2BA0 VA: 0xA2BA0
[NativeHeaderAttribute] // RVA: 0xA2BA0 Offset: 0xA2BA0 VA: 0xA2BA0
[NativeHeaderAttribute] // RVA: 0xA2BA0 Offset: 0xA2BA0 VA: 0xA2BA0
public sealed class QualitySettings : Object // TypeDefIndex: 1378
{
	// Properties
	public static ColorSpace activeColorSpace { get; }

	// Methods

	[NativeNameAttribute] // RVA: 0xA9F14 Offset: 0xA9F14 VA: 0xA9F14
	[StaticAccessorAttribute] // RVA: 0xA9F14 Offset: 0xA9F14 VA: 0xA9F14
	// RVA: 0x2C9E80 Offset: 0x2C9E80 VA: 0x2C9E80
	public static ColorSpace get_activeColorSpace() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA2C58 Offset: 0xA2C58 VA: 0xA2C58
[RequireComponent] // RVA: 0xA2C58 Offset: 0xA2C58 VA: 0xA2C58
[NativeHeaderAttribute] // RVA: 0xA2C58 Offset: 0xA2C58 VA: 0xA2C58
[UsedByNativeCodeAttribute] // RVA: 0xA2C58 Offset: 0xA2C58 VA: 0xA2C58
public class Renderer : Component // TypeDefIndex: 1379
{
	// Properties
	public int sortingLayerID { get; }
	public int sortingOrder { get; }
	public Material material { get; }

	// Methods

	[FreeFunctionAttribute] // RVA: 0xA9F8C Offset: 0xA9F8C VA: 0xA9F8C
	// RVA: 0x2CF39C Offset: 0x2CF39C VA: 0x2CF39C
	private Material GetMaterial() { }

	// RVA: 0x2CF428 Offset: 0x2CF428 VA: 0x2CF428
	public int get_sortingLayerID() { }

	// RVA: 0x2CF4BC Offset: 0x2CF4BC VA: 0x2CF4BC
	public int get_sortingOrder() { }

	// RVA: 0x2CF550 Offset: 0x2CF550 VA: 0x2CF550
	public Material get_material() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA2D44 Offset: 0xA2D44 VA: 0xA2D44
[NativeHeaderAttribute] // RVA: 0xA2D44 Offset: 0xA2D44 VA: 0xA2D44
[NativeHeaderAttribute] // RVA: 0xA2D44 Offset: 0xA2D44 VA: 0xA2D44
[NativeHeaderAttribute] // RVA: 0xA2D44 Offset: 0xA2D44 VA: 0xA2D44
[NativeHeaderAttribute] // RVA: 0xA2D44 Offset: 0xA2D44 VA: 0xA2D44
[NativeHeaderAttribute] // RVA: 0xA2D44 Offset: 0xA2D44 VA: 0xA2D44
public sealed class Shader : Object // TypeDefIndex: 1380
{
	// Methods

	[FreeFunctionAttribute] // RVA: 0xA9FF4 Offset: 0xA9FF4 VA: 0xA9FF4
	// RVA: 0x2D23F8 Offset: 0x2D23F8 VA: 0x2D23F8
	public static int PropertyToID(string name) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA2EAC Offset: 0xA2EAC VA: 0xA2EAC
[NativeHeaderAttribute] // RVA: 0xA2EAC Offset: 0xA2EAC VA: 0xA2EAC
public class Material : Object // TypeDefIndex: 1381
{
	// Properties
	public Texture mainTexture { get; }
	public Vector2 mainTextureOffset { set; }

	// Methods

	// RVA: 0x321560 Offset: 0x321560 VA: 0x321560
	public void .ctor(Shader shader) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAA05C Offset: 0xAA05C VA: 0xAA05C
	// RVA: 0x321674 Offset: 0x321674 VA: 0x321674
	public void .ctor(Material source) { }

	[ObsoleteAttribute] // RVA: 0xAA06C Offset: 0xAA06C VA: 0xAA06C
	[EditorBrowsableAttribute] // RVA: 0xAA06C Offset: 0xAA06C VA: 0xAA06C
	// RVA: 0x321788 Offset: 0x321788 VA: 0x321788
	public void .ctor(string contents) { }

	[FreeFunctionAttribute] // RVA: 0xAA0BC Offset: 0xAA0BC VA: 0xAA0BC
	// RVA: 0x3215F4 Offset: 0x3215F4 VA: 0x3215F4
	private static void CreateWithShader(Material self, Shader shader) { }

	[FreeFunctionAttribute] // RVA: 0xAA10C Offset: 0xAA10C VA: 0xAA10C
	// RVA: 0x321708 Offset: 0x321708 VA: 0x321708
	private static void CreateWithMaterial(Material self, Material source) { }

	[FreeFunctionAttribute] // RVA: 0xAA160 Offset: 0xAA160 VA: 0xAA160
	// RVA: 0x321814 Offset: 0x321814 VA: 0x321814
	private static void CreateWithString(Material self) { }

	// RVA: 0x3218BC Offset: 0x3218BC VA: 0x3218BC
	public Texture get_mainTexture() { }

	// RVA: 0x321954 Offset: 0x321954 VA: 0x321954
	public void set_mainTextureOffset(Vector2 value) { }

	[NativeNameAttribute] // RVA: 0xAA1B0 Offset: 0xAA1B0 VA: 0xAA1B0
	// RVA: 0x321A20 Offset: 0x321A20 VA: 0x321A20
	public bool HasProperty(int nameID) { }

	// RVA: 0x321AC0 Offset: 0x321AC0 VA: 0x321AC0
	public bool HasProperty(string name) { }

	// RVA: 0x321AE8 Offset: 0x321AE8 VA: 0x321AE8
	public void EnableKeyword(string keyword) { }

	// RVA: 0x321B8C Offset: 0x321B8C VA: 0x321B8C
	public void DisableKeyword(string keyword) { }

	[NativeNameAttribute] // RVA: 0xAA1F4 Offset: 0xAA1F4 VA: 0xAA1F4
	// RVA: 0x321C30 Offset: 0x321C30 VA: 0x321C30
	private void SetFloatImpl(int name, float value) { }

	[NativeNameAttribute] // RVA: 0xAA234 Offset: 0xAA234 VA: 0xAA234
	// RVA: 0x321CE8 Offset: 0x321CE8 VA: 0x321CE8
	private Texture GetTextureImpl(int name) { }

	[NativeNameAttribute] // RVA: 0xAA278 Offset: 0xAA278 VA: 0xAA278
	// RVA: 0x321D8C Offset: 0x321D8C VA: 0x321D8C
	private void SetTextureOffsetImpl(int name, Vector2 offset) { }

	// RVA: 0x321E30 Offset: 0x321E30 VA: 0x321E30
	public void SetInt(string name, int value) { }

	// RVA: 0x32192C Offset: 0x32192C VA: 0x32192C
	public Texture GetTexture(string name) { }

	// RVA: 0x3219DC Offset: 0x3219DC VA: 0x3219DC
	public void SetTextureOffset(string name, Vector2 value) { }

	// RVA: 0x321DA8 Offset: 0x321DA8 VA: 0x321DA8
	private void SetTextureOffsetImpl_Injected(int name, ref Vector2 offset) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA2F20 Offset: 0xA2F20 VA: 0xA2F20
[RequireComponent] // RVA: 0xA2F20 Offset: 0xA2F20 VA: 0xA2F20
public sealed class MeshFilter : Component // TypeDefIndex: 1382
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAA2C0 Offset: 0xAA2C0 VA: 0xAA2C0
	// RVA: 0x2C27C8 Offset: 0x2C27C8 VA: 0x2C27C8
	private void DontStripMeshFilter() { }
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0xA2FDC Offset: 0xA2FDC VA: 0xA2FDC
public enum LightmapBakeType // TypeDefIndex: 1383
{
	// Fields
	public int value__; // 0x0
	public const LightmapBakeType Realtime = 4;
	public const LightmapBakeType Baked = 2;
	public const LightmapBakeType Mixed = 1;
}

// Namespace: UnityEngine
public enum MixedLightingMode // TypeDefIndex: 1384
{
	// Fields
	public int value__; // 0x0
	public const MixedLightingMode IndirectOnly = 0;
	public const MixedLightingMode Shadowmask = 2;
	public const MixedLightingMode Subtractive = 1;
}

// Namespace: UnityEngine
public enum CameraClearFlags // TypeDefIndex: 1385
{
	// Fields
	public int value__; // 0x0
	public const CameraClearFlags Skybox = 1;
	public const CameraClearFlags Color = 2;
	public const CameraClearFlags SolidColor = 2;
	public const CameraClearFlags Depth = 3;
	public const CameraClearFlags Nothing = 4;
}

// Namespace: UnityEngine
public enum MeshTopology // TypeDefIndex: 1386
{
	// Fields
	public int value__; // 0x0
	public const MeshTopology Triangles = 0;
	public const MeshTopology Quads = 2;
	public const MeshTopology Lines = 3;
	public const MeshTopology LineStrip = 4;
	public const MeshTopology Points = 5;
}

// Namespace: UnityEngine
public enum ColorSpace // TypeDefIndex: 1387
{
	// Fields
	public int value__; // 0x0
	public const ColorSpace Uninitialized = -1;
	public const ColorSpace Gamma = 0;
	public const ColorSpace Linear = 1;
}

// Namespace: UnityEngine
public enum TextureWrapMode // TypeDefIndex: 1388
{
	// Fields
	public int value__; // 0x0
	public const TextureWrapMode Repeat = 0;
	public const TextureWrapMode Clamp = 1;
	public const TextureWrapMode Mirror = 2;
	public const TextureWrapMode MirrorOnce = 3;
}

// Namespace: UnityEngine
public enum TextureFormat // TypeDefIndex: 1389
{
	// Fields
	public int value__; // 0x0
	public const TextureFormat Alpha8 = 1;
	public const TextureFormat ARGB4444 = 2;
	public const TextureFormat RGB24 = 3;
	public const TextureFormat RGBA32 = 4;
	public const TextureFormat ARGB32 = 5;
	public const TextureFormat RGB565 = 7;
	public const TextureFormat R16 = 9;
	public const TextureFormat DXT1 = 10;
	public const TextureFormat DXT5 = 12;
	public const TextureFormat RGBA4444 = 13;
	public const TextureFormat BGRA32 = 14;
	public const TextureFormat RHalf = 15;
	public const TextureFormat RGHalf = 16;
	public const TextureFormat RGBAHalf = 17;
	public const TextureFormat RFloat = 18;
	public const TextureFormat RGFloat = 19;
	public const TextureFormat RGBAFloat = 20;
	public const TextureFormat YUY2 = 21;
	public const TextureFormat RGB9e5Float = 22;
	public const TextureFormat BC4 = 26;
	public const TextureFormat BC5 = 27;
	public const TextureFormat BC6H = 24;
	public const TextureFormat BC7 = 25;
	public const TextureFormat DXT1Crunched = 28;
	public const TextureFormat DXT5Crunched = 29;
	public const TextureFormat PVRTC_RGB2 = 30;
	public const TextureFormat PVRTC_RGBA2 = 31;
	public const TextureFormat PVRTC_RGB4 = 32;
	public const TextureFormat PVRTC_RGBA4 = 33;
	public const TextureFormat ETC_RGB4 = 34;
	public const TextureFormat EAC_R = 41;
	public const TextureFormat EAC_R_SIGNED = 42;
	public const TextureFormat EAC_RG = 43;
	public const TextureFormat EAC_RG_SIGNED = 44;
	public const TextureFormat ETC2_RGB = 45;
	public const TextureFormat ETC2_RGBA1 = 46;
	public const TextureFormat ETC2_RGBA8 = 47;
	public const TextureFormat ASTC_RGB_4x4 = 48;
	public const TextureFormat ASTC_RGB_5x5 = 49;
	public const TextureFormat ASTC_RGB_6x6 = 50;
	public const TextureFormat ASTC_RGB_8x8 = 51;
	public const TextureFormat ASTC_RGB_10x10 = 52;
	public const TextureFormat ASTC_RGB_12x12 = 53;
	public const TextureFormat ASTC_RGBA_4x4 = 54;
	public const TextureFormat ASTC_RGBA_5x5 = 55;
	public const TextureFormat ASTC_RGBA_6x6 = 56;
	public const TextureFormat ASTC_RGBA_8x8 = 57;
	public const TextureFormat ASTC_RGBA_10x10 = 58;
	public const TextureFormat ASTC_RGBA_12x12 = 59;
	[ObsoleteAttribute] // RVA: 0xA6DC4 Offset: 0xA6DC4 VA: 0xA6DC4
	public const TextureFormat ETC_RGB4_3DS = 60;
	[ObsoleteAttribute] // RVA: 0xA6DF8 Offset: 0xA6DF8 VA: 0xA6DF8
	public const TextureFormat ETC_RGBA8_3DS = 61;
	public const TextureFormat RG16 = 62;
	public const TextureFormat R8 = 63;
	public const TextureFormat ETC_RGB4Crunched = 64;
	public const TextureFormat ETC2_RGBA8Crunched = 65;
}

// Namespace: UnityEngine
public enum RenderTextureFormat // TypeDefIndex: 1390
{
	// Fields
	public int value__; // 0x0
	public const RenderTextureFormat ARGB32 = 0;
	public const RenderTextureFormat Depth = 1;
	public const RenderTextureFormat ARGBHalf = 2;
	public const RenderTextureFormat Shadowmap = 3;
	public const RenderTextureFormat RGB565 = 4;
	public const RenderTextureFormat ARGB4444 = 5;
	public const RenderTextureFormat ARGB1555 = 6;
	public const RenderTextureFormat Default = 7;
	public const RenderTextureFormat ARGB2101010 = 8;
	public const RenderTextureFormat DefaultHDR = 9;
	public const RenderTextureFormat ARGB64 = 10;
	public const RenderTextureFormat ARGBFloat = 11;
	public const RenderTextureFormat RGFloat = 12;
	public const RenderTextureFormat RGHalf = 13;
	public const RenderTextureFormat RFloat = 14;
	public const RenderTextureFormat RHalf = 15;
	public const RenderTextureFormat R8 = 16;
	public const RenderTextureFormat ARGBInt = 17;
	public const RenderTextureFormat RGInt = 18;
	public const RenderTextureFormat RInt = 19;
	public const RenderTextureFormat BGRA32 = 20;
	public const RenderTextureFormat RGB111110Float = 22;
	public const RenderTextureFormat RG32 = 23;
	public const RenderTextureFormat RGBAUShort = 24;
	public const RenderTextureFormat RG16 = 25;
	public const RenderTextureFormat BGRA10101010_XR = 26;
	public const RenderTextureFormat BGR101010_XR = 27;
	public const RenderTextureFormat R16 = 28;
}

// Namespace: UnityEngine
public enum VRTextureUsage // TypeDefIndex: 1391
{
	// Fields
	public int value__; // 0x0
	public const VRTextureUsage None = 0;
	public const VRTextureUsage OneEye = 1;
	public const VRTextureUsage TwoEyes = 2;
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0xA2FEC Offset: 0xA2FEC VA: 0xA2FEC
public enum RenderTextureCreationFlags // TypeDefIndex: 1392
{
	// Fields
	public int value__; // 0x0
	public const RenderTextureCreationFlags MipMap = 1;
	public const RenderTextureCreationFlags AutoGenerateMips = 2;
	public const RenderTextureCreationFlags SRGB = 4;
	public const RenderTextureCreationFlags EyeTexture = 8;
	public const RenderTextureCreationFlags EnableRandomWrite = 16;
	public const RenderTextureCreationFlags CreatedFromScript = 32;
	public const RenderTextureCreationFlags AllowVerticalFlip = 128;
	public const RenderTextureCreationFlags NoResolvedColorSurface = 256;
	public const RenderTextureCreationFlags DynamicallyScalable = 1024;
	public const RenderTextureCreationFlags BindMS = 2048;
}

// Namespace: UnityEngine
public enum RenderTextureReadWrite // TypeDefIndex: 1393
{
	// Fields
	public int value__; // 0x0
	public const RenderTextureReadWrite Default = 0;
	public const RenderTextureReadWrite Linear = 1;
	public const RenderTextureReadWrite sRGB = 2;
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0xA2FFC Offset: 0xA2FFC VA: 0xA2FFC
public enum RenderTextureMemoryless // TypeDefIndex: 1394
{
	// Fields
	public int value__; // 0x0
	public const RenderTextureMemoryless None = 0;
	public const RenderTextureMemoryless Color = 1;
	public const RenderTextureMemoryless Depth = 2;
	public const RenderTextureMemoryless MSAA = 4;
}

// Namespace: UnityEngine.Experimental.Rendering
[FlagsAttribute] // RVA: 0xA300C Offset: 0xA300C VA: 0xA300C
public enum TextureCreationFlags // TypeDefIndex: 1395
{
	// Fields
	public int value__; // 0x0
	public const TextureCreationFlags None = 0;
	public const TextureCreationFlags MipChain = 1;
	public const TextureCreationFlags Crunch = 64;
}

// Namespace: UnityEngine.Experimental.Rendering
public enum FormatUsage // TypeDefIndex: 1396
{
	// Fields
	public int value__; // 0x0
	public const FormatUsage Sample = 0;
	public const FormatUsage Linear = 1;
	public const FormatUsage Render = 3;
	public const FormatUsage Blend = 4;
	public const FormatUsage LoadStore = 8;
	public const FormatUsage MSAA2x = 9;
	public const FormatUsage MSAA4x = 10;
	public const FormatUsage MSAA8x = 11;
}

// Namespace: UnityEngine.Experimental.Rendering
public enum GraphicsFormat // TypeDefIndex: 1397
{
	// Fields
	public int value__; // 0x0
	public const GraphicsFormat None = 0;
	public const GraphicsFormat R8_SRGB = 1;
	public const GraphicsFormat R8G8_SRGB = 2;
	public const GraphicsFormat R8G8B8_SRGB = 3;
	public const GraphicsFormat R8G8B8A8_SRGB = 4;
	public const GraphicsFormat R8_UNorm = 5;
	public const GraphicsFormat R8G8_UNorm = 6;
	public const GraphicsFormat R8G8B8_UNorm = 7;
	public const GraphicsFormat R8G8B8A8_UNorm = 8;
	public const GraphicsFormat R8_SNorm = 9;
	public const GraphicsFormat R8G8_SNorm = 10;
	public const GraphicsFormat R8G8B8_SNorm = 11;
	public const GraphicsFormat R8G8B8A8_SNorm = 12;
	public const GraphicsFormat R8_UInt = 13;
	public const GraphicsFormat R8G8_UInt = 14;
	public const GraphicsFormat R8G8B8_UInt = 15;
	public const GraphicsFormat R8G8B8A8_UInt = 16;
	public const GraphicsFormat R8_SInt = 17;
	public const GraphicsFormat R8G8_SInt = 18;
	public const GraphicsFormat R8G8B8_SInt = 19;
	public const GraphicsFormat R8G8B8A8_SInt = 20;
	public const GraphicsFormat R16_UNorm = 21;
	public const GraphicsFormat R16G16_UNorm = 22;
	public const GraphicsFormat R16G16B16_UNorm = 23;
	public const GraphicsFormat R16G16B16A16_UNorm = 24;
	public const GraphicsFormat R16_SNorm = 25;
	public const GraphicsFormat R16G16_SNorm = 26;
	public const GraphicsFormat R16G16B16_SNorm = 27;
	public const GraphicsFormat R16G16B16A16_SNorm = 28;
	public const GraphicsFormat R16_UInt = 29;
	public const GraphicsFormat R16G16_UInt = 30;
	public const GraphicsFormat R16G16B16_UInt = 31;
	public const GraphicsFormat R16G16B16A16_UInt = 32;
	public const GraphicsFormat R16_SInt = 33;
	public const GraphicsFormat R16G16_SInt = 34;
	public const GraphicsFormat R16G16B16_SInt = 35;
	public const GraphicsFormat R16G16B16A16_SInt = 36;
	public const GraphicsFormat R32_UInt = 37;
	public const GraphicsFormat R32G32_UInt = 38;
	public const GraphicsFormat R32G32B32_UInt = 39;
	public const GraphicsFormat R32G32B32A32_UInt = 40;
	public const GraphicsFormat R32_SInt = 41;
	public const GraphicsFormat R32G32_SInt = 42;
	public const GraphicsFormat R32G32B32_SInt = 43;
	public const GraphicsFormat R32G32B32A32_SInt = 44;
	public const GraphicsFormat R16_SFloat = 45;
	public const GraphicsFormat R16G16_SFloat = 46;
	public const GraphicsFormat R16G16B16_SFloat = 47;
	public const GraphicsFormat R16G16B16A16_SFloat = 48;
	public const GraphicsFormat R32_SFloat = 49;
	public const GraphicsFormat R32G32_SFloat = 50;
	public const GraphicsFormat R32G32B32_SFloat = 51;
	public const GraphicsFormat R32G32B32A32_SFloat = 52;
	public const GraphicsFormat B8G8R8_SRGB = 56;
	public const GraphicsFormat B8G8R8A8_SRGB = 57;
	public const GraphicsFormat B8G8R8_UNorm = 58;
	public const GraphicsFormat B8G8R8A8_UNorm = 59;
	public const GraphicsFormat B8G8R8_SNorm = 60;
	public const GraphicsFormat B8G8R8A8_SNorm = 61;
	public const GraphicsFormat B8G8R8_UInt = 62;
	public const GraphicsFormat B8G8R8A8_UInt = 63;
	public const GraphicsFormat B8G8R8_SInt = 64;
	public const GraphicsFormat B8G8R8A8_SInt = 65;
	public const GraphicsFormat R4G4B4A4_UNormPack16 = 66;
	public const GraphicsFormat B4G4R4A4_UNormPack16 = 67;
	public const GraphicsFormat R5G6B5_UNormPack16 = 68;
	public const GraphicsFormat B5G6R5_UNormPack16 = 69;
	public const GraphicsFormat R5G5B5A1_UNormPack16 = 70;
	public const GraphicsFormat B5G5R5A1_UNormPack16 = 71;
	public const GraphicsFormat A1R5G5B5_UNormPack16 = 72;
	public const GraphicsFormat E5B9G9R9_UFloatPack32 = 73;
	public const GraphicsFormat B10G11R11_UFloatPack32 = 74;
	public const GraphicsFormat A2B10G10R10_UNormPack32 = 75;
	public const GraphicsFormat A2B10G10R10_UIntPack32 = 76;
	public const GraphicsFormat A2B10G10R10_SIntPack32 = 77;
	public const GraphicsFormat A2R10G10B10_UNormPack32 = 78;
	public const GraphicsFormat A2R10G10B10_UIntPack32 = 79;
	public const GraphicsFormat A2R10G10B10_SIntPack32 = 80;
	public const GraphicsFormat A2R10G10B10_XRSRGBPack32 = 81;
	public const GraphicsFormat A2R10G10B10_XRUNormPack32 = 82;
	public const GraphicsFormat R10G10B10_XRSRGBPack32 = 83;
	public const GraphicsFormat R10G10B10_XRUNormPack32 = 84;
	public const GraphicsFormat A10R10G10B10_XRSRGBPack32 = 85;
	public const GraphicsFormat A10R10G10B10_XRUNormPack32 = 86;
	public const GraphicsFormat D16_UNorm = 90;
	public const GraphicsFormat D24_UNorm = 91;
	public const GraphicsFormat D24_UNorm_S8_UInt = 92;
	public const GraphicsFormat D32_SFloat = 93;
	public const GraphicsFormat D32_SFloat_S8_Uint = 94;
	public const GraphicsFormat S8_Uint = 95;
	[EditorBrowsableAttribute] // RVA: 0xA6E2C Offset: 0xA6E2C VA: 0xA6E2C
	[ObsoleteAttribute] // RVA: 0xA6E2C Offset: 0xA6E2C VA: 0xA6E2C
	public const GraphicsFormat RGB_DXT1_SRGB = 96;
	public const GraphicsFormat RGBA_DXT1_SRGB = 96;
	[ObsoleteAttribute] // RVA: 0xA6E7C Offset: 0xA6E7C VA: 0xA6E7C
	[EditorBrowsableAttribute] // RVA: 0xA6E7C Offset: 0xA6E7C VA: 0xA6E7C
	public const GraphicsFormat RGB_DXT1_UNorm = 97;
	public const GraphicsFormat RGBA_DXT1_UNorm = 97;
	public const GraphicsFormat RGBA_DXT3_SRGB = 98;
	public const GraphicsFormat RGBA_DXT3_UNorm = 99;
	public const GraphicsFormat RGBA_DXT5_SRGB = 100;
	public const GraphicsFormat RGBA_DXT5_UNorm = 101;
	public const GraphicsFormat R_BC4_UNorm = 102;
	public const GraphicsFormat R_BC4_SNorm = 103;
	public const GraphicsFormat RG_BC5_UNorm = 104;
	public const GraphicsFormat RG_BC5_SNorm = 105;
	public const GraphicsFormat RGB_BC6H_UFloat = 106;
	public const GraphicsFormat RGB_BC6H_SFloat = 107;
	public const GraphicsFormat RGBA_BC7_SRGB = 108;
	public const GraphicsFormat RGBA_BC7_UNorm = 109;
	public const GraphicsFormat RGB_PVRTC_2Bpp_SRGB = 110;
	public const GraphicsFormat RGB_PVRTC_2Bpp_UNorm = 111;
	public const GraphicsFormat RGB_PVRTC_4Bpp_SRGB = 112;
	public const GraphicsFormat RGB_PVRTC_4Bpp_UNorm = 113;
	public const GraphicsFormat RGBA_PVRTC_2Bpp_SRGB = 114;
	public const GraphicsFormat RGBA_PVRTC_2Bpp_UNorm = 115;
	public const GraphicsFormat RGBA_PVRTC_4Bpp_SRGB = 116;
	public const GraphicsFormat RGBA_PVRTC_4Bpp_UNorm = 117;
	public const GraphicsFormat RGB_ETC_UNorm = 118;
	public const GraphicsFormat RGB_ETC2_SRGB = 119;
	public const GraphicsFormat RGB_ETC2_UNorm = 120;
	public const GraphicsFormat RGB_A1_ETC2_SRGB = 121;
	public const GraphicsFormat RGB_A1_ETC2_UNorm = 122;
	public const GraphicsFormat RGBA_ETC2_SRGB = 123;
	public const GraphicsFormat RGBA_ETC2_UNorm = 124;
	public const GraphicsFormat R_EAC_UNorm = 125;
	public const GraphicsFormat R_EAC_SNorm = 126;
	public const GraphicsFormat RG_EAC_UNorm = 127;
	public const GraphicsFormat RG_EAC_SNorm = 128;
	public const GraphicsFormat RGBA_ASTC4X4_SRGB = 129;
	public const GraphicsFormat RGBA_ASTC4X4_UNorm = 130;
	public const GraphicsFormat RGBA_ASTC5X5_SRGB = 131;
	public const GraphicsFormat RGBA_ASTC5X5_UNorm = 132;
	public const GraphicsFormat RGBA_ASTC6X6_SRGB = 133;
	public const GraphicsFormat RGBA_ASTC6X6_UNorm = 134;
	public const GraphicsFormat RGBA_ASTC8X8_SRGB = 135;
	public const GraphicsFormat RGBA_ASTC8X8_UNorm = 136;
	public const GraphicsFormat RGBA_ASTC10X10_SRGB = 137;
	public const GraphicsFormat RGBA_ASTC10X10_UNorm = 138;
	public const GraphicsFormat RGBA_ASTC12X12_SRGB = 139;
	public const GraphicsFormat RGBA_ASTC12X12_UNorm = 140;
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0xA301C Offset: 0xA301C VA: 0xA301C
public enum LightmapsMode // TypeDefIndex: 1398
{
	// Fields
	public int value__; // 0x0
	public const LightmapsMode NonDirectional = 0;
	public const LightmapsMode CombinedDirectional = 1;
}

// Namespace: UnityEngine.Rendering
[MovedFromAttribute] // RVA: 0xA302C Offset: 0xA302C VA: 0xA302C
public enum VertexAttribute // TypeDefIndex: 1399
{
	// Fields
	public int value__; // 0x0
	public const VertexAttribute Position = 0;
	public const VertexAttribute Normal = 1;
	public const VertexAttribute Tangent = 2;
	public const VertexAttribute Color = 3;
	public const VertexAttribute TexCoord0 = 4;
	public const VertexAttribute TexCoord1 = 5;
	public const VertexAttribute TexCoord2 = 6;
	public const VertexAttribute TexCoord3 = 7;
	public const VertexAttribute TexCoord4 = 8;
	public const VertexAttribute TexCoord5 = 9;
	public const VertexAttribute TexCoord6 = 10;
	public const VertexAttribute TexCoord7 = 11;
	public const VertexAttribute BlendWeight = 12;
	public const VertexAttribute BlendIndices = 13;
}

// Namespace: UnityEngine.Rendering
public enum CompareFunction // TypeDefIndex: 1400
{
	// Fields
	public int value__; // 0x0
	public const CompareFunction Disabled = 0;
	public const CompareFunction Never = 1;
	public const CompareFunction Less = 2;
	public const CompareFunction Equal = 3;
	public const CompareFunction LessEqual = 4;
	public const CompareFunction Greater = 5;
	public const CompareFunction NotEqual = 6;
	public const CompareFunction GreaterEqual = 7;
	public const CompareFunction Always = 8;
}

// Namespace: UnityEngine.Rendering
[FlagsAttribute] // RVA: 0xA307C Offset: 0xA307C VA: 0xA307C
public enum ColorWriteMask // TypeDefIndex: 1401
{
	// Fields
	public int value__; // 0x0
	public const ColorWriteMask Alpha = 1;
	public const ColorWriteMask Blue = 2;
	public const ColorWriteMask Green = 4;
	public const ColorWriteMask Red = 8;
	public const ColorWriteMask All = 15;
}

// Namespace: UnityEngine.Rendering
public enum StencilOp // TypeDefIndex: 1402
{
	// Fields
	public int value__; // 0x0
	public const StencilOp Keep = 0;
	public const StencilOp Zero = 1;
	public const StencilOp Replace = 2;
	public const StencilOp IncrementSaturate = 3;
	public const StencilOp DecrementSaturate = 4;
	public const StencilOp Invert = 5;
	public const StencilOp IncrementWrap = 6;
	public const StencilOp DecrementWrap = 7;
}

// Namespace: UnityEngine.Rendering
public enum ShadowSamplingMode // TypeDefIndex: 1403
{
	// Fields
	public int value__; // 0x0
	public const ShadowSamplingMode CompareDepths = 0;
	public const ShadowSamplingMode RawDepth = 1;
	public const ShadowSamplingMode None = 2;
}

// Namespace: UnityEngine.Rendering
public enum TextureDimension // TypeDefIndex: 1404
{
	// Fields
	public int value__; // 0x0
	public const TextureDimension Unknown = -1;
	public const TextureDimension None = 0;
	public const TextureDimension Any = 1;
	public const TextureDimension Tex2D = 2;
	public const TextureDimension Tex3D = 3;
	public const TextureDimension Cube = 4;
	public const TextureDimension Tex2DArray = 5;
	public const TextureDimension CubeArray = 6;
}

// Namespace: UnityEngine.Experimental.Rendering
[NativeHeaderAttribute] // RVA: 0xA308C Offset: 0xA308C VA: 0xA308C
[NativeHeaderAttribute] // RVA: 0xA308C Offset: 0xA308C VA: 0xA308C
public class GraphicsFormatUtility // TypeDefIndex: 1405
{
	// Methods

	// RVA: 0x318470 Offset: 0x318470 VA: 0x318470
	public static GraphicsFormat GetGraphicsFormat(TextureFormat format, bool isSRGB) { }

	[FreeFunctionAttribute] // RVA: 0xAA2D0 Offset: 0xAA2D0 VA: 0xAA2D0
	// RVA: 0x31D844 Offset: 0x31D844 VA: 0x31D844
	private static GraphicsFormat GetGraphicsFormat_Native_TextureFormat(TextureFormat format, bool isSRGB) { }

	[FreeFunctionAttribute] // RVA: 0xAA2E0 Offset: 0xAA2E0 VA: 0xAA2E0
	// RVA: 0x31D8C4 Offset: 0x31D8C4 VA: 0x31D8C4
	public static bool IsSRGBFormat(GraphicsFormat format) { }

	[FreeFunctionAttribute] // RVA: 0xAA2F0 Offset: 0xAA2F0 VA: 0xAA2F0
	// RVA: 0x31D93C Offset: 0x31D93C VA: 0x31D93C
	public static RenderTextureFormat GetRenderTextureFormat(GraphicsFormat format) { }

	[FreeFunctionAttribute] // RVA: 0xAA300 Offset: 0xAA300 VA: 0xAA300
	// RVA: 0x31D9B4 Offset: 0x31D9B4 VA: 0x31D9B4
	internal static bool IsCompressedTextureFormat(TextureFormat format) { }

	// RVA: 0x318474 Offset: 0x318474 VA: 0x318474
	public static bool IsCrunchFormat(TextureFormat format) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA3108 Offset: 0xA3108 VA: 0xA3108
public class MeshRenderer : Renderer // TypeDefIndex: 1406
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAA34C Offset: 0xAA34C VA: 0xAA34C
	// RVA: 0x2C27CC Offset: 0x2C27CC VA: 0x2C27CC
	private void DontStripMeshRenderer() { }
}

// Namespace: UnityEngine
internal struct TouchScreenKeyboard_InternalConstructorHelperArguments // TypeDefIndex: 1407
{
	// Fields
	public uint keyboardType; // 0x0
	public uint autocorrection; // 0x4
	public uint multiline; // 0x8
	public uint secure; // 0xC
	public uint alert; // 0x10
	public int characterLimit; // 0x14
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA315C Offset: 0xA315C VA: 0xA315C
[NativeHeaderAttribute] // RVA: 0xA315C Offset: 0xA315C VA: 0xA315C
public class TouchScreenKeyboard // TypeDefIndex: 1408
{
	// Fields
	internal IntPtr m_Ptr; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0xA6ECC Offset: 0xA6ECC VA: 0xA6ECC
	[CompilerGeneratedAttribute] // RVA: 0xA6ECC Offset: 0xA6ECC VA: 0xA6ECC
	private readonly bool <canGetSelection>k__BackingField; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0xA6F00 Offset: 0xA6F00 VA: 0xA6F00
	[DebuggerBrowsableAttribute] // RVA: 0xA6F00 Offset: 0xA6F00 VA: 0xA6F00
	private readonly bool <canSetSelection>k__BackingField; // 0xD
	[DebuggerBrowsableAttribute] // RVA: 0xA6F34 Offset: 0xA6F34 VA: 0xA6F34
	[CompilerGeneratedAttribute] // RVA: 0xA6F34 Offset: 0xA6F34 VA: 0xA6F34
	private readonly TouchScreenKeyboardType <type>k__BackingField; // 0x10

	// Properties
	public static bool isSupported { get; }
	public string text { get; set; }
	public static bool hideInput { set; }
	public bool active { get; set; }
	public TouchScreenKeyboard.Status status { get; }
	public int characterLimit { set; }
	public bool canGetSelection { get; }
	public bool canSetSelection { get; }
	public RangeInt selection { get; set; }

	// Methods

	// RVA: 0x2D61B8 Offset: 0x2D61B8 VA: 0x2D61B8
	public void .ctor(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder, int characterLimit) { }

	[FreeFunctionAttribute] // RVA: 0xAA35C Offset: 0xAA35C VA: 0xAA35C
	// RVA: 0x2D6384 Offset: 0x2D6384 VA: 0x2D6384
	private static void Internal_Destroy(IntPtr ptr) { }

	// RVA: 0x2D63FC Offset: 0x2D63FC VA: 0x2D63FC
	private void Destroy() { }

	// RVA: 0x2D647C Offset: 0x2D647C VA: 0x2D647C Slot: 1
	protected override void Finalize() { }

	[FreeFunctionAttribute] // RVA: 0xAA3B4 Offset: 0xAA3B4 VA: 0xAA3B4
	// RVA: 0x2D62FC Offset: 0x2D62FC VA: 0x2D62FC
	private static IntPtr TouchScreenKeyboard_InternalConstructorHelper(ref TouchScreenKeyboard_InternalConstructorHelperArguments arguments, string text, string textPlaceholder) { }

	// RVA: 0x2D64E0 Offset: 0x2D64E0 VA: 0x2D64E0
	public static bool get_isSupported() { }

	// RVA: 0x2D653C Offset: 0x2D653C VA: 0x2D653C
	public static TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder, int characterLimit) { }

	[NativeNameAttribute] // RVA: 0xAA410 Offset: 0xAA410 VA: 0xAA410
	// RVA: 0x2D65EC Offset: 0x2D65EC VA: 0x2D65EC
	public string get_text() { }

	[NativeNameAttribute] // RVA: 0xAA444 Offset: 0xAA444 VA: 0xAA444
	// RVA: 0x2D6680 Offset: 0x2D6680 VA: 0x2D6680
	public void set_text(string value) { }

	[NativeNameAttribute] // RVA: 0xAA478 Offset: 0xAA478 VA: 0xAA478
	// RVA: 0x2D672C Offset: 0x2D672C VA: 0x2D672C
	public static void set_hideInput(bool value) { }

	[NativeNameAttribute] // RVA: 0xAA4B4 Offset: 0xAA4B4 VA: 0xAA4B4
	// RVA: 0x2D67D4 Offset: 0x2D67D4 VA: 0x2D67D4
	public bool get_active() { }

	[NativeNameAttribute] // RVA: 0xAA4EC Offset: 0xAA4EC VA: 0xAA4EC
	// RVA: 0x2D686C Offset: 0x2D686C VA: 0x2D686C
	public void set_active(bool value) { }

	[NativeNameAttribute] // RVA: 0xAA524 Offset: 0xAA524 VA: 0xAA524
	// RVA: 0x2D6918 Offset: 0x2D6918 VA: 0x2D6918
	public TouchScreenKeyboard.Status get_status() { }

	[NativeNameAttribute] // RVA: 0xAA564 Offset: 0xAA564 VA: 0xAA564
	// RVA: 0x2D69B0 Offset: 0x2D69B0 VA: 0x2D69B0
	public void set_characterLimit(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xAA5A4 Offset: 0xAA5A4 VA: 0xAA5A4
	[NativeNameAttribute] // RVA: 0xAA5A4 Offset: 0xAA5A4 VA: 0xAA5A4
	// RVA: 0x2D6A30 Offset: 0x2D6A30 VA: 0x2D6A30
	public bool get_canGetSelection() { }

	[NativeNameAttribute] // RVA: 0xAA5F4 Offset: 0xAA5F4 VA: 0xAA5F4
	[CompilerGeneratedAttribute] // RVA: 0xAA5F4 Offset: 0xAA5F4 VA: 0xAA5F4
	// RVA: 0x2D6A38 Offset: 0x2D6A38 VA: 0x2D6A38
	public bool get_canSetSelection() { }

	// RVA: 0x2D6A40 Offset: 0x2D6A40 VA: 0x2D6A40
	public RangeInt get_selection() { }

	// RVA: 0x2D6AF8 Offset: 0x2D6AF8 VA: 0x2D6AF8
	public void set_selection(RangeInt value) { }

	// RVA: 0x2D6A78 Offset: 0x2D6A78 VA: 0x2D6A78
	private static void GetSelection(out int start, out int length) { }

	// RVA: 0x2D6C00 Offset: 0x2D6C00 VA: 0x2D6C00
	private static void SetSelection(int start, int length) { }
}

// Namespace: 
public enum TouchScreenKeyboard.Status // TypeDefIndex: 1409
{
	// Fields
	public int value__; // 0x0
	public const TouchScreenKeyboard.Status Visible = 0;
	public const TouchScreenKeyboard.Status Done = 1;
	public const TouchScreenKeyboard.Status Canceled = 2;
	public const TouchScreenKeyboard.Status LostFocus = 3;
}

// Namespace: UnityEngine
public enum TouchPhase // TypeDefIndex: 1410
{
	// Fields
	public int value__; // 0x0
	public const TouchPhase Began = 0;
	public const TouchPhase Moved = 1;
	public const TouchPhase Stationary = 2;
	public const TouchPhase Ended = 3;
	public const TouchPhase Canceled = 4;
}

// Namespace: UnityEngine
public enum IMECompositionMode // TypeDefIndex: 1411
{
	// Fields
	public int value__; // 0x0
	public const IMECompositionMode Auto = 0;
	public const IMECompositionMode On = 1;
	public const IMECompositionMode Off = 2;
}

// Namespace: UnityEngine
public enum TouchType // TypeDefIndex: 1412
{
	// Fields
	public int value__; // 0x0
	public const TouchType Direct = 0;
	public const TouchType Indirect = 1;
	public const TouchType Stylus = 2;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA31F4 Offset: 0xA31F4 VA: 0xA31F4
public struct Touch // TypeDefIndex: 1413
{
	// Fields
	private int m_FingerId; // 0x0
	private Vector2 m_Position; // 0x4
	private Vector2 m_RawPosition; // 0xC
	private Vector2 m_PositionDelta; // 0x14
	private float m_TimeDelta; // 0x1C
	private int m_TapCount; // 0x20
	private TouchPhase m_Phase; // 0x24
	private TouchType m_Type; // 0x28
	private float m_Pressure; // 0x2C
	private float m_maximumPossiblePressure; // 0x30
	private float m_Radius; // 0x34
	private float m_RadiusVariance; // 0x38
	private float m_AltitudeAngle; // 0x3C
	private float m_AzimuthAngle; // 0x40

	// Properties
	public int fingerId { get; }
	public Vector2 position { get; }
	public TouchPhase phase { get; }
	public TouchType type { get; }

	// Methods

	// RVA: 0xC831C Offset: 0xC831C VA: 0xC831C
	public int get_fingerId() { }

	// RVA: 0xC8324 Offset: 0xC8324 VA: 0xC8324
	public Vector2 get_position() { }

	// RVA: 0xC8338 Offset: 0xC8338 VA: 0xC8338
	public TouchPhase get_phase() { }

	// RVA: 0xC8340 Offset: 0xC8340 VA: 0xC8340
	public TouchType get_type() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA3228 Offset: 0xA3228 VA: 0xA3228
public class Input // TypeDefIndex: 1414
{
	// Properties
	public static Vector3 mousePosition { get; }
	public static Vector2 mouseScrollDelta { get; }
	public static IMECompositionMode imeCompositionMode { get; set; }
	public static string compositionString { get; }
	public static Vector2 compositionCursorPos { get; set; }
	public static bool mousePresent { get; }
	public static int touchCount { get; }
	public static bool touchSupported { get; }

	// Methods

	[NativeThrowsAttribute] // RVA: 0xAA644 Offset: 0xAA644 VA: 0xAA644
	// RVA: 0x31FDD0 Offset: 0x31FDD0 VA: 0x31FDD0
	public static float GetAxisRaw(string axisName) { }

	[NativeThrowsAttribute] // RVA: 0xAA654 Offset: 0xAA654 VA: 0xAA654
	// RVA: 0x31FE68 Offset: 0x31FE68 VA: 0x31FE68
	public static bool GetButtonDown(string buttonName) { }

	[NativeThrowsAttribute] // RVA: 0xAA664 Offset: 0xAA664 VA: 0xAA664
	// RVA: 0x31FF00 Offset: 0x31FF00 VA: 0x31FF00
	public static bool GetMouseButton(int button) { }

	[NativeThrowsAttribute] // RVA: 0xAA674 Offset: 0xAA674 VA: 0xAA674
	// RVA: 0x31FF98 Offset: 0x31FF98 VA: 0x31FF98
	public static bool GetMouseButtonDown(int button) { }

	[NativeThrowsAttribute] // RVA: 0xAA684 Offset: 0xAA684 VA: 0xAA684
	// RVA: 0x320034 Offset: 0x320034 VA: 0x320034
	public static bool GetMouseButtonUp(int button) { }

	[NativeThrowsAttribute] // RVA: 0xAA694 Offset: 0xAA694 VA: 0xAA694
	// RVA: 0x3200D0 Offset: 0x3200D0 VA: 0x3200D0
	public static Touch GetTouch(int index) { }

	// RVA: 0x320198 Offset: 0x320198 VA: 0x320198
	public static Vector3 get_mousePosition() { }

	// RVA: 0x320250 Offset: 0x320250 VA: 0x320250
	public static Vector2 get_mouseScrollDelta() { }

	// RVA: 0x3202FC Offset: 0x3202FC VA: 0x3202FC
	public static IMECompositionMode get_imeCompositionMode() { }

	// RVA: 0x32038C Offset: 0x32038C VA: 0x32038C
	public static void set_imeCompositionMode(IMECompositionMode value) { }

	// RVA: 0x320404 Offset: 0x320404 VA: 0x320404
	public static string get_compositionString() { }

	// RVA: 0x320494 Offset: 0x320494 VA: 0x320494
	public static Vector2 get_compositionCursorPos() { }

	// RVA: 0x320540 Offset: 0x320540 VA: 0x320540
	public static void set_compositionCursorPos(Vector2 value) { }

	[FreeFunctionAttribute] // RVA: 0xAA6A4 Offset: 0xAA6A4 VA: 0xAA6A4
	// RVA: 0x3205D4 Offset: 0x3205D4 VA: 0x3205D4
	public static bool get_mousePresent() { }

	[FreeFunctionAttribute] // RVA: 0xAA6E0 Offset: 0xAA6E0 VA: 0xAA6E0
	// RVA: 0x320660 Offset: 0x320660 VA: 0x320660
	public static int get_touchCount() { }

	[FreeFunctionAttribute] // RVA: 0xAA71C Offset: 0xAA71C VA: 0xAA71C
	// RVA: 0x3206E8 Offset: 0x3206E8 VA: 0x3206E8
	public static bool get_touchSupported() { }

	// RVA: 0x320118 Offset: 0x320118 VA: 0x320118
	private static void GetTouch_Injected(int index, out Touch ret) { }

	// RVA: 0x3201D8 Offset: 0x3201D8 VA: 0x3201D8
	private static void get_mousePosition_Injected(out Vector3 ret) { }

	// RVA: 0x320284 Offset: 0x320284 VA: 0x320284
	private static void get_mouseScrollDelta_Injected(out Vector2 ret) { }

	// RVA: 0x3204C8 Offset: 0x3204C8 VA: 0x3204C8
	private static void get_compositionCursorPos_Injected(out Vector2 ret) { }

	// RVA: 0x32055C Offset: 0x32055C VA: 0x32055C
	private static void set_compositionCursorPos_Injected(ref Vector2 value) { }
}

// Namespace: UnityEngine
public enum KeyCode // TypeDefIndex: 1415
{
	// Fields
	public int value__; // 0x0
	public const KeyCode None = 0;
	public const KeyCode Backspace = 8;
	public const KeyCode Delete = 127;
	public const KeyCode Tab = 9;
	public const KeyCode Clear = 12;
	public const KeyCode Return = 13;
	public const KeyCode Pause = 19;
	public const KeyCode Escape = 27;
	public const KeyCode Space = 32;
	public const KeyCode Keypad0 = 256;
	public const KeyCode Keypad1 = 257;
	public const KeyCode Keypad2 = 258;
	public const KeyCode Keypad3 = 259;
	public const KeyCode Keypad4 = 260;
	public const KeyCode Keypad5 = 261;
	public const KeyCode Keypad6 = 262;
	public const KeyCode Keypad7 = 263;
	public const KeyCode Keypad8 = 264;
	public const KeyCode Keypad9 = 265;
	public const KeyCode KeypadPeriod = 266;
	public const KeyCode KeypadDivide = 267;
	public const KeyCode KeypadMultiply = 268;
	public const KeyCode KeypadMinus = 269;
	public const KeyCode KeypadPlus = 270;
	public const KeyCode KeypadEnter = 271;
	public const KeyCode KeypadEquals = 272;
	public const KeyCode UpArrow = 273;
	public const KeyCode DownArrow = 274;
	public const KeyCode RightArrow = 275;
	public const KeyCode LeftArrow = 276;
	public const KeyCode Insert = 277;
	public const KeyCode Home = 278;
	public const KeyCode End = 279;
	public const KeyCode PageUp = 280;
	public const KeyCode PageDown = 281;
	public const KeyCode F1 = 282;
	public const KeyCode F2 = 283;
	public const KeyCode F3 = 284;
	public const KeyCode F4 = 285;
	public const KeyCode F5 = 286;
	public const KeyCode F6 = 287;
	public const KeyCode F7 = 288;
	public const KeyCode F8 = 289;
	public const KeyCode F9 = 290;
	public const KeyCode F10 = 291;
	public const KeyCode F11 = 292;
	public const KeyCode F12 = 293;
	public const KeyCode F13 = 294;
	public const KeyCode F14 = 295;
	public const KeyCode F15 = 296;
	public const KeyCode Alpha0 = 48;
	public const KeyCode Alpha1 = 49;
	public const KeyCode Alpha2 = 50;
	public const KeyCode Alpha3 = 51;
	public const KeyCode Alpha4 = 52;
	public const KeyCode Alpha5 = 53;
	public const KeyCode Alpha6 = 54;
	public const KeyCode Alpha7 = 55;
	public const KeyCode Alpha8 = 56;
	public const KeyCode Alpha9 = 57;
	public const KeyCode Exclaim = 33;
	public const KeyCode DoubleQuote = 34;
	public const KeyCode Hash = 35;
	public const KeyCode Dollar = 36;
	public const KeyCode Percent = 37;
	public const KeyCode Ampersand = 38;
	public const KeyCode Quote = 39;
	public const KeyCode LeftParen = 40;
	public const KeyCode RightParen = 41;
	public const KeyCode Asterisk = 42;
	public const KeyCode Plus = 43;
	public const KeyCode Comma = 44;
	public const KeyCode Minus = 45;
	public const KeyCode Period = 46;
	public const KeyCode Slash = 47;
	public const KeyCode Colon = 58;
	public const KeyCode Semicolon = 59;
	public const KeyCode Less = 60;
	public const KeyCode Equals = 61;
	public const KeyCode Greater = 62;
	public const KeyCode Question = 63;
	public const KeyCode At = 64;
	public const KeyCode LeftBracket = 91;
	public const KeyCode Backslash = 92;
	public const KeyCode RightBracket = 93;
	public const KeyCode Caret = 94;
	public const KeyCode Underscore = 95;
	public const KeyCode BackQuote = 96;
	public const KeyCode A = 97;
	public const KeyCode B = 98;
	public const KeyCode C = 99;
	public const KeyCode D = 100;
	public const KeyCode E = 101;
	public const KeyCode F = 102;
	public const KeyCode G = 103;
	public const KeyCode H = 104;
	public const KeyCode I = 105;
	public const KeyCode J = 106;
	public const KeyCode K = 107;
	public const KeyCode L = 108;
	public const KeyCode M = 109;
	public const KeyCode N = 110;
	public const KeyCode O = 111;
	public const KeyCode P = 112;
	public const KeyCode Q = 113;
	public const KeyCode R = 114;
	public const KeyCode S = 115;
	public const KeyCode T = 116;
	public const KeyCode U = 117;
	public const KeyCode V = 118;
	public const KeyCode W = 119;
	public const KeyCode X = 120;
	public const KeyCode Y = 121;
	public const KeyCode Z = 122;
	public const KeyCode LeftCurlyBracket = 123;
	public const KeyCode Pipe = 124;
	public const KeyCode RightCurlyBracket = 125;
	public const KeyCode Tilde = 126;
	public const KeyCode Numlock = 300;
	public const KeyCode CapsLock = 301;
	public const KeyCode ScrollLock = 302;
	public const KeyCode RightShift = 303;
	public const KeyCode LeftShift = 304;
	public const KeyCode RightControl = 305;
	public const KeyCode LeftControl = 306;
	public const KeyCode RightAlt = 307;
	public const KeyCode LeftAlt = 308;
	public const KeyCode LeftCommand = 310;
	public const KeyCode LeftApple = 310;
	public const KeyCode LeftWindows = 311;
	public const KeyCode RightCommand = 309;
	public const KeyCode RightApple = 309;
	public const KeyCode RightWindows = 312;
	public const KeyCode AltGr = 313;
	public const KeyCode Help = 315;
	public const KeyCode Print = 316;
	public const KeyCode SysReq = 317;
	public const KeyCode Break = 318;
	public const KeyCode Menu = 319;
	public const KeyCode Mouse0 = 323;
	public const KeyCode Mouse1 = 324;
	public const KeyCode Mouse2 = 325;
	public const KeyCode Mouse3 = 326;
	public const KeyCode Mouse4 = 327;
	public const KeyCode Mouse5 = 328;
	public const KeyCode Mouse6 = 329;
	public const KeyCode JoystickButton0 = 330;
	public const KeyCode JoystickButton1 = 331;
	public const KeyCode JoystickButton2 = 332;
	public const KeyCode JoystickButton3 = 333;
	public const KeyCode JoystickButton4 = 334;
	public const KeyCode JoystickButton5 = 335;
	public const KeyCode JoystickButton6 = 336;
	public const KeyCode JoystickButton7 = 337;
	public const KeyCode JoystickButton8 = 338;
	public const KeyCode JoystickButton9 = 339;
	public const KeyCode JoystickButton10 = 340;
	public const KeyCode JoystickButton11 = 341;
	public const KeyCode JoystickButton12 = 342;
	public const KeyCode JoystickButton13 = 343;
	public const KeyCode JoystickButton14 = 344;
	public const KeyCode JoystickButton15 = 345;
	public const KeyCode JoystickButton16 = 346;
	public const KeyCode JoystickButton17 = 347;
	public const KeyCode JoystickButton18 = 348;
	public const KeyCode JoystickButton19 = 349;
	public const KeyCode Joystick1Button0 = 350;
	public const KeyCode Joystick1Button1 = 351;
	public const KeyCode Joystick1Button2 = 352;
	public const KeyCode Joystick1Button3 = 353;
	public const KeyCode Joystick1Button4 = 354;
	public const KeyCode Joystick1Button5 = 355;
	public const KeyCode Joystick1Button6 = 356;
	public const KeyCode Joystick1Button7 = 357;
	public const KeyCode Joystick1Button8 = 358;
	public const KeyCode Joystick1Button9 = 359;
	public const KeyCode Joystick1Button10 = 360;
	public const KeyCode Joystick1Button11 = 361;
	public const KeyCode Joystick1Button12 = 362;
	public const KeyCode Joystick1Button13 = 363;
	public const KeyCode Joystick1Button14 = 364;
	public const KeyCode Joystick1Button15 = 365;
	public const KeyCode Joystick1Button16 = 366;
	public const KeyCode Joystick1Button17 = 367;
	public const KeyCode Joystick1Button18 = 368;
	public const KeyCode Joystick1Button19 = 369;
	public const KeyCode Joystick2Button0 = 370;
	public const KeyCode Joystick2Button1 = 371;
	public const KeyCode Joystick2Button2 = 372;
	public const KeyCode Joystick2Button3 = 373;
	public const KeyCode Joystick2Button4 = 374;
	public const KeyCode Joystick2Button5 = 375;
	public const KeyCode Joystick2Button6 = 376;
	public const KeyCode Joystick2Button7 = 377;
	public const KeyCode Joystick2Button8 = 378;
	public const KeyCode Joystick2Button9 = 379;
	public const KeyCode Joystick2Button10 = 380;
	public const KeyCode Joystick2Button11 = 381;
	public const KeyCode Joystick2Button12 = 382;
	public const KeyCode Joystick2Button13 = 383;
	public const KeyCode Joystick2Button14 = 384;
	public const KeyCode Joystick2Button15 = 385;
	public const KeyCode Joystick2Button16 = 386;
	public const KeyCode Joystick2Button17 = 387;
	public const KeyCode Joystick2Button18 = 388;
	public const KeyCode Joystick2Button19 = 389;
	public const KeyCode Joystick3Button0 = 390;
	public const KeyCode Joystick3Button1 = 391;
	public const KeyCode Joystick3Button2 = 392;
	public const KeyCode Joystick3Button3 = 393;
	public const KeyCode Joystick3Button4 = 394;
	public const KeyCode Joystick3Button5 = 395;
	public const KeyCode Joystick3Button6 = 396;
	public const KeyCode Joystick3Button7 = 397;
	public const KeyCode Joystick3Button8 = 398;
	public const KeyCode Joystick3Button9 = 399;
	public const KeyCode Joystick3Button10 = 400;
	public const KeyCode Joystick3Button11 = 401;
	public const KeyCode Joystick3Button12 = 402;
	public const KeyCode Joystick3Button13 = 403;
	public const KeyCode Joystick3Button14 = 404;
	public const KeyCode Joystick3Button15 = 405;
	public const KeyCode Joystick3Button16 = 406;
	public const KeyCode Joystick3Button17 = 407;
	public const KeyCode Joystick3Button18 = 408;
	public const KeyCode Joystick3Button19 = 409;
	public const KeyCode Joystick4Button0 = 410;
	public const KeyCode Joystick4Button1 = 411;
	public const KeyCode Joystick4Button2 = 412;
	public const KeyCode Joystick4Button3 = 413;
	public const KeyCode Joystick4Button4 = 414;
	public const KeyCode Joystick4Button5 = 415;
	public const KeyCode Joystick4Button6 = 416;
	public const KeyCode Joystick4Button7 = 417;
	public const KeyCode Joystick4Button8 = 418;
	public const KeyCode Joystick4Button9 = 419;
	public const KeyCode Joystick4Button10 = 420;
	public const KeyCode Joystick4Button11 = 421;
	public const KeyCode Joystick4Button12 = 422;
	public const KeyCode Joystick4Button13 = 423;
	public const KeyCode Joystick4Button14 = 424;
	public const KeyCode Joystick4Button15 = 425;
	public const KeyCode Joystick4Button16 = 426;
	public const KeyCode Joystick4Button17 = 427;
	public const KeyCode Joystick4Button18 = 428;
	public const KeyCode Joystick4Button19 = 429;
	public const KeyCode Joystick5Button0 = 430;
	public const KeyCode Joystick5Button1 = 431;
	public const KeyCode Joystick5Button2 = 432;
	public const KeyCode Joystick5Button3 = 433;
	public const KeyCode Joystick5Button4 = 434;
	public const KeyCode Joystick5Button5 = 435;
	public const KeyCode Joystick5Button6 = 436;
	public const KeyCode Joystick5Button7 = 437;
	public const KeyCode Joystick5Button8 = 438;
	public const KeyCode Joystick5Button9 = 439;
	public const KeyCode Joystick5Button10 = 440;
	public const KeyCode Joystick5Button11 = 441;
	public const KeyCode Joystick5Button12 = 442;
	public const KeyCode Joystick5Button13 = 443;
	public const KeyCode Joystick5Button14 = 444;
	public const KeyCode Joystick5Button15 = 445;
	public const KeyCode Joystick5Button16 = 446;
	public const KeyCode Joystick5Button17 = 447;
	public const KeyCode Joystick5Button18 = 448;
	public const KeyCode Joystick5Button19 = 449;
	public const KeyCode Joystick6Button0 = 450;
	public const KeyCode Joystick6Button1 = 451;
	public const KeyCode Joystick6Button2 = 452;
	public const KeyCode Joystick6Button3 = 453;
	public const KeyCode Joystick6Button4 = 454;
	public const KeyCode Joystick6Button5 = 455;
	public const KeyCode Joystick6Button6 = 456;
	public const KeyCode Joystick6Button7 = 457;
	public const KeyCode Joystick6Button8 = 458;
	public const KeyCode Joystick6Button9 = 459;
	public const KeyCode Joystick6Button10 = 460;
	public const KeyCode Joystick6Button11 = 461;
	public const KeyCode Joystick6Button12 = 462;
	public const KeyCode Joystick6Button13 = 463;
	public const KeyCode Joystick6Button14 = 464;
	public const KeyCode Joystick6Button15 = 465;
	public const KeyCode Joystick6Button16 = 466;
	public const KeyCode Joystick6Button17 = 467;
	public const KeyCode Joystick6Button18 = 468;
	public const KeyCode Joystick6Button19 = 469;
	public const KeyCode Joystick7Button0 = 470;
	public const KeyCode Joystick7Button1 = 471;
	public const KeyCode Joystick7Button2 = 472;
	public const KeyCode Joystick7Button3 = 473;
	public const KeyCode Joystick7Button4 = 474;
	public const KeyCode Joystick7Button5 = 475;
	public const KeyCode Joystick7Button6 = 476;
	public const KeyCode Joystick7Button7 = 477;
	public const KeyCode Joystick7Button8 = 478;
	public const KeyCode Joystick7Button9 = 479;
	public const KeyCode Joystick7Button10 = 480;
	public const KeyCode Joystick7Button11 = 481;
	public const KeyCode Joystick7Button12 = 482;
	public const KeyCode Joystick7Button13 = 483;
	public const KeyCode Joystick7Button14 = 484;
	public const KeyCode Joystick7Button15 = 485;
	public const KeyCode Joystick7Button16 = 486;
	public const KeyCode Joystick7Button17 = 487;
	public const KeyCode Joystick7Button18 = 488;
	public const KeyCode Joystick7Button19 = 489;
	public const KeyCode Joystick8Button0 = 490;
	public const KeyCode Joystick8Button1 = 491;
	public const KeyCode Joystick8Button2 = 492;
	public const KeyCode Joystick8Button3 = 493;
	public const KeyCode Joystick8Button4 = 494;
	public const KeyCode Joystick8Button5 = 495;
	public const KeyCode Joystick8Button6 = 496;
	public const KeyCode Joystick8Button7 = 497;
	public const KeyCode Joystick8Button8 = 498;
	public const KeyCode Joystick8Button9 = 499;
	public const KeyCode Joystick8Button10 = 500;
	public const KeyCode Joystick8Button11 = 501;
	public const KeyCode Joystick8Button12 = 502;
	public const KeyCode Joystick8Button13 = 503;
	public const KeyCode Joystick8Button14 = 504;
	public const KeyCode Joystick8Button15 = 505;
	public const KeyCode Joystick8Button16 = 506;
	public const KeyCode Joystick8Button17 = 507;
	public const KeyCode Joystick8Button18 = 508;
	public const KeyCode Joystick8Button19 = 509;
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA325C Offset: 0xA325C VA: 0xA325C
[NativeHeaderAttribute] // RVA: 0xA325C Offset: 0xA325C VA: 0xA325C
[NativeHeaderAttribute] // RVA: 0xA325C Offset: 0xA325C VA: 0xA325C
[NativeClassAttribute] // RVA: 0xA325C Offset: 0xA325C VA: 0xA325C
public struct LayerMask // TypeDefIndex: 1416
{
	// Fields
	[NativeNameAttribute] // RVA: 0xA6F68 Offset: 0xA6F68 VA: 0xA6F68
	private int m_Mask; // 0x0

	// Methods

	// RVA: 0x3208C4 Offset: 0x3208C4 VA: 0x3208C4
	public static int op_Implicit(LayerMask mask) { }

	// RVA: 0x3208C8 Offset: 0x3208C8 VA: 0x3208C8
	public static LayerMask op_Implicit(int intVal) { }
}

// Namespace: UnityEngine
internal static class ManagedStreamHelpers // TypeDefIndex: 1417
{
	// Methods

	// RVA: 0x321050 Offset: 0x321050 VA: 0x321050
	internal static void ValidateLoadFromStream(Stream stream) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAA75C Offset: 0xAA75C VA: 0xAA75C
	// RVA: 0x3211E8 Offset: 0x3211E8 VA: 0x3211E8
	internal static void ManagedStreamRead(byte[] buffer, int offset, int count, Stream stream, IntPtr returnValueAddress) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAA76C Offset: 0xAA76C VA: 0xAA76C
	// RVA: 0x32131C Offset: 0x32131C VA: 0x32131C
	internal static void ManagedStreamSeek(long offset, uint origin, Stream stream, IntPtr returnValueAddress) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAA77C Offset: 0xAA77C VA: 0xAA77C
	// RVA: 0x321450 Offset: 0x321450 VA: 0x321450
	internal static void ManagedStreamLength(Stream stream, IntPtr returnValueAddress) { }
}

// Namespace: UnityEngine
[DefaultMemberAttribute] // RVA: 0xA3358 Offset: 0xA3358 VA: 0xA3358
[ThreadAndSerializationSafeAttribute] // RVA: 0xA3358 Offset: 0xA3358 VA: 0xA3358
[RequiredByNativeCodeAttribute] // RVA: 0xA3358 Offset: 0xA3358 VA: 0xA3358
[NativeClassAttribute] // RVA: 0xA3358 Offset: 0xA3358 VA: 0xA3358
[NativeHeaderAttribute] // RVA: 0xA3358 Offset: 0xA3358 VA: 0xA3358
[NativeTypeAttribute] // RVA: 0xA3358 Offset: 0xA3358 VA: 0xA3358
public struct Matrix4x4 : IEquatable<Matrix4x4> // TypeDefIndex: 1418
{
	// Fields
	[NativeNameAttribute] // RVA: 0xA6F9C Offset: 0xA6F9C VA: 0xA6F9C
	public float m00; // 0x0
	[NativeNameAttribute] // RVA: 0xA6FD4 Offset: 0xA6FD4 VA: 0xA6FD4
	public float m10; // 0x4
	[NativeNameAttribute] // RVA: 0xA700C Offset: 0xA700C VA: 0xA700C
	public float m20; // 0x8
	[NativeNameAttribute] // RVA: 0xA7044 Offset: 0xA7044 VA: 0xA7044
	public float m30; // 0xC
	[NativeNameAttribute] // RVA: 0xA707C Offset: 0xA707C VA: 0xA707C
	public float m01; // 0x10
	[NativeNameAttribute] // RVA: 0xA70B4 Offset: 0xA70B4 VA: 0xA70B4
	public float m11; // 0x14
	[NativeNameAttribute] // RVA: 0xA70EC Offset: 0xA70EC VA: 0xA70EC
	public float m21; // 0x18
	[NativeNameAttribute] // RVA: 0xA7124 Offset: 0xA7124 VA: 0xA7124
	public float m31; // 0x1C
	[NativeNameAttribute] // RVA: 0xA715C Offset: 0xA715C VA: 0xA715C
	public float m02; // 0x20
	[NativeNameAttribute] // RVA: 0xA7194 Offset: 0xA7194 VA: 0xA7194
	public float m12; // 0x24
	[NativeNameAttribute] // RVA: 0xA71CC Offset: 0xA71CC VA: 0xA71CC
	public float m22; // 0x28
	[NativeNameAttribute] // RVA: 0xA7204 Offset: 0xA7204 VA: 0xA7204
	public float m32; // 0x2C
	[NativeNameAttribute] // RVA: 0xA723C Offset: 0xA723C VA: 0xA723C
	public float m03; // 0x30
	[NativeNameAttribute] // RVA: 0xA7274 Offset: 0xA7274 VA: 0xA7274
	public float m13; // 0x34
	[NativeNameAttribute] // RVA: 0xA72AC Offset: 0xA72AC VA: 0xA72AC
	public float m23; // 0x38
	[NativeNameAttribute] // RVA: 0xA72E4 Offset: 0xA72E4 VA: 0xA72E4
	public float m33; // 0x3C
	private static readonly Matrix4x4 zeroMatrix; // 0x0
	private static readonly Matrix4x4 identityMatrix; // 0x40

	// Methods

	// RVA: 0xC9588 Offset: 0xC9588 VA: 0xC9588
	public void .ctor(Vector4 column0, Vector4 column1, Vector4 column2, Vector4 column3) { }

	// RVA: 0xC95FC Offset: 0xC95FC VA: 0xC95FC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xC9604 Offset: 0xC9604 VA: 0xC9604 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xC960C Offset: 0xC960C VA: 0xC960C Slot: 4
	public bool Equals(Matrix4x4 other) { }

	// RVA: 0xC9680 Offset: 0xC9680 VA: 0xC9680
	public Vector4 GetColumn(int index) { }

	// RVA: 0xC9694 Offset: 0xC9694 VA: 0xC9694
	public Vector3 MultiplyPoint(Vector3 point) { }

	// RVA: 0xC96B8 Offset: 0xC96B8 VA: 0xC96B8
	public Vector3 MultiplyPoint3x4(Vector3 point) { }

	// RVA: 0xC96DC Offset: 0xC96DC VA: 0xC96DC Slot: 3
	public override string ToString() { }

	// RVA: 0x32363C Offset: 0x32363C VA: 0x32363C
	private static void .cctor() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA3470 Offset: 0xA3470 VA: 0xA3470
[NativeHeaderAttribute] // RVA: 0xA3470 Offset: 0xA3470 VA: 0xA3470
[ThreadAndSerializationSafeAttribute] // RVA: 0xA3470 Offset: 0xA3470 VA: 0xA3470
[DefaultMemberAttribute] // RVA: 0xA3470 Offset: 0xA3470 VA: 0xA3470
[RequiredByNativeCodeAttribute] // RVA: 0xA3470 Offset: 0xA3470 VA: 0xA3470
[NativeTypeAttribute] // RVA: 0xA3470 Offset: 0xA3470 VA: 0xA3470
[NativeClassAttribute] // RVA: 0xA3470 Offset: 0xA3470 VA: 0xA3470
public struct Vector3 : IEquatable<Vector3> // TypeDefIndex: 1419
{
	// Fields
	public const float kEpsilon = 1E-05;
	public const float kEpsilonNormalSqrt = 1E-15;
	public float x; // 0x0
	public float y; // 0x4
	public float z; // 0x8
	private static readonly Vector3 zeroVector; // 0x0
	private static readonly Vector3 oneVector; // 0xC
	private static readonly Vector3 upVector; // 0x18
	private static readonly Vector3 downVector; // 0x24
	private static readonly Vector3 leftVector; // 0x30
	private static readonly Vector3 rightVector; // 0x3C
	private static readonly Vector3 forwardVector; // 0x48
	private static readonly Vector3 backVector; // 0x54
	private static readonly Vector3 positiveInfinityVector; // 0x60
	private static readonly Vector3 negativeInfinityVector; // 0x6C

	// Properties
	public float Item { get; set; }
	public Vector3 normalized { get; }
	public float magnitude { get; }
	public float sqrMagnitude { get; }
	public static Vector3 zero { get; }
	public static Vector3 one { get; }
	public static Vector3 forward { get; }
	public static Vector3 back { get; }
	public static Vector3 up { get; }
	public static Vector3 down { get; }
	public static Vector3 left { get; }
	public static Vector3 right { get; }

	// Methods

	// RVA: 0xC8448 Offset: 0xC8448 VA: 0xC8448
	public void .ctor(float x, float y, float z) { }

	// RVA: 0xC8454 Offset: 0xC8454 VA: 0xC8454
	public void .ctor(float x, float y) { }

	// RVA: 0x2D99F4 Offset: 0x2D99F4 VA: 0x2D99F4
	public static Vector3 Lerp(Vector3 a, Vector3 b, float t) { }

	// RVA: 0xC8464 Offset: 0xC8464 VA: 0xC8464
	public float get_Item(int index) { }

	// RVA: 0xC846C Offset: 0xC846C VA: 0xC846C
	public void set_Item(int index, float value) { }

	// RVA: 0xC8474 Offset: 0xC8474 VA: 0xC8474 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xC847C Offset: 0xC847C VA: 0xC847C Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xC8484 Offset: 0xC8484 VA: 0xC8484 Slot: 4
	public bool Equals(Vector3 other) { }

	// RVA: 0x2C70A4 Offset: 0x2C70A4 VA: 0x2C70A4
	public static Vector3 Normalize(Vector3 value) { }

	// RVA: 0xC84A0 Offset: 0xC84A0 VA: 0xC84A0
	public Vector3 get_normalized() { }

	// RVA: 0x2C71E8 Offset: 0x2C71E8 VA: 0x2C71E8
	public static float Dot(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0x2D9EC0 Offset: 0x2D9EC0 VA: 0x2D9EC0
	public static float Distance(Vector3 a, Vector3 b) { }

	// RVA: 0x2D9DC8 Offset: 0x2D9DC8 VA: 0x2D9DC8
	public static float Magnitude(Vector3 vector) { }

	// RVA: 0xC84B4 Offset: 0xC84B4 VA: 0xC84B4
	public float get_magnitude() { }

	// RVA: 0x2DA070 Offset: 0x2DA070 VA: 0x2DA070
	public static float SqrMagnitude(Vector3 vector) { }

	// RVA: 0xC84BC Offset: 0xC84BC VA: 0xC84BC
	public float get_sqrMagnitude() { }

	// RVA: 0x2DA0C0 Offset: 0x2DA0C0 VA: 0x2DA0C0
	public static Vector3 Min(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0x2DA19C Offset: 0x2DA19C VA: 0x2DA19C
	public static Vector3 Max(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0x2D13A8 Offset: 0x2D13A8 VA: 0x2D13A8
	public static Vector3 get_zero() { }

	// RVA: 0x2DA278 Offset: 0x2DA278 VA: 0x2DA278
	public static Vector3 get_one() { }

	// RVA: 0x2D71E4 Offset: 0x2D71E4 VA: 0x2D71E4
	public static Vector3 get_forward() { }

	// RVA: 0x2DA314 Offset: 0x2DA314 VA: 0x2DA314
	public static Vector3 get_back() { }

	// RVA: 0x2DA3B0 Offset: 0x2DA3B0 VA: 0x2DA3B0
	public static Vector3 get_up() { }

	// RVA: 0x2DA44C Offset: 0x2DA44C VA: 0x2DA44C
	public static Vector3 get_down() { }

	// RVA: 0x2DA4E8 Offset: 0x2DA4E8 VA: 0x2DA4E8
	public static Vector3 get_left() { }

	// RVA: 0x2DA584 Offset: 0x2DA584 VA: 0x2DA584
	public static Vector3 get_right() { }

	// RVA: 0x2CAE48 Offset: 0x2CAE48 VA: 0x2CAE48
	public static Vector3 op_Addition(Vector3 a, Vector3 b) { }

	// RVA: 0x2DA620 Offset: 0x2DA620 VA: 0x2DA620
	public static Vector3 op_Subtraction(Vector3 a, Vector3 b) { }

	// RVA: 0x2CA700 Offset: 0x2CA700 VA: 0x2CA700
	public static Vector3 op_Multiply(Vector3 a, float d) { }

	// RVA: 0x2D9E94 Offset: 0x2D9E94 VA: 0x2D9E94
	public static Vector3 op_Division(Vector3 a, float d) { }

	// RVA: 0x2DA654 Offset: 0x2DA654 VA: 0x2DA654
	public static bool op_Equality(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0x2D1444 Offset: 0x2D1444 VA: 0x2D1444
	public static bool op_Inequality(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0xC84E4 Offset: 0xC84E4 VA: 0xC84E4 Slot: 3
	public override string ToString() { }

	// RVA: 0x2DA928 Offset: 0x2DA928 VA: 0x2DA928
	private static void .cctor() { }
}

// Namespace: UnityEngine
[DefaultMemberAttribute] // RVA: 0xA35A8 Offset: 0xA35A8 VA: 0xA35A8
[NativeTypeAttribute] // RVA: 0xA35A8 Offset: 0xA35A8 VA: 0xA35A8
[UsedByNativeCodeAttribute] // RVA: 0xA35A8 Offset: 0xA35A8 VA: 0xA35A8
[NativeHeaderAttribute] // RVA: 0xA35A8 Offset: 0xA35A8 VA: 0xA35A8
[ThreadAndSerializationSafeAttribute] // RVA: 0xA35A8 Offset: 0xA35A8 VA: 0xA35A8
public struct Quaternion : IEquatable<Quaternion> // TypeDefIndex: 1420
{
	// Fields
	public float x; // 0x0
	public float y; // 0x4
	public float z; // 0x8
	public float w; // 0xC
	private static readonly Quaternion identityQuaternion; // 0x0
	public const float kEpsilon = 1E-06;

	// Methods

	// RVA: 0xC7C78 Offset: 0xC7C78 VA: 0xC7C78
	public void .ctor(float x, float y, float z, float w) { }

	[FreeFunctionAttribute] // RVA: 0xAA78C Offset: 0xAA78C VA: 0xAA78C
	// RVA: 0x2C9F28 Offset: 0x2C9F28 VA: 0x2C9F28
	public static Quaternion Inverse(Quaternion rotation) { }

	[FreeFunctionAttribute] // RVA: 0xAA7BC Offset: 0xAA7BC VA: 0xAA7BC
	// RVA: 0x2CA05C Offset: 0x2CA05C VA: 0x2CA05C
	public static Quaternion Lerp(Quaternion a, Quaternion b, float t) { }

	[FreeFunctionAttribute] // RVA: 0xAA814 Offset: 0xAA814 VA: 0xAA814
	// RVA: 0x2CA1D0 Offset: 0x2CA1D0 VA: 0x2CA1D0
	private static Quaternion Internal_FromEulerRad(Vector3 euler) { }

	// RVA: 0x2CA2FC Offset: 0x2CA2FC VA: 0x2CA2FC
	public static Vector3 op_Multiply(Quaternion rotation, Vector3 point) { }

	// RVA: 0x2CA3C8 Offset: 0x2CA3C8 VA: 0x2CA3C8
	private static bool IsEqualUsingDot(float dot) { }

	// RVA: 0x2CA3E8 Offset: 0x2CA3E8 VA: 0x2CA3E8
	public static bool op_Equality(Quaternion lhs, Quaternion rhs) { }

	// RVA: 0x2CA520 Offset: 0x2CA520 VA: 0x2CA520
	public static bool op_Inequality(Quaternion lhs, Quaternion rhs) { }

	// RVA: 0x2CA4DC Offset: 0x2CA4DC VA: 0x2CA4DC
	public static float Dot(Quaternion a, Quaternion b) { }

	// RVA: 0x2CA5E4 Offset: 0x2CA5E4 VA: 0x2CA5E4
	public static Quaternion Euler(float x, float y, float z) { }

	// RVA: 0xC7C8C Offset: 0xC7C8C VA: 0xC7C8C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xC7C94 Offset: 0xC7C94 VA: 0xC7C94 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xC7C9C Offset: 0xC7C9C VA: 0xC7C9C Slot: 4
	public bool Equals(Quaternion other) { }

	// RVA: 0xC7CC0 Offset: 0xC7CC0 VA: 0xC7CC0 Slot: 3
	public override string ToString() { }

	// RVA: 0x2CAB00 Offset: 0x2CAB00 VA: 0x2CAB00
	private static void .cctor() { }

	// RVA: 0x2C9FDC Offset: 0x2C9FDC VA: 0x2C9FDC
	private static void Inverse_Injected(ref Quaternion rotation, out Quaternion ret) { }

	// RVA: 0x2CA140 Offset: 0x2CA140 VA: 0x2CA140
	private static void Lerp_Injected(ref Quaternion a, ref Quaternion b, float t, out Quaternion ret) { }

	// RVA: 0x2CA27C Offset: 0x2CA27C VA: 0x2CA27C
	private static void Internal_FromEulerRad_Injected(ref Vector3 euler, out Quaternion ret) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA3670 Offset: 0xA3670 VA: 0xA3670
[NativeHeaderAttribute] // RVA: 0xA3670 Offset: 0xA3670 VA: 0xA3670
[ThreadAndSerializationSafeAttribute] // RVA: 0xA3670 Offset: 0xA3670 VA: 0xA3670
[NativeHeaderAttribute] // RVA: 0xA3670 Offset: 0xA3670 VA: 0xA3670
[NativeHeaderAttribute] // RVA: 0xA3670 Offset: 0xA3670 VA: 0xA3670
public struct Mathf // TypeDefIndex: 1421
{
	// Fields
	public static readonly float Epsilon; // 0x0

	// Methods

	// RVA: 0x321E68 Offset: 0x321E68 VA: 0x321E68
	public static float Sin(float f) { }

	// RVA: 0x321E90 Offset: 0x321E90 VA: 0x321E90
	public static float Cos(float f) { }

	// RVA: 0x321EB8 Offset: 0x321EB8 VA: 0x321EB8
	public static float Sqrt(float f) { }

	// RVA: 0x321ED4 Offset: 0x321ED4 VA: 0x321ED4
	public static float Abs(float f) { }

	// RVA: 0x321EDC Offset: 0x321EDC VA: 0x321EDC
	public static float Min(float a, float b) { }

	// RVA: 0x321EF8 Offset: 0x321EF8 VA: 0x321EF8
	public static int Min(int a, int b) { }

	// RVA: 0x321F04 Offset: 0x321F04 VA: 0x321F04
	public static float Max(float a, float b) { }

	// RVA: 0x321F20 Offset: 0x321F20 VA: 0x321F20
	public static int Max(int a, int b) { }

	// RVA: 0x321F2C Offset: 0x321F2C VA: 0x321F2C
	public static float Pow(float f, float p) { }

	// RVA: 0x321F60 Offset: 0x321F60 VA: 0x321F60
	public static float Log(float f, float p) { }

	// RVA: 0x321FA4 Offset: 0x321FA4 VA: 0x321FA4
	public static float Floor(float f) { }

	// RVA: 0x321FA8 Offset: 0x321FA8 VA: 0x321FA8
	public static float Round(float f) { }

	// RVA: 0x32205C Offset: 0x32205C VA: 0x32205C
	public static int CeilToInt(float f) { }

	// RVA: 0x322078 Offset: 0x322078 VA: 0x322078
	public static int FloorToInt(float f) { }

	// RVA: 0x322094 Offset: 0x322094 VA: 0x322094
	public static int RoundToInt(float f) { }

	// RVA: 0x322148 Offset: 0x322148 VA: 0x322148
	public static float Sign(float f) { }

	// RVA: 0x322168 Offset: 0x322168 VA: 0x322168
	public static float Clamp(float value, float min, float max) { }

	// RVA: 0x322198 Offset: 0x322198 VA: 0x322198
	public static int Clamp(int value, int min, int max) { }

	// RVA: 0x317640 Offset: 0x317640 VA: 0x317640
	public static float Clamp01(float value) { }

	// RVA: 0x3221B0 Offset: 0x3221B0 VA: 0x3221B0
	public static float Lerp(float a, float b, float t) { }

	// RVA: 0x322270 Offset: 0x322270 VA: 0x322270
	public static bool Approximately(float a, float b) { }

	// RVA: 0x322360 Offset: 0x322360 VA: 0x322360
	public static float SmoothDamp(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed, float deltaTime) { }

	// RVA: 0x3224E4 Offset: 0x3224E4 VA: 0x3224E4
	public static float Repeat(float t, float length) { }

	// RVA: 0x3225AC Offset: 0x3225AC VA: 0x3225AC
	public static float InverseLerp(float a, float b, float value) { }

	// RVA: 0x322670 Offset: 0x322670 VA: 0x322670
	private static void .cctor() { }
}

// Namespace: UnityEngineInternal
public struct MathfInternal // TypeDefIndex: 1422
{
	// Fields
	public static float FloatMinNormal; // 0x0
	public static float FloatMinDenormal; // 0x4
	public static bool IsFlushToZeroEnabled; // 0x8

	// Methods

	// RVA: 0x2E0D74 Offset: 0x2E0D74 VA: 0x2E0D74
	private static void .cctor() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA3790 Offset: 0xA3790 VA: 0xA3790
[RequiredByNativeCodeAttribute] // RVA: 0xA3790 Offset: 0xA3790 VA: 0xA3790
public sealed class Mesh : Object // TypeDefIndex: 1423
{
	// Properties
	internal bool canAccess { get; }
	public int subMeshCount { get; }
	public Vector3[] vertices { get; }
	public Vector3[] normals { get; }
	public Vector4[] tangents { get; }
	public Vector2[] uv { get; }
	public Vector2[] uv2 { get; }
	public Vector2[] uv3 { get; }
	public Vector2[] uv4 { get; }
	public Color32[] colors32 { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAA864 Offset: 0xAA864 VA: 0xAA864
	// RVA: 0x323844 Offset: 0x323844 VA: 0x323844
	public void .ctor() { }

	[FreeFunctionAttribute] // RVA: 0xAA874 Offset: 0xAA874 VA: 0xAA874
	// RVA: 0x3238D0 Offset: 0x3238D0 VA: 0x3238D0
	private static void Internal_Create(Mesh mono) { }

	[FreeFunctionAttribute] // RVA: 0xAA8BC Offset: 0xAA8BC VA: 0xAA8BC
	// RVA: 0x32396C Offset: 0x32396C VA: 0x32396C
	private int[] GetIndicesImpl(int submesh, bool applyBaseVertex) { }

	[FreeFunctionAttribute] // RVA: 0xAA920 Offset: 0xAA920 VA: 0xAA920
	// RVA: 0x323A24 Offset: 0x323A24 VA: 0x323A24
	private void SetIndicesImpl(int submesh, MeshTopology topology, Array indices, int arraySize, bool calculateBounds, int baseVertex) { }

	[FreeFunctionAttribute] // RVA: 0xAA984 Offset: 0xAA984 VA: 0xAA984
	// RVA: 0x323ACC Offset: 0x323ACC VA: 0x323ACC
	private void PrintErrorCantAccessChannel(VertexAttribute ch) { }

	[FreeFunctionAttribute] // RVA: 0xAA9F8 Offset: 0xAA9F8 VA: 0xAA9F8
	// RVA: 0x323B4C Offset: 0x323B4C VA: 0x323B4C
	internal bool HasChannel(VertexAttribute ch) { }

	[FreeFunctionAttribute] // RVA: 0xAAA5C Offset: 0xAAA5C VA: 0xAAA5C
	// RVA: 0x323BCC Offset: 0x323BCC VA: 0x323BCC
	private void SetArrayForChannelImpl(VertexAttribute channel, Mesh.InternalVertexChannelType format, int dim, Array values, int arraySize) { }

	[FreeFunctionAttribute] // RVA: 0xAAAC8 Offset: 0xAAAC8 VA: 0xAAAC8
	// RVA: 0x323C5C Offset: 0x323C5C VA: 0x323C5C
	private Array GetAllocArrayFromChannelImpl(VertexAttribute channel, Mesh.InternalVertexChannelType format, int dim) { }

	[NativeMethodAttribute] // RVA: 0xAAB34 Offset: 0xAAB34 VA: 0xAAB34
	// RVA: 0x323CEC Offset: 0x323CEC VA: 0x323CEC
	internal bool get_canAccess() { }

	[NativeMethodAttribute] // RVA: 0xAAB74 Offset: 0xAAB74 VA: 0xAAB74
	// RVA: 0x323D78 Offset: 0x323D78 VA: 0x323D78
	public int get_subMeshCount() { }

	[NativeMethodAttribute] // RVA: 0xAABBC Offset: 0xAABBC VA: 0xAABBC
	// RVA: 0x323E08 Offset: 0x323E08 VA: 0x323E08
	private void ClearImpl(bool keepVertexLayout) { }

	[NativeMethodAttribute] // RVA: 0xAABF0 Offset: 0xAABF0 VA: 0xAABF0
	// RVA: 0x323EA4 Offset: 0x323EA4 VA: 0x323EA4
	private void RecalculateBoundsImpl() { }

	// RVA: 0x323F38 Offset: 0x323F38 VA: 0x323F38
	internal VertexAttribute GetUVChannel(int uvIndex) { }

	// RVA: 0x323FF4 Offset: 0x323FF4 VA: 0x323FF4
	internal static int DefaultDimensionForChannel(VertexAttribute channel) { }

	// RVA: -1 Offset: -1
	private T[] GetAllocArrayFromChannel<T>(VertexAttribute channel, Mesh.InternalVertexChannelType format, int dim) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BDE8C Offset: 0x5BDE8C VA: 0x5BDE8C
	|-Mesh.GetAllocArrayFromChannel<object>
	|
	|-RVA: 0x5BE018 Offset: 0x5BE018 VA: 0x5BE018
	|-Mesh.GetAllocArrayFromChannel<Color32>
	|
	|-RVA: 0x5BE208 Offset: 0x5BE208 VA: 0x5BE208
	|-Mesh.GetAllocArrayFromChannel<Vector2>
	|
	|-RVA: 0x5BE3F8 Offset: 0x5BE3F8 VA: 0x5BE3F8
	|-Mesh.GetAllocArrayFromChannel<Vector3>
	|
	|-RVA: 0x5BE5E8 Offset: 0x5BE5E8 VA: 0x5BE5E8
	|-Mesh.GetAllocArrayFromChannel<Vector4>
	*/

	// RVA: -1 Offset: -1
	private T[] GetAllocArrayFromChannel<T>(VertexAttribute channel) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BDE28 Offset: 0x5BDE28 VA: 0x5BDE28
	|-Mesh.GetAllocArrayFromChannel<object>
	|
	|-RVA: 0x5BE1A4 Offset: 0x5BE1A4 VA: 0x5BE1A4
	|-Mesh.GetAllocArrayFromChannel<Vector2>
	|
	|-RVA: 0x5BE394 Offset: 0x5BE394 VA: 0x5BE394
	|-Mesh.GetAllocArrayFromChannel<Vector3>
	|
	|-RVA: 0x5BE584 Offset: 0x5BE584 VA: 0x5BE584
	|-Mesh.GetAllocArrayFromChannel<Vector4>
	*/

	// RVA: 0x3240D8 Offset: 0x3240D8 VA: 0x3240D8
	private void SetSizedArrayForChannel(VertexAttribute channel, Mesh.InternalVertexChannelType format, int dim, Array values, int valuesCount) { }

	// RVA: -1 Offset: -1
	private void SetListForChannel<T>(VertexAttribute channel, Mesh.InternalVertexChannelType format, int dim, List<T> values) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x513B28 Offset: 0x513B28 VA: 0x513B28
	|-Mesh.SetListForChannel<object>
	|
	|-RVA: 0x513BA8 Offset: 0x513BA8 VA: 0x513BA8
	|-Mesh.SetListForChannel<Color32>
	|
	|-RVA: 0x513C28 Offset: 0x513C28 VA: 0x513C28
	|-Mesh.SetListForChannel<Vector2>
	*/

	// RVA: -1 Offset: -1
	private void SetListForChannel<T>(VertexAttribute channel, List<T> values) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x513A9C Offset: 0x513A9C VA: 0x513A9C
	|-Mesh.SetListForChannel<object>
	|
	|-RVA: 0x513CA8 Offset: 0x513CA8 VA: 0x513CA8
	|-Mesh.SetListForChannel<Vector3>
	|
	|-RVA: 0x513D34 Offset: 0x513D34 VA: 0x513D34
	|-Mesh.SetListForChannel<Vector4>
	*/

	// RVA: 0x324140 Offset: 0x324140 VA: 0x324140
	public Vector3[] get_vertices() { }

	// RVA: 0x3241A8 Offset: 0x3241A8 VA: 0x3241A8
	public Vector3[] get_normals() { }

	// RVA: 0x324210 Offset: 0x324210 VA: 0x324210
	public Vector4[] get_tangents() { }

	// RVA: 0x324278 Offset: 0x324278 VA: 0x324278
	public Vector2[] get_uv() { }

	// RVA: 0x3242E0 Offset: 0x3242E0 VA: 0x3242E0
	public Vector2[] get_uv2() { }

	// RVA: 0x324348 Offset: 0x324348 VA: 0x324348
	public Vector2[] get_uv3() { }

	// RVA: 0x3243B0 Offset: 0x3243B0 VA: 0x3243B0
	public Vector2[] get_uv4() { }

	// RVA: 0x324418 Offset: 0x324418 VA: 0x324418
	public Color32[] get_colors32() { }

	// RVA: 0x324494 Offset: 0x324494 VA: 0x324494
	public void SetVertices(List<Vector3> inVertices) { }

	// RVA: 0x324504 Offset: 0x324504 VA: 0x324504
	public void SetNormals(List<Vector3> inNormals) { }

	// RVA: 0x324574 Offset: 0x324574 VA: 0x324574
	public void SetTangents(List<Vector4> inTangents) { }

	// RVA: 0x3245E4 Offset: 0x3245E4 VA: 0x3245E4
	public void SetColors(List<Color32> inColors) { }

	// RVA: -1 Offset: -1
	private void SetUvsImpl<T>(int uvIndex, int dim, List<T> uvs) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x513DC0 Offset: 0x513DC0 VA: 0x513DC0
	|-Mesh.SetUvsImpl<object>
	|
	|-RVA: 0x513EE4 Offset: 0x513EE4 VA: 0x513EE4
	|-Mesh.SetUvsImpl<Vector2>
	*/

	// RVA: 0x324668 Offset: 0x324668 VA: 0x324668
	public void SetUVs(int channel, List<Vector2> uvs) { }

	// RVA: 0x3246EC Offset: 0x3246EC VA: 0x3246EC
	private void PrintErrorCantAccessIndices() { }

	// RVA: 0x3247C8 Offset: 0x3247C8 VA: 0x3247C8
	private bool CheckCanAccessSubmesh(int submesh, bool errorAboutTriangles) { }

	// RVA: 0x324908 Offset: 0x324908 VA: 0x324908
	private bool CheckCanAccessSubmeshTriangles(int submesh) { }

	// RVA: 0x324910 Offset: 0x324910 VA: 0x324910
	private bool CheckCanAccessSubmeshIndices(int submesh) { }

	// RVA: 0x324918 Offset: 0x324918 VA: 0x324918
	public int[] GetIndices(int submesh) { }

	// RVA: 0x324920 Offset: 0x324920 VA: 0x324920
	public int[] GetIndices(int submesh, bool applyBaseVertex) { }

	// RVA: 0x3249B8 Offset: 0x3249B8 VA: 0x3249B8
	private void SetTrianglesImpl(int submesh, Array triangles, int arraySize, bool calculateBounds, int baseVertex) { }

	// RVA: 0x3249EC Offset: 0x3249EC VA: 0x3249EC
	public void SetTriangles(List<int> triangles, int submesh) { }

	// RVA: 0x324A10 Offset: 0x324A10 VA: 0x324A10
	public void SetTriangles(List<int> triangles, int submesh, bool calculateBounds, int baseVertex) { }

	// RVA: 0x324ACC Offset: 0x324ACC VA: 0x324ACC
	public void Clear() { }

	// RVA: 0x324AD4 Offset: 0x324AD4 VA: 0x324AD4
	public void RecalculateBounds() { }
}

// Namespace: 
internal enum Mesh.InternalVertexChannelType // TypeDefIndex: 1424
{
	// Fields
	public int value__; // 0x0
	public const Mesh.InternalVertexChannelType Float = 0;
	public const Mesh.InternalVertexChannelType Color = 2;
}

// Namespace: UnityEngineInternal
public class ScriptingUtils // TypeDefIndex: 1425
{
	// Methods

	// RVA: 0x2E0E7C Offset: 0x2E0E7C VA: 0x2E0E7C
	public static Delegate CreateDelegate(Type type, MethodInfo methodInfo) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA37FC Offset: 0xA37FC VA: 0xA37FC
[NativeHeaderAttribute] // RVA: 0xA37FC Offset: 0xA37FC VA: 0xA37FC
[RequiredByNativeCodeAttribute] // RVA: 0xA37FC Offset: 0xA37FC VA: 0xA37FC
[ExtensionOfNativeClassAttribute] // RVA: 0xA37FC Offset: 0xA37FC VA: 0xA37FC
public class MonoBehaviour : Behaviour // TypeDefIndex: 1426
{
	// Properties
	public bool useGUILayout { get; set; }

	// Methods

	// RVA: 0x2C27D0 Offset: 0x2C27D0 VA: 0x2C27D0
	public void .ctor() { }

	// RVA: 0x2C27D8 Offset: 0x2C27D8 VA: 0x2C27D8
	public bool IsInvoking() { }

	// RVA: 0x2C2854 Offset: 0x2C2854 VA: 0x2C2854
	public void CancelInvoke() { }

	// RVA: 0x2C28D0 Offset: 0x2C28D0 VA: 0x2C28D0
	public void Invoke(string methodName, float time) { }

	// RVA: 0x2C297C Offset: 0x2C297C VA: 0x2C297C
	public void InvokeRepeating(string methodName, float time, float repeatRate) { }

	// RVA: 0x2C2A9C Offset: 0x2C2A9C VA: 0x2C2A9C
	public void CancelInvoke(string methodName) { }

	// RVA: 0x2C2B20 Offset: 0x2C2B20 VA: 0x2C2B20
	public bool IsInvoking(string methodName) { }

	[ExcludeFromDocsAttribute] // RVA: 0xAAC30 Offset: 0xAAC30 VA: 0xAAC30
	// RVA: 0x2C2BA4 Offset: 0x2C2BA4 VA: 0x2C2BA4
	public Coroutine StartCoroutine(string methodName) { }

	// RVA: 0x2C2BAC Offset: 0x2C2BAC VA: 0x2C2BAC
	public Coroutine StartCoroutine(string methodName, object value) { }

	// RVA: 0x2C2DFC Offset: 0x2C2DFC VA: 0x2C2DFC
	public Coroutine StartCoroutine(IEnumerator routine) { }

	[ObsoleteAttribute] // RVA: 0xAAC40 Offset: 0xAAC40 VA: 0xAAC40
	// RVA: 0x2C2F8C Offset: 0x2C2F8C VA: 0x2C2F8C
	public Coroutine StartCoroutine_Auto(IEnumerator routine) { }

	// RVA: 0x2C2F90 Offset: 0x2C2F90 VA: 0x2C2F90
	public void StopCoroutine(IEnumerator routine) { }

	// RVA: 0x2C3120 Offset: 0x2C3120 VA: 0x2C3120
	public void StopCoroutine(Coroutine routine) { }

	// RVA: 0x2C32B0 Offset: 0x2C32B0 VA: 0x2C32B0
	public void StopCoroutine(string methodName) { }

	// RVA: 0x2C3358 Offset: 0x2C3358 VA: 0x2C3358
	public void StopAllCoroutines() { }

	// RVA: 0x2C33F0 Offset: 0x2C33F0 VA: 0x2C33F0
	public bool get_useGUILayout() { }

	// RVA: 0x2C3488 Offset: 0x2C3488 VA: 0x2C3488
	public void set_useGUILayout(bool value) { }

	// RVA: 0x2C3534 Offset: 0x2C3534 VA: 0x2C3534
	public static void print(object message) { }

	[FreeFunctionAttribute] // RVA: 0xAAC78 Offset: 0xAAC78 VA: 0xAAC78
	// RVA: 0x2C2858 Offset: 0x2C2858 VA: 0x2C2858
	private static void Internal_CancelInvokeAll(MonoBehaviour self) { }

	[FreeFunctionAttribute] // RVA: 0xAACB4 Offset: 0xAACB4 VA: 0xAACB4
	// RVA: 0x2C27DC Offset: 0x2C27DC VA: 0x2C27DC
	private static bool Internal_IsInvokingAll(MonoBehaviour self) { }

	[FreeFunctionAttribute] // RVA: 0xAACEC Offset: 0xAACEC VA: 0xAACEC
	// RVA: 0x2C28EC Offset: 0x2C28EC VA: 0x2C28EC
	private static void InvokeDelayed(MonoBehaviour self, string methodName, float time, float repeatRate) { }

	[FreeFunctionAttribute] // RVA: 0xAACFC Offset: 0xAACFC VA: 0xAACFC
	// RVA: 0x2C2AA0 Offset: 0x2C2AA0 VA: 0x2C2AA0
	private static void CancelInvoke(MonoBehaviour self, string methodName) { }

	[FreeFunctionAttribute] // RVA: 0xAAD0C Offset: 0xAAD0C VA: 0xAAD0C
	// RVA: 0x2C2B24 Offset: 0x2C2B24 VA: 0x2C2B24
	private static bool IsInvoking(MonoBehaviour self, string methodName) { }

	[FreeFunctionAttribute] // RVA: 0xAAD1C Offset: 0xAAD1C VA: 0xAAD1C
	// RVA: 0x2C2CFC Offset: 0x2C2CFC VA: 0x2C2CFC
	private static bool IsObjectMonoBehaviour(Object obj) { }

	// RVA: 0x2C2D74 Offset: 0x2C2D74 VA: 0x2C2D74
	private Coroutine StartCoroutineManaged(string methodName, object value) { }

	// RVA: 0x2C2F0C Offset: 0x2C2F0C VA: 0x2C2F0C
	private Coroutine StartCoroutineManaged2(IEnumerator enumerator) { }

	// RVA: 0x2C3230 Offset: 0x2C3230 VA: 0x2C3230
	private void StopCoroutineManaged(Coroutine routine) { }

	// RVA: 0x2C30A0 Offset: 0x2C30A0 VA: 0x2C30A0
	private void StopCoroutineFromEnumeratorManaged(IEnumerator routine) { }

	// RVA: 0x2C35B8 Offset: 0x2C35B8 VA: 0x2C35B8
	internal string GetScriptClassName() { }
}

// Namespace: UnityEngine
internal class SendMouseEvents // TypeDefIndex: 1427
{
	// Fields
	private static bool s_MouseUsed; // 0x0
	private static readonly SendMouseEvents.HitInfo[] m_LastHit; // 0x4
	private static readonly SendMouseEvents.HitInfo[] m_MouseDownHit; // 0x8
	private static readonly SendMouseEvents.HitInfo[] m_CurrentHit; // 0xC
	private static Camera[] m_Cameras; // 0x10

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAAD2C Offset: 0xAAD2C VA: 0xAAD2C
	// RVA: 0x2D00CC Offset: 0x2D00CC VA: 0x2D00CC
	private static void SetMouseMoved() { }

	// RVA: 0x2D015C Offset: 0x2D015C VA: 0x2D015C
	private static void HitTestLegacyGUI(Camera camera, Vector3 mousePosition, ref SendMouseEvents.HitInfo hitInfo) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAAD3C Offset: 0xAAD3C VA: 0xAAD3C
	// RVA: 0x2D02C4 Offset: 0x2D02C4 VA: 0x2D02C4
	private static void DoSendMouseEvents(int skipRTCameras) { }

	// RVA: 0x2D14F8 Offset: 0x2D14F8 VA: 0x2D14F8
	private static void SendEvents(int i, SendMouseEvents.HitInfo hit) { }

	// RVA: 0x2D1E8C Offset: 0x2D1E8C VA: 0x2D1E8C
	private static void .cctor() { }
}

// Namespace: 
private struct SendMouseEvents.HitInfo // TypeDefIndex: 1428
{
	// Fields
	public GameObject target; // 0x0
	public Camera camera; // 0x4

	// Methods

	// RVA: 0xC8314 Offset: 0xC8314 VA: 0xC8314
	public void SendMessage(string name) { }

	// RVA: 0x2D1CA0 Offset: 0x2D1CA0 VA: 0x2D1CA0
	public static bool op_Implicit(SendMouseEvents.HitInfo exists) { }

	// RVA: 0x2D1DB4 Offset: 0x2D1DB4 VA: 0x2D1DB4
	public static bool Compare(SendMouseEvents.HitInfo lhs, SendMouseEvents.HitInfo rhs) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA389C Offset: 0xA389C VA: 0xA389C
internal sealed class NoAllocHelpers // TypeDefIndex: 1429
{
	// Methods

	// RVA: -1 Offset: -1
	public static int SafeLength<T>(List<T> values) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x522CDC Offset: 0x522CDC VA: 0x522CDC
	|-NoAllocHelpers.SafeLength<int>
	|
	|-RVA: 0x522CF8 Offset: 0x522CF8 VA: 0x522CF8
	|-NoAllocHelpers.SafeLength<object>
	|
	|-RVA: 0x522D14 Offset: 0x522D14 VA: 0x522D14
	|-NoAllocHelpers.SafeLength<Color32>
	|
	|-RVA: 0x522D30 Offset: 0x522D30 VA: 0x522D30
	|-NoAllocHelpers.SafeLength<Vector2>
	|
	|-RVA: 0x522D4C Offset: 0x522D4C VA: 0x522D4C
	|-NoAllocHelpers.SafeLength<Vector3>
	|
	|-RVA: 0x522D68 Offset: 0x522D68 VA: 0x522D68
	|-NoAllocHelpers.SafeLength<Vector4>
	*/

	[FreeFunctionAttribute] // RVA: 0xAAD4C Offset: 0xAAD4C VA: 0xAAD4C
	// RVA: 0x2C5F8C Offset: 0x2C5F8C VA: 0x2C5F8C
	public static Array ExtractArrayFromList(object list) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xA38F4 Offset: 0xA38F4 VA: 0xA38F4
public struct Plane // TypeDefIndex: 1430
{
	// Fields
	private Vector3 m_Normal; // 0x0
	private float m_Distance; // 0xC

	// Methods

	// RVA: 0xC7A0C Offset: 0xC7A0C VA: 0xC7A0C
	public void .ctor(Vector3 inNormal, Vector3 inPoint) { }

	// RVA: 0xC7A3C Offset: 0xC7A3C VA: 0xC7A3C
	public bool Raycast(Ray ray, out float enter) { }

	// RVA: 0xC7A78 Offset: 0xC7A78 VA: 0xC7A78 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
internal interface IPlayerEditorConnectionNative // TypeDefIndex: 1431
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Initialize();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void DisconnectAll();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void SendMessage(Guid messageId, byte[] data, int playerId);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool TrySendMessage(Guid messageId, byte[] data, int playerId);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Poll();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void RegisterInternal(Guid messageId);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void UnregisterInternal(Guid messageId);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool IsConnected();
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA3904 Offset: 0xA3904 VA: 0xA3904
internal class PlayerConnectionInternal : IPlayerEditorConnectionNative // TypeDefIndex: 1432
{
	// Methods

	// RVA: 0x2C3D44 Offset: 0x2C3D44 VA: 0x2C3D44
	public void .ctor() { }

	// RVA: 0x2C8930 Offset: 0x2C8930 VA: 0x2C8930 Slot: 6
	private void UnityEngine.IPlayerEditorConnectionNative.SendMessage(Guid messageId, byte[] data, int playerId) { }

	// RVA: 0x2C8B24 Offset: 0x2C8B24 VA: 0x2C8B24 Slot: 7
	private bool UnityEngine.IPlayerEditorConnectionNative.TrySendMessage(Guid messageId, byte[] data, int playerId) { }

	// RVA: 0x2C8D18 Offset: 0x2C8D18 VA: 0x2C8D18 Slot: 8
	private void UnityEngine.IPlayerEditorConnectionNative.Poll() { }

	// RVA: 0x2C8DB8 Offset: 0x2C8DB8 VA: 0x2C8DB8 Slot: 9
	private void UnityEngine.IPlayerEditorConnectionNative.RegisterInternal(Guid messageId) { }

	// RVA: 0x2C8EB0 Offset: 0x2C8EB0 VA: 0x2C8EB0 Slot: 10
	private void UnityEngine.IPlayerEditorConnectionNative.UnregisterInternal(Guid messageId) { }

	// RVA: 0x2C8FA8 Offset: 0x2C8FA8 VA: 0x2C8FA8 Slot: 4
	private void UnityEngine.IPlayerEditorConnectionNative.Initialize() { }

	// RVA: 0x2C9044 Offset: 0x2C9044 VA: 0x2C9044 Slot: 11
	private bool UnityEngine.IPlayerEditorConnectionNative.IsConnected() { }

	// RVA: 0x2C90E0 Offset: 0x2C90E0 VA: 0x2C90E0 Slot: 5
	private void UnityEngine.IPlayerEditorConnectionNative.DisconnectAll() { }

	[FreeFunctionAttribute] // RVA: 0xAADA8 Offset: 0xAADA8 VA: 0xAADA8
	// RVA: 0x2C9048 Offset: 0x2C9048 VA: 0x2C9048
	private static bool IsConnected() { }

	[FreeFunctionAttribute] // RVA: 0xAADFC Offset: 0xAADFC VA: 0xAADFC
	// RVA: 0x2C8FAC Offset: 0x2C8FAC VA: 0x2C8FAC
	private static void Initialize() { }

	[FreeFunctionAttribute] // RVA: 0xAAE50 Offset: 0xAAE50 VA: 0xAAE50
	// RVA: 0x2C8E38 Offset: 0x2C8E38 VA: 0x2C8E38
	private static void RegisterInternal(string messageId) { }

	[FreeFunctionAttribute] // RVA: 0xAAEA8 Offset: 0xAAEA8 VA: 0xAAEA8
	// RVA: 0x2C8F30 Offset: 0x2C8F30 VA: 0x2C8F30
	private static void UnregisterInternal(string messageId) { }

	[FreeFunctionAttribute] // RVA: 0xAAF04 Offset: 0xAAF04 VA: 0xAAF04
	// RVA: 0x2C8A9C Offset: 0x2C8A9C VA: 0x2C8A9C
	private static void SendMessage(string messageId, byte[] data, int playerId) { }

	[FreeFunctionAttribute] // RVA: 0xAAF58 Offset: 0xAAF58 VA: 0xAAF58
	// RVA: 0x2C8C90 Offset: 0x2C8C90 VA: 0x2C8C90
	private static bool TrySendMessage(string messageId, byte[] data, int playerId) { }

	[FreeFunctionAttribute] // RVA: 0xAAFB0 Offset: 0xAAFB0 VA: 0xAAFB0
	// RVA: 0x2C8D1C Offset: 0x2C8D1C VA: 0x2C8D1C
	private static void PollInternal() { }

	[FreeFunctionAttribute] // RVA: 0xAB004 Offset: 0xAB004 VA: 0xAB004
	// RVA: 0x2C90E4 Offset: 0x2C90E4 VA: 0x2C90E4
	private static void DisconnectAll() { }
}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0xA3964 Offset: 0xA3964 VA: 0xA3964
public struct Initialization // TypeDefIndex: 1433
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3974 Offset: 0xA3974 VA: 0xA3974
public struct Initialization.PlayerUpdateTime // TypeDefIndex: 1434
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3984 Offset: 0xA3984 VA: 0xA3984
public struct Initialization.AsyncUploadTimeSlicedUpdate // TypeDefIndex: 1435
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3994 Offset: 0xA3994 VA: 0xA3994
public struct Initialization.SynchronizeState // TypeDefIndex: 1436
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA39A4 Offset: 0xA39A4 VA: 0xA39A4
public struct Initialization.SynchronizeInputs // TypeDefIndex: 1437
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA39B4 Offset: 0xA39B4 VA: 0xA39B4
public struct Initialization.XREarlyUpdate // TypeDefIndex: 1438
{}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0xA39C4 Offset: 0xA39C4 VA: 0xA39C4
public struct EarlyUpdate // TypeDefIndex: 1439
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA39D4 Offset: 0xA39D4 VA: 0xA39D4
public struct EarlyUpdate.PollPlayerConnection // TypeDefIndex: 1440
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA39E4 Offset: 0xA39E4 VA: 0xA39E4
public struct EarlyUpdate.ProfilerStartFrame // TypeDefIndex: 1441
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA39F4 Offset: 0xA39F4 VA: 0xA39F4
public struct EarlyUpdate.PollHtcsPlayerConnection // TypeDefIndex: 1442
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3A04 Offset: 0xA3A04 VA: 0xA3A04
public struct EarlyUpdate.GpuTimestamp // TypeDefIndex: 1443
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3A14 Offset: 0xA3A14 VA: 0xA3A14
public struct EarlyUpdate.AnalyticsCoreStatsUpdate // TypeDefIndex: 1444
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3A24 Offset: 0xA3A24 VA: 0xA3A24
public struct EarlyUpdate.UnityWebRequestUpdate // TypeDefIndex: 1445
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3A34 Offset: 0xA3A34 VA: 0xA3A34
public struct EarlyUpdate.UpdateStreamingManager // TypeDefIndex: 1446
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3A44 Offset: 0xA3A44 VA: 0xA3A44
public struct EarlyUpdate.ExecuteMainThreadJobs // TypeDefIndex: 1447
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3A54 Offset: 0xA3A54 VA: 0xA3A54
public struct EarlyUpdate.ProcessMouseInWindow // TypeDefIndex: 1448
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3A64 Offset: 0xA3A64 VA: 0xA3A64
public struct EarlyUpdate.ClearIntermediateRenderers // TypeDefIndex: 1449
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3A74 Offset: 0xA3A74 VA: 0xA3A74
public struct EarlyUpdate.ClearLines // TypeDefIndex: 1450
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3A84 Offset: 0xA3A84 VA: 0xA3A84
public struct EarlyUpdate.PresentBeforeUpdate // TypeDefIndex: 1451
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3A94 Offset: 0xA3A94 VA: 0xA3A94
public struct EarlyUpdate.ResetFrameStatsAfterPresent // TypeDefIndex: 1452
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3AA4 Offset: 0xA3AA4 VA: 0xA3AA4
public struct EarlyUpdate.UpdateAllUnityWebStreams // TypeDefIndex: 1453
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3AB4 Offset: 0xA3AB4 VA: 0xA3AB4
public struct EarlyUpdate.UpdateAsyncReadbackManager // TypeDefIndex: 1454
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3AC4 Offset: 0xA3AC4 VA: 0xA3AC4
public struct EarlyUpdate.UpdateTextureStreamingManager // TypeDefIndex: 1455
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3AD4 Offset: 0xA3AD4 VA: 0xA3AD4
public struct EarlyUpdate.UpdatePreloading // TypeDefIndex: 1456
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3AE4 Offset: 0xA3AE4 VA: 0xA3AE4
public struct EarlyUpdate.RendererNotifyInvisible // TypeDefIndex: 1457
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3AF4 Offset: 0xA3AF4 VA: 0xA3AF4
public struct EarlyUpdate.PlayerCleanupCachedData // TypeDefIndex: 1458
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3B04 Offset: 0xA3B04 VA: 0xA3B04
public struct EarlyUpdate.UpdateMainGameViewRect // TypeDefIndex: 1459
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3B14 Offset: 0xA3B14 VA: 0xA3B14
public struct EarlyUpdate.UpdateCanvasRectTransform // TypeDefIndex: 1460
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3B24 Offset: 0xA3B24 VA: 0xA3B24
public struct EarlyUpdate.UpdateInputManager // TypeDefIndex: 1461
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3B34 Offset: 0xA3B34 VA: 0xA3B34
public struct EarlyUpdate.ProcessRemoteInput // TypeDefIndex: 1462
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3B44 Offset: 0xA3B44 VA: 0xA3B44
public struct EarlyUpdate.XRUpdate // TypeDefIndex: 1463
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3B54 Offset: 0xA3B54 VA: 0xA3B54
public struct EarlyUpdate.ScriptRunDelayedStartupFrame // TypeDefIndex: 1464
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3B64 Offset: 0xA3B64 VA: 0xA3B64
public struct EarlyUpdate.UpdateKinect // TypeDefIndex: 1465
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3B74 Offset: 0xA3B74 VA: 0xA3B74
public struct EarlyUpdate.DeliverIosPlatformEvents // TypeDefIndex: 1466
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3B84 Offset: 0xA3B84 VA: 0xA3B84
public struct EarlyUpdate.DispatchEventQueueEvents // TypeDefIndex: 1467
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3B94 Offset: 0xA3B94 VA: 0xA3B94
public struct EarlyUpdate.DirectorSampleTime // TypeDefIndex: 1468
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3BA4 Offset: 0xA3BA4 VA: 0xA3BA4
public struct EarlyUpdate.PhysicsResetInterpolatedTransformPosition // TypeDefIndex: 1469
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3BB4 Offset: 0xA3BB4 VA: 0xA3BB4
public struct EarlyUpdate.SpriteAtlasManagerUpdate // TypeDefIndex: 1470
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3BC4 Offset: 0xA3BC4 VA: 0xA3BC4
public struct EarlyUpdate.TangoUpdate // TypeDefIndex: 1471
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3BD4 Offset: 0xA3BD4 VA: 0xA3BD4
public struct EarlyUpdate.PerformanceAnalyticsUpdate // TypeDefIndex: 1472
{}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0xA3BE4 Offset: 0xA3BE4 VA: 0xA3BE4
public struct FixedUpdate // TypeDefIndex: 1473
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3BF4 Offset: 0xA3BF4 VA: 0xA3BF4
public struct FixedUpdate.ClearLines // TypeDefIndex: 1474
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3C04 Offset: 0xA3C04 VA: 0xA3C04
public struct FixedUpdate.DirectorFixedSampleTime // TypeDefIndex: 1475
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3C14 Offset: 0xA3C14 VA: 0xA3C14
public struct FixedUpdate.AudioFixedUpdate // TypeDefIndex: 1476
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3C24 Offset: 0xA3C24 VA: 0xA3C24
public struct FixedUpdate.ScriptRunBehaviourFixedUpdate // TypeDefIndex: 1477
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3C34 Offset: 0xA3C34 VA: 0xA3C34
public struct FixedUpdate.DirectorFixedUpdate // TypeDefIndex: 1478
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3C44 Offset: 0xA3C44 VA: 0xA3C44
public struct FixedUpdate.LegacyFixedAnimationUpdate // TypeDefIndex: 1479
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3C54 Offset: 0xA3C54 VA: 0xA3C54
public struct FixedUpdate.XRFixedUpdate // TypeDefIndex: 1480
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3C64 Offset: 0xA3C64 VA: 0xA3C64
public struct FixedUpdate.PhysicsFixedUpdate // TypeDefIndex: 1481
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3C74 Offset: 0xA3C74 VA: 0xA3C74
public struct FixedUpdate.Physics2DFixedUpdate // TypeDefIndex: 1482
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3C84 Offset: 0xA3C84 VA: 0xA3C84
public struct FixedUpdate.DirectorFixedUpdatePostPhysics // TypeDefIndex: 1483
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3C94 Offset: 0xA3C94 VA: 0xA3C94
public struct FixedUpdate.ScriptRunDelayedFixedFrameRate // TypeDefIndex: 1484
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3CA4 Offset: 0xA3CA4 VA: 0xA3CA4
public struct FixedUpdate.NewInputFixedUpdate // TypeDefIndex: 1485
{}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0xA3CB4 Offset: 0xA3CB4 VA: 0xA3CB4
public struct PreUpdate // TypeDefIndex: 1486
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3CC4 Offset: 0xA3CC4 VA: 0xA3CC4
public struct PreUpdate.PhysicsUpdate // TypeDefIndex: 1487
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3CD4 Offset: 0xA3CD4 VA: 0xA3CD4
public struct PreUpdate.Physics2DUpdate // TypeDefIndex: 1488
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3CE4 Offset: 0xA3CE4 VA: 0xA3CE4
public struct PreUpdate.CheckTexFieldInput // TypeDefIndex: 1489
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3CF4 Offset: 0xA3CF4 VA: 0xA3CF4
public struct PreUpdate.IMGUISendQueuedEvents // TypeDefIndex: 1490
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3D04 Offset: 0xA3D04 VA: 0xA3D04
public struct PreUpdate.SendMouseEvents // TypeDefIndex: 1491
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3D14 Offset: 0xA3D14 VA: 0xA3D14
public struct PreUpdate.AIUpdate // TypeDefIndex: 1492
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3D24 Offset: 0xA3D24 VA: 0xA3D24
public struct PreUpdate.WindUpdate // TypeDefIndex: 1493
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3D34 Offset: 0xA3D34 VA: 0xA3D34
public struct PreUpdate.UpdateVideo // TypeDefIndex: 1494
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3D44 Offset: 0xA3D44 VA: 0xA3D44
public struct PreUpdate.NewInputUpdate // TypeDefIndex: 1495
{}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0xA3D54 Offset: 0xA3D54 VA: 0xA3D54
public struct Update // TypeDefIndex: 1496
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3D64 Offset: 0xA3D64 VA: 0xA3D64
public struct Update.ScriptRunBehaviourUpdate // TypeDefIndex: 1497
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3D74 Offset: 0xA3D74 VA: 0xA3D74
public struct Update.DirectorUpdate // TypeDefIndex: 1498
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3D84 Offset: 0xA3D84 VA: 0xA3D84
public struct Update.ScriptRunDelayedDynamicFrameRate // TypeDefIndex: 1499
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3D94 Offset: 0xA3D94 VA: 0xA3D94
public struct Update.ScriptRunDelayedTasks // TypeDefIndex: 1500
{}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0xA3DA4 Offset: 0xA3DA4 VA: 0xA3DA4
public struct PreLateUpdate // TypeDefIndex: 1501
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3DB4 Offset: 0xA3DB4 VA: 0xA3DB4
public struct PreLateUpdate.AIUpdatePostScript // TypeDefIndex: 1502
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3DC4 Offset: 0xA3DC4 VA: 0xA3DC4
public struct PreLateUpdate.DirectorUpdateAnimationBegin // TypeDefIndex: 1503
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3DD4 Offset: 0xA3DD4 VA: 0xA3DD4
public struct PreLateUpdate.LegacyAnimationUpdate // TypeDefIndex: 1504
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3DE4 Offset: 0xA3DE4 VA: 0xA3DE4
public struct PreLateUpdate.DirectorUpdateAnimationEnd // TypeDefIndex: 1505
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3DF4 Offset: 0xA3DF4 VA: 0xA3DF4
public struct PreLateUpdate.DirectorDeferredEvaluate // TypeDefIndex: 1506
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3E04 Offset: 0xA3E04 VA: 0xA3E04
public struct PreLateUpdate.UpdateNetworkManager // TypeDefIndex: 1507
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3E14 Offset: 0xA3E14 VA: 0xA3E14
public struct PreLateUpdate.UpdateMasterServerInterface // TypeDefIndex: 1508
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3E24 Offset: 0xA3E24 VA: 0xA3E24
public struct PreLateUpdate.UNetUpdate // TypeDefIndex: 1509
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3E34 Offset: 0xA3E34 VA: 0xA3E34
public struct PreLateUpdate.EndGraphicsJobsAfterScriptUpdate // TypeDefIndex: 1510
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3E44 Offset: 0xA3E44 VA: 0xA3E44
public struct PreLateUpdate.ParticleSystemBeginUpdateAll // TypeDefIndex: 1511
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3E54 Offset: 0xA3E54 VA: 0xA3E54
public struct PreLateUpdate.ScriptRunBehaviourLateUpdate // TypeDefIndex: 1512
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3E64 Offset: 0xA3E64 VA: 0xA3E64
public struct PreLateUpdate.ConstraintManagerUpdate // TypeDefIndex: 1513
{}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0xA3E74 Offset: 0xA3E74 VA: 0xA3E74
public struct PostLateUpdate // TypeDefIndex: 1514
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3E84 Offset: 0xA3E84 VA: 0xA3E84
public struct PostLateUpdate.PlayerSendFrameStarted // TypeDefIndex: 1515
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3E94 Offset: 0xA3E94 VA: 0xA3E94
public struct PostLateUpdate.UpdateRectTransform // TypeDefIndex: 1516
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3EA4 Offset: 0xA3EA4 VA: 0xA3EA4
public struct PostLateUpdate.UpdateCanvasRectTransform // TypeDefIndex: 1517
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3EB4 Offset: 0xA3EB4 VA: 0xA3EB4
public struct PostLateUpdate.PlayerUpdateCanvases // TypeDefIndex: 1518
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3EC4 Offset: 0xA3EC4 VA: 0xA3EC4
public struct PostLateUpdate.UpdateAudio // TypeDefIndex: 1519
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3ED4 Offset: 0xA3ED4 VA: 0xA3ED4
public struct PostLateUpdate.UpdateVideo // TypeDefIndex: 1520
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3EE4 Offset: 0xA3EE4 VA: 0xA3EE4
public struct PostLateUpdate.DirectorLateUpdate // TypeDefIndex: 1521
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3EF4 Offset: 0xA3EF4 VA: 0xA3EF4
public struct PostLateUpdate.ScriptRunDelayedDynamicFrameRate // TypeDefIndex: 1522
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3F04 Offset: 0xA3F04 VA: 0xA3F04
public struct PostLateUpdate.VFXUpdate // TypeDefIndex: 1523
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3F14 Offset: 0xA3F14 VA: 0xA3F14
public struct PostLateUpdate.ParticleSystemEndUpdateAll // TypeDefIndex: 1524
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3F24 Offset: 0xA3F24 VA: 0xA3F24
public struct PostLateUpdate.EndGraphicsJobsAfterScriptLateUpdate // TypeDefIndex: 1525
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3F34 Offset: 0xA3F34 VA: 0xA3F34
public struct PostLateUpdate.UpdateSubstance // TypeDefIndex: 1526
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3F44 Offset: 0xA3F44 VA: 0xA3F44
public struct PostLateUpdate.UpdateCustomRenderTextures // TypeDefIndex: 1527
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3F54 Offset: 0xA3F54 VA: 0xA3F54
public struct PostLateUpdate.UpdateAllRenderers // TypeDefIndex: 1528
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3F64 Offset: 0xA3F64 VA: 0xA3F64
public struct PostLateUpdate.EnlightenRuntimeUpdate // TypeDefIndex: 1529
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3F74 Offset: 0xA3F74 VA: 0xA3F74
public struct PostLateUpdate.UpdateAllSkinnedMeshes // TypeDefIndex: 1530
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3F84 Offset: 0xA3F84 VA: 0xA3F84
public struct PostLateUpdate.ProcessWebSendMessages // TypeDefIndex: 1531
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3F94 Offset: 0xA3F94 VA: 0xA3F94
public struct PostLateUpdate.SortingGroupsUpdate // TypeDefIndex: 1532
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3FA4 Offset: 0xA3FA4 VA: 0xA3FA4
public struct PostLateUpdate.UpdateVideoTextures // TypeDefIndex: 1533
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3FB4 Offset: 0xA3FB4 VA: 0xA3FB4
public struct PostLateUpdate.DirectorRenderImage // TypeDefIndex: 1534
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3FC4 Offset: 0xA3FC4 VA: 0xA3FC4
public struct PostLateUpdate.PlayerEmitCanvasGeometry // TypeDefIndex: 1535
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3FD4 Offset: 0xA3FD4 VA: 0xA3FD4
public struct PostLateUpdate.FinishFrameRendering // TypeDefIndex: 1536
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3FE4 Offset: 0xA3FE4 VA: 0xA3FE4
public struct PostLateUpdate.BatchModeUpdate // TypeDefIndex: 1537
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA3FF4 Offset: 0xA3FF4 VA: 0xA3FF4
public struct PostLateUpdate.PlayerSendFrameComplete // TypeDefIndex: 1538
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA4004 Offset: 0xA4004 VA: 0xA4004
public struct PostLateUpdate.UpdateCaptureScreenshot // TypeDefIndex: 1539
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA4014 Offset: 0xA4014 VA: 0xA4014
public struct PostLateUpdate.PresentAfterDraw // TypeDefIndex: 1540
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA4024 Offset: 0xA4024 VA: 0xA4024
public struct PostLateUpdate.ClearImmediateRenderers // TypeDefIndex: 1541
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA4034 Offset: 0xA4034 VA: 0xA4034
public struct PostLateUpdate.XRPostPresent // TypeDefIndex: 1542
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA4044 Offset: 0xA4044 VA: 0xA4044
public struct PostLateUpdate.UpdateResolution // TypeDefIndex: 1543
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA4054 Offset: 0xA4054 VA: 0xA4054
public struct PostLateUpdate.InputEndFrame // TypeDefIndex: 1544
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA4064 Offset: 0xA4064 VA: 0xA4064
public struct PostLateUpdate.GUIClearEvents // TypeDefIndex: 1545
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA4074 Offset: 0xA4074 VA: 0xA4074
public struct PostLateUpdate.ShaderHandleErrors // TypeDefIndex: 1546
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA4084 Offset: 0xA4084 VA: 0xA4084
public struct PostLateUpdate.ResetInputAxis // TypeDefIndex: 1547
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA4094 Offset: 0xA4094 VA: 0xA4094
public struct PostLateUpdate.ThreadedLoadingDebug // TypeDefIndex: 1548
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA40A4 Offset: 0xA40A4 VA: 0xA40A4
public struct PostLateUpdate.ProfilerSynchronizeStats // TypeDefIndex: 1549
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA40B4 Offset: 0xA40B4 VA: 0xA40B4
public struct PostLateUpdate.MemoryFrameMaintenance // TypeDefIndex: 1550
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA40C4 Offset: 0xA40C4 VA: 0xA40C4
public struct PostLateUpdate.ExecuteGameCenterCallbacks // TypeDefIndex: 1551
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA40D4 Offset: 0xA40D4 VA: 0xA40D4
public struct PostLateUpdate.ProfilerEndFrame // TypeDefIndex: 1552
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA40E4 Offset: 0xA40E4 VA: 0xA40E4
public struct PostLateUpdate.PlayerSendFramePostPresent // TypeDefIndex: 1553
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA40F4 Offset: 0xA40F4 VA: 0xA40F4
public struct PostLateUpdate.PhysicsSkinnedClothBeginUpdate // TypeDefIndex: 1554
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA4104 Offset: 0xA4104 VA: 0xA4104
public struct PostLateUpdate.PhysicsSkinnedClothFinishUpdate // TypeDefIndex: 1555
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xA4114 Offset: 0xA4114 VA: 0xA4114
public struct PostLateUpdate.TriggerEndOfFrameCallbacks // TypeDefIndex: 1556
{}

// Namespace: UnityEngine.Experimental.LowLevel
[NativeTypeAttribute] // RVA: 0xA4124 Offset: 0xA4124 VA: 0xA4124
[RequiredByNativeCodeAttribute] // RVA: 0xA4124 Offset: 0xA4124 VA: 0xA4124
internal struct PlayerLoopSystemInternal // TypeDefIndex: 1557
{
	// Fields
	public Type type; // 0x0
	public PlayerLoopSystem.UpdateFunction updateDelegate; // 0x4
	public IntPtr updateFunction; // 0x8
	public IntPtr loopConditionFunction; // 0xC
	public int numSubSystems; // 0x10
}

// Namespace: UnityEngine.Experimental.LowLevel
public struct PlayerLoopSystem // TypeDefIndex: 1558
{
	// Fields
	public Type type; // 0x0
	public PlayerLoopSystem[] subSystemList; // 0x4
	public PlayerLoopSystem.UpdateFunction updateDelegate; // 0x8
	public IntPtr updateFunction; // 0xC
	public IntPtr loopConditionFunction; // 0x10
}

// Namespace: 
public sealed class PlayerLoopSystem.UpdateFunction : MulticastDelegate // TypeDefIndex: 1559
{
	// Methods

	// RVA: 0x31D2B4 Offset: 0x31D2B4 VA: 0x31D2B4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x31D2C8 Offset: 0x31D2C8 VA: 0x31D2C8 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x31D4D8 Offset: 0x31D4D8 VA: 0x31D4D8 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x31D504 Offset: 0x31D504 VA: 0x31D504 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public class PlayerPrefsException : Exception // TypeDefIndex: 1560
{
	// Methods

	// RVA: 0x2C92E8 Offset: 0x2C92E8 VA: 0x2C92E8
	public void .ctor(string error) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA418C Offset: 0xA418C VA: 0xA418C
public class PlayerPrefs // TypeDefIndex: 1561
{
	// Methods

	[NativeMethodAttribute] // RVA: 0xAB05C Offset: 0xAB05C VA: 0xAB05C
	// RVA: 0x2C9180 Offset: 0x2C9180 VA: 0x2C9180
	private static bool TrySetInt(string key, int value) { }

	// RVA: 0x2C9230 Offset: 0x2C9230 VA: 0x2C9230
	public static void SetInt(string key, int value) { }

	// RVA: 0x2C92F0 Offset: 0x2C92F0 VA: 0x2C92F0
	public static int GetInt(string key, int defaultValue) { }

	// RVA: 0x2C939C Offset: 0x2C939C VA: 0x2C939C
	public static int GetInt(string key) { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xA41D8 Offset: 0xA41D8 VA: 0xA41D8
public abstract class PropertyAttribute : Attribute // TypeDefIndex: 1562
{
	// Methods

	// RVA: 0x2C9BD8 Offset: 0x2C9BD8 VA: 0x2C9BD8
	protected void .ctor() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xA421C Offset: 0xA421C VA: 0xA421C
public class TooltipAttribute : PropertyAttribute // TypeDefIndex: 1563
{
	// Fields
	public readonly string tooltip; // 0x8

	// Methods

	// RVA: 0x2D616C Offset: 0x2D616C VA: 0x2D616C
	public void .ctor(string tooltip) { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xA4260 Offset: 0xA4260 VA: 0xA4260
public class SpaceAttribute : PropertyAttribute // TypeDefIndex: 1564
{
	// Fields
	public readonly float height; // 0x8

	// Methods

	// RVA: 0x2D2534 Offset: 0x2D2534 VA: 0x2D2534
	public void .ctor() { }

	// RVA: 0x2D2554 Offset: 0x2D2554 VA: 0x2D2554
	public void .ctor(float height) { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xA42A4 Offset: 0xA42A4 VA: 0xA42A4
public sealed class RangeAttribute : PropertyAttribute // TypeDefIndex: 1565
{
	// Fields
	public readonly float min; // 0x8
	public readonly float max; // 0xC

	// Methods

	// RVA: 0x2CAC34 Offset: 0x2CAC34 VA: 0x2CAC34
	public void .ctor(float min, float max) { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xA42E8 Offset: 0xA42E8 VA: 0xA42E8
public sealed class TextAreaAttribute : PropertyAttribute // TypeDefIndex: 1566
{
	// Fields
	public readonly int minLines; // 0x8
	public readonly int maxLines; // 0xC

	// Methods

	// RVA: 0x2D4EB8 Offset: 0x2D4EB8 VA: 0x2D4EB8
	public void .ctor(int minLines, int maxLines) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA432C Offset: 0xA432C VA: 0xA432C
internal class PropertyNameUtils // TypeDefIndex: 1567
{
	// Methods

	[FreeFunctionAttribute] // RVA: 0xAB090 Offset: 0xAB090 VA: 0xAB090
	// RVA: 0x2C9C18 Offset: 0x2C9C18 VA: 0x2C9C18
	public static PropertyName PropertyNameFromString(string name) { }

	// RVA: 0x2C9E00 Offset: 0x2C9E00 VA: 0x2C9E00
	private static void PropertyNameFromString_Injected(string name, out PropertyName ret) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xA437C Offset: 0xA437C VA: 0xA437C
public struct PropertyName : IEquatable<PropertyName> // TypeDefIndex: 1568
{
	// Fields
	internal int id; // 0x0

	// Methods

	// RVA: 0xC7C04 Offset: 0xC7C04 VA: 0xC7C04
	public void .ctor(string name) { }

	// RVA: 0xC7C3C Offset: 0xC7C3C VA: 0xC7C3C
	public void .ctor(PropertyName other) { }

	// RVA: 0xC7C44 Offset: 0xC7C44 VA: 0xC7C44
	public void .ctor(int id) { }

	// RVA: 0x2C9C50 Offset: 0x2C9C50 VA: 0x2C9C50
	public static bool op_Equality(PropertyName lhs, PropertyName rhs) { }

	// RVA: 0xC7C4C Offset: 0xC7C4C VA: 0xC7C4C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xC7C54 Offset: 0xC7C54 VA: 0xC7C54 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xC7C5C Offset: 0xC7C5C VA: 0xC7C5C Slot: 4
	public bool Equals(PropertyName other) { }

	// RVA: 0x2C9D14 Offset: 0x2C9D14 VA: 0x2C9D14
	public static PropertyName op_Implicit(string name) { }

	// RVA: 0x2C9D3C Offset: 0x2C9D3C VA: 0x2C9D3C
	public static PropertyName op_Implicit(int id) { }

	// RVA: 0xC7C70 Offset: 0xC7C70 VA: 0xC7C70 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA438C Offset: 0xA438C VA: 0xA438C
public sealed class Random // TypeDefIndex: 1569
{
	// Methods

	// RVA: 0x2CAB80 Offset: 0x2CAB80 VA: 0x2CAB80
	public static int Range(int min, int max) { }

	[FreeFunctionAttribute] // RVA: 0xAB0A0 Offset: 0xAB0A0 VA: 0xAB0A0
	// RVA: 0x2CAB84 Offset: 0x2CAB84 VA: 0x2CAB84
	private static int RandomRangeInt(int min, int max) { }
}

// Namespace: UnityEngine
public struct RangeInt // TypeDefIndex: 1570
{
	// Fields
	public int start; // 0x0
	public int length; // 0x4

	// Properties
	public int end { get; }

	// Methods

	// RVA: 0xC7CC8 Offset: 0xC7CC8 VA: 0xC7CC8
	public void .ctor(int start, int length) { }

	// RVA: 0xC7CD4 Offset: 0xC7CD4 VA: 0xC7CD4
	public int get_end() { }
}

// Namespace: UnityEngine
public struct Ray // TypeDefIndex: 1571
{
	// Fields
	private Vector3 m_Origin; // 0x0
	private Vector3 m_Direction; // 0xC

	// Properties
	public Vector3 origin { get; }
	public Vector3 direction { get; }

	// Methods

	// RVA: 0xC7CE4 Offset: 0xC7CE4 VA: 0xC7CE4
	public void .ctor(Vector3 origin, Vector3 direction) { }

	// RVA: 0xC7D14 Offset: 0xC7D14 VA: 0xC7D14
	public Vector3 get_origin() { }

	// RVA: 0xC7D28 Offset: 0xC7D28 VA: 0xC7D28
	public Vector3 get_direction() { }

	// RVA: 0xC7D3C Offset: 0xC7D3C VA: 0xC7D3C
	public Vector3 GetPoint(float distance) { }

	// RVA: 0xC7D50 Offset: 0xC7D50 VA: 0xC7D50 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA43DC Offset: 0xA43DC VA: 0xA43DC
[NativeHeaderAttribute] // RVA: 0xA43DC Offset: 0xA43DC VA: 0xA43DC
[NativeClassAttribute] // RVA: 0xA43DC Offset: 0xA43DC VA: 0xA43DC
public struct Rect : IEquatable<Rect> // TypeDefIndex: 1572
{
	// Fields
	[NativeNameAttribute] // RVA: 0xA731C Offset: 0xA731C VA: 0xA731C
	private float m_XMin; // 0x0
	[NativeNameAttribute] // RVA: 0xA734C Offset: 0xA734C VA: 0xA734C
	private float m_YMin; // 0x4
	[NativeNameAttribute] // RVA: 0xA737C Offset: 0xA737C VA: 0xA737C
	private float m_Width; // 0x8
	[NativeNameAttribute] // RVA: 0xA73B0 Offset: 0xA73B0 VA: 0xA73B0
	private float m_Height; // 0xC

	// Properties
	public static Rect zero { get; }
	public float x { get; set; }
	public float y { get; set; }
	public Vector2 position { get; }
	public Vector2 center { get; }
	public Vector2 min { get; }
	public Vector2 max { get; }
	public float width { get; set; }
	public float height { get; set; }
	public Vector2 size { get; }
	public float xMin { get; set; }
	public float yMin { get; set; }
	public float xMax { get; set; }
	public float yMax { get; set; }

	// Methods

	// RVA: 0xC7D58 Offset: 0xC7D58 VA: 0xC7D58
	public void .ctor(float x, float y, float width, float height) { }

	[CompilerGeneratedAttribute] // RVA: 0xAB0B0 Offset: 0xAB0B0 VA: 0xAB0B0
	// RVA: 0x2CB020 Offset: 0x2CB020 VA: 0x2CB020
	public static Rect get_zero() { }

	// RVA: 0xC7D6C Offset: 0xC7D6C VA: 0xC7D6C
	public float get_x() { }

	// RVA: 0xC7D74 Offset: 0xC7D74 VA: 0xC7D74
	public void set_x(float value) { }

	// RVA: 0xC7D7C Offset: 0xC7D7C VA: 0xC7D7C
	public float get_y() { }

	// RVA: 0xC7D84 Offset: 0xC7D84 VA: 0xC7D84
	public void set_y(float value) { }

	// RVA: 0xC7D8C Offset: 0xC7D8C VA: 0xC7D8C
	public Vector2 get_position() { }

	// RVA: 0xC7DA0 Offset: 0xC7DA0 VA: 0xC7DA0
	public Vector2 get_center() { }

	// RVA: 0xC7DD0 Offset: 0xC7DD0 VA: 0xC7DD0
	public Vector2 get_min() { }

	// RVA: 0xC7DE4 Offset: 0xC7DE4 VA: 0xC7DE4
	public Vector2 get_max() { }

	// RVA: 0xC7E08 Offset: 0xC7E08 VA: 0xC7E08
	public float get_width() { }

	// RVA: 0xC7E10 Offset: 0xC7E10 VA: 0xC7E10
	public void set_width(float value) { }

	// RVA: 0xC7E18 Offset: 0xC7E18 VA: 0xC7E18
	public float get_height() { }

	// RVA: 0xC7E20 Offset: 0xC7E20 VA: 0xC7E20
	public void set_height(float value) { }

	// RVA: 0xC7E28 Offset: 0xC7E28 VA: 0xC7E28
	public Vector2 get_size() { }

	// RVA: 0xC7E3C Offset: 0xC7E3C VA: 0xC7E3C
	public float get_xMin() { }

	// RVA: 0xC7E44 Offset: 0xC7E44 VA: 0xC7E44
	public void set_xMin(float value) { }

	// RVA: 0xC7E64 Offset: 0xC7E64 VA: 0xC7E64
	public float get_yMin() { }

	// RVA: 0xC7E6C Offset: 0xC7E6C VA: 0xC7E6C
	public void set_yMin(float value) { }

	// RVA: 0xC7E8C Offset: 0xC7E8C VA: 0xC7E8C
	public float get_xMax() { }

	// RVA: 0xC7EA0 Offset: 0xC7EA0 VA: 0xC7EA0
	public void set_xMax(float value) { }

	// RVA: 0xC7EB4 Offset: 0xC7EB4 VA: 0xC7EB4
	public float get_yMax() { }

	// RVA: 0xC7EC8 Offset: 0xC7EC8 VA: 0xC7EC8
	public void set_yMax(float value) { }

	// RVA: 0xC7EDC Offset: 0xC7EDC VA: 0xC7EDC
	public bool Contains(Vector3 point) { }

	// RVA: 0x2CB204 Offset: 0x2CB204 VA: 0x2CB204
	private static Rect OrderMinMax(Rect rect) { }

	// RVA: 0xC7F3C Offset: 0xC7F3C VA: 0xC7F3C
	public bool Overlaps(Rect other) { }

	// RVA: 0xC7F60 Offset: 0xC7F60 VA: 0xC7F60
	public bool Overlaps(Rect other, bool allowInverse) { }

	// RVA: 0x2CB3D4 Offset: 0x2CB3D4 VA: 0x2CB3D4
	public static bool op_Inequality(Rect lhs, Rect rhs) { }

	// RVA: 0x2CB440 Offset: 0x2CB440 VA: 0x2CB440
	public static bool op_Equality(Rect lhs, Rect rhs) { }

	// RVA: 0xC7F88 Offset: 0xC7F88 VA: 0xC7F88 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xC7F90 Offset: 0xC7F90 VA: 0xC7F90 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xC7F98 Offset: 0xC7F98 VA: 0xC7F98 Slot: 4
	public bool Equals(Rect other) { }

	// RVA: 0xC7FBC Offset: 0xC7FBC VA: 0xC7FBC Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA44CC Offset: 0xA44CC VA: 0xA44CC
public sealed class ReflectionProbe : Behaviour // TypeDefIndex: 1573
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA73E4 Offset: 0xA73E4 VA: 0xA73E4
	[DebuggerBrowsableAttribute] // RVA: 0xA73E4 Offset: 0xA73E4 VA: 0xA73E4
	private static Action<ReflectionProbe, ReflectionProbe.ReflectionProbeEvent> reflectionProbeChanged; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xA7418 Offset: 0xA7418 VA: 0xA7418
	[DebuggerBrowsableAttribute] // RVA: 0xA7418 Offset: 0xA7418 VA: 0xA7418
	private static Action<Cubemap> defaultReflectionSet; // 0x4

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAB0C0 Offset: 0xAB0C0 VA: 0xAB0C0
	// RVA: 0x2CDF04 Offset: 0x2CDF04 VA: 0x2CDF04
	private static void CallReflectionProbeEvent(ReflectionProbe probe, ReflectionProbe.ReflectionProbeEvent probeEvent) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAB0D0 Offset: 0xAB0D0 VA: 0xAB0D0
	// RVA: 0x2CDF90 Offset: 0x2CDF90 VA: 0x2CDF90
	private static void CallSetDefaultReflection(Cubemap defaultReflectionCubemap) { }
}

// Namespace: 
public enum ReflectionProbe.ReflectionProbeEvent // TypeDefIndex: 1574
{
	// Fields
	public int value__; // 0x0
	public const ReflectionProbe.ReflectionProbeEvent ReflectionProbeAdded = 0;
	public const ReflectionProbe.ReflectionProbeEvent ReflectionProbeRemoved = 1;
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA4500 Offset: 0xA4500 VA: 0xA4500
public class ResourceRequest : AsyncOperation // TypeDefIndex: 1575
{
	// Fields
	internal string m_Path; // 0x10
	internal Type m_Type; // 0x14
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA4510 Offset: 0xA4510 VA: 0xA4510
[NativeHeaderAttribute] // RVA: 0xA4510 Offset: 0xA4510 VA: 0xA4510
public sealed class Resources // TypeDefIndex: 1576
{
	// Methods

	[FreeFunctionAttribute] // RVA: 0xAB0E0 Offset: 0xAB0E0 VA: 0xAB0E0
	[TypeInferenceRuleAttribute] // RVA: 0xAB0E0 Offset: 0xAB0E0 VA: 0xAB0E0
	// RVA: 0x2CF76C Offset: 0x2CF76C VA: 0x2CF76C
	public static Object GetBuiltinResource(Type type, string path) { }

	// RVA: -1 Offset: -1
	public static T GetBuiltinResource<T>(string path) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BCC50 Offset: 0x5BCC50 VA: 0x5BCC50
	|-Resources.GetBuiltinResource<Font>
	|-Resources.GetBuiltinResource<object>
	*/
}

// Namespace: UnityEngine
public enum RuntimeInitializeLoadType // TypeDefIndex: 1577
{
	// Fields
	public int value__; // 0x0
	public const RuntimeInitializeLoadType AfterSceneLoad = 0;
	public const RuntimeInitializeLoadType BeforeSceneLoad = 1;
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xA45AC Offset: 0xA45AC VA: 0xA45AC
public class RuntimeInitializeOnLoadMethodAttribute : PreserveAttribute // TypeDefIndex: 1578
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA744C Offset: 0xA744C VA: 0xA744C
	[DebuggerBrowsableAttribute] // RVA: 0xA744C Offset: 0xA744C VA: 0xA744C
	private RuntimeInitializeLoadType <loadType>k__BackingField; // 0x8

	// Properties
	private RuntimeInitializeLoadType loadType { set; }

	// Methods

	// RVA: 0x2CF7EC Offset: 0x2CF7EC VA: 0x2CF7EC
	public void .ctor(RuntimeInitializeLoadType loadType) { }

	[CompilerGeneratedAttribute] // RVA: 0xAB140 Offset: 0xAB140 VA: 0xAB140
	// RVA: 0x2CF814 Offset: 0x2CF814 VA: 0x2CF814
	private void set_loadType(RuntimeInitializeLoadType value) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA45E0 Offset: 0xA45E0 VA: 0xA45E0
[ExtensionOfNativeClassAttribute] // RVA: 0xA45E0 Offset: 0xA45E0 VA: 0xA45E0
[NativeClassAttribute] // RVA: 0xA45E0 Offset: 0xA45E0 VA: 0xA45E0
[NativeHeaderAttribute] // RVA: 0xA45E0 Offset: 0xA45E0 VA: 0xA45E0
public class ScriptableObject : Object // TypeDefIndex: 1579
{
	// Methods

	// RVA: 0x2C37C0 Offset: 0x2C37C0 VA: 0x2C37C0
	public void .ctor() { }

	// RVA: 0x2CFFE8 Offset: 0x2CFFE8 VA: 0x2CFFE8
	public static ScriptableObject CreateInstance(Type type) { }

	// RVA: -1 Offset: -1
	public static T CreateInstance<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BCD94 Offset: 0x5BCD94 VA: 0x5BCD94
	|-ScriptableObject.CreateInstance<object>
	|-ScriptableObject.CreateInstance<PlayerConnection>
	*/

	[NativeMethodAttribute] // RVA: 0xAB150 Offset: 0xAB150 VA: 0xAB150
	// RVA: 0x2CFF70 Offset: 0x2CFF70 VA: 0x2CFF70
	private static void CreateScriptableObject(ScriptableObject self) { }

	[FreeFunctionAttribute] // RVA: 0xAB180 Offset: 0xAB180 VA: 0xAB180
	// RVA: 0x2CFFEC Offset: 0x2CFFEC VA: 0x2CFFEC
	private static ScriptableObject CreateScriptableObjectInstanceFromType(Type type) { }
}

// Namespace: UnityEngine.Experimental.Rendering
[NativeHeaderAttribute] // RVA: 0xA464C Offset: 0xA464C VA: 0xA464C
[NativeTypeAttribute] // RVA: 0xA464C Offset: 0xA464C VA: 0xA464C
[NativeHeaderAttribute] // RVA: 0xA464C Offset: 0xA464C VA: 0xA464C
[NativeHeaderAttribute] // RVA: 0xA464C Offset: 0xA464C VA: 0xA464C
public struct ScriptableRenderContext // TypeDefIndex: 1580
{
	// Fields
	private IntPtr m_Ptr; // 0x0

	// Methods

	// RVA: 0xC9490 Offset: 0xC9490 VA: 0xC9490
	internal void .ctor(IntPtr ptr) { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xA473C Offset: 0xA473C VA: 0xA473C
public class SelectionBaseAttribute : Attribute // TypeDefIndex: 1581
{
	// Methods

	// RVA: 0x2D00C4 Offset: 0x2D00C4 VA: 0x2D00C4
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA4780 Offset: 0xA4780 VA: 0xA4780
[ObsoleteAttribute] // RVA: 0xA4780 Offset: 0xA4780 VA: 0xA4780
public sealed class SerializePrivateVariables : Attribute // TypeDefIndex: 1582
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA47C8 Offset: 0xA47C8 VA: 0xA47C8
public sealed class SerializeField : Attribute // TypeDefIndex: 1583
{
	// Methods

	// RVA: 0x2D2138 Offset: 0x2D2138 VA: 0x2D2138
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA47D8 Offset: 0xA47D8 VA: 0xA47D8
[AttributeUsageAttribute] // RVA: 0xA47D8 Offset: 0xA47D8 VA: 0xA47D8
public sealed class PreferBinarySerialization : Attribute // TypeDefIndex: 1584
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA480C Offset: 0xA480C VA: 0xA480C
public interface ISerializationCallbackReceiver // TypeDefIndex: 1585
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAB1D8 Offset: 0xAB1D8 VA: 0xAB1D8
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnBeforeSerialize();

	[RequiredByNativeCodeAttribute] // RVA: 0xAB1E8 Offset: 0xAB1E8 VA: 0xAB1E8
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void OnAfterDeserialize();
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xA481C Offset: 0xA481C VA: 0xA481C
[NativeHeaderAttribute] // RVA: 0xA481C Offset: 0xA481C VA: 0xA481C
public sealed class ComputeShader : Object // TypeDefIndex: 1586
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAB1F8 Offset: 0xAB1F8 VA: 0xAB1F8
	[NativeMethodAttribute] // RVA: 0xAB1F8 Offset: 0xAB1F8 VA: 0xAB1F8
	// RVA: 0x3180B8 Offset: 0x3180B8 VA: 0x3180B8
	public int FindKernel(string name) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA4864 Offset: 0xA4864 VA: 0xA4864
public struct SortingLayer // TypeDefIndex: 1587
{
	// Fields
	private int m_Id; // 0x0

	// Methods

	[FreeFunctionAttribute] // RVA: 0xAB298 Offset: 0xAB298 VA: 0xAB298
	// RVA: 0x2D2490 Offset: 0x2D2490 VA: 0x2D2490
	public static int GetLayerValueFromID(int id) { }
}

// Namespace: UnityEngine
public static class StackTraceUtility // TypeDefIndex: 1588
{
	// Fields
	private static string projectFolder; // 0x0

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAB2F8 Offset: 0xAB2F8 VA: 0xAB2F8
	// RVA: 0x2D3508 Offset: 0x2D3508 VA: 0x2D3508
	internal static void SetProjectFolder(string folder) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAB308 Offset: 0xAB308 VA: 0xAB308
	// RVA: 0x2D3688 Offset: 0x2D3688 VA: 0x2D3688
	public static string ExtractStackTrace() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAB318 Offset: 0xAB318 VA: 0xAB318
	// RVA: 0x2D4464 Offset: 0x2D4464 VA: 0x2D4464
	internal static void ExtractStringFromExceptionInternal(object exceptiono, out string message, out string stackTrace) { }

	// RVA: 0x2D3754 Offset: 0x2D3754 VA: 0x2D3754
	internal static string ExtractFormattedStackTrace(StackTrace stackTrace) { }

	// RVA: 0x2D49D8 Offset: 0x2D49D8 VA: 0x2D49D8
	private static void .cctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA4898 Offset: 0xA4898 VA: 0xA4898
[Serializable]
public class UnityException : Exception // TypeDefIndex: 1589
{
	// Methods

	// RVA: 0x2D8880 Offset: 0x2D8880 VA: 0x2D8880
	public void .ctor() { }

	// RVA: 0x2C2A70 Offset: 0x2C2A70 VA: 0x2C2A70
	public void .ctor(string message) { }

	// RVA: 0x2D88FC Offset: 0x2D88FC VA: 0x2D88FC
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: UnityEngine
public enum OperatingSystemFamily // TypeDefIndex: 1590
{
	// Fields
	public int value__; // 0x0
	public const OperatingSystemFamily Other = 0;
	public const OperatingSystemFamily MacOSX = 1;
	public const OperatingSystemFamily Windows = 2;
	public const OperatingSystemFamily Linux = 3;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA48A8 Offset: 0xA48A8 VA: 0xA48A8
[NativeHeaderAttribute] // RVA: 0xA48A8 Offset: 0xA48A8 VA: 0xA48A8
[NativeHeaderAttribute] // RVA: 0xA48A8 Offset: 0xA48A8 VA: 0xA48A8
[NativeHeaderAttribute] // RVA: 0xA48A8 Offset: 0xA48A8 VA: 0xA48A8
[NativeHeaderAttribute] // RVA: 0xA48A8 Offset: 0xA48A8 VA: 0xA48A8
public sealed class SystemInfo // TypeDefIndex: 1591
{
	// Properties
	public static OperatingSystemFamily operatingSystemFamily { get; }

	// Methods

	// RVA: 0x2D4A4C Offset: 0x2D4A4C VA: 0x2D4A4C
	public static OperatingSystemFamily get_operatingSystemFamily() { }

	// RVA: 0x2D4AE8 Offset: 0x2D4AE8 VA: 0x2D4AE8
	private static bool IsValidEnumValue(Enum value) { }

	// RVA: 0x2D4B90 Offset: 0x2D4B90 VA: 0x2D4B90
	public static bool SupportsRenderTextureFormat(RenderTextureFormat format) { }

	// RVA: 0x2D4CE4 Offset: 0x2D4CE4 VA: 0x2D4CE4
	public static bool SupportsTextureFormat(TextureFormat format) { }

	[FreeFunctionAttribute] // RVA: 0xAB328 Offset: 0xAB328 VA: 0xAB328
	// RVA: 0x2D4A50 Offset: 0x2D4A50 VA: 0x2D4A50
	private static OperatingSystemFamily GetOperatingSystemFamily() { }

	[FreeFunctionAttribute] // RVA: 0xAB37C Offset: 0xAB37C VA: 0xAB37C
	// RVA: 0x2D4C6C Offset: 0x2D4C6C VA: 0x2D4C6C
	private static bool HasRenderTextureNative(RenderTextureFormat format) { }

	[FreeFunctionAttribute] // RVA: 0xAB3D0 Offset: 0xAB3D0 VA: 0xAB3D0
	// RVA: 0x2D4DC0 Offset: 0x2D4DC0 VA: 0x2D4DC0
	private static bool SupportsTextureFormatNative(TextureFormat format) { }

	[FreeFunctionAttribute] // RVA: 0xAB42C Offset: 0xAB42C VA: 0xAB42C
	// RVA: 0x2D4E38 Offset: 0x2D4E38 VA: 0x2D4E38
	public static bool IsFormatSupported(GraphicsFormat format, FormatUsage usage) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xA49D4 Offset: 0xA49D4 VA: 0xA49D4
[NativeHeaderAttribute] // RVA: 0xA49D4 Offset: 0xA49D4 VA: 0xA49D4
[NativeHeaderAttribute] // RVA: 0xA49D4 Offset: 0xA49D4 VA: 0xA49D4
public class Texture : Object // TypeDefIndex: 1592
{
	// Properties
	public virtual int width { get; set; }
	public virtual int height { get; set; }
	public virtual bool isReadable { get; }
	public TextureWrapMode wrapMode { get; }
	public Vector2 texelSize { get; }

	// Methods

	// RVA: 0x2CE018 Offset: 0x2CE018 VA: 0x2CE018
	protected void .ctor() { }

	// RVA: 0x2D4EE0 Offset: 0x2D4EE0 VA: 0x2D4EE0
	private int GetDataWidth() { }

	// RVA: 0x2D4F6C Offset: 0x2D4F6C VA: 0x2D4F6C
	private int GetDataHeight() { }

	// RVA: 0x2D4FFC Offset: 0x2D4FFC VA: 0x2D4FFC Slot: 4
	public virtual int get_width() { }

	// RVA: 0x2D5000 Offset: 0x2D5000 VA: 0x2D5000 Slot: 5
	public virtual void set_width(int value) { }

	// RVA: 0x2D5088 Offset: 0x2D5088 VA: 0x2D5088 Slot: 6
	public virtual int get_height() { }

	// RVA: 0x2D508C Offset: 0x2D508C VA: 0x2D508C Slot: 7
	public virtual void set_height(int value) { }

	// RVA: 0x2D5114 Offset: 0x2D5114 VA: 0x2D5114 Slot: 8
	public virtual bool get_isReadable() { }

	[NativeNameAttribute] // RVA: 0xAB484 Offset: 0xAB484 VA: 0xAB484
	// RVA: 0x2D51A4 Offset: 0x2D51A4 VA: 0x2D51A4
	public TextureWrapMode get_wrapMode() { }

	[NativeNameAttribute] // RVA: 0xAB4C0 Offset: 0xAB4C0 VA: 0xAB4C0
	// RVA: 0x2D5230 Offset: 0x2D5230 VA: 0x2D5230
	public Vector2 get_texelSize() { }

	// RVA: 0x2CEC74 Offset: 0x2CEC74 VA: 0x2CEC74
	internal bool ValidateFormat(RenderTextureFormat format) { }

	// RVA: 0x2D52EC Offset: 0x2D52EC VA: 0x2D52EC
	internal bool ValidateFormat(TextureFormat format) { }

	// RVA: 0x2CE7FC Offset: 0x2CE7FC VA: 0x2CE7FC
	internal bool ValidateFormat(GraphicsFormat format, FormatUsage usage) { }

	// RVA: 0x2D54E8 Offset: 0x2D54E8 VA: 0x2D54E8
	internal UnityException CreateNonReadableException(Texture t) { }

	// RVA: 0x2D526C Offset: 0x2D526C VA: 0x2D526C
	private void get_texelSize_Injected(out Vector2 ret) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA4A7C Offset: 0xA4A7C VA: 0xA4A7C
[UsedByNativeCodeAttribute] // RVA: 0xA4A7C Offset: 0xA4A7C VA: 0xA4A7C
[NativeHeaderAttribute] // RVA: 0xA4A7C Offset: 0xA4A7C VA: 0xA4A7C
public sealed class Texture2D : Texture // TypeDefIndex: 1593
{
	// Properties
	public TextureFormat format { get; }
	[StaticAccessorAttribute] // RVA: 0xAD25C Offset: 0xAD25C VA: 0xAD25C
	public static Texture2D whiteTexture { get; }
	public override bool isReadable { get; }

	// Methods

	[NativeNameAttribute] // RVA: 0xAB500 Offset: 0xAB500 VA: 0xAB500
	// RVA: 0x2C9AB8 Offset: 0x2C9AB8 VA: 0x2C9AB8
	public TextureFormat get_format() { }

	// RVA: 0x2D55D8 Offset: 0x2D55D8 VA: 0x2D55D8
	public static Texture2D get_whiteTexture() { }

	// RVA: 0x2D5668 Offset: 0x2D5668 VA: 0x2D5668 Slot: 8
	public override bool get_isReadable() { }

	[NativeNameAttribute] // RVA: 0xAB540 Offset: 0xAB540 VA: 0xAB540
	// RVA: 0x2D56F8 Offset: 0x2D56F8 VA: 0x2D56F8
	private Color GetPixelBilinearImpl(int image, float x, float y) { }

	[FreeFunctionAttribute] // RVA: 0xAB580 Offset: 0xAB580 VA: 0xAB580
	// RVA: 0x2C9844 Offset: 0x2C9844 VA: 0x2C9844
	public byte[] GetRawTextureData() { }

	// RVA: 0x2D57D0 Offset: 0x2D57D0 VA: 0x2D57D0
	public Color GetPixelBilinear(float x, float y) { }

	// RVA: 0x2D5740 Offset: 0x2D5740 VA: 0x2D5740
	private void GetPixelBilinearImpl_Injected(int image, float x, float y, out Color ret) { }
}

// Namespace: UnityEngine
[ExcludeFromPresetAttribute] // RVA: 0xA4B24 Offset: 0xA4B24 VA: 0xA4B24
[NativeHeaderAttribute] // RVA: 0xA4B24 Offset: 0xA4B24 VA: 0xA4B24
public sealed class Cubemap : Texture // TypeDefIndex: 1594
{
	// Properties
	public override bool isReadable { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAB5E4 Offset: 0xAB5E4 VA: 0xAB5E4
	// RVA: 0x318270 Offset: 0x318270 VA: 0x318270
	public void .ctor(int width, GraphicsFormat format, TextureCreationFlags flags) { }

	// RVA: 0x3183EC Offset: 0x3183EC VA: 0x3183EC
	internal void .ctor(int width, TextureFormat textureFormat, bool mipChain, IntPtr nativeTex) { }

	// RVA: 0x318498 Offset: 0x318498 VA: 0x318498
	public void .ctor(int width, TextureFormat textureFormat, bool mipChain) { }

	[FreeFunctionAttribute] // RVA: 0xAB5F4 Offset: 0xAB5F4 VA: 0xAB5F4
	// RVA: 0x318514 Offset: 0x318514 VA: 0x318514
	private static bool Internal_CreateImpl(Cubemap mono, int ext, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex) { }

	// RVA: 0x318314 Offset: 0x318314 VA: 0x318314
	private static void Internal_Create(Cubemap mono, int ext, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex) { }

	// RVA: 0x3185A4 Offset: 0x3185A4 VA: 0x3185A4 Slot: 8
	public override bool get_isReadable() { }
}

// Namespace: UnityEngine
[ExcludeFromPresetAttribute] // RVA: 0xA4B88 Offset: 0xA4B88 VA: 0xA4B88
[NativeHeaderAttribute] // RVA: 0xA4B88 Offset: 0xA4B88 VA: 0xA4B88
public sealed class Texture3D : Texture // TypeDefIndex: 1595
{
	// Properties
	public override bool isReadable { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAB63C Offset: 0xAB63C VA: 0xAB63C
	// RVA: 0x2D5BD0 Offset: 0x2D5BD0 VA: 0x2D5BD0
	public void .ctor(int width, int height, int depth, GraphicsFormat format, TextureCreationFlags flags) { }

	// RVA: 0x2D5D10 Offset: 0x2D5D10 VA: 0x2D5D10
	public void .ctor(int width, int height, int depth, TextureFormat textureFormat, bool mipChain) { }

	// RVA: 0x2D5D90 Offset: 0x2D5D90 VA: 0x2D5D90 Slot: 8
	public override bool get_isReadable() { }

	[FreeFunctionAttribute] // RVA: 0xAB64C Offset: 0xAB64C VA: 0xAB64C
	// RVA: 0x2D5E20 Offset: 0x2D5E20 VA: 0x2D5E20
	private static bool Internal_CreateImpl(Texture3D mono, int w, int h, int d, GraphicsFormat format, TextureCreationFlags flags) { }

	// RVA: 0x2D5C34 Offset: 0x2D5C34 VA: 0x2D5C34
	private static void Internal_Create(Texture3D mono, int w, int h, int d, GraphicsFormat format, TextureCreationFlags flags) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA4BE8 Offset: 0xA4BE8 VA: 0xA4BE8
public sealed class Texture2DArray : Texture // TypeDefIndex: 1596
{
	// Properties
	public override bool isReadable { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAB694 Offset: 0xAB694 VA: 0xAB694
	// RVA: 0x2D58B8 Offset: 0x2D58B8 VA: 0x2D58B8
	public void .ctor(int width, int height, int depth, GraphicsFormat format, TextureCreationFlags flags) { }

	// RVA: 0x2D59F8 Offset: 0x2D59F8 VA: 0x2D59F8
	public void .ctor(int width, int height, int depth, TextureFormat textureFormat, bool mipChain, bool linear) { }

	// RVA: 0x2D5A7C Offset: 0x2D5A7C VA: 0x2D5A7C
	public void .ctor(int width, int height, int depth, TextureFormat textureFormat, bool mipChain) { }

	// RVA: 0x2D5AA8 Offset: 0x2D5AA8 VA: 0x2D5AA8 Slot: 8
	public override bool get_isReadable() { }

	[FreeFunctionAttribute] // RVA: 0xAB6A4 Offset: 0xAB6A4 VA: 0xAB6A4
	// RVA: 0x2D5B40 Offset: 0x2D5B40 VA: 0x2D5B40
	private static bool Internal_CreateImpl(Texture2DArray mono, int w, int h, int d, GraphicsFormat format, TextureCreationFlags flags) { }

	// RVA: 0x2D591C Offset: 0x2D591C VA: 0x2D591C
	private static void Internal_Create(Texture2DArray mono, int w, int h, int d, GraphicsFormat format, TextureCreationFlags flags) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA4C38 Offset: 0xA4C38 VA: 0xA4C38
public sealed class CubemapArray : Texture // TypeDefIndex: 1597
{
	// Properties
	public override bool isReadable { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAB6F0 Offset: 0xAB6F0 VA: 0xAB6F0
	// RVA: 0x318634 Offset: 0x318634 VA: 0x318634
	public void .ctor(int width, int cubemapCount, GraphicsFormat format, TextureCreationFlags flags) { }

	// RVA: 0x318770 Offset: 0x318770 VA: 0x318770
	public void .ctor(int width, int cubemapCount, TextureFormat textureFormat, bool mipChain, bool linear) { }

	// RVA: 0x3187F8 Offset: 0x3187F8 VA: 0x3187F8
	public void .ctor(int width, int cubemapCount, TextureFormat textureFormat, bool mipChain) { }

	// RVA: 0x31881C Offset: 0x31881C VA: 0x31881C Slot: 8
	public override bool get_isReadable() { }

	[FreeFunctionAttribute] // RVA: 0xAB700 Offset: 0xAB700 VA: 0xAB700
	// RVA: 0x3188B0 Offset: 0x3188B0 VA: 0x3188B0
	private static bool Internal_CreateImpl(CubemapArray mono, int ext, int count, GraphicsFormat format, TextureCreationFlags flags) { }

	// RVA: 0x318698 Offset: 0x318698 VA: 0x318698
	private static void Internal_Create(CubemapArray mono, int ext, int count, GraphicsFormat format, TextureCreationFlags flags) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA4C8C Offset: 0xA4C8C VA: 0xA4C8C
[NativeHeaderAttribute] // RVA: 0xA4C8C Offset: 0xA4C8C VA: 0xA4C8C
[UsedByNativeCodeAttribute] // RVA: 0xA4C8C Offset: 0xA4C8C VA: 0xA4C8C
[NativeHeaderAttribute] // RVA: 0xA4C8C Offset: 0xA4C8C VA: 0xA4C8C
[NativeHeaderAttribute] // RVA: 0xA4C8C Offset: 0xA4C8C VA: 0xA4C8C
public class RenderTexture : Texture // TypeDefIndex: 1598
{
	// Properties
	public override int width { get; set; }
	public override int height { get; set; }
	[NativePropertyAttribute] // RVA: 0xAD298 Offset: 0xAD298 VA: 0xAD298
	public RenderTextureFormat format { set; }
	public int depth { set; }
	public RenderTextureDescriptor descriptor { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAB74C Offset: 0xAB74C VA: 0xAB74C
	// RVA: 0x2CE014 Offset: 0x2CE014 VA: 0x2CE014
	protected internal void .ctor() { }

	// RVA: 0x2CE09C Offset: 0x2CE09C VA: 0x2CE09C
	public void .ctor(RenderTextureDescriptor desc) { }

	// RVA: 0x2CE4DC Offset: 0x2CE4DC VA: 0x2CE4DC
	public void .ctor(RenderTexture textureToCopy) { }

	// RVA: 0x2CE74C Offset: 0x2CE74C VA: 0x2CE74C
	public void .ctor(int width, int height, int depth, GraphicsFormat format) { }

	// RVA: 0x2CEBA8 Offset: 0x2CEBA8 VA: 0x2CEBA8
	public void .ctor(int width, int height, int depth, RenderTextureFormat format, RenderTextureReadWrite readWrite) { }

	[ExcludeFromDocsAttribute] // RVA: 0xAB75C Offset: 0xAB75C VA: 0xAB75C
	// RVA: 0x2CEDDC Offset: 0x2CEDDC VA: 0x2CEDDC
	public void .ctor(int width, int height, int depth, RenderTextureFormat format) { }

	[ExcludeFromDocsAttribute] // RVA: 0xAB76C Offset: 0xAB76C VA: 0xAB76C
	// RVA: 0x2CEE00 Offset: 0x2CEE00 VA: 0x2CEE00
	public void .ctor(int width, int height, int depth) { }

	// RVA: 0x2CEE28 Offset: 0x2CEE28 VA: 0x2CEE28 Slot: 4
	public override int get_width() { }

	// RVA: 0x2CEEB8 Offset: 0x2CEEB8 VA: 0x2CEEB8 Slot: 5
	public override void set_width(int value) { }

	// RVA: 0x2CEF5C Offset: 0x2CEF5C VA: 0x2CEF5C Slot: 6
	public override int get_height() { }

	// RVA: 0x2CEFEC Offset: 0x2CEFEC VA: 0x2CEFEC Slot: 7
	public override void set_height(int value) { }

	// RVA: 0x2CEA7C Offset: 0x2CEA7C VA: 0x2CEA7C
	public void set_format(RenderTextureFormat value) { }

	// RVA: 0x2CEAFC Offset: 0x2CEAFC VA: 0x2CEAFC
	internal void SetSRGBReadWrite(bool srgb) { }

	[FreeFunctionAttribute] // RVA: 0xAB77C Offset: 0xAB77C VA: 0xAB77C
	// RVA: 0x2CE414 Offset: 0x2CE414 VA: 0x2CE414
	private static void Internal_Create(RenderTexture rt) { }

	[NativeNameAttribute] // RVA: 0xAB7C8 Offset: 0xAB7C8 VA: 0xAB7C8
	// RVA: 0x2CE48C Offset: 0x2CE48C VA: 0x2CE48C
	private void SetRenderTextureDescriptor(RenderTextureDescriptor desc) { }

	[NativeNameAttribute] // RVA: 0xAB814 Offset: 0xAB814 VA: 0xAB814
	// RVA: 0x2CF110 Offset: 0x2CF110 VA: 0x2CF110
	private RenderTextureDescriptor GetDescriptor() { }

	[FreeFunctionAttribute] // RVA: 0xAB858 Offset: 0xAB858 VA: 0xAB858
	// RVA: 0x2CE9D8 Offset: 0x2CE9D8 VA: 0x2CE9D8
	public void set_depth(int value) { }

	// RVA: 0x2CE6D0 Offset: 0x2CE6D0 VA: 0x2CE6D0
	public RenderTextureDescriptor get_descriptor() { }

	// RVA: 0x2CE158 Offset: 0x2CE158 VA: 0x2CE158
	private static void ValidateRenderTextureDesc(RenderTextureDescriptor desc) { }

	// RVA: 0x2CF090 Offset: 0x2CF090 VA: 0x2CF090
	private void SetRenderTextureDescriptor_Injected(ref RenderTextureDescriptor desc) { }

	// RVA: 0x2CF160 Offset: 0x2CF160 VA: 0x2CF160
	private void GetDescriptor_Injected(out RenderTextureDescriptor ret) { }
}

// Namespace: UnityEngine
public struct RenderTextureDescriptor // TypeDefIndex: 1599
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA7480 Offset: 0xA7480 VA: 0xA7480
	[DebuggerBrowsableAttribute] // RVA: 0xA7480 Offset: 0xA7480 VA: 0xA7480
	private int <width>k__BackingField; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xA74B4 Offset: 0xA74B4 VA: 0xA74B4
	[DebuggerBrowsableAttribute] // RVA: 0xA74B4 Offset: 0xA74B4 VA: 0xA74B4
	private int <height>k__BackingField; // 0x4
	[DebuggerBrowsableAttribute] // RVA: 0xA74E8 Offset: 0xA74E8 VA: 0xA74E8
	[CompilerGeneratedAttribute] // RVA: 0xA74E8 Offset: 0xA74E8 VA: 0xA74E8
	private int <msaaSamples>k__BackingField; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0xA751C Offset: 0xA751C VA: 0xA751C
	[CompilerGeneratedAttribute] // RVA: 0xA751C Offset: 0xA751C VA: 0xA751C
	private int <volumeDepth>k__BackingField; // 0xC
	[DebuggerBrowsableAttribute] // RVA: 0xA7550 Offset: 0xA7550 VA: 0xA7550
	[CompilerGeneratedAttribute] // RVA: 0xA7550 Offset: 0xA7550 VA: 0xA7550
	private RenderTextureFormat <colorFormat>k__BackingField; // 0x10
	private int _depthBufferBits; // 0x14
	private static int[] depthFormatBits; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xA7584 Offset: 0xA7584 VA: 0xA7584
	[DebuggerBrowsableAttribute] // RVA: 0xA7584 Offset: 0xA7584 VA: 0xA7584
	private TextureDimension <dimension>k__BackingField; // 0x18
	[DebuggerBrowsableAttribute] // RVA: 0xA75B8 Offset: 0xA75B8 VA: 0xA75B8
	[CompilerGeneratedAttribute] // RVA: 0xA75B8 Offset: 0xA75B8 VA: 0xA75B8
	private ShadowSamplingMode <shadowSamplingMode>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xA75EC Offset: 0xA75EC VA: 0xA75EC
	[DebuggerBrowsableAttribute] // RVA: 0xA75EC Offset: 0xA75EC VA: 0xA75EC
	private VRTextureUsage <vrUsage>k__BackingField; // 0x20
	private RenderTextureCreationFlags _flags; // 0x24
	[DebuggerBrowsableAttribute] // RVA: 0xA7620 Offset: 0xA7620 VA: 0xA7620
	[CompilerGeneratedAttribute] // RVA: 0xA7620 Offset: 0xA7620 VA: 0xA7620
	private RenderTextureMemoryless <memoryless>k__BackingField; // 0x28

	// Properties
	public int width { get; }
	public int height { get; }
	public int msaaSamples { get; }
	public int volumeDepth { get; }
	public int depthBufferBits { get; }

	// Methods

	[CompilerGeneratedAttribute] // RVA: 0xAB8B8 Offset: 0xAB8B8 VA: 0xAB8B8
	// RVA: 0xC81E0 Offset: 0xC81E0 VA: 0xC81E0
	public int get_width() { }

	[CompilerGeneratedAttribute] // RVA: 0xAB8C8 Offset: 0xAB8C8 VA: 0xAB8C8
	// RVA: 0xC81E8 Offset: 0xC81E8 VA: 0xC81E8
	public int get_height() { }

	[CompilerGeneratedAttribute] // RVA: 0xAB8D8 Offset: 0xAB8D8 VA: 0xAB8D8
	// RVA: 0xC81F0 Offset: 0xC81F0 VA: 0xC81F0
	public int get_msaaSamples() { }

	[CompilerGeneratedAttribute] // RVA: 0xAB8E8 Offset: 0xAB8E8 VA: 0xAB8E8
	// RVA: 0xC81F8 Offset: 0xC81F8 VA: 0xC81F8
	public int get_volumeDepth() { }

	// RVA: 0xC8200 Offset: 0xC8200 VA: 0xC8200
	public int get_depthBufferBits() { }

	// RVA: 0x2CF2C8 Offset: 0x2CF2C8 VA: 0x2CF2C8
	private static void .cctor() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA4D6C Offset: 0xA4D6C VA: 0xA4D6C
[StaticAccessorAttribute] // RVA: 0xA4D6C Offset: 0xA4D6C VA: 0xA4D6C
public class Time // TypeDefIndex: 1600
{
	// Properties
	[NativePropertyAttribute] // RVA: 0xAD2D0 Offset: 0xAD2D0 VA: 0xAD2D0
	public static float time { get; }
	public static float deltaTime { get; }
	public static float unscaledTime { get; }
	public static float unscaledDeltaTime { get; }
	[NativePropertyAttribute] // RVA: 0xAD304 Offset: 0xAD304 VA: 0xAD304
	public static float realtimeSinceStartup { get; }

	// Methods

	// RVA: 0x2D5EB0 Offset: 0x2D5EB0 VA: 0x2D5EB0
	public static float get_time() { }

	// RVA: 0x2D5F34 Offset: 0x2D5F34 VA: 0x2D5F34
	public static float get_deltaTime() { }

	// RVA: 0x2D5FBC Offset: 0x2D5FBC VA: 0x2D5FBC
	public static float get_unscaledTime() { }

	// RVA: 0x2D6048 Offset: 0x2D6048 VA: 0x2D6048
	public static float get_unscaledDeltaTime() { }

	// RVA: 0x2D60D8 Offset: 0x2D60D8 VA: 0x2D60D8
	public static float get_realtimeSinceStartup() { }
}

// Namespace: UnityEngine
public enum TouchScreenKeyboardType // TypeDefIndex: 1601
{
	// Fields
	public int value__; // 0x0
	public const TouchScreenKeyboardType Default = 0;
	public const TouchScreenKeyboardType ASCIICapable = 1;
	public const TouchScreenKeyboardType NumbersAndPunctuation = 2;
	public const TouchScreenKeyboardType URL = 3;
	public const TouchScreenKeyboardType NumberPad = 4;
	public const TouchScreenKeyboardType PhonePad = 5;
	public const TouchScreenKeyboardType NamePhonePad = 6;
	public const TouchScreenKeyboardType EmailAddress = 7;
	[ObsoleteAttribute] // RVA: 0xA7654 Offset: 0xA7654 VA: 0xA7654
	public const TouchScreenKeyboardType NintendoNetworkAccount = 8;
	public const TouchScreenKeyboardType Social = 9;
	public const TouchScreenKeyboardType Search = 10;
	public const TouchScreenKeyboardType DecimalPad = 11;
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xA4DF0 Offset: 0xA4DF0 VA: 0xA4DF0
public class TrackedReference // TypeDefIndex: 1602
{
	// Fields
	internal IntPtr m_Ptr; // 0x8

	// Methods

	// RVA: 0x2D6C80 Offset: 0x2D6C80 VA: 0x2D6C80
	public static bool op_Equality(TrackedReference x, TrackedReference y) { }

	// RVA: 0x2D6D0C Offset: 0x2D6D0C VA: 0x2D6D0C Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x2D6DAC Offset: 0x2D6DAC VA: 0x2D6DAC Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA4E00 Offset: 0xA4E00 VA: 0xA4E00
internal sealed class UnhandledExceptionHandler // TypeDefIndex: 1603
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA76B4 Offset: 0xA76B4 VA: 0xA76B4
	private static UnhandledExceptionEventHandler <>f__am$cache0; // 0x0

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAB8F8 Offset: 0xAB8F8 VA: 0xAB8F8
	// RVA: 0x2D8684 Offset: 0x2D8684 VA: 0x2D8684
	private static void RegisterUECatcher() { }

	[CompilerGeneratedAttribute] // RVA: 0xAB908 Offset: 0xAB908 VA: 0xAB908
	// RVA: 0x2D8774 Offset: 0x2D8774 VA: 0x2D8774
	private static void <RegisterUECatcher>m__0(object sender, UnhandledExceptionEventArgs e) { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xA4E60 Offset: 0xA4E60 VA: 0xA4E60
public class UnityAPICompatibilityVersionAttribute : Attribute // TypeDefIndex: 1604
{
	// Fields
	private string _version; // 0x8

	// Methods

	// RVA: 0x2D8860 Offset: 0x2D8860 VA: 0x2D8860
	public void .ctor(string version) { }
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0xA4E94 Offset: 0xA4E94 VA: 0xA4E94
public enum HideFlags // TypeDefIndex: 1605
{
	// Fields
	public int value__; // 0x0
	public const HideFlags None = 0;
	public const HideFlags HideInHierarchy = 1;
	public const HideFlags HideInInspector = 2;
	public const HideFlags DontSaveInEditor = 4;
	public const HideFlags NotEditable = 8;
	public const HideFlags DontSaveInBuild = 16;
	public const HideFlags DontUnloadUnusedAsset = 32;
	public const HideFlags DontSave = 52;
	public const HideFlags HideAndDontSave = 61;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA4EA4 Offset: 0xA4EA4 VA: 0xA4EA4
[RequiredByNativeCodeAttribute] // RVA: 0xA4EA4 Offset: 0xA4EA4 VA: 0xA4EA4
[NativeHeaderAttribute] // RVA: 0xA4EA4 Offset: 0xA4EA4 VA: 0xA4EA4
[NativeHeaderAttribute] // RVA: 0xA4EA4 Offset: 0xA4EA4 VA: 0xA4EA4
public class Object // TypeDefIndex: 1606
{
	// Fields
	private IntPtr m_CachedPtr; // 0x8
	internal static int OffsetOfInstanceIDInCPlusPlusObject; // 0x0
	private const string objectIsNullMessage = "The Object you want to instantiate is null.";
	private const string cloneDestroyedMessage = "Instantiate failed because the clone was destroyed during creation. This can happen if DestroyImmediate is called in MonoBehaviour.Awake.";

	// Properties
	public string name { get; set; }
	public HideFlags hideFlags { set; }

	// Methods

	// RVA: 0x2C6034 Offset: 0x2C6034 VA: 0x2C6034
	public void .ctor() { }

	// RVA: 0x2C603C Offset: 0x2C603C VA: 0x2C603C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2C6044 Offset: 0x2C6044 VA: 0x2C6044 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x2C6264 Offset: 0x2C6264 VA: 0x2C6264
	public static bool op_Implicit(Object exists) { }

	// RVA: 0x2C617C Offset: 0x2C617C VA: 0x2C617C
	private static bool CompareBaseObjects(Object lhs, Object rhs) { }

	// RVA: 0x2C62EC Offset: 0x2C62EC VA: 0x2C62EC
	private static bool IsNativeObjectAlive(Object o) { }

	// RVA: 0x2C6358 Offset: 0x2C6358 VA: 0x2C6358
	private IntPtr GetCachedPtr() { }

	// RVA: 0x2C6360 Offset: 0x2C6360 VA: 0x2C6360
	public string get_name() { }

	// RVA: 0x2C6478 Offset: 0x2C6478 VA: 0x2C6478
	public void set_name(string value) { }

	[TypeInferenceRuleAttribute] // RVA: 0xAB918 Offset: 0xAB918 VA: 0xAB918
	// RVA: 0x2C65B0 Offset: 0x2C65B0 VA: 0x2C65B0
	public static Object Instantiate(Object original, Vector3 position, Quaternion rotation) { }

	// RVA: -1 Offset: -1
	public static T Instantiate<T>(T original) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BC928 Offset: 0x5BC928 VA: 0x5BC928
	|-Object.Instantiate<GameObject>
	|-Object.Instantiate<Dropdown.DropdownItem>
	|-Object.Instantiate<object>
	*/

	// RVA: -1 Offset: -1
	public static T Instantiate<T>(T original, Vector3 position, Quaternion rotation) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BCAE0 Offset: 0x5BCAE0 VA: 0x5BCAE0
	|-Object.Instantiate<GameObject>
	|-Object.Instantiate<object>
	*/

	[NativeMethodAttribute] // RVA: 0xAB92C Offset: 0xAB92C VA: 0xAB92C
	// RVA: 0x2C68F8 Offset: 0x2C68F8 VA: 0x2C68F8
	public static void Destroy(Object obj, float t) { }

	[ExcludeFromDocsAttribute] // RVA: 0xAB9AC Offset: 0xAB9AC VA: 0xAB9AC
	// RVA: 0x2C69A8 Offset: 0x2C69A8 VA: 0x2C69A8
	public static void Destroy(Object obj) { }

	[NativeMethodAttribute] // RVA: 0xAB9BC Offset: 0xAB9BC VA: 0xAB9BC
	// RVA: 0x2C6A2C Offset: 0x2C6A2C VA: 0x2C6A2C
	public static void DestroyImmediate(Object obj, bool allowDestroyingAssets) { }

	[ExcludeFromDocsAttribute] // RVA: 0xABA44 Offset: 0xABA44 VA: 0xABA44
	// RVA: 0x2C6AAC Offset: 0x2C6AAC VA: 0x2C6AAC
	public static void DestroyImmediate(Object obj) { }

	[FreeFunctionAttribute] // RVA: 0xABA54 Offset: 0xABA54 VA: 0xABA54
	// RVA: 0x2C6B30 Offset: 0x2C6B30 VA: 0x2C6B30
	public static void DontDestroyOnLoad(Object target) { }

	// RVA: 0x2C3BA8 Offset: 0x2C3BA8 VA: 0x2C3BA8
	public void set_hideFlags(HideFlags value) { }

	// RVA: 0x2C67A0 Offset: 0x2C67A0 VA: 0x2C67A0
	private static void CheckNullArgument(object arg, string message) { }

	// RVA: 0x2C6BD4 Offset: 0x2C6BD4 VA: 0x2C6BD4 Slot: 3
	public override string ToString() { }

	// RVA: 0x2C390C Offset: 0x2C390C VA: 0x2C390C
	public static bool op_Equality(Object x, Object y) { }

	// RVA: 0x2C6CF0 Offset: 0x2C6CF0 VA: 0x2C6CF0
	public static bool op_Inequality(Object x, Object y) { }

	[FreeFunctionAttribute] // RVA: 0xABAA4 Offset: 0xABAA4 VA: 0xABAA4
	// RVA: 0x2C6D7C Offset: 0x2C6D7C VA: 0x2C6D7C
	private static Object Internal_CloneSingle(Object data) { }

	[FreeFunctionAttribute] // RVA: 0xABADC Offset: 0xABADC VA: 0xABADC
	// RVA: 0x2C683C Offset: 0x2C683C VA: 0x2C683C
	private static Object Internal_InstantiateSingle(Object data, Vector3 pos, Quaternion rot) { }

	[FreeFunctionAttribute] // RVA: 0xABB1C Offset: 0xABB1C VA: 0xABB1C
	// RVA: 0x2C6C54 Offset: 0x2C6C54 VA: 0x2C6C54
	private static string ToString(Object obj) { }

	[FreeFunctionAttribute] // RVA: 0xABB6C Offset: 0xABB6C VA: 0xABB6C
	// RVA: 0x2C63E0 Offset: 0x2C63E0 VA: 0x2C63E0
	private static string GetName(Object obj) { }

	[FreeFunctionAttribute] // RVA: 0xABBBC Offset: 0xABBBC VA: 0xABBBC
	// RVA: 0x2C6500 Offset: 0x2C6500 VA: 0x2C6500
	private static void SetName(Object obj, string name) { }

	[FreeFunctionAttribute] // RVA: 0xABC0C Offset: 0xABC0C VA: 0xABC0C
	[VisibleToOtherModulesAttribute] // RVA: 0xABC0C Offset: 0xABC0C VA: 0xABC0C
	// RVA: 0x2C6EAC Offset: 0x2C6EAC VA: 0x2C6EAC
	internal static Object FindObjectFromInstanceID(int instanceID) { }

	// RVA: 0x2C6F50 Offset: 0x2C6F50 VA: 0x2C6F50
	private static void .cctor() { }

	// RVA: 0x2C6E24 Offset: 0x2C6E24 VA: 0x2C6E24
	private static Object Internal_InstantiateSingle_Injected(Object data, ref Vector3 pos, ref Quaternion rot) { }
}

// Namespace: UnityEngine.Events
[Serializable]
public enum PersistentListenerMode // TypeDefIndex: 1607
{
	// Fields
	public int value__; // 0x0
	public const PersistentListenerMode EventDefined = 0;
	public const PersistentListenerMode Void = 1;
	public const PersistentListenerMode Object = 2;
	public const PersistentListenerMode Int = 3;
	public const PersistentListenerMode Float = 4;
	public const PersistentListenerMode String = 5;
	public const PersistentListenerMode Bool = 6;
}

// Namespace: UnityEngine.Events
[Serializable]
internal class ArgumentCache : ISerializationCallbackReceiver // TypeDefIndex: 1608
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0xA76C4 Offset: 0xA76C4 VA: 0xA76C4
	[SerializeField] // RVA: 0xA76C4 Offset: 0xA76C4 VA: 0xA76C4
	private Object m_ObjectArgument; // 0x8
	[SerializeField] // RVA: 0xA7714 Offset: 0xA7714 VA: 0xA7714
	[FormerlySerializedAsAttribute] // RVA: 0xA7714 Offset: 0xA7714 VA: 0xA7714
	private string m_ObjectArgumentAssemblyTypeName; // 0xC
	[SerializeField] // RVA: 0xA7774 Offset: 0xA7774 VA: 0xA7774
	[FormerlySerializedAsAttribute] // RVA: 0xA7774 Offset: 0xA7774 VA: 0xA7774
	private int m_IntArgument; // 0x10
	[FormerlySerializedAsAttribute] // RVA: 0xA77C0 Offset: 0xA77C0 VA: 0xA77C0
	[SerializeField] // RVA: 0xA77C0 Offset: 0xA77C0 VA: 0xA77C0
	private float m_FloatArgument; // 0x14
	[FormerlySerializedAsAttribute] // RVA: 0xA7810 Offset: 0xA7810 VA: 0xA7810
	[SerializeField] // RVA: 0xA7810 Offset: 0xA7810 VA: 0xA7810
	private string m_StringArgument; // 0x18
	[SerializeField] // RVA: 0xA7860 Offset: 0xA7860 VA: 0xA7860
	private bool m_BoolArgument; // 0x1C

	// Properties
	public Object unityObjectArgument { get; }
	public string unityObjectArgumentAssemblyTypeName { get; }
	public int intArgument { get; }
	public float floatArgument { get; }
	public string stringArgument { get; }
	public bool boolArgument { get; }

	// Methods

	// RVA: 0x31A8E4 Offset: 0x31A8E4 VA: 0x31A8E4
	public void .ctor() { }

	// RVA: 0x31A8EC Offset: 0x31A8EC VA: 0x31A8EC
	public Object get_unityObjectArgument() { }

	// RVA: 0x31A8F4 Offset: 0x31A8F4 VA: 0x31A8F4
	public string get_unityObjectArgumentAssemblyTypeName() { }

	// RVA: 0x31A8FC Offset: 0x31A8FC VA: 0x31A8FC
	public int get_intArgument() { }

	// RVA: 0x31A904 Offset: 0x31A904 VA: 0x31A904
	public float get_floatArgument() { }

	// RVA: 0x31A90C Offset: 0x31A90C VA: 0x31A90C
	public string get_stringArgument() { }

	// RVA: 0x31A914 Offset: 0x31A914 VA: 0x31A914
	public bool get_boolArgument() { }

	// RVA: 0x31A91C Offset: 0x31A91C VA: 0x31A91C
	private void TidyAssemblyTypeName() { }

	// RVA: 0x31ABAC Offset: 0x31ABAC VA: 0x31ABAC Slot: 4
	public void OnBeforeSerialize() { }

	// RVA: 0x31ABB0 Offset: 0x31ABB0 VA: 0x31ABB0 Slot: 5
	public void OnAfterDeserialize() { }
}

// Namespace: UnityEngine.Events
internal abstract class BaseInvokableCall // TypeDefIndex: 1609
{
	// Methods

	// RVA: 0x31ABB4 Offset: 0x31ABB4 VA: 0x31ABB4
	protected void .ctor() { }

	// RVA: 0x31ABBC Offset: 0x31ABBC VA: 0x31ABBC
	protected void .ctor(object target, MethodInfo function) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Invoke(object[] args);

	// RVA: -1 Offset: -1
	protected static void ThrowOnInvalidArg<T>(object arg) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x512CA4 Offset: 0x512CA4 VA: 0x512CA4
	|-BaseInvokableCall.ThrowOnInvalidArg<bool>
	|
	|-RVA: 0x512E8C Offset: 0x512E8C VA: 0x512E8C
	|-BaseInvokableCall.ThrowOnInvalidArg<int>
	|
	|-RVA: 0x513074 Offset: 0x513074 VA: 0x513074
	|-BaseInvokableCall.ThrowOnInvalidArg<object>
	|
	|-RVA: 0x51325C Offset: 0x51325C VA: 0x51325C
	|-BaseInvokableCall.ThrowOnInvalidArg<float>
	|
	|-RVA: 0x513444 Offset: 0x513444 VA: 0x513444
	|-BaseInvokableCall.ThrowOnInvalidArg<Color>
	|
	|-RVA: 0x51362C Offset: 0x51362C VA: 0x51362C
	|-BaseInvokableCall.ThrowOnInvalidArg<Vector2>
	*/

	// RVA: 0x31ACC4 Offset: 0x31ACC4 VA: 0x31ACC4
	protected static bool AllowInvoke(Delegate delegate) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool Find(object targetObj, MethodInfo method);
}

// Namespace: UnityEngine.Events
internal class InvokableCall : BaseInvokableCall // TypeDefIndex: 1610
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xA7870 Offset: 0xA7870 VA: 0xA7870
	[CompilerGeneratedAttribute] // RVA: 0xA7870 Offset: 0xA7870 VA: 0xA7870
	private UnityAction Delegate; // 0x8

	// Methods

	// RVA: 0x31ADA8 Offset: 0x31ADA8 VA: 0x31ADA8
	public void .ctor(object target, MethodInfo theFunction) { }

	// RVA: 0x31B008 Offset: 0x31B008 VA: 0x31B008
	public void .ctor(UnityAction action) { }

	// RVA: 0x31AEFC Offset: 0x31AEFC VA: 0x31AEFC
	private void add_Delegate(UnityAction value) { }

	// RVA: 0x31B030 Offset: 0x31B030 VA: 0x31B030
	private void remove_Delegate(UnityAction value) { }

	// RVA: 0x31B13C Offset: 0x31B13C VA: 0x31B13C Slot: 4
	public override void Invoke(object[] args) { }

	// RVA: 0x31B17C Offset: 0x31B17C VA: 0x31B17C
	public void Invoke() { }

	// RVA: 0x31B1BC Offset: 0x31B1BC VA: 0x31B1BC Slot: 5
	public override bool Find(object targetObj, MethodInfo method) { }
}

// Namespace: UnityEngine.Events
internal class InvokableCall<T1> : BaseInvokableCall // TypeDefIndex: 1611
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA78A4 Offset: 0xA78A4 VA: 0xA78A4
	[DebuggerBrowsableAttribute] // RVA: 0xA78A4 Offset: 0xA78A4 VA: 0xA78A4
	private UnityAction<T1> Delegate; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object target, MethodInfo theFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x577830 Offset: 0x577830 VA: 0x577830
	|-InvokableCall<bool>..ctor
	|
	|-RVA: 0x577E78 Offset: 0x577E78 VA: 0x577E78
	|-InvokableCall<int>..ctor
	|
	|-RVA: 0x5784C0 Offset: 0x5784C0 VA: 0x5784C0
	|-InvokableCall<object>..ctor
	|
	|-RVA: 0x578B80 Offset: 0x578B80 VA: 0x578B80
	|-InvokableCall<float>..ctor
	|
	|-RVA: 0x5791C8 Offset: 0x5791C8 VA: 0x5791C8
	|-InvokableCall<Color>..ctor
	|
	|-RVA: 0x579840 Offset: 0x579840 VA: 0x579840
	|-InvokableCall<Vector2>..ctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor(UnityAction<T1> action) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5779E0 Offset: 0x5779E0 VA: 0x5779E0
	|-InvokableCall<bool>..ctor
	|
	|-RVA: 0x578028 Offset: 0x578028 VA: 0x578028
	|-InvokableCall<int>..ctor
	|
	|-RVA: 0x578670 Offset: 0x578670 VA: 0x578670
	|-InvokableCall<object>..ctor
	|
	|-RVA: 0x578D30 Offset: 0x578D30 VA: 0x578D30
	|-InvokableCall<float>..ctor
	|
	|-RVA: 0x579378 Offset: 0x579378 VA: 0x579378
	|-InvokableCall<Color>..ctor
	|
	|-RVA: 0x5799F0 Offset: 0x5799F0 VA: 0x5799F0
	|-InvokableCall<Vector2>..ctor
	*/

	// RVA: -1 Offset: -1
	protected void add_Delegate(UnityAction<T1> value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x577A48 Offset: 0x577A48 VA: 0x577A48
	|-InvokableCall<bool>.add_Delegate
	|
	|-RVA: 0x578090 Offset: 0x578090 VA: 0x578090
	|-InvokableCall<int>.add_Delegate
	|
	|-RVA: 0x5786D8 Offset: 0x5786D8 VA: 0x5786D8
	|-InvokableCall<object>.add_Delegate
	|
	|-RVA: 0x578D98 Offset: 0x578D98 VA: 0x578D98
	|-InvokableCall<float>.add_Delegate
	|
	|-RVA: 0x5793E0 Offset: 0x5793E0 VA: 0x5793E0
	|-InvokableCall<Color>.add_Delegate
	|
	|-RVA: 0x579A58 Offset: 0x579A58 VA: 0x579A58
	|-InvokableCall<Vector2>.add_Delegate
	*/

	// RVA: -1 Offset: -1
	protected void remove_Delegate(UnityAction<T1> value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x577B38 Offset: 0x577B38 VA: 0x577B38
	|-InvokableCall<bool>.remove_Delegate
	|
	|-RVA: 0x578180 Offset: 0x578180 VA: 0x578180
	|-InvokableCall<int>.remove_Delegate
	|
	|-RVA: 0x5787C8 Offset: 0x5787C8 VA: 0x5787C8
	|-InvokableCall<object>.remove_Delegate
	|
	|-RVA: 0x578E88 Offset: 0x578E88 VA: 0x578E88
	|-InvokableCall<float>.remove_Delegate
	|
	|-RVA: 0x5794D0 Offset: 0x5794D0 VA: 0x5794D0
	|-InvokableCall<Color>.remove_Delegate
	|
	|-RVA: 0x579B48 Offset: 0x579B48 VA: 0x579B48
	|-InvokableCall<Vector2>.remove_Delegate
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void Invoke(object[] args) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x577C28 Offset: 0x577C28 VA: 0x577C28
	|-InvokableCall<bool>.Invoke
	|
	|-RVA: 0x578270 Offset: 0x578270 VA: 0x578270
	|-InvokableCall<int>.Invoke
	|
	|-RVA: 0x5788B8 Offset: 0x5788B8 VA: 0x5788B8
	|-InvokableCall<object>.Invoke
	|
	|-RVA: 0x578F78 Offset: 0x578F78 VA: 0x578F78
	|-InvokableCall<float>.Invoke
	|
	|-RVA: 0x5795C0 Offset: 0x5795C0 VA: 0x5795C0
	|-InvokableCall<Color>.Invoke
	|
	|-RVA: 0x579C38 Offset: 0x579C38 VA: 0x579C38
	|-InvokableCall<Vector2>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public virtual void Invoke(T1 args0) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x577DA0 Offset: 0x577DA0 VA: 0x577DA0
	|-InvokableCall<bool>.Invoke
	|
	|-RVA: 0x5783E8 Offset: 0x5783E8 VA: 0x5783E8
	|-InvokableCall<int>.Invoke
	|
	|-RVA: 0x578AA8 Offset: 0x578AA8 VA: 0x578AA8
	|-InvokableCall<object>.Invoke
	|
	|-RVA: 0x5790F0 Offset: 0x5790F0 VA: 0x5790F0
	|-InvokableCall<float>.Invoke
	|
	|-RVA: 0x579744 Offset: 0x579744 VA: 0x579744
	|-InvokableCall<Color>.Invoke
	|
	|-RVA: 0x579DB0 Offset: 0x579DB0 VA: 0x579DB0
	|-InvokableCall<Vector2>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public override bool Find(object targetObj, MethodInfo method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x577DFC Offset: 0x577DFC VA: 0x577DFC
	|-InvokableCall<bool>.Find
	|
	|-RVA: 0x578444 Offset: 0x578444 VA: 0x578444
	|-InvokableCall<int>.Find
	|
	|-RVA: 0x578B04 Offset: 0x578B04 VA: 0x578B04
	|-InvokableCall<object>.Find
	|
	|-RVA: 0x57914C Offset: 0x57914C VA: 0x57914C
	|-InvokableCall<float>.Find
	|
	|-RVA: 0x5797C4 Offset: 0x5797C4 VA: 0x5797C4
	|-InvokableCall<Color>.Find
	|
	|-RVA: 0x579E14 Offset: 0x579E14 VA: 0x579E14
	|-InvokableCall<Vector2>.Find
	*/
}

// Namespace: UnityEngine.Events
internal class InvokableCall<T1, T2> : BaseInvokableCall // TypeDefIndex: 1612
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xA78D8 Offset: 0xA78D8 VA: 0xA78D8
	[CompilerGeneratedAttribute] // RVA: 0xA78D8 Offset: 0xA78D8 VA: 0xA78D8
	private UnityAction<T1, T2> Delegate; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object target, MethodInfo theFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x579E90 Offset: 0x579E90 VA: 0x579E90
	|-InvokableCall<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void Invoke(object[] args) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57A010 Offset: 0x57A010 VA: 0x57A010
	|-InvokableCall<object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public override bool Find(object targetObj, MethodInfo method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57A2F0 Offset: 0x57A2F0 VA: 0x57A2F0
	|-InvokableCall<object, object>.Find
	*/
}

// Namespace: UnityEngine.Events
internal class InvokableCall<T1, T2, T3> : BaseInvokableCall // TypeDefIndex: 1613
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xA790C Offset: 0xA790C VA: 0xA790C
	[CompilerGeneratedAttribute] // RVA: 0xA790C Offset: 0xA790C VA: 0xA790C
	private UnityAction<T1, T2, T3> Delegate; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object target, MethodInfo theFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57A36C Offset: 0x57A36C VA: 0x57A36C
	|-InvokableCall<object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void Invoke(object[] args) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57A4EC Offset: 0x57A4EC VA: 0x57A4EC
	|-InvokableCall<object, object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public override bool Find(object targetObj, MethodInfo method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57A8C8 Offset: 0x57A8C8 VA: 0x57A8C8
	|-InvokableCall<object, object, object>.Find
	*/
}

// Namespace: UnityEngine.Events
internal class InvokableCall<T1, T2, T3, T4> : BaseInvokableCall // TypeDefIndex: 1614
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA7940 Offset: 0xA7940 VA: 0xA7940
	[DebuggerBrowsableAttribute] // RVA: 0xA7940 Offset: 0xA7940 VA: 0xA7940
	private UnityAction<T1, T2, T3, T4> Delegate; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object target, MethodInfo theFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57A944 Offset: 0x57A944 VA: 0x57A944
	|-InvokableCall<object, object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void Invoke(object[] args) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57AAC4 Offset: 0x57AAC4 VA: 0x57AAC4
	|-InvokableCall<object, object, object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public override bool Find(object targetObj, MethodInfo method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57AFA0 Offset: 0x57AFA0 VA: 0x57AFA0
	|-InvokableCall<object, object, object, object>.Find
	*/
}

// Namespace: UnityEngine.Events
internal class CachedInvokableCall<T> : InvokableCall<T> // TypeDefIndex: 1615
{
	// Fields
	private readonly T m_Arg1; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(Object target, MethodInfo theFunction, T argument) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x577498 Offset: 0x577498 VA: 0x577498
	|-CachedInvokableCall<bool>..ctor
	|
	|-RVA: 0x577584 Offset: 0x577584 VA: 0x577584
	|-CachedInvokableCall<int>..ctor
	|
	|-RVA: 0x577660 Offset: 0x577660 VA: 0x577660
	|-CachedInvokableCall<object>..ctor
	|-CachedInvokableCall<string>..ctor
	|
	|-RVA: 0x57773C Offset: 0x57773C VA: 0x57773C
	|-CachedInvokableCall<float>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void Invoke(object[] args) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5774EC Offset: 0x5774EC VA: 0x5774EC
	|-CachedInvokableCall<bool>.Invoke
	|
	|-RVA: 0x5775D8 Offset: 0x5775D8 VA: 0x5775D8
	|-CachedInvokableCall<int>.Invoke
	|
	|-RVA: 0x5776B4 Offset: 0x5776B4 VA: 0x5776B4
	|-CachedInvokableCall<object>.Invoke
	|
	|-RVA: 0x577798 Offset: 0x577798 VA: 0x577798
	|-CachedInvokableCall<float>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override void Invoke(T arg0) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x577538 Offset: 0x577538 VA: 0x577538
	|-CachedInvokableCall<bool>.Invoke
	|
	|-RVA: 0x57761C Offset: 0x57761C VA: 0x57761C
	|-CachedInvokableCall<int>.Invoke
	|
	|-RVA: 0x5776F8 Offset: 0x5776F8 VA: 0x5776F8
	|-CachedInvokableCall<object>.Invoke
	|
	|-RVA: 0x5777E4 Offset: 0x5777E4 VA: 0x5777E4
	|-CachedInvokableCall<float>.Invoke
	*/
}

// Namespace: UnityEngine.Events
public enum UnityEventCallState // TypeDefIndex: 1616
{
	// Fields
	public int value__; // 0x0
	public const UnityEventCallState Off = 0;
	public const UnityEventCallState EditorAndRuntime = 1;
	public const UnityEventCallState RuntimeOnly = 2;
}

// Namespace: UnityEngine.Events
[Serializable]
internal class PersistentCall // TypeDefIndex: 1617
{
	// Fields
	[SerializeField] // RVA: 0xA7974 Offset: 0xA7974 VA: 0xA7974
	[FormerlySerializedAsAttribute] // RVA: 0xA7974 Offset: 0xA7974 VA: 0xA7974
	private Object m_Target; // 0x8
	[SerializeField] // RVA: 0xA79C0 Offset: 0xA79C0 VA: 0xA79C0
	[FormerlySerializedAsAttribute] // RVA: 0xA79C0 Offset: 0xA79C0 VA: 0xA79C0
	private string m_MethodName; // 0xC
	[FormerlySerializedAsAttribute] // RVA: 0xA7A0C Offset: 0xA7A0C VA: 0xA7A0C
	[SerializeField] // RVA: 0xA7A0C Offset: 0xA7A0C VA: 0xA7A0C
	private PersistentListenerMode m_Mode; // 0x10
	[FormerlySerializedAsAttribute] // RVA: 0xA7A54 Offset: 0xA7A54 VA: 0xA7A54
	[SerializeField] // RVA: 0xA7A54 Offset: 0xA7A54 VA: 0xA7A54
	private ArgumentCache m_Arguments; // 0x14
	[SerializeField] // RVA: 0xA7AA0 Offset: 0xA7AA0 VA: 0xA7AA0
	[FormerlySerializedAsAttribute] // RVA: 0xA7AA0 Offset: 0xA7AA0 VA: 0xA7AA0
	[FormerlySerializedAsAttribute] // RVA: 0xA7AA0 Offset: 0xA7AA0 VA: 0xA7AA0
	private UnityEventCallState m_CallState; // 0x18

	// Properties
	public Object target { get; }
	public string methodName { get; }
	public PersistentListenerMode mode { get; }
	public ArgumentCache arguments { get; }

	// Methods

	// RVA: 0x31B7A0 Offset: 0x31B7A0 VA: 0x31B7A0
	public void .ctor() { }

	// RVA: 0x31B82C Offset: 0x31B82C VA: 0x31B82C
	public Object get_target() { }

	// RVA: 0x31B834 Offset: 0x31B834 VA: 0x31B834
	public string get_methodName() { }

	// RVA: 0x31B83C Offset: 0x31B83C VA: 0x31B83C
	public PersistentListenerMode get_mode() { }

	// RVA: 0x31B844 Offset: 0x31B844 VA: 0x31B844
	public ArgumentCache get_arguments() { }

	// RVA: 0x31B84C Offset: 0x31B84C VA: 0x31B84C
	public bool IsValid() { }

	// RVA: 0x31B928 Offset: 0x31B928 VA: 0x31B928
	public BaseInvokableCall GetRuntimeCall(UnityEventBase theEvent) { }

	// RVA: 0x31BDC8 Offset: 0x31BDC8 VA: 0x31BDC8
	private static BaseInvokableCall GetObjectCall(Object target, MethodInfo method, ArgumentCache arguments) { }
}

// Namespace: UnityEngine.Events
[Serializable]
internal class PersistentCallGroup // TypeDefIndex: 1618
{
	// Fields
	[SerializeField] // RVA: 0xA7B14 Offset: 0xA7B14 VA: 0xA7B14
	[FormerlySerializedAsAttribute] // RVA: 0xA7B14 Offset: 0xA7B14 VA: 0xA7B14
	private List<PersistentCall> m_Calls; // 0x8

	// Methods

	// RVA: 0x31C414 Offset: 0x31C414 VA: 0x31C414
	public void .ctor() { }

	// RVA: 0x31C4A0 Offset: 0x31C4A0 VA: 0x31C4A0
	public void Initialize(InvokableCallList invokableList, UnityEventBase unityEventBase) { }
}

// Namespace: UnityEngine.Events
internal class InvokableCallList // TypeDefIndex: 1619
{
	// Fields
	private readonly List<BaseInvokableCall> m_PersistentCalls; // 0x8
	private readonly List<BaseInvokableCall> m_RuntimeCalls; // 0xC
	private readonly List<BaseInvokableCall> m_ExecutingCalls; // 0x10
	private bool m_NeedsUpdate; // 0x14

	// Methods

	// RVA: 0x31B238 Offset: 0x31B238 VA: 0x31B238
	public void .ctor() { }

	// RVA: 0x31B2FC Offset: 0x31B2FC VA: 0x31B2FC
	public void AddPersistentInvokableCall(BaseInvokableCall call) { }

	// RVA: 0x31B384 Offset: 0x31B384 VA: 0x31B384
	public void AddListener(BaseInvokableCall call) { }

	// RVA: 0x31B40C Offset: 0x31B40C VA: 0x31B40C
	public void RemoveListener(object targetObj, MethodInfo method) { }

	// RVA: 0x31B628 Offset: 0x31B628 VA: 0x31B628
	public void ClearPersistent() { }

	// RVA: 0x31B6A8 Offset: 0x31B6A8 VA: 0x31B6A8
	public List<BaseInvokableCall> PrepareInvoke() { }
}

// Namespace: UnityEngine.Events
[UsedByNativeCodeAttribute] // RVA: 0xA4F8C Offset: 0xA4F8C VA: 0xA4F8C
[Serializable]
public abstract class UnityEventBase : ISerializationCallbackReceiver // TypeDefIndex: 1620
{
	// Fields
	private InvokableCallList m_Calls; // 0x8
	[FormerlySerializedAsAttribute] // RVA: 0xA7B60 Offset: 0xA7B60 VA: 0xA7B60
	[SerializeField] // RVA: 0xA7B60 Offset: 0xA7B60 VA: 0xA7B60
	private PersistentCallGroup m_PersistentCalls; // 0xC
	private bool m_CallsDirty; // 0x10

	// Methods

	// RVA: 0x31C6AC Offset: 0x31C6AC VA: 0x31C6AC
	protected void .ctor() { }

	// RVA: 0x31CDAC Offset: 0x31CDAC VA: 0x31CDAC Slot: 4
	private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize() { }

	// RVA: 0x31CDB0 Offset: 0x31CDB0 VA: 0x31CDB0 Slot: 5
	private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize() { }

	// RVA: -1 Offset: -1 Slot: 6
	protected abstract MethodInfo FindMethod_Impl(string name, object targetObj);

	// RVA: -1 Offset: -1 Slot: 7
	internal abstract BaseInvokableCall GetDelegate(object target, MethodInfo theFunction);

	// RVA: 0x31BBCC Offset: 0x31BBCC VA: 0x31BBCC
	internal MethodInfo FindMethod(PersistentCall call) { }

	// RVA: 0x31CDE8 Offset: 0x31CDE8 VA: 0x31CDE8
	internal MethodInfo FindMethod(string name, object listener, PersistentListenerMode mode, Type argumentType) { }

	// RVA: 0x31CDB4 Offset: 0x31CDB4 VA: 0x31CDB4
	private void DirtyPersistentCalls() { }

	// RVA: 0x31D130 Offset: 0x31D130 VA: 0x31D130
	private void RebuildPersistentCallsIfNeeded() { }

	// RVA: 0x31C7EC Offset: 0x31C7EC VA: 0x31C7EC
	internal void AddCall(BaseInvokableCall call) { }

	// RVA: 0x31D17C Offset: 0x31D17C VA: 0x31D17C
	protected void RemoveListener(object targetObj, MethodInfo method) { }

	// RVA: 0x31CD7C Offset: 0x31CD7C VA: 0x31CD7C
	internal List<BaseInvokableCall> PrepareInvoke() { }

	// RVA: 0x31D1B4 Offset: 0x31D1B4 VA: 0x31D1B4 Slot: 3
	public override string ToString() { }

	// RVA: 0x31C894 Offset: 0x31C894 VA: 0x31C894
	public static MethodInfo GetValidMethodInfo(object obj, string functionName, Type[] argumentTypes) { }
}

// Namespace: UnityEngine.Events
public sealed class UnityAction : MulticastDelegate // TypeDefIndex: 1621
{
	// Methods

	// RVA: 0x31C654 Offset: 0x31C654 VA: 0x31C654
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x3149F0 Offset: 0x3149F0 VA: 0x3149F0 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x31C668 Offset: 0x31C668 VA: 0x31C668 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x31C694 Offset: 0x31C694 VA: 0x31C694 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Events
[Serializable]
public class UnityEvent : UnityEventBase // TypeDefIndex: 1622
{
	// Fields
	private object[] m_InvokeArray; // 0x14

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xABC80 Offset: 0xABC80 VA: 0xABC80
	// RVA: 0x31C6A0 Offset: 0x31C6A0 VA: 0x31C6A0
	public void .ctor() { }

	// RVA: 0x31C74C Offset: 0x31C74C VA: 0x31C74C
	public void AddListener(UnityAction call) { }

	// RVA: 0x31C81C Offset: 0x31C81C VA: 0x31C81C Slot: 6
	protected override MethodInfo FindMethod_Impl(string name, object targetObj) { }

	// RVA: 0x31CADC Offset: 0x31CADC VA: 0x31CADC Slot: 7
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }

	// RVA: 0x31C770 Offset: 0x31C770 VA: 0x31C770
	private static BaseInvokableCall GetDelegate(UnityAction action) { }

	// RVA: 0x31CB54 Offset: 0x31CB54 VA: 0x31CB54
	public void Invoke() { }
}

// Namespace: UnityEngine.Events
public sealed class UnityAction<T0> : MulticastDelegate // TypeDefIndex: 1623
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57B01C Offset: 0x57B01C VA: 0x57B01C
	|-UnityAction<bool>..ctor
	|
	|-RVA: 0x57B5DC Offset: 0x57B5DC VA: 0x57B5DC
	|-UnityAction<List<IEventSystemHandler>>..ctor
	|-UnityAction<object>..ctor
	|-UnityAction<Component>..ctor
	|-UnityAction<MessageEventArgs>..ctor
	|-UnityAction<LayoutRebuilder>..ctor
	|
	|-RVA: 0x57B2FC Offset: 0x57B2FC VA: 0x57B2FC
	|-UnityAction<int>..ctor
	|
	|-RVA: 0x57B9E4 Offset: 0x57B9E4 VA: 0x57B9E4
	|-UnityAction<float>..ctor
	|
	|-RVA: 0x57BCC4 Offset: 0x57BCC4 VA: 0x57BCC4
	|-UnityAction<Color>..ctor
	|
	|-RVA: 0x57C034 Offset: 0x57C034 VA: 0x57C034
	|-UnityAction<Scene>..ctor
	|
	|-RVA: 0x57C314 Offset: 0x57C314 VA: 0x57C314
	|-UnityAction<Vector2>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual void Invoke(T0 arg0) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57B030 Offset: 0x57B030 VA: 0x57B030
	|-UnityAction<bool>.Invoke
	|
	|-RVA: 0x57B310 Offset: 0x57B310 VA: 0x57B310
	|-UnityAction<int>.Invoke
	|
	|-RVA: 0x57B5F0 Offset: 0x57B5F0 VA: 0x57B5F0
	|-UnityAction<object>.Invoke
	|-UnityAction<Component>.Invoke
	|
	|-RVA: 0x57B9F8 Offset: 0x57B9F8 VA: 0x57B9F8
	|-UnityAction<float>.Invoke
	|
	|-RVA: 0x57BCD8 Offset: 0x57BCD8 VA: 0x57BCD8
	|-UnityAction<Color>.Invoke
	|
	|-RVA: 0x57C048 Offset: 0x57C048 VA: 0x57C048
	|-UnityAction<Scene>.Invoke
	|
	|-RVA: 0x57C328 Offset: 0x57C328 VA: 0x57C328
	|-UnityAction<Vector2>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T0 arg0, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57B254 Offset: 0x57B254 VA: 0x57B254
	|-UnityAction<bool>.BeginInvoke
	|
	|-RVA: 0x57B534 Offset: 0x57B534 VA: 0x57B534
	|-UnityAction<int>.BeginInvoke
	|
	|-RVA: 0x57B9AC Offset: 0x57B9AC VA: 0x57B9AC
	|-UnityAction<object>.BeginInvoke
	|
	|-RVA: 0x57BC1C Offset: 0x57BC1C VA: 0x57BC1C
	|-UnityAction<float>.BeginInvoke
	|
	|-RVA: 0x57BF80 Offset: 0x57BF80 VA: 0x57BF80
	|-UnityAction<Color>.BeginInvoke
	|
	|-RVA: 0x57C26C Offset: 0x57C26C VA: 0x57C26C
	|-UnityAction<Scene>.BeginInvoke
	|
	|-RVA: 0x57C570 Offset: 0x57C570 VA: 0x57C570
	|-UnityAction<Vector2>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57B2F0 Offset: 0x57B2F0 VA: 0x57B2F0
	|-UnityAction<bool>.EndInvoke
	|
	|-RVA: 0x57B5D0 Offset: 0x57B5D0 VA: 0x57B5D0
	|-UnityAction<int>.EndInvoke
	|
	|-RVA: 0x57B9D8 Offset: 0x57B9D8 VA: 0x57B9D8
	|-UnityAction<object>.EndInvoke
	|
	|-RVA: 0x57BCB8 Offset: 0x57BCB8 VA: 0x57BCB8
	|-UnityAction<float>.EndInvoke
	|
	|-RVA: 0x57C028 Offset: 0x57C028 VA: 0x57C028
	|-UnityAction<Color>.EndInvoke
	|
	|-RVA: 0x57C308 Offset: 0x57C308 VA: 0x57C308
	|-UnityAction<Scene>.EndInvoke
	|
	|-RVA: 0x57C610 Offset: 0x57C610 VA: 0x57C610
	|-UnityAction<Vector2>.EndInvoke
	*/
}

// Namespace: UnityEngine.Events
[Serializable]
public abstract class UnityEvent<T0> : UnityEventBase // TypeDefIndex: 1624
{
	// Fields
	private object[] m_InvokeArray; // 0x0

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xABC90 Offset: 0xABC90 VA: 0xABC90
	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57D9B4 Offset: 0x57D9B4 VA: 0x57D9B4
	|-UnityEvent<bool>..ctor
	|
	|-RVA: 0x57DFD0 Offset: 0x57DFD0 VA: 0x57DFD0
	|-UnityEvent<int>..ctor
	|
	|-RVA: 0x57E5EC Offset: 0x57E5EC VA: 0x57E5EC
	|-UnityEvent<object>..ctor
	|-UnityEvent<string>..ctor
	|-UnityEvent<BaseEventData>..ctor
	|-UnityEvent<MessageEventArgs>..ctor
	|
	|-RVA: 0x57EBC4 Offset: 0x57EBC4 VA: 0x57EBC4
	|-UnityEvent<float>..ctor
	|
	|-RVA: 0x57F1F0 Offset: 0x57F1F0 VA: 0x57F1F0
	|-UnityEvent<Color>..ctor
	|
	|-RVA: 0x57F84C Offset: 0x57F84C VA: 0x57F84C
	|-UnityEvent<Vector2>..ctor
	*/

	// RVA: -1 Offset: -1
	public void AddListener(UnityAction<T0> call) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57D9E8 Offset: 0x57D9E8 VA: 0x57D9E8
	|-UnityEvent<bool>.AddListener
	|
	|-RVA: 0x57E004 Offset: 0x57E004 VA: 0x57E004
	|-UnityEvent<int>.AddListener
	|
	|-RVA: 0x57E620 Offset: 0x57E620 VA: 0x57E620
	|-UnityEvent<object>.AddListener
	|-UnityEvent<MessageEventArgs>.AddListener
	|
	|-RVA: 0x57EBF8 Offset: 0x57EBF8 VA: 0x57EBF8
	|-UnityEvent<float>.AddListener
	|
	|-RVA: 0x57F224 Offset: 0x57F224 VA: 0x57F224
	|-UnityEvent<Color>.AddListener
	|
	|-RVA: 0x57F880 Offset: 0x57F880 VA: 0x57F880
	|-UnityEvent<Vector2>.AddListener
	*/

	// RVA: -1 Offset: -1
	public void RemoveListener(UnityAction<T0> call) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57DA38 Offset: 0x57DA38 VA: 0x57DA38
	|-UnityEvent<bool>.RemoveListener
	|
	|-RVA: 0x57E054 Offset: 0x57E054 VA: 0x57E054
	|-UnityEvent<int>.RemoveListener
	|
	|-RVA: 0x57E670 Offset: 0x57E670 VA: 0x57E670
	|-UnityEvent<object>.RemoveListener
	|-UnityEvent<MessageEventArgs>.RemoveListener
	|
	|-RVA: 0x57EC48 Offset: 0x57EC48 VA: 0x57EC48
	|-UnityEvent<float>.RemoveListener
	|
	|-RVA: 0x57F274 Offset: 0x57F274 VA: 0x57F274
	|-UnityEvent<Color>.RemoveListener
	|
	|-RVA: 0x57F8D0 Offset: 0x57F8D0 VA: 0x57F8D0
	|-UnityEvent<Vector2>.RemoveListener
	*/

	// RVA: -1 Offset: -1 Slot: 6
	protected override MethodInfo FindMethod_Impl(string name, object targetObj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57DAA0 Offset: 0x57DAA0 VA: 0x57DAA0
	|-UnityEvent<bool>.FindMethod_Impl
	|
	|-RVA: 0x57E0BC Offset: 0x57E0BC VA: 0x57E0BC
	|-UnityEvent<int>.FindMethod_Impl
	|
	|-RVA: 0x57E6D8 Offset: 0x57E6D8 VA: 0x57E6D8
	|-UnityEvent<object>.FindMethod_Impl
	|-UnityEvent<string>.FindMethod_Impl
	|-UnityEvent<BaseEventData>.FindMethod_Impl
	|-UnityEvent<MessageEventArgs>.FindMethod_Impl
	|
	|-RVA: 0x57ECB0 Offset: 0x57ECB0 VA: 0x57ECB0
	|-UnityEvent<float>.FindMethod_Impl
	|
	|-RVA: 0x57F2DC Offset: 0x57F2DC VA: 0x57F2DC
	|-UnityEvent<Color>.FindMethod_Impl
	|
	|-RVA: 0x57F938 Offset: 0x57F938 VA: 0x57F938
	|-UnityEvent<Vector2>.FindMethod_Impl
	*/

	// RVA: -1 Offset: -1 Slot: 7
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57DBCC Offset: 0x57DBCC VA: 0x57DBCC
	|-UnityEvent<bool>.GetDelegate
	|
	|-RVA: 0x57E1E8 Offset: 0x57E1E8 VA: 0x57E1E8
	|-UnityEvent<int>.GetDelegate
	|
	|-RVA: 0x57E804 Offset: 0x57E804 VA: 0x57E804
	|-UnityEvent<object>.GetDelegate
	|-UnityEvent<string>.GetDelegate
	|-UnityEvent<BaseEventData>.GetDelegate
	|-UnityEvent<MessageEventArgs>.GetDelegate
	|
	|-RVA: 0x57EDDC Offset: 0x57EDDC VA: 0x57EDDC
	|-UnityEvent<float>.GetDelegate
	|
	|-RVA: 0x57F408 Offset: 0x57F408 VA: 0x57F408
	|-UnityEvent<Color>.GetDelegate
	|
	|-RVA: 0x57FA64 Offset: 0x57FA64 VA: 0x57FA64
	|-UnityEvent<Vector2>.GetDelegate
	*/

	// RVA: -1 Offset: -1
	private static BaseInvokableCall GetDelegate(UnityAction<T0> action) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57DC34 Offset: 0x57DC34 VA: 0x57DC34
	|-UnityEvent<bool>.GetDelegate
	|
	|-RVA: 0x57E250 Offset: 0x57E250 VA: 0x57E250
	|-UnityEvent<int>.GetDelegate
	|
	|-RVA: 0x57E86C Offset: 0x57E86C VA: 0x57E86C
	|-UnityEvent<object>.GetDelegate
	|
	|-RVA: 0x57EE44 Offset: 0x57EE44 VA: 0x57EE44
	|-UnityEvent<float>.GetDelegate
	|
	|-RVA: 0x57F470 Offset: 0x57F470 VA: 0x57F470
	|-UnityEvent<Color>.GetDelegate
	|
	|-RVA: 0x57FACC Offset: 0x57FACC VA: 0x57FACC
	|-UnityEvent<Vector2>.GetDelegate
	*/

	// RVA: -1 Offset: -1
	public void Invoke(T0 arg0) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57DCE0 Offset: 0x57DCE0 VA: 0x57DCE0
	|-UnityEvent<bool>.Invoke
	|
	|-RVA: 0x57E2FC Offset: 0x57E2FC VA: 0x57E2FC
	|-UnityEvent<int>.Invoke
	|
	|-RVA: 0x57E918 Offset: 0x57E918 VA: 0x57E918
	|-UnityEvent<object>.Invoke
	|-UnityEvent<string>.Invoke
	|-UnityEvent<BaseEventData>.Invoke
	|-UnityEvent<MessageEventArgs>.Invoke
	|
	|-RVA: 0x57EEF0 Offset: 0x57EEF0 VA: 0x57EEF0
	|-UnityEvent<float>.Invoke
	|
	|-RVA: 0x57F51C Offset: 0x57F51C VA: 0x57F51C
	|-UnityEvent<Color>.Invoke
	|
	|-RVA: 0x57FB78 Offset: 0x57FB78 VA: 0x57FB78
	|-UnityEvent<Vector2>.Invoke
	*/
}

// Namespace: UnityEngine.Events
public sealed class UnityAction<T0, T1> : MulticastDelegate // TypeDefIndex: 1625
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57C61C Offset: 0x57C61C VA: 0x57C61C
	|-UnityAction<object, object>..ctor
	|
	|-RVA: 0x57CA50 Offset: 0x57CA50 VA: 0x57CA50
	|-UnityAction<Scene, LoadSceneMode>..ctor
	|
	|-RVA: 0x57CD74 Offset: 0x57CD74 VA: 0x57CD74
	|-UnityAction<Scene, Scene>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual void Invoke(T0 arg0, T1 arg1) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57C630 Offset: 0x57C630 VA: 0x57C630
	|-UnityAction<object, object>.Invoke
	|
	|-RVA: 0x57CA64 Offset: 0x57CA64 VA: 0x57CA64
	|-UnityAction<Scene, LoadSceneMode>.Invoke
	|
	|-RVA: 0x57CD88 Offset: 0x57CD88 VA: 0x57CD88
	|-UnityAction<Scene, Scene>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T0 arg0, T1 arg1, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57CA0C Offset: 0x57CA0C VA: 0x57CA0C
	|-UnityAction<object, object>.BeginInvoke
	|
	|-RVA: 0x57CCAC Offset: 0x57CCAC VA: 0x57CCAC
	|-UnityAction<Scene, LoadSceneMode>.BeginInvoke
	|
	|-RVA: 0x57CFD0 Offset: 0x57CFD0 VA: 0x57CFD0
	|-UnityAction<Scene, Scene>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57CA44 Offset: 0x57CA44 VA: 0x57CA44
	|-UnityAction<object, object>.EndInvoke
	|
	|-RVA: 0x57CD68 Offset: 0x57CD68 VA: 0x57CD68
	|-UnityAction<Scene, LoadSceneMode>.EndInvoke
	|
	|-RVA: 0x57D080 Offset: 0x57D080 VA: 0x57D080
	|-UnityAction<Scene, Scene>.EndInvoke
	*/
}

// Namespace: UnityEngine.Events
[Serializable]
public abstract class UnityEvent<T0, T1> : UnityEventBase // TypeDefIndex: 1626
{
	// Fields
	private object[] m_InvokeArray; // 0x0

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xABCA0 Offset: 0xABCA0 VA: 0xABCA0
	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57FE88 Offset: 0x57FE88 VA: 0x57FE88
	|-UnityEvent<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 6
	protected override MethodInfo FindMethod_Impl(string name, object targetObj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57FEBC Offset: 0x57FEBC VA: 0x57FEBC
	|-UnityEvent<object, object>.FindMethod_Impl
	*/

	// RVA: -1 Offset: -1 Slot: 7
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x580050 Offset: 0x580050 VA: 0x580050
	|-UnityEvent<object, object>.GetDelegate
	*/
}

// Namespace: UnityEngine.Events
public sealed class UnityAction<T0, T1, T2> : MulticastDelegate // TypeDefIndex: 1627
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57D08C Offset: 0x57D08C VA: 0x57D08C
	|-UnityAction<object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual void Invoke(T0 arg0, T1 arg1, T2 arg2) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57D0A0 Offset: 0x57D0A0 VA: 0x57D0A0
	|-UnityAction<object, object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T0 arg0, T1 arg1, T2 arg2, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57D4C8 Offset: 0x57D4C8 VA: 0x57D4C8
	|-UnityAction<object, object, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57D508 Offset: 0x57D508 VA: 0x57D508
	|-UnityAction<object, object, object>.EndInvoke
	*/
}

// Namespace: UnityEngine.Events
[Serializable]
public abstract class UnityEvent<T0, T1, T2> : UnityEventBase // TypeDefIndex: 1628
{
	// Fields
	private object[] m_InvokeArray; // 0x0

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xABCB0 Offset: 0xABCB0 VA: 0xABCB0
	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5800B8 Offset: 0x5800B8 VA: 0x5800B8
	|-UnityEvent<object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 6
	protected override MethodInfo FindMethod_Impl(string name, object targetObj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5800EC Offset: 0x5800EC VA: 0x5800EC
	|-UnityEvent<object, object, object>.FindMethod_Impl
	*/

	// RVA: -1 Offset: -1 Slot: 7
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5802E8 Offset: 0x5802E8 VA: 0x5802E8
	|-UnityEvent<object, object, object>.GetDelegate
	*/
}

// Namespace: UnityEngine.Events
public sealed class UnityAction<T0, T1, T2, T3> : MulticastDelegate // TypeDefIndex: 1629
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57D514 Offset: 0x57D514 VA: 0x57D514
	|-UnityAction<object, object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual void Invoke(T0 arg0, T1 arg1, T2 arg2, T3 arg3) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57D528 Offset: 0x57D528 VA: 0x57D528
	|-UnityAction<object, object, object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T0 arg0, T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57D964 Offset: 0x57D964 VA: 0x57D964
	|-UnityAction<object, object, object, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57D9A8 Offset: 0x57D9A8 VA: 0x57D9A8
	|-UnityAction<object, object, object, object>.EndInvoke
	*/
}

// Namespace: UnityEngine.Events
[Serializable]
public abstract class UnityEvent<T0, T1, T2, T3> : UnityEventBase // TypeDefIndex: 1630
{
	// Fields
	private object[] m_InvokeArray; // 0x0

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xABCC0 Offset: 0xABCC0 VA: 0xABCC0
	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x580350 Offset: 0x580350 VA: 0x580350
	|-UnityEvent<object, object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 6
	protected override MethodInfo FindMethod_Impl(string name, object targetObj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x580384 Offset: 0x580384 VA: 0x580384
	|-UnityEvent<object, object, object, object>.FindMethod_Impl
	*/

	// RVA: -1 Offset: -1 Slot: 7
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5805E8 Offset: 0x5805E8 VA: 0x5805E8
	|-UnityEvent<object, object, object, object>.GetDelegate
	*/
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA4F9C Offset: 0xA4F9C VA: 0xA4F9C
internal class UnityLogWriter : TextWriter // TypeDefIndex: 1631
{
	// Methods

	// RVA: 0x2D891C Offset: 0x2D891C VA: 0x2D891C
	public void .ctor() { }

	[ThreadAndSerializationSafeAttribute] // RVA: 0xABCD0 Offset: 0xABCD0 VA: 0xABCD0
	// RVA: 0x2D89A0 Offset: 0x2D89A0 VA: 0x2D89A0
	public static void WriteStringToUnityLog(string s) { }

	[FreeFunctionAttribute] // RVA: 0xABCE0 Offset: 0xABCE0 VA: 0xABCE0
	// RVA: 0x2D89AC Offset: 0x2D89AC VA: 0x2D89AC
	private static void WriteStringToUnityLogImpl(string s) { }

	// RVA: 0x2D8A24 Offset: 0x2D8A24 VA: 0x2D8A24
	public static void Init() { }

	// RVA: 0x2D8AC0 Offset: 0x2D8AC0 VA: 0x2D8AC0 Slot: 8
	public override void Write(char value) { }

	// RVA: 0x2D8AEC Offset: 0x2D8AEC VA: 0x2D8AEC Slot: 10
	public override void Write(string s) { }

	// RVA: 0x2D8AFC Offset: 0x2D8AFC VA: 0x2D8AFC Slot: 11
	public override void Write(char[] buffer, int index, int count) { }
}

// Namespace: UnityEngine
internal sealed class UnitySynchronizationContext : SynchronizationContext // TypeDefIndex: 1632
{
	// Fields
	private readonly List<UnitySynchronizationContext.WorkRequest> m_AsyncWorkQueue; // 0x8
	private readonly List<UnitySynchronizationContext.WorkRequest> m_CurrentFrameWork; // 0xC
	private readonly int m_MainThreadID; // 0x10
	private int m_TrackedCount; // 0x14

	// Methods

	// RVA: 0x2D8B24 Offset: 0x2D8B24 VA: 0x2D8B24
	private void .ctor(int mainThreadID) { }

	// RVA: 0x2D8BE0 Offset: 0x2D8BE0 VA: 0x2D8BE0
	private void Exec() { }

	// RVA: 0x2D8F9C Offset: 0x2D8F9C VA: 0x2D8F9C
	private bool HasPendingTasks() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xABD10 Offset: 0xABD10 VA: 0xABD10
	// RVA: 0x2D9030 Offset: 0x2D9030 VA: 0x2D9030
	private static void InitializeSynchronizationContext() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xABD20 Offset: 0xABD20 VA: 0xABD20
	// RVA: 0x2D910C Offset: 0x2D910C VA: 0x2D910C
	private static void ExecuteTasks() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xABD30 Offset: 0xABD30 VA: 0xABD30
	// RVA: 0x2D91A4 Offset: 0x2D91A4 VA: 0x2D91A4
	private static bool ExecutePendingTasks(long millisecondsTimeout) { }
}

// Namespace: 
private struct UnitySynchronizationContext.WorkRequest // TypeDefIndex: 1633
{
	// Fields
	private readonly SendOrPostCallback m_DelagateCallback; // 0x0
	private readonly object m_DelagateState; // 0x4
	private readonly ManualResetEvent m_WaitHandle; // 0x8

	// Methods

	// RVA: 0xC83C0 Offset: 0xC83C0 VA: 0xC83C0
	public void Invoke() { }
}

// Namespace: UnityEngine
[DefaultMemberAttribute] // RVA: 0xA4FF4 Offset: 0xA4FF4 VA: 0xA4FF4
[NativeClassAttribute] // RVA: 0xA4FF4 Offset: 0xA4FF4 VA: 0xA4FF4
[RequiredByNativeCodeAttribute] // RVA: 0xA4FF4 Offset: 0xA4FF4 VA: 0xA4FF4
public struct Vector2 : IEquatable<Vector2> // TypeDefIndex: 1634
{
	// Fields
	public float x; // 0x0
	public float y; // 0x4
	private static readonly Vector2 zeroVector; // 0x0
	private static readonly Vector2 oneVector; // 0x8
	private static readonly Vector2 upVector; // 0x10
	private static readonly Vector2 downVector; // 0x18
	private static readonly Vector2 leftVector; // 0x20
	private static readonly Vector2 rightVector; // 0x28
	private static readonly Vector2 positiveInfinityVector; // 0x30
	private static readonly Vector2 negativeInfinityVector; // 0x38
	public const float kEpsilon = 1E-05;
	public const float kEpsilonNormalSqrt = 1E-15;

	// Properties
	public float Item { get; set; }
	public float sqrMagnitude { get; }
	public static Vector2 zero { get; }
	public static Vector2 one { get; }
	public static Vector2 up { get; }
	public static Vector2 right { get; }

	// Methods

	// RVA: 0xC83C8 Offset: 0xC83C8 VA: 0xC83C8
	public void .ctor(float x, float y) { }

	// RVA: 0xC83D4 Offset: 0xC83D4 VA: 0xC83D4
	public float get_Item(int index) { }

	// RVA: 0xC83DC Offset: 0xC83DC VA: 0xC83DC
	public void set_Item(int index, float value) { }

	// RVA: 0x2CCD14 Offset: 0x2CCD14 VA: 0x2CCD14
	public static Vector2 Scale(Vector2 a, Vector2 b) { }

	// RVA: 0xC83E4 Offset: 0xC83E4 VA: 0xC83E4 Slot: 3
	public override string ToString() { }

	// RVA: 0xC83EC Offset: 0xC83EC VA: 0xC83EC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xC841C Offset: 0xC841C VA: 0xC841C Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xC8424 Offset: 0xC8424 VA: 0xC8424 Slot: 4
	public bool Equals(Vector2 other) { }

	// RVA: 0x2D959C Offset: 0x2D959C VA: 0x2D959C
	public static float Dot(Vector2 lhs, Vector2 rhs) { }

	// RVA: 0xC842C Offset: 0xC842C VA: 0xC842C
	public float get_sqrMagnitude() { }

	// RVA: 0x2CCDF8 Offset: 0x2CCDF8 VA: 0x2CCDF8
	public static Vector2 op_Addition(Vector2 a, Vector2 b) { }

	// RVA: 0x2CCD38 Offset: 0x2CCD38 VA: 0x2CCD38
	public static Vector2 op_Subtraction(Vector2 a, Vector2 b) { }

	// RVA: 0x2D95DC Offset: 0x2D95DC VA: 0x2D95DC
	public static Vector2 op_Multiply(Vector2 a, Vector2 b) { }

	// RVA: 0x2D9600 Offset: 0x2D9600 VA: 0x2D9600
	public static Vector2 op_Division(Vector2 a, Vector2 b) { }

	// RVA: 0x2D9624 Offset: 0x2D9624 VA: 0x2D9624
	public static Vector2 op_Multiply(Vector2 a, float d) { }

	// RVA: 0x2D9644 Offset: 0x2D9644 VA: 0x2D9644
	public static Vector2 op_Division(Vector2 a, float d) { }

	// RVA: 0x2D9664 Offset: 0x2D9664 VA: 0x2D9664
	public static bool op_Equality(Vector2 lhs, Vector2 rhs) { }

	// RVA: 0x2D9724 Offset: 0x2D9724 VA: 0x2D9724
	public static bool op_Inequality(Vector2 lhs, Vector2 rhs) { }

	// RVA: 0x2D97C8 Offset: 0x2D97C8 VA: 0x2D97C8
	public static Vector2 op_Implicit(Vector3 v) { }

	// RVA: 0x2D97D0 Offset: 0x2D97D0 VA: 0x2D97D0
	public static Vector3 op_Implicit(Vector2 v) { }

	// RVA: 0x2CDE1C Offset: 0x2CDE1C VA: 0x2CDE1C
	public static Vector2 get_zero() { }

	// RVA: 0x2CCD5C Offset: 0x2CCD5C VA: 0x2CCD5C
	public static Vector2 get_one() { }

	// RVA: 0x2D97DC Offset: 0x2D97DC VA: 0x2D97DC
	public static Vector2 get_up() { }

	// RVA: 0x2D9878 Offset: 0x2D9878 VA: 0x2D9878
	public static Vector2 get_right() { }

	// RVA: 0x2D9914 Offset: 0x2D9914 VA: 0x2D9914
	private static void .cctor() { }
}

// Namespace: UnityEngine
[DefaultMemberAttribute] // RVA: 0xA508C Offset: 0xA508C VA: 0xA508C
[NativeClassAttribute] // RVA: 0xA508C Offset: 0xA508C VA: 0xA508C
[NativeHeaderAttribute] // RVA: 0xA508C Offset: 0xA508C VA: 0xA508C
[RequiredByNativeCodeAttribute] // RVA: 0xA508C Offset: 0xA508C VA: 0xA508C
public struct Vector4 : IEquatable<Vector4> // TypeDefIndex: 1635
{
	// Fields
	public const float kEpsilon = 1E-05;
	public float x; // 0x0
	public float y; // 0x4
	public float z; // 0x8
	public float w; // 0xC
	private static readonly Vector4 zeroVector; // 0x0
	private static readonly Vector4 oneVector; // 0x10
	private static readonly Vector4 positiveInfinityVector; // 0x20
	private static readonly Vector4 negativeInfinityVector; // 0x30

	// Properties
	public float Item { get; set; }
	public float sqrMagnitude { get; }
	public static Vector4 zero { get; }

	// Methods

	// RVA: 0xC84EC Offset: 0xC84EC VA: 0xC84EC
	public void .ctor(float x, float y, float z, float w) { }

	// RVA: 0xC8500 Offset: 0xC8500 VA: 0xC8500
	public float get_Item(int index) { }

	// RVA: 0xC8508 Offset: 0xC8508 VA: 0xC8508
	public void set_Item(int index, float value) { }

	// RVA: 0xC8510 Offset: 0xC8510 VA: 0xC8510 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xC8518 Offset: 0xC8518 VA: 0xC8518 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xC8520 Offset: 0xC8520 VA: 0xC8520 Slot: 4
	public bool Equals(Vector4 other) { }

	// RVA: 0x2DAD88 Offset: 0x2DAD88 VA: 0x2DAD88
	public static float Dot(Vector4 a, Vector4 b) { }

	// RVA: 0xC8544 Offset: 0xC8544 VA: 0xC8544
	public float get_sqrMagnitude() { }

	// RVA: 0x2DAE7C Offset: 0x2DAE7C VA: 0x2DAE7C
	public static Vector4 get_zero() { }

	// RVA: 0x2DAF10 Offset: 0x2DAF10 VA: 0x2DAF10
	public static Vector4 op_Subtraction(Vector4 a, Vector4 b) { }

	// RVA: 0x2DAF54 Offset: 0x2DAF54 VA: 0x2DAF54
	public static Vector4 op_Division(Vector4 a, float d) { }

	// RVA: 0x2DAF8C Offset: 0x2DAF8C VA: 0x2DAF8C
	public static bool op_Equality(Vector4 lhs, Vector4 rhs) { }

	// RVA: 0xC854C Offset: 0xC854C VA: 0xC854C Slot: 3
	public override string ToString() { }

	// RVA: 0x2DB08C Offset: 0x2DB08C VA: 0x2DB08C
	public static float SqrMagnitude(Vector4 a) { }

	// RVA: 0x2DB3B0 Offset: 0x2DB3B0 VA: 0x2DB3B0
	private static void .cctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA515C Offset: 0xA515C VA: 0xA515C
public sealed class WaitForEndOfFrame : YieldInstruction // TypeDefIndex: 1636
{
	// Methods

	// RVA: 0x2DB468 Offset: 0x2DB468 VA: 0x2DB468
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA516C Offset: 0xA516C VA: 0xA516C
public sealed class WaitForFixedUpdate : YieldInstruction // TypeDefIndex: 1637
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA517C Offset: 0xA517C VA: 0xA517C
public sealed class WaitForSeconds : YieldInstruction // TypeDefIndex: 1638
{
	// Fields
	internal float m_Seconds; // 0x8

	// Methods

	// RVA: 0x2DB478 Offset: 0x2DB478 VA: 0x2DB478
	public void .ctor(float seconds) { }
}

// Namespace: UnityEngine
public class WaitForSecondsRealtime : CustomYieldInstruction // TypeDefIndex: 1639
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA7BB8 Offset: 0xA7BB8 VA: 0xA7BB8
	[DebuggerBrowsableAttribute] // RVA: 0xA7BB8 Offset: 0xA7BB8 VA: 0xA7BB8
	private float <waitTime>k__BackingField; // 0x8
	private float m_WaitUntilTime; // 0xC

	// Properties
	public float waitTime { get; set; }
	public override bool keepWaiting { get; }

	// Methods

	// RVA: 0x2DB498 Offset: 0x2DB498 VA: 0x2DB498
	public void .ctor(float time) { }

	[CompilerGeneratedAttribute] // RVA: 0xABD40 Offset: 0xABD40 VA: 0xABD40
	// RVA: 0x2DB4D0 Offset: 0x2DB4D0 VA: 0x2DB4D0
	public float get_waitTime() { }

	[CompilerGeneratedAttribute] // RVA: 0xABD50 Offset: 0xABD50 VA: 0xABD50
	// RVA: 0x2DB4C8 Offset: 0x2DB4C8 VA: 0x2DB4C8
	public void set_waitTime(float value) { }

	// RVA: 0x2DB4D8 Offset: 0x2DB4D8 VA: 0x2DB4D8 Slot: 7
	public override bool get_keepWaiting() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xA518C Offset: 0xA518C VA: 0xA518C
public class YieldInstruction // TypeDefIndex: 1640
{
	// Methods

	// RVA: 0x2DB470 Offset: 0x2DB470 VA: 0x2DB470
	public void .ctor() { }
}

// Namespace: UnityEngine.Assertions
[DebuggerStepThroughAttribute] // RVA: 0xA519C Offset: 0xA519C VA: 0xA519C
public static class Assert // TypeDefIndex: 1641
{
	// Fields
	public static bool raiseExceptions; // 0x0

	// Methods

	// RVA: 0x313228 Offset: 0x313228 VA: 0x313228
	private static void Fail(string message, string userMessage) { }

	[ConditionalAttribute] // RVA: 0xABD60 Offset: 0xABD60 VA: 0xABD60
	// RVA: -1 Offset: -1
	public static void AreEqual<T>(T expected, T actual, string message) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x511F30 Offset: 0x511F30 VA: 0x511F30
	|-Assert.AreEqual<int>
	|
	|-RVA: 0x512380 Offset: 0x512380 VA: 0x512380
	|-Assert.AreEqual<object>
	*/

	[ConditionalAttribute] // RVA: 0xABD94 Offset: 0xABD94 VA: 0xABD94
	// RVA: -1 Offset: -1
	public static void AreEqual<T>(T expected, T actual, string message, IEqualityComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x512068 Offset: 0x512068 VA: 0x512068
	|-Assert.AreEqual<int>
	|
	|-RVA: 0x5124B8 Offset: 0x5124B8 VA: 0x5124B8
	|-Assert.AreEqual<object>
	*/

	[ConditionalAttribute] // RVA: 0xABDC8 Offset: 0xABDC8 VA: 0xABDC8
	// RVA: 0x313574 Offset: 0x313574 VA: 0x313574
	public static void AreEqual(Object expected, Object actual, string message) { }

	[ConditionalAttribute] // RVA: 0xABDFC Offset: 0xABDFC VA: 0xABDFC
	// RVA: 0x3138DC Offset: 0x3138DC VA: 0x3138DC
	public static void AreEqual(int expected, int actual) { }

	// RVA: 0x313980 Offset: 0x313980 VA: 0x313980
	private static void .cctor() { }
}

// Namespace: UnityEngine.Assertions
public class AssertionException : Exception // TypeDefIndex: 1642
{
	// Fields
	private string m_UserMessage; // 0x34

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x313444 Offset: 0x313444 VA: 0x313444
	public void .ctor(string message, string userMessage) { }

	// RVA: 0x3139E8 Offset: 0x3139E8 VA: 0x3139E8 Slot: 6
	public override string get_Message() { }
}

// Namespace: UnityEngine.Assertions
internal class AssertionMessageUtil // TypeDefIndex: 1643
{
	// Methods

	// RVA: 0x313AC8 Offset: 0x313AC8 VA: 0x313AC8
	public static string GetMessage(string failureMessage) { }

	// RVA: 0x313C18 Offset: 0x313C18 VA: 0x313C18
	public static string GetMessage(string failureMessage, string expected) { }

	// RVA: 0x313658 Offset: 0x313658 VA: 0x313658
	public static string GetEqualityMessage(object actual, object expected, bool expectEqual) { }
}

// Namespace: UnityEngine.Experimental.Rendering
[NativeHeaderAttribute] // RVA: 0xA51AC Offset: 0xA51AC VA: 0xA51AC
internal class BuiltinRuntimeReflectionSystem : IScriptableRuntimeReflectionSystem, IDisposable // TypeDefIndex: 1644
{
	// Methods

	// RVA: 0x31D750 Offset: 0x31D750 VA: 0x31D750
	public void .ctor() { }

	// RVA: 0x31D758 Offset: 0x31D758 VA: 0x31D758 Slot: 4
	public bool TickRealtimeProbes() { }

	// RVA: 0x31D7D0 Offset: 0x31D7D0 VA: 0x31D7D0 Slot: 5
	public void Dispose() { }

	// RVA: 0x31D7D4 Offset: 0x31D7D4 VA: 0x31D7D4
	private void Dispose(bool disposing) { }

	[StaticAccessorAttribute] // RVA: 0xABE30 Offset: 0xABE30 VA: 0xABE30
	// RVA: 0x31D75C Offset: 0x31D75C VA: 0x31D75C
	private static bool BuiltinUpdate() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xABE84 Offset: 0xABE84 VA: 0xABE84
	// RVA: 0x31D7D8 Offset: 0x31D7D8 VA: 0x31D7D8
	private static BuiltinRuntimeReflectionSystem Internal_BuiltinRuntimeReflectionSystem_New() { }
}

// Namespace: UnityEngine.Experimental.Rendering
public interface IScriptableRuntimeReflectionSystem : IDisposable // TypeDefIndex: 1645
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool TickRealtimeProbes();
}

// Namespace: UnityEngine.Experimental.Rendering
[RequiredByNativeCodeAttribute] // RVA: 0xA51E0 Offset: 0xA51E0 VA: 0xA51E0
[NativeHeaderAttribute] // RVA: 0xA51E0 Offset: 0xA51E0 VA: 0xA51E0
public static class ScriptableRuntimeReflectionSystemSettings // TypeDefIndex: 1646
{
	// Fields
	private static ScriptableRuntimeReflectionSystemWrapper s_Instance; // 0x0

	// Properties
	private static IScriptableRuntimeReflectionSystem Internal_ScriptableRuntimeReflectionSystemSettings_system { set; }
	private static ScriptableRuntimeReflectionSystemWrapper Internal_ScriptableRuntimeReflectionSystemSettings_instance { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xABE94 Offset: 0xABE94 VA: 0xABE94
	// RVA: 0x31E168 Offset: 0x31E168 VA: 0x31E168
	private static void set_Internal_ScriptableRuntimeReflectionSystemSettings_system(IScriptableRuntimeReflectionSystem value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xABEA4 Offset: 0xABEA4 VA: 0xABEA4
	// RVA: 0x31E3BC Offset: 0x31E3BC VA: 0x31E3BC
	private static ScriptableRuntimeReflectionSystemWrapper get_Internal_ScriptableRuntimeReflectionSystemSettings_instance() { }

	[StaticAccessorAttribute] // RVA: 0xABEB4 Offset: 0xABEB4 VA: 0xABEB4
	[RuntimeInitializeOnLoadMethodAttribute] // RVA: 0xABEB4 Offset: 0xABEB4 VA: 0xABEB4
	// RVA: 0x31E448 Offset: 0x31E448 VA: 0x31E448
	private static void ScriptingDirtyReflectionSystemInstance() { }

	// RVA: 0x31E4BC Offset: 0x31E4BC VA: 0x31E4BC
	private static void .cctor() { }
}

// Namespace: UnityEngine.Experimental.Rendering
[RequiredByNativeCodeAttribute] // RVA: 0xA5254 Offset: 0xA5254 VA: 0xA5254
internal class ScriptableRuntimeReflectionSystemWrapper // TypeDefIndex: 1647
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA7BEC Offset: 0xA7BEC VA: 0xA7BEC
	[DebuggerBrowsableAttribute] // RVA: 0xA7BEC Offset: 0xA7BEC VA: 0xA7BEC
	private IScriptableRuntimeReflectionSystem <implementation>k__BackingField; // 0x8

	// Properties
	internal IScriptableRuntimeReflectionSystem implementation { get; set; }

	// Methods

	// RVA: 0x31E53C Offset: 0x31E53C VA: 0x31E53C
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xABF20 Offset: 0xABF20 VA: 0xABF20
	// RVA: 0x31E3AC Offset: 0x31E3AC VA: 0x31E3AC
	internal IScriptableRuntimeReflectionSystem get_implementation() { }

	[CompilerGeneratedAttribute] // RVA: 0xABF30 Offset: 0xABF30 VA: 0xABF30
	// RVA: 0x31E3B4 Offset: 0x31E3B4 VA: 0x31E3B4
	internal void set_implementation(IScriptableRuntimeReflectionSystem value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xABF40 Offset: 0xABF40 VA: 0xABF40
	// RVA: 0x31E544 Offset: 0x31E544 VA: 0x31E544
	private void Internal_ScriptableRuntimeReflectionSystemWrapper_TickRealtimeProbes(IntPtr result) { }
}

// Namespace: Unity.Collections
[AttributeUsageAttribute] // RVA: 0xA5264 Offset: 0xA5264 VA: 0xA5264
[RequiredByNativeCodeAttribute] // RVA: 0xA5264 Offset: 0xA5264 VA: 0xA5264
public sealed class ReadOnlyAttribute : Attribute // TypeDefIndex: 1648
{}

// Namespace: Unity.Collections
[AttributeUsageAttribute] // RVA: 0xA5298 Offset: 0xA5298 VA: 0xA5298
[RequiredByNativeCodeAttribute] // RVA: 0xA5298 Offset: 0xA5298 VA: 0xA5298
public sealed class WriteOnlyAttribute : Attribute // TypeDefIndex: 1649
{}

// Namespace: Unity.Collections
[RequiredByNativeCodeAttribute] // RVA: 0xA52CC Offset: 0xA52CC VA: 0xA52CC
[AttributeUsageAttribute] // RVA: 0xA52CC Offset: 0xA52CC VA: 0xA52CC
public sealed class DeallocateOnJobCompletionAttribute : Attribute // TypeDefIndex: 1650
{}

// Namespace: Unity.Collections
[AttributeUsageAttribute] // RVA: 0xA5300 Offset: 0xA5300 VA: 0xA5300
[RequiredByNativeCodeAttribute] // RVA: 0xA5300 Offset: 0xA5300 VA: 0xA5300
public sealed class NativeFixedLengthAttribute : Attribute // TypeDefIndex: 1651
{}

// Namespace: Unity.Collections
[RequiredByNativeCodeAttribute] // RVA: 0xA5334 Offset: 0xA5334 VA: 0xA5334
[AttributeUsageAttribute] // RVA: 0xA5334 Offset: 0xA5334 VA: 0xA5334
public sealed class NativeMatchesParallelForLengthAttribute : Attribute // TypeDefIndex: 1652
{}

// Namespace: Unity.Collections
[RequiredByNativeCodeAttribute] // RVA: 0xA5368 Offset: 0xA5368 VA: 0xA5368
[AttributeUsageAttribute] // RVA: 0xA5368 Offset: 0xA5368 VA: 0xA5368
public sealed class NativeDisableParallelForRestrictionAttribute : Attribute // TypeDefIndex: 1653
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0xA539C Offset: 0xA539C VA: 0xA539C
[AttributeUsageAttribute] // RVA: 0xA539C Offset: 0xA539C VA: 0xA539C
public sealed class NativeContainerAttribute : Attribute // TypeDefIndex: 1654
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0xA53D0 Offset: 0xA53D0 VA: 0xA53D0
[AttributeUsageAttribute] // RVA: 0xA53D0 Offset: 0xA53D0 VA: 0xA53D0
public sealed class NativeContainerIsReadOnlyAttribute : Attribute // TypeDefIndex: 1655
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0xA5404 Offset: 0xA5404 VA: 0xA5404
[AttributeUsageAttribute] // RVA: 0xA5404 Offset: 0xA5404 VA: 0xA5404
public sealed class NativeContainerIsAtomicWriteOnlyAttribute : Attribute // TypeDefIndex: 1656
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0xA5438 Offset: 0xA5438 VA: 0xA5438
[AttributeUsageAttribute] // RVA: 0xA5438 Offset: 0xA5438 VA: 0xA5438
public sealed class NativeContainerSupportsMinMaxWriteRestrictionAttribute : Attribute // TypeDefIndex: 1657
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0xA546C Offset: 0xA546C VA: 0xA546C
[AttributeUsageAttribute] // RVA: 0xA546C Offset: 0xA546C VA: 0xA546C
public sealed class NativeContainerSupportsDeallocateOnJobCompletionAttribute : Attribute // TypeDefIndex: 1658
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0xA54A0 Offset: 0xA54A0 VA: 0xA54A0
[AttributeUsageAttribute] // RVA: 0xA54A0 Offset: 0xA54A0 VA: 0xA54A0
public sealed class NativeContainerSupportsDeferredConvertListToArray : Attribute // TypeDefIndex: 1659
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0xA54D4 Offset: 0xA54D4 VA: 0xA54D4
[RequiredByNativeCodeAttribute] // RVA: 0xA54D4 Offset: 0xA54D4 VA: 0xA54D4
public sealed class NativeSetThreadIndexAttribute : Attribute // TypeDefIndex: 1660
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[ObsoleteAttribute] // RVA: 0xA5508 Offset: 0xA5508 VA: 0xA5508
[AttributeUsageAttribute] // RVA: 0xA5508 Offset: 0xA5508 VA: 0xA5508
[RequiredByNativeCodeAttribute] // RVA: 0xA5508 Offset: 0xA5508 VA: 0xA5508
public sealed class NativeContainerNeedsThreadIndexAttribute : Attribute // TypeDefIndex: 1661
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0xA5588 Offset: 0xA5588 VA: 0xA5588
[RequiredByNativeCodeAttribute] // RVA: 0xA5588 Offset: 0xA5588 VA: 0xA5588
public sealed class NativeDisableUnsafePtrRestrictionAttribute : Attribute // TypeDefIndex: 1662
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0xA55BC Offset: 0xA55BC VA: 0xA55BC
[RequiredByNativeCodeAttribute] // RVA: 0xA55BC Offset: 0xA55BC VA: 0xA55BC
public sealed class NativeDisableContainerSafetyRestrictionAttribute : Attribute // TypeDefIndex: 1663
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0xA55F0 Offset: 0xA55F0 VA: 0xA55F0
[RequiredByNativeCodeAttribute] // RVA: 0xA55F0 Offset: 0xA55F0 VA: 0xA55F0
public sealed class NativeSetClassTypeToNullOnScheduleAttribute : Attribute // TypeDefIndex: 1664
{}

// Namespace: UnityEngine.Experimental.Playables
[RequiredByNativeCodeAttribute] // RVA: 0xA5624 Offset: 0xA5624 VA: 0xA5624
[NativeHeaderAttribute] // RVA: 0xA5624 Offset: 0xA5624 VA: 0xA5624
[StaticAccessorAttribute] // RVA: 0xA5624 Offset: 0xA5624 VA: 0xA5624
[NativeHeaderAttribute] // RVA: 0xA5624 Offset: 0xA5624 VA: 0xA5624
[NativeHeaderAttribute] // RVA: 0xA5624 Offset: 0xA5624 VA: 0xA5624
public struct CameraPlayable : IPlayable, IEquatable<CameraPlayable> // TypeDefIndex: 1665
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0xC943C Offset: 0xC943C VA: 0xC943C Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0xC9450 Offset: 0xC9450 VA: 0xC9450 Slot: 4
	public bool Equals(CameraPlayable other) { }
}

// Namespace: UnityEngine.Playables
public struct FrameData // TypeDefIndex: 1666
{
	// Fields
	internal ulong m_FrameID; // 0x0
	internal double m_DeltaTime; // 0x8
	internal float m_Weight; // 0x10
	internal float m_EffectiveWeight; // 0x14
	internal double m_EffectiveParentDelay; // 0x18
	internal float m_EffectiveParentSpeed; // 0x20
	internal float m_EffectiveSpeed; // 0x24
	internal FrameData.Flags m_Flags; // 0x28
	internal PlayableOutput m_Output; // 0x2C
}

// Namespace: 
[FlagsAttribute] // RVA: 0xA5748 Offset: 0xA5748 VA: 0xA5748
internal enum FrameData.Flags // TypeDefIndex: 1667
{
	// Fields
	public int value__; // 0x0
	public const FrameData.Flags Evaluate = 1;
	public const FrameData.Flags SeekOccured = 2;
	public const FrameData.Flags Loop = 4;
	public const FrameData.Flags Hold = 8;
	public const FrameData.Flags EffectivePlayStateDelayed = 16;
	public const FrameData.Flags EffectivePlayStatePlaying = 32;
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0xA5758 Offset: 0xA5758 VA: 0xA5758
public interface INotificationReceiver // TypeDefIndex: 1668
{}

// Namespace: UnityEngine.Playables
public interface IPlayable // TypeDefIndex: 1669
{}

// Namespace: UnityEngine.Playables
public interface IPlayableBehaviour // TypeDefIndex: 1670
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xABF50 Offset: 0xABF50 VA: 0xABF50
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnGraphStart(Playable playable);

	[RequiredByNativeCodeAttribute] // RVA: 0xABF60 Offset: 0xABF60 VA: 0xABF60
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void OnGraphStop(Playable playable);

	[RequiredByNativeCodeAttribute] // RVA: 0xABF70 Offset: 0xABF70 VA: 0xABF70
	// RVA: -1 Offset: -1 Slot: 2
	public abstract void OnPlayableCreate(Playable playable);

	[RequiredByNativeCodeAttribute] // RVA: 0xABF80 Offset: 0xABF80 VA: 0xABF80
	// RVA: -1 Offset: -1 Slot: 3
	public abstract void OnPlayableDestroy(Playable playable);

	[RequiredByNativeCodeAttribute] // RVA: 0xABF90 Offset: 0xABF90 VA: 0xABF90
	// RVA: -1 Offset: -1 Slot: 4
	public abstract void OnBehaviourPlay(Playable playable, FrameData info);

	[RequiredByNativeCodeAttribute] // RVA: 0xABFA0 Offset: 0xABFA0 VA: 0xABFA0
	// RVA: -1 Offset: -1 Slot: 5
	public abstract void OnBehaviourPause(Playable playable, FrameData info);

	[RequiredByNativeCodeAttribute] // RVA: 0xABFB0 Offset: 0xABFB0 VA: 0xABFB0
	// RVA: -1 Offset: -1 Slot: 6
	public abstract void PrepareFrame(Playable playable, FrameData info);

	[RequiredByNativeCodeAttribute] // RVA: 0xABFC0 Offset: 0xABFC0 VA: 0xABFC0
	// RVA: -1 Offset: -1 Slot: 7
	public abstract void ProcessFrame(Playable playable, FrameData info, object playerData);
}

// Namespace: UnityEngine.Playables
public interface IPlayableOutput // TypeDefIndex: 1671
{}

// Namespace: UnityEngine.Experimental.Playables
[NativeHeaderAttribute] // RVA: 0xA5768 Offset: 0xA5768 VA: 0xA5768
[NativeHeaderAttribute] // RVA: 0xA5768 Offset: 0xA5768 VA: 0xA5768
[RequiredByNativeCodeAttribute] // RVA: 0xA5768 Offset: 0xA5768 VA: 0xA5768
[StaticAccessorAttribute] // RVA: 0xA5768 Offset: 0xA5768 VA: 0xA5768
[NativeHeaderAttribute] // RVA: 0xA5768 Offset: 0xA5768 VA: 0xA5768
public struct MaterialEffectPlayable : IPlayable, IEquatable<MaterialEffectPlayable> // TypeDefIndex: 1672
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0xC9458 Offset: 0xC9458 VA: 0xC9458 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0xC946C Offset: 0xC946C VA: 0xC946C Slot: 4
	public bool Equals(MaterialEffectPlayable other) { }
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0xA5878 Offset: 0xA5878 VA: 0xA5878
public struct Playable : IPlayable, IEquatable<Playable> // TypeDefIndex: 1673
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly Playable m_NullPlayable; // 0x0

	// Properties
	public static Playable Null { get; }

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xABFD0 Offset: 0xABFD0 VA: 0xABFD0
	// RVA: 0xC7A80 Offset: 0xC7A80 VA: 0xC7A80
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0x2C7640 Offset: 0x2C7640 VA: 0x2C7640
	public static Playable get_Null() { }

	// RVA: 0xC7A8C Offset: 0xC7A8C VA: 0xC7A8C Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0xC7AA0 Offset: 0xC7AA0 VA: 0xC7AA0 Slot: 4
	public bool Equals(Playable other) { }

	// RVA: 0x2C7838 Offset: 0x2C7838 VA: 0x2C7838
	private static void .cctor() { }
}

// Namespace: UnityEngine.Playables
public interface IPlayableAsset // TypeDefIndex: 1674
{}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0xA5888 Offset: 0xA5888 VA: 0xA5888
[AssetFileNameExtensionAttribute] // RVA: 0xA5888 Offset: 0xA5888 VA: 0xA5888
[Serializable]
public abstract class PlayableAsset : ScriptableObject, IPlayableAsset // TypeDefIndex: 1675
{
	// Properties
	public virtual double duration { get; }
	public virtual IEnumerable<PlayableBinding> outputs { get; }

	// Methods

	// RVA: 0x2C7974 Offset: 0x2C7974 VA: 0x2C7974
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract Playable CreatePlayable(PlayableGraph graph, GameObject owner);

	// RVA: 0x2C7978 Offset: 0x2C7978 VA: 0x2C7978 Slot: 5
	public virtual double get_duration() { }

	// RVA: 0x2C7A08 Offset: 0x2C7A08 VA: 0x2C7A08 Slot: 6
	public virtual IEnumerable<PlayableBinding> get_outputs() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xABFE0 Offset: 0xABFE0 VA: 0xABFE0
	// RVA: 0x2C7A94 Offset: 0x2C7A94 VA: 0x2C7A94
	internal static void Internal_CreatePlayable(PlayableAsset asset, PlayableGraph graph, GameObject go, IntPtr ptr) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xABFF0 Offset: 0xABFF0 VA: 0xABFF0
	// RVA: 0x2C7BC4 Offset: 0x2C7BC4 VA: 0x2C7BC4
	internal static void Internal_GetPlayableAssetDuration(PlayableAsset asset, IntPtr ptrToDouble) { }
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0xA5930 Offset: 0xA5930 VA: 0xA5930
[Serializable]
public abstract class PlayableBehaviour : IPlayableBehaviour, ICloneable // TypeDefIndex: 1676
{
	// Methods

	// RVA: 0x2C7C1C Offset: 0x2C7C1C VA: 0x2C7C1C
	public void .ctor() { }

	// RVA: 0x2C7C24 Offset: 0x2C7C24 VA: 0x2C7C24 Slot: 13
	public virtual void OnGraphStart(Playable playable) { }

	// RVA: 0x2C7C28 Offset: 0x2C7C28 VA: 0x2C7C28 Slot: 14
	public virtual void OnGraphStop(Playable playable) { }

	// RVA: 0x2C7C2C Offset: 0x2C7C2C VA: 0x2C7C2C Slot: 15
	public virtual void OnPlayableCreate(Playable playable) { }

	// RVA: 0x2C7C30 Offset: 0x2C7C30 VA: 0x2C7C30 Slot: 16
	public virtual void OnPlayableDestroy(Playable playable) { }

	// RVA: 0x2C7C34 Offset: 0x2C7C34 VA: 0x2C7C34 Slot: 17
	public virtual void OnBehaviourPlay(Playable playable, FrameData info) { }

	// RVA: 0x2C7C38 Offset: 0x2C7C38 VA: 0x2C7C38 Slot: 18
	public virtual void OnBehaviourPause(Playable playable, FrameData info) { }

	// RVA: 0x2C7C3C Offset: 0x2C7C3C VA: 0x2C7C3C Slot: 19
	public virtual void PrepareFrame(Playable playable, FrameData info) { }

	// RVA: 0x2C7C40 Offset: 0x2C7C40 VA: 0x2C7C40 Slot: 20
	public virtual void ProcessFrame(Playable playable, FrameData info, object playerData) { }

	// RVA: 0x2C7C44 Offset: 0x2C7C44 VA: 0x2C7C44 Slot: 21
	public virtual object Clone() { }
}

// Namespace: UnityEngine.Playables
public struct PlayableBinding // TypeDefIndex: 1677
{
	// Fields
	private string m_StreamName; // 0x0
	private Object m_SourceObject; // 0x4
	private Type m_SourceBindingType; // 0x8
	private PlayableBinding.CreateOutputMethod m_CreateOutputMethod; // 0xC
	public static readonly PlayableBinding[] None; // 0x0
	public static readonly double DefaultDuration; // 0x8

	// Methods

	// RVA: 0x2C7C4C Offset: 0x2C7C4C VA: 0x2C7C4C
	private static void .cctor() { }
}

// Namespace: 
[VisibleToOtherModulesAttribute] // RVA: 0xA5940 Offset: 0xA5940 VA: 0xA5940
internal sealed class PlayableBinding.CreateOutputMethod : MulticastDelegate // TypeDefIndex: 1678
{
	// Methods

	// RVA: 0x2C7CDC Offset: 0x2C7CDC VA: 0x2C7CDC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x2C7CF0 Offset: 0x2C7CF0 VA: 0x2C7CF0 Slot: 11
	public virtual PlayableOutput Invoke(PlayableGraph graph, string name) { }

	// RVA: 0x2C7FB8 Offset: 0x2C7FB8 VA: 0x2C7FB8 Slot: 12
	public virtual IAsyncResult BeginInvoke(PlayableGraph graph, string name, AsyncCallback callback, object object) { }

	// RVA: 0x2C8058 Offset: 0x2C8058 VA: 0x2C8058 Slot: 13
	public virtual PlayableOutput EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Playables
[NativeHeaderAttribute] // RVA: 0xA5950 Offset: 0xA5950 VA: 0xA5950
[NativeHeaderAttribute] // RVA: 0xA5950 Offset: 0xA5950 VA: 0xA5950
[UsedByNativeCodeAttribute] // RVA: 0xA5950 Offset: 0xA5950 VA: 0xA5950
[NativeHeaderAttribute] // RVA: 0xA5950 Offset: 0xA5950 VA: 0xA5950
[NativeHeaderAttribute] // RVA: 0xA5950 Offset: 0xA5950 VA: 0xA5950
public struct PlayableGraph // TypeDefIndex: 1679
{
	// Fields
	internal IntPtr m_Handle; // 0x0
	internal uint m_Version; // 0x4
}

// Namespace: UnityEngine.Playables
[NativeHeaderAttribute] // RVA: 0xA5A3C Offset: 0xA5A3C VA: 0xA5A3C
[UsedByNativeCodeAttribute] // RVA: 0xA5A3C Offset: 0xA5A3C VA: 0xA5A3C
[NativeHeaderAttribute] // RVA: 0xA5A3C Offset: 0xA5A3C VA: 0xA5A3C
[NativeHeaderAttribute] // RVA: 0xA5A3C Offset: 0xA5A3C VA: 0xA5A3C
public struct PlayableHandle : IEquatable<PlayableHandle> // TypeDefIndex: 1680
{
	// Fields
	internal IntPtr m_Handle; // 0x0
	internal uint m_Version; // 0x4
	private static readonly PlayableHandle m_Null; // 0x0

	// Properties
	public static PlayableHandle Null { get; }

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xAC000 Offset: 0xAC000 VA: 0xAC000
	// RVA: -1 Offset: -1
	internal bool IsPlayableOfType<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC9784 Offset: 0xC9784 VA: 0xC9784
	|-PlayableHandle.IsPlayableOfType<object>
	|
	|-RVA: 0xC978C Offset: 0xC978C VA: 0xC978C
	|-PlayableHandle.IsPlayableOfType<AnimationLayerMixerPlayable>
	|
	|-RVA: 0xC9794 Offset: 0xC9794 VA: 0xC9794
	|-PlayableHandle.IsPlayableOfType<AnimationMixerPlayable>
	|
	|-RVA: 0xC979C Offset: 0xC979C VA: 0xC979C
	|-PlayableHandle.IsPlayableOfType<AnimationMotionXToDeltaPlayable>
	|
	|-RVA: 0xC97A4 Offset: 0xC97A4 VA: 0xC97A4
	|-PlayableHandle.IsPlayableOfType<AnimationOffsetPlayable>
	|
	|-RVA: 0xC97AC Offset: 0xC97AC VA: 0xC97AC
	|-PlayableHandle.IsPlayableOfType<AnimationPosePlayable>
	|
	|-RVA: 0xC97B4 Offset: 0xC97B4 VA: 0xC97B4
	|-PlayableHandle.IsPlayableOfType<AnimationRemoveScalePlayable>
	|
	|-RVA: 0xC97BC Offset: 0xC97BC VA: 0xC97BC
	|-PlayableHandle.IsPlayableOfType<AnimatorControllerPlayable>
	|
	|-RVA: 0xC97C4 Offset: 0xC97C4 VA: 0xC97C4
	|-PlayableHandle.IsPlayableOfType<AnimationScriptPlayable>
	*/

	// RVA: 0x2C78D8 Offset: 0x2C78D8 VA: 0x2C78D8
	public static PlayableHandle get_Null() { }

	// RVA: 0x2C7794 Offset: 0x2C7794 VA: 0x2C7794
	public static bool op_Equality(PlayableHandle x, PlayableHandle y) { }

	// RVA: 0xC7B4C Offset: 0xC7B4C VA: 0xC7B4C Slot: 0
	public override bool Equals(object p) { }

	// RVA: 0xC7B54 Offset: 0xC7B54 VA: 0xC7B54 Slot: 4
	public bool Equals(PlayableHandle other) { }

	// RVA: 0xC7B5C Offset: 0xC7B5C VA: 0xC7B5C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2C80A0 Offset: 0x2C80A0 VA: 0x2C80A0
	internal static bool CompareVersion(PlayableHandle lhs, PlayableHandle rhs) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xAC010 Offset: 0xAC010 VA: 0xAC010
	// RVA: 0xC7B8C Offset: 0xC7B8C VA: 0xC7B8C
	internal bool IsValid() { }

	[FreeFunctionAttribute] // RVA: 0xAC020 Offset: 0xAC020 VA: 0xAC020
	[VisibleToOtherModulesAttribute] // RVA: 0xAC020 Offset: 0xAC020 VA: 0xAC020
	// RVA: 0xC7B94 Offset: 0xC7B94 VA: 0xC7B94
	internal Type GetPlayableType() { }

	// RVA: 0x2C8424 Offset: 0x2C8424 VA: 0x2C8424
	private static void .cctor() { }

	// RVA: 0x2C82B4 Offset: 0x2C82B4 VA: 0x2C82B4
	private static bool IsValid_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x2C83AC Offset: 0x2C83AC VA: 0x2C83AC
	private static Type GetPlayableType_Injected(ref PlayableHandle _unity_self) { }
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0xA5B00 Offset: 0xA5B00 VA: 0xA5B00
public struct PlayableOutput : IPlayableOutput, IEquatable<PlayableOutput> // TypeDefIndex: 1681
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0
	private static readonly PlayableOutput m_NullPlayableOutput; // 0x0

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xAC0A8 Offset: 0xAC0A8 VA: 0xAC0A8
	// RVA: 0xC7B9C Offset: 0xC7B9C VA: 0xC7B9C
	internal void .ctor(PlayableOutputHandle handle) { }

	// RVA: 0xC7BA8 Offset: 0xC7BA8 VA: 0xC7BA8 Slot: 5
	public PlayableOutputHandle GetHandle() { }

	// RVA: 0xC7BBC Offset: 0xC7BBC VA: 0xC7BBC Slot: 4
	public bool Equals(PlayableOutput other) { }

	// RVA: 0x2C85F4 Offset: 0x2C85F4 VA: 0x2C85F4
	private static void .cctor() { }
}

// Namespace: UnityEngine.Playables
[NativeHeaderAttribute] // RVA: 0xA5B10 Offset: 0xA5B10 VA: 0xA5B10
[UsedByNativeCodeAttribute] // RVA: 0xA5B10 Offset: 0xA5B10 VA: 0xA5B10
[NativeHeaderAttribute] // RVA: 0xA5B10 Offset: 0xA5B10 VA: 0xA5B10
[NativeHeaderAttribute] // RVA: 0xA5B10 Offset: 0xA5B10 VA: 0xA5B10
public struct PlayableOutputHandle : IEquatable<PlayableOutputHandle> // TypeDefIndex: 1682
{
	// Fields
	internal IntPtr m_Handle; // 0x0
	internal uint m_Version; // 0x4
	private static readonly PlayableOutputHandle m_Null; // 0x0

	// Properties
	public static PlayableOutputHandle Null { get; }

	// Methods

	// RVA: 0x2C8694 Offset: 0x2C8694 VA: 0x2C8694
	public static PlayableOutputHandle get_Null() { }

	// RVA: 0xC7BC4 Offset: 0xC7BC4 VA: 0xC7BC4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2C8550 Offset: 0x2C8550 VA: 0x2C8550
	public static bool op_Equality(PlayableOutputHandle lhs, PlayableOutputHandle rhs) { }

	// RVA: 0xC7BF4 Offset: 0xC7BF4 VA: 0xC7BF4 Slot: 0
	public override bool Equals(object p) { }

	// RVA: 0xC7BFC Offset: 0xC7BFC VA: 0xC7BFC Slot: 4
	public bool Equals(PlayableOutputHandle other) { }

	// RVA: 0x2C875C Offset: 0x2C875C VA: 0x2C875C
	internal static bool CompareVersion(PlayableOutputHandle lhs, PlayableOutputHandle rhs) { }

	// RVA: 0x2C88C4 Offset: 0x2C88C4 VA: 0x2C88C4
	private static void .cctor() { }
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0xA5BD8 Offset: 0xA5BD8 VA: 0xA5BD8
public struct ScriptPlayableOutput : IPlayableOutput // TypeDefIndex: 1683
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0
}

// Namespace: UnityEngine.Experimental.Playables
[NativeHeaderAttribute] // RVA: 0xA5BE8 Offset: 0xA5BE8 VA: 0xA5BE8
[NativeHeaderAttribute] // RVA: 0xA5BE8 Offset: 0xA5BE8 VA: 0xA5BE8
[NativeHeaderAttribute] // RVA: 0xA5BE8 Offset: 0xA5BE8 VA: 0xA5BE8
[StaticAccessorAttribute] // RVA: 0xA5BE8 Offset: 0xA5BE8 VA: 0xA5BE8
[RequiredByNativeCodeAttribute] // RVA: 0xA5BE8 Offset: 0xA5BE8 VA: 0xA5BE8
public struct TextureMixerPlayable : IPlayable, IEquatable<TextureMixerPlayable> // TypeDefIndex: 1684
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0xC9474 Offset: 0xC9474 VA: 0xC9474 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0xC9488 Offset: 0xC9488 VA: 0xC9488 Slot: 4
	public bool Equals(TextureMixerPlayable other) { }
}

// Namespace: UnityEngine.Experimental.Playables
[NativeHeaderAttribute] // RVA: 0xA5CF0 Offset: 0xA5CF0 VA: 0xA5CF0
[StaticAccessorAttribute] // RVA: 0xA5CF0 Offset: 0xA5CF0 VA: 0xA5CF0
[RequiredByNativeCodeAttribute] // RVA: 0xA5CF0 Offset: 0xA5CF0 VA: 0xA5CF0
[NativeHeaderAttribute] // RVA: 0xA5CF0 Offset: 0xA5CF0 VA: 0xA5CF0
[NativeHeaderAttribute] // RVA: 0xA5CF0 Offset: 0xA5CF0 VA: 0xA5CF0
public struct TexturePlayableOutput : IPlayableOutput // TypeDefIndex: 1685
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0
}

// Namespace: UnityEngine.Internal
[AttributeUsageAttribute] // RVA: 0xA5E14 Offset: 0xA5E14 VA: 0xA5E14
[Serializable]
public class DefaultValueAttribute : Attribute // TypeDefIndex: 1686
{
	// Fields
	private object DefaultValue; // 0x8

	// Properties
	public object Value { get; }

	// Methods

	// RVA: 0x320774 Offset: 0x320774 VA: 0x320774
	public void .ctor(string value) { }

	// RVA: 0x320794 Offset: 0x320794 VA: 0x320794
	public object get_Value() { }

	// RVA: 0x32079C Offset: 0x32079C VA: 0x32079C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x320890 Offset: 0x320890 VA: 0x320890 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine.Internal
[Serializable]
public class ExcludeFromDocsAttribute : Attribute // TypeDefIndex: 1687
{
	// Methods

	// RVA: 0x3208BC Offset: 0x3208BC VA: 0x3208BC
	public void .ctor() { }
}

// Namespace: UnityEngine
public interface ILogHandler // TypeDefIndex: 1688
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void LogFormat(LogType logType, Object context, string format, object[] args);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void LogException(Exception exception, Object context);
}

// Namespace: UnityEngine
public interface ILogger : ILogHandler // TypeDefIndex: 1689
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Log(LogType logType, object message);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Log(LogType logType, object message, Object context);
}

// Namespace: UnityEngine
public class Logger : ILogger, ILogHandler // TypeDefIndex: 1690
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xA7C20 Offset: 0xA7C20 VA: 0xA7C20
	[CompilerGeneratedAttribute] // RVA: 0xA7C20 Offset: 0xA7C20 VA: 0xA7C20
	private ILogHandler <logHandler>k__BackingField; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xA7C54 Offset: 0xA7C54 VA: 0xA7C54
	[DebuggerBrowsableAttribute] // RVA: 0xA7C54 Offset: 0xA7C54 VA: 0xA7C54
	private bool <logEnabled>k__BackingField; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0xA7C88 Offset: 0xA7C88 VA: 0xA7C88
	[DebuggerBrowsableAttribute] // RVA: 0xA7C88 Offset: 0xA7C88 VA: 0xA7C88
	private LogType <filterLogType>k__BackingField; // 0x10

	// Properties
	public ILogHandler logHandler { get; set; }
	public bool logEnabled { get; set; }
	public LogType filterLogType { get; set; }

	// Methods

	// RVA: 0x3198F4 Offset: 0x3198F4 VA: 0x3198F4
	public void .ctor(ILogHandler logHandler) { }

	[CompilerGeneratedAttribute] // RVA: 0xAC0B8 Offset: 0xAC0B8 VA: 0xAC0B8
	// RVA: 0x3208E4 Offset: 0x3208E4 VA: 0x3208E4 Slot: 8
	public ILogHandler get_logHandler() { }

	[CompilerGeneratedAttribute] // RVA: 0xAC0C8 Offset: 0xAC0C8 VA: 0xAC0C8
	// RVA: 0x3208CC Offset: 0x3208CC VA: 0x3208CC Slot: 9
	public void set_logHandler(ILogHandler value) { }

	[CompilerGeneratedAttribute] // RVA: 0xAC0D8 Offset: 0xAC0D8 VA: 0xAC0D8
	// RVA: 0x3208EC Offset: 0x3208EC VA: 0x3208EC Slot: 10
	public bool get_logEnabled() { }

	[CompilerGeneratedAttribute] // RVA: 0xAC0E8 Offset: 0xAC0E8 VA: 0xAC0E8
	// RVA: 0x3208D4 Offset: 0x3208D4 VA: 0x3208D4 Slot: 11
	public void set_logEnabled(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xAC0F8 Offset: 0xAC0F8 VA: 0xAC0F8
	// RVA: 0x3208F4 Offset: 0x3208F4 VA: 0x3208F4 Slot: 12
	public LogType get_filterLogType() { }

	[CompilerGeneratedAttribute] // RVA: 0xAC108 Offset: 0xAC108 VA: 0xAC108
	// RVA: 0x3208DC Offset: 0x3208DC VA: 0x3208DC Slot: 13
	public void set_filterLogType(LogType value) { }

	// RVA: 0x3208FC Offset: 0x3208FC VA: 0x3208FC Slot: 14
	public bool IsLogTypeAllowed(LogType logType) { }

	// RVA: 0x320944 Offset: 0x320944 VA: 0x320944
	private static string GetString(object message) { }

	// RVA: 0x320AA0 Offset: 0x320AA0 VA: 0x320AA0 Slot: 4
	public void Log(LogType logType, object message) { }

	// RVA: 0x320C5C Offset: 0x320C5C VA: 0x320C5C Slot: 5
	public void Log(LogType logType, object message, Object context) { }

	// RVA: 0x320E20 Offset: 0x320E20 VA: 0x320E20 Slot: 6
	public void LogFormat(LogType logType, Object context, string format, object[] args) { }

	// RVA: 0x320F54 Offset: 0x320F54 VA: 0x320F54 Slot: 7
	public void LogException(Exception exception, Object context) { }
}

// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
public class MessageEventArgs // TypeDefIndex: 1691
{
	// Fields
	public int playerId; // 0x8
	public byte[] data; // 0xC

	// Methods

	// RVA: 0x2C3650 Offset: 0x2C3650 VA: 0x2C3650
	public void .ctor() { }
}

// Namespace: UnityEngine.Networking.PlayerConnection
public interface IEditorPlayerConnection // TypeDefIndex: 1692
{}

// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
public class PlayerConnection : ScriptableObject, IEditorPlayerConnection // TypeDefIndex: 1693
{
	// Fields
	internal static IPlayerEditorConnectionNative connectionNative; // 0x0
	[SerializeField] // RVA: 0xA7CBC Offset: 0xA7CBC VA: 0xA7CBC
	private PlayerEditorConnectionEvents m_PlayerEditorConnectionEvents; // 0xC
	[SerializeField] // RVA: 0xA7CCC Offset: 0xA7CCC VA: 0xA7CCC
	private List<int> m_connectedPlayers; // 0x10
	private bool m_IsInitilized; // 0x14
	private static PlayerConnection s_Instance; // 0x4

	// Properties
	public static PlayerConnection instance { get; }
	public bool isConnected { get; }

	// Methods

	// RVA: 0x2C3658 Offset: 0x2C3658 VA: 0x2C3658
	public void .ctor() { }

	// RVA: 0x2C384C Offset: 0x2C384C VA: 0x2C384C
	public static PlayerConnection get_instance() { }

	// RVA: 0x2C3A44 Offset: 0x2C3A44 VA: 0x2C3A44
	public bool get_isConnected() { }

	// RVA: 0x2C3994 Offset: 0x2C3994 VA: 0x2C3994
	private static PlayerConnection CreateInstance() { }

	// RVA: 0x2C3C54 Offset: 0x2C3C54 VA: 0x2C3C54
	public void OnEnable() { }

	// RVA: 0x2C3B1C Offset: 0x2C3B1C VA: 0x2C3B1C
	private IPlayerEditorConnectionNative GetConnectionNativeApi() { }

	// RVA: 0x2C3D4C Offset: 0x2C3D4C VA: 0x2C3D4C Slot: 4
	public void Register(Guid messageId, UnityAction<MessageEventArgs> callback) { }

	// RVA: 0x2C4288 Offset: 0x2C4288 VA: 0x2C4288 Slot: 5
	public void Unregister(Guid messageId, UnityAction<MessageEventArgs> callback) { }

	// RVA: 0x2C464C Offset: 0x2C464C VA: 0x2C464C Slot: 6
	public void RegisterConnection(UnityAction<int> callback) { }

	// RVA: 0x2C4808 Offset: 0x2C4808 VA: 0x2C4808 Slot: 7
	public void RegisterDisconnection(UnityAction<int> callback) { }

	// RVA: 0x2C489C Offset: 0x2C489C VA: 0x2C489C Slot: 8
	public void Send(Guid messageId, byte[] data) { }

	// RVA: 0x2C4A94 Offset: 0x2C4A94 VA: 0x2C4A94 Slot: 9
	public bool TrySend(Guid messageId, byte[] data) { }

	// RVA: 0x2C4C8C Offset: 0x2C4C8C VA: 0x2C4C8C
	public bool BlockUntilRecvMsg(Guid messageId, int timeout) { }

	// RVA: 0x2C4FB0 Offset: 0x2C4FB0 VA: 0x2C4FB0 Slot: 10
	public void DisconnectAll() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAC118 Offset: 0xAC118 VA: 0xAC118
	// RVA: 0x2C5088 Offset: 0x2C5088 VA: 0x2C5088
	private static void MessageCallbackInternal(IntPtr data, ulong size, ulong guid, string messageId) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAC128 Offset: 0xAC128 VA: 0xAC128
	// RVA: 0x2C56FC Offset: 0x2C56FC VA: 0x2C56FC
	private static void ConnectedCallbackInternal(int playerId) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAC138 Offset: 0xAC138 VA: 0xAC138
	// RVA: 0x2C57EC Offset: 0x2C57EC VA: 0x2C57EC
	private static void DisconnectedCallback(int playerId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xA5E28 Offset: 0xA5E28 VA: 0xA5E28
private sealed class PlayerConnection.<Register>c__AnonStorey0 // TypeDefIndex: 1694
{
	// Fields
	internal Guid messageId; // 0x8

	// Methods

	// RVA: 0x2C40A8 Offset: 0x2C40A8 VA: 0x2C40A8
	public void .ctor() { }

	// RVA: 0x2C58E8 Offset: 0x2C58E8 VA: 0x2C58E8
	internal bool <>m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xA5E38 Offset: 0xA5E38 VA: 0xA5E38
private sealed class PlayerConnection.<Unregister>c__AnonStorey1 // TypeDefIndex: 1695
{
	// Fields
	internal Guid messageId; // 0x8

	// Methods

	// RVA: 0x2C44BC Offset: 0x2C44BC VA: 0x2C44BC
	public void .ctor() { }

	// RVA: 0x2C5A28 Offset: 0x2C5A28 VA: 0x2C5A28
	internal bool <>m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xA5E48 Offset: 0xA5E48 VA: 0xA5E48
private sealed class PlayerConnection.<BlockUntilRecvMsg>c__AnonStorey2 // TypeDefIndex: 1696
{
	// Fields
	internal bool msgReceived; // 0x8

	// Methods

	// RVA: 0x2C4FA8 Offset: 0x2C4FA8 VA: 0x2C4FA8
	public void .ctor() { }

	// RVA: 0x2C58DC Offset: 0x2C58DC VA: 0x2C58DC
	internal void <>m__0(MessageEventArgs args) { }
}

// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
internal class PlayerEditorConnectionEvents // TypeDefIndex: 1697
{
	// Fields
	[SerializeField] // RVA: 0xA7CDC Offset: 0xA7CDC VA: 0xA7CDC
	public List<PlayerEditorConnectionEvents.MessageTypeSubscribers> messageTypeSubscribers; // 0x8
	[SerializeField] // RVA: 0xA7CEC Offset: 0xA7CEC VA: 0xA7CEC
	public PlayerEditorConnectionEvents.ConnectionChangeEvent connectionEvent; // 0xC
	[SerializeField] // RVA: 0xA7CFC Offset: 0xA7CFC VA: 0xA7CFC
	public PlayerEditorConnectionEvents.ConnectionChangeEvent disconnectionEvent; // 0x10

	// Methods

	// RVA: 0x2C3700 Offset: 0x2C3700 VA: 0x2C3700
	public void .ctor() { }

	// RVA: 0x2C51EC Offset: 0x2C51EC VA: 0x2C51EC
	public void InvokeMessageIdSubscribers(Guid messageId, byte[] data, int playerId) { }

	// RVA: 0x2C40B0 Offset: 0x2C40B0 VA: 0x2C40B0
	public UnityEvent<MessageEventArgs> AddAndCreate(Guid messageId) { }

	// RVA: 0x2C44C4 Offset: 0x2C44C4 VA: 0x2C44C4
	public void UnregisterManagedCallback(Guid messageId, UnityAction<MessageEventArgs> callback) { }
}

// Namespace: 
[Serializable]
public class PlayerEditorConnectionEvents.MessageEvent : UnityEvent<MessageEventArgs> // TypeDefIndex: 1698
{
	// Methods

	// RVA: 0x2C5C44 Offset: 0x2C5C44 VA: 0x2C5C44
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class PlayerEditorConnectionEvents.ConnectionChangeEvent : UnityEvent<int> // TypeDefIndex: 1699
{
	// Methods

	// RVA: 0x2C5B1C Offset: 0x2C5B1C VA: 0x2C5B1C
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class PlayerEditorConnectionEvents.MessageTypeSubscribers // TypeDefIndex: 1700
{
	// Fields
	[SerializeField] // RVA: 0xA7D0C Offset: 0xA7D0C VA: 0xA7D0C
	private string m_messageTypeId; // 0x8
	public int subscriberCount; // 0xC
	public PlayerEditorConnectionEvents.MessageEvent messageCallback; // 0x10

	// Properties
	public Guid MessageTypeId { get; set; }

	// Methods

	// RVA: 0x2C5B90 Offset: 0x2C5B90 VA: 0x2C5B90
	public void .ctor() { }

	// RVA: 0x2C59DC Offset: 0x2C59DC VA: 0x2C59DC
	public Guid get_MessageTypeId() { }

	// RVA: 0x2C5C10 Offset: 0x2C5C10 VA: 0x2C5C10
	public void set_MessageTypeId(Guid value) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xA5E58 Offset: 0xA5E58 VA: 0xA5E58
private sealed class PlayerEditorConnectionEvents.<InvokeMessageIdSubscribers>c__AnonStorey0 // TypeDefIndex: 1701
{
	// Fields
	internal Guid messageId; // 0x8

	// Methods

	// RVA: 0x2C5B80 Offset: 0x2C5B80 VA: 0x2C5B80
	public void .ctor() { }

	// RVA: 0x2C5DA4 Offset: 0x2C5DA4 VA: 0x2C5DA4
	internal bool <>m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xA5E68 Offset: 0xA5E68 VA: 0xA5E68
private sealed class PlayerEditorConnectionEvents.<AddAndCreate>c__AnonStorey1 // TypeDefIndex: 1702
{
	// Fields
	internal Guid messageId; // 0x8

	// Methods

	// RVA: 0x2C5B88 Offset: 0x2C5B88 VA: 0x2C5B88
	public void .ctor() { }

	// RVA: 0x2C5CB0 Offset: 0x2C5CB0 VA: 0x2C5CB0
	internal bool <>m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xA5E78 Offset: 0xA5E78 VA: 0xA5E78
private sealed class PlayerEditorConnectionEvents.<UnregisterManagedCallback>c__AnonStorey2 // TypeDefIndex: 1703
{
	// Fields
	internal Guid messageId; // 0x8

	// Methods

	// RVA: 0x2C5CA8 Offset: 0x2C5CA8 VA: 0x2C5CA8
	public void .ctor() { }

	// RVA: 0x2C5E98 Offset: 0x2C5E98 VA: 0x2C5E98
	internal bool <>m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: UnityEngine.Experimental.Rendering
public interface IRenderPipeline : IDisposable // TypeDefIndex: 1704
{
	// Properties
	public abstract bool disposed { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_disposed();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Render(ScriptableRenderContext renderContext, Camera[] cameras);
}

// Namespace: UnityEngine.Experimental.Rendering
public interface IRenderPipelineAsset // TypeDefIndex: 1705
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void DestroyCreatedInstances();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IRenderPipeline CreatePipeline();
}

// Namespace: UnityEngine.Experimental.Rendering
public static class RenderPipelineManager // TypeDefIndex: 1706
{
	// Fields
	private static IRenderPipelineAsset s_CurrentPipelineAsset; // 0x0
	[DebuggerBrowsableAttribute] // RVA: 0xA7D1C Offset: 0xA7D1C VA: 0xA7D1C
	[CompilerGeneratedAttribute] // RVA: 0xA7D1C Offset: 0xA7D1C VA: 0xA7D1C
	private static IRenderPipeline <currentPipeline>k__BackingField; // 0x4

	// Properties
	public static IRenderPipeline currentPipeline { get; set; }

	// Methods

	[CompilerGeneratedAttribute] // RVA: 0xAC148 Offset: 0xAC148 VA: 0xAC148
	// RVA: 0x31DA2C Offset: 0x31DA2C VA: 0x31DA2C
	public static IRenderPipeline get_currentPipeline() { }

	[CompilerGeneratedAttribute] // RVA: 0xAC158 Offset: 0xAC158 VA: 0xAC158
	// RVA: 0x31DA90 Offset: 0x31DA90 VA: 0x31DA90
	private static void set_currentPipeline(IRenderPipeline value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAC168 Offset: 0xAC168 VA: 0xAC168
	// RVA: 0x31DAF8 Offset: 0x31DAF8 VA: 0x31DAF8
	internal static void CleanupRenderPipeline() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAC178 Offset: 0xAC178 VA: 0xAC178
	// RVA: 0x31DDA0 Offset: 0x31DDA0 VA: 0x31DDA0
	private static void DoRenderLoop_Internal(IRenderPipelineAsset pipe, Camera[] cameras, IntPtr loopPtr) { }

	// RVA: 0x31DEDC Offset: 0x31DEDC VA: 0x31DEDC
	private static void PrepareRenderPipeline(IRenderPipelineAsset pipe) { }
}

// Namespace: UnityEngine.Experimental.Rendering
public class SupportedRenderingFeatures // TypeDefIndex: 1707
{
	// Fields
	private static SupportedRenderingFeatures s_Active; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xA7D50 Offset: 0xA7D50 VA: 0xA7D50
	[DebuggerBrowsableAttribute] // RVA: 0xA7D50 Offset: 0xA7D50 VA: 0xA7D50
	private SupportedRenderingFeatures.ReflectionProbeSupportFlags <reflectionProbeSupportFlags>k__BackingField; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0xA7D84 Offset: 0xA7D84 VA: 0xA7D84
	[CompilerGeneratedAttribute] // RVA: 0xA7D84 Offset: 0xA7D84 VA: 0xA7D84
	private SupportedRenderingFeatures.LightmapMixedBakeMode <defaultMixedLightingMode>k__BackingField; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0xA7DB8 Offset: 0xA7DB8 VA: 0xA7DB8
	[DebuggerBrowsableAttribute] // RVA: 0xA7DB8 Offset: 0xA7DB8 VA: 0xA7DB8
	private SupportedRenderingFeatures.LightmapMixedBakeMode <supportedMixedLightingModes>k__BackingField; // 0x10
	[DebuggerBrowsableAttribute] // RVA: 0xA7DEC Offset: 0xA7DEC VA: 0xA7DEC
	[CompilerGeneratedAttribute] // RVA: 0xA7DEC Offset: 0xA7DEC VA: 0xA7DEC
	private LightmapBakeType <supportedLightmapBakeTypes>k__BackingField; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xA7E20 Offset: 0xA7E20 VA: 0xA7E20
	[DebuggerBrowsableAttribute] // RVA: 0xA7E20 Offset: 0xA7E20 VA: 0xA7E20
	private LightmapsMode <supportedLightmapsModes>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xA7E54 Offset: 0xA7E54 VA: 0xA7E54
	[DebuggerBrowsableAttribute] // RVA: 0xA7E54 Offset: 0xA7E54 VA: 0xA7E54
	private bool <rendererSupportsLightProbeProxyVolumes>k__BackingField; // 0x1C
	[DebuggerBrowsableAttribute] // RVA: 0xA7E88 Offset: 0xA7E88 VA: 0xA7E88
	[CompilerGeneratedAttribute] // RVA: 0xA7E88 Offset: 0xA7E88 VA: 0xA7E88
	private bool <rendererSupportsMotionVectors>k__BackingField; // 0x1D
	[DebuggerBrowsableAttribute] // RVA: 0xA7EBC Offset: 0xA7EBC VA: 0xA7EBC
	[CompilerGeneratedAttribute] // RVA: 0xA7EBC Offset: 0xA7EBC VA: 0xA7EBC
	private bool <rendererSupportsReceiveShadows>k__BackingField; // 0x1E
	[DebuggerBrowsableAttribute] // RVA: 0xA7EF0 Offset: 0xA7EF0 VA: 0xA7EF0
	[CompilerGeneratedAttribute] // RVA: 0xA7EF0 Offset: 0xA7EF0 VA: 0xA7EF0
	private bool <rendererSupportsReflectionProbes>k__BackingField; // 0x1F
	[DebuggerBrowsableAttribute] // RVA: 0xA7F24 Offset: 0xA7F24 VA: 0xA7F24
	[CompilerGeneratedAttribute] // RVA: 0xA7F24 Offset: 0xA7F24 VA: 0xA7F24
	private bool <rendererSupportsRendererPriority>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xA7F58 Offset: 0xA7F58 VA: 0xA7F58
	[DebuggerBrowsableAttribute] // RVA: 0xA7F58 Offset: 0xA7F58 VA: 0xA7F58
	private bool <rendererOverridesEnvironmentLighting>k__BackingField; // 0x21
	[DebuggerBrowsableAttribute] // RVA: 0xA7F8C Offset: 0xA7F8C VA: 0xA7F8C
	[CompilerGeneratedAttribute] // RVA: 0xA7F8C Offset: 0xA7F8C VA: 0xA7F8C
	private bool <rendererOverridesFog>k__BackingField; // 0x22
	[DebuggerBrowsableAttribute] // RVA: 0xA7FC0 Offset: 0xA7FC0 VA: 0xA7FC0
	[CompilerGeneratedAttribute] // RVA: 0xA7FC0 Offset: 0xA7FC0 VA: 0xA7FC0
	private bool <rendererOverridesOtherLightingSettings>k__BackingField; // 0x23

	// Properties
	public static SupportedRenderingFeatures active { get; set; }
	public SupportedRenderingFeatures.LightmapMixedBakeMode defaultMixedLightingMode { get; }
	public SupportedRenderingFeatures.LightmapMixedBakeMode supportedMixedLightingModes { get; }
	public LightmapBakeType supportedLightmapBakeTypes { get; }
	public LightmapsMode supportedLightmapsModes { get; }

	// Methods

	// RVA: 0x31DCD0 Offset: 0x31DCD0 VA: 0x31DCD0
	public void .ctor() { }

	// RVA: 0x31E638 Offset: 0x31E638 VA: 0x31E638
	public static SupportedRenderingFeatures get_active() { }

	// RVA: 0x31DD10 Offset: 0x31DD10 VA: 0x31DD10
	public static void set_active(SupportedRenderingFeatures value) { }

	[CompilerGeneratedAttribute] // RVA: 0xAC188 Offset: 0xAC188 VA: 0xAC188
	// RVA: 0x31E7A4 Offset: 0x31E7A4 VA: 0x31E7A4
	public SupportedRenderingFeatures.LightmapMixedBakeMode get_defaultMixedLightingMode() { }

	[CompilerGeneratedAttribute] // RVA: 0xAC198 Offset: 0xAC198 VA: 0xAC198
	// RVA: 0x31E7AC Offset: 0x31E7AC VA: 0x31E7AC
	public SupportedRenderingFeatures.LightmapMixedBakeMode get_supportedMixedLightingModes() { }

	[CompilerGeneratedAttribute] // RVA: 0xAC1A8 Offset: 0xAC1A8 VA: 0xAC1A8
	// RVA: 0x31E7B4 Offset: 0x31E7B4 VA: 0x31E7B4
	public LightmapBakeType get_supportedLightmapBakeTypes() { }

	[CompilerGeneratedAttribute] // RVA: 0xAC1B8 Offset: 0xAC1B8 VA: 0xAC1B8
	// RVA: 0x31E7BC Offset: 0x31E7BC VA: 0x31E7BC
	public LightmapsMode get_supportedLightmapsModes() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAC1C8 Offset: 0xAC1C8 VA: 0xAC1C8
	// RVA: 0x31E7C4 Offset: 0x31E7C4 VA: 0x31E7C4
	internal static void FallbackMixedLightingModeByRef(IntPtr fallbackModePtr) { }

	// RVA: 0x31E9D8 Offset: 0x31E9D8 VA: 0x31E9D8
	internal static bool IsMixedLightingModeSupported(MixedLightingMode mixedMode) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAC1D8 Offset: 0xAC1D8 VA: 0xAC1D8
	// RVA: 0x31EA84 Offset: 0x31EA84 VA: 0x31EA84
	internal static void IsMixedLightingModeSupportedByRef(MixedLightingMode mixedMode, IntPtr isSupportedPtr) { }

	// RVA: 0x31EC40 Offset: 0x31EC40 VA: 0x31EC40
	internal static bool IsLightmapBakeTypeSupported(LightmapBakeType bakeType) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAC1E8 Offset: 0xAC1E8 VA: 0xAC1E8
	// RVA: 0x31ECEC Offset: 0x31ECEC VA: 0x31ECEC
	internal static void IsLightmapBakeTypeSupportedByRef(LightmapBakeType bakeType, IntPtr isSupportedPtr) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAC1F8 Offset: 0xAC1F8 VA: 0xAC1F8
	// RVA: 0x31EE40 Offset: 0x31EE40 VA: 0x31EE40
	internal static void IsLightmapsModeSupportedByRef(LightmapsMode mode, IntPtr isSupportedPtr) { }

	// RVA: 0x31EF00 Offset: 0x31EF00 VA: 0x31EF00
	private static void .cctor() { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0xA5E88 Offset: 0xA5E88 VA: 0xA5E88
public enum SupportedRenderingFeatures.ReflectionProbeSupportFlags // TypeDefIndex: 1708
{
	// Fields
	public int value__; // 0x0
	public const SupportedRenderingFeatures.ReflectionProbeSupportFlags None = 0;
	public const SupportedRenderingFeatures.ReflectionProbeSupportFlags Rotation = 1;
}

// Namespace: 
[FlagsAttribute] // RVA: 0xA5E98 Offset: 0xA5E98 VA: 0xA5E98
public enum SupportedRenderingFeatures.LightmapMixedBakeMode // TypeDefIndex: 1709
{
	// Fields
	public int value__; // 0x0
	public const SupportedRenderingFeatures.LightmapMixedBakeMode None = 0;
	public const SupportedRenderingFeatures.LightmapMixedBakeMode IndirectOnly = 1;
	public const SupportedRenderingFeatures.LightmapMixedBakeMode Subtractive = 2;
	public const SupportedRenderingFeatures.LightmapMixedBakeMode Shadowmask = 4;
}

// Namespace: UnityEngine.SceneManagement
[NativeHeaderAttribute] // RVA: 0xA5EA8 Offset: 0xA5EA8 VA: 0xA5EA8
[Serializable]
public struct Scene // TypeDefIndex: 1710
{
	// Fields
	[SerializeField] // RVA: 0xA7FF4 Offset: 0xA7FF4 VA: 0xA7FF4
	private int m_Handle; // 0x0

	// Properties
	public int handle { get; }
	public string name { get; }

	// Methods

	[StaticAccessorAttribute] // RVA: 0xAC208 Offset: 0xAC208 VA: 0xAC208
	// RVA: 0x2CF828 Offset: 0x2CF828 VA: 0x2CF828
	private static string GetNameInternal(int sceneHandle) { }

	// RVA: 0xC827C Offset: 0xC827C VA: 0xC827C
	public int get_handle() { }

	// RVA: 0xC8284 Offset: 0xC8284 VA: 0xC8284
	public string get_name() { }

	// RVA: 0xC828C Offset: 0xC828C VA: 0xC828C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xC8294 Offset: 0xC8294 VA: 0xC8294 Slot: 0
	public override bool Equals(object other) { }
}

// Namespace: UnityEngine.SceneManagement
[NativeHeaderAttribute] // RVA: 0xA5F04 Offset: 0xA5F04 VA: 0xA5F04
[RequiredByNativeCodeAttribute] // RVA: 0xA5F04 Offset: 0xA5F04 VA: 0xA5F04
public class SceneManager // TypeDefIndex: 1711
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xA8004 Offset: 0xA8004 VA: 0xA8004
	[CompilerGeneratedAttribute] // RVA: 0xA8004 Offset: 0xA8004 VA: 0xA8004
	private static UnityAction<Scene, LoadSceneMode> sceneLoaded; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xA8038 Offset: 0xA8038 VA: 0xA8038
	[DebuggerBrowsableAttribute] // RVA: 0xA8038 Offset: 0xA8038 VA: 0xA8038
	private static UnityAction<Scene> sceneUnloaded; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xA806C Offset: 0xA806C VA: 0xA806C
	[DebuggerBrowsableAttribute] // RVA: 0xA806C Offset: 0xA806C VA: 0xA806C
	private static UnityAction<Scene, Scene> activeSceneChanged; // 0x8

	// Properties
	public static int sceneCount { get; }

	// Methods

	[NativeMethodAttribute] // RVA: 0xAC248 Offset: 0xAC248 VA: 0xAC248
	[NativeHeaderAttribute] // RVA: 0xAC248 Offset: 0xAC248 VA: 0xAC248
	[StaticAccessorAttribute] // RVA: 0xAC248 Offset: 0xAC248 VA: 0xAC248
	// RVA: 0x2CF94C Offset: 0x2CF94C VA: 0x2CF94C
	public static int get_sceneCount() { }

	[StaticAccessorAttribute] // RVA: 0xAC2E8 Offset: 0xAC2E8 VA: 0xAC2E8
	// RVA: 0x2CF9EC Offset: 0x2CF9EC VA: 0x2CF9EC
	public static Scene GetActiveScene() { }

	[NativeThrowsAttribute] // RVA: 0xAC320 Offset: 0xAC320 VA: 0xAC320
	[StaticAccessorAttribute] // RVA: 0xAC320 Offset: 0xAC320 VA: 0xAC320
	// RVA: 0x2CFA8C Offset: 0x2CFA8C VA: 0x2CFA8C
	public static Scene GetSceneAt(int index) { }

	[StaticAccessorAttribute] // RVA: 0xAC36C Offset: 0xAC36C VA: 0xAC36C
	[NativeThrowsAttribute] // RVA: 0xAC36C Offset: 0xAC36C VA: 0xAC36C
	// RVA: 0x2CFB34 Offset: 0x2CFB34 VA: 0x2CFB34
	private static AsyncOperation LoadSceneAsyncNameIndexInternal(string sceneName, int sceneBuildIndex, LoadSceneParameters parameters, bool mustCompleteNextFrame) { }

	[ExcludeFromDocsAttribute] // RVA: 0xAC3B8 Offset: 0xAC3B8 VA: 0xAC3B8
	// RVA: 0x2CFBF4 Offset: 0x2CFBF4 VA: 0x2CFBF4
	public static void LoadScene(string sceneName) { }

	// RVA: 0x2CFC00 Offset: 0x2CFC00 VA: 0x2CFC00
	public static Scene LoadScene(string sceneName, LoadSceneParameters parameters) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAC3C8 Offset: 0xAC3C8 VA: 0xAC3C8
	// RVA: 0x2CFC44 Offset: 0x2CFC44 VA: 0x2CFC44
	private static void Internal_SceneLoaded(Scene scene, LoadSceneMode mode) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAC3D8 Offset: 0xAC3D8 VA: 0xAC3D8
	// RVA: 0x2CFCD0 Offset: 0x2CFCD0 VA: 0x2CFCD0
	private static void Internal_SceneUnloaded(Scene scene) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAC3E8 Offset: 0xAC3E8 VA: 0xAC3E8
	// RVA: 0x2CFD54 Offset: 0x2CFD54 VA: 0x2CFD54
	private static void Internal_ActiveSceneChanged(Scene previousActiveScene, Scene newActiveScene) { }

	// RVA: 0x2CFA14 Offset: 0x2CFA14 VA: 0x2CFA14
	private static void GetActiveScene_Injected(out Scene ret) { }

	// RVA: 0x2CFAB4 Offset: 0x2CFAB4 VA: 0x2CFAB4
	private static void GetSceneAt_Injected(int index, out Scene ret) { }

	// RVA: 0x2CFB64 Offset: 0x2CFB64 VA: 0x2CFB64
	private static AsyncOperation LoadSceneAsyncNameIndexInternal_Injected(string sceneName, int sceneBuildIndex, ref LoadSceneParameters parameters, bool mustCompleteNextFrame) { }
}

// Namespace: UnityEngine.SceneManagement
public enum LoadSceneMode // TypeDefIndex: 1712
{
	// Fields
	public int value__; // 0x0
	public const LoadSceneMode Single = 0;
	public const LoadSceneMode Additive = 1;
}

// Namespace: UnityEngine.SceneManagement
[FlagsAttribute] // RVA: 0xA5F78 Offset: 0xA5F78 VA: 0xA5F78
public enum LocalPhysicsMode // TypeDefIndex: 1713
{
	// Fields
	public int value__; // 0x0
	public const LocalPhysicsMode None = 0;
	public const LocalPhysicsMode Physics2D = 1;
	public const LocalPhysicsMode Physics3D = 2;
}

// Namespace: UnityEngine.SceneManagement
[Serializable]
public struct LoadSceneParameters // TypeDefIndex: 1714
{
	// Fields
	[SerializeField] // RVA: 0xA80A0 Offset: 0xA80A0 VA: 0xA80A0
	private LoadSceneMode m_LoadSceneMode; // 0x0
	[SerializeField] // RVA: 0xA80B0 Offset: 0xA80B0 VA: 0xA80B0
	private LocalPhysicsMode m_LocalPhysicsMode; // 0x4

	// Methods

	// RVA: 0xC826C Offset: 0xC826C VA: 0xC826C
	public void .ctor(LoadSceneMode mode) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xA5F88 Offset: 0xA5F88 VA: 0xA5F88
[AttributeUsageAttribute] // RVA: 0xA5F88 Offset: 0xA5F88 VA: 0xA5F88
internal sealed class ExtensionOfNativeClassAttribute : Attribute // TypeDefIndex: 1715
{
	// Methods

	// RVA: 0x31EFB0 Offset: 0x31EFB0 VA: 0x31EFB0
	public void .ctor() { }
}

// Namespace: UnityEngine.Scripting
[AttributeUsageAttribute] // RVA: 0xA5FD0 Offset: 0xA5FD0 VA: 0xA5FD0
public class PreserveAttribute : Attribute // TypeDefIndex: 1716
{
	// Methods

	// RVA: 0x2CF80C Offset: 0x2CF80C VA: 0x2CF80C
	public void .ctor() { }
}

// Namespace: UnityEngine.Scripting.APIUpdating
[AttributeUsageAttribute] // RVA: 0xA6004 Offset: 0xA6004 VA: 0xA6004
public class MovedFromAttribute : Attribute // TypeDefIndex: 1717
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA80C0 Offset: 0xA80C0 VA: 0xA80C0
	[DebuggerBrowsableAttribute] // RVA: 0xA80C0 Offset: 0xA80C0 VA: 0xA80C0
	private string <Namespace>k__BackingField; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xA80F4 Offset: 0xA80F4 VA: 0xA80F4
	[DebuggerBrowsableAttribute] // RVA: 0xA80F4 Offset: 0xA80F4 VA: 0xA80F4
	private bool <IsInDifferentAssembly>k__BackingField; // 0xC

	// Properties
	private string Namespace { set; }
	private bool IsInDifferentAssembly { set; }

	// Methods

	// RVA: 0x2D0064 Offset: 0x2D0064 VA: 0x2D0064
	public void .ctor(string sourceNamespace) { }

	// RVA: 0x2D008C Offset: 0x2D008C VA: 0x2D008C
	public void .ctor(string sourceNamespace, bool isInDifferentAssembly) { }

	[CompilerGeneratedAttribute] // RVA: 0xAC3F8 Offset: 0xAC3F8 VA: 0xAC3F8
	// RVA: 0x2D00B4 Offset: 0x2D00B4 VA: 0x2D00B4
	private void set_Namespace(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xAC408 Offset: 0xAC408 VA: 0xAC408
	// RVA: 0x2D00BC Offset: 0x2D00BC VA: 0x2D00BC
	private void set_IsInDifferentAssembly(bool value) { }
}

// Namespace: UnityEngine.Serialization
[RequiredByNativeCodeAttribute] // RVA: 0xA6018 Offset: 0xA6018 VA: 0xA6018
[AttributeUsageAttribute] // RVA: 0xA6018 Offset: 0xA6018 VA: 0xA6018
public class FormerlySerializedAsAttribute : Attribute // TypeDefIndex: 1718
{
	// Fields
	private string m_oldName; // 0x8

	// Methods

	// RVA: 0x2D2118 Offset: 0x2D2118 VA: 0x2D2118
	public void .ctor(string oldName) { }
}

// Namespace: UnityEngineInternal
public enum TypeInferenceRules // TypeDefIndex: 1719
{
	// Fields
	public int value__; // 0x0
	public const TypeInferenceRules TypeReferencedByFirstArgument = 0;
	public const TypeInferenceRules TypeReferencedBySecondArgument = 1;
	public const TypeInferenceRules ArrayOfTypeReferencedByFirstArgument = 2;
	public const TypeInferenceRules TypeOfFirstArgument = 3;
}

// Namespace: UnityEngineInternal
[AttributeUsageAttribute] // RVA: 0xA6070 Offset: 0xA6070 VA: 0xA6070
[Serializable]
public class TypeInferenceRuleAttribute : Attribute // TypeDefIndex: 1720
{
	// Fields
	private readonly string _rule; // 0x8

	// Methods

	// RVA: 0x2E0E84 Offset: 0x2E0E84 VA: 0x2E0E84
	public void .ctor(TypeInferenceRules rule) { }

	// RVA: 0x2E0F50 Offset: 0x2E0F50 VA: 0x2E0F50
	public void .ctor(string rule) { }

	// RVA: 0x2E0F70 Offset: 0x2E0F70 VA: 0x2E0F70 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngineInternal
public class GenericStack : Stack // TypeDefIndex: 1721
{
	// Methods

	// RVA: 0x2E0D6C Offset: 0x2E0D6C VA: 0x2E0D6C
	public void .ctor() { }
}

// Namespace: UnityEngineInternal
[ExtensionAttribute] // RVA: 0xA6084 Offset: 0xA6084 VA: 0xA6084
internal static class NetFxCoreExtensions // TypeDefIndex: 1722
{
	// Methods

	[ExtensionAttribute] // RVA: 0xAC418 Offset: 0xAC418 VA: 0xAC418
	// RVA: 0x2E0E38 Offset: 0x2E0E38 VA: 0x2E0E38
	public static Delegate CreateDelegate(MethodInfo self, Type delegateType, object target) { }

	[ExtensionAttribute] // RVA: 0xAC428 Offset: 0xAC428 VA: 0xAC428
	// RVA: 0x2E0E50 Offset: 0x2E0E50 VA: 0x2E0E50
	public static MethodInfo GetMethodInfo(Delegate self) { }
}

// Namespace: UnityEngine.Profiling.Memory.Experimental
public class MetaData // TypeDefIndex: 1723
{
	// Fields
	public string content; // 0x8
	public string platform; // 0xC
	public Texture2D screenshot; // 0x10

	// Methods

	// RVA: 0x2C983C Offset: 0x2C983C VA: 0x2C983C
	public void .ctor() { }
}

// Namespace: UnityEngine.Profiling.Memory.Experimental
[NativeHeaderAttribute] // RVA: 0xA6094 Offset: 0xA6094 VA: 0xA6094
public sealed class MemoryProfiler // TypeDefIndex: 1724
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA8128 Offset: 0xA8128 VA: 0xA8128
	[DebuggerBrowsableAttribute] // RVA: 0xA8128 Offset: 0xA8128 VA: 0xA8128
	private static Action<string, bool> snapshotFinished; // 0x0
	[DebuggerBrowsableAttribute] // RVA: 0xA815C Offset: 0xA815C VA: 0xA815C
	[CompilerGeneratedAttribute] // RVA: 0xA815C Offset: 0xA815C VA: 0xA815C
	private static Action<MetaData> createMetaData; // 0x4

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAC438 Offset: 0xAC438 VA: 0xAC438
	// RVA: 0x2C93A8 Offset: 0x2C93A8 VA: 0x2C93A8
	private static byte[] PrepareMetadata() { }

	// RVA: 0x2C98D8 Offset: 0x2C98D8 VA: 0x2C98D8
	internal static int WriteIntToByteArray(byte[] array, int offset, int value) { }

	// RVA: 0x2C99BC Offset: 0x2C99BC VA: 0x2C99BC
	internal static int WriteStringToByteArray(byte[] array, int offset, string value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAC448 Offset: 0xAC448 VA: 0xAC448
	// RVA: 0x2C9B44 Offset: 0x2C9B44 VA: 0x2C9B44
	private static void FinalizeSnapshot(string path, bool result) { }
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0xA60F0 Offset: 0xA60F0 VA: 0xA60F0
public enum DrivenTransformProperties // TypeDefIndex: 1725
{
	// Fields
	public int value__; // 0x0
	public const DrivenTransformProperties None = 0;
	public const DrivenTransformProperties All = -1;
	public const DrivenTransformProperties AnchoredPositionX = 2;
	public const DrivenTransformProperties AnchoredPositionY = 4;
	public const DrivenTransformProperties AnchoredPositionZ = 8;
	public const DrivenTransformProperties Rotation = 16;
	public const DrivenTransformProperties ScaleX = 32;
	public const DrivenTransformProperties ScaleY = 64;
	public const DrivenTransformProperties ScaleZ = 128;
	public const DrivenTransformProperties AnchorMinX = 256;
	public const DrivenTransformProperties AnchorMinY = 512;
	public const DrivenTransformProperties AnchorMaxX = 1024;
	public const DrivenTransformProperties AnchorMaxY = 2048;
	public const DrivenTransformProperties SizeDeltaX = 4096;
	public const DrivenTransformProperties SizeDeltaY = 8192;
	public const DrivenTransformProperties PivotX = 16384;
	public const DrivenTransformProperties PivotY = 32768;
	public const DrivenTransformProperties AnchoredPosition = 6;
	public const DrivenTransformProperties AnchoredPosition3D = 14;
	public const DrivenTransformProperties Scale = 224;
	public const DrivenTransformProperties AnchorMin = 768;
	public const DrivenTransformProperties AnchorMax = 3072;
	public const DrivenTransformProperties Anchors = 3840;
	public const DrivenTransformProperties SizeDelta = 12288;
	public const DrivenTransformProperties Pivot = 49152;
}

// Namespace: UnityEngine
public struct DrivenRectTransformTracker // TypeDefIndex: 1726
{
	// Methods

	// RVA: 0xC9364 Offset: 0xC9364 VA: 0xC9364
	public void Add(Object driver, RectTransform rectTransform, DrivenTransformProperties drivenProperties) { }

	// RVA: 0xC9368 Offset: 0xC9368 VA: 0xC9368
	public void Clear() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA6100 Offset: 0xA6100 VA: 0xA6100
[NativeClassAttribute] // RVA: 0xA6100 Offset: 0xA6100 VA: 0xA6100
public sealed class RectTransform : Transform // TypeDefIndex: 1727
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xA8190 Offset: 0xA8190 VA: 0xA8190
	[CompilerGeneratedAttribute] // RVA: 0xA8190 Offset: 0xA8190 VA: 0xA8190
	private static RectTransform.ReapplyDrivenProperties reapplyDrivenProperties; // 0x0

	// Properties
	public Rect rect { get; }
	public Vector2 anchorMin { get; set; }
	public Vector2 anchorMax { get; set; }
	public Vector2 anchoredPosition { get; set; }
	public Vector2 sizeDelta { get; set; }
	public Vector2 pivot { get; set; }
	public Vector2 offsetMin { set; }
	public Vector2 offsetMax { set; }

	// Methods

	// RVA: 0x2CC130 Offset: 0x2CC130 VA: 0x2CC130
	public static void add_reapplyDrivenProperties(RectTransform.ReapplyDrivenProperties value) { }

	// RVA: 0x2CC260 Offset: 0x2CC260 VA: 0x2CC260
	public static void remove_reapplyDrivenProperties(RectTransform.ReapplyDrivenProperties value) { }

	// RVA: 0x2CC390 Offset: 0x2CC390 VA: 0x2CC390
	public Rect get_rect() { }

	// RVA: 0x2CC478 Offset: 0x2CC478 VA: 0x2CC478
	public Vector2 get_anchorMin() { }

	// RVA: 0x2CC534 Offset: 0x2CC534 VA: 0x2CC534
	public void set_anchorMin(Vector2 value) { }

	// RVA: 0x2CC5D0 Offset: 0x2CC5D0 VA: 0x2CC5D0
	public Vector2 get_anchorMax() { }

	// RVA: 0x2CC68C Offset: 0x2CC68C VA: 0x2CC68C
	public void set_anchorMax(Vector2 value) { }

	// RVA: 0x2CC728 Offset: 0x2CC728 VA: 0x2CC728
	public Vector2 get_anchoredPosition() { }

	// RVA: 0x2CC7E4 Offset: 0x2CC7E4 VA: 0x2CC7E4
	public void set_anchoredPosition(Vector2 value) { }

	// RVA: 0x2CC880 Offset: 0x2CC880 VA: 0x2CC880
	public Vector2 get_sizeDelta() { }

	// RVA: 0x2CC93C Offset: 0x2CC93C VA: 0x2CC93C
	public void set_sizeDelta(Vector2 value) { }

	// RVA: 0x2CC9D8 Offset: 0x2CC9D8 VA: 0x2CC9D8
	public Vector2 get_pivot() { }

	// RVA: 0x2CCA94 Offset: 0x2CCA94 VA: 0x2CCA94
	public void set_pivot(Vector2 value) { }

	// RVA: 0x2CCB30 Offset: 0x2CCB30 VA: 0x2CCB30
	public void set_offsetMin(Vector2 value) { }

	// RVA: 0x2CCE1C Offset: 0x2CCE1C VA: 0x2CCE1C
	public void set_offsetMax(Vector2 value) { }

	// RVA: 0x2CCFEC Offset: 0x2CCFEC VA: 0x2CCFEC
	public void GetLocalCorners(Vector3[] fourCornersArray) { }

	// RVA: 0x2CD184 Offset: 0x2CD184 VA: 0x2CD184
	public void GetWorldCorners(Vector3[] fourCornersArray) { }

	// RVA: 0x2CD3BC Offset: 0x2CD3BC VA: 0x2CD3BC
	public void SetInsetAndSizeFromParentEdge(RectTransform.Edge edge, float inset, float size) { }

	// RVA: 0x2CD790 Offset: 0x2CD790 VA: 0x2CD790
	public void SetSizeWithCurrentAnchors(RectTransform.Axis axis, float size) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAC458 Offset: 0xAC458 VA: 0xAC458
	// RVA: 0x2CD9E4 Offset: 0x2CD9E4 VA: 0x2CD9E4
	internal static void SendReapplyDrivenProperties(RectTransform driven) { }

	// RVA: 0x2CD8AC Offset: 0x2CD8AC VA: 0x2CD8AC
	private Vector2 GetParentSize() { }

	// RVA: 0x2CC3C8 Offset: 0x2CC3C8 VA: 0x2CC3C8
	private void get_rect_Injected(out Rect ret) { }

	// RVA: 0x2CC4B4 Offset: 0x2CC4B4 VA: 0x2CC4B4
	private void get_anchorMin_Injected(out Vector2 ret) { }

	// RVA: 0x2CC550 Offset: 0x2CC550 VA: 0x2CC550
	private void set_anchorMin_Injected(ref Vector2 value) { }

	// RVA: 0x2CC60C Offset: 0x2CC60C VA: 0x2CC60C
	private void get_anchorMax_Injected(out Vector2 ret) { }

	// RVA: 0x2CC6A8 Offset: 0x2CC6A8 VA: 0x2CC6A8
	private void set_anchorMax_Injected(ref Vector2 value) { }

	// RVA: 0x2CC764 Offset: 0x2CC764 VA: 0x2CC764
	private void get_anchoredPosition_Injected(out Vector2 ret) { }

	// RVA: 0x2CC800 Offset: 0x2CC800 VA: 0x2CC800
	private void set_anchoredPosition_Injected(ref Vector2 value) { }

	// RVA: 0x2CC8BC Offset: 0x2CC8BC VA: 0x2CC8BC
	private void get_sizeDelta_Injected(out Vector2 ret) { }

	// RVA: 0x2CC958 Offset: 0x2CC958 VA: 0x2CC958
	private void set_sizeDelta_Injected(ref Vector2 value) { }

	// RVA: 0x2CCA14 Offset: 0x2CCA14 VA: 0x2CCA14
	private void get_pivot_Injected(out Vector2 ret) { }

	// RVA: 0x2CCAB0 Offset: 0x2CCAB0 VA: 0x2CCAB0
	private void set_pivot_Injected(ref Vector2 value) { }
}

// Namespace: 
public enum RectTransform.Edge // TypeDefIndex: 1728
{
	// Fields
	public int value__; // 0x0
	public const RectTransform.Edge Left = 0;
	public const RectTransform.Edge Right = 1;
	public const RectTransform.Edge Top = 2;
	public const RectTransform.Edge Bottom = 3;
}

// Namespace: 
public enum RectTransform.Axis // TypeDefIndex: 1729
{
	// Fields
	public int value__; // 0x0
	public const RectTransform.Axis Horizontal = 0;
	public const RectTransform.Axis Vertical = 1;
}

// Namespace: 
public sealed class RectTransform.ReapplyDrivenProperties : MulticastDelegate // TypeDefIndex: 1730
{
	// Methods

	// RVA: 0x2CDEB8 Offset: 0x2CDEB8 VA: 0x2CDEB8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x2CDA5C Offset: 0x2CDA5C VA: 0x2CDA5C Slot: 11
	public virtual void Invoke(RectTransform driven) { }

	// RVA: 0x2CDECC Offset: 0x2CDECC VA: 0x2CDECC Slot: 12
	public virtual IAsyncResult BeginInvoke(RectTransform driven, AsyncCallback callback, object object) { }

	// RVA: 0x2CDEF8 Offset: 0x2CDEF8 VA: 0x2CDEF8 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA616C Offset: 0xA616C VA: 0xA616C
[RequiredByNativeCodeAttribute] // RVA: 0xA616C Offset: 0xA616C VA: 0xA616C
[NativeHeaderAttribute] // RVA: 0xA616C Offset: 0xA616C VA: 0xA616C
[NativeHeaderAttribute] // RVA: 0xA616C Offset: 0xA616C VA: 0xA616C
public class Transform : Component, IEnumerable // TypeDefIndex: 1731
{
	// Properties
	public Vector3 position { get; set; }
	public Vector3 localPosition { get; set; }
	public Vector3 forward { get; }
	public Quaternion rotation { get; set; }
	public Quaternion localRotation { get; set; }
	public Vector3 localScale { get; set; }
	public Transform parent { get; set; }
	internal Transform parentInternal { get; set; }
	public Matrix4x4 worldToLocalMatrix { get; }
	public Matrix4x4 localToWorldMatrix { get; }
	public int childCount { get; }

	// Methods

	// RVA: 0x2D6DB8 Offset: 0x2D6DB8 VA: 0x2D6DB8
	protected void .ctor() { }

	// RVA: 0x2D6DC0 Offset: 0x2D6DC0 VA: 0x2D6DC0
	public Vector3 get_position() { }

	// RVA: 0x2D6E88 Offset: 0x2D6E88 VA: 0x2D6E88
	public void set_position(Vector3 value) { }

	// RVA: 0x2D6F28 Offset: 0x2D6F28 VA: 0x2D6F28
	public Vector3 get_localPosition() { }

	// RVA: 0x2D6FF0 Offset: 0x2D6FF0 VA: 0x2D6FF0
	public void set_localPosition(Vector3 value) { }

	// RVA: 0x2D7090 Offset: 0x2D7090 VA: 0x2D7090
	public Vector3 get_forward() { }

	// RVA: 0x2D71AC Offset: 0x2D71AC VA: 0x2D71AC
	public Quaternion get_rotation() { }

	// RVA: 0x2D7300 Offset: 0x2D7300 VA: 0x2D7300
	public void set_rotation(Quaternion value) { }

	// RVA: 0x2D73A4 Offset: 0x2D73A4 VA: 0x2D73A4
	public Quaternion get_localRotation() { }

	// RVA: 0x2D745C Offset: 0x2D745C VA: 0x2D745C
	public void set_localRotation(Quaternion value) { }

	// RVA: 0x2D7500 Offset: 0x2D7500 VA: 0x2D7500
	public Vector3 get_localScale() { }

	// RVA: 0x2D75C8 Offset: 0x2D75C8 VA: 0x2D75C8
	public void set_localScale(Vector3 value) { }

	// RVA: 0x2CDE18 Offset: 0x2CDE18 VA: 0x2CDE18
	public Transform get_parent() { }

	// RVA: 0x2D766C Offset: 0x2D766C VA: 0x2D766C
	public void set_parent(Transform value) { }

	// RVA: 0x2D7668 Offset: 0x2D7668 VA: 0x2D7668
	internal Transform get_parentInternal() { }

	// RVA: 0x2D7738 Offset: 0x2D7738 VA: 0x2D7738
	internal void set_parentInternal(Transform value) { }

	// RVA: 0x2D7740 Offset: 0x2D7740 VA: 0x2D7740
	private Transform GetParent() { }

	// RVA: 0x2D77CC Offset: 0x2D77CC VA: 0x2D77CC
	public void SetParent(Transform p) { }

	[FreeFunctionAttribute] // RVA: 0xAC468 Offset: 0xAC468 VA: 0xAC468
	// RVA: 0x2D77D4 Offset: 0x2D77D4 VA: 0x2D77D4
	public void SetParent(Transform parent, bool worldPositionStays) { }

	// RVA: 0x2D785C Offset: 0x2D785C VA: 0x2D785C
	public Matrix4x4 get_worldToLocalMatrix() { }

	// RVA: 0x2CD35C Offset: 0x2CD35C VA: 0x2CD35C
	public Matrix4x4 get_localToWorldMatrix() { }

	// RVA: 0x2D79BC Offset: 0x2D79BC VA: 0x2D79BC
	public Vector3 TransformPoint(Vector3 position) { }

	// RVA: 0x2D7AA0 Offset: 0x2D7AA0 VA: 0x2D7AA0
	public Vector3 InverseTransformPoint(Vector3 position) { }

	[NativeMethodAttribute] // RVA: 0xAC4B0 Offset: 0xAC4B0 VA: 0xAC4B0
	// RVA: 0x2D7B84 Offset: 0x2D7B84 VA: 0x2D7B84
	public int get_childCount() { }

	// RVA: 0x2D7C14 Offset: 0x2D7C14 VA: 0x2D7C14
	public void SetAsFirstSibling() { }

	[FreeFunctionAttribute] // RVA: 0xAC4F0 Offset: 0xAC4F0 VA: 0xAC4F0
	// RVA: 0x2D7CA8 Offset: 0x2D7CA8 VA: 0x2D7CA8
	public bool IsChildOf(Transform parent) { }

	// RVA: 0x2D7D50 Offset: 0x2D7D50 VA: 0x2D7D50 Slot: 4
	public IEnumerator GetEnumerator() { }

	[NativeThrowsAttribute] // RVA: 0xAC54C Offset: 0xAC54C VA: 0xAC54C
	[FreeFunctionAttribute] // RVA: 0xAC54C Offset: 0xAC54C VA: 0xAC54C
	// RVA: 0x2D7DFC Offset: 0x2D7DFC VA: 0x2D7DFC
	public Transform GetChild(int index) { }

	// RVA: 0x2D6E08 Offset: 0x2D6E08 VA: 0x2D6E08
	private void get_position_Injected(out Vector3 ret) { }

	// RVA: 0x2D6EA8 Offset: 0x2D6EA8 VA: 0x2D6EA8
	private void set_position_Injected(ref Vector3 value) { }

	// RVA: 0x2D6F70 Offset: 0x2D6F70 VA: 0x2D6F70
	private void get_localPosition_Injected(out Vector3 ret) { }

	// RVA: 0x2D7010 Offset: 0x2D7010 VA: 0x2D7010
	private void set_localPosition_Injected(ref Vector3 value) { }

	// RVA: 0x2D7280 Offset: 0x2D7280 VA: 0x2D7280
	private void get_rotation_Injected(out Quaternion ret) { }

	// RVA: 0x2D7324 Offset: 0x2D7324 VA: 0x2D7324
	private void set_rotation_Injected(ref Quaternion value) { }

	// RVA: 0x2D73DC Offset: 0x2D73DC VA: 0x2D73DC
	private void get_localRotation_Injected(out Quaternion ret) { }

	// RVA: 0x2D7480 Offset: 0x2D7480 VA: 0x2D7480
	private void set_localRotation_Injected(ref Quaternion value) { }

	// RVA: 0x2D7548 Offset: 0x2D7548 VA: 0x2D7548
	private void get_localScale_Injected(out Vector3 ret) { }

	// RVA: 0x2D75E8 Offset: 0x2D75E8 VA: 0x2D75E8
	private void set_localScale_Injected(ref Vector3 value) { }

	// RVA: 0x2D78BC Offset: 0x2D78BC VA: 0x2D78BC
	private void get_worldToLocalMatrix_Injected(out Matrix4x4 ret) { }

	// RVA: 0x2D793C Offset: 0x2D793C VA: 0x2D793C
	private void get_localToWorldMatrix_Injected(out Matrix4x4 ret) { }

	// RVA: 0x2D7A18 Offset: 0x2D7A18 VA: 0x2D7A18
	private void TransformPoint_Injected(ref Vector3 position, out Vector3 ret) { }

	// RVA: 0x2D7AFC Offset: 0x2D7AFC VA: 0x2D7AFC
	private void InverseTransformPoint_Injected(ref Vector3 position, out Vector3 ret) { }
}

// Namespace: 
private class Transform.Enumerator : IEnumerator // TypeDefIndex: 1732
{
	// Fields
	private Transform outer; // 0x8
	private int currentIndex; // 0xC

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x2D7DD0 Offset: 0x2D7DD0 VA: 0x2D7DD0
	internal void .ctor(Transform outer) { }

	// RVA: 0x2D7E9C Offset: 0x2D7E9C VA: 0x2D7E9C Slot: 4
	public object get_Current() { }

	// RVA: 0x2D7ECC Offset: 0x2D7ECC VA: 0x2D7ECC Slot: 5
	public bool MoveNext() { }

	// RVA: 0x2D7F14 Offset: 0x2D7F14 VA: 0x2D7F14 Slot: 6
	public void Reset() { }
}

// Namespace: UnityEngine.Experimental.U2D
[NativeTypeAttribute] // RVA: 0xA6268 Offset: 0xA6268 VA: 0xA6268
[RequiredByNativeCodeAttribute] // RVA: 0xA6268 Offset: 0xA6268 VA: 0xA6268
[NativeHeaderAttribute] // RVA: 0xA6268 Offset: 0xA6268 VA: 0xA6268
[Serializable]
public struct SpriteBone // TypeDefIndex: 1733
{
	// Fields
	[NativeNameAttribute] // RVA: 0xA81C4 Offset: 0xA81C4 VA: 0xA81C4
	[SerializeField] // RVA: 0xA81C4 Offset: 0xA81C4 VA: 0xA81C4
	private string m_Name; // 0x0
	[SerializeField] // RVA: 0xA820C Offset: 0xA820C VA: 0xA820C
	[NativeNameAttribute] // RVA: 0xA820C Offset: 0xA820C VA: 0xA820C
	private Vector3 m_Position; // 0x4
	[SerializeField] // RVA: 0xA8258 Offset: 0xA8258 VA: 0xA8258
	[NativeNameAttribute] // RVA: 0xA8258 Offset: 0xA8258 VA: 0xA8258
	private Quaternion m_Rotation; // 0x10
	[SerializeField] // RVA: 0xA82A4 Offset: 0xA82A4 VA: 0xA82A4
	[NativeNameAttribute] // RVA: 0xA82A4 Offset: 0xA82A4 VA: 0xA82A4
	private float m_Length; // 0x20
	[SerializeField] // RVA: 0xA82EC Offset: 0xA82EC VA: 0xA82EC
	[NativeNameAttribute] // RVA: 0xA82EC Offset: 0xA82EC VA: 0xA82EC
	private int m_ParentId; // 0x24
}

// Namespace: UnityEngine.Sprites
public sealed class DataUtility // TypeDefIndex: 1734
{
	// Methods

	// RVA: 0x2D3308 Offset: 0x2D3308 VA: 0x2D3308
	public static Vector4 GetInnerUV(Sprite sprite) { }

	// RVA: 0x2D336C Offset: 0x2D336C VA: 0x2D336C
	public static Vector4 GetOuterUV(Sprite sprite) { }

	// RVA: 0x2D33D0 Offset: 0x2D33D0 VA: 0x2D33D0
	public static Vector4 GetPadding(Sprite sprite) { }

	// RVA: 0x2D3434 Offset: 0x2D3434 VA: 0x2D3434
	public static Vector2 GetMinSize(Sprite sprite) { }
}

// Namespace: UnityEngine
[NativeTypeAttribute] // RVA: 0xA62E8 Offset: 0xA62E8 VA: 0xA62E8
[RequireComponent] // RVA: 0xA62E8 Offset: 0xA62E8 VA: 0xA62E8
public sealed class SpriteRenderer : Renderer // TypeDefIndex: 1735
{
	// Properties
	public Sprite sprite { set; }

	// Methods

	// RVA: 0x2D325C Offset: 0x2D325C VA: 0x2D325C
	public void set_sprite(Sprite value) { }
}

// Namespace: UnityEngine
public enum SpritePackingMode // TypeDefIndex: 1736
{
	// Fields
	public int value__; // 0x0
	public const SpritePackingMode Tight = 0;
	public const SpritePackingMode Rectangle = 1;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xA63A8 Offset: 0xA63A8 VA: 0xA63A8
[NativeHeaderAttribute] // RVA: 0xA63A8 Offset: 0xA63A8 VA: 0xA63A8
[ExcludeFromPresetAttribute] // RVA: 0xA63A8 Offset: 0xA63A8 VA: 0xA63A8
[NativeTypeAttribute] // RVA: 0xA63A8 Offset: 0xA63A8 VA: 0xA63A8
[NativeHeaderAttribute] // RVA: 0xA63A8 Offset: 0xA63A8 VA: 0xA63A8
public sealed class Sprite : Object // TypeDefIndex: 1737
{
	// Properties
	public Bounds bounds { get; }
	public Rect rect { get; }
	public Vector4 border { get; }
	public Texture2D texture { get; }
	public float pixelsPerUnit { get; }
	public Texture2D associatedAlphaSplitTexture { get; }
	public Vector2 pivot { get; }
	public bool packed { get; }
	public SpritePackingMode packingMode { get; }
	public Rect textureRect { get; }
	public Vector2[] vertices { get; }
	public ushort[] triangles { get; }
	public Vector2[] uv { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAC5A8 Offset: 0xAC5A8 VA: 0xAC5A8
	// RVA: 0x2D2574 Offset: 0x2D2574 VA: 0x2D2574
	private void .ctor() { }

	// RVA: 0x2D25F8 Offset: 0x2D25F8 VA: 0x2D25F8
	internal int GetPackingMode() { }

	// RVA: 0x2D2688 Offset: 0x2D2688 VA: 0x2D2688
	internal int GetPacked() { }

	// RVA: 0x2D2710 Offset: 0x2D2710 VA: 0x2D2710
	internal Rect GetTextureRect() { }

	// RVA: 0x2D27F8 Offset: 0x2D27F8 VA: 0x2D27F8
	internal Vector4 GetInnerUVs() { }

	// RVA: 0x2D28E0 Offset: 0x2D28E0 VA: 0x2D28E0
	internal Vector4 GetOuterUVs() { }

	// RVA: 0x2D29C8 Offset: 0x2D29C8 VA: 0x2D29C8
	internal Vector4 GetPadding() { }

	// RVA: 0x2D2AB0 Offset: 0x2D2AB0 VA: 0x2D2AB0
	public Bounds get_bounds() { }

	// RVA: 0x2D2BB0 Offset: 0x2D2BB0 VA: 0x2D2BB0
	public Rect get_rect() { }

	// RVA: 0x2D2C94 Offset: 0x2D2C94 VA: 0x2D2C94
	public Vector4 get_border() { }

	// RVA: 0x2D2D7C Offset: 0x2D2D7C VA: 0x2D2D7C
	public Texture2D get_texture() { }

	[NativeMethodAttribute] // RVA: 0xAC5B8 Offset: 0xAC5B8 VA: 0xAC5B8
	// RVA: 0x2D2E08 Offset: 0x2D2E08 VA: 0x2D2E08
	public float get_pixelsPerUnit() { }

	[NativeMethodAttribute] // RVA: 0xAC5F8 Offset: 0xAC5F8 VA: 0xAC5F8
	// RVA: 0x2D2E98 Offset: 0x2D2E98 VA: 0x2D2E98
	public Texture2D get_associatedAlphaSplitTexture() { }

	[NativeMethodAttribute] // RVA: 0xAC634 Offset: 0xAC634 VA: 0xAC634
	// RVA: 0x2D2F38 Offset: 0x2D2F38 VA: 0x2D2F38
	public Vector2 get_pivot() { }

	// RVA: 0x2D3024 Offset: 0x2D3024 VA: 0x2D3024
	public bool get_packed() { }

	// RVA: 0x2D303C Offset: 0x2D303C VA: 0x2D303C
	public SpritePackingMode get_packingMode() { }

	// RVA: 0x2D3040 Offset: 0x2D3040 VA: 0x2D3040
	public Rect get_textureRect() { }

	[FreeFunctionAttribute] // RVA: 0xAC674 Offset: 0xAC674 VA: 0xAC674
	// RVA: 0x2D30BC Offset: 0x2D30BC VA: 0x2D30BC
	public Vector2[] get_vertices() { }

	[FreeFunctionAttribute] // RVA: 0xAC6D8 Offset: 0xAC6D8 VA: 0xAC6D8
	// RVA: 0x2D3148 Offset: 0x2D3148 VA: 0x2D3148
	public ushort[] get_triangles() { }

	[FreeFunctionAttribute] // RVA: 0xAC73C Offset: 0xAC73C VA: 0xAC73C
	// RVA: 0x2D31D4 Offset: 0x2D31D4 VA: 0x2D31D4
	public Vector2[] get_uv() { }

	// RVA: 0x2D2748 Offset: 0x2D2748 VA: 0x2D2748
	private void GetTextureRect_Injected(out Rect ret) { }

	// RVA: 0x2D2830 Offset: 0x2D2830 VA: 0x2D2830
	private void GetInnerUVs_Injected(out Vector4 ret) { }

	// RVA: 0x2D2918 Offset: 0x2D2918 VA: 0x2D2918
	private void GetOuterUVs_Injected(out Vector4 ret) { }

	// RVA: 0x2D2A00 Offset: 0x2D2A00 VA: 0x2D2A00
	private void GetPadding_Injected(out Vector4 ret) { }

	// RVA: 0x2D2B00 Offset: 0x2D2B00 VA: 0x2D2B00
	private void get_bounds_Injected(out Bounds ret) { }

	// RVA: 0x2D2BE8 Offset: 0x2D2BE8 VA: 0x2D2BE8
	private void get_rect_Injected(out Rect ret) { }

	// RVA: 0x2D2CCC Offset: 0x2D2CCC VA: 0x2D2CCC
	private void get_border_Injected(out Vector4 ret) { }

	// RVA: 0x2D2F74 Offset: 0x2D2F74 VA: 0x2D2F74
	private void get_pivot_Injected(out Vector2 ret) { }
}

// Namespace: UnityEngine.U2D
[StaticAccessorAttribute] // RVA: 0xA64B4 Offset: 0xA64B4 VA: 0xA64B4
[NativeHeaderAttribute] // RVA: 0xA64B4 Offset: 0xA64B4 VA: 0xA64B4
[NativeHeaderAttribute] // RVA: 0xA64B4 Offset: 0xA64B4 VA: 0xA64B4
public class SpriteAtlasManager // TypeDefIndex: 1738
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA8338 Offset: 0xA8338 VA: 0xA8338
	[DebuggerBrowsableAttribute] // RVA: 0xA8338 Offset: 0xA8338 VA: 0xA8338
	private static Action<string, Action<SpriteAtlas>> atlasRequested; // 0x0
	[DebuggerBrowsableAttribute] // RVA: 0xA836C Offset: 0xA836C VA: 0xA836C
	[CompilerGeneratedAttribute] // RVA: 0xA836C Offset: 0xA836C VA: 0xA836C
	private static Action<SpriteAtlas> atlasRegistered; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xA83A0 Offset: 0xA83A0 VA: 0xA83A0
	private static Action<SpriteAtlas> <>f__mg$cache0; // 0x8

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAC79C Offset: 0xAC79C VA: 0xAC79C
	// RVA: 0x2D7FCC Offset: 0x2D7FCC VA: 0x2D7FCC
	private static bool RequestAtlas(string tag) { }

	// RVA: 0x2D819C Offset: 0x2D819C VA: 0x2D819C
	public static void add_atlasRegistered(Action<SpriteAtlas> value) { }

	// RVA: 0x2D831C Offset: 0x2D831C VA: 0x2D831C
	public static void remove_atlasRegistered(Action<SpriteAtlas> value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAC7AC Offset: 0xAC7AC VA: 0xAC7AC
	// RVA: 0x2D849C Offset: 0x2D849C VA: 0x2D849C
	private static void PostRegisteredAtlas(SpriteAtlas spriteAtlas) { }

	// RVA: 0x2D8598 Offset: 0x2D8598 VA: 0x2D8598
	internal static void Register(SpriteAtlas spriteAtlas) { }

	// RVA: 0x2D8610 Offset: 0x2D8610 VA: 0x2D8610
	private static void .cctor() { }
}

// Namespace: UnityEngine.U2D
[NativeTypeAttribute] // RVA: 0xA6574 Offset: 0xA6574 VA: 0xA6574
[NativeHeaderAttribute] // RVA: 0xA6574 Offset: 0xA6574 VA: 0xA6574
public class SpriteAtlas : Object // TypeDefIndex: 1739
{
	// Methods

	// RVA: 0x2D7F20 Offset: 0x2D7F20 VA: 0x2D7F20
	public bool CanBindTo(Sprite sprite) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1740
{}

// Namespace: UnityEngine
public enum FontStyle // TypeDefIndex: 1741
{
	// Fields
	public int value__; // 0x0
	public const FontStyle Normal = 0;
	public const FontStyle Bold = 1;
	public const FontStyle Italic = 2;
	public const FontStyle BoldAndItalic = 3;
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0xAE73C Offset: 0xAE73C VA: 0xAE73C
internal enum TextGenerationError // TypeDefIndex: 1742
{
	// Fields
	public int value__; // 0x0
	public const TextGenerationError None = 0;
	public const TextGenerationError CustomSizeOnNonDynamicFont = 1;
	public const TextGenerationError CustomStyleOnNonDynamicFont = 2;
	public const TextGenerationError NoFont = 4;
}

// Namespace: UnityEngine
public struct TextGenerationSettings // TypeDefIndex: 1743
{
	// Fields
	public Font font; // 0x0
	public Color color; // 0x4
	public int fontSize; // 0x14
	public float lineSpacing; // 0x18
	public bool richText; // 0x1C
	public float scaleFactor; // 0x20
	public FontStyle fontStyle; // 0x24
	public TextAnchor textAnchor; // 0x28
	public bool alignByGeometry; // 0x2C
	public bool resizeTextForBestFit; // 0x2D
	public int resizeTextMinSize; // 0x30
	public int resizeTextMaxSize; // 0x34
	public bool updateBounds; // 0x38
	public VerticalWrapMode verticalOverflow; // 0x3C
	public HorizontalWrapMode horizontalOverflow; // 0x40
	public Vector2 generationExtents; // 0x44
	public Vector2 pivot; // 0x4C
	public bool generateOutOfBounds; // 0x54

	// Methods

	// RVA: 0xF32BC Offset: 0xF32BC VA: 0xF32BC
	private bool CompareColors(Color left, Color right) { }

	// RVA: 0xF32F8 Offset: 0xF32F8 VA: 0xF32F8
	private bool CompareVector2(Vector2 left, Vector2 right) { }

	// RVA: 0xF3318 Offset: 0xF3318 VA: 0xF3318
	public bool Equals(TextGenerationSettings other) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xAE74C Offset: 0xAE74C VA: 0xAE74C
[NativeHeaderAttribute] // RVA: 0xAE74C Offset: 0xAE74C VA: 0xAE74C
public sealed class TextGenerator : IDisposable // TypeDefIndex: 1744
{
	// Fields
	internal IntPtr m_Ptr; // 0x8
	private string m_LastString; // 0xC
	private TextGenerationSettings m_LastSettings; // 0x10
	private bool m_HasGenerated; // 0x68
	private TextGenerationError m_LastValid; // 0x6C
	private readonly List<UIVertex> m_Verts; // 0x70
	private readonly List<UICharInfo> m_Characters; // 0x74
	private readonly List<UILineInfo> m_Lines; // 0x78
	private bool m_CachedVerts; // 0x7C
	private bool m_CachedCharacters; // 0x7D
	private bool m_CachedLines; // 0x7E

	// Properties
	public int characterCountVisible { get; }
	public IList<UIVertex> verts { get; }
	public IList<UICharInfo> characters { get; }
	public IList<UILineInfo> lines { get; }
	public Rect rectExtents { get; }
	public int characterCount { get; }
	public int lineCount { get; }

	// Methods

	// RVA: 0x5E5D94 Offset: 0x5E5D94 VA: 0x5E5D94
	public void .ctor() { }

	// RVA: 0x5E5D9C Offset: 0x5E5D9C VA: 0x5E5D9C
	public void .ctor(int initialCapacity) { }

	// RVA: 0x5E5F40 Offset: 0x5E5F40 VA: 0x5E5F40 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x5E6054 Offset: 0x5E6054 VA: 0x5E6054 Slot: 4
	private void System.IDisposable.Dispose() { }

	[CompilerGeneratedAttribute] // RVA: 0xAE958 Offset: 0xAE958 VA: 0xAE958
	// RVA: 0x5E616C Offset: 0x5E616C VA: 0x5E616C
	public int get_characterCountVisible() { }

	// RVA: 0x5E6218 Offset: 0x5E6218 VA: 0x5E6218
	private TextGenerationSettings ValidatedSettings(TextGenerationSettings settings) { }

	// RVA: 0x5E65A4 Offset: 0x5E65A4 VA: 0x5E65A4
	public void Invalidate() { }

	// RVA: 0x5E65B0 Offset: 0x5E65B0 VA: 0x5E65B0
	public void GetCharacters(List<UICharInfo> characters) { }

	// RVA: 0x5E6664 Offset: 0x5E6664 VA: 0x5E6664
	public void GetLines(List<UILineInfo> lines) { }

	// RVA: 0x5E6714 Offset: 0x5E6714 VA: 0x5E6714
	public void GetVertices(List<UIVertex> vertices) { }

	// RVA: 0x5E67C8 Offset: 0x5E67C8 VA: 0x5E67C8
	public float GetPreferredWidth(string str, TextGenerationSettings settings) { }

	// RVA: 0x5E690C Offset: 0x5E690C VA: 0x5E690C
	public float GetPreferredHeight(string str, TextGenerationSettings settings) { }

	// RVA: 0x5E69B0 Offset: 0x5E69B0 VA: 0x5E69B0
	public bool PopulateWithErrors(string str, TextGenerationSettings settings, GameObject context) { }

	// RVA: 0x5E6870 Offset: 0x5E6870 VA: 0x5E6870
	public bool Populate(string str, TextGenerationSettings settings) { }

	// RVA: 0x5E6C20 Offset: 0x5E6C20 VA: 0x5E6C20
	private TextGenerationError PopulateWithError(string str, TextGenerationSettings settings) { }

	// RVA: 0x5E6D50 Offset: 0x5E6D50 VA: 0x5E6D50
	private TextGenerationError PopulateAlways(string str, TextGenerationSettings settings) { }

	// RVA: 0x5E70B0 Offset: 0x5E70B0 VA: 0x5E70B0
	public IList<UIVertex> get_verts() { }

	// RVA: 0x5E70E4 Offset: 0x5E70E4 VA: 0x5E70E4
	public IList<UICharInfo> get_characters() { }

	// RVA: 0x5E7118 Offset: 0x5E7118 VA: 0x5E7118
	public IList<UILineInfo> get_lines() { }

	// RVA: 0x5E68D4 Offset: 0x5E68D4 VA: 0x5E68D4
	public Rect get_rectExtents() { }

	// RVA: 0x5E6180 Offset: 0x5E6180 VA: 0x5E6180
	public int get_characterCount() { }

	// RVA: 0x5E71CC Offset: 0x5E71CC VA: 0x5E71CC
	public int get_lineCount() { }

	[NativeMethodAttribute] // RVA: 0xAE968 Offset: 0xAE968 VA: 0xAE968
	// RVA: 0x5E5EAC Offset: 0x5E5EAC VA: 0x5E5EAC
	private static IntPtr Internal_Create() { }

	[NativeMethodAttribute] // RVA: 0xAE998 Offset: 0xAE998 VA: 0xAE998
	// RVA: 0x5E60C8 Offset: 0x5E60C8 VA: 0x5E60C8
	private static void Internal_Destroy(IntPtr ptr) { }

	// RVA: 0x5E7260 Offset: 0x5E7260 VA: 0x5E7260
	internal bool Populate_Internal(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry, out uint error) { }

	// RVA: 0x5E6F24 Offset: 0x5E6F24 VA: 0x5E6F24
	internal bool Populate_Internal(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, VerticalWrapMode verticalOverFlow, HorizontalWrapMode horizontalOverflow, bool updateBounds, TextAnchor anchor, Vector2 extents, Vector2 pivot, bool generateOutOfBounds, bool alignByGeometry, out TextGenerationError error) { }

	[NativeThrowsAttribute] // RVA: 0xAE9C8 Offset: 0xAE9C8 VA: 0xAE9C8
	// RVA: 0x5E6718 Offset: 0x5E6718 VA: 0x5E6718
	private void GetVerticesInternal(object vertices) { }

	[NativeThrowsAttribute] // RVA: 0xAE9D8 Offset: 0xAE9D8 VA: 0xAE9D8
	// RVA: 0x5E65B4 Offset: 0x5E65B4 VA: 0x5E65B4
	private void GetCharactersInternal(object characters) { }

	[NativeThrowsAttribute] // RVA: 0xAE9E8 Offset: 0xAE9E8 VA: 0xAE9E8
	// RVA: 0x5E6668 Offset: 0x5E6668 VA: 0x5E6668
	private void GetLinesInternal(object lines) { }

	// RVA: 0x5E714C Offset: 0x5E714C VA: 0x5E714C
	private void get_rectExtents_Injected(out Rect ret) { }

	// RVA: 0x5E732C Offset: 0x5E732C VA: 0x5E732C
	private bool Populate_Internal_Injected(string str, Font font, ref Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry, out uint error) { }
}

// Namespace: UnityEngine
public enum TextAnchor // TypeDefIndex: 1745
{
	// Fields
	public int value__; // 0x0
	public const TextAnchor UpperLeft = 0;
	public const TextAnchor UpperCenter = 1;
	public const TextAnchor UpperRight = 2;
	public const TextAnchor MiddleLeft = 3;
	public const TextAnchor MiddleCenter = 4;
	public const TextAnchor MiddleRight = 5;
	public const TextAnchor LowerLeft = 6;
	public const TextAnchor LowerCenter = 7;
	public const TextAnchor LowerRight = 8;
}

// Namespace: UnityEngine
public enum HorizontalWrapMode // TypeDefIndex: 1746
{
	// Fields
	public int value__; // 0x0
	public const HorizontalWrapMode Wrap = 0;
	public const HorizontalWrapMode Overflow = 1;
}

// Namespace: UnityEngine
public enum VerticalWrapMode // TypeDefIndex: 1747
{
	// Fields
	public int value__; // 0x0
	public const VerticalWrapMode Truncate = 0;
	public const VerticalWrapMode Overflow = 1;
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xAE7B4 Offset: 0xAE7B4 VA: 0xAE7B4
public struct UICharInfo // TypeDefIndex: 1748
{
	// Fields
	public Vector2 cursorPos; // 0x0
	public float charWidth; // 0x8
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xAE7C4 Offset: 0xAE7C4 VA: 0xAE7C4
public struct UILineInfo // TypeDefIndex: 1749
{
	// Fields
	public int startCharIdx; // 0x0
	public int height; // 0x4
	public float topY; // 0x8
	public float leading; // 0xC
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xAE7D4 Offset: 0xAE7D4 VA: 0xAE7D4
public struct UIVertex // TypeDefIndex: 1750
{
	// Fields
	public Vector3 position; // 0x0
	public Vector3 normal; // 0xC
	public Vector4 tangent; // 0x18
	public Color32 color; // 0x28
	public Vector2 uv0; // 0x2C
	public Vector2 uv1; // 0x34
	public Vector2 uv2; // 0x3C
	public Vector2 uv3; // 0x44
	private static readonly Color32 s_DefaultColor; // 0x0
	private static readonly Vector4 s_DefaultTangent; // 0x4
	public static UIVertex simpleVert; // 0x14

	// Methods

	// RVA: 0x5E749C Offset: 0x5E749C VA: 0x5E749C
	private static void .cctor() { }
}

// Namespace: UnityEngine
[StaticAccessorAttribute] // RVA: 0xAE7E4 Offset: 0xAE7E4 VA: 0xAE7E4
[NativeClassAttribute] // RVA: 0xAE7E4 Offset: 0xAE7E4 VA: 0xAE7E4
[NativeHeaderAttribute] // RVA: 0xAE7E4 Offset: 0xAE7E4 VA: 0xAE7E4
[NativeHeaderAttribute] // RVA: 0xAE7E4 Offset: 0xAE7E4 VA: 0xAE7E4
public sealed class Font : Object // TypeDefIndex: 1751
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xAE8F0 Offset: 0xAE8F0 VA: 0xAE8F0
	[CompilerGeneratedAttribute] // RVA: 0xAE8F0 Offset: 0xAE8F0 VA: 0xAE8F0
	private static Action<Font> textureRebuilt; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xAE924 Offset: 0xAE924 VA: 0xAE924
	[DebuggerBrowsableAttribute] // RVA: 0xAE924 Offset: 0xAE924 VA: 0xAE924
	private Font.FontTextureRebuildCallback m_FontTextureRebuildCallback; // 0xC

	// Properties
	public Material material { get; }
	public bool dynamic { get; }
	public int fontSize { get; }

	// Methods

	// RVA: 0x5E50AC Offset: 0x5E50AC VA: 0x5E50AC
	public static void add_textureRebuilt(Action<Font> value) { }

	// RVA: 0x5E51DC Offset: 0x5E51DC VA: 0x5E51DC
	public static void remove_textureRebuilt(Action<Font> value) { }

	// RVA: 0x5E530C Offset: 0x5E530C VA: 0x5E530C
	public Material get_material() { }

	// RVA: 0x5E5398 Offset: 0x5E5398 VA: 0x5E5398
	public bool get_dynamic() { }

	// RVA: 0x5E5420 Offset: 0x5E5420 VA: 0x5E5420
	public int get_fontSize() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAE9F8 Offset: 0xAE9F8 VA: 0xAE9F8
	// RVA: 0x5E54AC Offset: 0x5E54AC VA: 0x5E54AC
	internal static void InvokeTextureRebuilt_Internal(Font font) { }

	// RVA: 0x5E5764 Offset: 0x5E5764 VA: 0x5E5764
	public bool HasCharacter(char c) { }

	// RVA: 0x5E5768 Offset: 0x5E5768 VA: 0x5E5768
	private bool HasCharacter(int c) { }
}

// Namespace: 
public sealed class Font.FontTextureRebuildCallback : MulticastDelegate // TypeDefIndex: 1752
{
	// Methods

	// RVA: 0x5E5808 Offset: 0x5E5808 VA: 0x5E5808
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5E5554 Offset: 0x5E5554 VA: 0x5E5554 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x5E581C Offset: 0x5E581C VA: 0x5E581C Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x5E5848 Offset: 0x5E5848 VA: 0x5E5848 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1753
{}

// Namespace: UnityEngine.Experimental.Animations
public interface IAnimationJobPlayable : IPlayable // TypeDefIndex: 1754
{}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xAFCD0 Offset: 0xAFCD0 VA: 0xAFCD0
[RequiredByNativeCodeAttribute] // RVA: 0xAFCD0 Offset: 0xAFCD0 VA: 0xAFCD0
public sealed class SharedBetweenAnimatorsAttribute : Attribute // TypeDefIndex: 1755
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xAFD18 Offset: 0xAFD18 VA: 0xAFD18
public abstract class StateMachineBehaviour : ScriptableObject // TypeDefIndex: 1756
{
	// Methods

	// RVA: 0x5E506C Offset: 0x5E506C VA: 0x5E506C
	protected void .ctor() { }

	// RVA: 0x5E5074 Offset: 0x5E5074 VA: 0x5E5074 Slot: 4
	public virtual void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) { }

	// RVA: 0x5E5078 Offset: 0x5E5078 VA: 0x5E5078 Slot: 5
	public virtual void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) { }

	// RVA: 0x5E507C Offset: 0x5E507C VA: 0x5E507C Slot: 6
	public virtual void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) { }

	// RVA: 0x5E5080 Offset: 0x5E5080 VA: 0x5E5080 Slot: 7
	public virtual void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) { }

	// RVA: 0x5E5084 Offset: 0x5E5084 VA: 0x5E5084 Slot: 8
	public virtual void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) { }

	// RVA: 0x5E5088 Offset: 0x5E5088 VA: 0x5E5088 Slot: 9
	public virtual void OnStateMachineEnter(Animator animator, int stateMachinePathHash) { }

	// RVA: 0x5E508C Offset: 0x5E508C VA: 0x5E508C Slot: 10
	public virtual void OnStateMachineExit(Animator animator, int stateMachinePathHash) { }

	// RVA: 0x5E5090 Offset: 0x5E5090 VA: 0x5E5090 Slot: 11
	public virtual void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) { }

	// RVA: 0x5E5094 Offset: 0x5E5094 VA: 0x5E5094 Slot: 12
	public virtual void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) { }

	// RVA: 0x5E5098 Offset: 0x5E5098 VA: 0x5E5098 Slot: 13
	public virtual void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) { }

	// RVA: 0x5E509C Offset: 0x5E509C VA: 0x5E509C Slot: 14
	public virtual void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) { }

	// RVA: 0x5E50A0 Offset: 0x5E50A0 VA: 0x5E50A0 Slot: 15
	public virtual void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) { }

	// RVA: 0x5E50A4 Offset: 0x5E50A4 VA: 0x5E50A4 Slot: 16
	public virtual void OnStateMachineEnter(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller) { }

	// RVA: 0x5E50A8 Offset: 0x5E50A8 VA: 0x5E50A8 Slot: 17
	public virtual void OnStateMachineExit(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller) { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xAFD28 Offset: 0xAFD28 VA: 0xAFD28
[NativeHeaderAttribute] // RVA: 0xAFD28 Offset: 0xAFD28 VA: 0xAFD28
[StaticAccessorAttribute] // RVA: 0xAFD28 Offset: 0xAFD28 VA: 0xAFD28
[NativeHeaderAttribute] // RVA: 0xAFD28 Offset: 0xAFD28 VA: 0xAFD28
public struct AnimationClipPlayable : IPlayable, IEquatable<AnimationClipPlayable> // TypeDefIndex: 1757
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0xF2EC0 Offset: 0xF2EC0 VA: 0xF2EC0 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0xF2ED4 Offset: 0xF2ED4 VA: 0xF2ED4 Slot: 4
	public bool Equals(AnimationClipPlayable other) { }
}

// Namespace: UnityEngine.Experimental.Animations
[NativeHeaderAttribute] // RVA: 0xAFE08 Offset: 0xAFE08 VA: 0xAFE08
[NativeHeaderAttribute] // RVA: 0xAFE08 Offset: 0xAFE08 VA: 0xAFE08
[RequiredByNativeCodeAttribute] // RVA: 0xAFE08 Offset: 0xAFE08 VA: 0xAFE08
public struct AnimationHumanStream // TypeDefIndex: 1758
{
	// Fields
	private IntPtr stream; // 0x0
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xAFEA4 Offset: 0xAFEA4 VA: 0xAFEA4
[StaticAccessorAttribute] // RVA: 0xAFEA4 Offset: 0xAFEA4 VA: 0xAFEA4
[RequiredByNativeCodeAttribute] // RVA: 0xAFEA4 Offset: 0xAFEA4 VA: 0xAFEA4
[NativeHeaderAttribute] // RVA: 0xAFEA4 Offset: 0xAFEA4 VA: 0xAFEA4
[NativeHeaderAttribute] // RVA: 0xAFEA4 Offset: 0xAFEA4 VA: 0xAFEA4
public struct AnimationLayerMixerPlayable : IPlayable, IEquatable<AnimationLayerMixerPlayable> // TypeDefIndex: 1759
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationLayerMixerPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xF2EDC Offset: 0xF2EDC VA: 0xF2EDC
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xF2EE4 Offset: 0xF2EE4 VA: 0xF2EE4 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0xF2EF8 Offset: 0xF2EF8 VA: 0xF2EF8 Slot: 4
	public bool Equals(AnimationLayerMixerPlayable other) { }

	// RVA: 0x5E37A0 Offset: 0x5E37A0 VA: 0x5E37A0
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[StaticAccessorAttribute] // RVA: 0xAFFB8 Offset: 0xAFFB8 VA: 0xAFFB8
[RequiredByNativeCodeAttribute] // RVA: 0xAFFB8 Offset: 0xAFFB8 VA: 0xAFFB8
[NativeHeaderAttribute] // RVA: 0xAFFB8 Offset: 0xAFFB8 VA: 0xAFFB8
[NativeHeaderAttribute] // RVA: 0xAFFB8 Offset: 0xAFFB8 VA: 0xAFFB8
[NativeHeaderAttribute] // RVA: 0xAFFB8 Offset: 0xAFFB8 VA: 0xAFFB8
public struct AnimationMixerPlayable : IPlayable, IEquatable<AnimationMixerPlayable> // TypeDefIndex: 1760
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationMixerPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xF2F00 Offset: 0xF2F00 VA: 0xF2F00
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xF2F08 Offset: 0xF2F08 VA: 0xF2F08 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0xF2F1C Offset: 0xF2F1C VA: 0xF2F1C Slot: 4
	public bool Equals(AnimationMixerPlayable other) { }

	// RVA: 0x5E3A10 Offset: 0x5E3A10 VA: 0x5E3A10
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[StaticAccessorAttribute] // RVA: 0xB00C0 Offset: 0xB00C0 VA: 0xB00C0
[NativeHeaderAttribute] // RVA: 0xB00C0 Offset: 0xB00C0 VA: 0xB00C0
[RequiredByNativeCodeAttribute] // RVA: 0xB00C0 Offset: 0xB00C0 VA: 0xB00C0
internal struct AnimationMotionXToDeltaPlayable : IPlayable, IEquatable<AnimationMotionXToDeltaPlayable> // TypeDefIndex: 1761
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationMotionXToDeltaPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xF2F24 Offset: 0xF2F24 VA: 0xF2F24
	private void .ctor(PlayableHandle handle) { }

	// RVA: 0xF2F2C Offset: 0xF2F2C VA: 0xF2F2C Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0xF2F40 Offset: 0xF2F40 VA: 0xF2F40 Slot: 4
	public bool Equals(AnimationMotionXToDeltaPlayable other) { }

	// RVA: 0x5E3C80 Offset: 0x5E3C80 VA: 0x5E3C80
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xB0154 Offset: 0xB0154 VA: 0xB0154
[RequiredByNativeCodeAttribute] // RVA: 0xB0154 Offset: 0xB0154 VA: 0xB0154
[NativeHeaderAttribute] // RVA: 0xB0154 Offset: 0xB0154 VA: 0xB0154
[NativeHeaderAttribute] // RVA: 0xB0154 Offset: 0xB0154 VA: 0xB0154
[StaticAccessorAttribute] // RVA: 0xB0154 Offset: 0xB0154 VA: 0xB0154
internal struct AnimationOffsetPlayable : IPlayable, IEquatable<AnimationOffsetPlayable> // TypeDefIndex: 1762
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationOffsetPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xF2F48 Offset: 0xF2F48 VA: 0xF2F48
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xF2F50 Offset: 0xF2F50 VA: 0xF2F50 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0xF2F64 Offset: 0xF2F64 VA: 0xF2F64 Slot: 4
	public bool Equals(AnimationOffsetPlayable other) { }

	// RVA: 0x5E3F38 Offset: 0x5E3F38 VA: 0x5E3F38
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xB0260 Offset: 0xB0260 VA: 0xB0260
[NativeHeaderAttribute] // RVA: 0xB0260 Offset: 0xB0260 VA: 0xB0260
[NativeHeaderAttribute] // RVA: 0xB0260 Offset: 0xB0260 VA: 0xB0260
[StaticAccessorAttribute] // RVA: 0xB0260 Offset: 0xB0260 VA: 0xB0260
[RequiredByNativeCodeAttribute] // RVA: 0xB0260 Offset: 0xB0260 VA: 0xB0260
[NativeHeaderAttribute] // RVA: 0xB0260 Offset: 0xB0260 VA: 0xB0260
[NativeHeaderAttribute] // RVA: 0xB0260 Offset: 0xB0260 VA: 0xB0260
public struct AnimationPlayableOutput : IPlayableOutput // TypeDefIndex: 1763
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xB03BC Offset: 0xB03BC VA: 0xB03BC
[NativeHeaderAttribute] // RVA: 0xB03BC Offset: 0xB03BC VA: 0xB03BC
[StaticAccessorAttribute] // RVA: 0xB03BC Offset: 0xB03BC VA: 0xB03BC
[NativeHeaderAttribute] // RVA: 0xB03BC Offset: 0xB03BC VA: 0xB03BC
[NativeHeaderAttribute] // RVA: 0xB03BC Offset: 0xB03BC VA: 0xB03BC
internal struct AnimationPosePlayable : IPlayable, IEquatable<AnimationPosePlayable> // TypeDefIndex: 1764
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationPosePlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xF2F6C Offset: 0xF2F6C VA: 0xF2F6C
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xF2F74 Offset: 0xF2F74 VA: 0xF2F74 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0xF2F88 Offset: 0xF2F88 VA: 0xF2F88 Slot: 4
	public bool Equals(AnimationPosePlayable other) { }

	// RVA: 0x5E41F0 Offset: 0x5E41F0 VA: 0x5E41F0
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xB04C4 Offset: 0xB04C4 VA: 0xB04C4
[NativeHeaderAttribute] // RVA: 0xB04C4 Offset: 0xB04C4 VA: 0xB04C4
[RequiredByNativeCodeAttribute] // RVA: 0xB04C4 Offset: 0xB04C4 VA: 0xB04C4
[StaticAccessorAttribute] // RVA: 0xB04C4 Offset: 0xB04C4 VA: 0xB04C4
[NativeHeaderAttribute] // RVA: 0xB04C4 Offset: 0xB04C4 VA: 0xB04C4
internal struct AnimationRemoveScalePlayable : IPlayable, IEquatable<AnimationRemoveScalePlayable> // TypeDefIndex: 1765
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationRemoveScalePlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xF2F90 Offset: 0xF2F90 VA: 0xF2F90
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xF2F98 Offset: 0xF2F98 VA: 0xF2F98 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0xF2FAC Offset: 0xF2FAC VA: 0xF2FAC Slot: 4
	public bool Equals(AnimationRemoveScalePlayable other) { }

	// RVA: 0x5E44A8 Offset: 0x5E44A8 VA: 0x5E44A8
	private static void .cctor() { }
}

// Namespace: UnityEngine.Experimental.Animations
[NativeHeaderAttribute] // RVA: 0xB05DC Offset: 0xB05DC VA: 0xB05DC
[StaticAccessorAttribute] // RVA: 0xB05DC Offset: 0xB05DC VA: 0xB05DC
[RequiredByNativeCodeAttribute] // RVA: 0xB05DC Offset: 0xB05DC VA: 0xB05DC
[NativeHeaderAttribute] // RVA: 0xB05DC Offset: 0xB05DC VA: 0xB05DC
[NativeHeaderAttribute] // RVA: 0xB05DC Offset: 0xB05DC VA: 0xB05DC
public struct AnimationScriptPlayable : IAnimationJobPlayable, IEquatable<AnimationScriptPlayable>, IPlayable // TypeDefIndex: 1766
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationScriptPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xF3088 Offset: 0xF3088 VA: 0xF3088
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xF3090 Offset: 0xF3090 VA: 0xF3090 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0xF30A4 Offset: 0xF30A4 VA: 0xF30A4 Slot: 4
	public bool Equals(AnimationScriptPlayable other) { }

	// RVA: 0x5E4FAC Offset: 0x5E4FAC VA: 0x5E4FAC
	private static void .cctor() { }
}

// Namespace: UnityEngine.Experimental.Animations
[NativeHeaderAttribute] // RVA: 0xB06B8 Offset: 0xB06B8 VA: 0xB06B8
[RequiredByNativeCodeAttribute] // RVA: 0xB06B8 Offset: 0xB06B8 VA: 0xB06B8
[NativeHeaderAttribute] // RVA: 0xB06B8 Offset: 0xB06B8 VA: 0xB06B8
public struct AnimationStream // TypeDefIndex: 1767
{
	// Fields
	private uint m_AnimatorBindingsVersion; // 0x0
	private IntPtr constant; // 0x4
	private IntPtr input; // 0x8
	private IntPtr output; // 0xC
	private IntPtr workspace; // 0x10
	private IntPtr inputStreamAccessor; // 0x14
	private IntPtr animationHandleBinder; // 0x18
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB0784 Offset: 0xB0784 VA: 0xB0784
[UsedByNativeCodeAttribute] // RVA: 0xB0784 Offset: 0xB0784 VA: 0xB0784
[NativeHeaderAttribute] // RVA: 0xB0784 Offset: 0xB0784 VA: 0xB0784
public struct AnimatorClipInfo // TypeDefIndex: 1768
{
	// Fields
	private int m_ClipInstanceID; // 0x0
	private float m_Weight; // 0x4
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB07F4 Offset: 0xB07F4 VA: 0xB07F4
[RequiredByNativeCodeAttribute] // RVA: 0xB07F4 Offset: 0xB07F4 VA: 0xB07F4
public struct AnimatorStateInfo // TypeDefIndex: 1769
{
	// Fields
	private int m_Name; // 0x0
	private int m_Path; // 0x4
	private int m_FullPath; // 0x8
	private float m_NormalizedTime; // 0xC
	private float m_Length; // 0x10
	private float m_Speed; // 0x14
	private float m_SpeedMultiplier; // 0x18
	private int m_Tag; // 0x1C
	private int m_Loop; // 0x20
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xB083C Offset: 0xB083C VA: 0xB083C
[NativeHeaderAttribute] // RVA: 0xB083C Offset: 0xB083C VA: 0xB083C
public struct AnimatorTransitionInfo // TypeDefIndex: 1770
{
	// Fields
	[NativeNameAttribute] // RVA: 0xB0D78 Offset: 0xB0D78 VA: 0xB0D78
	private int m_FullPath; // 0x0
	[NativeNameAttribute] // RVA: 0xB0DB4 Offset: 0xB0DB4 VA: 0xB0DB4
	private int m_UserName; // 0x4
	[NativeNameAttribute] // RVA: 0xB0DF0 Offset: 0xB0DF0 VA: 0xB0DF0
	private int m_Name; // 0x8
	[NativeNameAttribute] // RVA: 0xB0E28 Offset: 0xB0E28 VA: 0xB0E28
	private bool m_HasFixedDuration; // 0xC
	[NativeNameAttribute] // RVA: 0xB0E68 Offset: 0xB0E68 VA: 0xB0E68
	private float m_Duration; // 0x10
	[NativeNameAttribute] // RVA: 0xB0EA0 Offset: 0xB0EA0 VA: 0xB0EA0
	private float m_NormalizedTime; // 0x14
	[NativeNameAttribute] // RVA: 0xB0EDC Offset: 0xB0EDC VA: 0xB0EDC
	private bool m_AnyState; // 0x18
	[NativeNameAttribute] // RVA: 0xB0F14 Offset: 0xB0F14 VA: 0xB0F14
	private int m_TransitionType; // 0x1C
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB0884 Offset: 0xB0884 VA: 0xB0884
[NativeHeaderAttribute] // RVA: 0xB0884 Offset: 0xB0884 VA: 0xB0884
[NativeHeaderAttribute] // RVA: 0xB0884 Offset: 0xB0884 VA: 0xB0884
[UsedByNativeCodeAttribute] // RVA: 0xB0884 Offset: 0xB0884 VA: 0xB0884
public class Animator : Behaviour // TypeDefIndex: 1771
{
	// Properties
	public float speed { set; }
	public bool hasBoundPlayables { get; }

	// Methods

	// RVA: 0x5E48DC Offset: 0x5E48DC VA: 0x5E48DC
	public void SetTrigger(string name) { }

	// RVA: 0x5E4988 Offset: 0x5E4988 VA: 0x5E4988
	public void ResetTrigger(string name) { }

	// RVA: 0x5E4A34 Offset: 0x5E4A34 VA: 0x5E4A34
	public void set_speed(float value) { }

	[NativeMethodAttribute] // RVA: 0xB1098 Offset: 0xB1098 VA: 0xB1098
	// RVA: 0x5E4AD4 Offset: 0x5E4AD4 VA: 0x5E4AD4
	public bool get_hasBoundPlayables() { }

	[FreeFunctionAttribute] // RVA: 0xB10D8 Offset: 0xB10D8 VA: 0xB10D8
	// RVA: 0x5E48E0 Offset: 0x5E48E0 VA: 0x5E48E0
	private void SetTriggerString(string name) { }

	[FreeFunctionAttribute] // RVA: 0xB1144 Offset: 0xB1144 VA: 0xB1144
	// RVA: 0x5E498C Offset: 0x5E498C VA: 0x5E498C
	private void ResetTriggerString(string name) { }
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xB091C Offset: 0xB091C VA: 0xB091C
[NativeHeaderAttribute] // RVA: 0xB091C Offset: 0xB091C VA: 0xB091C
[NativeHeaderAttribute] // RVA: 0xB091C Offset: 0xB091C VA: 0xB091C
[NativeHeaderAttribute] // RVA: 0xB091C Offset: 0xB091C VA: 0xB091C
[StaticAccessorAttribute] // RVA: 0xB091C Offset: 0xB091C VA: 0xB091C
[NativeHeaderAttribute] // RVA: 0xB091C Offset: 0xB091C VA: 0xB091C
[RequiredByNativeCodeAttribute] // RVA: 0xB091C Offset: 0xB091C VA: 0xB091C
public struct AnimatorControllerPlayable : IPlayable, IEquatable<AnimatorControllerPlayable> // TypeDefIndex: 1772
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimatorControllerPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xF2FB4 Offset: 0xF2FB4 VA: 0xF2FB4
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xF2FBC Offset: 0xF2FBC VA: 0xF2FBC Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0xF2FD0 Offset: 0xF2FD0 VA: 0xF2FD0
	public void SetHandle(PlayableHandle handle) { }

	// RVA: 0xF2FD8 Offset: 0xF2FD8 VA: 0xF2FD8 Slot: 4
	public bool Equals(AnimatorControllerPlayable other) { }

	// RVA: 0x5E481C Offset: 0x5E481C VA: 0x5E481C
	private static void .cctor() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB0A7C Offset: 0xB0A7C VA: 0xB0A7C
[NativeHeaderAttribute] // RVA: 0xB0A7C Offset: 0xB0A7C VA: 0xB0A7C
[DefaultMemberAttribute] // RVA: 0xB0A7C Offset: 0xB0A7C VA: 0xB0A7C
[UsedByNativeCodeAttribute] // RVA: 0xB0A7C Offset: 0xB0A7C VA: 0xB0A7C
public class AnimatorOverrideController : RuntimeAnimatorController // TypeDefIndex: 1773
{
	// Fields
	internal AnimatorOverrideController.OnOverrideControllerDirtyCallback OnOverrideControllerDirty; // 0xC

	// Methods

	[NativeConditionalAttribute] // RVA: 0xB11B4 Offset: 0xB11B4 VA: 0xB11B4
	[RequiredByNativeCodeAttribute] // RVA: 0xB11B4 Offset: 0xB11B4 VA: 0xB11B4
	// RVA: 0x5E4B6C Offset: 0x5E4B6C VA: 0x5E4B6C
	internal static void OnInvalidateOverrideController(AnimatorOverrideController controller) { }
}

// Namespace: 
internal sealed class AnimatorOverrideController.OnOverrideControllerDirtyCallback : MulticastDelegate // TypeDefIndex: 1774
{
	// Methods

	// RVA: 0x5E4DB0 Offset: 0x5E4DB0 VA: 0x5E4DB0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5E4BA0 Offset: 0x5E4BA0 VA: 0x5E4BA0 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x5E4DC4 Offset: 0x5E4DC4 VA: 0x5E4DC4 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x5E4DF0 Offset: 0x5E4DF0 VA: 0x5E4DF0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xB0B3C Offset: 0xB0B3C VA: 0xB0B3C
[NativeTypeAttribute] // RVA: 0xB0B3C Offset: 0xB0B3C VA: 0xB0B3C
[NativeHeaderAttribute] // RVA: 0xB0B3C Offset: 0xB0B3C VA: 0xB0B3C
public struct SkeletonBone // TypeDefIndex: 1775
{
	// Fields
	[NativeNameAttribute] // RVA: 0xB0F50 Offset: 0xB0F50 VA: 0xB0F50
	public string name; // 0x0
	[NativeNameAttribute] // RVA: 0xB0F84 Offset: 0xB0F84 VA: 0xB0F84
	internal string parentName; // 0x4
	[NativeNameAttribute] // RVA: 0xB0FC0 Offset: 0xB0FC0 VA: 0xB0FC0
	public Vector3 position; // 0x8
	[NativeNameAttribute] // RVA: 0xB0FF8 Offset: 0xB0FF8 VA: 0xB0FF8
	public Quaternion rotation; // 0x14
	[NativeNameAttribute] // RVA: 0xB1030 Offset: 0xB1030 VA: 0xB1030
	public Vector3 scale; // 0x24
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB0BBC Offset: 0xB0BBC VA: 0xB0BBC
[NativeTypeAttribute] // RVA: 0xB0BBC Offset: 0xB0BBC VA: 0xB0BBC
[NativeHeaderAttribute] // RVA: 0xB0BBC Offset: 0xB0BBC VA: 0xB0BBC
public struct HumanLimit // TypeDefIndex: 1776
{
	// Fields
	private Vector3 m_Min; // 0x0
	private Vector3 m_Max; // 0xC
	private Vector3 m_Center; // 0x18
	private float m_AxisLength; // 0x24
	private int m_UseDefaultValues; // 0x28
}

// Namespace: UnityEngine
[NativeTypeAttribute] // RVA: 0xB0C84 Offset: 0xB0C84 VA: 0xB0C84
[RequiredByNativeCodeAttribute] // RVA: 0xB0C84 Offset: 0xB0C84 VA: 0xB0C84
[NativeHeaderAttribute] // RVA: 0xB0C84 Offset: 0xB0C84 VA: 0xB0C84
public struct HumanBone // TypeDefIndex: 1777
{
	// Fields
	private string m_BoneName; // 0x0
	private string m_HumanName; // 0x4
	[NativeNameAttribute] // RVA: 0xB1064 Offset: 0xB1064 VA: 0xB1064
	public HumanLimit limit; // 0x8
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xB0D00 Offset: 0xB0D00 VA: 0xB0D00
[ExcludeFromObjectFactoryAttribute] // RVA: 0xB0D00 Offset: 0xB0D00 VA: 0xB0D00
[NativeHeaderAttribute] // RVA: 0xB0D00 Offset: 0xB0D00 VA: 0xB0D00
public class RuntimeAnimatorController : Object // TypeDefIndex: 1778
{}

// Namespace: UnityEngine
internal enum AnimationEventSource // TypeDefIndex: 1779
{
	// Fields
	public int value__; // 0x0
	public const AnimationEventSource NoSource = 0;
	public const AnimationEventSource Legacy = 1;
	public const AnimationEventSource Animator = 2;
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xB0D58 Offset: 0xB0D58 VA: 0xB0D58
[Serializable]
public sealed class AnimationEvent // TypeDefIndex: 1780
{
	// Fields
	internal float m_Time; // 0x8
	internal string m_FunctionName; // 0xC
	internal string m_StringParameter; // 0x10
	internal Object m_ObjectReferenceParameter; // 0x14
	internal float m_FloatParameter; // 0x18
	internal int m_IntParameter; // 0x1C
	internal int m_MessageOptions; // 0x20
	internal AnimationEventSource m_Source; // 0x24
	internal AnimationState m_StateSender; // 0x28
	internal AnimatorStateInfo m_AnimatorStateInfo; // 0x2C
	internal AnimatorClipInfo m_AnimatorClipInfo; // 0x50

	// Methods

	// RVA: 0x5E34A4 Offset: 0x5E34A4 VA: 0x5E34A4
	public void .ctor() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xB0D68 Offset: 0xB0D68 VA: 0xB0D68
public sealed class AnimationState : TrackedReference // TypeDefIndex: 1781
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 1782
{}

// Namespace: UnityEngine
internal class AudioExtensionDefinition // TypeDefIndex: 1783
{
	// Fields
	private string assemblyName; // 0x8
	private string extensionNamespace; // 0xC
	private string extensionTypeName; // 0x10
	private Type extensionType; // 0x14

	// Methods

	// RVA: 0x5DC42C Offset: 0x5DC42C VA: 0x5DC42C
	public Type GetExtensionType() { }
}

// Namespace: UnityEngine
internal class AudioSpatializerExtensionDefinition // TypeDefIndex: 1784
{
	// Fields
	public PropertyName spatializerName; // 0x8
	public AudioExtensionDefinition definition; // 0xC
}

// Namespace: UnityEngine
internal class AudioAmbisonicExtensionDefinition // TypeDefIndex: 1785
{
	// Fields
	public PropertyName ambisonicPluginName; // 0x8
	public AudioExtensionDefinition definition; // 0xC
}

// Namespace: UnityEngine
internal class AudioListenerExtension : ScriptableObject // TypeDefIndex: 1786
{
	// Fields
	[SerializeField] // RVA: 0xB298C Offset: 0xB298C VA: 0xB298C
	private AudioListener m_audioListener; // 0xC

	// Properties
	public AudioListener audioListener { get; set; }

	// Methods

	// RVA: 0x5DEFE8 Offset: 0x5DEFE8 VA: 0x5DEFE8
	public void .ctor() { }

	// RVA: 0x5DDE38 Offset: 0x5DDE38 VA: 0x5DDE38
	public AudioListener get_audioListener() { }

	// RVA: 0x5DDB7C Offset: 0x5DDB7C VA: 0x5DDB7C
	public void set_audioListener(AudioListener value) { }

	// RVA: 0x5DEFF0 Offset: 0x5DEFF0 VA: 0x5DEFF0 Slot: 4
	public virtual float ReadExtensionProperty(PropertyName propertyName) { }

	// RVA: 0x5DEFF8 Offset: 0x5DEFF8 VA: 0x5DEFF8 Slot: 5
	public virtual void WriteExtensionProperty(PropertyName propertyName, float propertyValue) { }

	// RVA: 0x5DEFFC Offset: 0x5DEFFC VA: 0x5DEFFC Slot: 6
	public virtual void ExtensionUpdate() { }
}

// Namespace: UnityEngine
internal class AudioSourceExtension : ScriptableObject // TypeDefIndex: 1787
{
	// Fields
	[SerializeField] // RVA: 0xB299C Offset: 0xB299C VA: 0xB299C
	private AudioSource m_audioSource; // 0xC
	internal int m_ExtensionManagerUpdateIndex; // 0x10

	// Properties
	public AudioSource audioSource { get; set; }

	// Methods

	// RVA: 0x5DF99C Offset: 0x5DF99C VA: 0x5DF99C
	public void .ctor() { }

	// RVA: 0x5DD538 Offset: 0x5DD538 VA: 0x5DD538
	public AudioSource get_audioSource() { }

	// RVA: 0x5DCDE4 Offset: 0x5DCDE4 VA: 0x5DCDE4
	public void set_audioSource(AudioSource value) { }

	// RVA: 0x5DF9AC Offset: 0x5DF9AC VA: 0x5DF9AC Slot: 4
	public virtual float ReadExtensionProperty(PropertyName propertyName) { }

	// RVA: 0x5DF9B4 Offset: 0x5DF9B4 VA: 0x5DF9B4 Slot: 5
	public virtual void WriteExtensionProperty(PropertyName propertyName, float propertyValue) { }

	// RVA: 0x5DF9B8 Offset: 0x5DF9B8 VA: 0x5DF9B8 Slot: 6
	public virtual void Play() { }

	// RVA: 0x5DF9BC Offset: 0x5DF9BC VA: 0x5DF9BC Slot: 7
	public virtual void Stop() { }

	// RVA: 0x5DF9C0 Offset: 0x5DF9C0 VA: 0x5DF9C0 Slot: 8
	public virtual void ExtensionUpdate() { }

	// RVA: 0x5DF9C4 Offset: 0x5DF9C4 VA: 0x5DF9C4
	public void OnDestroy() { }
}

// Namespace: UnityEngine
internal sealed class AudioExtensionManager // TypeDefIndex: 1788
{
	// Fields
	private static List<AudioSpatializerExtensionDefinition> m_ListenerSpatializerExtensionDefinitions; // 0x0
	private static List<AudioSpatializerExtensionDefinition> m_SourceSpatializerExtensionDefinitions; // 0x4
	private static List<AudioAmbisonicExtensionDefinition> m_SourceAmbisonicDecoderExtensionDefinitions; // 0x8
	private static List<AudioSourceExtension> m_SourceExtensionsToUpdate; // 0xC
	private static int m_NextStopIndex; // 0x10
	private static bool m_BuiltinDefinitionsRegistered; // 0x14
	private static PropertyName m_SpatializerName; // 0x18
	private static PropertyName m_SpatializerExtensionName; // 0x1C
	private static PropertyName m_ListenerSpatializerExtensionName; // 0x20

	// Methods

	// RVA: 0x5DC720 Offset: 0x5DC720 VA: 0x5DC720
	internal static AudioSourceExtension AddSpatializerExtension(AudioSource source) { }

	// RVA: 0x5DD0A0 Offset: 0x5DD0A0 VA: 0x5DD0A0
	internal static AudioSourceExtension AddAmbisonicDecoderExtension(AudioSource source) { }

	// RVA: 0x5DCDEC Offset: 0x5DCDEC VA: 0x5DCDEC
	internal static void WriteExtensionProperties(AudioSourceExtension extension, string extensionName) { }

	// RVA: 0x5DD6D0 Offset: 0x5DD6D0 VA: 0x5DD6D0
	internal static AudioListenerExtension AddSpatializerExtension(AudioListener listener) { }

	// RVA: 0x5DDB84 Offset: 0x5DDB84 VA: 0x5DDB84
	internal static void WriteExtensionProperties(AudioListenerExtension extension, string extensionName) { }

	// RVA: 0x5DDFD0 Offset: 0x5DDFD0 VA: 0x5DDFD0
	internal static void AddExtensionToManager(AudioSourceExtension extension) { }

	// RVA: 0x5DE120 Offset: 0x5DE120 VA: 0x5DE120
	internal static void RemoveExtensionFromManager(AudioSourceExtension extension) { }

	// RVA: 0x5DE3AC Offset: 0x5DE3AC VA: 0x5DE3AC
	internal static void Update() { }

	// RVA: 0x5DEBEC Offset: 0x5DEBEC VA: 0x5DEBEC
	internal static void GetReadyToPlay(AudioSourceExtension extension) { }

	// RVA: 0x5DCAD0 Offset: 0x5DCAD0 VA: 0x5DCAD0
	private static void RegisterBuiltinDefinitions() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2BB4 Offset: 0xB2BB4 VA: 0xB2BB4
	// RVA: 0x5DEABC Offset: 0x5DEABC VA: 0x5DEABC
	internal static Object GetAudioListener() { }

	// RVA: 0x5DECD4 Offset: 0x5DECD4 VA: 0x5DECD4
	private static void .cctor() { }
}

// Namespace: UnityEngine.Audio
[NativeHeaderAttribute] // RVA: 0xB24DC Offset: 0xB24DC VA: 0xB24DC
[NativeHeaderAttribute] // RVA: 0xB24DC Offset: 0xB24DC VA: 0xB24DC
[NativeHeaderAttribute] // RVA: 0xB24DC Offset: 0xB24DC VA: 0xB24DC
[RequiredByNativeCodeAttribute] // RVA: 0xB24DC Offset: 0xB24DC VA: 0xB24DC
[StaticAccessorAttribute] // RVA: 0xB24DC Offset: 0xB24DC VA: 0xB24DC
public struct AudioPlayableOutput : IPlayableOutput // TypeDefIndex: 1789
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0
}

// Namespace: UnityEngine.Audio
[RequiredByNativeCodeAttribute] // RVA: 0xB25FC Offset: 0xB25FC VA: 0xB25FC
[NativeHeaderAttribute] // RVA: 0xB25FC Offset: 0xB25FC VA: 0xB25FC
[NativeHeaderAttribute] // RVA: 0xB25FC Offset: 0xB25FC VA: 0xB25FC
[StaticAccessorAttribute] // RVA: 0xB25FC Offset: 0xB25FC VA: 0xB25FC
[NativeHeaderAttribute] // RVA: 0xB25FC Offset: 0xB25FC VA: 0xB25FC
public struct AudioClipPlayable : IPlayable, IEquatable<AudioClipPlayable> // TypeDefIndex: 1790
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0xF1198 Offset: 0xF1198 VA: 0xF1198 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0xF11AC Offset: 0xF11AC VA: 0xF11AC Slot: 4
	public bool Equals(AudioClipPlayable other) { }
}

// Namespace: UnityEngine.Audio
[StaticAccessorAttribute] // RVA: 0xB2700 Offset: 0xB2700 VA: 0xB2700
[NativeHeaderAttribute] // RVA: 0xB2700 Offset: 0xB2700 VA: 0xB2700
[NativeHeaderAttribute] // RVA: 0xB2700 Offset: 0xB2700 VA: 0xB2700
[NativeHeaderAttribute] // RVA: 0xB2700 Offset: 0xB2700 VA: 0xB2700
[RequiredByNativeCodeAttribute] // RVA: 0xB2700 Offset: 0xB2700 VA: 0xB2700
public struct AudioMixerPlayable : IPlayable, IEquatable<AudioMixerPlayable> // TypeDefIndex: 1791
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0xF11B4 Offset: 0xF11B4 VA: 0xF11B4 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0xF11C8 Offset: 0xF11C8 VA: 0xF11C8 Slot: 4
	public bool Equals(AudioMixerPlayable other) { }
}

// Namespace: UnityEngine.Experimental.Audio
[NativeTypeAttribute] // RVA: 0xB2804 Offset: 0xB2804 VA: 0xB2804
[StaticAccessorAttribute] // RVA: 0xB2804 Offset: 0xB2804 VA: 0xB2804
public class AudioSampleProvider : IDisposable // TypeDefIndex: 1792
{
	// Fields
	private AudioSampleProvider.ConsumeSampleFramesNativeFunction m_ConsumeSampleFramesNativeFunction; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xB29AC Offset: 0xB29AC VA: 0xB29AC
	[DebuggerBrowsableAttribute] // RVA: 0xB29AC Offset: 0xB29AC VA: 0xB29AC
	private uint <id>k__BackingField; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0xB29E0 Offset: 0xB29E0 VA: 0xB29E0
	[DebuggerBrowsableAttribute] // RVA: 0xB29E0 Offset: 0xB29E0 VA: 0xB29E0
	private ushort <trackIndex>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xB2A14 Offset: 0xB2A14 VA: 0xB2A14
	[DebuggerBrowsableAttribute] // RVA: 0xB2A14 Offset: 0xB2A14 VA: 0xB2A14
	private Object <owner>k__BackingField; // 0x14
	[DebuggerBrowsableAttribute] // RVA: 0xB2A48 Offset: 0xB2A48 VA: 0xB2A48
	[CompilerGeneratedAttribute] // RVA: 0xB2A48 Offset: 0xB2A48 VA: 0xB2A48
	private ushort <channelCount>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xB2A7C Offset: 0xB2A7C VA: 0xB2A7C
	[DebuggerBrowsableAttribute] // RVA: 0xB2A7C Offset: 0xB2A7C VA: 0xB2A7C
	private uint <sampleRate>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xB2AB0 Offset: 0xB2AB0 VA: 0xB2AB0
	[DebuggerBrowsableAttribute] // RVA: 0xB2AB0 Offset: 0xB2AB0 VA: 0xB2AB0
	private AudioSampleProvider.SampleFramesHandler sampleFramesAvailable; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xB2AE4 Offset: 0xB2AE4 VA: 0xB2AE4
	[DebuggerBrowsableAttribute] // RVA: 0xB2AE4 Offset: 0xB2AE4 VA: 0xB2AE4
	private AudioSampleProvider.SampleFramesHandler sampleFramesOverflow; // 0x24

	// Properties
	public uint id { get; set; }

	// Methods

	// RVA: 0x5DFB90 Offset: 0x5DFB90 VA: 0x5DFB90 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x5DFBF4 Offset: 0x5DFBF4 VA: 0x5DFBF4 Slot: 4
	public void Dispose() { }

	[CompilerGeneratedAttribute] // RVA: 0xB2BC4 Offset: 0xB2BC4 VA: 0xB2BC4
	// RVA: 0x5DFC2C Offset: 0x5DFC2C VA: 0x5DFC2C
	public uint get_id() { }

	[CompilerGeneratedAttribute] // RVA: 0xB2BD4 Offset: 0xB2BD4 VA: 0xB2BD4
	// RVA: 0x5DFCB4 Offset: 0x5DFCB4 VA: 0x5DFCB4
	private void set_id(uint value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB2BE4 Offset: 0xB2BE4 VA: 0xB2BE4
	// RVA: 0x5DFCBC Offset: 0x5DFCBC VA: 0x5DFCBC
	private void InvokeSampleFramesAvailable(int sampleFrameCount) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB2BF4 Offset: 0xB2BF4 VA: 0xB2BF4
	// RVA: 0x5E00B4 Offset: 0x5E00B4 VA: 0x5E00B4
	private void InvokeSampleFramesOverflow(int droppedSampleFrameCount) { }

	[NativeMethodAttribute] // RVA: 0xB2C04 Offset: 0xB2C04 VA: 0xB2C04
	// RVA: 0x5DFC34 Offset: 0x5DFC34 VA: 0x5DFC34
	private static void InternalSetScriptingPtr(uint providerId, AudioSampleProvider provider) { }
}

// Namespace: 
[UnmanagedFunctionPointerAttribute] // RVA: 0xB2888 Offset: 0xB2888 VA: 0xB2888
public sealed class AudioSampleProvider.ConsumeSampleFramesNativeFunction : MulticastDelegate // TypeDefIndex: 1793
{
	// Methods

	// RVA: 0x5E00D0 Offset: 0x5E00D0 VA: 0x5E00D0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5E00E4 Offset: 0x5E00E4 VA: 0x5E00E4 Slot: 11
	public virtual uint Invoke(uint providerId, IntPtr interleavedSampleFrames, uint sampleFrameCount) { }

	// RVA: 0x5E036C Offset: 0x5E036C VA: 0x5E036C Slot: 12
	public virtual IAsyncResult BeginInvoke(uint providerId, IntPtr interleavedSampleFrames, uint sampleFrameCount, AsyncCallback callback, object object) { }

	// RVA: 0x5E0440 Offset: 0x5E0440 VA: 0x5E0440 Slot: 13
	public virtual uint EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class AudioSampleProvider.SampleFramesHandler : MulticastDelegate // TypeDefIndex: 1794
{
	// Methods

	// RVA: 0x5E0478 Offset: 0x5E0478 VA: 0x5E0478
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5DFCD8 Offset: 0x5DFCD8 VA: 0x5DFCD8 Slot: 11
	public virtual void Invoke(AudioSampleProvider provider, uint sampleFrameCount) { }

	// RVA: 0x5E048C Offset: 0x5E048C VA: 0x5E048C Slot: 12
	public virtual IAsyncResult BeginInvoke(AudioSampleProvider provider, uint sampleFrameCount, AsyncCallback callback, object object) { }

	// RVA: 0x5E052C Offset: 0x5E052C VA: 0x5E052C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public sealed class AudioSettings // TypeDefIndex: 1795
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xB2B18 Offset: 0xB2B18 VA: 0xB2B18
	[CompilerGeneratedAttribute] // RVA: 0xB2B18 Offset: 0xB2B18 VA: 0xB2B18
	private static AudioSettings.AudioConfigurationChangeHandler OnAudioConfigurationChanged; // 0x0

	// Methods

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2C34 Offset: 0xB2C34 VA: 0xB2C34
	// RVA: 0x5DCC4C Offset: 0x5DCC4C VA: 0x5DCC4C
	public static string GetSpatializerPluginName() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB2C44 Offset: 0xB2C44 VA: 0xB2C44
	// RVA: 0x5DF000 Offset: 0x5DF000 VA: 0x5DF000
	internal static void InvokeOnAudioConfigurationChanged(bool deviceWasChanged) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB2C54 Offset: 0xB2C54 VA: 0xB2C54
	// RVA: 0x5DF29C Offset: 0x5DF29C VA: 0x5DF29C
	internal static void InvokeOnAudioManagerUpdate() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB2C64 Offset: 0xB2C64 VA: 0xB2C64
	// RVA: 0x5DF314 Offset: 0x5DF314 VA: 0x5DF314
	internal static void InvokeOnAudioSourcePlay(AudioSource source) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2C74 Offset: 0xB2C74 VA: 0xB2C74
	// RVA: 0x5DD39C Offset: 0x5DD39C VA: 0x5DD39C
	internal static string GetAmbisonicDecoderPluginName() { }
}

// Namespace: 
public sealed class AudioSettings.AudioConfigurationChangeHandler : MulticastDelegate // TypeDefIndex: 1796
{
	// Methods

	// RVA: 0x5DF5EC Offset: 0x5DF5EC VA: 0x5DF5EC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5DF078 Offset: 0x5DF078 VA: 0x5DF078 Slot: 11
	public virtual void Invoke(bool deviceWasChanged) { }

	// RVA: 0x5DF600 Offset: 0x5DF600 VA: 0x5DF600 Slot: 12
	public virtual IAsyncResult BeginInvoke(bool deviceWasChanged, AsyncCallback callback, object object) { }

	// RVA: 0x5DF69C Offset: 0x5DF69C VA: 0x5DF69C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public sealed class AudioClip : Object // TypeDefIndex: 1797
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xB2B4C Offset: 0xB2B4C VA: 0xB2B4C
	[CompilerGeneratedAttribute] // RVA: 0xB2B4C Offset: 0xB2B4C VA: 0xB2B4C
	private AudioClip.PCMReaderCallback m_PCMReaderCallback; // 0xC
	[DebuggerBrowsableAttribute] // RVA: 0xB2B80 Offset: 0xB2B80 VA: 0xB2B80
	[CompilerGeneratedAttribute] // RVA: 0xB2B80 Offset: 0xB2B80 VA: 0xB2B80
	private AudioClip.PCMSetPositionCallback m_PCMSetPositionCallback; // 0x10

	// Properties
	public bool ambisonic { get; }

	// Methods

	// RVA: 0x5DBBFC Offset: 0x5DBBFC VA: 0x5DBBFC
	private void .ctor() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2C84 Offset: 0xB2C84 VA: 0xB2C84
	// RVA: 0x5DBC8C Offset: 0x5DBC8C VA: 0x5DBC8C
	public bool get_ambisonic() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB2C94 Offset: 0xB2C94 VA: 0xB2C94
	// RVA: 0x5DBD1C Offset: 0x5DBD1C VA: 0x5DBD1C
	private void InvokePCMReaderCallback_Internal(float[] data) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB2CA4 Offset: 0xB2CA4 VA: 0xB2CA4
	// RVA: 0x5DC0EC Offset: 0x5DC0EC VA: 0x5DC0EC
	private void InvokePCMSetPositionCallback_Internal(int position) { }
}

// Namespace: 
public sealed class AudioClip.PCMReaderCallback : MulticastDelegate // TypeDefIndex: 1798
{
	// Methods

	// RVA: 0x5DC324 Offset: 0x5DC324 VA: 0x5DC324
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5DBD30 Offset: 0x5DBD30 VA: 0x5DBD30 Slot: 11
	public virtual void Invoke(float[] data) { }

	// RVA: 0x5DC338 Offset: 0x5DC338 VA: 0x5DC338 Slot: 12
	public virtual IAsyncResult BeginInvoke(float[] data, AsyncCallback callback, object object) { }

	// RVA: 0x5DC364 Offset: 0x5DC364 VA: 0x5DC364 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class AudioClip.PCMSetPositionCallback : MulticastDelegate // TypeDefIndex: 1799
{
	// Methods

	// RVA: 0x5DC370 Offset: 0x5DC370 VA: 0x5DC370
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5DC100 Offset: 0x5DC100 VA: 0x5DC100 Slot: 11
	public virtual void Invoke(int position) { }

	// RVA: 0x5DC384 Offset: 0x5DC384 VA: 0x5DC384 Slot: 12
	public virtual IAsyncResult BeginInvoke(int position, AsyncCallback callback, object object) { }

	// RVA: 0x5DC420 Offset: 0x5DC420 VA: 0x5DC420 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public class AudioBehaviour : Behaviour // TypeDefIndex: 1800
{}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xB289C Offset: 0xB289C VA: 0xB289C
public sealed class AudioListener : AudioBehaviour // TypeDefIndex: 1801
{
	// Fields
	internal AudioListenerExtension spatializerExtension; // 0xC

	// Methods

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2CB4 Offset: 0xB2CB4 VA: 0xB2CB4
	// RVA: 0x5DDF10 Offset: 0x5DDF10 VA: 0x5DDF10
	internal int GetNumExtensionProperties() { }

	// RVA: 0x5DDE40 Offset: 0x5DDE40 VA: 0x5DDE40
	internal PropertyName ReadExtensionName(int listenerIndex) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2CC4 Offset: 0xB2CC4 VA: 0xB2CC4
	// RVA: 0x5DEE58 Offset: 0x5DEE58 VA: 0x5DEE58
	private static void INTERNAL_CALL_ReadExtensionName(AudioListener self, int listenerIndex, out PropertyName value) { }

	// RVA: 0x5DDE68 Offset: 0x5DDE68 VA: 0x5DDE68
	internal PropertyName ReadExtensionPropertyName(int listenerIndex) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2CD4 Offset: 0xB2CD4 VA: 0xB2CD4
	// RVA: 0x5DEEE0 Offset: 0x5DEEE0 VA: 0x5DEEE0
	private static void INTERNAL_CALL_ReadExtensionPropertyName(AudioListener self, int listenerIndex, out PropertyName value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2CE4 Offset: 0xB2CE4 VA: 0xB2CE4
	// RVA: 0x5DDE90 Offset: 0x5DDE90 VA: 0x5DDE90
	internal float ReadExtensionPropertyValue(int listenerIndex) { }

	// RVA: 0x5DDFB0 Offset: 0x5DDFB0 VA: 0x5DDFB0
	internal void ClearExtensionProperties(PropertyName extensionName) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2CF4 Offset: 0xB2CF4 VA: 0xB2CF4
	// RVA: 0x5DEF68 Offset: 0x5DEF68 VA: 0x5DEF68
	private static void INTERNAL_CALL_ClearExtensionProperties(AudioListener self, ref PropertyName extensionName) { }

	// RVA: 0x5DDA80 Offset: 0x5DDA80 VA: 0x5DDA80
	internal AudioListenerExtension AddExtension(Type extensionType) { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xB2914 Offset: 0xB2914 VA: 0xB2914
public sealed class AudioSource : AudioBehaviour // TypeDefIndex: 1802
{
	// Fields
	internal AudioSourceExtension spatializerExtension; // 0xC
	internal AudioSourceExtension ambisonicExtension; // 0x10

	// Properties
	[ThreadAndSerializationSafeAttribute] // RVA: 0xB2DD4 Offset: 0xB2DD4 VA: 0xB2DD4
	public AudioClip clip { get; }
	public bool isPlaying { get; }
	internal bool spatializeInternal { get; }
	public bool spatialize { get; }

	// Methods

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2D04 Offset: 0xB2D04 VA: 0xB2D04
	// RVA: 0x5DF560 Offset: 0x5DF560 VA: 0x5DF560
	public AudioClip get_clip() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2D14 Offset: 0xB2D14 VA: 0xB2D14
	// RVA: 0x5DF6A8 Offset: 0x5DF6A8 VA: 0x5DF6A8
	public void Play(ulong delay) { }

	[ExcludeFromDocsAttribute] // RVA: 0xB2D24 Offset: 0xB2D24 VA: 0xB2D24
	// RVA: 0x5DF750 Offset: 0x5DF750 VA: 0x5DF750
	public void Play() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2D34 Offset: 0xB2D34 VA: 0xB2D34
	// RVA: 0x5DEB58 Offset: 0x5DEB58 VA: 0x5DEB58
	public bool get_isPlaying() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2D44 Offset: 0xB2D44 VA: 0xB2D44
	// RVA: 0x5DF770 Offset: 0x5DF770 VA: 0x5DF770
	internal bool get_spatializeInternal() { }

	// RVA: 0x5DCACC Offset: 0x5DCACC VA: 0x5DCACC
	public bool get_spatialize() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2D54 Offset: 0xB2D54 VA: 0xB2D54
	// RVA: 0x5DD610 Offset: 0x5DD610 VA: 0x5DD610
	internal int GetNumExtensionProperties() { }

	// RVA: 0x5DD540 Offset: 0x5DD540 VA: 0x5DD540
	internal PropertyName ReadExtensionName(int sourceIndex) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2D64 Offset: 0xB2D64 VA: 0xB2D64
	// RVA: 0x5DF80C Offset: 0x5DF80C VA: 0x5DF80C
	private static void INTERNAL_CALL_ReadExtensionName(AudioSource self, int sourceIndex, out PropertyName value) { }

	// RVA: 0x5DD568 Offset: 0x5DD568 VA: 0x5DD568
	internal PropertyName ReadExtensionPropertyName(int sourceIndex) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2D74 Offset: 0xB2D74 VA: 0xB2D74
	// RVA: 0x5DF894 Offset: 0x5DF894 VA: 0x5DF894
	private static void INTERNAL_CALL_ReadExtensionPropertyName(AudioSource self, int sourceIndex, out PropertyName value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2D84 Offset: 0xB2D84 VA: 0xB2D84
	// RVA: 0x5DD590 Offset: 0x5DD590 VA: 0x5DD590
	internal float ReadExtensionPropertyValue(int sourceIndex) { }

	// RVA: 0x5DD6B0 Offset: 0x5DD6B0 VA: 0x5DD6B0
	internal void ClearExtensionProperties(PropertyName extensionName) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xB2D94 Offset: 0xB2D94 VA: 0xB2D94
	// RVA: 0x5DF91C Offset: 0x5DF91C VA: 0x5DF91C
	private static void INTERNAL_CALL_ClearExtensionProperties(AudioSource self, ref PropertyName extensionName) { }

	// RVA: 0x5DCCE8 Offset: 0x5DCCE8 VA: 0x5DCCE8
	internal AudioSourceExtension AddSpatializerExtension(Type extensionType) { }

	// RVA: 0x5DD43C Offset: 0x5DD43C VA: 0x5DD43C
	internal AudioSourceExtension AddAmbisonicExtension(Type extensionType) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1803
{}

// Namespace: UnityEngine
[StaticAccessorAttribute] // RVA: 0xB40D0 Offset: 0xB40D0 VA: 0xB40D0
[NativeHeaderAttribute] // RVA: 0xB40D0 Offset: 0xB40D0 VA: 0xB40D0
public sealed class Event // TypeDefIndex: 1804
{
	// Fields
	internal IntPtr m_Ptr; // 0x8
	private static Event s_Current; // 0x0
	private static Event s_MasterEvent; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xB474C Offset: 0xB474C VA: 0xB474C
	private static Dictionary<string, int> <>f__switch$map0; // 0x8

	// Properties
	[NativePropertyAttribute] // RVA: 0xB5F94 Offset: 0xB5F94 VA: 0xB5F94
	public EventType rawType { get; }
	[NativePropertyAttribute] // RVA: 0xB5FDC Offset: 0xB5FDC VA: 0xB5FDC
	public Vector2 mousePosition { get; }
	[NativePropertyAttribute] // RVA: 0xB602C Offset: 0xB602C VA: 0xB602C
	public EventModifiers modifiers { get; }
	[NativePropertyAttribute] // RVA: 0xB6078 Offset: 0xB6078 VA: 0xB6078
	public char character { get; }
	[NativePropertyAttribute] // RVA: 0xB60C4 Offset: 0xB60C4 VA: 0xB60C4
	public KeyCode keyCode { get; }
	[NativePropertyAttribute] // RVA: 0xB610C Offset: 0xB610C VA: 0xB610C
	public int displayIndex { set; }
	public EventType type { get; }
	public string commandName { get; }
	public static Event current { get; }
	public bool isKey { get; }
	public bool isMouse { get; }

	// Methods

	// RVA: 0x5AAEA0 Offset: 0x5AAEA0 VA: 0x5AAEA0
	public void .ctor() { }

	// RVA: 0x5AAF60 Offset: 0x5AAF60 VA: 0x5AAF60
	public void .ctor(int displayIndex) { }

	// RVA: 0x5AAF88 Offset: 0x5AAF88 VA: 0x5AAF88
	public EventType get_rawType() { }

	// RVA: 0x5AB014 Offset: 0x5AB014 VA: 0x5AB014
	public Vector2 get_mousePosition() { }

	// RVA: 0x5AB0D0 Offset: 0x5AB0D0 VA: 0x5AB0D0
	public EventModifiers get_modifiers() { }

	// RVA: 0x5AB15C Offset: 0x5AB15C VA: 0x5AB15C
	public char get_character() { }

	// RVA: 0x5AB1E8 Offset: 0x5AB1E8 VA: 0x5AB1E8
	public KeyCode get_keyCode() { }

	// RVA: 0x5AB274 Offset: 0x5AB274 VA: 0x5AB274
	public void set_displayIndex(int value) { }

	[FreeFunctionAttribute] // RVA: 0xB5490 Offset: 0xB5490 VA: 0xB5490
	// RVA: 0x5AB318 Offset: 0x5AB318 VA: 0x5AB318
	public EventType get_type() { }

	[FreeFunctionAttribute] // RVA: 0xB54E0 Offset: 0xB54E0 VA: 0xB54E0
	// RVA: 0x5AB3A0 Offset: 0x5AB3A0 VA: 0x5AB3A0
	public string get_commandName() { }

	[FreeFunctionAttribute] // RVA: 0xB5538 Offset: 0xB5538 VA: 0xB5538
	// RVA: 0x5AAEC4 Offset: 0x5AAEC4 VA: 0x5AAEC4
	private static IntPtr Internal_Create(int displayIndex) { }

	[FreeFunctionAttribute] // RVA: 0xB5590 Offset: 0xB5590 VA: 0xB5590
	// RVA: 0x5AB430 Offset: 0x5AB430 VA: 0x5AB430
	private static void Internal_Destroy(IntPtr ptr) { }

	// RVA: 0x5AB4CC Offset: 0x5AB4CC VA: 0x5AB4CC
	public static bool PopEvent(Event outEvent) { }

	// RVA: 0x5AB564 Offset: 0x5AB564 VA: 0x5AB564
	private static void Internal_SetNativeEvent(IntPtr ptr) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB55E8 Offset: 0xB55E8 VA: 0xB55E8
	// RVA: 0x5AB608 Offset: 0x5AB608 VA: 0x5AB608
	internal static void Internal_MakeMasterEventCurrent(int displayIndex) { }

	// RVA: 0x5AB710 Offset: 0x5AB710 VA: 0x5AB710 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x5AB7D8 Offset: 0x5AB7D8 VA: 0x5AB7D8
	public static Event get_current() { }

	// RVA: 0x5AB83C Offset: 0x5AB83C VA: 0x5AB83C
	public bool get_isKey() { }

	// RVA: 0x5AB85C Offset: 0x5AB85C VA: 0x5AB85C
	public bool get_isMouse() { }

	// RVA: 0x5AB88C Offset: 0x5AB88C VA: 0x5AB88C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x5AB940 Offset: 0x5AB940 VA: 0x5AB940 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x5ABBC4 Offset: 0x5ABBC4 VA: 0x5ABBC4 Slot: 3
	public override string ToString() { }

	// RVA: 0x5AB050 Offset: 0x5AB050 VA: 0x5AB050
	private void get_mousePosition_Injected(out Vector2 ret) { }
}

// Namespace: UnityEngine
public enum EventType // TypeDefIndex: 1805
{
	// Fields
	public int value__; // 0x0
	public const EventType MouseDown = 0;
	public const EventType MouseUp = 1;
	public const EventType MouseMove = 2;
	public const EventType MouseDrag = 3;
	public const EventType KeyDown = 4;
	public const EventType KeyUp = 5;
	public const EventType ScrollWheel = 6;
	public const EventType Repaint = 7;
	public const EventType Layout = 8;
	public const EventType DragUpdated = 9;
	public const EventType DragPerform = 10;
	public const EventType DragExited = 15;
	public const EventType Ignore = 11;
	public const EventType Used = 12;
	public const EventType ValidateCommand = 13;
	public const EventType ExecuteCommand = 14;
	public const EventType ContextClick = 16;
	public const EventType MouseEnterWindow = 20;
	public const EventType MouseLeaveWindow = 21;
	[ObsoleteAttribute] // RVA: 0xB475C Offset: 0xB475C VA: 0xB475C
	[EditorBrowsableAttribute] // RVA: 0xB475C Offset: 0xB475C VA: 0xB475C
	public const EventType mouseDown = 0;
	[ObsoleteAttribute] // RVA: 0xB47DC Offset: 0xB47DC VA: 0xB47DC
	[EditorBrowsableAttribute] // RVA: 0xB47DC Offset: 0xB47DC VA: 0xB47DC
	public const EventType mouseUp = 1;
	[ObsoleteAttribute] // RVA: 0xB4858 Offset: 0xB4858 VA: 0xB4858
	[EditorBrowsableAttribute] // RVA: 0xB4858 Offset: 0xB4858 VA: 0xB4858
	public const EventType mouseMove = 2;
	[ObsoleteAttribute] // RVA: 0xB48D8 Offset: 0xB48D8 VA: 0xB48D8
	[EditorBrowsableAttribute] // RVA: 0xB48D8 Offset: 0xB48D8 VA: 0xB48D8
	public const EventType mouseDrag = 3;
	[EditorBrowsableAttribute] // RVA: 0xB4958 Offset: 0xB4958 VA: 0xB4958
	[ObsoleteAttribute] // RVA: 0xB4958 Offset: 0xB4958 VA: 0xB4958
	public const EventType keyDown = 4;
	[ObsoleteAttribute] // RVA: 0xB49D4 Offset: 0xB49D4 VA: 0xB49D4
	[EditorBrowsableAttribute] // RVA: 0xB49D4 Offset: 0xB49D4 VA: 0xB49D4
	public const EventType keyUp = 5;
	[ObsoleteAttribute] // RVA: 0xB4A4C Offset: 0xB4A4C VA: 0xB4A4C
	[EditorBrowsableAttribute] // RVA: 0xB4A4C Offset: 0xB4A4C VA: 0xB4A4C
	public const EventType scrollWheel = 6;
	[ObsoleteAttribute] // RVA: 0xB4AD0 Offset: 0xB4AD0 VA: 0xB4AD0
	[EditorBrowsableAttribute] // RVA: 0xB4AD0 Offset: 0xB4AD0 VA: 0xB4AD0
	public const EventType repaint = 7;
	[EditorBrowsableAttribute] // RVA: 0xB4B4C Offset: 0xB4B4C VA: 0xB4B4C
	[ObsoleteAttribute] // RVA: 0xB4B4C Offset: 0xB4B4C VA: 0xB4B4C
	public const EventType layout = 8;
	[ObsoleteAttribute] // RVA: 0xB4BC4 Offset: 0xB4BC4 VA: 0xB4BC4
	[EditorBrowsableAttribute] // RVA: 0xB4BC4 Offset: 0xB4BC4 VA: 0xB4BC4
	public const EventType dragUpdated = 9;
	[ObsoleteAttribute] // RVA: 0xB4C48 Offset: 0xB4C48 VA: 0xB4C48
	[EditorBrowsableAttribute] // RVA: 0xB4C48 Offset: 0xB4C48 VA: 0xB4C48
	public const EventType dragPerform = 10;
	[EditorBrowsableAttribute] // RVA: 0xB4CCC Offset: 0xB4CCC VA: 0xB4CCC
	[ObsoleteAttribute] // RVA: 0xB4CCC Offset: 0xB4CCC VA: 0xB4CCC
	public const EventType ignore = 11;
	[EditorBrowsableAttribute] // RVA: 0xB4D44 Offset: 0xB4D44 VA: 0xB4D44
	[ObsoleteAttribute] // RVA: 0xB4D44 Offset: 0xB4D44 VA: 0xB4D44
	public const EventType used = 12;
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0xB4150 Offset: 0xB4150 VA: 0xB4150
public enum EventModifiers // TypeDefIndex: 1806
{
	// Fields
	public int value__; // 0x0
	public const EventModifiers None = 0;
	public const EventModifiers Shift = 1;
	public const EventModifiers Control = 2;
	public const EventModifiers Alt = 4;
	public const EventModifiers Command = 8;
	public const EventModifiers Numeric = 16;
	public const EventModifiers CapsLock = 32;
	public const EventModifiers FunctionKey = 64;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB4160 Offset: 0xB4160 VA: 0xB4160
[NativeHeaderAttribute] // RVA: 0xB4160 Offset: 0xB4160 VA: 0xB4160
public class GUI // TypeDefIndex: 1807
{
	// Fields
	private static int s_HotTextField; // 0x0
	private static readonly int s_BoxHash; // 0x4
	private static readonly int s_ButonHash; // 0x8
	private static readonly int s_RepeatButtonHash; // 0xC
	private static readonly int s_ToggleHash; // 0x10
	private static readonly int s_ButtonGridHash; // 0x14
	private static readonly int s_SliderHash; // 0x18
	private static readonly int s_BeginGroupHash; // 0x1C
	private static readonly int s_ScrollviewHash; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xB4DB8 Offset: 0xB4DB8 VA: 0xB4DB8
	[DebuggerBrowsableAttribute] // RVA: 0xB4DB8 Offset: 0xB4DB8 VA: 0xB4DB8
	private static DateTime <nextScrollStepTime>k__BackingField; // 0x28
	private static GUISkin s_Skin; // 0x38
	private static readonly GenericStack s_ScrollViewStates; // 0x3C

	// Properties
	public static bool changed { set; }
	internal static DateTime nextScrollStepTime { set; }
	public static GUISkin skin { get; set; }

	// Methods

	// RVA: 0x5AC588 Offset: 0x5AC588 VA: 0x5AC588
	private static void .cctor() { }

	// RVA: 0x5AC9CC Offset: 0x5AC9CC VA: 0x5AC9CC
	public static void set_changed(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xB55F8 Offset: 0xB55F8 VA: 0xB55F8
	// RVA: 0x5AC924 Offset: 0x5AC924 VA: 0x5AC924
	internal static void set_nextScrollStepTime(DateTime value) { }

	// RVA: 0x5ACA64 Offset: 0x5ACA64 VA: 0x5ACA64
	public static void set_skin(GUISkin value) { }

	// RVA: 0x5ACC80 Offset: 0x5ACC80 VA: 0x5ACC80
	public static GUISkin get_skin() { }

	// RVA: 0x5ACB90 Offset: 0x5ACB90 VA: 0x5ACB90
	internal static void DoSetSkin(GUISkin newSkin) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB5608 Offset: 0xB5608 VA: 0xB5608
	// RVA: 0x5ACE60 Offset: 0x5ACE60 VA: 0x5ACE60
	internal static void CallWindowDelegate(GUI.WindowFunction func, int id, int instanceID, GUISkin _skin, int forceRect, float width, float height, GUIStyle style) { }
}

// Namespace: 
public sealed class GUI.WindowFunction : MulticastDelegate // TypeDefIndex: 1808
{
	// Methods

	// RVA: 0x5AE20C Offset: 0x5AE20C VA: 0x5AE20C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5ADC04 Offset: 0x5ADC04 VA: 0x5ADC04 Slot: 11
	public virtual void Invoke(int id) { }

	// RVA: 0x5AE220 Offset: 0x5AE220 VA: 0x5AE220 Slot: 12
	public virtual IAsyncResult BeginInvoke(int id, AsyncCallback callback, object object) { }

	// RVA: 0x5AE2BC Offset: 0x5AE2BC VA: 0x5AE2BC Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xB41D8 Offset: 0xB41D8 VA: 0xB41D8
[NativeHeaderAttribute] // RVA: 0xB41D8 Offset: 0xB41D8 VA: 0xB41D8
[Serializable]
public class GUIContent // TypeDefIndex: 1809
{
	// Fields
	[SerializeField] // RVA: 0xB4DEC Offset: 0xB4DEC VA: 0xB4DEC
	private string m_Text; // 0x8
	[SerializeField] // RVA: 0xB4DFC Offset: 0xB4DFC VA: 0xB4DFC
	private Texture m_Image; // 0xC
	[SerializeField] // RVA: 0xB4E0C Offset: 0xB4E0C VA: 0xB4E0C
	private string m_Tooltip; // 0x10
	private static readonly GUIContent s_Text; // 0x0
	private static readonly GUIContent s_Image; // 0x4
	private static readonly GUIContent s_TextImage; // 0x8
	public static GUIContent none; // 0xC

	// Properties
	public string text { set; }
	public Texture image { set; }
	public string tooltip { set; }

	// Methods

	// RVA: 0x5AE2C8 Offset: 0x5AE2C8 VA: 0x5AE2C8
	public void .ctor() { }

	// RVA: 0x5AE374 Offset: 0x5AE374 VA: 0x5AE374
	public void .ctor(string text) { }

	// RVA: 0x5AE420 Offset: 0x5AE420 VA: 0x5AE420
	public void .ctor(string text, Texture image, string tooltip) { }

	// RVA: 0x5AE4E4 Offset: 0x5AE4E4 VA: 0x5AE4E4
	public void set_text(string value) { }

	// RVA: 0x5AE4EC Offset: 0x5AE4EC VA: 0x5AE4EC
	public void set_image(Texture value) { }

	// RVA: 0x5AE4F4 Offset: 0x5AE4F4 VA: 0x5AE4F4
	public void set_tooltip(string value) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xB5618 Offset: 0xB5618 VA: 0xB5618
	// RVA: 0x5AE4FC Offset: 0x5AE4FC VA: 0x5AE4FC
	internal static void ClearStaticCache() { }

	// RVA: 0x5AE6E0 Offset: 0x5AE6E0 VA: 0x5AE6E0
	private static void .cctor() { }
}

// Namespace: UnityEngine
public class GUILayout // TypeDefIndex: 1810
{
	// Methods

	// RVA: 0x5AD518 Offset: 0x5AD518 VA: 0x5AD518
	public static GUILayoutOption Width(float width) { }

	// RVA: 0x5AD5C4 Offset: 0x5AD5C4 VA: 0x5AD5C4
	public static GUILayoutOption Height(float height) { }
}

// Namespace: UnityEngine
public sealed class GUILayoutOption // TypeDefIndex: 1811
{
	// Fields
	internal GUILayoutOption.Type type; // 0x8
	internal object value; // 0xC

	// Methods

	// RVA: 0x5AE7B0 Offset: 0x5AE7B0 VA: 0x5AE7B0
	internal void .ctor(GUILayoutOption.Type type, object value) { }
}

// Namespace: 
internal enum GUILayoutOption.Type // TypeDefIndex: 1812
{
	// Fields
	public int value__; // 0x0
	public const GUILayoutOption.Type fixedWidth = 0;
	public const GUILayoutOption.Type fixedHeight = 1;
	public const GUILayoutOption.Type minWidth = 2;
	public const GUILayoutOption.Type maxWidth = 3;
	public const GUILayoutOption.Type minHeight = 4;
	public const GUILayoutOption.Type maxHeight = 5;
	public const GUILayoutOption.Type stretchWidth = 6;
	public const GUILayoutOption.Type stretchHeight = 7;
	public const GUILayoutOption.Type alignStart = 8;
	public const GUILayoutOption.Type alignMiddle = 9;
	public const GUILayoutOption.Type alignEnd = 10;
	public const GUILayoutOption.Type alignJustify = 11;
	public const GUILayoutOption.Type equalSize = 12;
	public const GUILayoutOption.Type spacing = 13;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB4258 Offset: 0xB4258 VA: 0xB4258
public class GUILayoutUtility // TypeDefIndex: 1813
{
	// Fields
	private static readonly Dictionary<int, GUILayoutUtility.LayoutCache> s_StoredLayouts; // 0x0
	private static readonly Dictionary<int, GUILayoutUtility.LayoutCache> s_StoredWindows; // 0x4
	internal static GUILayoutUtility.LayoutCache current; // 0x8
	internal static readonly Rect kDummyRect; // 0xC

	// Methods

	// RVA: 0x5B332C Offset: 0x5B332C VA: 0x5B332C
	private static Rect Internal_GetWindowRect(int windowID) { }

	// RVA: 0x5B3450 Offset: 0x5B3450 VA: 0x5B3450
	private static void Internal_MoveWindow(int windowID, Rect r) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xB56A8 Offset: 0xB56A8 VA: 0xB56A8
	// RVA: 0x5AD2B0 Offset: 0x5AD2B0 VA: 0x5AD2B0
	internal static GUILayoutUtility.LayoutCache SelectIDList(int instanceID, bool isWindow) { }

	// RVA: 0x5B364C Offset: 0x5B364C VA: 0x5B364C
	internal static void Begin(int instanceID) { }

	// RVA: 0x5AD670 Offset: 0x5AD670 VA: 0x5AD670
	internal static void BeginWindow(int windowID, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x5ADE28 Offset: 0x5ADE28 VA: 0x5ADE28
	internal static void Layout() { }

	// RVA: 0x5B406C Offset: 0x5B406C VA: 0x5B406C
	internal static void LayoutFromEditorWindow() { }

	// RVA: 0x5B3A38 Offset: 0x5B3A38 VA: 0x5B3A38
	internal static void LayoutFreeGroup(GUILayoutGroup toplevel) { }

	// RVA: 0x5B3C7C Offset: 0x5B3C7C VA: 0x5B3C7C
	private static void LayoutSingleGroup(GUILayoutGroup i) { }

	// RVA: 0x5B4354 Offset: 0x5B4354 VA: 0x5B4354
	private static void .cctor() { }

	// RVA: 0x5B33D0 Offset: 0x5B33D0 VA: 0x5B33D0
	private static void Internal_GetWindowRect_Injected(int windowID, out Rect ret) { }

	// RVA: 0x5B34EC Offset: 0x5B34EC VA: 0x5B34EC
	private static void Internal_MoveWindow_Injected(int windowID, ref Rect r) { }
}

// Namespace: 
[VisibleToOtherModulesAttribute] // RVA: 0xB42B0 Offset: 0xB42B0 VA: 0xB42B0
internal sealed class GUILayoutUtility.LayoutCache // TypeDefIndex: 1814
{
	// Fields
	[VisibleToOtherModulesAttribute] // RVA: 0xB4E1C Offset: 0xB4E1C VA: 0xB4E1C
	internal GUILayoutGroup topLevel; // 0x8
	internal GenericStack layoutGroups; // 0xC
	internal GUILayoutGroup windows; // 0x10

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xB5738 Offset: 0xB5738 VA: 0xB5738
	// RVA: 0x5B356C Offset: 0x5B356C VA: 0x5B356C
	internal void .ctor() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB4340 Offset: 0xB4340 VA: 0xB4340
[Serializable]
public sealed class GUISettings // TypeDefIndex: 1815
{
	// Fields
	[SerializeField] // RVA: 0xB4EAC Offset: 0xB4EAC VA: 0xB4EAC
	private bool m_DoubleClickSelectsWord; // 0x8
	[SerializeField] // RVA: 0xB4EBC Offset: 0xB4EBC VA: 0xB4EBC
	private bool m_TripleClickSelectsLine; // 0x9
	[SerializeField] // RVA: 0xB4ECC Offset: 0xB4ECC VA: 0xB4ECC
	private Color m_CursorColor; // 0xC
	[SerializeField] // RVA: 0xB4EDC Offset: 0xB4EDC VA: 0xB4EDC
	private float m_CursorFlashSpeed; // 0x1C
	[SerializeField] // RVA: 0xB4EEC Offset: 0xB4EEC VA: 0xB4EEC
	private Color m_SelectionColor; // 0x20

	// Methods

	// RVA: 0x5B49EC Offset: 0x5B49EC VA: 0x5B49EC
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xB4374 Offset: 0xB4374 VA: 0xB4374
[ExecuteInEditMode] // RVA: 0xB4374 Offset: 0xB4374 VA: 0xB4374
[AssetFileNameExtensionAttribute] // RVA: 0xB4374 Offset: 0xB4374 VA: 0xB4374
[Serializable]
public sealed class GUISkin : ScriptableObject // TypeDefIndex: 1816
{
	// Fields
	[SerializeField] // RVA: 0xB4EFC Offset: 0xB4EFC VA: 0xB4EFC
	private Font m_Font; // 0xC
	[SerializeField] // RVA: 0xB4F0C Offset: 0xB4F0C VA: 0xB4F0C
	private GUIStyle m_box; // 0x10
	[SerializeField] // RVA: 0xB4F1C Offset: 0xB4F1C VA: 0xB4F1C
	private GUIStyle m_button; // 0x14
	[SerializeField] // RVA: 0xB4F2C Offset: 0xB4F2C VA: 0xB4F2C
	private GUIStyle m_toggle; // 0x18
	[SerializeField] // RVA: 0xB4F3C Offset: 0xB4F3C VA: 0xB4F3C
	private GUIStyle m_label; // 0x1C
	[SerializeField] // RVA: 0xB4F4C Offset: 0xB4F4C VA: 0xB4F4C
	private GUIStyle m_textField; // 0x20
	[SerializeField] // RVA: 0xB4F5C Offset: 0xB4F5C VA: 0xB4F5C
	private GUIStyle m_textArea; // 0x24
	[SerializeField] // RVA: 0xB4F6C Offset: 0xB4F6C VA: 0xB4F6C
	private GUIStyle m_window; // 0x28
	[SerializeField] // RVA: 0xB4F7C Offset: 0xB4F7C VA: 0xB4F7C
	private GUIStyle m_horizontalSlider; // 0x2C
	[SerializeField] // RVA: 0xB4F8C Offset: 0xB4F8C VA: 0xB4F8C
	private GUIStyle m_horizontalSliderThumb; // 0x30
	[SerializeField] // RVA: 0xB4F9C Offset: 0xB4F9C VA: 0xB4F9C
	private GUIStyle m_verticalSlider; // 0x34
	[SerializeField] // RVA: 0xB4FAC Offset: 0xB4FAC VA: 0xB4FAC
	private GUIStyle m_verticalSliderThumb; // 0x38
	[SerializeField] // RVA: 0xB4FBC Offset: 0xB4FBC VA: 0xB4FBC
	private GUIStyle m_horizontalScrollbar; // 0x3C
	[SerializeField] // RVA: 0xB4FCC Offset: 0xB4FCC VA: 0xB4FCC
	private GUIStyle m_horizontalScrollbarThumb; // 0x40
	[SerializeField] // RVA: 0xB4FDC Offset: 0xB4FDC VA: 0xB4FDC
	private GUIStyle m_horizontalScrollbarLeftButton; // 0x44
	[SerializeField] // RVA: 0xB4FEC Offset: 0xB4FEC VA: 0xB4FEC
	private GUIStyle m_horizontalScrollbarRightButton; // 0x48
	[SerializeField] // RVA: 0xB4FFC Offset: 0xB4FFC VA: 0xB4FFC
	private GUIStyle m_verticalScrollbar; // 0x4C
	[SerializeField] // RVA: 0xB500C Offset: 0xB500C VA: 0xB500C
	private GUIStyle m_verticalScrollbarThumb; // 0x50
	[SerializeField] // RVA: 0xB501C Offset: 0xB501C VA: 0xB501C
	private GUIStyle m_verticalScrollbarUpButton; // 0x54
	[SerializeField] // RVA: 0xB502C Offset: 0xB502C VA: 0xB502C
	private GUIStyle m_verticalScrollbarDownButton; // 0x58
	[SerializeField] // RVA: 0xB503C Offset: 0xB503C VA: 0xB503C
	private GUIStyle m_ScrollView; // 0x5C
	[SerializeField] // RVA: 0xB504C Offset: 0xB504C VA: 0xB504C
	internal GUIStyle[] m_CustomStyles; // 0x60
	[SerializeField] // RVA: 0xB505C Offset: 0xB505C VA: 0xB505C
	private GUISettings m_Settings; // 0x64
	internal static GUIStyle ms_Error; // 0x0
	private Dictionary<string, GUIStyle> m_Styles; // 0x68
	internal static GUISkin.SkinChangedDelegate m_SkinChanged; // 0x4
	internal static GUISkin current; // 0x8

	// Properties
	public Font font { get; set; }
	public GUIStyle box { get; set; }
	public GUIStyle label { get; set; }
	public GUIStyle textField { get; set; }
	public GUIStyle textArea { get; set; }
	public GUIStyle button { get; set; }
	public GUIStyle toggle { get; set; }
	public GUIStyle window { get; set; }
	public GUIStyle horizontalSlider { get; set; }
	public GUIStyle horizontalSliderThumb { get; set; }
	public GUIStyle verticalSlider { get; set; }
	public GUIStyle verticalSliderThumb { get; set; }
	public GUIStyle horizontalScrollbar { get; set; }
	public GUIStyle horizontalScrollbarThumb { get; set; }
	public GUIStyle horizontalScrollbarLeftButton { get; set; }
	public GUIStyle horizontalScrollbarRightButton { get; set; }
	public GUIStyle verticalScrollbar { get; set; }
	public GUIStyle verticalScrollbarThumb { get; set; }
	public GUIStyle verticalScrollbarUpButton { get; set; }
	public GUIStyle verticalScrollbarDownButton { get; set; }
	public GUIStyle scrollView { get; set; }
	public GUIStyle[] customStyles { get; set; }
	public GUISettings settings { get; }
	internal static GUIStyle error { get; }

	// Methods

	// RVA: 0x5B4A78 Offset: 0x5B4A78 VA: 0x5B4A78
	public void .ctor() { }

	// RVA: 0x5B4B14 Offset: 0x5B4B14 VA: 0x5B4B14
	internal void OnEnable() { }

	// RVA: 0x5B4BBC Offset: 0x5B4BBC VA: 0x5B4BBC
	internal static void CleanupRoots() { }

	// RVA: 0x5B4C2C Offset: 0x5B4C2C VA: 0x5B4C2C
	public Font get_font() { }

	// RVA: 0x5B4C34 Offset: 0x5B4C34 VA: 0x5B4C34
	public void set_font(Font value) { }

	// RVA: 0x5B4DC4 Offset: 0x5B4DC4 VA: 0x5B4DC4
	public GUIStyle get_box() { }

	// RVA: 0x5B4DCC Offset: 0x5B4DCC VA: 0x5B4DCC
	public void set_box(GUIStyle value) { }

	// RVA: 0x5B4DD4 Offset: 0x5B4DD4 VA: 0x5B4DD4
	public GUIStyle get_label() { }

	// RVA: 0x5B4DDC Offset: 0x5B4DDC VA: 0x5B4DDC
	public void set_label(GUIStyle value) { }

	// RVA: 0x5B4DE4 Offset: 0x5B4DE4 VA: 0x5B4DE4
	public GUIStyle get_textField() { }

	// RVA: 0x5B4DEC Offset: 0x5B4DEC VA: 0x5B4DEC
	public void set_textField(GUIStyle value) { }

	// RVA: 0x5B4DF4 Offset: 0x5B4DF4 VA: 0x5B4DF4
	public GUIStyle get_textArea() { }

	// RVA: 0x5B4DFC Offset: 0x5B4DFC VA: 0x5B4DFC
	public void set_textArea(GUIStyle value) { }

	// RVA: 0x5B4E04 Offset: 0x5B4E04 VA: 0x5B4E04
	public GUIStyle get_button() { }

	// RVA: 0x5B4E0C Offset: 0x5B4E0C VA: 0x5B4E0C
	public void set_button(GUIStyle value) { }

	// RVA: 0x5B4E14 Offset: 0x5B4E14 VA: 0x5B4E14
	public GUIStyle get_toggle() { }

	// RVA: 0x5B4E1C Offset: 0x5B4E1C VA: 0x5B4E1C
	public void set_toggle(GUIStyle value) { }

	// RVA: 0x5B4E24 Offset: 0x5B4E24 VA: 0x5B4E24
	public GUIStyle get_window() { }

	// RVA: 0x5B4E2C Offset: 0x5B4E2C VA: 0x5B4E2C
	public void set_window(GUIStyle value) { }

	// RVA: 0x5B4E34 Offset: 0x5B4E34 VA: 0x5B4E34
	public GUIStyle get_horizontalSlider() { }

	// RVA: 0x5B4E3C Offset: 0x5B4E3C VA: 0x5B4E3C
	public void set_horizontalSlider(GUIStyle value) { }

	// RVA: 0x5B4E44 Offset: 0x5B4E44 VA: 0x5B4E44
	public GUIStyle get_horizontalSliderThumb() { }

	// RVA: 0x5B4E4C Offset: 0x5B4E4C VA: 0x5B4E4C
	public void set_horizontalSliderThumb(GUIStyle value) { }

	// RVA: 0x5B4E54 Offset: 0x5B4E54 VA: 0x5B4E54
	public GUIStyle get_verticalSlider() { }

	// RVA: 0x5B4E5C Offset: 0x5B4E5C VA: 0x5B4E5C
	public void set_verticalSlider(GUIStyle value) { }

	// RVA: 0x5B4E64 Offset: 0x5B4E64 VA: 0x5B4E64
	public GUIStyle get_verticalSliderThumb() { }

	// RVA: 0x5B4E6C Offset: 0x5B4E6C VA: 0x5B4E6C
	public void set_verticalSliderThumb(GUIStyle value) { }

	// RVA: 0x5B4E74 Offset: 0x5B4E74 VA: 0x5B4E74
	public GUIStyle get_horizontalScrollbar() { }

	// RVA: 0x5B4E7C Offset: 0x5B4E7C VA: 0x5B4E7C
	public void set_horizontalScrollbar(GUIStyle value) { }

	// RVA: 0x5B4E84 Offset: 0x5B4E84 VA: 0x5B4E84
	public GUIStyle get_horizontalScrollbarThumb() { }

	// RVA: 0x5B4E8C Offset: 0x5B4E8C VA: 0x5B4E8C
	public void set_horizontalScrollbarThumb(GUIStyle value) { }

	// RVA: 0x5B4E94 Offset: 0x5B4E94 VA: 0x5B4E94
	public GUIStyle get_horizontalScrollbarLeftButton() { }

	// RVA: 0x5B4E9C Offset: 0x5B4E9C VA: 0x5B4E9C
	public void set_horizontalScrollbarLeftButton(GUIStyle value) { }

	// RVA: 0x5B4EA4 Offset: 0x5B4EA4 VA: 0x5B4EA4
	public GUIStyle get_horizontalScrollbarRightButton() { }

	// RVA: 0x5B4EAC Offset: 0x5B4EAC VA: 0x5B4EAC
	public void set_horizontalScrollbarRightButton(GUIStyle value) { }

	// RVA: 0x5B4EB4 Offset: 0x5B4EB4 VA: 0x5B4EB4
	public GUIStyle get_verticalScrollbar() { }

	// RVA: 0x5B4EBC Offset: 0x5B4EBC VA: 0x5B4EBC
	public void set_verticalScrollbar(GUIStyle value) { }

	// RVA: 0x5B4EC4 Offset: 0x5B4EC4 VA: 0x5B4EC4
	public GUIStyle get_verticalScrollbarThumb() { }

	// RVA: 0x5B4ECC Offset: 0x5B4ECC VA: 0x5B4ECC
	public void set_verticalScrollbarThumb(GUIStyle value) { }

	// RVA: 0x5B4ED4 Offset: 0x5B4ED4 VA: 0x5B4ED4
	public GUIStyle get_verticalScrollbarUpButton() { }

	// RVA: 0x5B4EDC Offset: 0x5B4EDC VA: 0x5B4EDC
	public void set_verticalScrollbarUpButton(GUIStyle value) { }

	// RVA: 0x5B4EE4 Offset: 0x5B4EE4 VA: 0x5B4EE4
	public GUIStyle get_verticalScrollbarDownButton() { }

	// RVA: 0x5B4EEC Offset: 0x5B4EEC VA: 0x5B4EEC
	public void set_verticalScrollbarDownButton(GUIStyle value) { }

	// RVA: 0x5B4EF4 Offset: 0x5B4EF4 VA: 0x5B4EF4
	public GUIStyle get_scrollView() { }

	// RVA: 0x5B4EFC Offset: 0x5B4EFC VA: 0x5B4EFC
	public void set_scrollView(GUIStyle value) { }

	// RVA: 0x5B4F04 Offset: 0x5B4F04 VA: 0x5B4F04
	public GUIStyle[] get_customStyles() { }

	// RVA: 0x5B4F0C Offset: 0x5B4F0C VA: 0x5B4F0C
	public void set_customStyles(GUIStyle[] value) { }

	// RVA: 0x5B4F14 Offset: 0x5B4F14 VA: 0x5B4F14
	public GUISettings get_settings() { }

	// RVA: 0x5B4F1C Offset: 0x5B4F1C VA: 0x5B4F1C
	internal static GUIStyle get_error() { }

	// RVA: 0x5B4B18 Offset: 0x5B4B18 VA: 0x5B4B18
	internal void Apply() { }

	// RVA: 0x5B5134 Offset: 0x5B5134 VA: 0x5B5134
	private void BuildStyleCache() { }

	// RVA: 0x5B60D8 Offset: 0x5B60D8 VA: 0x5B60D8
	public GUIStyle GetStyle(string styleName) { }

	// RVA: 0x5B6514 Offset: 0x5B6514 VA: 0x5B6514
	public GUIStyle FindStyle(string styleName) { }

	// RVA: 0x5ACD9C Offset: 0x5ACD9C VA: 0x5ACD9C
	internal void MakeCurrent() { }

	// RVA: 0x5B6870 Offset: 0x5B6870 VA: 0x5B6870
	public IEnumerator GetEnumerator() { }
}

// Namespace: 
internal sealed class GUISkin.SkinChangedDelegate : MulticastDelegate // TypeDefIndex: 1817
{
	// Methods

	// RVA: 0x5B6968 Offset: 0x5B6968 VA: 0x5B6968
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5B6660 Offset: 0x5B6660 VA: 0x5B6660 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x5B697C Offset: 0x5B697C VA: 0x5B697C Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x5B69A8 Offset: 0x5B69A8 VA: 0x5B69A8 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB4428 Offset: 0xB4428 VA: 0xB4428
[Serializable]
public sealed class GUIStyleState // TypeDefIndex: 1818
{
	// Fields
	internal IntPtr m_Ptr; // 0x8
	private readonly GUIStyle m_SourceStyle; // 0xC

	// Properties
	[NativePropertyAttribute] // RVA: 0xB615C Offset: 0xB615C VA: 0xB615C
	public Color textColor { set; }

	// Methods

	// RVA: 0x5B6F14 Offset: 0x5B6F14 VA: 0x5B6F14
	public void .ctor() { }

	// RVA: 0x5B6FBC Offset: 0x5B6FBC VA: 0x5B6FBC
	private void .ctor(GUIStyle sourceStyle, IntPtr source) { }

	// RVA: 0x5B60B4 Offset: 0x5B60B4 VA: 0x5B60B4
	public void set_textColor(Color value) { }

	[FreeFunctionAttribute] // RVA: 0xB57C8 Offset: 0xB57C8 VA: 0xB57C8
	// RVA: 0x5B6F34 Offset: 0x5B6F34 VA: 0x5B6F34
	private static IntPtr Init() { }

	[FreeFunctionAttribute] // RVA: 0xB5830 Offset: 0xB5830 VA: 0xB5830
	// RVA: 0x5B7064 Offset: 0x5B7064 VA: 0x5B7064
	private void Cleanup() { }

	// RVA: 0x5B6D40 Offset: 0x5B6D40 VA: 0x5B6D40
	internal static GUIStyleState GetGUIStyleState(GUIStyle sourceStyle, IntPtr source) { }

	// RVA: 0x5B70F4 Offset: 0x5B70F4 VA: 0x5B70F4 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x5B6FE4 Offset: 0x5B6FE4 VA: 0x5B6FE4
	private void set_textColor_Injected(ref Color value) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB445C Offset: 0xB445C VA: 0xB445C
[RequiredByNativeCodeAttribute] // RVA: 0xB445C Offset: 0xB445C VA: 0xB445C
[NativeHeaderAttribute] // RVA: 0xB445C Offset: 0xB445C VA: 0xB445C
[Serializable]
public sealed class GUIStyle // TypeDefIndex: 1819
{
	// Fields
	internal IntPtr m_Ptr; // 0x8
	private GUIStyleState m_Normal; // 0xC
	private GUIStyleState m_Hover; // 0x10
	private GUIStyleState m_Active; // 0x14
	private GUIStyleState m_Focused; // 0x18
	private GUIStyleState m_OnNormal; // 0x1C
	private GUIStyleState m_OnHover; // 0x20
	private GUIStyleState m_OnActive; // 0x24
	private GUIStyleState m_OnFocused; // 0x28
	private RectOffset m_Border; // 0x2C
	private RectOffset m_Padding; // 0x30
	private RectOffset m_Margin; // 0x34
	private RectOffset m_Overflow; // 0x38
	internal static bool showKeyboardFocus; // 0x0
	private static GUIStyle s_None; // 0x4

	// Properties
	[NativePropertyAttribute] // RVA: 0xB61A8 Offset: 0xB61A8 VA: 0xB61A8
	public string name { get; set; }
	[NativePropertyAttribute] // RVA: 0xB61F0 Offset: 0xB61F0 VA: 0xB61F0
	public float fixedWidth { get; }
	[NativePropertyAttribute] // RVA: 0xB6240 Offset: 0xB6240 VA: 0xB6240
	public float fixedHeight { get; }
	[NativePropertyAttribute] // RVA: 0xB6290 Offset: 0xB6290 VA: 0xB6290
	public bool stretchWidth { get; }
	[NativePropertyAttribute] // RVA: 0xB62E0 Offset: 0xB62E0 VA: 0xB62E0
	public bool stretchHeight { get; set; }
	public GUIStyleState normal { get; }
	public RectOffset margin { get; }
	public RectOffset padding { get; }
	public static GUIStyle none { get; }

	// Methods

	// RVA: 0x5B5004 Offset: 0x5B5004 VA: 0x5B5004
	public void .ctor() { }

	// RVA: 0x5AFB90 Offset: 0x5AFB90 VA: 0x5AFB90
	public string get_name() { }

	// RVA: 0x5B5094 Offset: 0x5B5094 VA: 0x5B5094
	public void set_name(string value) { }

	// RVA: 0x5AECD4 Offset: 0x5AECD4 VA: 0x5AECD4
	public float get_fixedWidth() { }

	// RVA: 0x5AEDF8 Offset: 0x5AEDF8 VA: 0x5AEDF8
	public float get_fixedHeight() { }

	// RVA: 0x5AED64 Offset: 0x5AED64 VA: 0x5AED64
	public bool get_stretchWidth() { }

	// RVA: 0x5AEE88 Offset: 0x5AEE88 VA: 0x5AEE88
	public bool get_stretchHeight() { }

	// RVA: 0x5B5FD4 Offset: 0x5B5FD4 VA: 0x5B5FD4
	public void set_stretchHeight(bool value) { }

	[FreeFunctionAttribute] // RVA: 0xB58A8 Offset: 0xB58A8 VA: 0xB58A8
	// RVA: 0x5B69B4 Offset: 0x5B69B4 VA: 0x5B69B4
	private static IntPtr Internal_Create(GUIStyle self) { }

	[FreeFunctionAttribute] // RVA: 0xB5914 Offset: 0xB5914 VA: 0xB5914
	// RVA: 0x5B6A58 Offset: 0x5B6A58 VA: 0x5B6A58
	private static void Internal_Destroy(IntPtr self) { }

	[FreeFunctionAttribute] // RVA: 0xB5980 Offset: 0xB5980 VA: 0xB5980
	// RVA: 0x5B6AF8 Offset: 0x5B6AF8 VA: 0x5B6AF8
	private IntPtr GetStyleStatePtr(int idx) { }

	[FreeFunctionAttribute] // RVA: 0xB59FC Offset: 0xB59FC VA: 0xB59FC
	// RVA: 0x5B6BA0 Offset: 0x5B6BA0 VA: 0x5B6BA0
	private IntPtr GetRectOffsetPtr(int idx) { }

	[FreeFunctionAttribute] // RVA: 0xB5A68 Offset: 0xB5A68 VA: 0xB5A68
	// RVA: 0x5B4D24 Offset: 0x5B4D24 VA: 0x5B4D24
	internal static void SetDefaultFont(Font font) { }

	// RVA: 0x5B6C48 Offset: 0x5B6C48 VA: 0x5B6C48 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x5B607C Offset: 0x5B607C VA: 0x5B607C
	public GUIStyleState get_normal() { }

	// RVA: 0x5AE9A4 Offset: 0x5AE9A4 VA: 0x5AE9A4
	public RectOffset get_margin() { }

	// RVA: 0x5B09D8 Offset: 0x5B09D8 VA: 0x5B09D8
	public RectOffset get_padding() { }

	[CompilerGeneratedAttribute] // RVA: 0xB5ABC Offset: 0xB5ABC VA: 0xB5ABC
	// RVA: 0x5ADB1C Offset: 0x5ADB1C VA: 0x5ADB1C
	public static GUIStyle get_none() { }

	// RVA: 0x5B6DBC Offset: 0x5B6DBC VA: 0x5B6DBC Slot: 3
	public override string ToString() { }

	// RVA: 0x5B6EAC Offset: 0x5B6EAC VA: 0x5B6EAC
	private static void .cctor() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xB44DC Offset: 0xB44DC VA: 0xB44DC
public class GUITargetAttribute : Attribute // TypeDefIndex: 1820
{
	// Fields
	internal int displayMask; // 0x8

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xB5ACC Offset: 0xB5ACC VA: 0xB5ACC
	// RVA: 0x5B71AC Offset: 0x5B71AC VA: 0x5B71AC
	private static int GetGUITargetAttrValue(Type klass, string methodName) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB44F0 Offset: 0xB44F0 VA: 0xB44F0
[NativeHeaderAttribute] // RVA: 0xB44F0 Offset: 0xB44F0 VA: 0xB44F0
[NativeHeaderAttribute] // RVA: 0xB44F0 Offset: 0xB44F0 VA: 0xB44F0
[NativeHeaderAttribute] // RVA: 0xB44F0 Offset: 0xB44F0 VA: 0xB44F0
[NativeHeaderAttribute] // RVA: 0xB44F0 Offset: 0xB44F0 VA: 0xB44F0
public class GUIUtility // TypeDefIndex: 1821
{
	// Fields
	[VisibleToOtherModulesAttribute] // RVA: 0xB506C Offset: 0xB506C VA: 0xB506C
	internal static int s_SkinMode; // 0x0
	[VisibleToOtherModulesAttribute] // RVA: 0xB50FC Offset: 0xB50FC VA: 0xB50FC
	internal static int s_OriginalID; // 0x4
	[VisibleToOtherModulesAttribute] // RVA: 0xB518C Offset: 0xB518C VA: 0xB518C
	internal static Action takeCapture; // 0x8
	[VisibleToOtherModulesAttribute] // RVA: 0xB521C Offset: 0xB521C VA: 0xB521C
	internal static Action releaseCapture; // 0xC
	[VisibleToOtherModulesAttribute] // RVA: 0xB52AC Offset: 0xB52AC VA: 0xB52AC
	internal static Func<int, IntPtr, bool> processEvent; // 0x10
	[VisibleToOtherModulesAttribute] // RVA: 0xB533C Offset: 0xB533C VA: 0xB533C
	internal static Func<Exception, bool> endContainerGUIFromException; // 0x14
	[VisibleToOtherModulesAttribute] // RVA: 0xB53CC Offset: 0xB53CC VA: 0xB53CC
	internal static Action enabledStateChanged; // 0x18
	[DebuggerBrowsableAttribute] // RVA: 0xB545C Offset: 0xB545C VA: 0xB545C
	[CompilerGeneratedAttribute] // RVA: 0xB545C Offset: 0xB545C VA: 0xB545C
	private static bool <guiIsExiting>k__BackingField; // 0x1C

	// Properties
	[NativePropertyAttribute] // RVA: 0xB6330 Offset: 0xB6330 VA: 0xB6330
	internal static float pixelsPerPoint { get; }
	[NativePropertyAttribute] // RVA: 0xB6390 Offset: 0xB6390 VA: 0xB6390
	internal static int guiDepth { get; }
	public static string systemCopyBuffer { get; set; }
	internal static bool guiIsExiting { set; }

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xB5ADC Offset: 0xB5ADC VA: 0xB5ADC
	// RVA: 0x5B39A4 Offset: 0x5B39A4 VA: 0x5B39A4
	internal static float get_pixelsPerPoint() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xB5B6C Offset: 0xB5B6C VA: 0xB5B6C
	// RVA: 0x5B7380 Offset: 0x5B7380 VA: 0x5B7380
	internal static int get_guiDepth() { }

	[FreeFunctionAttribute] // RVA: 0xB5BFC Offset: 0xB5BFC VA: 0xB5BFC
	// RVA: 0x5B740C Offset: 0x5B740C VA: 0x5B740C
	public static string get_systemCopyBuffer() { }

	[FreeFunctionAttribute] // RVA: 0xB5C38 Offset: 0xB5C38 VA: 0xB5C38
	// RVA: 0x5B74A0 Offset: 0x5B74A0 VA: 0x5B74A0
	public static void set_systemCopyBuffer(string value) { }

	// RVA: 0x5B7544 Offset: 0x5B7544 VA: 0x5B7544
	private static object Internal_GetDefaultSkin(int skinMode) { }

	// RVA: 0x5B75EC Offset: 0x5B75EC VA: 0x5B75EC
	private static void Internal_ExitGUI() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB5C74 Offset: 0xB5C74 VA: 0xB5C74
	// RVA: 0x5B767C Offset: 0x5B767C VA: 0x5B767C
	private static void MarkGUIChanged() { }

	[CompilerGeneratedAttribute] // RVA: 0xB5C84 Offset: 0xB5C84 VA: 0xB5C84
	// RVA: 0x5B76EC Offset: 0x5B76EC VA: 0x5B76EC
	internal static void set_guiIsExiting(bool value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB5C94 Offset: 0xB5C94 VA: 0xB5C94
	// RVA: 0x5B7750 Offset: 0x5B7750 VA: 0x5B7750
	internal static void TakeCapture() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB5CA4 Offset: 0xB5CA4 VA: 0xB5CA4
	// RVA: 0x5B77C0 Offset: 0x5B77C0 VA: 0x5B77C0
	internal static void RemoveCapture() { }

	// RVA: 0x5ACD10 Offset: 0x5ACD10 VA: 0x5ACD10
	internal static GUISkin GetDefaultSkin() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB5CB4 Offset: 0xB5CB4 VA: 0xB5CB4
	// RVA: 0x5B7830 Offset: 0x5B7830 VA: 0x5B7830
	internal static bool ProcessEvent(int instanceID, IntPtr nativeEventPtr) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB5CC4 Offset: 0xB5CC4 VA: 0xB5CC4
	// RVA: 0x5B78C4 Offset: 0x5B78C4 VA: 0x5B78C4
	internal static void BeginGUI(int skinMode, int instanceID, int useGUILayout) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB5CD4 Offset: 0xB5CD4 VA: 0xB5CD4
	// RVA: 0x5B7A58 Offset: 0x5B7A58 VA: 0x5B7A58
	internal static void EndGUI(int layoutType) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB5CE4 Offset: 0xB5CE4 VA: 0xB5CE4
	// RVA: 0x5B7C5C Offset: 0x5B7C5C VA: 0x5B7C5C
	internal static bool EndGUIFromException(Exception exception) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB5CF4 Offset: 0xB5CF4 VA: 0xB5CF4
	// RVA: 0x5B7C7C Offset: 0x5B7C7C VA: 0x5B7C7C
	internal static bool EndContainerGUIFromException(Exception exception) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xB5D04 Offset: 0xB5D04 VA: 0xB5D04
	// RVA: 0x5B797C Offset: 0x5B797C VA: 0x5B797C
	internal static void ResetGlobalState() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xB5D94 Offset: 0xB5D94 VA: 0xB5D94
	// RVA: 0x5B7D08 Offset: 0x5B7D08 VA: 0x5B7D08
	internal static bool IsExitGUIException(Exception exception) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xB5E24 Offset: 0xB5E24 VA: 0xB5E24
	// RVA: 0x5B7C78 Offset: 0x5B7C78 VA: 0x5B7C78
	internal static bool ShouldRethrowException(Exception exception) { }

	// RVA: 0x5ACAE8 Offset: 0x5ACAE8 VA: 0x5ACAE8
	internal static void CheckOnGUI() { }
}

// Namespace: UnityEngine
public sealed class ExitGUIException : Exception // TypeDefIndex: 1822
{}

// Namespace: UnityEngine
[VisibleToOtherModulesAttribute] // RVA: 0xB462C Offset: 0xB462C VA: 0xB462C
internal class GUILayoutEntry // TypeDefIndex: 1823
{
	// Fields
	public float minWidth; // 0x8
	public float maxWidth; // 0xC
	public float minHeight; // 0x10
	public float maxHeight; // 0x14
	public Rect rect; // 0x18
	public int stretchWidth; // 0x28
	public int stretchHeight; // 0x2C
	public bool consideredForMargin; // 0x30
	private GUIStyle m_Style; // 0x34
	internal static Rect kDummyRect; // 0x0
	protected static int indent; // 0x10

	// Properties
	public GUIStyle style { get; set; }
	public virtual int marginLeft { get; }
	public virtual int marginRight { get; }
	public virtual int marginTop { get; }
	public virtual int marginBottom { get; }
	public int marginHorizontal { get; }
	public int marginVertical { get; }

	// Methods

	// RVA: 0x5AE7D8 Offset: 0x5AE7D8 VA: 0x5AE7D8
	public void .ctor(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style) { }

	// RVA: 0x5AE954 Offset: 0x5AE954 VA: 0x5AE954
	public GUIStyle get_style() { }

	// RVA: 0x5AE940 Offset: 0x5AE940 VA: 0x5AE940
	public void set_style(GUIStyle value) { }

	[CompilerGeneratedAttribute] // RVA: 0xB5EB4 Offset: 0xB5EB4 VA: 0xB5EB4
	// RVA: 0x5AE95C Offset: 0x5AE95C VA: 0x5AE95C Slot: 4
	public virtual int get_marginLeft() { }

	[CompilerGeneratedAttribute] // RVA: 0xB5EC4 Offset: 0xB5EC4 VA: 0xB5EC4
	// RVA: 0x5AEA3C Offset: 0x5AEA3C VA: 0x5AEA3C Slot: 5
	public virtual int get_marginRight() { }

	[CompilerGeneratedAttribute] // RVA: 0xB5ED4 Offset: 0xB5ED4 VA: 0xB5ED4
	// RVA: 0x5AEA84 Offset: 0x5AEA84 VA: 0x5AEA84 Slot: 6
	public virtual int get_marginTop() { }

	[CompilerGeneratedAttribute] // RVA: 0xB5EE4 Offset: 0xB5EE4 VA: 0xB5EE4
	// RVA: 0x5AEACC Offset: 0x5AEACC VA: 0x5AEACC Slot: 7
	public virtual int get_marginBottom() { }

	[CompilerGeneratedAttribute] // RVA: 0xB5EF4 Offset: 0xB5EF4 VA: 0xB5EF4
	// RVA: 0x5AEB14 Offset: 0x5AEB14 VA: 0x5AEB14
	public int get_marginHorizontal() { }

	[CompilerGeneratedAttribute] // RVA: 0xB5F04 Offset: 0xB5F04 VA: 0xB5F04
	// RVA: 0x5AEB54 Offset: 0x5AEB54 VA: 0x5AEB54
	public int get_marginVertical() { }

	// RVA: 0x5AEB94 Offset: 0x5AEB94 VA: 0x5AEB94 Slot: 8
	public virtual void CalcWidth() { }

	// RVA: 0x5AEB98 Offset: 0x5AEB98 VA: 0x5AEB98 Slot: 9
	public virtual void CalcHeight() { }

	// RVA: 0x5AEB9C Offset: 0x5AEB9C VA: 0x5AEB9C Slot: 10
	public virtual void SetHorizontal(float x, float width) { }

	// RVA: 0x5AEBCC Offset: 0x5AEBCC VA: 0x5AEBCC Slot: 11
	public virtual void SetVertical(float y, float height) { }

	// RVA: 0x5AEBFC Offset: 0x5AEBFC VA: 0x5AEBFC Slot: 12
	protected virtual void ApplyStyleSettings(GUIStyle style) { }

	// RVA: 0x5AEF1C Offset: 0x5AEF1C VA: 0x5AEF1C Slot: 13
	public virtual void ApplyOptions(GUILayoutOption[] options) { }

	// RVA: 0x5AF1F0 Offset: 0x5AF1F0 VA: 0x5AF1F0 Slot: 3
	public override string ToString() { }

	// RVA: 0x5AFC1C Offset: 0x5AFC1C VA: 0x5AFC1C
	private static void .cctor() { }
}

// Namespace: UnityEngine
[VisibleToOtherModulesAttribute] // RVA: 0xB46BC Offset: 0xB46BC VA: 0xB46BC
internal class GUILayoutGroup : GUILayoutEntry // TypeDefIndex: 1824
{
	// Fields
	public List<GUILayoutEntry> entries; // 0x38
	public bool isVertical; // 0x3C
	public bool resetCoords; // 0x3D
	public float spacing; // 0x40
	public bool sameSize; // 0x44
	public bool isWindow; // 0x45
	public int windowID; // 0x48
	private int m_Cursor; // 0x4C
	protected int m_StretchableCountX; // 0x50
	protected int m_StretchableCountY; // 0x54
	protected bool m_UserSpecifiedWidth; // 0x58
	protected bool m_UserSpecifiedHeight; // 0x59
	protected float m_ChildMinWidth; // 0x5C
	protected float m_ChildMaxWidth; // 0x60
	protected float m_ChildMinHeight; // 0x64
	protected float m_ChildMaxHeight; // 0x68
	protected int m_MarginLeft; // 0x6C
	protected int m_MarginRight; // 0x70
	protected int m_MarginTop; // 0x74
	protected int m_MarginBottom; // 0x78

	// Properties
	public override int marginLeft { get; }
	public override int marginRight { get; }
	public override int marginTop { get; }
	public override int marginBottom { get; }

	// Methods

	// RVA: 0x5AFCC8 Offset: 0x5AFCC8 VA: 0x5AFCC8
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xB5F14 Offset: 0xB5F14 VA: 0xB5F14
	// RVA: 0x5AFE24 Offset: 0x5AFE24 VA: 0x5AFE24 Slot: 4
	public override int get_marginLeft() { }

	[CompilerGeneratedAttribute] // RVA: 0xB5F24 Offset: 0xB5F24 VA: 0xB5F24
	// RVA: 0x5AFE2C Offset: 0x5AFE2C VA: 0x5AFE2C Slot: 5
	public override int get_marginRight() { }

	[CompilerGeneratedAttribute] // RVA: 0xB5F34 Offset: 0xB5F34 VA: 0xB5F34
	// RVA: 0x5AFE34 Offset: 0x5AFE34 VA: 0x5AFE34 Slot: 6
	public override int get_marginTop() { }

	[CompilerGeneratedAttribute] // RVA: 0xB5F44 Offset: 0xB5F44 VA: 0xB5F44
	// RVA: 0x5AFE3C Offset: 0x5AFE3C VA: 0x5AFE3C Slot: 7
	public override int get_marginBottom() { }

	// RVA: 0x5AFE44 Offset: 0x5AFE44 VA: 0x5AFE44 Slot: 13
	public override void ApplyOptions(GUILayoutOption[] options) { }

	// RVA: 0x5AFF6C Offset: 0x5AFF6C VA: 0x5AFF6C Slot: 12
	protected override void ApplyStyleSettings(GUIStyle style) { }

	// RVA: 0x5B003C Offset: 0x5B003C VA: 0x5B003C
	public void ResetCursor() { }

	// RVA: 0x5B0048 Offset: 0x5B0048 VA: 0x5B0048 Slot: 8
	public override void CalcWidth() { }

	// RVA: 0x5B0A70 Offset: 0x5B0A70 VA: 0x5B0A70 Slot: 10
	public override void SetHorizontal(float x, float width) { }

	// RVA: 0x5B174C Offset: 0x5B174C VA: 0x5B174C Slot: 9
	public override void CalcHeight() { }

	// RVA: 0x5B205C Offset: 0x5B205C VA: 0x5B205C Slot: 11
	public override void SetVertical(float y, float height) { }

	// RVA: 0x5B2D5C Offset: 0x5B2D5C VA: 0x5B2D5C Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
internal sealed class GUIScrollGroup : GUILayoutGroup // TypeDefIndex: 1825
{
	// Fields
	public float calcMinWidth; // 0x7C
	public float calcMaxWidth; // 0x80
	public float calcMinHeight; // 0x84
	public float calcMaxHeight; // 0x88
	public float clientWidth; // 0x8C
	public float clientHeight; // 0x90
	public bool allowHorizontalScroll; // 0x94
	public bool allowVerticalScroll; // 0x95
	public bool needsHorizontalScrollbar; // 0x96
	public bool needsVerticalScrollbar; // 0x97
	public GUIStyle horizontalScrollbar; // 0x98
	public GUIStyle verticalScrollbar; // 0x9C

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xB5F54 Offset: 0xB5F54 VA: 0xB5F54
	// RVA: 0x5B447C Offset: 0x5B447C VA: 0x5B447C
	public void .ctor() { }

	// RVA: 0x5B4488 Offset: 0x5B4488 VA: 0x5B4488 Slot: 8
	public override void CalcWidth() { }

	// RVA: 0x5B4528 Offset: 0x5B4528 VA: 0x5B4528 Slot: 10
	public override void SetHorizontal(float x, float width) { }

	// RVA: 0x5B4664 Offset: 0x5B4664 VA: 0x5B4664 Slot: 9
	public override void CalcHeight() { }

	// RVA: 0x5B4798 Offset: 0x5B4798 VA: 0x5B4798 Slot: 11
	public override void SetVertical(float y, float height) { }
}

// Namespace: UnityEngine
internal class ScrollViewState // TypeDefIndex: 1826
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xB5F64 Offset: 0xB5F64 VA: 0xB5F64
	// RVA: 0x5B7DD8 Offset: 0x5B7DD8 VA: 0x5B7DD8
	public void .ctor() { }
}

// Namespace: UnityEngine
internal class SliderState // TypeDefIndex: 1827
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xB5F74 Offset: 0xB5F74 VA: 0xB5F74
	// RVA: 0x5B7DE0 Offset: 0x5B7DE0 VA: 0x5B7DE0
	public void .ctor() { }
}

// Namespace: UnityEngine
public class TextEditor // TypeDefIndex: 1828
{
	// Fields
	public TouchScreenKeyboard keyboardOnScreen; // 0x8
	public int controlID; // 0xC
	public GUIStyle style; // 0x10
	public bool multiline; // 0x14
	public bool hasHorizontalCursorPos; // 0x15
	public bool isPasswordField; // 0x16
	public Vector2 scrollOffset; // 0x18
	private GUIContent m_Content; // 0x20
	private int m_CursorIndex; // 0x24
	private int m_SelectIndex; // 0x28
	private bool m_RevealCursor; // 0x2C
	private bool m_MouseDragSelectsWholeWords; // 0x2D
	private int m_DblClickInitPos; // 0x30
	private TextEditor.DblClickSnapping m_DblClickSnap; // 0x34
	private bool m_bJustSelected; // 0x35
	private int m_iAltCursorPos; // 0x38

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xB5F84 Offset: 0xB5F84 VA: 0xB5F84
	// RVA: 0x5B7DE8 Offset: 0x5B7DE8 VA: 0x5B7DE8
	public void .ctor() { }
}

// Namespace: 
public enum TextEditor.DblClickSnapping // TypeDefIndex: 1829
{
	// Fields
	public byte value__; // 0x0
	public const TextEditor.DblClickSnapping WORDS = 0;
	public const TextEditor.DblClickSnapping PARAGRAPHS = 1;
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1830
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB76D8 Offset: 0xB76D8 VA: 0xB76D8
public struct PhysicsScene2D : IEquatable<PhysicsScene2D> // TypeDefIndex: 1831
{
	// Fields
	private int m_Handle; // 0x0

	// Methods

	// RVA: 0xF3860 Offset: 0xF3860 VA: 0xF3860 Slot: 3
	public override string ToString() { }

	// RVA: 0xF3868 Offset: 0xF3868 VA: 0xF3868 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xF3870 Offset: 0xF3870 VA: 0xF3870 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xF3878 Offset: 0xF3878 VA: 0xF3878 Slot: 4
	public bool Equals(PhysicsScene2D other) { }

	// RVA: 0xF388C Offset: 0xF388C VA: 0xF388C
	public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask = -5) { }

	// RVA: 0xF38C8 Offset: 0xF38C8 VA: 0xF38C8
	public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter) { }

	[StaticAccessorAttribute] // RVA: 0xB82EC Offset: 0xB82EC VA: 0xB82EC
	[NativeMethodAttribute] // RVA: 0xB82EC Offset: 0xB82EC VA: 0xB82EC
	// RVA: 0x5EC854 Offset: 0x5EC854 VA: 0x5EC854
	private static RaycastHit2D Raycast_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter) { }

	// RVA: 0xF3960 Offset: 0xF3960 VA: 0xF3960
	public int Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results) { }

	[StaticAccessorAttribute] // RVA: 0xB8358 Offset: 0xB8358 VA: 0xB8358
	[NativeMethodAttribute] // RVA: 0xB8358 Offset: 0xB8358 VA: 0xB8358
	// RVA: 0x5EC988 Offset: 0x5EC988 VA: 0x5EC988
	private static int RaycastNonAlloc_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, [Out] RaycastHit2D[] results) { }

	// RVA: 0xF39C4 Offset: 0xF39C4 VA: 0xF39C4
	public int GetRayIntersection(Ray ray, float distance, RaycastHit2D[] results, int layerMask = -5) { }

	[NativeMethodAttribute] // RVA: 0xB83CC Offset: 0xB83CC VA: 0xB83CC
	[StaticAccessorAttribute] // RVA: 0xB83CC Offset: 0xB83CC VA: 0xB83CC
	// RVA: 0x5ECA98 Offset: 0x5ECA98 VA: 0x5ECA98
	private static int GetRayIntersectionNonAlloc_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask, [Out] RaycastHit2D[] results) { }

	// RVA: 0x5EC8F8 Offset: 0x5EC8F8 VA: 0x5EC8F8
	private static void Raycast_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, out RaycastHit2D ret) { }

	// RVA: 0x5ECA08 Offset: 0x5ECA08 VA: 0x5ECA08
	private static int RaycastNonAlloc_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, [Out] RaycastHit2D[] results) { }

	// RVA: 0x5ECAF0 Offset: 0x5ECAF0 VA: 0x5ECAF0
	private static int GetRayIntersectionNonAlloc_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector3 origin, ref Vector3 direction, float distance, int layerMask, [Out] RaycastHit2D[] results) { }
}

// Namespace: UnityEngine
[StaticAccessorAttribute] // RVA: 0xB7734 Offset: 0xB7734 VA: 0xB7734
[NativeHeaderAttribute] // RVA: 0xB7734 Offset: 0xB7734 VA: 0xB7734
[NativeHeaderAttribute] // RVA: 0xB7734 Offset: 0xB7734 VA: 0xB7734
[NativeHeaderAttribute] // RVA: 0xB7734 Offset: 0xB7734 VA: 0xB7734
public class Physics2D // TypeDefIndex: 1832
{
	// Fields
	private static List<Rigidbody2D> m_LastDisabledRigidbody2D; // 0x0

	// Properties
	[NativePropertyAttribute] // RVA: 0xB8898 Offset: 0xB8898 VA: 0xB8898
	[StaticAccessorAttribute] // RVA: 0xB8898 Offset: 0xB8898 VA: 0xB8898
	public static PhysicsScene2D defaultPhysicsScene { get; }
	[StaticAccessorAttribute] // RVA: 0xB88FC Offset: 0xB88FC VA: 0xB88FC
	public static bool queriesHitTriggers { get; }

	// Methods

	// RVA: 0x5EB31C Offset: 0x5EB31C VA: 0x5EB31C
	public static PhysicsScene2D get_defaultPhysicsScene() { }

	// RVA: 0x5EB288 Offset: 0x5EB288 VA: 0x5EB288
	public static bool get_queriesHitTriggers() { }

	[ExcludeFromDocsAttribute] // RVA: 0xB844C Offset: 0xB844C VA: 0xB844C
	// RVA: 0x5EB424 Offset: 0x5EB424 VA: 0x5EB424
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction) { }

	[ExcludeFromDocsAttribute] // RVA: 0xB845C Offset: 0xB845C VA: 0xB845C
	// RVA: 0x5EB5E8 Offset: 0x5EB5E8 VA: 0x5EB5E8
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB846C Offset: 0xB846C VA: 0xB846C
	[ExcludeFromDocsAttribute] // RVA: 0xB846C Offset: 0xB846C VA: 0xB846C
	// RVA: 0x5EB6E0 Offset: 0x5EB6E0 VA: 0x5EB6E0
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xB849C Offset: 0xB849C VA: 0xB849C
	// RVA: 0x5EB910 Offset: 0x5EB910 VA: 0x5EB910
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth) { }

	// RVA: 0x5EBAA0 Offset: 0x5EBAA0 VA: 0x5EBAA0
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth) { }

	[ExcludeFromDocsAttribute] // RVA: 0xB84AC Offset: 0xB84AC VA: 0xB84AC
	// RVA: 0x5EBC30 Offset: 0x5EBC30 VA: 0x5EBC30
	public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results) { }

	// RVA: 0x5EBD7C Offset: 0x5EBD7C VA: 0x5EBD7C
	public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xB84BC Offset: 0xB84BC VA: 0xB84BC
	// RVA: 0x5EBE78 Offset: 0x5EBE78 VA: 0x5EBE78
	public static RaycastHit2D[] GetRayIntersectionAll(Ray ray) { }

	[ExcludeFromDocsAttribute] // RVA: 0xB84CC Offset: 0xB84CC VA: 0xB84CC
	// RVA: 0x5EC040 Offset: 0x5EC040 VA: 0x5EC040
	public static RaycastHit2D[] GetRayIntersectionAll(Ray ray, float distance) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB84DC Offset: 0xB84DC VA: 0xB84DC
	// RVA: 0x5EC140 Offset: 0x5EC140 VA: 0x5EC140
	public static RaycastHit2D[] GetRayIntersectionAll(Ray ray, float distance, int layerMask) { }

	[StaticAccessorAttribute] // RVA: 0xB84EC Offset: 0xB84EC VA: 0xB84EC
	[NativeMethodAttribute] // RVA: 0xB84EC Offset: 0xB84EC VA: 0xB84EC
	// RVA: 0x5EBF74 Offset: 0x5EBF74 VA: 0x5EBF74
	private static RaycastHit2D[] GetRayIntersectionAll_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xB8568 Offset: 0xB8568 VA: 0xB8568
	// RVA: 0x5EC2C4 Offset: 0x5EC2C4 VA: 0x5EC2C4
	public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results) { }

	[ExcludeFromDocsAttribute] // RVA: 0xB8578 Offset: 0xB8578 VA: 0xB8578
	// RVA: 0x5EC434 Offset: 0x5EC434 VA: 0x5EC434
	public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, float distance) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB8588 Offset: 0xB8588 VA: 0xB8588
	// RVA: 0x5EC51C Offset: 0x5EC51C VA: 0x5EC51C
	public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, float distance, int layerMask) { }

	// RVA: 0x5EC604 Offset: 0x5EC604 VA: 0x5EC604
	private static void .cctor() { }

	// RVA: 0x5EB3AC Offset: 0x5EB3AC VA: 0x5EB3AC
	private static void get_defaultPhysicsScene_Injected(out PhysicsScene2D ret) { }

	// RVA: 0x5EC234 Offset: 0x5EC234 VA: 0x5EC234
	private static RaycastHit2D[] GetRayIntersectionAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector3 origin, ref Vector3 direction, float distance, int layerMask) { }
}

// Namespace: UnityEngine
public enum ForceMode2D // TypeDefIndex: 1833
{
	// Fields
	public int value__; // 0x0
	public const ForceMode2D Force = 0;
	public const ForceMode2D Impulse = 1;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB7818 Offset: 0xB7818 VA: 0xB7818
[NativeClassAttribute] // RVA: 0xB7818 Offset: 0xB7818 VA: 0xB7818
[RequiredByNativeCodeAttribute] // RVA: 0xB7818 Offset: 0xB7818 VA: 0xB7818
[Serializable]
public struct ContactFilter2D // TypeDefIndex: 1834
{
	// Fields
	[NativeNameAttribute] // RVA: 0xB7CA0 Offset: 0xB7CA0 VA: 0xB7CA0
	public bool useTriggers; // 0x0
	[NativeNameAttribute] // RVA: 0xB7CDC Offset: 0xB7CDC VA: 0xB7CDC
	public bool useLayerMask; // 0x1
	[NativeNameAttribute] // RVA: 0xB7D18 Offset: 0xB7D18 VA: 0xB7D18
	public bool useDepth; // 0x2
	[NativeNameAttribute] // RVA: 0xB7D50 Offset: 0xB7D50 VA: 0xB7D50
	public bool useOutsideDepth; // 0x3
	[NativeNameAttribute] // RVA: 0xB7D90 Offset: 0xB7D90 VA: 0xB7D90
	public bool useNormalAngle; // 0x4
	[NativeNameAttribute] // RVA: 0xB7DD0 Offset: 0xB7DD0 VA: 0xB7DD0
	public bool useOutsideNormalAngle; // 0x5
	[NativeNameAttribute] // RVA: 0xB7E14 Offset: 0xB7E14 VA: 0xB7E14
	public LayerMask layerMask; // 0x8
	[NativeNameAttribute] // RVA: 0xB7E4C Offset: 0xB7E4C VA: 0xB7E4C
	public float minDepth; // 0xC
	[NativeNameAttribute] // RVA: 0xB7E84 Offset: 0xB7E84 VA: 0xB7E84
	public float maxDepth; // 0x10
	[NativeNameAttribute] // RVA: 0xB7EBC Offset: 0xB7EBC VA: 0xB7EBC
	public float minNormalAngle; // 0x14
	[NativeNameAttribute] // RVA: 0xB7EFC Offset: 0xB7EFC VA: 0xB7EFC
	public float maxNormalAngle; // 0x18

	// Methods

	// RVA: 0xF3830 Offset: 0xF3830 VA: 0xF3830
	private void CheckConsistency() { }

	// RVA: 0xF3838 Offset: 0xF3838 VA: 0xF3838
	public void SetLayerMask(LayerMask layerMask) { }

	// RVA: 0xF3848 Offset: 0xF3848 VA: 0xF3848
	public void SetDepth(float minDepth, float maxDepth) { }

	// RVA: 0x5EB194 Offset: 0x5EB194 VA: 0x5EB194
	internal static ContactFilter2D CreateLegacyFilter(int layerMask, float minDepth, float maxDepth) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xB78DC Offset: 0xB78DC VA: 0xB78DC
public class Collision2D // TypeDefIndex: 1835
{
	// Fields
	internal int m_Collider; // 0x8
	internal int m_OtherCollider; // 0xC
	internal int m_Rigidbody; // 0x10
	internal int m_OtherRigidbody; // 0x14
	internal Vector2 m_RelativeVelocity; // 0x18
	internal int m_Enabled; // 0x20
	internal int m_ContactCount; // 0x24
	internal ContactPoint2D[] m_RecycledContacts; // 0x28
	internal ContactPoint2D[] m_LegacyContacts; // 0x2C

	// Properties
	public Collider2D collider { get; }
	public Rigidbody2D rigidbody { get; }
	public Transform transform { get; }

	// Methods

	// RVA: 0x5EAD34 Offset: 0x5EAD34 VA: 0x5EAD34
	public Collider2D get_collider() { }

	// RVA: 0x5EAE08 Offset: 0x5EAE08 VA: 0x5EAE08
	public Rigidbody2D get_rigidbody() { }

	// RVA: 0x5EAEC0 Offset: 0x5EAEC0 VA: 0x5EAEC0
	public Transform get_transform() { }
}

// Namespace: UnityEngine
[NativeClassAttribute] // RVA: 0xB78EC Offset: 0xB78EC VA: 0xB78EC
[RequiredByNativeCodeAttribute] // RVA: 0xB78EC Offset: 0xB78EC VA: 0xB78EC
[NativeHeaderAttribute] // RVA: 0xB78EC Offset: 0xB78EC VA: 0xB78EC
public struct ContactPoint2D // TypeDefIndex: 1836
{
	// Fields
	[NativeNameAttribute] // RVA: 0xB7F3C Offset: 0xB7F3C VA: 0xB7F3C
	private Vector2 m_Point; // 0x0
	[NativeNameAttribute] // RVA: 0xB7F70 Offset: 0xB7F70 VA: 0xB7F70
	private Vector2 m_Normal; // 0x8
	[NativeNameAttribute] // RVA: 0xB7FA4 Offset: 0xB7FA4 VA: 0xB7FA4
	private Vector2 m_RelativeVelocity; // 0x10
	[NativeNameAttribute] // RVA: 0xB7FE4 Offset: 0xB7FE4 VA: 0xB7FE4
	private float m_Separation; // 0x18
	[NativeNameAttribute] // RVA: 0xB801C Offset: 0xB801C VA: 0xB801C
	private float m_NormalImpulse; // 0x1C
	[NativeNameAttribute] // RVA: 0xB8058 Offset: 0xB8058 VA: 0xB8058
	private float m_TangentImpulse; // 0x20
	[NativeNameAttribute] // RVA: 0xB8094 Offset: 0xB8094 VA: 0xB8094
	private int m_Collider; // 0x24
	[NativeNameAttribute] // RVA: 0xB80C8 Offset: 0xB80C8 VA: 0xB80C8
	private int m_OtherCollider; // 0x28
	[NativeNameAttribute] // RVA: 0xB8104 Offset: 0xB8104 VA: 0xB8104
	private int m_Rigidbody; // 0x2C
	[NativeNameAttribute] // RVA: 0xB813C Offset: 0xB813C VA: 0xB813C
	private int m_OtherRigidbody; // 0x30
	[NativeNameAttribute] // RVA: 0xB8178 Offset: 0xB8178 VA: 0xB8178
	private int m_Enabled; // 0x34
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xB79E8 Offset: 0xB79E8 VA: 0xB79E8
[NativeHeaderAttribute] // RVA: 0xB79E8 Offset: 0xB79E8 VA: 0xB79E8
[NativeClassAttribute] // RVA: 0xB79E8 Offset: 0xB79E8 VA: 0xB79E8
public struct RaycastHit2D // TypeDefIndex: 1837
{
	// Fields
	[NativeNameAttribute] // RVA: 0xB81AC Offset: 0xB81AC VA: 0xB81AC
	private Vector2 m_Centroid; // 0x0
	[NativeNameAttribute] // RVA: 0xB81E4 Offset: 0xB81E4 VA: 0xB81E4
	private Vector2 m_Point; // 0x8
	[NativeNameAttribute] // RVA: 0xB8218 Offset: 0xB8218 VA: 0xB8218
	private Vector2 m_Normal; // 0x10
	[NativeNameAttribute] // RVA: 0xB824C Offset: 0xB824C VA: 0xB824C
	private float m_Distance; // 0x18
	[NativeNameAttribute] // RVA: 0xB8280 Offset: 0xB8280 VA: 0xB8280
	private float m_Fraction; // 0x1C
	[NativeNameAttribute] // RVA: 0xB82B8 Offset: 0xB82B8 VA: 0xB82B8
	private int m_Collider; // 0x20

	// Properties
	public Vector2 point { get; }
	public Vector2 normal { get; }
	public float distance { get; }
	public Collider2D collider { get; }

	// Methods

	// RVA: 0xF3A0C Offset: 0xF3A0C VA: 0xF3A0C
	public Vector2 get_point() { }

	// RVA: 0xF3A20 Offset: 0xF3A20 VA: 0xF3A20
	public Vector2 get_normal() { }

	// RVA: 0xF3A34 Offset: 0xF3A34 VA: 0xF3A34
	public float get_distance() { }

	// RVA: 0xF3A3C Offset: 0xF3A3C VA: 0xF3A3C
	public Collider2D get_collider() { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xB7AC4 Offset: 0xB7AC4 VA: 0xB7AC4
[NativeHeaderAttribute] // RVA: 0xB7AC4 Offset: 0xB7AC4 VA: 0xB7AC4
public sealed class Rigidbody2D : Component // TypeDefIndex: 1838
{
	// Properties
	public Vector2 velocity { get; set; }
	public float gravityScale { set; }
	public bool simulated { set; }

	// Methods

	// RVA: 0x5ECC84 Offset: 0x5ECC84 VA: 0x5ECC84
	public Vector2 get_velocity() { }

	// RVA: 0x5ECD40 Offset: 0x5ECD40 VA: 0x5ECD40
	public void set_velocity(Vector2 value) { }

	// RVA: 0x5ECDDC Offset: 0x5ECDDC VA: 0x5ECDDC
	public void set_gravityScale(float value) { }

	[NativeMethodAttribute] // RVA: 0xB8598 Offset: 0xB8598 VA: 0xB8598
	// RVA: 0x5ECE88 Offset: 0x5ECE88 VA: 0x5ECE88
	public void set_simulated(bool value) { }

	[ExcludeFromDocsAttribute] // RVA: 0xB85DC Offset: 0xB85DC VA: 0xB85DC
	// RVA: 0x5ECF30 Offset: 0x5ECF30 VA: 0x5ECF30
	public void AddForce(Vector2 force) { }

	// RVA: 0x5ECF50 Offset: 0x5ECF50 VA: 0x5ECF50
	public void AddForce(Vector2 force, ForceMode2D mode) { }

	// RVA: 0x5ECCC0 Offset: 0x5ECCC0 VA: 0x5ECCC0
	private void get_velocity_Injected(out Vector2 ret) { }

	// RVA: 0x5ECD5C Offset: 0x5ECD5C VA: 0x5ECD5C
	private void set_velocity_Injected(ref Vector2 value) { }

	// RVA: 0x5ECF70 Offset: 0x5ECF70 VA: 0x5ECF70
	private void AddForce_Injected(ref Vector2 force, ForceMode2D mode) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB7B84 Offset: 0xB7B84 VA: 0xB7B84
[RequireComponent] // RVA: 0xB7B84 Offset: 0xB7B84 VA: 0xB7B84
[RequiredByNativeCodeAttribute] // RVA: 0xB7B84 Offset: 0xB7B84 VA: 0xB7B84
public class Collider2D : Behaviour // TypeDefIndex: 1839
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB7C48 Offset: 0xB7C48 VA: 0xB7C48
public sealed class BoxCollider2D : Collider2D // TypeDefIndex: 1840
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 1841
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xB9C18 Offset: 0xB9C18 VA: 0xB9C18
public class ControllerColliderHit // TypeDefIndex: 1842
{
	// Fields
	internal CharacterController m_Controller; // 0x8
	internal Collider m_Collider; // 0xC
	internal Vector3 m_Point; // 0x10
	internal Vector3 m_Normal; // 0x1C
	internal Vector3 m_MoveDirection; // 0x28
	internal float m_MoveLength; // 0x34
	internal int m_Push; // 0x38
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xB9C28 Offset: 0xB9C28 VA: 0xB9C28
public class Collision // TypeDefIndex: 1843
{
	// Fields
	internal Vector3 m_Impulse; // 0x8
	internal Vector3 m_RelativeVelocity; // 0x14
	internal Rigidbody m_Rigidbody; // 0x20
	internal Collider m_Collider; // 0x24
	internal int m_ContactCount; // 0x28
	internal ContactPoint[] m_RecycledContacts; // 0x2C
	internal ContactPoint[] m_LegacyContacts; // 0x30
}

// Namespace: UnityEngine
public enum QueryTriggerInteraction // TypeDefIndex: 1844
{
	// Fields
	public int value__; // 0x0
	public const QueryTriggerInteraction UseGlobal = 0;
	public const QueryTriggerInteraction Ignore = 1;
	public const QueryTriggerInteraction Collide = 2;
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xB9C38 Offset: 0xB9C38 VA: 0xB9C38
[NativeHeaderAttribute] // RVA: 0xB9C38 Offset: 0xB9C38 VA: 0xB9C38
[NativeHeaderAttribute] // RVA: 0xB9C38 Offset: 0xB9C38 VA: 0xB9C38
[NativeHeaderAttribute] // RVA: 0xB9C38 Offset: 0xB9C38 VA: 0xB9C38
public struct RaycastHit // TypeDefIndex: 1845
{
	// Fields
	[NativeNameAttribute] // RVA: 0xBA1FC Offset: 0xBA1FC VA: 0xBA1FC
	internal Vector3 m_Point; // 0x0
	[NativeNameAttribute] // RVA: 0xBA230 Offset: 0xBA230 VA: 0xBA230
	internal Vector3 m_Normal; // 0xC
	[NativeNameAttribute] // RVA: 0xBA264 Offset: 0xBA264 VA: 0xBA264
	internal uint m_FaceID; // 0x18
	[NativeNameAttribute] // RVA: 0xBA298 Offset: 0xBA298 VA: 0xBA298
	internal float m_Distance; // 0x1C
	[NativeNameAttribute] // RVA: 0xBA2CC Offset: 0xBA2CC VA: 0xBA2CC
	internal Vector2 m_UV; // 0x20
	[NativeNameAttribute] // RVA: 0xBA2FC Offset: 0xBA2FC VA: 0xBA2FC
	internal int m_Collider; // 0x28

	// Properties
	public Collider collider { get; }
	public Vector3 point { get; }
	public Vector3 normal { get; }
	public float distance { get; }

	// Methods

	// RVA: 0xF3C10 Offset: 0xF3C10 VA: 0xF3C10
	public Collider get_collider() { }

	// RVA: 0xF3C18 Offset: 0xF3C18 VA: 0xF3C18
	public Vector3 get_point() { }

	// RVA: 0xF3C2C Offset: 0xF3C2C VA: 0xF3C2C
	public Vector3 get_normal() { }

	// RVA: 0xF3C40 Offset: 0xF3C40 VA: 0xF3C40
	public float get_distance() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB9D14 Offset: 0xB9D14 VA: 0xB9D14
[RequireComponent] // RVA: 0xB9D14 Offset: 0xB9D14 VA: 0xB9D14
public class Rigidbody : Component // TypeDefIndex: 1846
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB9DCC Offset: 0xB9DCC VA: 0xB9DCC
[RequireComponent] // RVA: 0xB9DCC Offset: 0xB9DCC VA: 0xB9DCC
[RequiredByNativeCodeAttribute] // RVA: 0xB9DCC Offset: 0xB9DCC VA: 0xB9DCC
public class Collider : Component // TypeDefIndex: 1847
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB9E90 Offset: 0xB9E90 VA: 0xB9E90
public class CharacterController : Collider // TypeDefIndex: 1848
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB9EE4 Offset: 0xB9EE4 VA: 0xB9EE4
[RequiredByNativeCodeAttribute] // RVA: 0xB9EE4 Offset: 0xB9EE4 VA: 0xB9EE4
[NativeHeaderAttribute] // RVA: 0xB9EE4 Offset: 0xB9EE4 VA: 0xB9EE4
public class MeshCollider : Collider // TypeDefIndex: 1849
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xB9F84 Offset: 0xB9F84 VA: 0xB9F84
[NativeHeaderAttribute] // RVA: 0xB9F84 Offset: 0xB9F84 VA: 0xB9F84
public class CapsuleCollider : Collider // TypeDefIndex: 1850
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB9FE8 Offset: 0xB9FE8 VA: 0xB9FE8
[RequiredByNativeCodeAttribute] // RVA: 0xB9FE8 Offset: 0xB9FE8 VA: 0xB9FE8
public class BoxCollider : Collider // TypeDefIndex: 1851
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBA048 Offset: 0xBA048 VA: 0xBA048
[RequiredByNativeCodeAttribute] // RVA: 0xBA048 Offset: 0xBA048 VA: 0xBA048
public class SphereCollider : Collider // TypeDefIndex: 1852
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBA0AC Offset: 0xBA0AC VA: 0xBA0AC
[UsedByNativeCodeAttribute] // RVA: 0xBA0AC Offset: 0xBA0AC VA: 0xBA0AC
public struct ContactPoint // TypeDefIndex: 1853
{
	// Fields
	internal Vector3 m_Point; // 0x0
	internal Vector3 m_Normal; // 0xC
	internal int m_ThisColliderInstanceID; // 0x18
	internal int m_OtherColliderInstanceID; // 0x1C
	internal float m_Separation; // 0x20
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBA114 Offset: 0xBA114 VA: 0xBA114
public struct PhysicsScene : IEquatable<PhysicsScene> // TypeDefIndex: 1854
{
	// Fields
	private int m_Handle; // 0x0

	// Methods

	// RVA: 0xF3AFC Offset: 0xF3AFC VA: 0xF3AFC Slot: 3
	public override string ToString() { }

	// RVA: 0xF3B04 Offset: 0xF3B04 VA: 0xF3B04 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xF3B0C Offset: 0xF3B0C VA: 0xF3B0C Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xF3B14 Offset: 0xF3B14 VA: 0xF3B14 Slot: 4
	public bool Equals(PhysicsScene other) { }

	// RVA: 0xF3B28 Offset: 0xF3B28 VA: 0xF3B28
	public bool Raycast(Vector3 origin, Vector3 direction, float maxDistance = ∞, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = 0) { }

	[StaticAccessorAttribute] // RVA: 0xBA330 Offset: 0xBA330 VA: 0xBA330
	[NativeNameAttribute] // RVA: 0xBA330 Offset: 0xBA330 VA: 0xBA330
	// RVA: 0x5F17F0 Offset: 0x5F17F0 VA: 0x5F17F0
	private static bool Internal_RaycastTest(PhysicsScene physicsScene, Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	// RVA: 0xF3B70 Offset: 0xF3B70 VA: 0xF3B70
	public bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance = ∞, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = 0) { }

	[StaticAccessorAttribute] // RVA: 0xBA398 Offset: 0xBA398 VA: 0xBA398
	[NativeNameAttribute] // RVA: 0xBA398 Offset: 0xBA398 VA: 0xBA398
	// RVA: 0x5F18D8 Offset: 0x5F18D8 VA: 0x5F18D8
	private static bool Internal_Raycast(PhysicsScene physicsScene, Ray ray, float maxDistance, ref RaycastHit hit, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	// RVA: 0xF3BC0 Offset: 0xF3BC0 VA: 0xF3BC0
	public int Raycast(Vector3 origin, Vector3 direction, RaycastHit[] raycastHits, float maxDistance = ∞, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = 0) { }

	[NativeNameAttribute] // RVA: 0xBA3FC Offset: 0xBA3FC VA: 0xBA3FC
	[StaticAccessorAttribute] // RVA: 0xBA3FC Offset: 0xBA3FC VA: 0xBA3FC
	// RVA: 0x5F19C0 Offset: 0x5F19C0 VA: 0x5F19C0
	private static int Internal_RaycastNonAlloc(PhysicsScene physicsScene, Ray ray, RaycastHit[] raycastHits, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction) { }

	// RVA: 0x5F1848 Offset: 0x5F1848 VA: 0x5F1848
	private static bool Internal_RaycastTest_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	// RVA: 0x5F1930 Offset: 0x5F1930 VA: 0x5F1930
	private static bool Internal_Raycast_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, ref RaycastHit hit, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	// RVA: 0x5F1A18 Offset: 0x5F1A18 VA: 0x5F1A18
	private static int Internal_RaycastNonAlloc_Injected(ref PhysicsScene physicsScene, ref Ray ray, RaycastHit[] raycastHits, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction) { }
}

// Namespace: UnityEngine
[StaticAccessorAttribute] // RVA: 0xBA170 Offset: 0xBA170 VA: 0xBA170
[NativeHeaderAttribute] // RVA: 0xBA170 Offset: 0xBA170 VA: 0xBA170
public class Physics // TypeDefIndex: 1855
{
	// Properties
	[NativePropertyAttribute] // RVA: 0xBACC4 Offset: 0xBACC4 VA: 0xBACC4
	public static PhysicsScene defaultPhysicsScene { get; }

	// Methods

	// RVA: 0x5EFF10 Offset: 0x5EFF10 VA: 0x5EFF10
	public static PhysicsScene get_defaultPhysicsScene() { }

	// RVA: 0x5EFFB0 Offset: 0x5EFFB0 VA: 0x5EFFB0
	public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA464 Offset: 0xBA464 VA: 0xBA464
	// RVA: 0x5F01AC Offset: 0x5F01AC VA: 0x5F01AC
	public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA474 Offset: 0xBA474 VA: 0xBA474
	// RVA: 0x5F0224 Offset: 0x5F0224 VA: 0x5F0224
	public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA484 Offset: 0xBA484 VA: 0xBA484
	// RVA: 0x5F029C Offset: 0x5F029C VA: 0x5F029C
	public static bool Raycast(Vector3 origin, Vector3 direction) { }

	// RVA: 0x5F0310 Offset: 0x5F0310 VA: 0x5F0310
	public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBA494 Offset: 0xBA494 VA: 0xBA494
	[ExcludeFromDocsAttribute] // RVA: 0xBA494 Offset: 0xBA494 VA: 0xBA494
	// RVA: 0x5F0538 Offset: 0x5F0538 VA: 0x5F0538
	public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA4C4 Offset: 0xBA4C4 VA: 0xBA4C4
	// RVA: 0x5F05B8 Offset: 0x5F05B8 VA: 0x5F05B8
	public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA4D4 Offset: 0xBA4D4 VA: 0xBA4D4
	// RVA: 0x5F0638 Offset: 0x5F0638 VA: 0x5F0638
	public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo) { }

	// RVA: 0x5F06B8 Offset: 0x5F06B8 VA: 0x5F06B8
	public static bool Raycast(Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA4E4 Offset: 0xBA4E4 VA: 0xBA4E4
	// RVA: 0x5F0758 Offset: 0x5F0758 VA: 0x5F0758
	public static bool Raycast(Ray ray, float maxDistance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA4F4 Offset: 0xBA4F4 VA: 0xBA4F4
	// RVA: 0x5F07EC Offset: 0x5F07EC VA: 0x5F07EC
	public static bool Raycast(Ray ray, float maxDistance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA504 Offset: 0xBA504 VA: 0xBA504
	// RVA: 0x5F0880 Offset: 0x5F0880 VA: 0x5F0880
	public static bool Raycast(Ray ray) { }

	// RVA: 0x5F0914 Offset: 0x5F0914 VA: 0x5F0914
	public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA514 Offset: 0xBA514 VA: 0xBA514
	// RVA: 0x5F09B8 Offset: 0x5F09B8 VA: 0x5F09B8
	public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA524 Offset: 0xBA524 VA: 0xBA524
	// RVA: 0x5F0A54 Offset: 0x5F0A54 VA: 0x5F0A54
	public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA534 Offset: 0xBA534 VA: 0xBA534
	// RVA: 0x5F0AF0 Offset: 0x5F0AF0 VA: 0x5F0AF0
	public static bool Raycast(Ray ray, out RaycastHit hitInfo) { }

	[StaticAccessorAttribute] // RVA: 0xBA544 Offset: 0xBA544 VA: 0xBA544
	[NativeNameAttribute] // RVA: 0xBA544 Offset: 0xBA544 VA: 0xBA544
	// RVA: 0x5F0B88 Offset: 0x5F0B88 VA: 0x5F0B88
	private static RaycastHit[] Internal_RaycastAll(PhysicsScene physicsScene, Ray ray, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction) { }

	// RVA: 0x5F0C70 Offset: 0x5F0C70 VA: 0x5F0C70
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA5AC Offset: 0xBA5AC VA: 0xBA5AC
	// RVA: 0x5F0E08 Offset: 0x5F0E08 VA: 0x5F0E08
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA5BC Offset: 0xBA5BC VA: 0xBA5BC
	// RVA: 0x5F0E48 Offset: 0x5F0E48 VA: 0x5F0E48
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA5CC Offset: 0xBA5CC VA: 0xBA5CC
	// RVA: 0x5F0E84 Offset: 0x5F0E84 VA: 0x5F0E84
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction) { }

	// RVA: 0x5F0EC4 Offset: 0x5F0EC4 VA: 0x5F0EC4
	public static RaycastHit[] RaycastAll(Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBA5DC Offset: 0xBA5DC VA: 0xBA5DC
	[ExcludeFromDocsAttribute] // RVA: 0xBA5DC Offset: 0xBA5DC VA: 0xBA5DC
	// RVA: 0x5F0F40 Offset: 0x5F0F40 VA: 0x5F0F40
	public static RaycastHit[] RaycastAll(Ray ray, float maxDistance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA60C Offset: 0xBA60C VA: 0xBA60C
	// RVA: 0x5F0FBC Offset: 0x5F0FBC VA: 0x5F0FBC
	public static RaycastHit[] RaycastAll(Ray ray, float maxDistance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA61C Offset: 0xBA61C VA: 0xBA61C
	// RVA: 0x5F1038 Offset: 0x5F1038 VA: 0x5F1038
	public static RaycastHit[] RaycastAll(Ray ray) { }

	// RVA: 0x5F10B4 Offset: 0x5F10B4 VA: 0x5F10B4
	public static int RaycastNonAlloc(Ray ray, RaycastHit[] results, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA62C Offset: 0xBA62C VA: 0xBA62C
	[RequiredByNativeCodeAttribute] // RVA: 0xBA62C Offset: 0xBA62C VA: 0xBA62C
	// RVA: 0x5F1260 Offset: 0x5F1260 VA: 0x5F1260
	public static int RaycastNonAlloc(Ray ray, RaycastHit[] results, float maxDistance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA65C Offset: 0xBA65C VA: 0xBA65C
	// RVA: 0x5F12FC Offset: 0x5F12FC VA: 0x5F12FC
	public static int RaycastNonAlloc(Ray ray, RaycastHit[] results, float maxDistance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA66C Offset: 0xBA66C VA: 0xBA66C
	// RVA: 0x5F1398 Offset: 0x5F1398 VA: 0x5F1398
	public static int RaycastNonAlloc(Ray ray, RaycastHit[] results) { }

	// RVA: 0x5F1430 Offset: 0x5F1430 VA: 0x5F1430
	public static int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA67C Offset: 0xBA67C VA: 0xBA67C
	// RVA: 0x5F14B0 Offset: 0x5F14B0 VA: 0x5F14B0
	public static int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results, float maxDistance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA68C Offset: 0xBA68C VA: 0xBA68C
	// RVA: 0x5F1530 Offset: 0x5F1530 VA: 0x5F1530
	public static int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results, float maxDistance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBA69C Offset: 0xBA69C VA: 0xBA69C
	// RVA: 0x5F15B0 Offset: 0x5F15B0 VA: 0x5F15B0
	public static int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results) { }

	// RVA: 0x5EFF38 Offset: 0x5EFF38 VA: 0x5EFF38
	private static void get_defaultPhysicsScene_Injected(out PhysicsScene ret) { }

	// RVA: 0x5F0BE0 Offset: 0x5F0BE0 VA: 0x5F0BE0
	private static RaycastHit[] Internal_RaycastAll_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1856
{}

// Namespace: UnityEngine
public enum RenderMode // TypeDefIndex: 1857
{
	// Fields
	public int value__; // 0x0
	public const RenderMode ScreenSpaceOverlay = 0;
	public const RenderMode ScreenSpaceCamera = 1;
	public const RenderMode WorldSpace = 2;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBBFD0 Offset: 0xBBFD0 VA: 0xBBFD0
[NativeHeaderAttribute] // RVA: 0xBBFD0 Offset: 0xBBFD0 VA: 0xBBFD0
[NativeClassAttribute] // RVA: 0xBBFD0 Offset: 0xBBFD0 VA: 0xBBFD0
[RequireComponent] // RVA: 0xBBFD0 Offset: 0xBBFD0 VA: 0xBBFD0
public sealed class Canvas : Behaviour // TypeDefIndex: 1858
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xBC334 Offset: 0xBC334 VA: 0xBC334
	[CompilerGeneratedAttribute] // RVA: 0xBC334 Offset: 0xBC334 VA: 0xBC334
	private static Canvas.WillRenderCanvases willRenderCanvases; // 0x0

	// Properties
	public RenderMode renderMode { get; }
	public bool isRootCanvas { get; }
	public float scaleFactor { get; set; }
	public float referencePixelsPerUnit { get; set; }
	public bool pixelPerfect { get; }
	public int renderOrder { get; }
	public bool overrideSorting { get; set; }
	public int sortingOrder { get; set; }
	public int targetDisplay { get; }
	public int sortingLayerID { get; set; }
	public Canvas rootCanvas { get; }
	[NativePropertyAttribute] // RVA: 0xBC4E0 Offset: 0xBC4E0 VA: 0xBC4E0
	public Camera worldCamera { get; }

	// Methods

	// RVA: 0x5E76F4 Offset: 0x5E76F4 VA: 0x5E76F4
	public void .ctor() { }

	// RVA: 0x5E76FC Offset: 0x5E76FC VA: 0x5E76FC
	public static void add_willRenderCanvases(Canvas.WillRenderCanvases value) { }

	// RVA: 0x5E782C Offset: 0x5E782C VA: 0x5E782C
	public static void remove_willRenderCanvases(Canvas.WillRenderCanvases value) { }

	// RVA: 0x5E795C Offset: 0x5E795C VA: 0x5E795C
	public RenderMode get_renderMode() { }

	// RVA: 0x5E79EC Offset: 0x5E79EC VA: 0x5E79EC
	public bool get_isRootCanvas() { }

	// RVA: 0x5E7A7C Offset: 0x5E7A7C VA: 0x5E7A7C
	public float get_scaleFactor() { }

	// RVA: 0x5E7B0C Offset: 0x5E7B0C VA: 0x5E7B0C
	public void set_scaleFactor(float value) { }

	// RVA: 0x5E7BB0 Offset: 0x5E7BB0 VA: 0x5E7BB0
	public float get_referencePixelsPerUnit() { }

	// RVA: 0x5E7C4C Offset: 0x5E7C4C VA: 0x5E7C4C
	public void set_referencePixelsPerUnit(float value) { }

	// RVA: 0x5E7CFC Offset: 0x5E7CFC VA: 0x5E7CFC
	public bool get_pixelPerfect() { }

	// RVA: 0x5E7D8C Offset: 0x5E7D8C VA: 0x5E7D8C
	public int get_renderOrder() { }

	// RVA: 0x5E7E1C Offset: 0x5E7E1C VA: 0x5E7E1C
	public bool get_overrideSorting() { }

	// RVA: 0x5E7EB0 Offset: 0x5E7EB0 VA: 0x5E7EB0
	public void set_overrideSorting(bool value) { }

	// RVA: 0x5E7F58 Offset: 0x5E7F58 VA: 0x5E7F58
	public int get_sortingOrder() { }

	// RVA: 0x5E7FE8 Offset: 0x5E7FE8 VA: 0x5E7FE8
	public void set_sortingOrder(int value) { }

	// RVA: 0x5E808C Offset: 0x5E808C VA: 0x5E808C
	public int get_targetDisplay() { }

	// RVA: 0x5E811C Offset: 0x5E811C VA: 0x5E811C
	public int get_sortingLayerID() { }

	// RVA: 0x5E81B0 Offset: 0x5E81B0 VA: 0x5E81B0
	public void set_sortingLayerID(int value) { }

	// RVA: 0x5E8258 Offset: 0x5E8258 VA: 0x5E8258
	public Canvas get_rootCanvas() { }

	// RVA: 0x5E82E8 Offset: 0x5E82E8 VA: 0x5E82E8
	public Camera get_worldCamera() { }

	[FreeFunctionAttribute] // RVA: 0xBC39C Offset: 0xBC39C VA: 0xBC39C
	// RVA: 0x5E8378 Offset: 0x5E8378 VA: 0x5E8378
	public static Material GetDefaultCanvasMaterial() { }

	[FreeFunctionAttribute] // RVA: 0xBC3E4 Offset: 0xBC3E4 VA: 0xBC3E4
	// RVA: 0x5E840C Offset: 0x5E840C VA: 0x5E840C
	public static Material GetETC1SupportedCanvasMaterial() { }

	// RVA: 0x5E84A8 Offset: 0x5E84A8 VA: 0x5E84A8
	public static void ForceUpdateCanvases() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBC434 Offset: 0xBC434 VA: 0xBC434
	// RVA: 0x5E84AC Offset: 0x5E84AC VA: 0x5E84AC
	private static void SendWillRenderCanvases() { }
}

// Namespace: 
public sealed class Canvas.WillRenderCanvases : MulticastDelegate // TypeDefIndex: 1859
{
	// Methods

	// RVA: 0x5E872C Offset: 0x5E872C VA: 0x5E872C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5E851C Offset: 0x5E851C VA: 0x5E851C Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x5E8740 Offset: 0x5E8740 VA: 0x5E8740 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x5E876C Offset: 0x5E876C VA: 0x5E876C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[StaticAccessorAttribute] // RVA: 0xBC0D4 Offset: 0xBC0D4 VA: 0xBC0D4
[NativeHeaderAttribute] // RVA: 0xBC0D4 Offset: 0xBC0D4 VA: 0xBC0D4
public static class UISystemProfilerApi // TypeDefIndex: 1860
{
	// Methods

	// RVA: 0x5EABC4 Offset: 0x5EABC4 VA: 0x5EABC4
	public static void BeginSample(UISystemProfilerApi.SampleType type) { }

	// RVA: 0x5EAC3C Offset: 0x5EAC3C VA: 0x5EAC3C
	public static void EndSample(UISystemProfilerApi.SampleType type) { }

	// RVA: 0x5EACB4 Offset: 0x5EACB4 VA: 0x5EACB4
	public static void AddMarker(string name, Object obj) { }
}

// Namespace: 
public enum UISystemProfilerApi.SampleType // TypeDefIndex: 1861
{
	// Fields
	public int value__; // 0x0
	public const UISystemProfilerApi.SampleType Layout = 0;
	public const UISystemProfilerApi.SampleType Render = 1;
}

// Namespace: UnityEngine
public interface ICanvasRaycastFilter // TypeDefIndex: 1862
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera);
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBC148 Offset: 0xBC148 VA: 0xBC148
[NativeClassAttribute] // RVA: 0xBC148 Offset: 0xBC148 VA: 0xBC148
public sealed class CanvasGroup : Behaviour, ICanvasRaycastFilter // TypeDefIndex: 1863
{
	// Properties
	[NativePropertyAttribute] // RVA: 0xBC528 Offset: 0xBC528 VA: 0xBC528
	public float alpha { get; set; }
	[NativePropertyAttribute] // RVA: 0xBC570 Offset: 0xBC570 VA: 0xBC570
	public bool interactable { get; }
	[NativePropertyAttribute] // RVA: 0xBC5C0 Offset: 0xBC5C0 VA: 0xBC5C0
	public bool blocksRaycasts { get; }
	[NativePropertyAttribute] // RVA: 0xBC610 Offset: 0xBC610 VA: 0xBC610
	public bool ignoreParentGroups { get; }

	// Methods

	// RVA: 0x5E8778 Offset: 0x5E8778 VA: 0x5E8778
	public float get_alpha() { }

	// RVA: 0x5E8808 Offset: 0x5E8808 VA: 0x5E8808
	public void set_alpha(float value) { }

	// RVA: 0x5E88AC Offset: 0x5E88AC VA: 0x5E88AC
	public bool get_interactable() { }

	// RVA: 0x5E8940 Offset: 0x5E8940 VA: 0x5E8940
	public bool get_blocksRaycasts() { }

	// RVA: 0x5E89D8 Offset: 0x5E89D8 VA: 0x5E89D8
	public bool get_ignoreParentGroups() { }

	// RVA: 0x5E8A74 Offset: 0x5E8A74 VA: 0x5E8A74 Slot: 4
	public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBC1C4 Offset: 0xBC1C4 VA: 0xBC1C4
[NativeClassAttribute] // RVA: 0xBC1C4 Offset: 0xBC1C4 VA: 0xBC1C4
public sealed class CanvasRenderer : Component // TypeDefIndex: 1864
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xBC368 Offset: 0xBC368 VA: 0xBC368
	[CompilerGeneratedAttribute] // RVA: 0xBC368 Offset: 0xBC368 VA: 0xBC368
	private bool <isMask>k__BackingField; // 0xC

	// Properties
	public bool hasPopInstruction { set; }
	public int materialCount { get; set; }
	public int popMaterialCount { set; }
	public int absoluteDepth { get; }
	public bool hasMoved { get; }
	[NativePropertyAttribute] // RVA: 0xBC664 Offset: 0xBC664 VA: 0xBC664
	public bool cull { get; set; }

	// Methods

	// RVA: 0x5E8A78 Offset: 0x5E8A78 VA: 0x5E8A78
	public void set_hasPopInstruction(bool value) { }

	// RVA: 0x5E8AF8 Offset: 0x5E8AF8 VA: 0x5E8AF8
	public int get_materialCount() { }

	// RVA: 0x5E8B90 Offset: 0x5E8B90 VA: 0x5E8B90
	public void set_materialCount(int value) { }

	// RVA: 0x5E8C3C Offset: 0x5E8C3C VA: 0x5E8C3C
	public void set_popMaterialCount(int value) { }

	// RVA: 0x5E8CEC Offset: 0x5E8CEC VA: 0x5E8CEC
	public int get_absoluteDepth() { }

	// RVA: 0x5E8D84 Offset: 0x5E8D84 VA: 0x5E8D84
	public bool get_hasMoved() { }

	// RVA: 0x5E8E18 Offset: 0x5E8E18 VA: 0x5E8E18
	public bool get_cull() { }

	// RVA: 0x5E8EA8 Offset: 0x5E8EA8 VA: 0x5E8EA8
	public void set_cull(bool value) { }

	// RVA: 0x5E8F50 Offset: 0x5E8F50 VA: 0x5E8F50
	public void SetColor(Color color) { }

	// RVA: 0x5E8FF4 Offset: 0x5E8FF4 VA: 0x5E8FF4
	public Color GetColor() { }

	// RVA: 0x5E90AC Offset: 0x5E90AC VA: 0x5E90AC
	public void EnableRectClipping(Rect rect) { }

	// RVA: 0x5E9150 Offset: 0x5E9150 VA: 0x5E9150
	public void DisableRectClipping() { }

	// RVA: 0x5E91EC Offset: 0x5E91EC VA: 0x5E91EC
	public void SetMaterial(Material material, int index) { }

	// RVA: 0x5E9274 Offset: 0x5E9274 VA: 0x5E9274
	public void SetPopMaterial(Material material, int index) { }

	// RVA: 0x5E92FC Offset: 0x5E92FC VA: 0x5E92FC
	public void SetTexture(Texture texture) { }

	// RVA: 0x5E93A8 Offset: 0x5E93A8 VA: 0x5E93A8
	public void SetAlphaTexture(Texture texture) { }

	// RVA: 0x5E9428 Offset: 0x5E9428 VA: 0x5E9428
	public void SetMesh(Mesh mesh) { }

	// RVA: 0x5E94D0 Offset: 0x5E94D0 VA: 0x5E94D0
	public void Clear() { }

	// RVA: 0x5E955C Offset: 0x5E955C VA: 0x5E955C
	public void SetMaterial(Material material, Texture texture) { }

	// RVA: 0x5E95B0 Offset: 0x5E95B0 VA: 0x5E95B0
	public static void SplitUIVertexStreams(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents, List<int> indices) { }

	// RVA: 0x5E9710 Offset: 0x5E9710 VA: 0x5E9710
	public static void CreateUIVertexStream(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents, List<int> indices) { }

	// RVA: 0x5E97E4 Offset: 0x5E97E4 VA: 0x5E97E4
	public static void AddUIVertexStream(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents) { }

	[StaticAccessorAttribute] // RVA: 0xBC444 Offset: 0xBC444 VA: 0xBC444
	// RVA: 0x5E9690 Offset: 0x5E9690 VA: 0x5E9690
	private static void SplitIndicesStreamsInternal(object verts, object indices) { }

	[StaticAccessorAttribute] // RVA: 0xBC478 Offset: 0xBC478 VA: 0xBC478
	// RVA: 0x5E9600 Offset: 0x5E9600 VA: 0x5E9600
	private static void SplitUIVertexStreamsInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents) { }

	[StaticAccessorAttribute] // RVA: 0xBC4AC Offset: 0xBC4AC VA: 0xBC4AC
	// RVA: 0x5E9754 Offset: 0x5E9754 VA: 0x5E9754
	private static void CreateUIVertexStreamInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents, object indices) { }

	// RVA: 0x5E8F74 Offset: 0x5E8F74 VA: 0x5E8F74
	private void SetColor_Injected(ref Color color) { }

	// RVA: 0x5E902C Offset: 0x5E902C VA: 0x5E902C
	private void GetColor_Injected(out Color ret) { }

	// RVA: 0x5E90D0 Offset: 0x5E90D0 VA: 0x5E90D0
	private void EnableRectClipping_Injected(ref Rect rect) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBC244 Offset: 0xBC244 VA: 0xBC244
[NativeHeaderAttribute] // RVA: 0xBC244 Offset: 0xBC244 VA: 0xBC244
[NativeHeaderAttribute] // RVA: 0xBC244 Offset: 0xBC244 VA: 0xBC244
[StaticAccessorAttribute] // RVA: 0xBC244 Offset: 0xBC244 VA: 0xBC244
[NativeHeaderAttribute] // RVA: 0xBC244 Offset: 0xBC244 VA: 0xBC244
public sealed class RectTransformUtility // TypeDefIndex: 1865
{
	// Fields
	private static readonly Vector3[] s_Corners; // 0x0

	// Methods

	// RVA: 0x5E9820 Offset: 0x5E9820 VA: 0x5E9820
	public static bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam) { }

	// RVA: 0x5E995C Offset: 0x5E995C VA: 0x5E995C
	public static bool ScreenPointToWorldPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector3 worldPoint) { }

	// RVA: 0x5E9E14 Offset: 0x5E9E14 VA: 0x5E9E14
	public static bool ScreenPointToLocalPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector2 localPoint) { }

	// RVA: 0x5E9BEC Offset: 0x5E9BEC VA: 0x5E9BEC
	public static Ray ScreenPointToRay(Camera cam, Vector2 screenPos) { }

	// RVA: 0x5E9FA8 Offset: 0x5E9FA8 VA: 0x5E9FA8
	public static void FlipLayoutOnAxis(RectTransform rect, int axis, bool keepPositioning, bool recursive) { }

	// RVA: 0x5EA3A4 Offset: 0x5EA3A4 VA: 0x5EA3A4
	public static void FlipLayoutAxes(RectTransform rect, bool keepPositioning, bool recursive) { }

	// RVA: 0x5EA800 Offset: 0x5EA800 VA: 0x5EA800
	private static Vector2 GetTransposed(Vector2 input) { }

	// RVA: 0x5EA844 Offset: 0x5EA844 VA: 0x5EA844
	public static Vector2 PixelAdjustPoint(Vector2 point, Transform elementTransform, Canvas canvas) { }

	// RVA: 0x5EA990 Offset: 0x5EA990 VA: 0x5EA990
	public static Rect PixelAdjustRect(RectTransform rectTransform, Canvas canvas) { }

	// RVA: 0x5E98C0 Offset: 0x5E98C0 VA: 0x5E98C0
	private static bool PointInRectangle(Vector2 screenPoint, RectTransform rect, Camera cam) { }

	// RVA: 0x5EAB4C Offset: 0x5EAB4C VA: 0x5EAB4C
	private static void .cctor() { }

	// RVA: 0x5EA900 Offset: 0x5EA900 VA: 0x5EA900
	private static void PixelAdjustPoint_Injected(ref Vector2 point, Transform elementTransform, Canvas canvas, out Vector2 ret) { }

	// RVA: 0x5EAA3C Offset: 0x5EAA3C VA: 0x5EAA3C
	private static void PixelAdjustRect_Injected(RectTransform rectTransform, Canvas canvas, out Rect ret) { }

	// RVA: 0x5EAAC4 Offset: 0x5EAAC4 VA: 0x5EAAC4
	private static bool PointInRectangle_Injected(ref Vector2 screenPoint, RectTransform rect, Camera cam) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1866
{}

// Namespace: UnityEngine.Analytics
[NativeHeaderAttribute] // RVA: 0xBD978 Offset: 0xBD978 VA: 0xBD978
[NativeHeaderAttribute] // RVA: 0xBD978 Offset: 0xBD978 VA: 0xBD978
[RequiredByNativeCodeAttribute] // RVA: 0xBD978 Offset: 0xBD978 VA: 0xBD978
internal class ContinuousEvent // TypeDefIndex: 1867
{}

// Namespace: UnityEngine.Analytics
[RequiredByNativeCodeAttribute] // RVA: 0xBDA14 Offset: 0xBDA14 VA: 0xBDA14
public enum AnalyticsSessionState // TypeDefIndex: 1868
{
	// Fields
	public int value__; // 0x0
	public const AnalyticsSessionState kSessionStopped = 0;
	public const AnalyticsSessionState kSessionStarted = 1;
	public const AnalyticsSessionState kSessionPaused = 2;
	public const AnalyticsSessionState kSessionResumed = 3;
}

// Namespace: UnityEngine.Analytics
[NativeHeaderAttribute] // RVA: 0xBDA24 Offset: 0xBDA24 VA: 0xBDA24
[RequiredByNativeCodeAttribute] // RVA: 0xBDA24 Offset: 0xBDA24 VA: 0xBDA24
[NativeHeaderAttribute] // RVA: 0xBDA24 Offset: 0xBDA24 VA: 0xBDA24
public static class AnalyticsSessionInfo // TypeDefIndex: 1869
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xBDB64 Offset: 0xBDB64 VA: 0xBDB64
	[CompilerGeneratedAttribute] // RVA: 0xBDB64 Offset: 0xBDB64 VA: 0xBDB64
	private static AnalyticsSessionInfo.SessionStateChanged sessionStateChanged; // 0x0

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xBDC68 Offset: 0xBDC68 VA: 0xBDC68
	// RVA: 0x5F308C Offset: 0x5F308C VA: 0x5F308C
	internal static void CallSessionStateChanged(AnalyticsSessionState sessionState, long sessionId, long sessionElapsedTime, bool sessionChanged) { }
}

// Namespace: 
public sealed class AnalyticsSessionInfo.SessionStateChanged : MulticastDelegate // TypeDefIndex: 1870
{
	// Methods

	// RVA: 0x5F3448 Offset: 0x5F3448 VA: 0x5F3448
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5F3134 Offset: 0x5F3134 VA: 0x5F3134 Slot: 11
	public virtual void Invoke(AnalyticsSessionState sessionState, long sessionId, long sessionElapsedTime, bool sessionChanged) { }

	// RVA: 0x5F345C Offset: 0x5F345C VA: 0x5F345C Slot: 12
	public virtual IAsyncResult BeginInvoke(AnalyticsSessionState sessionState, long sessionId, long sessionElapsedTime, bool sessionChanged, AsyncCallback callback, object object) { }

	// RVA: 0x5F3564 Offset: 0x5F3564 VA: 0x5F3564 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBDA94 Offset: 0xBDA94 VA: 0xBDA94
[NativeHeaderAttribute] // RVA: 0xBDA94 Offset: 0xBDA94 VA: 0xBDA94
public static class RemoteSettings // TypeDefIndex: 1871
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xBDB98 Offset: 0xBDB98 VA: 0xBDB98
	[CompilerGeneratedAttribute] // RVA: 0xBDB98 Offset: 0xBDB98 VA: 0xBDB98
	private static RemoteSettings.UpdatedEventHandler Updated; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xBDBCC Offset: 0xBDBCC VA: 0xBDBCC
	[DebuggerBrowsableAttribute] // RVA: 0xBDBCC Offset: 0xBDBCC VA: 0xBDBCC
	private static Action BeforeFetchFromServer; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xBDC00 Offset: 0xBDC00 VA: 0xBDC00
	[DebuggerBrowsableAttribute] // RVA: 0xBDC00 Offset: 0xBDC00 VA: 0xBDC00
	private static Action<bool, bool, int> Completed; // 0x8

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xBDC78 Offset: 0xBDC78 VA: 0xBDC78
	// RVA: 0x5F3764 Offset: 0x5F3764 VA: 0x5F3764
	internal static void RemoteSettingsUpdated(bool wasLastUpdatedFromServer) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBDC88 Offset: 0xBDC88 VA: 0xBDC88
	// RVA: 0x5F39E4 Offset: 0x5F39E4 VA: 0x5F39E4
	internal static void RemoteSettingsBeforeFetchFromServer() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBDC98 Offset: 0xBDC98 VA: 0xBDC98
	// RVA: 0x5F3A54 Offset: 0x5F3A54 VA: 0x5F3A54
	internal static void RemoteSettingsUpdateCompleted(bool wasLastUpdatedFromServer, bool settingsChanged, int response) { }
}

// Namespace: 
public sealed class RemoteSettings.UpdatedEventHandler : MulticastDelegate // TypeDefIndex: 1872
{
	// Methods

	// RVA: 0x5F3AF4 Offset: 0x5F3AF4 VA: 0x5F3AF4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5F37D4 Offset: 0x5F37D4 VA: 0x5F37D4 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x5F3B08 Offset: 0x5F3B08 VA: 0x5F3B08 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x5F3B34 Offset: 0x5F3B34 VA: 0x5F3B34 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[ExcludeFromDocsAttribute] // RVA: 0xBDAF4 Offset: 0xBDAF4 VA: 0xBDAF4
[NativeHeaderAttribute] // RVA: 0xBDAF4 Offset: 0xBDAF4 VA: 0xBDAF4
[NativeHeaderAttribute] // RVA: 0xBDAF4 Offset: 0xBDAF4 VA: 0xBDAF4
public class RemoteConfigSettings : IDisposable // TypeDefIndex: 1873
{
	// Fields
	internal IntPtr m_Ptr; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0xBDC34 Offset: 0xBDC34 VA: 0xBDC34
	[CompilerGeneratedAttribute] // RVA: 0xBDC34 Offset: 0xBDC34 VA: 0xBDC34
	private Action<bool> Updated; // 0xC

	// Methods

	// RVA: 0x5F3570 Offset: 0x5F3570 VA: 0x5F3570 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x5F35D4 Offset: 0x5F35D4 VA: 0x5F35D4
	private void Destroy() { }

	// RVA: 0x5F36C0 Offset: 0x5F36C0 VA: 0x5F36C0 Slot: 4
	public void Dispose() { }

	[ThreadSafeAttribute] // RVA: 0xBDCA8 Offset: 0xBDCA8 VA: 0xBDCA8
	// RVA: 0x5F3648 Offset: 0x5F3648 VA: 0x5F3648
	internal static void Internal_Destroy(IntPtr ptr) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBDCB8 Offset: 0xBDCB8 VA: 0xBDCB8
	// RVA: 0x5F36E0 Offset: 0x5F36E0 VA: 0x5F36E0
	internal static void RemoteConfigSettingsUpdated(RemoteConfigSettings rcs, bool wasLastUpdatedFromServer) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1874
{}

// Namespace: UnityEngineInternal
internal static class WebRequestUtils // TypeDefIndex: 1875
{
	// Fields
	private static Regex domainRegex; // 0x0

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xBEFC4 Offset: 0xBEFC4 VA: 0xBEFC4
	// RVA: 0x5F3CD0 Offset: 0x5F3CD0 VA: 0x5F3CD0
	internal static string RedirectTo(string baseUri, string redirectUri) { }

	// RVA: 0x5F3E14 Offset: 0x5F3E14 VA: 0x5F3E14
	private static void .cctor() { }
}

// Namespace: UnityEngine.Networking
[NativeHeaderAttribute] // RVA: 0xBEF90 Offset: 0xBEF90 VA: 0xBEF90
public class CertificateHandler : IDisposable // TypeDefIndex: 1876
{
	// Fields
	internal IntPtr m_Ptr; // 0x8

	// Methods

	[NativeMethodAttribute] // RVA: 0xBEFD4 Offset: 0xBEFD4 VA: 0xBEFD4
	// RVA: 0x5F3B40 Offset: 0x5F3B40 VA: 0x5F3B40
	private void Release() { }

	// RVA: 0x5F3BE0 Offset: 0x5F3BE0 VA: 0x5F3BE0 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x5F3CB8 Offset: 0x5F3CB8 VA: 0x5F3CB8 Slot: 5
	protected virtual bool ValidateCertificate(byte[] certificateData) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBF004 Offset: 0xBF004 VA: 0xBF004
	// RVA: 0x5F3CC0 Offset: 0x5F3CC0 VA: 0x5F3CC0
	internal bool ValidateCertificateNative(byte[] certificateData) { }

	// RVA: 0x5F3C44 Offset: 0x5F3C44 VA: 0x5F3C44 Slot: 4
	public void Dispose() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1877
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 1878
{}

// Namespace: UnityEngine.EventSystems
[FlagsAttribute] // RVA: 0xC03B4 Offset: 0xC03B4 VA: 0xC03B4
public enum EventHandle // TypeDefIndex: 1879
{
	// Fields
	public int value__; // 0x0
	public const EventHandle Unused = 0;
	public const EventHandle Used = 1;
}

// Namespace: UnityEngine.EventSystems
public interface IEventSystemHandler // TypeDefIndex: 1880
{}

// Namespace: UnityEngine.EventSystems
public interface IPointerEnterHandler : IEventSystemHandler // TypeDefIndex: 1881
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnPointerEnter(PointerEventData eventData);
}

// Namespace: UnityEngine.EventSystems
public interface IPointerExitHandler : IEventSystemHandler // TypeDefIndex: 1882
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnPointerExit(PointerEventData eventData);
}

// Namespace: UnityEngine.EventSystems
public interface IPointerDownHandler : IEventSystemHandler // TypeDefIndex: 1883
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnPointerDown(PointerEventData eventData);
}

// Namespace: UnityEngine.EventSystems
public interface IPointerUpHandler : IEventSystemHandler // TypeDefIndex: 1884
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnPointerUp(PointerEventData eventData);
}

// Namespace: UnityEngine.EventSystems
public interface IPointerClickHandler : IEventSystemHandler // TypeDefIndex: 1885
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnPointerClick(PointerEventData eventData);
}

// Namespace: UnityEngine.EventSystems
public interface IBeginDragHandler : IEventSystemHandler // TypeDefIndex: 1886
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnBeginDrag(PointerEventData eventData);
}

// Namespace: UnityEngine.EventSystems
public interface IInitializePotentialDragHandler : IEventSystemHandler // TypeDefIndex: 1887
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnInitializePotentialDrag(PointerEventData eventData);
}

// Namespace: UnityEngine.EventSystems
public interface IDragHandler : IEventSystemHandler // TypeDefIndex: 1888
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnDrag(PointerEventData eventData);
}

// Namespace: UnityEngine.EventSystems
public interface IEndDragHandler : IEventSystemHandler // TypeDefIndex: 1889
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnEndDrag(PointerEventData eventData);
}

// Namespace: UnityEngine.EventSystems
public interface IDropHandler : IEventSystemHandler // TypeDefIndex: 1890
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnDrop(PointerEventData eventData);
}

// Namespace: UnityEngine.EventSystems
public interface IScrollHandler : IEventSystemHandler // TypeDefIndex: 1891
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnScroll(PointerEventData eventData);
}

// Namespace: UnityEngine.EventSystems
public interface IUpdateSelectedHandler : IEventSystemHandler // TypeDefIndex: 1892
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnUpdateSelected(BaseEventData eventData);
}

// Namespace: UnityEngine.EventSystems
public interface ISelectHandler : IEventSystemHandler // TypeDefIndex: 1893
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnSelect(BaseEventData eventData);
}

// Namespace: UnityEngine.EventSystems
public interface IDeselectHandler : IEventSystemHandler // TypeDefIndex: 1894
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnDeselect(BaseEventData eventData);
}

// Namespace: UnityEngine.EventSystems
public interface IMoveHandler : IEventSystemHandler // TypeDefIndex: 1895
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnMove(AxisEventData eventData);
}

// Namespace: UnityEngine.EventSystems
public interface ISubmitHandler : IEventSystemHandler // TypeDefIndex: 1896
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnSubmit(BaseEventData eventData);
}

// Namespace: UnityEngine.EventSystems
public interface ICancelHandler : IEventSystemHandler // TypeDefIndex: 1897
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnCancel(BaseEventData eventData);
}

// Namespace: UnityEngine.EventSystems
[AddComponentMenu] // RVA: 0xC03C4 Offset: 0xC03C4 VA: 0xC03C4
public class EventSystem : UIBehaviour // TypeDefIndex: 1898
{
	// Fields
	private List<BaseInputModule> m_SystemInputModules; // 0xC
	private BaseInputModule m_CurrentInputModule; // 0x10
	private static List<EventSystem> m_EventSystems; // 0x0
	[SerializeField] // RVA: 0xC175C Offset: 0xC175C VA: 0xC175C
	[FormerlySerializedAsAttribute] // RVA: 0xC175C Offset: 0xC175C VA: 0xC175C
	private GameObject m_FirstSelected; // 0x14
	[SerializeField] // RVA: 0xC17A8 Offset: 0xC17A8 VA: 0xC17A8
	private bool m_sendNavigationEvents; // 0x18
	[SerializeField] // RVA: 0xC17B8 Offset: 0xC17B8 VA: 0xC17B8
	private int m_DragThreshold; // 0x1C
	private GameObject m_CurrentSelected; // 0x20
	private bool m_HasFocus; // 0x24
	private bool m_SelectionGuard; // 0x25
	private BaseEventData m_DummyData; // 0x28
	private static readonly Comparison<RaycastResult> s_RaycastComparer; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xC17C8 Offset: 0xC17C8 VA: 0xC17C8
	private static Comparison<RaycastResult> <>f__mg$cache0; // 0x8

	// Properties
	public static EventSystem current { get; set; }
	public bool sendNavigationEvents { get; set; }
	public int pixelDragThreshold { get; set; }
	public BaseInputModule currentInputModule { get; }
	public GameObject firstSelectedGameObject { get; set; }
	public GameObject currentSelectedGameObject { get; }
	[ObsoleteAttribute] // RVA: 0xC47DC Offset: 0xC47DC VA: 0xC47DC
	public GameObject lastSelectedGameObject { get; }
	public bool isFocused { get; }
	public bool alreadySelecting { get; }
	private BaseEventData baseEventDataCache { get; }

	// Methods

	// RVA: 0x1B8EC4 Offset: 0x1B8EC4 VA: 0x1B8EC4
	protected void .ctor() { }

	// RVA: 0x1B8F64 Offset: 0x1B8F64 VA: 0x1B8F64
	public static EventSystem get_current() { }

	// RVA: 0x1B9098 Offset: 0x1B9098 VA: 0x1B9098
	public static void set_current(EventSystem value) { }

	// RVA: 0x1B9218 Offset: 0x1B9218 VA: 0x1B9218
	public bool get_sendNavigationEvents() { }

	// RVA: 0x1B9220 Offset: 0x1B9220 VA: 0x1B9220
	public void set_sendNavigationEvents(bool value) { }

	// RVA: 0x1B9228 Offset: 0x1B9228 VA: 0x1B9228
	public int get_pixelDragThreshold() { }

	// RVA: 0x1B9230 Offset: 0x1B9230 VA: 0x1B9230
	public void set_pixelDragThreshold(int value) { }

	// RVA: 0x1B6D68 Offset: 0x1B6D68 VA: 0x1B6D68
	public BaseInputModule get_currentInputModule() { }

	// RVA: 0x1B9238 Offset: 0x1B9238 VA: 0x1B9238
	public GameObject get_firstSelectedGameObject() { }

	// RVA: 0x1B9240 Offset: 0x1B9240 VA: 0x1B9240
	public void set_firstSelectedGameObject(GameObject value) { }

	// RVA: 0x1B6D94 Offset: 0x1B6D94 VA: 0x1B6D94
	public GameObject get_currentSelectedGameObject() { }

	// RVA: 0x1B9248 Offset: 0x1B9248 VA: 0x1B9248
	public GameObject get_lastSelectedGameObject() { }

	// RVA: 0x1B9250 Offset: 0x1B9250 VA: 0x1B9250
	public bool get_isFocused() { }

	// RVA: 0x1B7504 Offset: 0x1B7504 VA: 0x1B7504
	public void UpdateModules() { }

	// RVA: 0x1B9258 Offset: 0x1B9258 VA: 0x1B9258
	public bool get_alreadySelecting() { }

	// RVA: 0x1B6DD4 Offset: 0x1B6DD4 VA: 0x1B6DD4
	public void SetSelectedGameObject(GameObject selected, BaseEventData pointer) { }

	// RVA: 0x1B9378 Offset: 0x1B9378 VA: 0x1B9378
	private BaseEventData get_baseEventDataCache() { }

	// RVA: 0x1B93FC Offset: 0x1B93FC VA: 0x1B93FC
	public void SetSelectedGameObject(GameObject selected) { }

	// RVA: 0x1B9424 Offset: 0x1B9424 VA: 0x1B9424
	private static int RaycastComparer(RaycastResult lhs, RaycastResult rhs) { }

	// RVA: 0x1B9948 Offset: 0x1B9948 VA: 0x1B9948
	public void RaycastAll(PointerEventData eventData, List<RaycastResult> raycastResults) { }

	// RVA: 0x1B9BFC Offset: 0x1B9BFC VA: 0x1B9BFC
	public bool IsPointerOverGameObject() { }

	// RVA: 0x1B9C04 Offset: 0x1B9C04 VA: 0x1B9C04
	public bool IsPointerOverGameObject(int pointerId) { }

	// RVA: 0x1B9CD0 Offset: 0x1B9CD0 VA: 0x1B9CD0 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x1B9D8C Offset: 0x1B9D8C VA: 0x1B9D8C Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x1B9EC0 Offset: 0x1B9EC0 VA: 0x1B9EC0
	private void TickModules() { }

	// RVA: 0x1BA024 Offset: 0x1BA024 VA: 0x1BA024 Slot: 17
	protected virtual void OnApplicationFocus(bool hasFocus) { }

	// RVA: 0x1BA02C Offset: 0x1BA02C VA: 0x1BA02C Slot: 18
	protected virtual void Update() { }

	// RVA: 0x1BA3A0 Offset: 0x1BA3A0 VA: 0x1BA3A0
	private void ChangeEventModule(BaseInputModule module) { }

	// RVA: 0x1BA514 Offset: 0x1BA514 VA: 0x1BA514 Slot: 3
	public override string ToString() { }

	// RVA: 0x1BA710 Offset: 0x1BA710 VA: 0x1BA710
	private static void .cctor() { }
}

// Namespace: UnityEngine.EventSystems
[AddComponentMenu] // RVA: 0xC0404 Offset: 0xC0404 VA: 0xC0404
public class EventTrigger : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, IPointerClickHandler, IInitializePotentialDragHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IDropHandler, IScrollHandler, IUpdateSelectedHandler, ISelectHandler, IDeselectHandler, IMoveHandler, ISubmitHandler, ICancelHandler, IEventSystemHandler // TypeDefIndex: 1899
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0xC17D8 Offset: 0xC17D8 VA: 0xC17D8
	[SerializeField] // RVA: 0xC17D8 Offset: 0xC17D8 VA: 0xC17D8
	private List<EventTrigger.Entry> m_Delegates; // 0xC
	[EditorBrowsableAttribute] // RVA: 0xC1824 Offset: 0xC1824 VA: 0xC1824
	[ObsoleteAttribute] // RVA: 0xC1824 Offset: 0xC1824 VA: 0xC1824
	public List<EventTrigger.Entry> delegates; // 0x10

	// Properties
	public List<EventTrigger.Entry> triggers { get; set; }

	// Methods

	// RVA: 0x1BA81C Offset: 0x1BA81C VA: 0x1BA81C
	protected void .ctor() { }

	// RVA: 0x1BA824 Offset: 0x1BA824 VA: 0x1BA824
	public List<EventTrigger.Entry> get_triggers() { }

	// RVA: 0x1BA8B4 Offset: 0x1BA8B4 VA: 0x1BA8B4
	public void set_triggers(List<EventTrigger.Entry> value) { }

	// RVA: 0x1BA8BC Offset: 0x1BA8BC VA: 0x1BA8BC
	private void Execute(EventTriggerType id, BaseEventData eventData) { }

	// RVA: 0x1BA9E0 Offset: 0x1BA9E0 VA: 0x1BA9E0 Slot: 21
	public virtual void OnPointerEnter(PointerEventData eventData) { }

	// RVA: 0x1BA9EC Offset: 0x1BA9EC VA: 0x1BA9EC Slot: 22
	public virtual void OnPointerExit(PointerEventData eventData) { }

	// RVA: 0x1BA9F8 Offset: 0x1BA9F8 VA: 0x1BA9F8 Slot: 23
	public virtual void OnDrag(PointerEventData eventData) { }

	// RVA: 0x1BAA04 Offset: 0x1BAA04 VA: 0x1BAA04 Slot: 24
	public virtual void OnDrop(PointerEventData eventData) { }

	// RVA: 0x1BAA10 Offset: 0x1BAA10 VA: 0x1BAA10 Slot: 25
	public virtual void OnPointerDown(PointerEventData eventData) { }

	// RVA: 0x1BAA1C Offset: 0x1BAA1C VA: 0x1BAA1C Slot: 26
	public virtual void OnPointerUp(PointerEventData eventData) { }

	// RVA: 0x1BAA28 Offset: 0x1BAA28 VA: 0x1BAA28 Slot: 27
	public virtual void OnPointerClick(PointerEventData eventData) { }

	// RVA: 0x1BAA34 Offset: 0x1BAA34 VA: 0x1BAA34 Slot: 28
	public virtual void OnSelect(BaseEventData eventData) { }

	// RVA: 0x1BAA40 Offset: 0x1BAA40 VA: 0x1BAA40 Slot: 29
	public virtual void OnDeselect(BaseEventData eventData) { }

	// RVA: 0x1BAA4C Offset: 0x1BAA4C VA: 0x1BAA4C Slot: 30
	public virtual void OnScroll(PointerEventData eventData) { }

	// RVA: 0x1BAA58 Offset: 0x1BAA58 VA: 0x1BAA58 Slot: 31
	public virtual void OnMove(AxisEventData eventData) { }

	// RVA: 0x1BAA64 Offset: 0x1BAA64 VA: 0x1BAA64 Slot: 32
	public virtual void OnUpdateSelected(BaseEventData eventData) { }

	// RVA: 0x1BAA70 Offset: 0x1BAA70 VA: 0x1BAA70 Slot: 33
	public virtual void OnInitializePotentialDrag(PointerEventData eventData) { }

	// RVA: 0x1BAA7C Offset: 0x1BAA7C VA: 0x1BAA7C Slot: 34
	public virtual void OnBeginDrag(PointerEventData eventData) { }

	// RVA: 0x1BAA88 Offset: 0x1BAA88 VA: 0x1BAA88 Slot: 35
	public virtual void OnEndDrag(PointerEventData eventData) { }

	// RVA: 0x1BAA94 Offset: 0x1BAA94 VA: 0x1BAA94 Slot: 36
	public virtual void OnSubmit(BaseEventData eventData) { }

	// RVA: 0x1BAAA0 Offset: 0x1BAAA0 VA: 0x1BAAA0 Slot: 37
	public virtual void OnCancel(BaseEventData eventData) { }
}

// Namespace: 
[Serializable]
public class EventTrigger.TriggerEvent : UnityEvent<BaseEventData> // TypeDefIndex: 1900
{
	// Methods

	// RVA: 0x1BAB2C Offset: 0x1BAB2C VA: 0x1BAB2C
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class EventTrigger.Entry // TypeDefIndex: 1901
{
	// Fields
	public EventTriggerType eventID; // 0x8
	public EventTrigger.TriggerEvent callback; // 0xC

	// Methods

	// RVA: 0x1BAAAC Offset: 0x1BAAAC VA: 0x1BAAAC
	public void .ctor() { }
}

// Namespace: UnityEngine.EventSystems
public enum EventTriggerType // TypeDefIndex: 1902
{
	// Fields
	public int value__; // 0x0
	public const EventTriggerType PointerEnter = 0;
	public const EventTriggerType PointerExit = 1;
	public const EventTriggerType PointerDown = 2;
	public const EventTriggerType PointerUp = 3;
	public const EventTriggerType PointerClick = 4;
	public const EventTriggerType Drag = 5;
	public const EventTriggerType Drop = 6;
	public const EventTriggerType Scroll = 7;
	public const EventTriggerType UpdateSelected = 8;
	public const EventTriggerType Select = 9;
	public const EventTriggerType Deselect = 10;
	public const EventTriggerType Move = 11;
	public const EventTriggerType InitializePotentialDrag = 12;
	public const EventTriggerType BeginDrag = 13;
	public const EventTriggerType EndDrag = 14;
	public const EventTriggerType Submit = 15;
	public const EventTriggerType Cancel = 16;
}

// Namespace: UnityEngine.EventSystems
public static class ExecuteEvents // TypeDefIndex: 1903
{
	// Fields
	private static readonly ExecuteEvents.EventFunction<IPointerEnterHandler> s_PointerEnterHandler; // 0x0
	private static readonly ExecuteEvents.EventFunction<IPointerExitHandler> s_PointerExitHandler; // 0x4
	private static readonly ExecuteEvents.EventFunction<IPointerDownHandler> s_PointerDownHandler; // 0x8
	private static readonly ExecuteEvents.EventFunction<IPointerUpHandler> s_PointerUpHandler; // 0xC
	private static readonly ExecuteEvents.EventFunction<IPointerClickHandler> s_PointerClickHandler; // 0x10
	private static readonly ExecuteEvents.EventFunction<IInitializePotentialDragHandler> s_InitializePotentialDragHandler; // 0x14
	private static readonly ExecuteEvents.EventFunction<IBeginDragHandler> s_BeginDragHandler; // 0x18
	private static readonly ExecuteEvents.EventFunction<IDragHandler> s_DragHandler; // 0x1C
	private static readonly ExecuteEvents.EventFunction<IEndDragHandler> s_EndDragHandler; // 0x20
	private static readonly ExecuteEvents.EventFunction<IDropHandler> s_DropHandler; // 0x24
	private static readonly ExecuteEvents.EventFunction<IScrollHandler> s_ScrollHandler; // 0x28
	private static readonly ExecuteEvents.EventFunction<IUpdateSelectedHandler> s_UpdateSelectedHandler; // 0x2C
	private static readonly ExecuteEvents.EventFunction<ISelectHandler> s_SelectHandler; // 0x30
	private static readonly ExecuteEvents.EventFunction<IDeselectHandler> s_DeselectHandler; // 0x34
	private static readonly ExecuteEvents.EventFunction<IMoveHandler> s_MoveHandler; // 0x38
	private static readonly ExecuteEvents.EventFunction<ISubmitHandler> s_SubmitHandler; // 0x3C
	private static readonly ExecuteEvents.EventFunction<ICancelHandler> s_CancelHandler; // 0x40
	private static readonly ObjectPool<List<IEventSystemHandler>> s_HandlerListPool; // 0x44
	private static readonly List<Transform> s_InternalTransformList; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC18A8 Offset: 0xC18A8 VA: 0xC18A8
	private static ExecuteEvents.EventFunction<IPointerEnterHandler> <>f__mg$cache0; // 0x4C
	[CompilerGeneratedAttribute] // RVA: 0xC18B8 Offset: 0xC18B8 VA: 0xC18B8
	private static ExecuteEvents.EventFunction<IPointerExitHandler> <>f__mg$cache1; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xC18C8 Offset: 0xC18C8 VA: 0xC18C8
	private static ExecuteEvents.EventFunction<IPointerDownHandler> <>f__mg$cache2; // 0x54
	[CompilerGeneratedAttribute] // RVA: 0xC18D8 Offset: 0xC18D8 VA: 0xC18D8
	private static ExecuteEvents.EventFunction<IPointerUpHandler> <>f__mg$cache3; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xC18E8 Offset: 0xC18E8 VA: 0xC18E8
	private static ExecuteEvents.EventFunction<IPointerClickHandler> <>f__mg$cache4; // 0x5C
	[CompilerGeneratedAttribute] // RVA: 0xC18F8 Offset: 0xC18F8 VA: 0xC18F8
	private static ExecuteEvents.EventFunction<IInitializePotentialDragHandler> <>f__mg$cache5; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xC1908 Offset: 0xC1908 VA: 0xC1908
	private static ExecuteEvents.EventFunction<IBeginDragHandler> <>f__mg$cache6; // 0x64
	[CompilerGeneratedAttribute] // RVA: 0xC1918 Offset: 0xC1918 VA: 0xC1918
	private static ExecuteEvents.EventFunction<IDragHandler> <>f__mg$cache7; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xC1928 Offset: 0xC1928 VA: 0xC1928
	private static ExecuteEvents.EventFunction<IEndDragHandler> <>f__mg$cache8; // 0x6C
	[CompilerGeneratedAttribute] // RVA: 0xC1938 Offset: 0xC1938 VA: 0xC1938
	private static ExecuteEvents.EventFunction<IDropHandler> <>f__mg$cache9; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xC1948 Offset: 0xC1948 VA: 0xC1948
	private static ExecuteEvents.EventFunction<IScrollHandler> <>f__mg$cacheA; // 0x74
	[CompilerGeneratedAttribute] // RVA: 0xC1958 Offset: 0xC1958 VA: 0xC1958
	private static ExecuteEvents.EventFunction<IUpdateSelectedHandler> <>f__mg$cacheB; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xC1968 Offset: 0xC1968 VA: 0xC1968
	private static ExecuteEvents.EventFunction<ISelectHandler> <>f__mg$cacheC; // 0x7C
	[CompilerGeneratedAttribute] // RVA: 0xC1978 Offset: 0xC1978 VA: 0xC1978
	private static ExecuteEvents.EventFunction<IDeselectHandler> <>f__mg$cacheD; // 0x80
	[CompilerGeneratedAttribute] // RVA: 0xC1988 Offset: 0xC1988 VA: 0xC1988
	private static ExecuteEvents.EventFunction<IMoveHandler> <>f__mg$cacheE; // 0x84
	[CompilerGeneratedAttribute] // RVA: 0xC1998 Offset: 0xC1998 VA: 0xC1998
	private static ExecuteEvents.EventFunction<ISubmitHandler> <>f__mg$cacheF; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xC19A8 Offset: 0xC19A8 VA: 0xC19A8
	private static ExecuteEvents.EventFunction<ICancelHandler> <>f__mg$cache10; // 0x8C

	// Properties
	public static ExecuteEvents.EventFunction<IPointerEnterHandler> pointerEnterHandler { get; }
	public static ExecuteEvents.EventFunction<IPointerExitHandler> pointerExitHandler { get; }
	public static ExecuteEvents.EventFunction<IPointerDownHandler> pointerDownHandler { get; }
	public static ExecuteEvents.EventFunction<IPointerUpHandler> pointerUpHandler { get; }
	public static ExecuteEvents.EventFunction<IPointerClickHandler> pointerClickHandler { get; }
	public static ExecuteEvents.EventFunction<IInitializePotentialDragHandler> initializePotentialDrag { get; }
	public static ExecuteEvents.EventFunction<IBeginDragHandler> beginDragHandler { get; }
	public static ExecuteEvents.EventFunction<IDragHandler> dragHandler { get; }
	public static ExecuteEvents.EventFunction<IEndDragHandler> endDragHandler { get; }
	public static ExecuteEvents.EventFunction<IDropHandler> dropHandler { get; }
	public static ExecuteEvents.EventFunction<IScrollHandler> scrollHandler { get; }
	public static ExecuteEvents.EventFunction<IUpdateSelectedHandler> updateSelectedHandler { get; }
	public static ExecuteEvents.EventFunction<ISelectHandler> selectHandler { get; }
	public static ExecuteEvents.EventFunction<IDeselectHandler> deselectHandler { get; }
	public static ExecuteEvents.EventFunction<IMoveHandler> moveHandler { get; }
	public static ExecuteEvents.EventFunction<ISubmitHandler> submitHandler { get; }
	public static ExecuteEvents.EventFunction<ICancelHandler> cancelHandler { get; }

	// Methods

	// RVA: -1 Offset: -1
	public static T ValidateEventData<T>(BaseEventData data) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BC244 Offset: 0x5BC244 VA: 0x5BC244
	|-ExecuteEvents.ValidateEventData<object>
	|-ExecuteEvents.ValidateEventData<AxisEventData>
	|-ExecuteEvents.ValidateEventData<PointerEventData>
	*/

	// RVA: 0x1BAB90 Offset: 0x1BAB90 VA: 0x1BAB90
	private static void Execute(IPointerEnterHandler handler, BaseEventData eventData) { }

	// RVA: 0x1BACB4 Offset: 0x1BACB4 VA: 0x1BACB4
	private static void Execute(IPointerExitHandler handler, BaseEventData eventData) { }

	// RVA: 0x1BADD8 Offset: 0x1BADD8 VA: 0x1BADD8
	private static void Execute(IPointerDownHandler handler, BaseEventData eventData) { }

	// RVA: 0x1BAEFC Offset: 0x1BAEFC VA: 0x1BAEFC
	private static void Execute(IPointerUpHandler handler, BaseEventData eventData) { }

	// RVA: 0x1BB020 Offset: 0x1BB020 VA: 0x1BB020
	private static void Execute(IPointerClickHandler handler, BaseEventData eventData) { }

	// RVA: 0x1BB144 Offset: 0x1BB144 VA: 0x1BB144
	private static void Execute(IInitializePotentialDragHandler handler, BaseEventData eventData) { }

	// RVA: 0x1BB268 Offset: 0x1BB268 VA: 0x1BB268
	private static void Execute(IBeginDragHandler handler, BaseEventData eventData) { }

	// RVA: 0x1BB38C Offset: 0x1BB38C VA: 0x1BB38C
	private static void Execute(IDragHandler handler, BaseEventData eventData) { }

	// RVA: 0x1BB4B0 Offset: 0x1BB4B0 VA: 0x1BB4B0
	private static void Execute(IEndDragHandler handler, BaseEventData eventData) { }

	// RVA: 0x1BB5D4 Offset: 0x1BB5D4 VA: 0x1BB5D4
	private static void Execute(IDropHandler handler, BaseEventData eventData) { }

	// RVA: 0x1BB6F8 Offset: 0x1BB6F8 VA: 0x1BB6F8
	private static void Execute(IScrollHandler handler, BaseEventData eventData) { }

	// RVA: 0x1BB81C Offset: 0x1BB81C VA: 0x1BB81C
	private static void Execute(IUpdateSelectedHandler handler, BaseEventData eventData) { }

	// RVA: 0x1BB8F8 Offset: 0x1BB8F8 VA: 0x1BB8F8
	private static void Execute(ISelectHandler handler, BaseEventData eventData) { }

	// RVA: 0x1BB9D4 Offset: 0x1BB9D4 VA: 0x1BB9D4
	private static void Execute(IDeselectHandler handler, BaseEventData eventData) { }

	// RVA: 0x1BBAB0 Offset: 0x1BBAB0 VA: 0x1BBAB0
	private static void Execute(IMoveHandler handler, BaseEventData eventData) { }

	// RVA: 0x1BBBD4 Offset: 0x1BBBD4 VA: 0x1BBBD4
	private static void Execute(ISubmitHandler handler, BaseEventData eventData) { }

	// RVA: 0x1BBCB0 Offset: 0x1BBCB0 VA: 0x1BBCB0
	private static void Execute(ICancelHandler handler, BaseEventData eventData) { }

	// RVA: 0x1B8428 Offset: 0x1B8428 VA: 0x1B8428
	public static ExecuteEvents.EventFunction<IPointerEnterHandler> get_pointerEnterHandler() { }

	// RVA: 0x1B8394 Offset: 0x1B8394 VA: 0x1B8394
	public static ExecuteEvents.EventFunction<IPointerExitHandler> get_pointerExitHandler() { }

	// RVA: 0x1BBD8C Offset: 0x1BBD8C VA: 0x1BBD8C
	public static ExecuteEvents.EventFunction<IPointerDownHandler> get_pointerDownHandler() { }

	// RVA: 0x1BBE18 Offset: 0x1BBE18 VA: 0x1BBE18
	public static ExecuteEvents.EventFunction<IPointerUpHandler> get_pointerUpHandler() { }

	// RVA: 0x1BBEA4 Offset: 0x1BBEA4 VA: 0x1BBEA4
	public static ExecuteEvents.EventFunction<IPointerClickHandler> get_pointerClickHandler() { }

	// RVA: 0x1BBF30 Offset: 0x1BBF30 VA: 0x1BBF30
	public static ExecuteEvents.EventFunction<IInitializePotentialDragHandler> get_initializePotentialDrag() { }

	// RVA: 0x1BBFBC Offset: 0x1BBFBC VA: 0x1BBFBC
	public static ExecuteEvents.EventFunction<IBeginDragHandler> get_beginDragHandler() { }

	// RVA: 0x1BC048 Offset: 0x1BC048 VA: 0x1BC048
	public static ExecuteEvents.EventFunction<IDragHandler> get_dragHandler() { }

	// RVA: 0x1BC0D4 Offset: 0x1BC0D4 VA: 0x1BC0D4
	public static ExecuteEvents.EventFunction<IEndDragHandler> get_endDragHandler() { }

	// RVA: 0x1BC160 Offset: 0x1BC160 VA: 0x1BC160
	public static ExecuteEvents.EventFunction<IDropHandler> get_dropHandler() { }

	// RVA: 0x1BC1EC Offset: 0x1BC1EC VA: 0x1BC1EC
	public static ExecuteEvents.EventFunction<IScrollHandler> get_scrollHandler() { }

	// RVA: 0x1BC278 Offset: 0x1BC278 VA: 0x1BC278
	public static ExecuteEvents.EventFunction<IUpdateSelectedHandler> get_updateSelectedHandler() { }

	// RVA: 0x1B92EC Offset: 0x1B92EC VA: 0x1B92EC
	public static ExecuteEvents.EventFunction<ISelectHandler> get_selectHandler() { }

	// RVA: 0x1B9260 Offset: 0x1B9260 VA: 0x1B9260
	public static ExecuteEvents.EventFunction<IDeselectHandler> get_deselectHandler() { }

	// RVA: 0x1BC304 Offset: 0x1BC304 VA: 0x1BC304
	public static ExecuteEvents.EventFunction<IMoveHandler> get_moveHandler() { }

	// RVA: 0x1BC390 Offset: 0x1BC390 VA: 0x1BC390
	public static ExecuteEvents.EventFunction<ISubmitHandler> get_submitHandler() { }

	// RVA: 0x1BC41C Offset: 0x1BC41C VA: 0x1BC41C
	public static ExecuteEvents.EventFunction<ICancelHandler> get_cancelHandler() { }

	// RVA: 0x1BC4A8 Offset: 0x1BC4A8 VA: 0x1BC4A8
	private static void GetEventChain(GameObject root, IList<Transform> eventChain) { }

	// RVA: -1 Offset: -1
	public static bool Execute<T>(GameObject target, BaseEventData eventData, ExecuteEvents.EventFunction<T> functor) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3A9B34 Offset: 0x3A9B34 VA: 0x3A9B34
	|-ExecuteEvents.Execute<object>
	|-ExecuteEvents.Execute<IBeginDragHandler>
	|-ExecuteEvents.Execute<ICancelHandler>
	|-ExecuteEvents.Execute<IDeselectHandler>
	|-ExecuteEvents.Execute<IDragHandler>
	|-ExecuteEvents.Execute<IEndDragHandler>
	|-ExecuteEvents.Execute<IInitializePotentialDragHandler>
	|-ExecuteEvents.Execute<IMoveHandler>
	|-ExecuteEvents.Execute<IPointerClickHandler>
	|-ExecuteEvents.Execute<IPointerEnterHandler>
	|-ExecuteEvents.Execute<IPointerExitHandler>
	|-ExecuteEvents.Execute<IPointerUpHandler>
	|-ExecuteEvents.Execute<ISelectHandler>
	|-ExecuteEvents.Execute<ISubmitHandler>
	|-ExecuteEvents.Execute<IUpdateSelectedHandler>
	*/

	// RVA: -1 Offset: -1
	public static GameObject ExecuteHierarchy<T>(GameObject root, BaseEventData eventData, ExecuteEvents.EventFunction<T> callbackFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BE774 Offset: 0x5BE774 VA: 0x5BE774
	|-ExecuteEvents.ExecuteHierarchy<object>
	|-ExecuteEvents.ExecuteHierarchy<IDropHandler>
	|-ExecuteEvents.ExecuteHierarchy<IPointerDownHandler>
	|-ExecuteEvents.ExecuteHierarchy<IPointerExitHandler>
	|-ExecuteEvents.ExecuteHierarchy<IScrollHandler>
	*/

	// RVA: -1 Offset: -1
	private static bool ShouldSendToComponent<T>(Component component) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3AA100 Offset: 0x3AA100 VA: 0x3AA100
	|-ExecuteEvents.ShouldSendToComponent<object>
	*/

	// RVA: -1 Offset: -1
	private static void GetEventList<T>(GameObject go, IList<IEventSystemHandler> results) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5128F0 Offset: 0x5128F0 VA: 0x5128F0
	|-ExecuteEvents.GetEventList<object>
	*/

	// RVA: -1 Offset: -1
	public static bool CanHandleEvent<T>(GameObject go) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3A99E0 Offset: 0x3A99E0 VA: 0x3A99E0
	|-ExecuteEvents.CanHandleEvent<object>
	*/

	// RVA: -1 Offset: -1
	public static GameObject GetEventHandler<T>(GameObject root) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BE988 Offset: 0x5BE988 VA: 0x5BE988
	|-ExecuteEvents.GetEventHandler<object>
	|-ExecuteEvents.GetEventHandler<IDragHandler>
	|-ExecuteEvents.GetEventHandler<IPointerClickHandler>
	|-ExecuteEvents.GetEventHandler<IScrollHandler>
	|-ExecuteEvents.GetEventHandler<ISelectHandler>
	*/

	// RVA: 0x1BC6E0 Offset: 0x1BC6E0 VA: 0x1BC6E0
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3CE0 Offset: 0xC3CE0 VA: 0xC3CE0
	// RVA: 0x1BD014 Offset: 0x1BD014 VA: 0x1BD014
	private static void <s_HandlerListPool>m__0(List<IEventSystemHandler> l) { }
}

// Namespace: 
public sealed class ExecuteEvents.EventFunction<T1> : MulticastDelegate // TypeDefIndex: 1904
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x577064 Offset: 0x577064 VA: 0x577064
	|-ExecuteEvents.EventFunction<object>..ctor
	|-ExecuteEvents.EventFunction<IBeginDragHandler>..ctor
	|-ExecuteEvents.EventFunction<ICancelHandler>..ctor
	|-ExecuteEvents.EventFunction<IDeselectHandler>..ctor
	|-ExecuteEvents.EventFunction<IDragHandler>..ctor
	|-ExecuteEvents.EventFunction<IDropHandler>..ctor
	|-ExecuteEvents.EventFunction<IEndDragHandler>..ctor
	|-ExecuteEvents.EventFunction<IInitializePotentialDragHandler>..ctor
	|-ExecuteEvents.EventFunction<IMoveHandler>..ctor
	|-ExecuteEvents.EventFunction<IPointerClickHandler>..ctor
	|-ExecuteEvents.EventFunction<IPointerDownHandler>..ctor
	|-ExecuteEvents.EventFunction<IPointerEnterHandler>..ctor
	|-ExecuteEvents.EventFunction<IPointerExitHandler>..ctor
	|-ExecuteEvents.EventFunction<IPointerUpHandler>..ctor
	|-ExecuteEvents.EventFunction<IScrollHandler>..ctor
	|-ExecuteEvents.EventFunction<ISelectHandler>..ctor
	|-ExecuteEvents.EventFunction<ISubmitHandler>..ctor
	|-ExecuteEvents.EventFunction<IUpdateSelectedHandler>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual void Invoke(T1 handler, BaseEventData eventData) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x577078 Offset: 0x577078 VA: 0x577078
	|-ExecuteEvents.EventFunction<object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T1 handler, BaseEventData eventData, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x577454 Offset: 0x577454 VA: 0x577454
	|-ExecuteEvents.EventFunction<object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x57748C Offset: 0x57748C VA: 0x57748C
	|-ExecuteEvents.EventFunction<object>.EndInvoke
	*/
}

// Namespace: UnityEngine.EventSystems
public enum MoveDirection // TypeDefIndex: 1905
{
	// Fields
	public int value__; // 0x0
	public const MoveDirection Left = 0;
	public const MoveDirection Up = 1;
	public const MoveDirection Right = 2;
	public const MoveDirection Down = 3;
	public const MoveDirection None = 4;
}

// Namespace: UnityEngine.EventSystems
internal static class RaycasterManager // TypeDefIndex: 1906
{
	// Fields
	private static readonly List<BaseRaycaster> s_Raycasters; // 0x0

	// Methods

	// RVA: 0x1B8BDC Offset: 0x1B8BDC VA: 0x1B8BDC
	public static void AddRaycaster(BaseRaycaster baseRaycaster) { }

	// RVA: 0x1B9B70 Offset: 0x1B9B70 VA: 0x1B9B70
	public static List<BaseRaycaster> GetRaycasters() { }

	// RVA: 0x1B8D90 Offset: 0x1B8D90 VA: 0x1B8D90
	public static void RemoveRaycasters(BaseRaycaster baseRaycaster) { }

	// RVA: 0x1C2004 Offset: 0x1C2004 VA: 0x1C2004
	private static void .cctor() { }
}

// Namespace: UnityEngine.EventSystems
public struct RaycastResult // TypeDefIndex: 1907
{
	// Fields
	private GameObject m_GameObject; // 0x0
	public BaseRaycaster module; // 0x4
	public float distance; // 0x8
	public float index; // 0xC
	public int depth; // 0x10
	public int sortingLayer; // 0x14
	public int sortingOrder; // 0x18
	public Vector3 worldPosition; // 0x1C
	public Vector3 worldNormal; // 0x28
	public Vector2 screenPosition; // 0x34
	internal int displayIndex; // 0x3C

	// Properties
	public GameObject gameObject { get; set; }
	public bool isValid { get; }

	// Methods

	// RVA: 0xC5124 Offset: 0xC5124 VA: 0xC5124
	public GameObject get_gameObject() { }

	// RVA: 0xC512C Offset: 0xC512C VA: 0xC512C
	public void set_gameObject(GameObject value) { }

	// RVA: 0xC5134 Offset: 0xC5134 VA: 0xC5134
	public bool get_isValid() { }

	// RVA: 0xC513C Offset: 0xC513C VA: 0xC513C
	public void Clear() { }

	// RVA: 0xC5144 Offset: 0xC5144 VA: 0xC5144 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine.EventSystems
public abstract class UIBehaviour : MonoBehaviour // TypeDefIndex: 1908
{
	// Methods

	// RVA: 0x1B6FB4 Offset: 0x1B6FB4 VA: 0x1B6FB4
	protected void .ctor() { }

	// RVA: 0x1C57FC Offset: 0x1C57FC VA: 0x1C57FC Slot: 4
	protected virtual void Awake() { }

	// RVA: 0x1B7500 Offset: 0x1B7500 VA: 0x1B7500 Slot: 5
	protected virtual void OnEnable() { }

	// RVA: 0x1C5800 Offset: 0x1C5800 VA: 0x1C5800 Slot: 6
	protected virtual void Start() { }

	// RVA: 0x1B76E4 Offset: 0x1B76E4 VA: 0x1B76E4 Slot: 7
	protected virtual void OnDisable() { }

	// RVA: 0x1C5804 Offset: 0x1C5804 VA: 0x1C5804 Slot: 8
	protected virtual void OnDestroy() { }

	// RVA: 0x1C5808 Offset: 0x1C5808 VA: 0x1C5808 Slot: 9
	public virtual bool IsActive() { }

	// RVA: 0x1C5810 Offset: 0x1C5810 VA: 0x1C5810 Slot: 10
	protected virtual void OnRectTransformDimensionsChange() { }

	// RVA: 0x1C5814 Offset: 0x1C5814 VA: 0x1C5814 Slot: 11
	protected virtual void OnBeforeTransformParentChanged() { }

	// RVA: 0x1C5818 Offset: 0x1C5818 VA: 0x1C5818 Slot: 12
	protected virtual void OnTransformParentChanged() { }

	// RVA: 0x1C581C Offset: 0x1C581C VA: 0x1C581C Slot: 13
	protected virtual void OnDidApplyAnimationProperties() { }

	// RVA: 0x1C5820 Offset: 0x1C5820 VA: 0x1C5820 Slot: 14
	protected virtual void OnCanvasGroupChanged() { }

	// RVA: 0x1C5824 Offset: 0x1C5824 VA: 0x1C5824 Slot: 15
	protected virtual void OnCanvasHierarchyChanged() { }

	// RVA: 0x1C5828 Offset: 0x1C5828 VA: 0x1C5828 Slot: 16
	public bool IsDestroyed() { }
}

// Namespace: UnityEngine.EventSystems
public class AxisEventData : BaseEventData // TypeDefIndex: 1909
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC19B8 Offset: 0xC19B8 VA: 0xC19B8
	[DebuggerBrowsableAttribute] // RVA: 0xC19B8 Offset: 0xC19B8 VA: 0xC19B8
	private Vector2 <moveVector>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC19EC Offset: 0xC19EC VA: 0xC19EC
	[DebuggerBrowsableAttribute] // RVA: 0xC19EC Offset: 0xC19EC VA: 0xC19EC
	private MoveDirection <moveDir>k__BackingField; // 0x18

	// Properties
	public Vector2 moveVector { get; set; }
	public MoveDirection moveDir { get; set; }

	// Methods

	// RVA: 0x1B6C44 Offset: 0x1B6C44 VA: 0x1B6C44
	public void .ctor(EventSystem eventSystem) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3CF0 Offset: 0xC3CF0 VA: 0xC3CF0
	// RVA: 0x1B6D28 Offset: 0x1B6D28 VA: 0x1B6D28
	public Vector2 get_moveVector() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3D00 Offset: 0xC3D00 VA: 0xC3D00
	// RVA: 0x1B6D14 Offset: 0x1B6D14 VA: 0x1B6D14
	public void set_moveVector(Vector2 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3D10 Offset: 0xC3D10 VA: 0xC3D10
	// RVA: 0x1B6D3C Offset: 0x1B6D3C VA: 0x1B6D3C
	public MoveDirection get_moveDir() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3D20 Offset: 0xC3D20 VA: 0xC3D20
	// RVA: 0x1B6D20 Offset: 0x1B6D20 VA: 0x1B6D20
	public void set_moveDir(MoveDirection value) { }
}

// Namespace: UnityEngine.EventSystems
public abstract class AbstractEventData // TypeDefIndex: 1910
{
	// Fields
	protected bool m_Used; // 0x8

	// Properties
	public virtual bool used { get; }

	// Methods

	// RVA: 0x1B6C1C Offset: 0x1B6C1C VA: 0x1B6C1C
	protected void .ctor() { }

	// RVA: 0x1B6C24 Offset: 0x1B6C24 VA: 0x1B6C24 Slot: 4
	public virtual void Reset() { }

	// RVA: 0x1B6C30 Offset: 0x1B6C30 VA: 0x1B6C30 Slot: 5
	public virtual void Use() { }

	// RVA: 0x1B6C3C Offset: 0x1B6C3C VA: 0x1B6C3C Slot: 6
	public virtual bool get_used() { }
}

// Namespace: UnityEngine.EventSystems
public class BaseEventData : AbstractEventData // TypeDefIndex: 1911
{
	// Fields
	private readonly EventSystem m_EventSystem; // 0xC

	// Properties
	public BaseInputModule currentInputModule { get; }
	public GameObject selectedObject { get; set; }

	// Methods

	// RVA: 0x1B6CF4 Offset: 0x1B6CF4 VA: 0x1B6CF4
	public void .ctor(EventSystem eventSystem) { }

	// RVA: 0x1B6D44 Offset: 0x1B6D44 VA: 0x1B6D44
	public BaseInputModule get_currentInputModule() { }

	// RVA: 0x1B6D70 Offset: 0x1B6D70 VA: 0x1B6D70
	public GameObject get_selectedObject() { }

	// RVA: 0x1B6D9C Offset: 0x1B6D9C VA: 0x1B6D9C
	public void set_selectedObject(GameObject value) { }
}

// Namespace: UnityEngine.EventSystems
public class PointerEventData : BaseEventData // TypeDefIndex: 1912
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC1A20 Offset: 0xC1A20 VA: 0xC1A20
	[DebuggerBrowsableAttribute] // RVA: 0xC1A20 Offset: 0xC1A20 VA: 0xC1A20
	private GameObject <pointerEnter>k__BackingField; // 0x10
	private GameObject m_PointerPress; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xC1A54 Offset: 0xC1A54 VA: 0xC1A54
	[DebuggerBrowsableAttribute] // RVA: 0xC1A54 Offset: 0xC1A54 VA: 0xC1A54
	private GameObject <lastPress>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC1A88 Offset: 0xC1A88 VA: 0xC1A88
	[DebuggerBrowsableAttribute] // RVA: 0xC1A88 Offset: 0xC1A88 VA: 0xC1A88
	private GameObject <rawPointerPress>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xC1ABC Offset: 0xC1ABC VA: 0xC1ABC
	[DebuggerBrowsableAttribute] // RVA: 0xC1ABC Offset: 0xC1ABC VA: 0xC1ABC
	private GameObject <pointerDrag>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC1AF0 Offset: 0xC1AF0 VA: 0xC1AF0
	[DebuggerBrowsableAttribute] // RVA: 0xC1AF0 Offset: 0xC1AF0 VA: 0xC1AF0
	private RaycastResult <pointerCurrentRaycast>k__BackingField; // 0x24
	[CompilerGeneratedAttribute] // RVA: 0xC1B24 Offset: 0xC1B24 VA: 0xC1B24
	[DebuggerBrowsableAttribute] // RVA: 0xC1B24 Offset: 0xC1B24 VA: 0xC1B24
	private RaycastResult <pointerPressRaycast>k__BackingField; // 0x64
	public List<GameObject> hovered; // 0xA4
	[CompilerGeneratedAttribute] // RVA: 0xC1B58 Offset: 0xC1B58 VA: 0xC1B58
	[DebuggerBrowsableAttribute] // RVA: 0xC1B58 Offset: 0xC1B58 VA: 0xC1B58
	private bool <eligibleForClick>k__BackingField; // 0xA8
	[CompilerGeneratedAttribute] // RVA: 0xC1B8C Offset: 0xC1B8C VA: 0xC1B8C
	[DebuggerBrowsableAttribute] // RVA: 0xC1B8C Offset: 0xC1B8C VA: 0xC1B8C
	private int <pointerId>k__BackingField; // 0xAC
	[CompilerGeneratedAttribute] // RVA: 0xC1BC0 Offset: 0xC1BC0 VA: 0xC1BC0
	[DebuggerBrowsableAttribute] // RVA: 0xC1BC0 Offset: 0xC1BC0 VA: 0xC1BC0
	private Vector2 <position>k__BackingField; // 0xB0
	[CompilerGeneratedAttribute] // RVA: 0xC1BF4 Offset: 0xC1BF4 VA: 0xC1BF4
	[DebuggerBrowsableAttribute] // RVA: 0xC1BF4 Offset: 0xC1BF4 VA: 0xC1BF4
	private Vector2 <delta>k__BackingField; // 0xB8
	[CompilerGeneratedAttribute] // RVA: 0xC1C28 Offset: 0xC1C28 VA: 0xC1C28
	[DebuggerBrowsableAttribute] // RVA: 0xC1C28 Offset: 0xC1C28 VA: 0xC1C28
	private Vector2 <pressPosition>k__BackingField; // 0xC0
	[CompilerGeneratedAttribute] // RVA: 0xC1C5C Offset: 0xC1C5C VA: 0xC1C5C
	[DebuggerBrowsableAttribute] // RVA: 0xC1C5C Offset: 0xC1C5C VA: 0xC1C5C
	private Vector3 <worldPosition>k__BackingField; // 0xC8
	[CompilerGeneratedAttribute] // RVA: 0xC1C90 Offset: 0xC1C90 VA: 0xC1C90
	[DebuggerBrowsableAttribute] // RVA: 0xC1C90 Offset: 0xC1C90 VA: 0xC1C90
	private Vector3 <worldNormal>k__BackingField; // 0xD4
	[CompilerGeneratedAttribute] // RVA: 0xC1CC4 Offset: 0xC1CC4 VA: 0xC1CC4
	[DebuggerBrowsableAttribute] // RVA: 0xC1CC4 Offset: 0xC1CC4 VA: 0xC1CC4
	private float <clickTime>k__BackingField; // 0xE0
	[CompilerGeneratedAttribute] // RVA: 0xC1CF8 Offset: 0xC1CF8 VA: 0xC1CF8
	[DebuggerBrowsableAttribute] // RVA: 0xC1CF8 Offset: 0xC1CF8 VA: 0xC1CF8
	private int <clickCount>k__BackingField; // 0xE4
	[CompilerGeneratedAttribute] // RVA: 0xC1D2C Offset: 0xC1D2C VA: 0xC1D2C
	[DebuggerBrowsableAttribute] // RVA: 0xC1D2C Offset: 0xC1D2C VA: 0xC1D2C
	private Vector2 <scrollDelta>k__BackingField; // 0xE8
	[CompilerGeneratedAttribute] // RVA: 0xC1D60 Offset: 0xC1D60 VA: 0xC1D60
	[DebuggerBrowsableAttribute] // RVA: 0xC1D60 Offset: 0xC1D60 VA: 0xC1D60
	private bool <useDragThreshold>k__BackingField; // 0xF0
	[CompilerGeneratedAttribute] // RVA: 0xC1D94 Offset: 0xC1D94 VA: 0xC1D94
	[DebuggerBrowsableAttribute] // RVA: 0xC1D94 Offset: 0xC1D94 VA: 0xC1D94
	private bool <dragging>k__BackingField; // 0xF1
	[CompilerGeneratedAttribute] // RVA: 0xC1DC8 Offset: 0xC1DC8 VA: 0xC1DC8
	[DebuggerBrowsableAttribute] // RVA: 0xC1DC8 Offset: 0xC1DC8 VA: 0xC1DC8
	private PointerEventData.InputButton <button>k__BackingField; // 0xF4

	// Properties
	public GameObject pointerEnter { get; set; }
	public GameObject lastPress { get; set; }
	public GameObject rawPointerPress { get; set; }
	public GameObject pointerDrag { get; set; }
	public RaycastResult pointerCurrentRaycast { get; set; }
	public RaycastResult pointerPressRaycast { get; set; }
	public bool eligibleForClick { get; set; }
	public int pointerId { get; set; }
	public Vector2 position { get; set; }
	public Vector2 delta { get; set; }
	public Vector2 pressPosition { get; set; }
	[ObsoleteAttribute] // RVA: 0xC4838 Offset: 0xC4838 VA: 0xC4838
	public Vector3 worldPosition { get; set; }
	[ObsoleteAttribute] // RVA: 0xC486C Offset: 0xC486C VA: 0xC486C
	public Vector3 worldNormal { get; set; }
	public float clickTime { get; set; }
	public int clickCount { get; set; }
	public Vector2 scrollDelta { get; set; }
	public bool useDragThreshold { get; set; }
	public bool dragging { get; set; }
	public PointerEventData.InputButton button { get; set; }
	public Camera enterEventCamera { get; }
	public Camera pressEventCamera { get; }
	public GameObject pointerPress { get; set; }

	// Methods

	// RVA: 0x1BE804 Offset: 0x1BE804 VA: 0x1BE804
	public void .ctor(EventSystem eventSystem) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3D30 Offset: 0xC3D30 VA: 0xC3D30
	// RVA: 0x1B838C Offset: 0x1B838C VA: 0x1B838C
	public GameObject get_pointerEnter() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3D40 Offset: 0xC3D40 VA: 0xC3D40
	// RVA: 0x1B8420 Offset: 0x1B8420 VA: 0x1B8420
	public void set_pointerEnter(GameObject value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3D50 Offset: 0xC3D50 VA: 0xC3D50
	// RVA: 0x1BE9C4 Offset: 0x1BE9C4 VA: 0x1BE9C4
	public GameObject get_lastPress() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3D60 Offset: 0xC3D60 VA: 0xC3D60
	// RVA: 0x1BE9CC Offset: 0x1BE9CC VA: 0x1BE9CC
	private void set_lastPress(GameObject value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3D70 Offset: 0xC3D70 VA: 0xC3D70
	// RVA: 0x1BE9D4 Offset: 0x1BE9D4 VA: 0x1BE9D4
	public GameObject get_rawPointerPress() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3D80 Offset: 0xC3D80 VA: 0xC3D80
	// RVA: 0x1BE9DC Offset: 0x1BE9DC VA: 0x1BE9DC
	public void set_rawPointerPress(GameObject value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3D90 Offset: 0xC3D90 VA: 0xC3D90
	// RVA: 0x1BE9E4 Offset: 0x1BE9E4 VA: 0x1BE9E4
	public GameObject get_pointerDrag() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3DA0 Offset: 0xC3DA0 VA: 0xC3DA0
	// RVA: 0x1BE9EC Offset: 0x1BE9EC VA: 0x1BE9EC
	public void set_pointerDrag(GameObject value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3DB0 Offset: 0xC3DB0 VA: 0xC3DB0
	// RVA: 0x1BE9F4 Offset: 0x1BE9F4 VA: 0x1BE9F4
	public RaycastResult get_pointerCurrentRaycast() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3DC0 Offset: 0xC3DC0 VA: 0xC3DC0
	// RVA: 0x1BEA1C Offset: 0x1BEA1C VA: 0x1BEA1C
	public void set_pointerCurrentRaycast(RaycastResult value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3DD0 Offset: 0xC3DD0 VA: 0xC3DD0
	// RVA: 0x1BEA94 Offset: 0x1BEA94 VA: 0x1BEA94
	public RaycastResult get_pointerPressRaycast() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3DE0 Offset: 0xC3DE0 VA: 0xC3DE0
	// RVA: 0x1BEABC Offset: 0x1BEABC VA: 0x1BEABC
	public void set_pointerPressRaycast(RaycastResult value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3DF0 Offset: 0xC3DF0 VA: 0xC3DF0
	// RVA: 0x1BEB34 Offset: 0x1BEB34 VA: 0x1BEB34
	public bool get_eligibleForClick() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3E00 Offset: 0xC3E00 VA: 0xC3E00
	// RVA: 0x1BE95C Offset: 0x1BE95C VA: 0x1BE95C
	public void set_eligibleForClick(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3E10 Offset: 0xC3E10 VA: 0xC3E10
	// RVA: 0x1BEB3C Offset: 0x1BEB3C VA: 0x1BEB3C
	public int get_pointerId() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3E20 Offset: 0xC3E20 VA: 0xC3E20
	// RVA: 0x1BE964 Offset: 0x1BE964 VA: 0x1BE964
	public void set_pointerId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3E30 Offset: 0xC3E30 VA: 0xC3E30
	// RVA: 0x1BDEDC Offset: 0x1BDEDC VA: 0x1BDEDC
	public Vector2 get_position() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3E40 Offset: 0xC3E40 VA: 0xC3E40
	// RVA: 0x1BE96C Offset: 0x1BE96C VA: 0x1BE96C
	public void set_position(Vector2 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3E50 Offset: 0xC3E50 VA: 0xC3E50
	// RVA: 0x1BEB44 Offset: 0x1BEB44 VA: 0x1BEB44
	public Vector2 get_delta() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3E60 Offset: 0xC3E60 VA: 0xC3E60
	// RVA: 0x1BE978 Offset: 0x1BE978 VA: 0x1BE978
	public void set_delta(Vector2 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3E70 Offset: 0xC3E70 VA: 0xC3E70
	// RVA: 0x1BEB58 Offset: 0x1BEB58 VA: 0x1BEB58
	public Vector2 get_pressPosition() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3E80 Offset: 0xC3E80 VA: 0xC3E80
	// RVA: 0x1BE984 Offset: 0x1BE984 VA: 0x1BE984
	public void set_pressPosition(Vector2 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3E90 Offset: 0xC3E90 VA: 0xC3E90
	// RVA: 0x1BEB6C Offset: 0x1BEB6C VA: 0x1BEB6C
	public Vector3 get_worldPosition() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3EA0 Offset: 0xC3EA0 VA: 0xC3EA0
	// RVA: 0x1BEB80 Offset: 0x1BEB80 VA: 0x1BEB80
	public void set_worldPosition(Vector3 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3EB0 Offset: 0xC3EB0 VA: 0xC3EB0
	// RVA: 0x1BEB8C Offset: 0x1BEB8C VA: 0x1BEB8C
	public Vector3 get_worldNormal() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3EC0 Offset: 0xC3EC0 VA: 0xC3EC0
	// RVA: 0x1BEBA0 Offset: 0x1BEBA0 VA: 0x1BEBA0
	public void set_worldNormal(Vector3 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3ED0 Offset: 0xC3ED0 VA: 0xC3ED0
	// RVA: 0x1BEBAC Offset: 0x1BEBAC VA: 0x1BEBAC
	public float get_clickTime() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3EE0 Offset: 0xC3EE0 VA: 0xC3EE0
	// RVA: 0x1BE990 Offset: 0x1BE990 VA: 0x1BE990
	public void set_clickTime(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3EF0 Offset: 0xC3EF0 VA: 0xC3EF0
	// RVA: 0x1BEBB4 Offset: 0x1BEBB4 VA: 0x1BEBB4
	public int get_clickCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3F00 Offset: 0xC3F00 VA: 0xC3F00
	// RVA: 0x1BE998 Offset: 0x1BE998 VA: 0x1BE998
	public void set_clickCount(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3F10 Offset: 0xC3F10 VA: 0xC3F10
	// RVA: 0x1BEBBC Offset: 0x1BEBBC VA: 0x1BEBBC
	public Vector2 get_scrollDelta() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3F20 Offset: 0xC3F20 VA: 0xC3F20
	// RVA: 0x1BE9A0 Offset: 0x1BE9A0 VA: 0x1BE9A0
	public void set_scrollDelta(Vector2 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3F30 Offset: 0xC3F30 VA: 0xC3F30
	// RVA: 0x1BEBD0 Offset: 0x1BEBD0 VA: 0x1BEBD0
	public bool get_useDragThreshold() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3F40 Offset: 0xC3F40 VA: 0xC3F40
	// RVA: 0x1BE9AC Offset: 0x1BE9AC VA: 0x1BE9AC
	public void set_useDragThreshold(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3F50 Offset: 0xC3F50 VA: 0xC3F50
	// RVA: 0x1BEBD8 Offset: 0x1BEBD8 VA: 0x1BEBD8
	public bool get_dragging() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3F60 Offset: 0xC3F60 VA: 0xC3F60
	// RVA: 0x1BE9B4 Offset: 0x1BE9B4 VA: 0x1BE9B4
	public void set_dragging(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3F70 Offset: 0xC3F70 VA: 0xC3F70
	// RVA: 0x1BEBE0 Offset: 0x1BEBE0 VA: 0x1BEBE0
	public PointerEventData.InputButton get_button() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3F80 Offset: 0xC3F80 VA: 0xC3F80
	// RVA: 0x1BE9BC Offset: 0x1BE9BC VA: 0x1BE9BC
	public void set_button(PointerEventData.InputButton value) { }

	// RVA: 0x1BEBE8 Offset: 0x1BEBE8 VA: 0x1BEBE8
	public bool IsPointerMoving() { }

	// RVA: 0x1BEC30 Offset: 0x1BEC30 VA: 0x1BEC30
	public bool IsScrolling() { }

	// RVA: 0x1BEC78 Offset: 0x1BEC78 VA: 0x1BEC78
	public Camera get_enterEventCamera() { }

	// RVA: 0x1BED38 Offset: 0x1BED38 VA: 0x1BED38
	public Camera get_pressEventCamera() { }

	// RVA: 0x1BEDF8 Offset: 0x1BEDF8 VA: 0x1BEDF8
	public GameObject get_pointerPress() { }

	// RVA: 0x1BEE00 Offset: 0x1BEE00 VA: 0x1BEE00
	public void set_pointerPress(GameObject value) { }

	// RVA: 0x1BEEA0 Offset: 0x1BEEA0 VA: 0x1BEEA0 Slot: 3
	public override string ToString() { }
}

// Namespace: 
public enum PointerEventData.InputButton // TypeDefIndex: 1913
{
	// Fields
	public int value__; // 0x0
	public const PointerEventData.InputButton Left = 0;
	public const PointerEventData.InputButton Right = 1;
	public const PointerEventData.InputButton Middle = 2;
}

// Namespace: 
public enum PointerEventData.FramePressState // TypeDefIndex: 1914
{
	// Fields
	public int value__; // 0x0
	public const PointerEventData.FramePressState Pressed = 0;
	public const PointerEventData.FramePressState Released = 1;
	public const PointerEventData.FramePressState PressedAndReleased = 2;
	public const PointerEventData.FramePressState NotChanged = 3;
}

// Namespace: UnityEngine.EventSystems
public class BaseInput : UIBehaviour // TypeDefIndex: 1915
{
	// Properties
	public virtual string compositionString { get; }
	public virtual IMECompositionMode imeCompositionMode { get; set; }
	public virtual Vector2 compositionCursorPos { get; set; }
	public virtual bool mousePresent { get; }
	public virtual Vector2 mousePosition { get; }
	public virtual Vector2 mouseScrollDelta { get; }
	public virtual bool touchSupported { get; }
	public virtual int touchCount { get; }

	// Methods

	// RVA: 0x1B6FAC Offset: 0x1B6FAC VA: 0x1B6FAC
	public void .ctor() { }

	// RVA: 0x1B6FBC Offset: 0x1B6FBC VA: 0x1B6FBC Slot: 17
	public virtual string get_compositionString() { }

	// RVA: 0x1B6FC4 Offset: 0x1B6FC4 VA: 0x1B6FC4 Slot: 18
	public virtual IMECompositionMode get_imeCompositionMode() { }

	// RVA: 0x1B6FCC Offset: 0x1B6FCC VA: 0x1B6FCC Slot: 19
	public virtual void set_imeCompositionMode(IMECompositionMode value) { }

	// RVA: 0x1B6FD8 Offset: 0x1B6FD8 VA: 0x1B6FD8 Slot: 20
	public virtual Vector2 get_compositionCursorPos() { }

	// RVA: 0x1B7004 Offset: 0x1B7004 VA: 0x1B7004 Slot: 21
	public virtual void set_compositionCursorPos(Vector2 value) { }

	// RVA: 0x1B7014 Offset: 0x1B7014 VA: 0x1B7014 Slot: 22
	public virtual bool get_mousePresent() { }

	// RVA: 0x1B701C Offset: 0x1B701C VA: 0x1B701C Slot: 23
	public virtual bool GetMouseButtonDown(int button) { }

	// RVA: 0x1B7028 Offset: 0x1B7028 VA: 0x1B7028 Slot: 24
	public virtual bool GetMouseButtonUp(int button) { }

	// RVA: 0x1B7034 Offset: 0x1B7034 VA: 0x1B7034 Slot: 25
	public virtual bool GetMouseButton(int button) { }

	// RVA: 0x1B7040 Offset: 0x1B7040 VA: 0x1B7040 Slot: 26
	public virtual Vector2 get_mousePosition() { }

	// RVA: 0x1B706C Offset: 0x1B706C VA: 0x1B706C Slot: 27
	public virtual Vector2 get_mouseScrollDelta() { }

	// RVA: 0x1B7098 Offset: 0x1B7098 VA: 0x1B7098 Slot: 28
	public virtual bool get_touchSupported() { }

	// RVA: 0x1B70A0 Offset: 0x1B70A0 VA: 0x1B70A0 Slot: 29
	public virtual int get_touchCount() { }

	// RVA: 0x1B70A8 Offset: 0x1B70A8 VA: 0x1B70A8 Slot: 30
	public virtual Touch GetTouch(int index) { }

	// RVA: 0x1B7108 Offset: 0x1B7108 VA: 0x1B7108 Slot: 31
	public virtual float GetAxisRaw(string axisName) { }

	// RVA: 0x1B7114 Offset: 0x1B7114 VA: 0x1B7114 Slot: 32
	public virtual bool GetButtonDown(string buttonName) { }
}

// Namespace: UnityEngine.EventSystems
[RequireComponent] // RVA: 0xC0444 Offset: 0xC0444 VA: 0xC0444
public abstract class BaseInputModule : UIBehaviour // TypeDefIndex: 1916
{
	// Fields
	protected List<RaycastResult> m_RaycastResultCache; // 0xC
	private AxisEventData m_AxisEventData; // 0x10
	private EventSystem m_EventSystem; // 0x14
	private BaseEventData m_BaseEventData; // 0x18
	protected BaseInput m_InputOverride; // 0x1C
	private BaseInput m_DefaultInput; // 0x20

	// Properties
	public BaseInput input { get; }
	public BaseInput inputOverride { get; set; }
	protected EventSystem eventSystem { get; }

	// Methods

	// RVA: 0x1B7120 Offset: 0x1B7120 VA: 0x1B7120
	protected void .ctor() { }

	// RVA: 0x1B71AC Offset: 0x1B71AC VA: 0x1B71AC
	public BaseInput get_input() { }

	// RVA: 0x1B7464 Offset: 0x1B7464 VA: 0x1B7464
	public BaseInput get_inputOverride() { }

	// RVA: 0x1B746C Offset: 0x1B746C VA: 0x1B746C
	public void set_inputOverride(BaseInput value) { }

	// RVA: 0x1B7474 Offset: 0x1B7474 VA: 0x1B7474
	protected EventSystem get_eventSystem() { }

	// RVA: 0x1B747C Offset: 0x1B747C VA: 0x1B747C Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x1B76BC Offset: 0x1B76BC VA: 0x1B76BC Slot: 7
	protected override void OnDisable() { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract void Process();

	// RVA: 0x1B76E8 Offset: 0x1B76E8 VA: 0x1B76E8
	protected static RaycastResult FindFirstRaycast(List<RaycastResult> candidates) { }

	// RVA: 0x1B78BC Offset: 0x1B78BC VA: 0x1B78BC
	protected static MoveDirection DetermineMoveDirection(float x, float y) { }

	// RVA: 0x1B78C8 Offset: 0x1B78C8 VA: 0x1B78C8
	protected static MoveDirection DetermineMoveDirection(float x, float y, float deadZone) { }

	// RVA: 0x1B79E0 Offset: 0x1B79E0 VA: 0x1B79E0
	protected static GameObject FindCommonRoot(GameObject g1, GameObject g2) { }

	// RVA: 0x1B7C30 Offset: 0x1B7C30 VA: 0x1B7C30
	protected void HandlePointerExitAndEnter(PointerEventData currentPointerData, GameObject newEnterTarget) { }

	// RVA: 0x1B84B4 Offset: 0x1B84B4 VA: 0x1B84B4 Slot: 18
	protected virtual AxisEventData GetAxisEventData(float x, float y, float moveDeadZone) { }

	// RVA: 0x1B85E0 Offset: 0x1B85E0 VA: 0x1B85E0 Slot: 19
	protected virtual BaseEventData GetBaseEventData() { }

	// RVA: 0x1B8690 Offset: 0x1B8690 VA: 0x1B8690 Slot: 20
	public virtual bool IsPointerOverGameObject(int pointerId) { }

	// RVA: 0x1B8698 Offset: 0x1B8698 VA: 0x1B8698 Slot: 21
	public virtual bool ShouldActivateModule() { }

	// RVA: 0x1B86E8 Offset: 0x1B86E8 VA: 0x1B86E8 Slot: 22
	public virtual void DeactivateModule() { }

	// RVA: 0x1B86EC Offset: 0x1B86EC VA: 0x1B86EC Slot: 23
	public virtual void ActivateModule() { }

	// RVA: 0x1B86F0 Offset: 0x1B86F0 VA: 0x1B86F0 Slot: 24
	public virtual void UpdateModule() { }

	// RVA: 0x1B86F4 Offset: 0x1B86F4 VA: 0x1B86F4 Slot: 25
	public virtual bool IsModuleSupported() { }
}

// Namespace: UnityEngine.EventSystems
public abstract class PointerInputModule : BaseInputModule // TypeDefIndex: 1917
{
	// Fields
	public const int kMouseLeftId = -1;
	public const int kMouseRightId = -2;
	public const int kMouseMiddleId = -3;
	public const int kFakeTouchesId = -4;
	protected Dictionary<int, PointerEventData> m_PointerData; // 0x24
	private readonly PointerInputModule.MouseState m_MouseState; // 0x28

	// Methods

	// RVA: 0x1BFED4 Offset: 0x1BFED4 VA: 0x1BFED4
	protected void .ctor() { }

	// RVA: 0x1C0008 Offset: 0x1C0008 VA: 0x1C0008
	protected bool GetPointerData(int id, out PointerEventData data, bool create) { }

	// RVA: 0x1C011C Offset: 0x1C011C VA: 0x1C011C
	protected void RemovePointerData(PointerEventData data) { }

	// RVA: 0x1C01B0 Offset: 0x1C01B0 VA: 0x1C01B0
	protected PointerEventData GetTouchPointerEventData(Touch input, out bool pressed, out bool released) { }

	// RVA: 0x1C0620 Offset: 0x1C0620 VA: 0x1C0620
	protected void CopyFromTo(PointerEventData from, PointerEventData to) { }

	// RVA: 0x1C0798 Offset: 0x1C0798 VA: 0x1C0798
	protected PointerEventData.FramePressState StateForMouseButton(int buttonId) { }

	// RVA: 0x1C0838 Offset: 0x1C0838 VA: 0x1C0838 Slot: 26
	protected virtual PointerInputModule.MouseState GetMousePointerEventData() { }

	// RVA: 0x1C084C Offset: 0x1C084C VA: 0x1C084C Slot: 27
	protected virtual PointerInputModule.MouseState GetMousePointerEventData(int id) { }

	// RVA: 0x1C0E34 Offset: 0x1C0E34 VA: 0x1C0E34
	protected PointerEventData GetLastPointerEventData(int id) { }

	// RVA: 0x1C0E60 Offset: 0x1C0E60 VA: 0x1C0E60
	private static bool ShouldStartDrag(Vector2 pressPos, Vector2 currentPos, float threshold, bool useDragThreshold) { }

	// RVA: 0x1C0F5C Offset: 0x1C0F5C VA: 0x1C0F5C Slot: 28
	protected virtual void ProcessMove(PointerEventData pointerEvent) { }

	// RVA: 0x1C0FA0 Offset: 0x1C0FA0 VA: 0x1C0FA0 Slot: 29
	protected virtual void ProcessDrag(PointerEventData pointerEvent) { }

	// RVA: 0x1C1264 Offset: 0x1C1264 VA: 0x1C1264 Slot: 20
	public override bool IsPointerOverGameObject(int pointerId) { }

	// RVA: 0x1C132C Offset: 0x1C132C VA: 0x1C132C
	protected void ClearSelection() { }

	// RVA: 0x1C1510 Offset: 0x1C1510 VA: 0x1C1510 Slot: 3
	public override string ToString() { }

	// RVA: 0x1C18C4 Offset: 0x1C18C4 VA: 0x1C18C4
	protected void DeselectIfSelectionChanged(GameObject currentOverGo, BaseEventData pointerEvent) { }
}

// Namespace: 
protected class PointerInputModule.ButtonState // TypeDefIndex: 1918
{
	// Fields
	private PointerEventData.InputButton m_Button; // 0x8
	private PointerInputModule.MouseButtonEventData m_EventData; // 0xC

	// Properties
	public PointerInputModule.MouseButtonEventData eventData { get; set; }
	public PointerEventData.InputButton button { get; set; }

	// Methods

	// RVA: 0x1C19E0 Offset: 0x1C19E0 VA: 0x1C19E0
	public void .ctor() { }

	// RVA: 0x1C19F0 Offset: 0x1C19F0 VA: 0x1C19F0
	public PointerInputModule.MouseButtonEventData get_eventData() { }

	// RVA: 0x1C19F8 Offset: 0x1C19F8 VA: 0x1C19F8
	public void set_eventData(PointerInputModule.MouseButtonEventData value) { }

	// RVA: 0x1C1A00 Offset: 0x1C1A00 VA: 0x1C1A00
	public PointerEventData.InputButton get_button() { }

	// RVA: 0x1C1A08 Offset: 0x1C1A08 VA: 0x1C1A08
	public void set_button(PointerEventData.InputButton value) { }
}

// Namespace: 
protected class PointerInputModule.MouseState // TypeDefIndex: 1919
{
	// Fields
	private List<PointerInputModule.ButtonState> m_TrackedButtons; // 0x8

	// Methods

	// RVA: 0x1BFF7C Offset: 0x1BFF7C VA: 0x1BFF7C
	public void .ctor() { }

	// RVA: 0x1C1A48 Offset: 0x1C1A48 VA: 0x1C1A48
	public bool AnyPressesThisFrame() { }

	// RVA: 0x1C1B44 Offset: 0x1C1B44 VA: 0x1C1B44
	public bool AnyReleasesThisFrame() { }

	// RVA: 0x1C1C40 Offset: 0x1C1C40 VA: 0x1C1C40
	public PointerInputModule.ButtonState GetButtonState(PointerEventData.InputButton button) { }

	// RVA: 0x1C0DD8 Offset: 0x1C0DD8 VA: 0x1C0DD8
	public void SetButtonState(PointerEventData.InputButton button, PointerEventData.FramePressState stateForMouseButton, PointerEventData data) { }
}

// Namespace: 
public class PointerInputModule.MouseButtonEventData // TypeDefIndex: 1920
{
	// Fields
	public PointerEventData.FramePressState buttonState; // 0x8
	public PointerEventData buttonData; // 0xC

	// Methods

	// RVA: 0x1C1A10 Offset: 0x1C1A10 VA: 0x1C1A10
	public void .ctor() { }

	// RVA: 0x1C1A18 Offset: 0x1C1A18 VA: 0x1C1A18
	public bool PressedThisFrame() { }

	// RVA: 0x1C1A30 Offset: 0x1C1A30 VA: 0x1C1A30
	public bool ReleasedThisFrame() { }
}

// Namespace: UnityEngine.EventSystems
[AddComponentMenu] // RVA: 0xC04BC Offset: 0xC04BC VA: 0xC04BC
public class StandaloneInputModule : PointerInputModule // TypeDefIndex: 1921
{
	// Fields
	private float m_PrevActionTime; // 0x2C
	private Vector2 m_LastMoveVector; // 0x30
	private int m_ConsecutiveMoveCount; // 0x38
	private Vector2 m_LastMousePosition; // 0x3C
	private Vector2 m_MousePosition; // 0x44
	private GameObject m_CurrentFocusedGameObject; // 0x4C
	private PointerEventData m_InputPointerEvent; // 0x50
	[SerializeField] // RVA: 0xC1DFC Offset: 0xC1DFC VA: 0xC1DFC
	private string m_HorizontalAxis; // 0x54
	[SerializeField] // RVA: 0xC1E0C Offset: 0xC1E0C VA: 0xC1E0C
	private string m_VerticalAxis; // 0x58
	[SerializeField] // RVA: 0xC1E1C Offset: 0xC1E1C VA: 0xC1E1C
	private string m_SubmitButton; // 0x5C
	[SerializeField] // RVA: 0xC1E2C Offset: 0xC1E2C VA: 0xC1E2C
	private string m_CancelButton; // 0x60
	[SerializeField] // RVA: 0xC1E3C Offset: 0xC1E3C VA: 0xC1E3C
	private float m_InputActionsPerSecond; // 0x64
	[SerializeField] // RVA: 0xC1E4C Offset: 0xC1E4C VA: 0xC1E4C
	private float m_RepeatDelay; // 0x68
	[SerializeField] // RVA: 0xC1E5C Offset: 0xC1E5C VA: 0xC1E5C
	[FormerlySerializedAsAttribute] // RVA: 0xC1E5C Offset: 0xC1E5C VA: 0xC1E5C
	private bool m_ForceModuleActive; // 0x6C

	// Properties
	[ObsoleteAttribute] // RVA: 0xC48A0 Offset: 0xC48A0 VA: 0xC48A0
	public StandaloneInputModule.InputMode inputMode { get; }
	[ObsoleteAttribute] // RVA: 0xC48D8 Offset: 0xC48D8 VA: 0xC48D8
	public bool allowActivationOnMobileDevice { get; set; }
	public bool forceModuleActive { get; set; }
	public float inputActionsPerSecond { get; set; }
	public float repeatDelay { get; set; }
	public string horizontalAxis { get; set; }
	public string verticalAxis { get; set; }
	public string submitButton { get; set; }
	public string cancelButton { get; set; }

	// Methods

	// RVA: 0x1C2094 Offset: 0x1C2094 VA: 0x1C2094
	protected void .ctor() { }

	// RVA: 0x1C2154 Offset: 0x1C2154 VA: 0x1C2154
	public StandaloneInputModule.InputMode get_inputMode() { }

	// RVA: 0x1C215C Offset: 0x1C215C VA: 0x1C215C
	public bool get_allowActivationOnMobileDevice() { }

	// RVA: 0x1C2164 Offset: 0x1C2164 VA: 0x1C2164
	public void set_allowActivationOnMobileDevice(bool value) { }

	// RVA: 0x1C216C Offset: 0x1C216C VA: 0x1C216C
	public bool get_forceModuleActive() { }

	// RVA: 0x1C2174 Offset: 0x1C2174 VA: 0x1C2174
	public void set_forceModuleActive(bool value) { }

	// RVA: 0x1C217C Offset: 0x1C217C VA: 0x1C217C
	public float get_inputActionsPerSecond() { }

	// RVA: 0x1C2184 Offset: 0x1C2184 VA: 0x1C2184
	public void set_inputActionsPerSecond(float value) { }

	// RVA: 0x1C218C Offset: 0x1C218C VA: 0x1C218C
	public float get_repeatDelay() { }

	// RVA: 0x1C2194 Offset: 0x1C2194 VA: 0x1C2194
	public void set_repeatDelay(float value) { }

	// RVA: 0x1C219C Offset: 0x1C219C VA: 0x1C219C
	public string get_horizontalAxis() { }

	// RVA: 0x1C21A4 Offset: 0x1C21A4 VA: 0x1C21A4
	public void set_horizontalAxis(string value) { }

	// RVA: 0x1C21AC Offset: 0x1C21AC VA: 0x1C21AC
	public string get_verticalAxis() { }

	// RVA: 0x1C21B4 Offset: 0x1C21B4 VA: 0x1C21B4
	public void set_verticalAxis(string value) { }

	// RVA: 0x1C21BC Offset: 0x1C21BC VA: 0x1C21BC
	public string get_submitButton() { }

	// RVA: 0x1C21C4 Offset: 0x1C21C4 VA: 0x1C21C4
	public void set_submitButton(string value) { }

	// RVA: 0x1C21CC Offset: 0x1C21CC VA: 0x1C21CC
	public string get_cancelButton() { }

	// RVA: 0x1C21D4 Offset: 0x1C21D4 VA: 0x1C21D4
	public void set_cancelButton(string value) { }

	// RVA: 0x1C21DC Offset: 0x1C21DC VA: 0x1C21DC
	private bool ShouldIgnoreEventsOnNoFocus() { }

	// RVA: 0x1C2204 Offset: 0x1C2204 VA: 0x1C2204 Slot: 24
	public override void UpdateModule() { }

	// RVA: 0x1C23CC Offset: 0x1C23CC VA: 0x1C23CC Slot: 25
	public override bool IsModuleSupported() { }

	// RVA: 0x1C2458 Offset: 0x1C2458 VA: 0x1C2458 Slot: 21
	public override bool ShouldActivateModule() { }

	// RVA: 0x1C271C Offset: 0x1C271C VA: 0x1C271C Slot: 23
	public override void ActivateModule() { }

	// RVA: 0x1C28D8 Offset: 0x1C28D8 VA: 0x1C28D8 Slot: 22
	public override void DeactivateModule() { }

	// RVA: 0x1C28DC Offset: 0x1C28DC VA: 0x1C28DC Slot: 17
	public override void Process() { }

	// RVA: 0x1C30A4 Offset: 0x1C30A4 VA: 0x1C30A4
	private bool ProcessTouchEvents() { }

	// RVA: 0x1C32A4 Offset: 0x1C32A4 VA: 0x1C32A4
	protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released) { }

	// RVA: 0x1C2E68 Offset: 0x1C2E68 VA: 0x1C2E68
	protected bool SendSubmitEventToSelectedObject() { }

	// RVA: 0x1C3A10 Offset: 0x1C3A10 VA: 0x1C3A10
	private Vector2 GetRawMoveVector() { }

	// RVA: 0x1C2B14 Offset: 0x1C2B14 VA: 0x1C2B14
	protected bool SendMoveEventToSelectedObject() { }

	// RVA: 0x1C329C Offset: 0x1C329C VA: 0x1C329C
	protected void ProcessMouseEvent() { }

	[ObsoleteAttribute] // RVA: 0xC3F90 Offset: 0xC3F90 VA: 0xC3F90
	// RVA: 0x1C3F30 Offset: 0x1C3F30 VA: 0x1C3F30 Slot: 30
	protected virtual bool ForceAutoSelect() { }

	// RVA: 0x1C3BE8 Offset: 0x1C3BE8 VA: 0x1C3BE8
	protected void ProcessMouseEvent(int id) { }

	// RVA: 0x1C29C4 Offset: 0x1C29C4 VA: 0x1C29C4
	protected bool SendUpdateEventToSelectedObject() { }

	// RVA: 0x1C3F38 Offset: 0x1C3F38 VA: 0x1C3F38
	protected void ProcessMousePress(PointerInputModule.MouseButtonEventData data) { }

	// RVA: 0x1C4664 Offset: 0x1C4664 VA: 0x1C4664
	protected GameObject GetCurrentFocusedGameObject() { }
}

// Namespace: 
[ObsoleteAttribute] // RVA: 0xC0508 Offset: 0xC0508 VA: 0xC0508
public enum StandaloneInputModule.InputMode // TypeDefIndex: 1922
{
	// Fields
	public int value__; // 0x0
	public const StandaloneInputModule.InputMode Mouse = 0;
	public const StandaloneInputModule.InputMode Buttons = 1;
}

// Namespace: UnityEngine.EventSystems
[ObsoleteAttribute] // RVA: 0xC0540 Offset: 0xC0540 VA: 0xC0540
[AddComponentMenu] // RVA: 0xC0540 Offset: 0xC0540 VA: 0xC0540
public class TouchInputModule : PointerInputModule // TypeDefIndex: 1923
{
	// Fields
	private Vector2 m_LastMousePosition; // 0x2C
	private Vector2 m_MousePosition; // 0x34
	private PointerEventData m_InputPointerEvent; // 0x3C
	[SerializeField] // RVA: 0xC1EBC Offset: 0xC1EBC VA: 0xC1EBC
	[FormerlySerializedAsAttribute] // RVA: 0xC1EBC Offset: 0xC1EBC VA: 0xC1EBC
	private bool m_ForceModuleActive; // 0x40

	// Properties
	[ObsoleteAttribute] // RVA: 0xC490C Offset: 0xC490C VA: 0xC490C
	public bool allowActivationOnStandalone { get; set; }
	public bool forceModuleActive { get; set; }

	// Methods

	// RVA: 0x1C466C Offset: 0x1C466C VA: 0x1C466C
	protected void .ctor() { }

	// RVA: 0x1C4670 Offset: 0x1C4670 VA: 0x1C4670
	public bool get_allowActivationOnStandalone() { }

	// RVA: 0x1C4678 Offset: 0x1C4678 VA: 0x1C4678
	public void set_allowActivationOnStandalone(bool value) { }

	// RVA: 0x1C4680 Offset: 0x1C4680 VA: 0x1C4680
	public bool get_forceModuleActive() { }

	// RVA: 0x1C4688 Offset: 0x1C4688 VA: 0x1C4688
	public void set_forceModuleActive(bool value) { }

	// RVA: 0x1C4690 Offset: 0x1C4690 VA: 0x1C4690 Slot: 24
	public override void UpdateModule() { }

	// RVA: 0x1C4840 Offset: 0x1C4840 VA: 0x1C4840 Slot: 25
	public override bool IsModuleSupported() { }

	// RVA: 0x1C4888 Offset: 0x1C4888 VA: 0x1C4888 Slot: 21
	public override bool ShouldActivateModule() { }

	// RVA: 0x1C49F4 Offset: 0x1C49F4 VA: 0x1C49F4
	private bool UseFakeInput() { }

	// RVA: 0x1C4A30 Offset: 0x1C4A30 VA: 0x1C4A30 Slot: 17
	public override void Process() { }

	// RVA: 0x1C4A60 Offset: 0x1C4A60 VA: 0x1C4A60
	private void FakeTouches() { }

	// RVA: 0x1C4C1C Offset: 0x1C4C1C VA: 0x1C4C1C
	private void ProcessTouchEvents() { }

	// RVA: 0x1C4DEC Offset: 0x1C4DEC VA: 0x1C4DEC
	protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released) { }

	// RVA: 0x1C5558 Offset: 0x1C5558 VA: 0x1C5558 Slot: 22
	public override void DeactivateModule() { }

	// RVA: 0x1C555C Offset: 0x1C555C VA: 0x1C555C Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine.EventSystems
public abstract class BaseRaycaster : UIBehaviour // TypeDefIndex: 1924
{
	// Properties
	public abstract Camera eventCamera { get; }
	[ObsoleteAttribute] // RVA: 0xC4940 Offset: 0xC4940 VA: 0xC4940
	public virtual int priority { get; }
	public virtual int sortOrderPriority { get; }
	public virtual int renderOrderPriority { get; }

	// Methods

	// RVA: 0x1B86FC Offset: 0x1B86FC VA: 0x1B86FC
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList);

	// RVA: -1 Offset: -1 Slot: 18
	public abstract Camera get_eventCamera();

	// RVA: 0x1B8704 Offset: 0x1B8704 VA: 0x1B8704 Slot: 19
	public virtual int get_priority() { }

	// RVA: 0x1B870C Offset: 0x1B870C VA: 0x1B870C Slot: 20
	public virtual int get_sortOrderPriority() { }

	// RVA: 0x1B8714 Offset: 0x1B8714 VA: 0x1B8714 Slot: 21
	public virtual int get_renderOrderPriority() { }

	// RVA: 0x1B871C Offset: 0x1B871C VA: 0x1B871C Slot: 3
	public override string ToString() { }

	// RVA: 0x1B8B5C Offset: 0x1B8B5C VA: 0x1B8B5C Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x1B8D10 Offset: 0x1B8D10 VA: 0x1B8D10 Slot: 7
	protected override void OnDisable() { }
}

// Namespace: UnityEngine.EventSystems
[AddComponentMenu] // RVA: 0xC05B4 Offset: 0xC05B4 VA: 0xC05B4
[RequireComponent] // RVA: 0xC05B4 Offset: 0xC05B4 VA: 0xC05B4
public class Physics2DRaycaster : PhysicsRaycaster // TypeDefIndex: 1925
{
	// Fields
	private RaycastHit2D[] m_Hits; // 0x20

	// Methods

	// RVA: 0x1BD088 Offset: 0x1BD088 VA: 0x1BD088
	protected void .ctor() { }

	// RVA: 0x1BD0F8 Offset: 0x1BD0F8 VA: 0x1BD0F8 Slot: 17
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) { }
}

// Namespace: UnityEngine.EventSystems
[AddComponentMenu] // RVA: 0xC0668 Offset: 0xC0668 VA: 0xC0668
[RequireComponent] // RVA: 0xC0668 Offset: 0xC0668 VA: 0xC0668
public class PhysicsRaycaster : BaseRaycaster // TypeDefIndex: 1926
{
	// Fields
	protected const int kNoEventMaskSet = -1;
	protected Camera m_EventCamera; // 0xC
	[SerializeField] // RVA: 0xC1F1C Offset: 0xC1F1C VA: 0xC1F1C
	protected LayerMask m_EventMask; // 0x10
	[SerializeField] // RVA: 0xC1F2C Offset: 0xC1F2C VA: 0xC1F2C
	protected int m_MaxRayIntersections; // 0x14
	protected int m_LastMaxRayIntersections; // 0x18
	private RaycastHit[] m_Hits; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xC1F3C Offset: 0xC1F3C VA: 0xC1F3C
	private static Comparison<RaycastHit> <>f__am$cache0; // 0x0

	// Properties
	public override Camera eventCamera { get; }
	public virtual int depth { get; }
	public int finalEventMask { get; }
	public LayerMask eventMask { get; set; }
	public int maxRayIntersections { get; set; }

	// Methods

	// RVA: 0x1BD0C0 Offset: 0x1BD0C0 VA: 0x1BD0C0
	protected void .ctor() { }

	// RVA: 0x1BDEF0 Offset: 0x1BDEF0 VA: 0x1BDEF0 Slot: 18
	public override Camera get_eventCamera() { }

	// RVA: 0x1BDFB8 Offset: 0x1BDFB8 VA: 0x1BDFB8 Slot: 22
	public virtual int get_depth() { }

	// RVA: 0x1BDDDC Offset: 0x1BDDDC VA: 0x1BDDDC
	public int get_finalEventMask() { }

	// RVA: 0x1BE0A8 Offset: 0x1BE0A8 VA: 0x1BE0A8
	public LayerMask get_eventMask() { }

	// RVA: 0x1BE0B0 Offset: 0x1BE0B0 VA: 0x1BE0B0
	public void set_eventMask(LayerMask value) { }

	// RVA: 0x1BDDD4 Offset: 0x1BDDD4 VA: 0x1BDDD4
	public int get_maxRayIntersections() { }

	// RVA: 0x1BE0B8 Offset: 0x1BE0B8 VA: 0x1BE0B8
	public void set_maxRayIntersections(int value) { }

	// RVA: 0x1BD94C Offset: 0x1BD94C VA: 0x1BD94C
	protected bool ComputeRayAndDistance(PointerEventData eventData, ref Ray ray, ref int eventDisplayIndex, ref float distanceToClipPlane) { }

	// RVA: 0x1BE0C0 Offset: 0x1BE0C0 VA: 0x1BE0C0 Slot: 17
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3FC4 Offset: 0xC3FC4 VA: 0xC3FC4
	// RVA: 0x1BE738 Offset: 0x1BE738 VA: 0x1BE738
	private static int <Raycast>m__0(RaycastHit r1, RaycastHit r2) { }
}

// Namespace: UnityEngine.UI.CoroutineTween
internal interface ITweenValue // TypeDefIndex: 1927
{
	// Properties
	public abstract bool ignoreTimeScale { get; }
	public abstract float duration { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void TweenValue(float floatPercentage);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_ignoreTimeScale();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract float get_duration();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool ValidTarget();
}

// Namespace: UnityEngine.UI.CoroutineTween
internal struct ColorTween : ITweenValue // TypeDefIndex: 1928
{
	// Fields
	private ColorTween.ColorTweenCallback m_Target; // 0x0
	private Color m_StartColor; // 0x4
	private Color m_TargetColor; // 0x14
	private ColorTween.ColorTweenMode m_TweenMode; // 0x24
	private float m_Duration; // 0x28
	private bool m_IgnoreTimeScale; // 0x2C

	// Properties
	public Color startColor { get; set; }
	public Color targetColor { get; set; }
	public ColorTween.ColorTweenMode tweenMode { get; set; }
	public float duration { get; set; }
	public bool ignoreTimeScale { get; set; }

	// Methods

	// RVA: 0xC5314 Offset: 0xC5314 VA: 0xC5314
	public Color get_startColor() { }

	// RVA: 0xC5324 Offset: 0xC5324 VA: 0xC5324
	public void set_startColor(Color value) { }

	// RVA: 0xC5334 Offset: 0xC5334 VA: 0xC5334
	public Color get_targetColor() { }

	// RVA: 0xC5344 Offset: 0xC5344 VA: 0xC5344
	public void set_targetColor(Color value) { }

	// RVA: 0xC5354 Offset: 0xC5354 VA: 0xC5354
	public ColorTween.ColorTweenMode get_tweenMode() { }

	// RVA: 0xC535C Offset: 0xC535C VA: 0xC535C
	public void set_tweenMode(ColorTween.ColorTweenMode value) { }

	// RVA: 0xC5364 Offset: 0xC5364 VA: 0xC5364 Slot: 6
	public float get_duration() { }

	// RVA: 0xC536C Offset: 0xC536C VA: 0xC536C
	public void set_duration(float value) { }

	// RVA: 0xC5374 Offset: 0xC5374 VA: 0xC5374 Slot: 5
	public bool get_ignoreTimeScale() { }

	// RVA: 0xC537C Offset: 0xC537C VA: 0xC537C
	public void set_ignoreTimeScale(bool value) { }

	// RVA: 0xC5384 Offset: 0xC5384 VA: 0xC5384 Slot: 4
	public void TweenValue(float floatPercentage) { }

	// RVA: 0xC538C Offset: 0xC538C VA: 0xC538C
	public void AddOnChangedCallback(UnityAction<Color> callback) { }

	// RVA: 0xC5394 Offset: 0xC5394 VA: 0xC5394
	public bool GetIgnoreTimescale() { }

	// RVA: 0xC539C Offset: 0xC539C VA: 0xC539C
	public float GetDuration() { }

	// RVA: 0xC53A4 Offset: 0xC53A4 VA: 0xC53A4 Slot: 7
	public bool ValidTarget() { }
}

// Namespace: 
public enum ColorTween.ColorTweenMode // TypeDefIndex: 1929
{
	// Fields
	public int value__; // 0x0
	public const ColorTween.ColorTweenMode All = 0;
	public const ColorTween.ColorTweenMode RGB = 1;
	public const ColorTween.ColorTweenMode Alpha = 2;
}

// Namespace: 
public class ColorTween.ColorTweenCallback : UnityEvent<Color> // TypeDefIndex: 1930
{
	// Methods

	// RVA: 0x1CADBC Offset: 0x1CADBC VA: 0x1CADBC
	public void .ctor() { }
}

// Namespace: UnityEngine.UI.CoroutineTween
internal struct FloatTween : ITweenValue // TypeDefIndex: 1931
{
	// Fields
	private FloatTween.FloatTweenCallback m_Target; // 0x0
	private float m_StartValue; // 0x4
	private float m_TargetValue; // 0x8
	private float m_Duration; // 0xC
	private bool m_IgnoreTimeScale; // 0x10

	// Properties
	public float startValue { get; set; }
	public float targetValue { get; set; }
	public float duration { get; set; }
	public bool ignoreTimeScale { get; set; }

	// Methods

	// RVA: 0xC5410 Offset: 0xC5410 VA: 0xC5410
	public float get_startValue() { }

	// RVA: 0xC5418 Offset: 0xC5418 VA: 0xC5418
	public void set_startValue(float value) { }

	// RVA: 0xC5420 Offset: 0xC5420 VA: 0xC5420
	public float get_targetValue() { }

	// RVA: 0xC5428 Offset: 0xC5428 VA: 0xC5428
	public void set_targetValue(float value) { }

	// RVA: 0xC5430 Offset: 0xC5430 VA: 0xC5430 Slot: 6
	public float get_duration() { }

	// RVA: 0xC5438 Offset: 0xC5438 VA: 0xC5438
	public void set_duration(float value) { }

	// RVA: 0xC5440 Offset: 0xC5440 VA: 0xC5440 Slot: 5
	public bool get_ignoreTimeScale() { }

	// RVA: 0xC5448 Offset: 0xC5448 VA: 0xC5448
	public void set_ignoreTimeScale(bool value) { }

	// RVA: 0xC5450 Offset: 0xC5450 VA: 0xC5450 Slot: 4
	public void TweenValue(float floatPercentage) { }

	// RVA: 0xC5458 Offset: 0xC5458 VA: 0xC5458
	public void AddOnChangedCallback(UnityAction<float> callback) { }

	// RVA: 0xC5460 Offset: 0xC5460 VA: 0xC5460
	public bool GetIgnoreTimescale() { }

	// RVA: 0xC5468 Offset: 0xC5468 VA: 0xC5468
	public float GetDuration() { }

	// RVA: 0xC5470 Offset: 0xC5470 VA: 0xC5470 Slot: 7
	public bool ValidTarget() { }
}

// Namespace: 
public class FloatTween.FloatTweenCallback : UnityEvent<float> // TypeDefIndex: 1932
{
	// Methods

	// RVA: 0x1CB014 Offset: 0x1CB014 VA: 0x1CB014
	public void .ctor() { }
}

// Namespace: UnityEngine.UI.CoroutineTween
internal class TweenRunner<T> // TypeDefIndex: 1933
{
	// Fields
	protected MonoBehaviour m_CoroutineContainer; // 0x0
	protected IEnumerator m_Tween; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x581620 Offset: 0x581620 VA: 0x581620
	|-TweenRunner<ColorTween>..ctor
	|
	|-RVA: 0x5ECFF8 Offset: 0x5ECFF8 VA: 0x5ECFF8
	|-TweenRunner<FloatTween>..ctor
	*/

	[DebuggerHiddenAttribute] // RVA: 0xC3FD4 Offset: 0xC3FD4 VA: 0xC3FD4
	// RVA: -1 Offset: -1
	private static IEnumerator Start(T tweenInfo) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x58164C Offset: 0x58164C VA: 0x58164C
	|-TweenRunner<ColorTween>.Start
	|
	|-RVA: 0x5ED024 Offset: 0x5ED024 VA: 0x5ED024
	|-TweenRunner<FloatTween>.Start
	*/

	// RVA: -1 Offset: -1
	public void Init(MonoBehaviour coroutineContainer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x58176C Offset: 0x58176C VA: 0x58176C
	|-TweenRunner<ColorTween>.Init
	|
	|-RVA: 0x5ED10C Offset: 0x5ED10C VA: 0x5ED10C
	|-TweenRunner<FloatTween>.Init
	*/

	// RVA: -1 Offset: -1
	public void StartTween(T info) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x581774 Offset: 0x581774 VA: 0x581774
	|-TweenRunner<ColorTween>.StartTween
	|
	|-RVA: 0x5ED114 Offset: 0x5ED114 VA: 0x5ED114
	|-TweenRunner<FloatTween>.StartTween
	*/

	// RVA: -1 Offset: -1
	public void StopTween() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5819DC Offset: 0x5819DC VA: 0x5819DC
	|-TweenRunner<ColorTween>.StopTween
	|
	|-RVA: 0x5ED304 Offset: 0x5ED304 VA: 0x5ED304
	|-TweenRunner<FloatTween>.StopTween
	*/
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC16CC Offset: 0xC16CC VA: 0xC16CC
private sealed class TweenRunner.<Start>c__Iterator0<T> : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 1934
{
	// Fields
	internal T tweenInfo; // 0x0
	internal float <elapsedTime>__0; // 0x0
	internal float <percentage>__1; // 0x0
	internal object $current; // 0x0
	internal bool $disposing; // 0x0
	internal int $PC; // 0x0

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xC459C Offset: 0xC459C VA: 0xC459C
	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5810F0 Offset: 0x5810F0 VA: 0x5810F0
	|-TweenRunner.<Start>c__Iterator0<ColorTween>..ctor
	|
	|-RVA: 0x581388 Offset: 0x581388 VA: 0x581388
	|-TweenRunner.<Start>c__Iterator0<FloatTween>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x58111C Offset: 0x58111C VA: 0x58111C
	|-TweenRunner.<Start>c__Iterator0<ColorTween>.MoveNext
	|
	|-RVA: 0x5813B4 Offset: 0x5813B4 VA: 0x5813B4
	|-TweenRunner.<Start>c__Iterator0<FloatTween>.MoveNext
	*/

	[DebuggerHiddenAttribute] // RVA: 0xC45AC Offset: 0xC45AC VA: 0xC45AC
	// RVA: -1 Offset: -1 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5812DC Offset: 0x5812DC VA: 0x5812DC
	|-TweenRunner.<Start>c__Iterator0<ColorTween>.System.Collections.Generic.IEnumerator<object>.get_Current
	|
	|-RVA: 0x581574 Offset: 0x581574 VA: 0x581574
	|-TweenRunner.<Start>c__Iterator0<FloatTween>.System.Collections.Generic.IEnumerator<object>.get_Current
	*/

	[DebuggerHiddenAttribute] // RVA: 0xC45BC Offset: 0xC45BC VA: 0xC45BC
	// RVA: -1 Offset: -1 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5812E4 Offset: 0x5812E4 VA: 0x5812E4
	|-TweenRunner.<Start>c__Iterator0<ColorTween>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x58157C Offset: 0x58157C VA: 0x58157C
	|-TweenRunner.<Start>c__Iterator0<FloatTween>.System.Collections.IEnumerator.get_Current
	*/

	[DebuggerHiddenAttribute] // RVA: 0xC45CC Offset: 0xC45CC VA: 0xC45CC
	// RVA: -1 Offset: -1 Slot: 7
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5812EC Offset: 0x5812EC VA: 0x5812EC
	|-TweenRunner.<Start>c__Iterator0<ColorTween>.Dispose
	|
	|-RVA: 0x581584 Offset: 0x581584 VA: 0x581584
	|-TweenRunner.<Start>c__Iterator0<FloatTween>.Dispose
	*/

	[DebuggerHiddenAttribute] // RVA: 0xC45DC Offset: 0xC45DC VA: 0xC45DC
	// RVA: -1 Offset: -1 Slot: 6
	public void Reset() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x581300 Offset: 0x581300 VA: 0x581300
	|-TweenRunner.<Start>c__Iterator0<ColorTween>.Reset
	|
	|-RVA: 0x581598 Offset: 0x581598 VA: 0x581598
	|-TweenRunner.<Start>c__Iterator0<FloatTween>.Reset
	*/
}

// Namespace: UnityEngine.UI
[Serializable]
public class AnimationTriggers // TypeDefIndex: 1935
{
	// Fields
	private const string kDefaultNormalAnimName = "Normal";
	private const string kDefaultSelectedAnimName = "Highlighted";
	private const string kDefaultPressedAnimName = "Pressed";
	private const string kDefaultDisabledAnimName = "Disabled";
	[FormerlySerializedAsAttribute] // RVA: 0xC1F4C Offset: 0xC1F4C VA: 0xC1F4C
	[SerializeField] // RVA: 0xC1F4C Offset: 0xC1F4C VA: 0xC1F4C
	private string m_NormalTrigger; // 0x8
	[FormerlySerializedAsAttribute] // RVA: 0xC1F9C Offset: 0xC1F9C VA: 0xC1F9C
	[FormerlySerializedAsAttribute] // RVA: 0xC1F9C Offset: 0xC1F9C VA: 0xC1F9C
	[SerializeField] // RVA: 0xC1F9C Offset: 0xC1F9C VA: 0xC1F9C
	private string m_HighlightedTrigger; // 0xC
	[FormerlySerializedAsAttribute] // RVA: 0xC2024 Offset: 0xC2024 VA: 0xC2024
	[SerializeField] // RVA: 0xC2024 Offset: 0xC2024 VA: 0xC2024
	private string m_PressedTrigger; // 0x10
	[FormerlySerializedAsAttribute] // RVA: 0xC2074 Offset: 0xC2074 VA: 0xC2074
	[SerializeField] // RVA: 0xC2074 Offset: 0xC2074 VA: 0xC2074
	private string m_DisabledTrigger; // 0x14

	// Properties
	public string normalTrigger { get; set; }
	public string highlightedTrigger { get; set; }
	public string pressedTrigger { get; set; }
	public string disabledTrigger { get; set; }

	// Methods

	// RVA: 0x1C59AC Offset: 0x1C59AC VA: 0x1C59AC
	public void .ctor() { }

	// RVA: 0x1C5A54 Offset: 0x1C5A54 VA: 0x1C5A54
	public string get_normalTrigger() { }

	// RVA: 0x1C5A5C Offset: 0x1C5A5C VA: 0x1C5A5C
	public void set_normalTrigger(string value) { }

	// RVA: 0x1C5A64 Offset: 0x1C5A64 VA: 0x1C5A64
	public string get_highlightedTrigger() { }

	// RVA: 0x1C5A6C Offset: 0x1C5A6C VA: 0x1C5A6C
	public void set_highlightedTrigger(string value) { }

	// RVA: 0x1C5A74 Offset: 0x1C5A74 VA: 0x1C5A74
	public string get_pressedTrigger() { }

	// RVA: 0x1C5A7C Offset: 0x1C5A7C VA: 0x1C5A7C
	public void set_pressedTrigger(string value) { }

	// RVA: 0x1C5A84 Offset: 0x1C5A84 VA: 0x1C5A84
	public string get_disabledTrigger() { }

	// RVA: 0x1C5A8C Offset: 0x1C5A8C VA: 0x1C5A8C
	public void set_disabledTrigger(string value) { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC0718 Offset: 0xC0718 VA: 0xC0718
public class Button : Selectable, IPointerClickHandler, ISubmitHandler, IEventSystemHandler // TypeDefIndex: 1936
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0xC20C4 Offset: 0xC20C4 VA: 0xC20C4
	[SerializeField] // RVA: 0xC20C4 Offset: 0xC20C4 VA: 0xC20C4
	private Button.ButtonClickedEvent m_OnClick; // 0x94

	// Properties
	public Button.ButtonClickedEvent onClick { get; set; }

	// Methods

	// RVA: 0x1C6834 Offset: 0x1C6834 VA: 0x1C6834
	protected void .ctor() { }

	// RVA: 0x1C68E4 Offset: 0x1C68E4 VA: 0x1C68E4
	public Button.ButtonClickedEvent get_onClick() { }

	// RVA: 0x1C68EC Offset: 0x1C68EC VA: 0x1C68EC
	public void set_onClick(Button.ButtonClickedEvent value) { }

	// RVA: 0x1C68F4 Offset: 0x1C68F4 VA: 0x1C68F4
	private void Press() { }

	// RVA: 0x1C69B8 Offset: 0x1C69B8 VA: 0x1C69B8 Slot: 41
	public virtual void OnPointerClick(PointerEventData eventData) { }

	// RVA: 0x1C69F0 Offset: 0x1C69F0 VA: 0x1C69F0 Slot: 42
	public virtual void OnSubmit(BaseEventData eventData) { }

	[DebuggerHiddenAttribute] // RVA: 0xC3FE4 Offset: 0xC3FE4 VA: 0xC3FE4
	// RVA: 0x1C6A74 Offset: 0x1C6A74 VA: 0x1C6A74
	private IEnumerator OnFinishSubmit() { }
}

// Namespace: 
[Serializable]
public class Button.ButtonClickedEvent : UnityEvent // TypeDefIndex: 1937
{
	// Methods

	// RVA: 0x1C68DC Offset: 0x1C68DC VA: 0x1C68DC
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC16DC Offset: 0xC16DC VA: 0xC16DC
private sealed class Button.<OnFinishSubmit>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 1938
{
	// Fields
	internal float <fadeTime>__0; // 0x8
	internal float <elapsedTime>__0; // 0xC
	internal Button $this; // 0x10
	internal object $current; // 0x14
	internal bool $disposing; // 0x18
	internal int $PC; // 0x1C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xC45EC Offset: 0xC45EC VA: 0xC45EC
	// RVA: 0x1C6AF8 Offset: 0x1C6AF8 VA: 0x1C6AF8
	public void .ctor() { }

	// RVA: 0x1C6B00 Offset: 0x1C6B00 VA: 0x1C6B00 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xC45FC Offset: 0xC45FC VA: 0xC45FC
	// RVA: 0x1C6C54 Offset: 0x1C6C54 VA: 0x1C6C54 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC460C Offset: 0xC460C VA: 0xC460C
	// RVA: 0x1C6C5C Offset: 0x1C6C5C VA: 0x1C6C5C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC461C Offset: 0xC461C VA: 0xC461C
	// RVA: 0x1C6C64 Offset: 0x1C6C64 VA: 0x1C6C64 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xC462C Offset: 0xC462C VA: 0xC462C
	// RVA: 0x1C6C78 Offset: 0x1C6C78 VA: 0x1C6C78 Slot: 6
	public void Reset() { }
}

// Namespace: UnityEngine.UI
public enum CanvasUpdate // TypeDefIndex: 1939
{
	// Fields
	public int value__; // 0x0
	public const CanvasUpdate Prelayout = 0;
	public const CanvasUpdate Layout = 1;
	public const CanvasUpdate PostLayout = 2;
	public const CanvasUpdate PreRender = 3;
	public const CanvasUpdate LatePreRender = 4;
	public const CanvasUpdate MaxUpdateValue = 5;
}

// Namespace: UnityEngine.UI
public interface ICanvasElement // TypeDefIndex: 1940
{
	// Properties
	public abstract Transform transform { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Rebuild(CanvasUpdate executing);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract Transform get_transform();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void LayoutComplete();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void GraphicUpdateComplete();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool IsDestroyed();
}

// Namespace: UnityEngine.UI
public class CanvasUpdateRegistry // TypeDefIndex: 1941
{
	// Fields
	private static CanvasUpdateRegistry s_Instance; // 0x0
	private bool m_PerformingLayoutUpdate; // 0x8
	private bool m_PerformingGraphicUpdate; // 0x9
	private readonly IndexedSet<ICanvasElement> m_LayoutRebuildQueue; // 0xC
	private readonly IndexedSet<ICanvasElement> m_GraphicRebuildQueue; // 0x10
	private static readonly Comparison<ICanvasElement> s_SortLayoutFunction; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xC210C Offset: 0xC210C VA: 0xC210C
	private static Comparison<ICanvasElement> <>f__mg$cache0; // 0x8

	// Properties
	public static CanvasUpdateRegistry instance { get; }

	// Methods

	// RVA: 0x1C7794 Offset: 0x1C7794 VA: 0x1C7794
	protected void .ctor() { }

	// RVA: 0x1C787C Offset: 0x1C787C VA: 0x1C787C
	public static CanvasUpdateRegistry get_instance() { }

	// RVA: 0x1C79A4 Offset: 0x1C79A4 VA: 0x1C79A4
	private bool ObjectValidForUpdate(ICanvasElement element) { }

	// RVA: 0x1C7AAC Offset: 0x1C7AAC VA: 0x1C7AAC
	private void CleanInvalidItems() { }

	// RVA: 0x1C7EF8 Offset: 0x1C7EF8 VA: 0x1C7EF8
	private void PerformUpdate() { }

	// RVA: 0x1C8C08 Offset: 0x1C8C08 VA: 0x1C8C08
	private static int ParentCount(Transform child) { }

	// RVA: 0x1C8D28 Offset: 0x1C8D28 VA: 0x1C8D28
	private static int SortLayoutList(ICanvasElement x, ICanvasElement y) { }

	// RVA: 0x1C8ED4 Offset: 0x1C8ED4 VA: 0x1C8ED4
	public static void RegisterCanvasElementForLayoutRebuild(ICanvasElement element) { }

	// RVA: 0x1C9030 Offset: 0x1C9030 VA: 0x1C9030
	public static bool TryRegisterCanvasElementForLayoutRebuild(ICanvasElement element) { }

	// RVA: 0x1C8F70 Offset: 0x1C8F70 VA: 0x1C8F70
	private bool InternalRegisterCanvasElementForLayoutRebuild(ICanvasElement element) { }

	// RVA: 0x1C90CC Offset: 0x1C90CC VA: 0x1C90CC
	public static void RegisterCanvasElementForGraphicRebuild(ICanvasElement element) { }

	// RVA: 0x1C9280 Offset: 0x1C9280 VA: 0x1C9280
	public static bool TryRegisterCanvasElementForGraphicRebuild(ICanvasElement element) { }

	// RVA: 0x1C9168 Offset: 0x1C9168 VA: 0x1C9168
	private bool InternalRegisterCanvasElementForGraphicRebuild(ICanvasElement element) { }

	// RVA: 0x1C931C Offset: 0x1C931C VA: 0x1C931C
	public static void UnRegisterCanvasElementForRebuild(ICanvasElement element) { }

	// RVA: 0x1C93DC Offset: 0x1C93DC VA: 0x1C93DC
	private void InternalUnRegisterCanvasElementForLayoutRebuild(ICanvasElement element) { }

	// RVA: 0x1C95BC Offset: 0x1C95BC VA: 0x1C95BC
	private void InternalUnRegisterCanvasElementForGraphicRebuild(ICanvasElement element) { }

	// RVA: 0x1C979C Offset: 0x1C979C VA: 0x1C979C
	public static bool IsRebuildingLayout() { }

	// RVA: 0x1C982C Offset: 0x1C982C VA: 0x1C982C
	public static bool IsRebuildingGraphics() { }

	// RVA: 0x1C98BC Offset: 0x1C98BC VA: 0x1C98BC
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
[Serializable]
public struct ColorBlock : IEquatable<ColorBlock> // TypeDefIndex: 1942
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0xC211C Offset: 0xC211C VA: 0xC211C
	[SerializeField] // RVA: 0xC211C Offset: 0xC211C VA: 0xC211C
	private Color m_NormalColor; // 0x0
	[FormerlySerializedAsAttribute] // RVA: 0xC2168 Offset: 0xC2168 VA: 0xC2168
	[FormerlySerializedAsAttribute] // RVA: 0xC2168 Offset: 0xC2168 VA: 0xC2168
	[SerializeField] // RVA: 0xC2168 Offset: 0xC2168 VA: 0xC2168
	private Color m_HighlightedColor; // 0x10
	[FormerlySerializedAsAttribute] // RVA: 0xC21EC Offset: 0xC21EC VA: 0xC21EC
	[SerializeField] // RVA: 0xC21EC Offset: 0xC21EC VA: 0xC21EC
	private Color m_PressedColor; // 0x20
	[FormerlySerializedAsAttribute] // RVA: 0xC223C Offset: 0xC223C VA: 0xC223C
	[SerializeField] // RVA: 0xC223C Offset: 0xC223C VA: 0xC223C
	private Color m_DisabledColor; // 0x30
	[RangeAttribute] // RVA: 0xC228C Offset: 0xC228C VA: 0xC228C
	[SerializeField] // RVA: 0xC228C Offset: 0xC228C VA: 0xC228C
	private float m_ColorMultiplier; // 0x40
	[FormerlySerializedAsAttribute] // RVA: 0xC22C8 Offset: 0xC22C8 VA: 0xC22C8
	[SerializeField] // RVA: 0xC22C8 Offset: 0xC22C8 VA: 0xC22C8
	private float m_FadeDuration; // 0x44

	// Properties
	public Color normalColor { get; set; }
	public Color highlightedColor { get; set; }
	public Color pressedColor { get; set; }
	public Color disabledColor { get; set; }
	public float colorMultiplier { get; set; }
	public float fadeDuration { get; set; }
	public static ColorBlock defaultColorBlock { get; }

	// Methods

	// RVA: 0xC514C Offset: 0xC514C VA: 0xC514C
	public Color get_normalColor() { }

	// RVA: 0xC515C Offset: 0xC515C VA: 0xC515C
	public void set_normalColor(Color value) { }

	// RVA: 0xC516C Offset: 0xC516C VA: 0xC516C
	public Color get_highlightedColor() { }

	// RVA: 0xC517C Offset: 0xC517C VA: 0xC517C
	public void set_highlightedColor(Color value) { }

	// RVA: 0xC518C Offset: 0xC518C VA: 0xC518C
	public Color get_pressedColor() { }

	// RVA: 0xC519C Offset: 0xC519C VA: 0xC519C
	public void set_pressedColor(Color value) { }

	// RVA: 0xC51AC Offset: 0xC51AC VA: 0xC51AC
	public Color get_disabledColor() { }

	// RVA: 0xC51BC Offset: 0xC51BC VA: 0xC51BC
	public void set_disabledColor(Color value) { }

	// RVA: 0xC51CC Offset: 0xC51CC VA: 0xC51CC
	public float get_colorMultiplier() { }

	// RVA: 0xC51D4 Offset: 0xC51D4 VA: 0xC51D4
	public void set_colorMultiplier(float value) { }

	// RVA: 0xC51DC Offset: 0xC51DC VA: 0xC51DC
	public float get_fadeDuration() { }

	// RVA: 0xC51E4 Offset: 0xC51E4 VA: 0xC51E4
	public void set_fadeDuration(float value) { }

	// RVA: 0x1CA1C4 Offset: 0x1CA1C4 VA: 0x1CA1C4
	public static ColorBlock get_defaultColorBlock() { }

	// RVA: 0xC51EC Offset: 0xC51EC VA: 0xC51EC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xC51F4 Offset: 0xC51F4 VA: 0xC51F4 Slot: 4
	public bool Equals(ColorBlock other) { }

	// RVA: 0x1CA550 Offset: 0x1CA550 VA: 0x1CA550
	public static bool op_Equality(ColorBlock point1, ColorBlock point2) { }

	// RVA: 0x1CA60C Offset: 0x1CA60C VA: 0x1CA60C
	public static bool op_Inequality(ColorBlock point1, ColorBlock point2) { }

	// RVA: 0xC52B0 Offset: 0xC52B0 VA: 0xC52B0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine.UI
public static class DefaultControls // TypeDefIndex: 1943
{
	// Fields
	private const float kWidth = 160;
	private const float kThickHeight = 30;
	private const float kThinHeight = 20;
	private static Vector2 s_ThickElementSize; // 0x0
	private static Vector2 s_ThinElementSize; // 0x8
	private static Vector2 s_ImageElementSize; // 0x10
	private static Color s_DefaultSelectableColor; // 0x18
	private static Color s_PanelColor; // 0x28
	private static Color s_TextColor; // 0x38

	// Methods

	// RVA: 0x1CB088 Offset: 0x1CB088 VA: 0x1CB088
	private static GameObject CreateUIElementRoot(string name, Vector2 size) { }

	// RVA: 0x1CB154 Offset: 0x1CB154 VA: 0x1CB154
	private static GameObject CreateUIObject(string name, GameObject parent) { }

	// RVA: 0x1CB37C Offset: 0x1CB37C VA: 0x1CB37C
	private static void SetDefaultTextValues(Text lbl) { }

	// RVA: 0x1CB474 Offset: 0x1CB474 VA: 0x1CB474
	private static void SetDefaultColorTransitionValues(Selectable slider) { }

	// RVA: 0x1CB22C Offset: 0x1CB22C VA: 0x1CB22C
	private static void SetParentAndAlign(GameObject child, GameObject parent) { }

	// RVA: 0x1CB51C Offset: 0x1CB51C VA: 0x1CB51C
	private static void SetLayerRecursively(GameObject go, int layer) { }

	// RVA: 0x1CB664 Offset: 0x1CB664 VA: 0x1CB664
	public static GameObject CreatePanel(DefaultControls.Resources resources) { }

	// RVA: 0x1CB904 Offset: 0x1CB904 VA: 0x1CB904
	public static GameObject CreateButton(DefaultControls.Resources resources) { }

	// RVA: 0x1CBC8C Offset: 0x1CBC8C VA: 0x1CBC8C
	public static GameObject CreateText(DefaultControls.Resources resources) { }

	// RVA: 0x1CBD9C Offset: 0x1CBD9C VA: 0x1CBD9C
	public static GameObject CreateImage(DefaultControls.Resources resources) { }

	// RVA: 0x1CBE70 Offset: 0x1CBE70 VA: 0x1CBE70
	public static GameObject CreateRawImage(DefaultControls.Resources resources) { }

	// RVA: 0x1CBF44 Offset: 0x1CBF44 VA: 0x1CBF44
	public static GameObject CreateSlider(DefaultControls.Resources resources) { }

	// RVA: 0x1CC848 Offset: 0x1CC848 VA: 0x1CC848
	public static GameObject CreateScrollbar(DefaultControls.Resources resources) { }

	// RVA: 0x1CCCE8 Offset: 0x1CCCE8 VA: 0x1CCCE8
	public static GameObject CreateToggle(DefaultControls.Resources resources) { }

	// RVA: 0x1CD404 Offset: 0x1CD404 VA: 0x1CD404
	public static GameObject CreateInputField(DefaultControls.Resources resources) { }

	// RVA: 0x1CDAB8 Offset: 0x1CDAB8 VA: 0x1CDAB8
	public static GameObject CreateDropdown(DefaultControls.Resources resources) { }

	// RVA: 0x1CF70C Offset: 0x1CF70C VA: 0x1CF70C
	public static GameObject CreateScrollView(DefaultControls.Resources resources) { }

	// RVA: 0x1D0168 Offset: 0x1D0168 VA: 0x1D0168
	private static void .cctor() { }
}

// Namespace: 
public struct DefaultControls.Resources // TypeDefIndex: 1944
{
	// Fields
	public Sprite standard; // 0x0
	public Sprite background; // 0x4
	public Sprite inputField; // 0x8
	public Sprite knob; // 0xC
	public Sprite checkmark; // 0x10
	public Sprite dropdown; // 0x14
	public Sprite mask; // 0x18
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC0754 Offset: 0xC0754 VA: 0xC0754
[RequireComponent] // RVA: 0xC0754 Offset: 0xC0754 VA: 0xC0754
public class Dropdown : Selectable, IPointerClickHandler, ISubmitHandler, ICancelHandler, IEventSystemHandler // TypeDefIndex: 1945
{
	// Fields
	[SerializeField] // RVA: 0xC2318 Offset: 0xC2318 VA: 0xC2318
	private RectTransform m_Template; // 0x94
	[SerializeField] // RVA: 0xC2328 Offset: 0xC2328 VA: 0xC2328
	private Text m_CaptionText; // 0x98
	[SerializeField] // RVA: 0xC2338 Offset: 0xC2338 VA: 0xC2338
	private Image m_CaptionImage; // 0x9C
	[SpaceAttribute] // RVA: 0xC2348 Offset: 0xC2348 VA: 0xC2348
	[SerializeField] // RVA: 0xC2348 Offset: 0xC2348 VA: 0xC2348
	private Text m_ItemText; // 0xA0
	[SerializeField] // RVA: 0xC2378 Offset: 0xC2378 VA: 0xC2378
	private Image m_ItemImage; // 0xA4
	[SpaceAttribute] // RVA: 0xC2388 Offset: 0xC2388 VA: 0xC2388
	[SerializeField] // RVA: 0xC2388 Offset: 0xC2388 VA: 0xC2388
	private int m_Value; // 0xA8
	[SpaceAttribute] // RVA: 0xC23B8 Offset: 0xC23B8 VA: 0xC23B8
	[SerializeField] // RVA: 0xC23B8 Offset: 0xC23B8 VA: 0xC23B8
	private Dropdown.OptionDataList m_Options; // 0xAC
	[SpaceAttribute] // RVA: 0xC23E8 Offset: 0xC23E8 VA: 0xC23E8
	[SerializeField] // RVA: 0xC23E8 Offset: 0xC23E8 VA: 0xC23E8
	private Dropdown.DropdownEvent m_OnValueChanged; // 0xB0
	private GameObject m_Dropdown; // 0xB4
	private GameObject m_Blocker; // 0xB8
	private List<Dropdown.DropdownItem> m_Items; // 0xBC
	private TweenRunner<FloatTween> m_AlphaTweenRunner; // 0xC0
	private bool validTemplate; // 0xC4
	private static Dropdown.OptionData s_NoOptionData; // 0x0

	// Properties
	public RectTransform template { get; set; }
	public Text captionText { get; set; }
	public Image captionImage { get; set; }
	public Text itemText { get; set; }
	public Image itemImage { get; set; }
	public List<Dropdown.OptionData> options { get; set; }
	public Dropdown.DropdownEvent onValueChanged { get; set; }
	public int value { get; set; }

	// Methods

	// RVA: 0x1D0338 Offset: 0x1D0338 VA: 0x1D0338
	protected void .ctor() { }

	// RVA: 0x1D0440 Offset: 0x1D0440 VA: 0x1D0440
	public RectTransform get_template() { }

	// RVA: 0x1CF350 Offset: 0x1CF350 VA: 0x1CF350
	public void set_template(RectTransform value) { }

	// RVA: 0x1D0448 Offset: 0x1D0448 VA: 0x1D0448
	public Text get_captionText() { }

	// RVA: 0x1CF358 Offset: 0x1CF358 VA: 0x1CF358
	public void set_captionText(Text value) { }

	// RVA: 0x1D0450 Offset: 0x1D0450 VA: 0x1D0450
	public Image get_captionImage() { }

	// RVA: 0x1D0458 Offset: 0x1D0458 VA: 0x1D0458
	public void set_captionImage(Image value) { }

	// RVA: 0x1D0460 Offset: 0x1D0460 VA: 0x1D0460
	public Text get_itemText() { }

	// RVA: 0x1CF360 Offset: 0x1CF360 VA: 0x1CF360
	public void set_itemText(Text value) { }

	// RVA: 0x1D0468 Offset: 0x1D0468 VA: 0x1D0468
	public Image get_itemImage() { }

	// RVA: 0x1D0470 Offset: 0x1D0470 VA: 0x1D0470
	public void set_itemImage(Image value) { }

	// RVA: 0x1CF368 Offset: 0x1CF368 VA: 0x1CF368
	public List<Dropdown.OptionData> get_options() { }

	// RVA: 0x1D0478 Offset: 0x1D0478 VA: 0x1D0478
	public void set_options(List<Dropdown.OptionData> value) { }

	// RVA: 0x1D04B8 Offset: 0x1D04B8 VA: 0x1D04B8
	public Dropdown.DropdownEvent get_onValueChanged() { }

	// RVA: 0x1D04C0 Offset: 0x1D04C0 VA: 0x1D04C0
	public void set_onValueChanged(Dropdown.DropdownEvent value) { }

	// RVA: 0x1D04C8 Offset: 0x1D04C8 VA: 0x1D04C8
	public int get_value() { }

	// RVA: 0x1D04D0 Offset: 0x1D04D0 VA: 0x1D04D0
	public void set_value(int value) { }

	// RVA: 0x1D0650 Offset: 0x1D0650 VA: 0x1D0650 Slot: 4
	protected override void Awake() { }

	// RVA: 0x1D084C Offset: 0x1D084C VA: 0x1D084C Slot: 6
	protected override void Start() { }

	// RVA: 0x1CF394 Offset: 0x1CF394 VA: 0x1CF394
	public void RefreshShownValue() { }

	// RVA: 0x1D0850 Offset: 0x1D0850 VA: 0x1D0850
	public void AddOptions(List<Dropdown.OptionData> options) { }

	// RVA: 0x1D08E0 Offset: 0x1D08E0 VA: 0x1D08E0
	public void AddOptions(List<string> options) { }

	// RVA: 0x1D0A18 Offset: 0x1D0A18 VA: 0x1D0A18
	public void AddOptions(List<Sprite> options) { }

	// RVA: 0x1D0B50 Offset: 0x1D0B50 VA: 0x1D0B50
	public void ClearOptions() { }

	// RVA: 0x1D0BD8 Offset: 0x1D0BD8 VA: 0x1D0BD8
	private void SetupTemplate() { }

	// RVA: -1 Offset: -1
	private static T GetOrAddComponent<T>(GameObject go) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5BCED0 Offset: 0x5BCED0 VA: 0x5BCED0
	|-Dropdown.GetOrAddComponent<object>
	|-Dropdown.GetOrAddComponent<Canvas>
	|-Dropdown.GetOrAddComponent<CanvasGroup>
	|-Dropdown.GetOrAddComponent<GraphicRaycaster>
	*/

	// RVA: 0x1D1388 Offset: 0x1D1388 VA: 0x1D1388 Slot: 42
	public virtual void OnPointerClick(PointerEventData eventData) { }

	// RVA: 0x1D28C0 Offset: 0x1D28C0 VA: 0x1D28C0 Slot: 43
	public virtual void OnSubmit(BaseEventData eventData) { }

	// RVA: 0x1D28C4 Offset: 0x1D28C4 VA: 0x1D28C4 Slot: 44
	public virtual void OnCancel(BaseEventData eventData) { }

	// RVA: 0x1D138C Offset: 0x1D138C VA: 0x1D138C
	public void Show() { }

	// RVA: 0x1D3174 Offset: 0x1D3174 VA: 0x1D3174 Slot: 45
	protected virtual GameObject CreateBlocker(Canvas rootCanvas) { }

	// RVA: 0x1D35C8 Offset: 0x1D35C8 VA: 0x1D35C8 Slot: 46
	protected virtual void DestroyBlocker(GameObject blocker) { }

	// RVA: 0x1D364C Offset: 0x1D364C VA: 0x1D364C Slot: 47
	protected virtual GameObject CreateDropdownList(GameObject template) { }

	// RVA: 0x1D36DC Offset: 0x1D36DC VA: 0x1D36DC Slot: 48
	protected virtual void DestroyDropdownList(GameObject dropdownList) { }

	// RVA: 0x1D3760 Offset: 0x1D3760 VA: 0x1D3760 Slot: 49
	protected virtual Dropdown.DropdownItem CreateItem(Dropdown.DropdownItem itemTemplate) { }

	// RVA: 0x1D37F0 Offset: 0x1D37F0 VA: 0x1D37F0 Slot: 50
	protected virtual void DestroyItem(Dropdown.DropdownItem item) { }

	// RVA: 0x1D2A28 Offset: 0x1D2A28 VA: 0x1D2A28
	private Dropdown.DropdownItem AddItem(Dropdown.OptionData data, bool selected, Dropdown.DropdownItem itemTemplate, List<Dropdown.DropdownItem> items) { }

	// RVA: 0x1D37F4 Offset: 0x1D37F4 VA: 0x1D37F4
	private void AlphaFadeList(float duration, float alpha) { }

	// RVA: 0x1D3014 Offset: 0x1D3014 VA: 0x1D3014
	private void AlphaFadeList(float duration, float start, float end) { }

	// RVA: 0x1D38B0 Offset: 0x1D38B0 VA: 0x1D38B0
	private void SetAlpha(float alpha) { }

	// RVA: 0x1D28C8 Offset: 0x1D28C8 VA: 0x1D28C8
	public void Hide() { }

	[DebuggerHiddenAttribute] // RVA: 0xC3FF4 Offset: 0xC3FF4 VA: 0xC3FF4
	// RVA: 0x1D3994 Offset: 0x1D3994 VA: 0x1D3994
	private IEnumerator DelayedDestroyDropdownList(float delay) { }

	// RVA: 0x1D3A40 Offset: 0x1D3A40 VA: 0x1D3A40
	private void OnSelectItem(Toggle toggle) { }

	// RVA: 0x1D3BE0 Offset: 0x1D3BE0 VA: 0x1D3BE0
	private static void .cctor() { }
}

// Namespace: 
protected internal class Dropdown.DropdownItem : MonoBehaviour, IPointerEnterHandler, ICancelHandler, IEventSystemHandler // TypeDefIndex: 1946
{
	// Fields
	[SerializeField] // RVA: 0xC2418 Offset: 0xC2418 VA: 0xC2418
	private Text m_Text; // 0xC
	[SerializeField] // RVA: 0xC2428 Offset: 0xC2428 VA: 0xC2428
	private Image m_Image; // 0x10
	[SerializeField] // RVA: 0xC2438 Offset: 0xC2438 VA: 0xC2438
	private RectTransform m_RectTransform; // 0x14
	[SerializeField] // RVA: 0xC2448 Offset: 0xC2448 VA: 0xC2448
	private Toggle m_Toggle; // 0x18

	// Properties
	public Text text { get; set; }
	public Image image { get; set; }
	public RectTransform rectTransform { get; set; }
	public Toggle toggle { get; set; }

	// Methods

	// RVA: 0x236FD0 Offset: 0x236FD0 VA: 0x236FD0
	public void .ctor() { }

	// RVA: 0x236FD8 Offset: 0x236FD8 VA: 0x236FD8
	public Text get_text() { }

	// RVA: 0x236FE0 Offset: 0x236FE0 VA: 0x236FE0
	public void set_text(Text value) { }

	// RVA: 0x236FE8 Offset: 0x236FE8 VA: 0x236FE8
	public Image get_image() { }

	// RVA: 0x236FF0 Offset: 0x236FF0 VA: 0x236FF0
	public void set_image(Image value) { }

	// RVA: 0x236FF8 Offset: 0x236FF8 VA: 0x236FF8
	public RectTransform get_rectTransform() { }

	// RVA: 0x237000 Offset: 0x237000 VA: 0x237000
	public void set_rectTransform(RectTransform value) { }

	// RVA: 0x236F64 Offset: 0x236F64 VA: 0x236F64
	public Toggle get_toggle() { }

	// RVA: 0x237008 Offset: 0x237008 VA: 0x237008
	public void set_toggle(Toggle value) { }

	// RVA: 0x237010 Offset: 0x237010 VA: 0x237010 Slot: 6
	public virtual void OnPointerEnter(PointerEventData eventData) { }

	// RVA: 0x2370C4 Offset: 0x2370C4 VA: 0x2370C4 Slot: 7
	public virtual void OnCancel(BaseEventData eventData) { }
}

// Namespace: 
[Serializable]
public class Dropdown.OptionData // TypeDefIndex: 1947
{
	// Fields
	[SerializeField] // RVA: 0xC2458 Offset: 0xC2458 VA: 0xC2458
	private string m_Text; // 0x8
	[SerializeField] // RVA: 0xC2468 Offset: 0xC2468 VA: 0xC2468
	private Sprite m_Image; // 0xC

	// Properties
	public string text { get; set; }
	public Sprite image { get; set; }

	// Methods

	// RVA: 0x237188 Offset: 0x237188 VA: 0x237188
	public void .ctor() { }

	// RVA: 0x237190 Offset: 0x237190 VA: 0x237190
	public void .ctor(string text) { }

	// RVA: 0x2371B8 Offset: 0x2371B8 VA: 0x2371B8
	public void .ctor(Sprite image) { }

	// RVA: 0x2371E0 Offset: 0x2371E0 VA: 0x2371E0
	public void .ctor(string text, Sprite image) { }

	// RVA: 0x237208 Offset: 0x237208 VA: 0x237208
	public string get_text() { }

	// RVA: 0x2371B0 Offset: 0x2371B0 VA: 0x2371B0
	public void set_text(string value) { }

	// RVA: 0x237210 Offset: 0x237210 VA: 0x237210
	public Sprite get_image() { }

	// RVA: 0x2371D8 Offset: 0x2371D8 VA: 0x2371D8
	public void set_image(Sprite value) { }
}

// Namespace: 
[Serializable]
public class Dropdown.OptionDataList // TypeDefIndex: 1948
{
	// Fields
	[SerializeField] // RVA: 0xC2478 Offset: 0xC2478 VA: 0xC2478
	private List<Dropdown.OptionData> m_Options; // 0x8

	// Properties
	public List<Dropdown.OptionData> options { get; set; }

	// Methods

	// RVA: 0x237218 Offset: 0x237218 VA: 0x237218
	public void .ctor() { }

	// RVA: 0x2372AC Offset: 0x2372AC VA: 0x2372AC
	public List<Dropdown.OptionData> get_options() { }

	// RVA: 0x2372A4 Offset: 0x2372A4 VA: 0x2372A4
	public void set_options(List<Dropdown.OptionData> value) { }
}

// Namespace: 
[Serializable]
public class Dropdown.DropdownEvent : UnityEvent<int> // TypeDefIndex: 1949
{
	// Methods

	// RVA: 0x236F6C Offset: 0x236F6C VA: 0x236F6C
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC16EC Offset: 0xC16EC VA: 0xC16EC
private sealed class Dropdown.<Show>c__AnonStorey1 // TypeDefIndex: 1950
{
	// Fields
	internal Dropdown.DropdownItem item; // 0x8
	internal Dropdown $this; // 0xC

	// Methods

	// RVA: 0x236F14 Offset: 0x236F14 VA: 0x236F14
	public void .ctor() { }

	// RVA: 0x236F1C Offset: 0x236F1C VA: 0x236F1C
	internal void <>m__0(bool x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC16FC Offset: 0xC16FC VA: 0xC16FC
private sealed class Dropdown.<DelayedDestroyDropdownList>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 1951
{
	// Fields
	internal float delay; // 0x8
	internal Dropdown $this; // 0xC
	internal object $current; // 0x10
	internal bool $disposing; // 0x14
	internal int $PC; // 0x18

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xC463C Offset: 0xC463C VA: 0xC463C
	// RVA: 0x236B70 Offset: 0x236B70 VA: 0x236B70
	public void .ctor() { }

	// RVA: 0x236B78 Offset: 0x236B78 VA: 0x236B78 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xC464C Offset: 0xC464C VA: 0xC464C
	// RVA: 0x236E68 Offset: 0x236E68 VA: 0x236E68 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC465C Offset: 0xC465C VA: 0xC465C
	// RVA: 0x236E70 Offset: 0x236E70 VA: 0x236E70 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC466C Offset: 0xC466C VA: 0xC466C
	// RVA: 0x236E78 Offset: 0x236E78 VA: 0x236E78 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xC467C Offset: 0xC467C VA: 0xC467C
	// RVA: 0x236E8C Offset: 0x236E8C VA: 0x236E8C Slot: 6
	public void Reset() { }
}

// Namespace: UnityEngine.UI
[Serializable]
public class FontData : ISerializationCallbackReceiver // TypeDefIndex: 1952
{
	// Fields
	[SerializeField] // RVA: 0xC2488 Offset: 0xC2488 VA: 0xC2488
	[FormerlySerializedAsAttribute] // RVA: 0xC2488 Offset: 0xC2488 VA: 0xC2488
	private Font m_Font; // 0x8
	[SerializeField] // RVA: 0xC24D0 Offset: 0xC24D0 VA: 0xC24D0
	[FormerlySerializedAsAttribute] // RVA: 0xC24D0 Offset: 0xC24D0 VA: 0xC24D0
	private int m_FontSize; // 0xC
	[SerializeField] // RVA: 0xC251C Offset: 0xC251C VA: 0xC251C
	[FormerlySerializedAsAttribute] // RVA: 0xC251C Offset: 0xC251C VA: 0xC251C
	private FontStyle m_FontStyle; // 0x10
	[SerializeField] // RVA: 0xC2568 Offset: 0xC2568 VA: 0xC2568
	private bool m_BestFit; // 0x14
	[SerializeField] // RVA: 0xC2578 Offset: 0xC2578 VA: 0xC2578
	private int m_MinSize; // 0x18
	[SerializeField] // RVA: 0xC2588 Offset: 0xC2588 VA: 0xC2588
	private int m_MaxSize; // 0x1C
	[SerializeField] // RVA: 0xC2598 Offset: 0xC2598 VA: 0xC2598
	[FormerlySerializedAsAttribute] // RVA: 0xC2598 Offset: 0xC2598 VA: 0xC2598
	private TextAnchor m_Alignment; // 0x20
	[SerializeField] // RVA: 0xC25E4 Offset: 0xC25E4 VA: 0xC25E4
	private bool m_AlignByGeometry; // 0x24
	[SerializeField] // RVA: 0xC25F4 Offset: 0xC25F4 VA: 0xC25F4
	[FormerlySerializedAsAttribute] // RVA: 0xC25F4 Offset: 0xC25F4 VA: 0xC25F4
	private bool m_RichText; // 0x25
	[SerializeField] // RVA: 0xC2640 Offset: 0xC2640 VA: 0xC2640
	private HorizontalWrapMode m_HorizontalOverflow; // 0x28
	[SerializeField] // RVA: 0xC2650 Offset: 0xC2650 VA: 0xC2650
	private VerticalWrapMode m_VerticalOverflow; // 0x2C
	[SerializeField] // RVA: 0xC2660 Offset: 0xC2660 VA: 0xC2660
	private float m_LineSpacing; // 0x30

	// Properties
	public static FontData defaultFontData { get; }
	public Font font { get; set; }
	public int fontSize { get; set; }
	public FontStyle fontStyle { get; set; }
	public bool bestFit { get; set; }
	public int minSize { get; set; }
	public int maxSize { get; set; }
	public TextAnchor alignment { get; set; }
	public bool alignByGeometry { get; set; }
	public bool richText { get; set; }
	public HorizontalWrapMode horizontalOverflow { get; set; }
	public VerticalWrapMode verticalOverflow { get; set; }
	public float lineSpacing { get; set; }

	// Methods

	// RVA: 0x2372B4 Offset: 0x2372B4 VA: 0x2372B4
	public void .ctor() { }

	// RVA: 0x2372BC Offset: 0x2372BC VA: 0x2372BC
	public static FontData get_defaultFontData() { }

	// RVA: 0x237430 Offset: 0x237430 VA: 0x237430
	public Font get_font() { }

	// RVA: 0x237438 Offset: 0x237438 VA: 0x237438
	public void set_font(Font value) { }

	// RVA: 0x237440 Offset: 0x237440 VA: 0x237440
	public int get_fontSize() { }

	// RVA: 0x237448 Offset: 0x237448 VA: 0x237448
	public void set_fontSize(int value) { }

	// RVA: 0x237450 Offset: 0x237450 VA: 0x237450
	public FontStyle get_fontStyle() { }

	// RVA: 0x237458 Offset: 0x237458 VA: 0x237458
	public void set_fontStyle(FontStyle value) { }

	// RVA: 0x237460 Offset: 0x237460 VA: 0x237460
	public bool get_bestFit() { }

	// RVA: 0x237468 Offset: 0x237468 VA: 0x237468
	public void set_bestFit(bool value) { }

	// RVA: 0x237470 Offset: 0x237470 VA: 0x237470
	public int get_minSize() { }

	// RVA: 0x237478 Offset: 0x237478 VA: 0x237478
	public void set_minSize(int value) { }

	// RVA: 0x237480 Offset: 0x237480 VA: 0x237480
	public int get_maxSize() { }

	// RVA: 0x237488 Offset: 0x237488 VA: 0x237488
	public void set_maxSize(int value) { }

	// RVA: 0x237490 Offset: 0x237490 VA: 0x237490
	public TextAnchor get_alignment() { }

	// RVA: 0x237498 Offset: 0x237498 VA: 0x237498
	public void set_alignment(TextAnchor value) { }

	// RVA: 0x2374A0 Offset: 0x2374A0 VA: 0x2374A0
	public bool get_alignByGeometry() { }

	// RVA: 0x2374A8 Offset: 0x2374A8 VA: 0x2374A8
	public void set_alignByGeometry(bool value) { }

	// RVA: 0x2374B0 Offset: 0x2374B0 VA: 0x2374B0
	public bool get_richText() { }

	// RVA: 0x2374B8 Offset: 0x2374B8 VA: 0x2374B8
	public void set_richText(bool value) { }

	// RVA: 0x2374C0 Offset: 0x2374C0 VA: 0x2374C0
	public HorizontalWrapMode get_horizontalOverflow() { }

	// RVA: 0x2374C8 Offset: 0x2374C8 VA: 0x2374C8
	public void set_horizontalOverflow(HorizontalWrapMode value) { }

	// RVA: 0x2374D0 Offset: 0x2374D0 VA: 0x2374D0
	public VerticalWrapMode get_verticalOverflow() { }

	// RVA: 0x2374D8 Offset: 0x2374D8 VA: 0x2374D8
	public void set_verticalOverflow(VerticalWrapMode value) { }

	// RVA: 0x2374E0 Offset: 0x2374E0 VA: 0x2374E0
	public float get_lineSpacing() { }

	// RVA: 0x2374E8 Offset: 0x2374E8 VA: 0x2374E8
	public void set_lineSpacing(float value) { }

	// RVA: 0x2374F0 Offset: 0x2374F0 VA: 0x2374F0 Slot: 4
	private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize() { }

	// RVA: 0x2374F4 Offset: 0x2374F4 VA: 0x2374F4 Slot: 5
	private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize() { }
}

// Namespace: UnityEngine.UI
public static class FontUpdateTracker // TypeDefIndex: 1953
{
	// Fields
	private static Dictionary<Font, HashSet<Text>> m_Tracked; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC2670 Offset: 0xC2670 VA: 0xC2670
	private static Action<Font> <>f__mg$cache0; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xC2680 Offset: 0xC2680 VA: 0xC2680
	private static Action<Font> <>f__mg$cache1; // 0x8

	// Methods

	// RVA: 0x2375BC Offset: 0x2375BC VA: 0x2375BC
	public static void TrackText(Text t) { }

	// RVA: 0x2379D8 Offset: 0x2379D8 VA: 0x2379D8
	private static void RebuildForFont(Font f) { }

	// RVA: 0x237BA4 Offset: 0x237BA4 VA: 0x237BA4
	public static void UntrackText(Text t) { }

	// RVA: 0x237F38 Offset: 0x237F38 VA: 0x237F38
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
[DisallowMultipleComponent] // RVA: 0xC07FC Offset: 0xC07FC VA: 0xC07FC
[RequireComponent] // RVA: 0xC07FC Offset: 0xC07FC VA: 0xC07FC
[RequireComponent] // RVA: 0xC07FC Offset: 0xC07FC VA: 0xC07FC
[ExecuteAlways] // RVA: 0xC07FC Offset: 0xC07FC VA: 0xC07FC
public abstract class Graphic : UIBehaviour, ICanvasElement // TypeDefIndex: 1954
{
	// Fields
	protected static Material s_DefaultUI; // 0x0
	protected static Texture2D s_WhiteTexture; // 0x4
	[FormerlySerializedAsAttribute] // RVA: 0xC2690 Offset: 0xC2690 VA: 0xC2690
	[SerializeField] // RVA: 0xC2690 Offset: 0xC2690 VA: 0xC2690
	protected Material m_Material; // 0xC
	[SerializeField] // RVA: 0xC26D8 Offset: 0xC26D8 VA: 0xC26D8
	private Color m_Color; // 0x10
	[SerializeField] // RVA: 0xC26E8 Offset: 0xC26E8 VA: 0xC26E8
	private bool m_RaycastTarget; // 0x20
	private RectTransform m_RectTransform; // 0x24
	private CanvasRenderer m_CanvasRenderer; // 0x28
	private Canvas m_Canvas; // 0x2C
	private bool m_VertsDirty; // 0x30
	private bool m_MaterialDirty; // 0x31
	protected UnityAction m_OnDirtyLayoutCallback; // 0x34
	protected UnityAction m_OnDirtyVertsCallback; // 0x38
	protected UnityAction m_OnDirtyMaterialCallback; // 0x3C
	protected static Mesh s_Mesh; // 0x8
	private static readonly VertexHelper s_VertexHelper; // 0xC
	private readonly TweenRunner<ColorTween> m_ColorTweenRunner; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC26F8 Offset: 0xC26F8 VA: 0xC26F8
	[DebuggerBrowsableAttribute] // RVA: 0xC26F8 Offset: 0xC26F8 VA: 0xC26F8
	private bool <useLegacyMeshGeneration>k__BackingField; // 0x44

	// Properties
	public static Material defaultGraphicMaterial { get; }
	public virtual Color color { get; set; }
	public virtual bool raycastTarget { get; set; }
	protected bool useLegacyMeshGeneration { get; set; }
	public int depth { get; }
	public RectTransform rectTransform { get; }
	public Canvas canvas { get; }
	public CanvasRenderer canvasRenderer { get; }
	public virtual Material defaultMaterial { get; }
	public virtual Material material { get; set; }
	public virtual Material materialForRendering { get; }
	public virtual Texture mainTexture { get; }
	protected static Mesh workerMesh { get; }

	// Methods

	// RVA: 0x237FC8 Offset: 0x237FC8 VA: 0x237FC8
	protected void .ctor() { }

	// RVA: 0x2380CC Offset: 0x2380CC VA: 0x2380CC
	public static Material get_defaultGraphicMaterial() { }

	// RVA: 0x238230 Offset: 0x238230 VA: 0x238230 Slot: 22
	public virtual Color get_color() { }

	// RVA: 0x238240 Offset: 0x238240 VA: 0x238240 Slot: 23
	public virtual void set_color(Color value) { }

	// RVA: 0x23828C Offset: 0x23828C VA: 0x23828C Slot: 24
	public virtual bool get_raycastTarget() { }

	// RVA: 0x238294 Offset: 0x238294 VA: 0x238294 Slot: 25
	public virtual void set_raycastTarget(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC4004 Offset: 0xC4004 VA: 0xC4004
	// RVA: 0x23829C Offset: 0x23829C VA: 0x23829C
	protected bool get_useLegacyMeshGeneration() { }

	[CompilerGeneratedAttribute] // RVA: 0xC4014 Offset: 0xC4014 VA: 0xC4014
	// RVA: 0x2380C4 Offset: 0x2380C4 VA: 0x2380C4
	protected void set_useLegacyMeshGeneration(bool value) { }

	// RVA: 0x2382A4 Offset: 0x2382A4 VA: 0x2382A4 Slot: 26
	public virtual void SetAllDirty() { }

	// RVA: 0x2382F0 Offset: 0x2382F0 VA: 0x2382F0 Slot: 27
	public virtual void SetLayoutDirty() { }

	// RVA: 0x238428 Offset: 0x238428 VA: 0x238428 Slot: 28
	public virtual void SetVerticesDirty() { }

	// RVA: 0x2384E8 Offset: 0x2384E8 VA: 0x2384E8 Slot: 29
	public virtual void SetMaterialDirty() { }

	// RVA: 0x2385A8 Offset: 0x2385A8 VA: 0x2385A8 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0x238694 Offset: 0x238694 VA: 0x238694 Slot: 11
	protected override void OnBeforeTransformParentChanged() { }

	// RVA: 0x238A00 Offset: 0x238A00 VA: 0x238A00 Slot: 12
	protected override void OnTransformParentChanged() { }

	// RVA: 0x238F0C Offset: 0x238F0C VA: 0x238F0C
	public int get_depth() { }

	// RVA: 0x2383B4 Offset: 0x2383B4 VA: 0x2383B4 Slot: 30
	public RectTransform get_rectTransform() { }

	// RVA: 0x238768 Offset: 0x238768 VA: 0x238768
	public Canvas get_canvas() { }

	// RVA: 0x238ADC Offset: 0x238ADC VA: 0x238ADC
	private void CacheCanvas() { }

	// RVA: 0x238F3C Offset: 0x238F3C VA: 0x238F3C
	public CanvasRenderer get_canvasRenderer() { }

	// RVA: 0x238FB0 Offset: 0x238FB0 VA: 0x238FB0 Slot: 31
	public virtual Material get_defaultMaterial() { }

	// RVA: 0x239028 Offset: 0x239028 VA: 0x239028 Slot: 32
	public virtual Material get_material() { }

	// RVA: 0x2390D4 Offset: 0x2390D4 VA: 0x2390D4 Slot: 33
	public virtual void set_material(Material value) { }

	// RVA: 0x239184 Offset: 0x239184 VA: 0x239184 Slot: 34
	public virtual Material get_materialForRendering() { }

	// RVA: 0x239420 Offset: 0x239420 VA: 0x239420 Slot: 35
	public virtual Texture get_mainTexture() { }

	// RVA: 0x2394AC Offset: 0x2394AC VA: 0x2394AC Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x23963C Offset: 0x23963C VA: 0x23963C Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x2397CC Offset: 0x2397CC VA: 0x2397CC Slot: 15
	protected override void OnCanvasHierarchyChanged() { }

	// RVA: 0x23992C Offset: 0x23992C VA: 0x23992C Slot: 36
	public virtual void OnCullingChanged() { }

	// RVA: 0x2399F8 Offset: 0x2399F8 VA: 0x2399F8 Slot: 37
	public virtual void Rebuild(CanvasUpdate update) { }

	// RVA: 0x239A8C Offset: 0x239A8C VA: 0x239A8C Slot: 38
	public virtual void LayoutComplete() { }

	// RVA: 0x239A90 Offset: 0x239A90 VA: 0x239A90 Slot: 39
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x239A94 Offset: 0x239A94 VA: 0x239A94 Slot: 40
	protected virtual void UpdateMaterial() { }

	// RVA: 0x239B78 Offset: 0x239B78 VA: 0x239B78 Slot: 41
	protected virtual void UpdateGeometry() { }

	// RVA: 0x23A12C Offset: 0x23A12C VA: 0x23A12C
	private void DoMeshGeneration() { }

	// RVA: 0x239B8C Offset: 0x239B8C VA: 0x239B8C
	private void DoLegacyMeshGeneration() { }

	// RVA: 0x23A750 Offset: 0x23A750 VA: 0x23A750
	protected static Mesh get_workerMesh() { }

	[EditorBrowsableAttribute] // RVA: 0xC4024 Offset: 0xC4024 VA: 0xC4024
	[ObsoleteAttribute] // RVA: 0xC4024 Offset: 0xC4024 VA: 0xC4024
	// RVA: 0x23A934 Offset: 0x23A934 VA: 0x23A934 Slot: 42
	protected virtual void OnFillVBO(List<UIVertex> vbo) { }

	[ObsoleteAttribute] // RVA: 0xC4088 Offset: 0xC4088 VA: 0xC4088
	// RVA: 0x23A938 Offset: 0x23A938 VA: 0x23A938 Slot: 43
	protected virtual void OnPopulateMesh(Mesh m) { }

	// RVA: 0x23AA18 Offset: 0x23AA18 VA: 0x23AA18 Slot: 44
	protected virtual void OnPopulateMesh(VertexHelper vh) { }

	// RVA: 0x23AF58 Offset: 0x23AF58 VA: 0x23AF58 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x23AF68 Offset: 0x23AF68 VA: 0x23AF68 Slot: 45
	public virtual void SetNativeSize() { }

	// RVA: 0x23AF6C Offset: 0x23AF6C VA: 0x23AF6C Slot: 46
	public virtual bool Raycast(Vector2 sp, Camera eventCamera) { }

	// RVA: 0x23B4AC Offset: 0x23B4AC VA: 0x23B4AC
	public Vector2 PixelAdjustPoint(Vector2 point) { }

	// RVA: 0x23AD70 Offset: 0x23AD70 VA: 0x23AD70
	public Rect GetPixelAdjustedRect() { }

	// RVA: 0x23B660 Offset: 0x23B660 VA: 0x23B660 Slot: 47
	public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) { }

	// RVA: 0x23B6B0 Offset: 0x23B6B0 VA: 0x23B6B0 Slot: 48
	public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha, bool useRGB) { }

	// RVA: 0x23BA3C Offset: 0x23BA3C VA: 0x23BA3C
	private static Color CreateColorFromAlpha(float alpha) { }

	// RVA: 0x23BA98 Offset: 0x23BA98 VA: 0x23BA98 Slot: 49
	public virtual void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale) { }

	// RVA: 0x23BB7C Offset: 0x23BB7C VA: 0x23BB7C
	public void RegisterDirtyLayoutCallback(UnityAction action) { }

	// RVA: 0x23BC68 Offset: 0x23BC68 VA: 0x23BC68
	public void UnregisterDirtyLayoutCallback(UnityAction action) { }

	// RVA: 0x23BD54 Offset: 0x23BD54 VA: 0x23BD54
	public void RegisterDirtyVerticesCallback(UnityAction action) { }

	// RVA: 0x23BE40 Offset: 0x23BE40 VA: 0x23BE40
	public void UnregisterDirtyVerticesCallback(UnityAction action) { }

	// RVA: 0x23BF2C Offset: 0x23BF2C VA: 0x23BF2C
	public void RegisterDirtyMaterialCallback(UnityAction action) { }

	// RVA: 0x23C018 Offset: 0x23C018 VA: 0x23C018
	public void UnregisterDirtyMaterialCallback(UnityAction action) { }

	// RVA: 0x23C104 Offset: 0x23C104 VA: 0x23C104
	private static void .cctor() { }

	// RVA: 0x23C1A0 Offset: 0x23C1A0 VA: 0x23C1A0 Slot: 18
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC08C0 Offset: 0xC08C0 VA: 0xC08C0
[RequireComponent] // RVA: 0xC08C0 Offset: 0xC08C0 VA: 0xC08C0
public class GraphicRaycaster : BaseRaycaster // TypeDefIndex: 1955
{
	// Fields
	protected const int kNoEventMaskSet = -1;
	[FormerlySerializedAsAttribute] // RVA: 0xC272C Offset: 0xC272C VA: 0xC272C
	[SerializeField] // RVA: 0xC272C Offset: 0xC272C VA: 0xC272C
	private bool m_IgnoreReversedGraphics; // 0xC
	[FormerlySerializedAsAttribute] // RVA: 0xC2784 Offset: 0xC2784 VA: 0xC2784
	[SerializeField] // RVA: 0xC2784 Offset: 0xC2784 VA: 0xC2784
	private GraphicRaycaster.BlockingObjects m_BlockingObjects; // 0x10
	[SerializeField] // RVA: 0xC27D4 Offset: 0xC27D4 VA: 0xC27D4
	protected LayerMask m_BlockingMask; // 0x14
	private Canvas m_Canvas; // 0x18
	private List<Graphic> m_RaycastResults; // 0x1C
	private static readonly List<Graphic> s_SortedGraphics; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC27E4 Offset: 0xC27E4 VA: 0xC27E4
	private static Comparison<Graphic> <>f__am$cache0; // 0x4

	// Properties
	public override int sortOrderPriority { get; }
	public override int renderOrderPriority { get; }
	public bool ignoreReversedGraphics { get; set; }
	public GraphicRaycaster.BlockingObjects blockingObjects { get; set; }
	private Canvas canvas { get; }
	public override Camera eventCamera { get; }

	// Methods

	// RVA: 0x23C1A8 Offset: 0x23C1A8 VA: 0x23C1A8
	protected void .ctor() { }

	// RVA: 0x23C254 Offset: 0x23C254 VA: 0x23C254 Slot: 20
	public override int get_sortOrderPriority() { }

	// RVA: 0x23C37C Offset: 0x23C37C VA: 0x23C37C Slot: 21
	public override int get_renderOrderPriority() { }

	// RVA: 0x23C410 Offset: 0x23C410 VA: 0x23C410
	public bool get_ignoreReversedGraphics() { }

	// RVA: 0x23C418 Offset: 0x23C418 VA: 0x23C418
	public void set_ignoreReversedGraphics(bool value) { }

	// RVA: 0x23C420 Offset: 0x23C420 VA: 0x23C420
	public GraphicRaycaster.BlockingObjects get_blockingObjects() { }

	// RVA: 0x23C428 Offset: 0x23C428 VA: 0x23C428
	public void set_blockingObjects(GraphicRaycaster.BlockingObjects value) { }

	// RVA: 0x23C2C8 Offset: 0x23C2C8 VA: 0x23C2C8
	private Canvas get_canvas() { }

	// RVA: 0x23C430 Offset: 0x23C430 VA: 0x23C430 Slot: 17
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) { }

	// RVA: 0x23E178 Offset: 0x23E178 VA: 0x23E178 Slot: 18
	public override Camera get_eventCamera() { }

	// RVA: 0x23DA94 Offset: 0x23DA94 VA: 0x23DA94
	private static void Raycast(Canvas canvas, Camera eventCamera, Vector2 pointerPosition, IList<Graphic> foundGraphics, List<Graphic> results) { }

	// RVA: 0x23E340 Offset: 0x23E340 VA: 0x23E340
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xC40E8 Offset: 0xC40E8 VA: 0xC40E8
	// RVA: 0x23E3D0 Offset: 0x23E3D0 VA: 0x23E3D0
	private static int <Raycast>m__0(Graphic g1, Graphic g2) { }
}

// Namespace: 
public enum GraphicRaycaster.BlockingObjects // TypeDefIndex: 1956
{
	// Fields
	public int value__; // 0x0
	public const GraphicRaycaster.BlockingObjects None = 0;
	public const GraphicRaycaster.BlockingObjects TwoD = 1;
	public const GraphicRaycaster.BlockingObjects ThreeD = 2;
	public const GraphicRaycaster.BlockingObjects All = 3;
}

// Namespace: UnityEngine.UI
public class GraphicRegistry // TypeDefIndex: 1957
{
	// Fields
	private static GraphicRegistry s_Instance; // 0x0
	private readonly Dictionary<Canvas, IndexedSet<Graphic>> m_Graphics; // 0x8
	private static readonly List<Graphic> s_EmptyList; // 0x4

	// Properties
	public static GraphicRegistry instance { get; }

	// Methods

	// RVA: 0x23E438 Offset: 0x23E438 VA: 0x23E438
	protected void .ctor() { }

	// RVA: 0x23E578 Offset: 0x23E578 VA: 0x23E578
	public static GraphicRegistry get_instance() { }

	// RVA: 0x238CEC Offset: 0x238CEC VA: 0x238CEC
	public static void RegisterGraphicForCanvas(Canvas c, Graphic graphic) { }

	// RVA: 0x238804 Offset: 0x238804 VA: 0x238804
	public static void UnregisterGraphicForCanvas(Canvas c, Graphic graphic) { }

	// RVA: 0x23D96C Offset: 0x23D96C VA: 0x23D96C
	public static IList<Graphic> GetGraphicsForCanvas(Canvas canvas) { }

	// RVA: 0x23E6A0 Offset: 0x23E6A0 VA: 0x23E6A0
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
[ObsoleteAttribute] // RVA: 0xC0970 Offset: 0xC0970 VA: 0xC0970
internal interface IGraphicEnabledDisabled // TypeDefIndex: 1958
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnSiblingGraphicEnabledDisabled();
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC09B4 Offset: 0xC09B4 VA: 0xC09B4
public class Image : MaskableGraphic, ISerializationCallbackReceiver, ILayoutElement, ICanvasRaycastFilter // TypeDefIndex: 1959
{
	// Fields
	protected static Material s_ETC1DefaultUI; // 0x0
	[FormerlySerializedAsAttribute] // RVA: 0xC27F4 Offset: 0xC27F4 VA: 0xC27F4
	[SerializeField] // RVA: 0xC27F4 Offset: 0xC27F4 VA: 0xC27F4
	private Sprite m_Sprite; // 0x64
	private Sprite m_OverrideSprite; // 0x68
	[SerializeField] // RVA: 0xC283C Offset: 0xC283C VA: 0xC283C
	private Image.Type m_Type; // 0x6C
	[SerializeField] // RVA: 0xC284C Offset: 0xC284C VA: 0xC284C
	private bool m_PreserveAspect; // 0x70
	[SerializeField] // RVA: 0xC285C Offset: 0xC285C VA: 0xC285C
	private bool m_FillCenter; // 0x71
	[SerializeField] // RVA: 0xC286C Offset: 0xC286C VA: 0xC286C
	private Image.FillMethod m_FillMethod; // 0x74
	[RangeAttribute] // RVA: 0xC287C Offset: 0xC287C VA: 0xC287C
	[SerializeField] // RVA: 0xC287C Offset: 0xC287C VA: 0xC287C
	private float m_FillAmount; // 0x78
	[SerializeField] // RVA: 0xC28B4 Offset: 0xC28B4 VA: 0xC28B4
	private bool m_FillClockwise; // 0x7C
	[SerializeField] // RVA: 0xC28C4 Offset: 0xC28C4 VA: 0xC28C4
	private int m_FillOrigin; // 0x80
	private float m_AlphaHitTestMinimumThreshold; // 0x84
	private bool m_Tracked; // 0x88
	[SerializeField] // RVA: 0xC28D4 Offset: 0xC28D4 VA: 0xC28D4
	private bool m_UseSpriteMesh; // 0x89
	private static readonly Vector2[] s_VertScratch; // 0x4
	private static readonly Vector2[] s_UVScratch; // 0x8
	private static readonly Vector3[] s_Xy; // 0xC
	private static readonly Vector3[] s_Uv; // 0x10
	private static List<Image> m_TrackedTexturelessImages; // 0x14
	private static bool s_Initialized; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC28E4 Offset: 0xC28E4 VA: 0xC28E4
	private static Action<SpriteAtlas> <>f__mg$cache0; // 0x1C

	// Properties
	public Sprite sprite { get; set; }
	public Sprite overrideSprite { get; set; }
	private Sprite activeSprite { get; }
	public Image.Type type { get; set; }
	public bool preserveAspect { get; set; }
	public bool fillCenter { get; set; }
	public Image.FillMethod fillMethod { get; set; }
	public float fillAmount { get; set; }
	public bool fillClockwise { get; set; }
	public int fillOrigin { get; set; }
	[ObsoleteAttribute] // RVA: 0xC49A8 Offset: 0xC49A8 VA: 0xC49A8
	public float eventAlphaThreshold { get; set; }
	public float alphaHitTestMinimumThreshold { get; set; }
	public bool useSpriteMesh { get; set; }
	public static Material defaultETC1GraphicMaterial { get; }
	public override Texture mainTexture { get; }
	public bool hasBorder { get; }
	public float pixelsPerUnit { get; }
	public override Material material { get; set; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }

	// Methods

	// RVA: 0x241544 Offset: 0x241544 VA: 0x241544
	protected void .ctor() { }

	// RVA: 0x241594 Offset: 0x241594 VA: 0x241594
	public Sprite get_sprite() { }

	// RVA: 0x24159C Offset: 0x24159C VA: 0x24159C
	public void set_sprite(Sprite value) { }

	// RVA: 0x241774 Offset: 0x241774 VA: 0x241774
	public Sprite get_overrideSprite() { }

	// RVA: 0x241814 Offset: 0x241814 VA: 0x241814
	public void set_overrideSprite(Sprite value) { }

	// RVA: 0x241778 Offset: 0x241778 VA: 0x241778
	private Sprite get_activeSprite() { }

	// RVA: 0x2418A4 Offset: 0x2418A4 VA: 0x2418A4
	public Image.Type get_type() { }

	// RVA: 0x2418AC Offset: 0x2418AC VA: 0x2418AC
	public void set_type(Image.Type value) { }

	// RVA: 0x241934 Offset: 0x241934 VA: 0x241934
	public bool get_preserveAspect() { }

	// RVA: 0x24193C Offset: 0x24193C VA: 0x24193C
	public void set_preserveAspect(bool value) { }

	// RVA: 0x2419C4 Offset: 0x2419C4 VA: 0x2419C4
	public bool get_fillCenter() { }

	// RVA: 0x2419CC Offset: 0x2419CC VA: 0x2419CC
	public void set_fillCenter(bool value) { }

	// RVA: 0x241A54 Offset: 0x241A54 VA: 0x241A54
	public Image.FillMethod get_fillMethod() { }

	// RVA: 0x241A5C Offset: 0x241A5C VA: 0x241A5C
	public void set_fillMethod(Image.FillMethod value) { }

	// RVA: 0x241AEC Offset: 0x241AEC VA: 0x241AEC
	public float get_fillAmount() { }

	// RVA: 0x241AF4 Offset: 0x241AF4 VA: 0x241AF4
	public void set_fillAmount(float value) { }

	// RVA: 0x241BB8 Offset: 0x241BB8 VA: 0x241BB8
	public bool get_fillClockwise() { }

	// RVA: 0x241BC0 Offset: 0x241BC0 VA: 0x241BC0
	public void set_fillClockwise(bool value) { }

	// RVA: 0x241C48 Offset: 0x241C48 VA: 0x241C48
	public int get_fillOrigin() { }

	// RVA: 0x241C50 Offset: 0x241C50 VA: 0x241C50
	public void set_fillOrigin(int value) { }

	// RVA: 0x241CD8 Offset: 0x241CD8 VA: 0x241CD8
	public float get_eventAlphaThreshold() { }

	// RVA: 0x241CF4 Offset: 0x241CF4 VA: 0x241CF4
	public void set_eventAlphaThreshold(float value) { }

	// RVA: 0x241CEC Offset: 0x241CEC VA: 0x241CEC
	public float get_alphaHitTestMinimumThreshold() { }

	// RVA: 0x241D08 Offset: 0x241D08 VA: 0x241D08
	public void set_alphaHitTestMinimumThreshold(float value) { }

	// RVA: 0x241D10 Offset: 0x241D10 VA: 0x241D10
	public bool get_useSpriteMesh() { }

	// RVA: 0x241D18 Offset: 0x241D18 VA: 0x241D18
	public void set_useSpriteMesh(bool value) { }

	// RVA: 0x241DA0 Offset: 0x241DA0 VA: 0x241DA0
	public static Material get_defaultETC1GraphicMaterial() { }

	// RVA: 0x241F04 Offset: 0x241F04 VA: 0x241F04 Slot: 35
	public override Texture get_mainTexture() { }

	// RVA: 0x242120 Offset: 0x242120 VA: 0x242120
	public bool get_hasBorder() { }

	// RVA: 0x242230 Offset: 0x242230 VA: 0x242230
	public float get_pixelsPerUnit() { }

	// RVA: 0x242390 Offset: 0x242390 VA: 0x242390 Slot: 32
	public override Material get_material() { }

	// RVA: 0x24252C Offset: 0x24252C VA: 0x24252C Slot: 33
	public override void set_material(Material value) { }

	// RVA: 0x242530 Offset: 0x242530 VA: 0x242530 Slot: 75
	public virtual void OnBeforeSerialize() { }

	// RVA: 0x242534 Offset: 0x242534 VA: 0x242534 Slot: 76
	public virtual void OnAfterDeserialize() { }

	// RVA: 0x242614 Offset: 0x242614 VA: 0x242614
	private void PreserveSpriteAspectRatio(ref Rect rect, Vector2 spriteSize) { }

	// RVA: 0x2427C8 Offset: 0x2427C8 VA: 0x2427C8
	private Vector4 GetDrawingDimensions(bool shouldPreserveAspect) { }

	// RVA: 0x242C34 Offset: 0x242C34 VA: 0x242C34 Slot: 45
	public override void SetNativeSize() { }

	// RVA: 0x242E68 Offset: 0x242E68 VA: 0x242E68 Slot: 44
	protected override void OnPopulateMesh(VertexHelper toFill) { }

	// RVA: 0x24162C Offset: 0x24162C VA: 0x24162C
	private void TrackSprite() { }

	// RVA: 0x248338 Offset: 0x248338 VA: 0x248338 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x248358 Offset: 0x248358 VA: 0x248358 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x2484AC Offset: 0x2484AC VA: 0x2484AC Slot: 40
	protected override void UpdateMaterial() { }

	// RVA: 0x242FB8 Offset: 0x242FB8 VA: 0x242FB8
	private void GenerateSimpleSprite(VertexHelper vh, bool lPreserveAspect) { }

	// RVA: 0x243410 Offset: 0x243410 VA: 0x243410
	private void GenerateSprite(VertexHelper vh, bool lPreserveAspect) { }

	// RVA: 0x243ACC Offset: 0x243ACC VA: 0x243ACC
	private void GenerateSlicedSprite(VertexHelper toFill) { }

	// RVA: 0x2447C0 Offset: 0x2447C0 VA: 0x2447C0
	private void GenerateTiledSprite(VertexHelper toFill) { }

	// RVA: 0x248BF0 Offset: 0x248BF0 VA: 0x248BF0
	private static void AddQuad(VertexHelper vertexHelper, Vector3[] quadPositions, Color32 color, Vector3[] quadUVs) { }

	// RVA: 0x248938 Offset: 0x248938 VA: 0x248938
	private static void AddQuad(VertexHelper vertexHelper, Vector2 posMin, Vector2 posMax, Color32 color, Vector2 uvMin, Vector2 uvMax) { }

	// RVA: 0x248614 Offset: 0x248614 VA: 0x248614
	private Vector4 GetAdjustedBorders(Vector4 border, Rect adjustedRect) { }

	// RVA: 0x246264 Offset: 0x246264 VA: 0x246264
	private void GenerateFilledSprite(VertexHelper toFill, bool preserveAspect) { }

	// RVA: 0x248E24 Offset: 0x248E24 VA: 0x248E24
	private static bool RadialCut(Vector3[] xy, Vector3[] uv, float fill, bool invert, int corner) { }

	// RVA: 0x248FDC Offset: 0x248FDC VA: 0x248FDC
	private static void RadialCut(Vector3[] xy, float cos, float sin, bool invert, int corner) { }

	// RVA: 0x2498E8 Offset: 0x2498E8 VA: 0x2498E8 Slot: 77
	public virtual void CalculateLayoutInputHorizontal() { }

	// RVA: 0x2498EC Offset: 0x2498EC VA: 0x2498EC Slot: 78
	public virtual void CalculateLayoutInputVertical() { }

	// RVA: 0x2498F0 Offset: 0x2498F0 VA: 0x2498F0 Slot: 79
	public virtual float get_minWidth() { }

	// RVA: 0x2498F8 Offset: 0x2498F8 VA: 0x2498F8 Slot: 80
	public virtual float get_preferredWidth() { }

	// RVA: 0x249A44 Offset: 0x249A44 VA: 0x249A44 Slot: 81
	public virtual float get_flexibleWidth() { }

	// RVA: 0x249A50 Offset: 0x249A50 VA: 0x249A50 Slot: 82
	public virtual float get_minHeight() { }

	// RVA: 0x249A58 Offset: 0x249A58 VA: 0x249A58 Slot: 83
	public virtual float get_preferredHeight() { }

	// RVA: 0x249BA4 Offset: 0x249BA4 VA: 0x249BA4 Slot: 84
	public virtual float get_flexibleHeight() { }

	// RVA: 0x249BB0 Offset: 0x249BB0 VA: 0x249BB0 Slot: 85
	public virtual int get_layoutPriority() { }

	// RVA: 0x249BB8 Offset: 0x249BB8 VA: 0x249BB8 Slot: 86
	public virtual bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera) { }

	// RVA: 0x24A1D0 Offset: 0x24A1D0 VA: 0x24A1D0
	private Vector2 MapCoordinate(Vector2 local, Rect rect) { }

	// RVA: 0x24A8C4 Offset: 0x24A8C4 VA: 0x24A8C4
	private static void RebuildImage(SpriteAtlas spriteAtlas) { }

	// RVA: 0x2480F4 Offset: 0x2480F4 VA: 0x2480F4
	private static void TrackImage(Image g) { }

	// RVA: 0x2483F0 Offset: 0x2483F0 VA: 0x2483F0
	private static void UnTrackImage(Image g) { }

	// RVA: 0x24AB00 Offset: 0x24AB00 VA: 0x24AB00
	private static void .cctor() { }
}

// Namespace: 
public enum Image.Type // TypeDefIndex: 1960
{
	// Fields
	public int value__; // 0x0
	public const Image.Type Simple = 0;
	public const Image.Type Sliced = 1;
	public const Image.Type Tiled = 2;
	public const Image.Type Filled = 3;
}

// Namespace: 
public enum Image.FillMethod // TypeDefIndex: 1961
{
	// Fields
	public int value__; // 0x0
	public const Image.FillMethod Horizontal = 0;
	public const Image.FillMethod Vertical = 1;
	public const Image.FillMethod Radial90 = 2;
	public const Image.FillMethod Radial180 = 3;
	public const Image.FillMethod Radial360 = 4;
}

// Namespace: 
public enum Image.OriginHorizontal // TypeDefIndex: 1962
{
	// Fields
	public int value__; // 0x0
	public const Image.OriginHorizontal Left = 0;
	public const Image.OriginHorizontal Right = 1;
}

// Namespace: 
public enum Image.OriginVertical // TypeDefIndex: 1963
{
	// Fields
	public int value__; // 0x0
	public const Image.OriginVertical Bottom = 0;
	public const Image.OriginVertical Top = 1;
}

// Namespace: 
public enum Image.Origin90 // TypeDefIndex: 1964
{
	// Fields
	public int value__; // 0x0
	public const Image.Origin90 BottomLeft = 0;
	public const Image.Origin90 TopLeft = 1;
	public const Image.Origin90 TopRight = 2;
	public const Image.Origin90 BottomRight = 3;
}

// Namespace: 
public enum Image.Origin180 // TypeDefIndex: 1965
{
	// Fields
	public int value__; // 0x0
	public const Image.Origin180 Bottom = 0;
	public const Image.Origin180 Left = 1;
	public const Image.Origin180 Top = 2;
	public const Image.Origin180 Right = 3;
}

// Namespace: 
public enum Image.Origin360 // TypeDefIndex: 1966
{
	// Fields
	public int value__; // 0x0
	public const Image.Origin360 Bottom = 0;
	public const Image.Origin360 Right = 1;
	public const Image.Origin360 Top = 2;
	public const Image.Origin360 Left = 3;
}

// Namespace: UnityEngine.UI
[EditorBrowsableAttribute] // RVA: 0xC09F0 Offset: 0xC09F0 VA: 0xC09F0
[ObsoleteAttribute] // RVA: 0xC09F0 Offset: 0xC09F0 VA: 0xC09F0
public interface IMask // TypeDefIndex: 1967
{
	// Properties
	public abstract RectTransform rectTransform { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Enabled();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract RectTransform get_rectTransform();
}

// Namespace: UnityEngine.UI
public interface IMaskable // TypeDefIndex: 1968
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void RecalculateMasking();
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC0A50 Offset: 0xC0A50 VA: 0xC0A50
public class InputField : Selectable, IUpdateSelectedHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IPointerClickHandler, ISubmitHandler, ICanvasElement, ILayoutElement, IEventSystemHandler // TypeDefIndex: 1969
{
	// Fields
	protected TouchScreenKeyboard m_Keyboard; // 0x94
	private static readonly char[] kSeparators; // 0x0
	[SerializeField] // RVA: 0xC28F4 Offset: 0xC28F4 VA: 0xC28F4
	[FormerlySerializedAsAttribute] // RVA: 0xC28F4 Offset: 0xC28F4 VA: 0xC28F4
	protected Text m_TextComponent; // 0x98
	[SerializeField] // RVA: 0xC293C Offset: 0xC293C VA: 0xC293C
	protected Graphic m_Placeholder; // 0x9C
	[SerializeField] // RVA: 0xC294C Offset: 0xC294C VA: 0xC294C
	private InputField.ContentType m_ContentType; // 0xA0
	[FormerlySerializedAsAttribute] // RVA: 0xC295C Offset: 0xC295C VA: 0xC295C
	[SerializeField] // RVA: 0xC295C Offset: 0xC295C VA: 0xC295C
	private InputField.InputType m_InputType; // 0xA4
	[FormerlySerializedAsAttribute] // RVA: 0xC29A8 Offset: 0xC29A8 VA: 0xC29A8
	[SerializeField] // RVA: 0xC29A8 Offset: 0xC29A8 VA: 0xC29A8
	private char m_AsteriskChar; // 0xA8
	[FormerlySerializedAsAttribute] // RVA: 0xC29F8 Offset: 0xC29F8 VA: 0xC29F8
	[SerializeField] // RVA: 0xC29F8 Offset: 0xC29F8 VA: 0xC29F8
	private TouchScreenKeyboardType m_KeyboardType; // 0xAC
	[SerializeField] // RVA: 0xC2A48 Offset: 0xC2A48 VA: 0xC2A48
	private InputField.LineType m_LineType; // 0xB0
	[FormerlySerializedAsAttribute] // RVA: 0xC2A58 Offset: 0xC2A58 VA: 0xC2A58
	[SerializeField] // RVA: 0xC2A58 Offset: 0xC2A58 VA: 0xC2A58
	private bool m_HideMobileInput; // 0xB4
	[FormerlySerializedAsAttribute] // RVA: 0xC2AA8 Offset: 0xC2AA8 VA: 0xC2AA8
	[SerializeField] // RVA: 0xC2AA8 Offset: 0xC2AA8 VA: 0xC2AA8
	private InputField.CharacterValidation m_CharacterValidation; // 0xB8
	[FormerlySerializedAsAttribute] // RVA: 0xC2AF4 Offset: 0xC2AF4 VA: 0xC2AF4
	[SerializeField] // RVA: 0xC2AF4 Offset: 0xC2AF4 VA: 0xC2AF4
	private int m_CharacterLimit; // 0xBC
	[FormerlySerializedAsAttribute] // RVA: 0xC2B44 Offset: 0xC2B44 VA: 0xC2B44
	[FormerlySerializedAsAttribute] // RVA: 0xC2B44 Offset: 0xC2B44 VA: 0xC2B44
	[FormerlySerializedAsAttribute] // RVA: 0xC2B44 Offset: 0xC2B44 VA: 0xC2B44
	[SerializeField] // RVA: 0xC2B44 Offset: 0xC2B44 VA: 0xC2B44
	private InputField.SubmitEvent m_OnEndEdit; // 0xC0
	[FormerlySerializedAsAttribute] // RVA: 0xC2BE8 Offset: 0xC2BE8 VA: 0xC2BE8
	[FormerlySerializedAsAttribute] // RVA: 0xC2BE8 Offset: 0xC2BE8 VA: 0xC2BE8
	[SerializeField] // RVA: 0xC2BE8 Offset: 0xC2BE8 VA: 0xC2BE8
	private InputField.OnChangeEvent m_OnValueChanged; // 0xC4
	[FormerlySerializedAsAttribute] // RVA: 0xC2C68 Offset: 0xC2C68 VA: 0xC2C68
	[SerializeField] // RVA: 0xC2C68 Offset: 0xC2C68 VA: 0xC2C68
	private InputField.OnValidateInput m_OnValidateInput; // 0xC8
	[FormerlySerializedAsAttribute] // RVA: 0xC2CB8 Offset: 0xC2CB8 VA: 0xC2CB8
	[SerializeField] // RVA: 0xC2CB8 Offset: 0xC2CB8 VA: 0xC2CB8
	private Color m_CaretColor; // 0xCC
	[SerializeField] // RVA: 0xC2D08 Offset: 0xC2D08 VA: 0xC2D08
	private bool m_CustomCaretColor; // 0xDC
	[SerializeField] // RVA: 0xC2D18 Offset: 0xC2D18 VA: 0xC2D18
	private Color m_SelectionColor; // 0xE0
	[SerializeField] // RVA: 0xC2D28 Offset: 0xC2D28 VA: 0xC2D28
	[FormerlySerializedAsAttribute] // RVA: 0xC2D28 Offset: 0xC2D28 VA: 0xC2D28
	protected string m_Text; // 0xF0
	[SerializeField] // RVA: 0xC2D70 Offset: 0xC2D70 VA: 0xC2D70
	[RangeAttribute] // RVA: 0xC2D70 Offset: 0xC2D70 VA: 0xC2D70
	private float m_CaretBlinkRate; // 0xF4
	[SerializeField] // RVA: 0xC2DAC Offset: 0xC2DAC VA: 0xC2DAC
	[RangeAttribute] // RVA: 0xC2DAC Offset: 0xC2DAC VA: 0xC2DAC
	private int m_CaretWidth; // 0xF8
	[SerializeField] // RVA: 0xC2DE8 Offset: 0xC2DE8 VA: 0xC2DE8
	private bool m_ReadOnly; // 0xFC
	protected int m_CaretPosition; // 0x100
	protected int m_CaretSelectPosition; // 0x104
	private RectTransform caretRectTrans; // 0x108
	protected UIVertex[] m_CursorVerts; // 0x10C
	private TextGenerator m_InputTextCache; // 0x110
	private CanvasRenderer m_CachedInputRenderer; // 0x114
	private bool m_PreventFontCallback; // 0x118
	protected Mesh m_Mesh; // 0x11C
	private bool m_AllowInput; // 0x120
	private bool m_ShouldActivateNextUpdate; // 0x121
	private bool m_UpdateDrag; // 0x122
	private bool m_DragPositionOutOfBounds; // 0x123
	private const float kHScrollSpeed = 0.05;
	private const float kVScrollSpeed = 0.1;
	protected bool m_CaretVisible; // 0x124
	private Coroutine m_BlinkCoroutine; // 0x128
	private float m_BlinkStartTime; // 0x12C
	protected int m_DrawStart; // 0x130
	protected int m_DrawEnd; // 0x134
	private Coroutine m_DragCoroutine; // 0x138
	private string m_OriginalText; // 0x13C
	private bool m_WasCanceled; // 0x140
	private bool m_HasDoneFocusTransition; // 0x141
	private WaitForSecondsRealtime m_WaitForSecondsRealtime; // 0x144
	private const string kEmailSpecialCharacters = "!#$%&\'*+-/=?^_`{|}~";
	private Event m_ProcessingEvent; // 0x148
	private const int k_MaxTextLength = 16382;

	// Properties
	private BaseInput input { get; }
	private string compositionString { get; }
	protected Mesh mesh { get; }
	protected TextGenerator cachedInputTextGenerator { get; }
	public bool shouldHideMobileInput { get; set; }
	private bool shouldActivateOnSelect { get; }
	public string text { get; set; }
	public bool isFocused { get; }
	public float caretBlinkRate { get; set; }
	public int caretWidth { get; set; }
	public Text textComponent { get; set; }
	public Graphic placeholder { get; set; }
	public Color caretColor { get; set; }
	public bool customCaretColor { get; set; }
	public Color selectionColor { get; set; }
	public InputField.SubmitEvent onEndEdit { get; set; }
	[ObsoleteAttribute] // RVA: 0xC49DC Offset: 0xC49DC VA: 0xC49DC
	public InputField.OnChangeEvent onValueChange { get; set; }
	public InputField.OnChangeEvent onValueChanged { get; set; }
	public InputField.OnValidateInput onValidateInput { get; set; }
	public int characterLimit { get; set; }
	public InputField.ContentType contentType { get; set; }
	public InputField.LineType lineType { get; set; }
	public InputField.InputType inputType { get; set; }
	public TouchScreenKeyboard touchScreenKeyboard { get; }
	public TouchScreenKeyboardType keyboardType { get; set; }
	public InputField.CharacterValidation characterValidation { get; set; }
	public bool readOnly { get; set; }
	public bool multiLine { get; }
	public char asteriskChar { get; set; }
	public bool wasCanceled { get; }
	protected int caretPositionInternal { get; set; }
	protected int caretSelectPositionInternal { get; set; }
	private bool hasSelection { get; }
	public int caretPosition { get; set; }
	public int selectionAnchorPosition { get; set; }
	public int selectionFocusPosition { get; set; }
	private static string clipboard { get; set; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }

	// Methods

	// RVA: 0x24AC18 Offset: 0x24AC18 VA: 0x24AC18
	protected void .ctor() { }

	// RVA: 0x24AFE0 Offset: 0x24AFE0 VA: 0x24AFE0
	private BaseInput get_input() { }

	// RVA: 0x24B1B4 Offset: 0x24B1B4 VA: 0x24B1B4
	private string get_compositionString() { }

	// RVA: 0x24B280 Offset: 0x24B280 VA: 0x24B280
	protected Mesh get_mesh() { }

	// RVA: 0x24B344 Offset: 0x24B344 VA: 0x24B344
	protected TextGenerator get_cachedInputTextGenerator() { }

	// RVA: 0x24B3C4 Offset: 0x24B3C4 VA: 0x24B3C4
	public void set_shouldHideMobileInput(bool value) { }

	// RVA: 0x24B430 Offset: 0x24B430 VA: 0x24B430
	public bool get_shouldHideMobileInput() { }

	// RVA: 0x24B478 Offset: 0x24B478 VA: 0x24B478
	private bool get_shouldActivateOnSelect() { }

	// RVA: 0x24B49C Offset: 0x24B49C VA: 0x24B49C
	public string get_text() { }

	// RVA: 0x24B4A4 Offset: 0x24B4A4 VA: 0x24B4A4
	public void set_text(string value) { }

	// RVA: 0x24BE30 Offset: 0x24BE30 VA: 0x24BE30
	public bool get_isFocused() { }

	// RVA: 0x24BE38 Offset: 0x24BE38 VA: 0x24BE38
	public float get_caretBlinkRate() { }

	// RVA: 0x24BE40 Offset: 0x24BE40 VA: 0x24BE40
	public void set_caretBlinkRate(float value) { }

	// RVA: 0x24BF2C Offset: 0x24BF2C VA: 0x24BF2C
	public int get_caretWidth() { }

	// RVA: 0x24BF34 Offset: 0x24BF34 VA: 0x24BF34
	public void set_caretWidth(int value) { }

	// RVA: 0x24C034 Offset: 0x24C034 VA: 0x24C034
	public Text get_textComponent() { }

	// RVA: 0x24C03C Offset: 0x24C03C VA: 0x24C03C
	public void set_textComponent(Text value) { }

	// RVA: 0x24C360 Offset: 0x24C360 VA: 0x24C360
	public Graphic get_placeholder() { }

	// RVA: 0x24C368 Offset: 0x24C368 VA: 0x24C368
	public void set_placeholder(Graphic value) { }

	// RVA: 0x24C3D4 Offset: 0x24C3D4 VA: 0x24C3D4
	public Color get_caretColor() { }

	// RVA: 0x24C458 Offset: 0x24C458 VA: 0x24C458
	public void set_caretColor(Color value) { }

	// RVA: 0x24C450 Offset: 0x24C450 VA: 0x24C450
	public bool get_customCaretColor() { }

	// RVA: 0x24C498 Offset: 0x24C498 VA: 0x24C498
	public void set_customCaretColor(bool value) { }

	// RVA: 0x24C4B4 Offset: 0x24C4B4 VA: 0x24C4B4
	public Color get_selectionColor() { }

	// RVA: 0x24C4C4 Offset: 0x24C4C4 VA: 0x24C4C4
	public void set_selectionColor(Color value) { }

	// RVA: 0x24C504 Offset: 0x24C504 VA: 0x24C504
	public InputField.SubmitEvent get_onEndEdit() { }

	// RVA: 0x24C50C Offset: 0x24C50C VA: 0x24C50C
	public void set_onEndEdit(InputField.SubmitEvent value) { }

	// RVA: 0x24C578 Offset: 0x24C578 VA: 0x24C578
	public InputField.OnChangeEvent get_onValueChange() { }

	// RVA: 0x24C588 Offset: 0x24C588 VA: 0x24C588
	public void set_onValueChange(InputField.OnChangeEvent value) { }

	// RVA: 0x24C580 Offset: 0x24C580 VA: 0x24C580
	public InputField.OnChangeEvent get_onValueChanged() { }

	// RVA: 0x24C58C Offset: 0x24C58C VA: 0x24C58C
	public void set_onValueChanged(InputField.OnChangeEvent value) { }

	// RVA: 0x24B9B0 Offset: 0x24B9B0 VA: 0x24B9B0
	public InputField.OnValidateInput get_onValidateInput() { }

	// RVA: 0x24C5F8 Offset: 0x24C5F8 VA: 0x24C5F8
	public void set_onValidateInput(InputField.OnValidateInput value) { }

	// RVA: 0x24B9D4 Offset: 0x24B9D4 VA: 0x24B9D4
	public int get_characterLimit() { }

	// RVA: 0x24C664 Offset: 0x24C664 VA: 0x24C664
	public void set_characterLimit(int value) { }

	// RVA: 0x24CCA4 Offset: 0x24CCA4 VA: 0x24CCA4
	public InputField.ContentType get_contentType() { }

	// RVA: 0x24CCAC Offset: 0x24CCAC VA: 0x24CCAC
	public void set_contentType(InputField.ContentType value) { }

	// RVA: 0x24CE2C Offset: 0x24CE2C VA: 0x24CE2C
	public InputField.LineType get_lineType() { }

	// RVA: 0x24CE34 Offset: 0x24CE34 VA: 0x24CE34
	public void set_lineType(InputField.LineType value) { }

	// RVA: 0x24CF8C Offset: 0x24CF8C VA: 0x24CF8C
	public InputField.InputType get_inputType() { }

	// RVA: 0x24CF94 Offset: 0x24CF94 VA: 0x24CF94
	public void set_inputType(InputField.InputType value) { }

	// RVA: 0x24D038 Offset: 0x24D038 VA: 0x24D038
	public TouchScreenKeyboard get_touchScreenKeyboard() { }

	// RVA: 0x24D040 Offset: 0x24D040 VA: 0x24D040
	public TouchScreenKeyboardType get_keyboardType() { }

	// RVA: 0x24D048 Offset: 0x24D048 VA: 0x24D048
	public void set_keyboardType(TouchScreenKeyboardType value) { }

	// RVA: 0x24B9B8 Offset: 0x24B9B8 VA: 0x24B9B8
	public InputField.CharacterValidation get_characterValidation() { }

	// RVA: 0x24D0D8 Offset: 0x24D0D8 VA: 0x24D0D8
	public void set_characterValidation(InputField.CharacterValidation value) { }

	// RVA: 0x24D168 Offset: 0x24D168 VA: 0x24D168
	public bool get_readOnly() { }

	// RVA: 0x24D170 Offset: 0x24D170 VA: 0x24D170
	public void set_readOnly(bool value) { }

	// RVA: 0x24D178 Offset: 0x24D178 VA: 0x24D178
	public bool get_multiLine() { }

	// RVA: 0x24D190 Offset: 0x24D190 VA: 0x24D190
	public char get_asteriskChar() { }

	// RVA: 0x24D198 Offset: 0x24D198 VA: 0x24D198
	public void set_asteriskChar(char value) { }

	// RVA: 0x24D214 Offset: 0x24D214 VA: 0x24D214
	public bool get_wasCanceled() { }

	// RVA: 0x24D21C Offset: 0x24D21C VA: 0x24D21C
	protected void ClampPos(ref int pos) { }

	// RVA: 0x24D290 Offset: 0x24D290 VA: 0x24D290
	protected int get_caretPositionInternal() { }

	// RVA: 0x24D2C8 Offset: 0x24D2C8 VA: 0x24D2C8
	protected void set_caretPositionInternal(int value) { }

	// RVA: 0x24D2D8 Offset: 0x24D2D8 VA: 0x24D2D8
	protected int get_caretSelectPositionInternal() { }

	// RVA: 0x24D310 Offset: 0x24D310 VA: 0x24D310
	protected void set_caretSelectPositionInternal(int value) { }

	// RVA: 0x24D320 Offset: 0x24D320 VA: 0x24D320
	private bool get_hasSelection() { }

	// RVA: 0x24D350 Offset: 0x24D350 VA: 0x24D350
	public int get_caretPosition() { }

	// RVA: 0x24D388 Offset: 0x24D388 VA: 0x24D388
	public void set_caretPosition(int value) { }

	// RVA: 0x24D44C Offset: 0x24D44C VA: 0x24D44C
	public int get_selectionAnchorPosition() { }

	// RVA: 0x24D3AC Offset: 0x24D3AC VA: 0x24D3AC
	public void set_selectionAnchorPosition(int value) { }

	// RVA: 0x24D484 Offset: 0x24D484 VA: 0x24D484
	public int get_selectionFocusPosition() { }

	// RVA: 0x24D3FC Offset: 0x24D3FC VA: 0x24D3FC
	public void set_selectionFocusPosition(int value) { }

	// RVA: 0x24D4BC Offset: 0x24D4BC VA: 0x24D4BC Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x24D7E0 Offset: 0x24D7E0 VA: 0x24D7E0 Slot: 7
	protected override void OnDisable() { }

	[DebuggerHiddenAttribute] // RVA: 0xC40F8 Offset: 0xC40F8 VA: 0xC40F8
	// RVA: 0x24DCB8 Offset: 0x24DCB8 VA: 0x24DCB8
	private IEnumerator CaretBlink() { }

	// RVA: 0x24DD44 Offset: 0x24DD44 VA: 0x24DD44
	private void SetCaretVisible() { }

	// RVA: 0x24BECC Offset: 0x24BECC VA: 0x24BECC
	private void SetCaretActive() { }

	// RVA: 0x24DD7C Offset: 0x24DD7C VA: 0x24DD7C
	private void UpdateCaretMaterial() { }

	// RVA: 0x24DEF4 Offset: 0x24DEF4 VA: 0x24DEF4
	protected void OnFocus() { }

	// RVA: 0x24DEF8 Offset: 0x24DEF8 VA: 0x24DEF8
	protected void SelectAll() { }

	// RVA: 0x24DF4C Offset: 0x24DF4C VA: 0x24DF4C
	public void MoveTextEnd(bool shift) { }

	// RVA: 0x24DFC0 Offset: 0x24DFC0 VA: 0x24DFC0
	public void MoveTextStart(bool shift) { }

	// RVA: 0x24E018 Offset: 0x24E018 VA: 0x24E018
	private static string get_clipboard() { }

	// RVA: 0x24E020 Offset: 0x24E020 VA: 0x24E020
	private static void set_clipboard(string value) { }

	// RVA: 0x24E028 Offset: 0x24E028 VA: 0x24E028
	private bool InPlaceEditing() { }

	// RVA: 0x24E040 Offset: 0x24E040 VA: 0x24E040
	private void UpdateCaretFromKeyboard() { }

	// RVA: 0x24E10C Offset: 0x24E10C VA: 0x24E10C Slot: 59
	protected virtual void LateUpdate() { }

	[ObsoleteAttribute] // RVA: 0xC4108 Offset: 0xC4108 VA: 0xC4108
	// RVA: 0x24FCF4 Offset: 0x24FCF4 VA: 0x24FCF4
	public Vector2 ScreenToLocal(Vector2 screen) { }

	// RVA: 0x250190 Offset: 0x250190 VA: 0x250190
	private int GetUnclampedCharacterLineFromPosition(Vector2 pos, TextGenerator generator) { }

	// RVA: 0x250450 Offset: 0x250450 VA: 0x250450
	protected int GetCharacterIndexFromPosition(Vector2 pos) { }

	// RVA: 0x250A5C Offset: 0x250A5C VA: 0x250A5C
	private bool MayDrag(PointerEventData eventData) { }

	// RVA: 0x250B80 Offset: 0x250B80 VA: 0x250B80 Slot: 60
	public virtual void OnBeginDrag(PointerEventData eventData) { }

	// RVA: 0x250BA0 Offset: 0x250BA0 VA: 0x250BA0 Slot: 61
	public virtual void OnDrag(PointerEventData eventData) { }

	[DebuggerHiddenAttribute] // RVA: 0xC413C Offset: 0xC413C VA: 0xC413C
	// RVA: 0x250E18 Offset: 0x250E18 VA: 0x250E18
	private IEnumerator MouseDragOutsideRect(PointerEventData eventData) { }

	// RVA: 0x250EC0 Offset: 0x250EC0 VA: 0x250EC0 Slot: 62
	public virtual void OnEndDrag(PointerEventData eventData) { }

	// RVA: 0x250EE0 Offset: 0x250EE0 VA: 0x250EE0 Slot: 32
	public override void OnPointerDown(PointerEventData eventData) { }

	// RVA: 0x251140 Offset: 0x251140 VA: 0x251140
	protected InputField.EditState KeyPressed(Event evt) { }

	// RVA: 0x251D20 Offset: 0x251D20 VA: 0x251D20
	private bool IsValidChar(char c) { }

	// RVA: 0x251D98 Offset: 0x251D98 VA: 0x251D98
	public void ProcessEvent(Event e) { }

	// RVA: 0x251D9C Offset: 0x251D9C VA: 0x251D9C Slot: 63
	public virtual void OnUpdateSelected(BaseEventData eventData) { }

	// RVA: 0x251760 Offset: 0x251760 VA: 0x251760
	private string GetSelectedString() { }

	// RVA: 0x251F5C Offset: 0x251F5C VA: 0x251F5C
	private int FindtNextWordBegin() { }

	// RVA: 0x251BDC Offset: 0x251BDC VA: 0x251BDC
	private void MoveRight(bool shift, bool ctrl) { }

	// RVA: 0x25209C Offset: 0x25209C VA: 0x25209C
	private int FindtPrevWordBegin() { }

	// RVA: 0x251AA8 Offset: 0x251AA8 VA: 0x251AA8
	private void MoveLeft(bool shift, bool ctrl) { }

	// RVA: 0x252180 Offset: 0x252180 VA: 0x252180
	private int DetermineCharacterLine(int charPos, TextGenerator generator) { }

	// RVA: 0x2522FC Offset: 0x2522FC VA: 0x2522FC
	private int LineUpCharacterPosition(int originalPos, bool goToFirstChar) { }

	// RVA: 0x252798 Offset: 0x252798 VA: 0x252798
	private int LineDownCharacterPosition(int originalPos, bool goToLastChar) { }

	// RVA: 0x251D18 Offset: 0x251D18 VA: 0x251D18
	private void MoveDown(bool shift) { }

	// RVA: 0x252B9C Offset: 0x252B9C VA: 0x252B9C
	private void MoveDown(bool shift, bool goToLastChar) { }

	// RVA: 0x251D10 Offset: 0x251D10 VA: 0x251D10
	private void MoveUp(bool shift) { }

	// RVA: 0x252D04 Offset: 0x252D04 VA: 0x252D04
	private void MoveUp(bool shift, bool goToFirstChar) { }

	// RVA: 0x25182C Offset: 0x25182C VA: 0x25182C
	private void Delete() { }

	// RVA: 0x25169C Offset: 0x25169C VA: 0x25169C
	private void ForwardSpace() { }

	// RVA: 0x2515D0 Offset: 0x2515D0 VA: 0x2515D0
	private void Backspace() { }

	// RVA: 0x252E4C Offset: 0x252E4C VA: 0x252E4C
	private void Insert(char c) { }

	// RVA: 0x24BE14 Offset: 0x24BE14 VA: 0x24BE14
	private void SendOnValueChangedAndUpdateLabel() { }

	// RVA: 0x252F4C Offset: 0x252F4C VA: 0x252F4C
	private void SendOnValueChanged() { }

	// RVA: 0x252FD8 Offset: 0x252FD8 VA: 0x252FD8
	protected void SendOnSubmit() { }

	// RVA: 0x253064 Offset: 0x253064 VA: 0x253064 Slot: 64
	protected virtual void Append(string input) { }

	// RVA: 0x253124 Offset: 0x253124 VA: 0x253124 Slot: 65
	protected virtual void Append(char input) { }

	// RVA: 0x24C70C Offset: 0x24C70C VA: 0x24C70C
	protected void UpdateLabel() { }

	// RVA: 0x2542D0 Offset: 0x2542D0 VA: 0x2542D0
	private bool IsSelectionVisible() { }

	// RVA: 0x25433C Offset: 0x25433C VA: 0x25433C
	private static int GetLineStartPosition(TextGenerator gen, int line) { }

	// RVA: 0x250848 Offset: 0x250848 VA: 0x250848
	private static int GetLineEndPosition(TextGenerator gen, int line) { }

	// RVA: 0x253288 Offset: 0x253288 VA: 0x253288
	private void SetDrawRangeToContainCaretPosition(int caretPos) { }

	// RVA: 0x254538 Offset: 0x254538 VA: 0x254538
	public void ForceLabelUpdate() { }

	// RVA: 0x24BFB0 Offset: 0x24BFB0 VA: 0x24BFB0
	private void MarkGeometryAsDirty() { }

	// RVA: 0x25453C Offset: 0x25453C VA: 0x25453C Slot: 66
	public virtual void Rebuild(CanvasUpdate update) { }

	// RVA: 0x254B50 Offset: 0x254B50 VA: 0x254B50 Slot: 67
	public virtual void LayoutComplete() { }

	// RVA: 0x254B54 Offset: 0x254B54 VA: 0x254B54 Slot: 68
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x254548 Offset: 0x254548 VA: 0x254548
	private void UpdateGeometry() { }

	// RVA: 0x24EAB0 Offset: 0x24EAB0 VA: 0x24EAB0
	private void AssignPositioningIfNeeded() { }

	// RVA: 0x254B58 Offset: 0x254B58 VA: 0x254B58
	private void OnFillVBO(Mesh vbo) { }

	// RVA: 0x254E0C Offset: 0x254E0C VA: 0x254E0C
	private void GenerateCaret(VertexHelper vbo, Vector2 roundingOffset) { }

	// RVA: 0x256A14 Offset: 0x256A14 VA: 0x256A14
	private void CreateCursorVerts() { }

	// RVA: 0x255834 Offset: 0x255834 VA: 0x255834
	private void GenerateHightlight(VertexHelper vbo, Vector2 roundingOffset) { }

	// RVA: 0x24F4A8 Offset: 0x24F4A8 VA: 0x24F4A8
	protected char Validate(string text, int pos, char ch) { }

	// RVA: 0x256BD8 Offset: 0x256BD8 VA: 0x256BD8
	public void ActivateInputField() { }

	// RVA: 0x24E750 Offset: 0x24E750 VA: 0x24E750
	private void ActivateInputFieldInternal() { }

	// RVA: 0x256D84 Offset: 0x256D84 VA: 0x256D84 Slot: 36
	public override void OnSelect(BaseEventData eventData) { }

	// RVA: 0x256DB4 Offset: 0x256DB4 VA: 0x256DB4 Slot: 69
	public virtual void OnPointerClick(PointerEventData eventData) { }

	// RVA: 0x24DAC4 Offset: 0x24DAC4 VA: 0x24DAC4
	public void DeactivateInputField() { }

	// RVA: 0x256DF4 Offset: 0x256DF4 VA: 0x256DF4 Slot: 37
	public override void OnDeselect(BaseEventData eventData) { }

	// RVA: 0x256E1C Offset: 0x256E1C VA: 0x256E1C Slot: 70
	public virtual void OnSubmit(BaseEventData eventData) { }

	// RVA: 0x24CD28 Offset: 0x24CD28 VA: 0x24CD28
	private void EnforceContentType() { }

	// RVA: 0x24AF18 Offset: 0x24AF18 VA: 0x24AF18
	private void EnforceTextHOverflow() { }

	// RVA: 0x24CF0C Offset: 0x24CF0C VA: 0x24CF0C
	private void SetToCustomIfContentTypeIsNot(InputField.ContentType[] allowedContentTypes) { }

	// RVA: 0x24D024 Offset: 0x24D024 VA: 0x24D024
	private void SetToCustom() { }

	// RVA: 0x256E74 Offset: 0x256E74 VA: 0x256E74 Slot: 26
	protected override void DoStateTransition(Selectable.SelectionState state, bool instant) { }

	// RVA: 0x256EA4 Offset: 0x256EA4 VA: 0x256EA4 Slot: 71
	public virtual void CalculateLayoutInputHorizontal() { }

	// RVA: 0x256EA8 Offset: 0x256EA8 VA: 0x256EA8 Slot: 72
	public virtual void CalculateLayoutInputVertical() { }

	// RVA: 0x256EAC Offset: 0x256EAC VA: 0x256EAC Slot: 73
	public virtual float get_minWidth() { }

	// RVA: 0x256EB4 Offset: 0x256EB4 VA: 0x256EB4 Slot: 74
	public virtual float get_preferredWidth() { }

	// RVA: 0x2570A0 Offset: 0x2570A0 VA: 0x2570A0 Slot: 75
	public virtual float get_flexibleWidth() { }

	// RVA: 0x2570AC Offset: 0x2570AC VA: 0x2570AC Slot: 76
	public virtual float get_minHeight() { }

	// RVA: 0x2570B4 Offset: 0x2570B4 VA: 0x2570B4 Slot: 77
	public virtual float get_preferredHeight() { }

	// RVA: 0x2572E8 Offset: 0x2572E8 VA: 0x2572E8 Slot: 78
	public virtual float get_flexibleHeight() { }

	// RVA: 0x2572F4 Offset: 0x2572F4 VA: 0x2572F4 Slot: 79
	public virtual int get_layoutPriority() { }

	// RVA: 0x2572FC Offset: 0x2572FC VA: 0x2572FC
	private static void .cctor() { }

	// RVA: 0x257394 Offset: 0x257394 VA: 0x257394 Slot: 46
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum InputField.ContentType // TypeDefIndex: 1970
{
	// Fields
	public int value__; // 0x0
	public const InputField.ContentType Standard = 0;
	public const InputField.ContentType Autocorrected = 1;
	public const InputField.ContentType IntegerNumber = 2;
	public const InputField.ContentType DecimalNumber = 3;
	public const InputField.ContentType Alphanumeric = 4;
	public const InputField.ContentType Name = 5;
	public const InputField.ContentType EmailAddress = 6;
	public const InputField.ContentType Password = 7;
	public const InputField.ContentType Pin = 8;
	public const InputField.ContentType Custom = 9;
}

// Namespace: 
public enum InputField.InputType // TypeDefIndex: 1971
{
	// Fields
	public int value__; // 0x0
	public const InputField.InputType Standard = 0;
	public const InputField.InputType AutoCorrect = 1;
	public const InputField.InputType Password = 2;
}

// Namespace: 
public enum InputField.CharacterValidation // TypeDefIndex: 1972
{
	// Fields
	public int value__; // 0x0
	public const InputField.CharacterValidation None = 0;
	public const InputField.CharacterValidation Integer = 1;
	public const InputField.CharacterValidation Decimal = 2;
	public const InputField.CharacterValidation Alphanumeric = 3;
	public const InputField.CharacterValidation Name = 4;
	public const InputField.CharacterValidation EmailAddress = 5;
}

// Namespace: 
public enum InputField.LineType // TypeDefIndex: 1973
{
	// Fields
	public int value__; // 0x0
	public const InputField.LineType SingleLine = 0;
	public const InputField.LineType MultiLineSubmit = 1;
	public const InputField.LineType MultiLineNewline = 2;
}

// Namespace: 
public sealed class InputField.OnValidateInput : MulticastDelegate // TypeDefIndex: 1974
{
	// Methods

	// RVA: 0x24B9C0 Offset: 0x24B9C0 VA: 0x24B9C0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x24B9DC Offset: 0x24B9DC VA: 0x24B9DC Slot: 11
	public virtual char Invoke(string text, int charIndex, char addedChar) { }

	// RVA: 0x257BCC Offset: 0x257BCC VA: 0x257BCC Slot: 12
	public virtual IAsyncResult BeginInvoke(string text, int charIndex, char addedChar, AsyncCallback callback, object object) { }

	// RVA: 0x257C90 Offset: 0x257C90 VA: 0x257C90 Slot: 13
	public virtual char EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[Serializable]
public class InputField.SubmitEvent : UnityEvent<string> // TypeDefIndex: 1975
{
	// Methods

	// RVA: 0x24AE50 Offset: 0x24AE50 VA: 0x24AE50
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class InputField.OnChangeEvent : UnityEvent<string> // TypeDefIndex: 1976
{
	// Methods

	// RVA: 0x24AEB4 Offset: 0x24AEB4 VA: 0x24AEB4
	public void .ctor() { }
}

// Namespace: 
protected enum InputField.EditState // TypeDefIndex: 1977
{
	// Fields
	public int value__; // 0x0
	public const InputField.EditState Continue = 0;
	public const InputField.EditState Finish = 1;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC170C Offset: 0xC170C VA: 0xC170C
private sealed class InputField.<CaretBlink>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 1978
{
	// Fields
	internal float <blinkPeriod>__1; // 0x8
	internal bool <blinkState>__1; // 0xC
	internal InputField $this; // 0x10
	internal object $current; // 0x14
	internal bool $disposing; // 0x18
	internal int $PC; // 0x1C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xC468C Offset: 0xC468C VA: 0xC468C
	// RVA: 0x24DD3C Offset: 0x24DD3C VA: 0x24DD3C
	public void .ctor() { }

	// RVA: 0x25739C Offset: 0x25739C VA: 0x25739C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xC469C Offset: 0xC469C VA: 0xC469C
	// RVA: 0x2575B4 Offset: 0x2575B4 VA: 0x2575B4 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC46AC Offset: 0xC46AC VA: 0xC46AC
	// RVA: 0x2575BC Offset: 0x2575BC VA: 0x2575BC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC46BC Offset: 0xC46BC VA: 0xC46BC
	// RVA: 0x2575C4 Offset: 0x2575C4 VA: 0x2575C4 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xC46CC Offset: 0xC46CC VA: 0xC46CC
	// RVA: 0x2575D8 Offset: 0x2575D8 VA: 0x2575D8 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC171C Offset: 0xC171C VA: 0xC171C
private sealed class InputField.<MouseDragOutsideRect>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 1979
{
	// Fields
	internal Vector2 <position>__1; // 0x8
	internal PointerEventData eventData; // 0x10
	internal Vector2 <localMousePos>__1; // 0x14
	internal Rect <rect>__1; // 0x1C
	internal float <delay>__1; // 0x2C
	internal InputField $this; // 0x30
	internal object $current; // 0x34
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xC46DC Offset: 0xC46DC VA: 0xC46DC
	// RVA: 0x250EB8 Offset: 0x250EB8 VA: 0x250EB8
	public void .ctor() { }

	// RVA: 0x257660 Offset: 0x257660 VA: 0x257660 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xC46EC Offset: 0xC46EC VA: 0xC46EC
	// RVA: 0x257B20 Offset: 0x257B20 VA: 0x257B20 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC46FC Offset: 0xC46FC VA: 0xC46FC
	// RVA: 0x257B28 Offset: 0x257B28 VA: 0x257B28 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC470C Offset: 0xC470C VA: 0xC470C
	// RVA: 0x257B30 Offset: 0x257B30 VA: 0x257B30 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xC471C Offset: 0xC471C VA: 0xC471C
	// RVA: 0x257B44 Offset: 0x257B44 VA: 0x257B44 Slot: 6
	public void Reset() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC0A90 Offset: 0xC0A90 VA: 0xC0A90
[ExecuteAlways] // RVA: 0xC0A90 Offset: 0xC0A90 VA: 0xC0A90
[RequireComponent] // RVA: 0xC0A90 Offset: 0xC0A90 VA: 0xC0A90
[DisallowMultipleComponent] // RVA: 0xC0A90 Offset: 0xC0A90 VA: 0xC0A90
public class Mask : UIBehaviour, ICanvasRaycastFilter, IMaterialModifier // TypeDefIndex: 1980
{
	// Fields
	private RectTransform m_RectTransform; // 0xC
	[SerializeField] // RVA: 0xC2DF8 Offset: 0xC2DF8 VA: 0xC2DF8
	private bool m_ShowMaskGraphic; // 0x10
	private Graphic m_Graphic; // 0x14
	private Material m_MaskMaterial; // 0x18
	private Material m_UnmaskMaterial; // 0x1C

	// Properties
	public RectTransform rectTransform { get; }
	public bool showMaskGraphic { get; set; }
	public Graphic graphic { get; }

	// Methods

	// RVA: 0x2195D8 Offset: 0x2195D8 VA: 0x2195D8
	protected void .ctor() { }

	// RVA: 0x2195E8 Offset: 0x2195E8 VA: 0x2195E8
	public RectTransform get_rectTransform() { }

	// RVA: 0x21965C Offset: 0x21965C VA: 0x21965C
	public bool get_showMaskGraphic() { }

	// RVA: 0x219664 Offset: 0x219664 VA: 0x219664
	public void set_showMaskGraphic(bool value) { }

	// RVA: 0x219750 Offset: 0x219750 VA: 0x219750
	public Graphic get_graphic() { }

	// RVA: 0x2197C4 Offset: 0x2197C4 VA: 0x2197C4 Slot: 19
	public virtual bool MaskEnabled() { }

	[ObsoleteAttribute] // RVA: 0xC414C Offset: 0xC414C VA: 0xC414C
	// RVA: 0x219878 Offset: 0x219878 VA: 0x219878 Slot: 20
	public virtual void OnSiblingGraphicEnabledDisabled() { }

	// RVA: 0x21987C Offset: 0x21987C VA: 0x21987C Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x219D10 Offset: 0x219D10 VA: 0x219D10 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x21A16C Offset: 0x21A16C VA: 0x21A16C Slot: 21
	public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }

	// RVA: 0x21A240 Offset: 0x21A240 VA: 0x21A240 Slot: 22
	public virtual Material GetModifiedMaterial(Material baseMaterial) { }
}

// Namespace: UnityEngine.UI
public abstract class MaskableGraphic : Graphic, IClippable, IMaskable, IMaterialModifier // TypeDefIndex: 1981
{
	// Fields
	protected bool m_ShouldRecalculateStencil; // 0x45
	protected Material m_MaskMaterial; // 0x48
	private RectMask2D m_ParentMask; // 0x4C
	private bool m_Maskable; // 0x50
	[EditorBrowsableAttribute] // RVA: 0xC2E08 Offset: 0xC2E08 VA: 0xC2E08
	[ObsoleteAttribute] // RVA: 0xC2E08 Offset: 0xC2E08 VA: 0xC2E08
	protected bool m_IncludeForMasking; // 0x51
	[SerializeField] // RVA: 0xC2E58 Offset: 0xC2E58 VA: 0xC2E58
	private MaskableGraphic.CullStateChangedEvent m_OnCullStateChanged; // 0x54
	[EditorBrowsableAttribute] // RVA: 0xC2E68 Offset: 0xC2E68 VA: 0xC2E68
	[ObsoleteAttribute] // RVA: 0xC2E68 Offset: 0xC2E68 VA: 0xC2E68
	protected bool m_ShouldRecalculate; // 0x58
	protected int m_StencilValue; // 0x5C
	private readonly Vector3[] m_Corners; // 0x60

	// Properties
	public MaskableGraphic.CullStateChangedEvent onCullStateChanged { get; set; }
	public bool maskable { get; set; }
	private Rect rootCanvasRect { get; }

	// Methods

	// RVA: 0x21CC48 Offset: 0x21CC48 VA: 0x21CC48
	protected void .ctor() { }

	// RVA: 0x21CD84 Offset: 0x21CD84 VA: 0x21CD84
	public MaskableGraphic.CullStateChangedEvent get_onCullStateChanged() { }

	// RVA: 0x21CD8C Offset: 0x21CD8C VA: 0x21CD8C
	public void set_onCullStateChanged(MaskableGraphic.CullStateChangedEvent value) { }

	// RVA: 0x21CD94 Offset: 0x21CD94 VA: 0x21CD94
	public bool get_maskable() { }

	// RVA: 0x21CD9C Offset: 0x21CD9C VA: 0x21CD9C
	public void set_maskable(bool value) { }

	// RVA: 0x21CDCC Offset: 0x21CDCC VA: 0x21CDCC Slot: 57
	public virtual Material GetModifiedMaterial(Material baseMaterial) { }

	// RVA: 0x21CF90 Offset: 0x21CF90 VA: 0x21CF90 Slot: 58
	public virtual void Cull(Rect clipRect, bool validRect) { }

	// RVA: 0x21D3F4 Offset: 0x21D3F4 VA: 0x21D3F4
	private void UpdateCull(bool cull) { }

	// RVA: 0x21D50C Offset: 0x21D50C VA: 0x21D50C Slot: 59
	public virtual void SetClipRect(Rect clipRect, bool validRect) { }

	// RVA: 0x21D58C Offset: 0x21D58C VA: 0x21D58C Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x21D85C Offset: 0x21D85C VA: 0x21D85C Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x21D980 Offset: 0x21D980 VA: 0x21D980 Slot: 12
	protected override void OnTransformParentChanged() { }

	[EditorBrowsableAttribute] // RVA: 0xC4180 Offset: 0xC4180 VA: 0xC4180
	[ObsoleteAttribute] // RVA: 0xC4180 Offset: 0xC4180 VA: 0xC4180
	// RVA: 0x21D9D0 Offset: 0x21D9D0 VA: 0x21D9D0 Slot: 60
	public virtual void ParentMaskStateChanged() { }

	// RVA: 0x21D9D4 Offset: 0x21D9D4 VA: 0x21D9D4 Slot: 15
	protected override void OnCanvasHierarchyChanged() { }

	// RVA: 0x21D004 Offset: 0x21D004 VA: 0x21D004
	private Rect get_rootCanvasRect() { }

	// RVA: 0x21D670 Offset: 0x21D670 VA: 0x21D670
	private void UpdateClipParent() { }

	// RVA: 0x21DC28 Offset: 0x21DC28 VA: 0x21DC28 Slot: 61
	public virtual void RecalculateClipping() { }

	// RVA: 0x21DC2C Offset: 0x21DC2C VA: 0x21DC2C Slot: 62
	public virtual void RecalculateMasking() { }

	// RVA: 0x21DCD4 Offset: 0x21DCD4 VA: 0x21DCD4 Slot: 50
	private GameObject UnityEngine.UI.IClippable.get_gameObject() { }
}

// Namespace: 
[Serializable]
public class MaskableGraphic.CullStateChangedEvent : UnityEvent<bool> // TypeDefIndex: 1982
{
	// Methods

	// RVA: 0x21CD20 Offset: 0x21CD20 VA: 0x21CD20
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
public class MaskUtilities // TypeDefIndex: 1983
{
	// Methods

	// RVA: 0x21BBE0 Offset: 0x21BBE0 VA: 0x21BBE0
	public void .ctor() { }

	// RVA: 0x21BBE8 Offset: 0x21BBE8 VA: 0x21BBE8
	public static void Notify2DMaskStateChanged(Component mask) { }

	// RVA: 0x2199A8 Offset: 0x2199A8 VA: 0x2199A8
	public static void NotifyStencilStateChanged(Component mask) { }

	// RVA: 0x21A55C Offset: 0x21A55C VA: 0x21A55C
	public static Transform FindRootSortOverrideCanvas(Transform start) { }

	// RVA: 0x21A758 Offset: 0x21A758 VA: 0x21A758
	public static int GetStencilDepth(Transform transform, Transform stopAfter) { }

	// RVA: 0x21BF50 Offset: 0x21BF50 VA: 0x21BF50
	public static bool IsDescendantOrSelf(Transform father, Transform child) { }

	// RVA: 0x21C170 Offset: 0x21C170 VA: 0x21C170
	public static RectMask2D GetRectMaskForClippable(IClippable clippable) { }

	// RVA: 0x21C76C Offset: 0x21C76C VA: 0x21C76C
	public static void GetRectMasksForClip(RectMask2D clipper, List<RectMask2D> masks) { }
}

// Namespace: UnityEngine.UI
internal static class Misc // TypeDefIndex: 1984
{
	// Methods

	// RVA: 0x21DCDC Offset: 0x21DCDC VA: 0x21DCDC
	public static void Destroy(Object obj) { }

	// RVA: 0x21DE44 Offset: 0x21DE44 VA: 0x21DE44
	public static void DestroyImmediate(Object obj) { }
}

// Namespace: UnityEngine.UI
internal static class MultipleDisplayUtilities // TypeDefIndex: 1985
{
	// Methods

	// RVA: 0x21DF4C Offset: 0x21DF4C VA: 0x21DF4C
	public static bool GetRelativeMousePositionForDrag(PointerEventData eventData, ref Vector2 position) { }

	// RVA: 0x21E114 Offset: 0x21E114 VA: 0x21E114
	public static Vector2 GetMousePositionRelativeToMainDisplayResolution() { }
}

// Namespace: UnityEngine.UI
[Serializable]
public struct Navigation : IEquatable<Navigation> // TypeDefIndex: 1986
{
	// Fields
	[SerializeField] // RVA: 0xC2EC4 Offset: 0xC2EC4 VA: 0xC2EC4
	private Navigation.Mode m_Mode; // 0x0
	[SerializeField] // RVA: 0xC2ED4 Offset: 0xC2ED4 VA: 0xC2ED4
	private Selectable m_SelectOnUp; // 0x4
	[SerializeField] // RVA: 0xC2EE4 Offset: 0xC2EE4 VA: 0xC2EE4
	private Selectable m_SelectOnDown; // 0x8
	[SerializeField] // RVA: 0xC2EF4 Offset: 0xC2EF4 VA: 0xC2EF4
	private Selectable m_SelectOnLeft; // 0xC
	[SerializeField] // RVA: 0xC2F04 Offset: 0xC2F04 VA: 0xC2F04
	private Selectable m_SelectOnRight; // 0x10

	// Properties
	public Navigation.Mode mode { get; set; }
	public Selectable selectOnUp { get; set; }
	public Selectable selectOnDown { get; set; }
	public Selectable selectOnLeft { get; set; }
	public Selectable selectOnRight { get; set; }
	public static Navigation defaultNavigation { get; }

	// Methods

	// RVA: 0xC6FAC Offset: 0xC6FAC VA: 0xC6FAC
	public Navigation.Mode get_mode() { }

	// RVA: 0xC6FB4 Offset: 0xC6FB4 VA: 0xC6FB4
	public void set_mode(Navigation.Mode value) { }

	// RVA: 0xC6FBC Offset: 0xC6FBC VA: 0xC6FBC
	public Selectable get_selectOnUp() { }

	// RVA: 0xC6FC4 Offset: 0xC6FC4 VA: 0xC6FC4
	public void set_selectOnUp(Selectable value) { }

	// RVA: 0xC6FCC Offset: 0xC6FCC VA: 0xC6FCC
	public Selectable get_selectOnDown() { }

	// RVA: 0xC6FD4 Offset: 0xC6FD4 VA: 0xC6FD4
	public void set_selectOnDown(Selectable value) { }

	// RVA: 0xC6FDC Offset: 0xC6FDC VA: 0xC6FDC
	public Selectable get_selectOnLeft() { }

	// RVA: 0xC6FE4 Offset: 0xC6FE4 VA: 0xC6FE4
	public void set_selectOnLeft(Selectable value) { }

	// RVA: 0xC6FEC Offset: 0xC6FEC VA: 0xC6FEC
	public Selectable get_selectOnRight() { }

	// RVA: 0xC6FF4 Offset: 0xC6FF4 VA: 0xC6FF4
	public void set_selectOnRight(Selectable value) { }

	// RVA: 0x21E438 Offset: 0x21E438 VA: 0x21E438
	public static Navigation get_defaultNavigation() { }

	// RVA: 0xC6FFC Offset: 0xC6FFC VA: 0xC6FFC Slot: 4
	public bool Equals(Navigation other) { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0xC0B54 Offset: 0xC0B54 VA: 0xC0B54
public enum Navigation.Mode // TypeDefIndex: 1987
{
	// Fields
	public int value__; // 0x0
	public const Navigation.Mode None = 0;
	public const Navigation.Mode Horizontal = 1;
	public const Navigation.Mode Vertical = 2;
	public const Navigation.Mode Automatic = 3;
	public const Navigation.Mode Explicit = 4;
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC0B64 Offset: 0xC0B64 VA: 0xC0B64
public class RawImage : MaskableGraphic // TypeDefIndex: 1988
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0xC2F14 Offset: 0xC2F14 VA: 0xC2F14
	[SerializeField] // RVA: 0xC2F14 Offset: 0xC2F14 VA: 0xC2F14
	private Texture m_Texture; // 0x64
	[SerializeField] // RVA: 0xC2F5C Offset: 0xC2F5C VA: 0xC2F5C
	private Rect m_UVRect; // 0x68

	// Properties
	public override Texture mainTexture { get; }
	public Texture texture { get; set; }
	public Rect uvRect { get; set; }

	// Methods

	// RVA: 0x21F930 Offset: 0x21F930 VA: 0x21F930
	protected void .ctor() { }

	// RVA: 0x21F9A0 Offset: 0x21F9A0 VA: 0x21F9A0 Slot: 35
	public override Texture get_mainTexture() { }

	// RVA: 0x21FB8C Offset: 0x21FB8C VA: 0x21FB8C
	public Texture get_texture() { }

	// RVA: 0x21FB94 Offset: 0x21FB94 VA: 0x21FB94
	public void set_texture(Texture value) { }

	// RVA: 0x21FC58 Offset: 0x21FC58 VA: 0x21FC58
	public Rect get_uvRect() { }

	// RVA: 0x21FC68 Offset: 0x21FC68 VA: 0x21FC68
	public void set_uvRect(Rect value) { }

	// RVA: 0x21FCE4 Offset: 0x21FCE4 VA: 0x21FCE4 Slot: 45
	public override void SetNativeSize() { }

	// RVA: 0x21FF50 Offset: 0x21FF50 VA: 0x21FF50 Slot: 44
	protected override void OnPopulateMesh(VertexHelper vh) { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC0BA4 Offset: 0xC0BA4 VA: 0xC0BA4
[ExecuteAlways] // RVA: 0xC0BA4 Offset: 0xC0BA4 VA: 0xC0BA4
[DisallowMultipleComponent] // RVA: 0xC0BA4 Offset: 0xC0BA4 VA: 0xC0BA4
[RequireComponent] // RVA: 0xC0BA4 Offset: 0xC0BA4 VA: 0xC0BA4
public class RectMask2D : UIBehaviour, IClipper, ICanvasRaycastFilter // TypeDefIndex: 1989
{
	// Fields
	private readonly RectangularVertexClipper m_VertexClipper; // 0xC
	private RectTransform m_RectTransform; // 0x10
	private HashSet<IClippable> m_ClipTargets; // 0x14
	private bool m_ShouldRecalculateClipRects; // 0x18
	private List<RectMask2D> m_Clippers; // 0x1C
	private Rect m_LastClipRectCanvasSpace; // 0x20
	private bool m_ForceClip; // 0x30
	private Canvas m_Canvas; // 0x34
	private Vector3[] m_Corners; // 0x38

	// Properties
	private Canvas Canvas { get; }
	public Rect canvasRect { get; }
	public RectTransform rectTransform { get; }
	private Rect rootCanvasRect { get; }

	// Methods

	// RVA: 0x220710 Offset: 0x220710 VA: 0x220710
	protected void .ctor() { }

	// RVA: 0x220890 Offset: 0x220890 VA: 0x220890
	private Canvas get_Canvas() { }

	// RVA: 0x220A9C Offset: 0x220A9C VA: 0x220A9C
	public Rect get_canvasRect() { }

	// RVA: 0x220B0C Offset: 0x220B0C VA: 0x220B0C
	public RectTransform get_rectTransform() { }

	// RVA: 0x220EFC Offset: 0x220EFC VA: 0x220EFC Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x220F30 Offset: 0x220F30 VA: 0x220F30 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x220FF4 Offset: 0x220FF4 VA: 0x220FF4 Slot: 19
	public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }

	// RVA: 0x2210C8 Offset: 0x2210C8 VA: 0x2210C8
	private Rect get_rootCanvasRect() { }

	// RVA: 0x2213EC Offset: 0x2213EC VA: 0x2213EC Slot: 20
	public virtual void PerformClipping() { }

	// RVA: 0x21DB58 Offset: 0x21DB58 VA: 0x21DB58
	public void AddClippable(IClippable clippable) { }

	// RVA: 0x21DA24 Offset: 0x21DA24 VA: 0x21DA24
	public void RemoveClippable(IClippable clippable) { }

	// RVA: 0x221980 Offset: 0x221980 VA: 0x221980 Slot: 12
	protected override void OnTransformParentChanged() { }

	// RVA: 0x2219A0 Offset: 0x2219A0 VA: 0x2219A0 Slot: 15
	protected override void OnCanvasHierarchyChanged() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC0C70 Offset: 0xC0C70 VA: 0xC0C70
[RequireComponent] // RVA: 0xC0C70 Offset: 0xC0C70 VA: 0xC0C70
public class Scrollbar : Selectable, IBeginDragHandler, IDragHandler, IInitializePotentialDragHandler, ICanvasElement, IEventSystemHandler // TypeDefIndex: 1990
{
	// Fields
	[SerializeField] // RVA: 0xC2F6C Offset: 0xC2F6C VA: 0xC2F6C
	private RectTransform m_HandleRect; // 0x94
	[SerializeField] // RVA: 0xC2F7C Offset: 0xC2F7C VA: 0xC2F7C
	private Scrollbar.Direction m_Direction; // 0x98
	[RangeAttribute] // RVA: 0xC2F8C Offset: 0xC2F8C VA: 0xC2F8C
	[SerializeField] // RVA: 0xC2F8C Offset: 0xC2F8C VA: 0xC2F8C
	private float m_Value; // 0x9C
	[RangeAttribute] // RVA: 0xC2FC4 Offset: 0xC2FC4 VA: 0xC2FC4
	[SerializeField] // RVA: 0xC2FC4 Offset: 0xC2FC4 VA: 0xC2FC4
	private float m_Size; // 0xA0
	[RangeAttribute] // RVA: 0xC2FFC Offset: 0xC2FFC VA: 0xC2FFC
	[SerializeField] // RVA: 0xC2FFC Offset: 0xC2FFC VA: 0xC2FFC
	private int m_NumberOfSteps; // 0xA4
	[SpaceAttribute] // RVA: 0xC3038 Offset: 0xC3038 VA: 0xC3038
	[SerializeField] // RVA: 0xC3038 Offset: 0xC3038 VA: 0xC3038
	private Scrollbar.ScrollEvent m_OnValueChanged; // 0xA8
	private RectTransform m_ContainerRect; // 0xAC
	private Vector2 m_Offset; // 0xB0
	private DrivenRectTransformTracker m_Tracker; // 0xB8
	private Coroutine m_PointerDownRepeat; // 0xBC
	private bool isPointerDownAndNotDragging; // 0xC0

	// Properties
	public RectTransform handleRect { get; set; }
	public Scrollbar.Direction direction { get; set; }
	public float value { get; set; }
	public float size { get; set; }
	public int numberOfSteps { get; set; }
	public Scrollbar.ScrollEvent onValueChanged { get; set; }
	private float stepSize { get; }
	private Scrollbar.Axis axis { get; }
	private bool reverseValue { get; }

	// Methods

	// RVA: 0x22A624 Offset: 0x22A624 VA: 0x22A624
	protected void .ctor() { }

	// RVA: 0x22A88C Offset: 0x22A88C VA: 0x22A88C
	public RectTransform get_handleRect() { }

	// RVA: 0x22A894 Offset: 0x22A894 VA: 0x22A894
	public void set_handleRect(RectTransform value) { }

	// RVA: 0x22AC84 Offset: 0x22AC84 VA: 0x22AC84
	public Scrollbar.Direction get_direction() { }

	// RVA: 0x22AC8C Offset: 0x22AC8C VA: 0x22AC8C
	public void set_direction(Scrollbar.Direction value) { }

	// RVA: 0x22AD08 Offset: 0x22AD08 VA: 0x22AD08
	public float get_value() { }

	// RVA: 0x2285D8 Offset: 0x2285D8 VA: 0x2285D8
	public void set_value(float value) { }

	// RVA: 0x22AE68 Offset: 0x22AE68 VA: 0x22AE68
	public float get_size() { }

	// RVA: 0x228370 Offset: 0x228370 VA: 0x228370
	public void set_size(float value) { }

	// RVA: 0x22AE70 Offset: 0x22AE70 VA: 0x22AE70
	public int get_numberOfSteps() { }

	// RVA: 0x22AE78 Offset: 0x22AE78 VA: 0x22AE78
	public void set_numberOfSteps(int value) { }

	// RVA: 0x2250B8 Offset: 0x2250B8 VA: 0x2250B8
	public Scrollbar.ScrollEvent get_onValueChanged() { }

	// RVA: 0x22AF04 Offset: 0x22AF04 VA: 0x22AF04
	public void set_onValueChanged(Scrollbar.ScrollEvent value) { }

	// RVA: 0x22AF0C Offset: 0x22AF0C VA: 0x22AF0C
	private float get_stepSize() { }

	// RVA: 0x22AF40 Offset: 0x22AF40 VA: 0x22AF40 Slot: 47
	public virtual void Rebuild(CanvasUpdate executing) { }

	// RVA: 0x22AF44 Offset: 0x22AF44 VA: 0x22AF44 Slot: 48
	public virtual void LayoutComplete() { }

	// RVA: 0x22AF48 Offset: 0x22AF48 VA: 0x22AF48 Slot: 49
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x22AF4C Offset: 0x22AF4C VA: 0x22AF4C Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x22B180 Offset: 0x22B180 VA: 0x22B180 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x22A918 Offset: 0x22A918 VA: 0x22A918
	private void UpdateCachedReferences() { }

	// RVA: 0x22AE60 Offset: 0x22AE60 VA: 0x22AE60
	private void Set(float input) { }

	// RVA: 0x22B05C Offset: 0x22B05C VA: 0x22B05C
	private void Set(float input, bool sendCallback) { }

	// RVA: 0x22B280 Offset: 0x22B280 VA: 0x22B280 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0x22B2BC Offset: 0x22B2BC VA: 0x22B2BC
	private Scrollbar.Axis get_axis() { }

	// RVA: 0x22B2D8 Offset: 0x22B2D8 VA: 0x22B2D8
	private bool get_reverseValue() { }

	// RVA: 0x22AA6C Offset: 0x22AA6C VA: 0x22AA6C
	private void UpdateVisuals() { }

	// RVA: 0x22B2F0 Offset: 0x22B2F0 VA: 0x22B2F0
	private void UpdateDrag(PointerEventData eventData) { }

	// RVA: 0x22B754 Offset: 0x22B754 VA: 0x22B754
	private bool MayDrag(PointerEventData eventData) { }

	// RVA: 0x22B7D0 Offset: 0x22B7D0 VA: 0x22B7D0 Slot: 50
	public virtual void OnBeginDrag(PointerEventData eventData) { }

	// RVA: 0x22BACC Offset: 0x22BACC VA: 0x22BACC Slot: 51
	public virtual void OnDrag(PointerEventData eventData) { }

	// RVA: 0x22BB88 Offset: 0x22BB88 VA: 0x22BB88 Slot: 32
	public override void OnPointerDown(PointerEventData eventData) { }

	[DebuggerHiddenAttribute] // RVA: 0xC41D0 Offset: 0xC41D0 VA: 0xC41D0
	// RVA: 0x22BD74 Offset: 0x22BD74 VA: 0x22BD74
	protected IEnumerator ClickRepeat(PointerEventData eventData) { }

	// RVA: 0x22BE1C Offset: 0x22BE1C VA: 0x22BE1C Slot: 33
	public override void OnPointerUp(PointerEventData eventData) { }

	// RVA: 0x22BE84 Offset: 0x22BE84 VA: 0x22BE84 Slot: 31
	public override void OnMove(AxisEventData eventData) { }

	// RVA: 0x22C1F4 Offset: 0x22C1F4 VA: 0x22C1F4 Slot: 27
	public override Selectable FindSelectableOnLeft() { }

	// RVA: 0x22C368 Offset: 0x22C368 VA: 0x22C368 Slot: 28
	public override Selectable FindSelectableOnRight() { }

	// RVA: 0x22C4C4 Offset: 0x22C4C4 VA: 0x22C4C4 Slot: 29
	public override Selectable FindSelectableOnUp() { }

	// RVA: 0x22C620 Offset: 0x22C620 VA: 0x22C620 Slot: 30
	public override Selectable FindSelectableOnDown() { }

	// RVA: 0x22C77C Offset: 0x22C77C VA: 0x22C77C Slot: 52
	public virtual void OnInitializePotentialDrag(PointerEventData eventData) { }

	// RVA: 0x22C7AC Offset: 0x22C7AC VA: 0x22C7AC
	public void SetDirection(Scrollbar.Direction direction, bool includeRectLayouts) { }

	// RVA: 0x22C980 Offset: 0x22C980 VA: 0x22C980 Slot: 43
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum Scrollbar.Direction // TypeDefIndex: 1991
{
	// Fields
	public int value__; // 0x0
	public const Scrollbar.Direction LeftToRight = 0;
	public const Scrollbar.Direction RightToLeft = 1;
	public const Scrollbar.Direction BottomToTop = 2;
	public const Scrollbar.Direction TopToBottom = 3;
}

// Namespace: 
[Serializable]
public class Scrollbar.ScrollEvent : UnityEvent<float> // TypeDefIndex: 1992
{
	// Methods

	// RVA: 0x22A72C Offset: 0x22A72C VA: 0x22A72C
	public void .ctor() { }
}

// Namespace: 
private enum Scrollbar.Axis // TypeDefIndex: 1993
{
	// Fields
	public int value__; // 0x0
	public const Scrollbar.Axis Horizontal = 0;
	public const Scrollbar.Axis Vertical = 1;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC173C Offset: 0xC173C VA: 0xC173C
private sealed class Scrollbar.<ClickRepeat>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 1994
{
	// Fields
	internal PointerEventData eventData; // 0x8
	internal Scrollbar $this; // 0xC
	internal object $current; // 0x10
	internal bool $disposing; // 0x14
	internal int $PC; // 0x18

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xC472C Offset: 0xC472C VA: 0xC472C
	// RVA: 0x22BE14 Offset: 0x22BE14 VA: 0x22BE14
	public void .ctor() { }

	// RVA: 0x22C988 Offset: 0x22C988 VA: 0x22C988 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xC473C Offset: 0xC473C VA: 0xC473C
	// RVA: 0x22CCBC Offset: 0x22CCBC VA: 0x22CCBC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC474C Offset: 0xC474C VA: 0xC474C
	// RVA: 0x22CCC4 Offset: 0x22CCC4 VA: 0x22CCC4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC475C Offset: 0xC475C VA: 0xC475C
	// RVA: 0x22CCCC Offset: 0x22CCCC VA: 0x22CCCC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xC476C Offset: 0xC476C VA: 0xC476C
	// RVA: 0x22CCE0 Offset: 0x22CCE0 VA: 0x22CCE0 Slot: 6
	public void Reset() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC0D1C Offset: 0xC0D1C VA: 0xC0D1C
[SelectionBaseAttribute] // RVA: 0xC0D1C Offset: 0xC0D1C VA: 0xC0D1C
[ExecuteAlways] // RVA: 0xC0D1C Offset: 0xC0D1C VA: 0xC0D1C
[DisallowMultipleComponent] // RVA: 0xC0D1C Offset: 0xC0D1C VA: 0xC0D1C
[RequireComponent] // RVA: 0xC0D1C Offset: 0xC0D1C VA: 0xC0D1C
public class ScrollRect : UIBehaviour, IInitializePotentialDragHandler, IBeginDragHandler, IEndDragHandler, IDragHandler, IScrollHandler, ICanvasElement, ILayoutElement, ILayoutGroup, IEventSystemHandler, ILayoutController // TypeDefIndex: 1995
{
	// Fields
	[SerializeField] // RVA: 0xC3070 Offset: 0xC3070 VA: 0xC3070
	private RectTransform m_Content; // 0xC
	[SerializeField] // RVA: 0xC3080 Offset: 0xC3080 VA: 0xC3080
	private bool m_Horizontal; // 0x10
	[SerializeField] // RVA: 0xC3090 Offset: 0xC3090 VA: 0xC3090
	private bool m_Vertical; // 0x11
	[SerializeField] // RVA: 0xC30A0 Offset: 0xC30A0 VA: 0xC30A0
	private ScrollRect.MovementType m_MovementType; // 0x14
	[SerializeField] // RVA: 0xC30B0 Offset: 0xC30B0 VA: 0xC30B0
	private float m_Elasticity; // 0x18
	[SerializeField] // RVA: 0xC30C0 Offset: 0xC30C0 VA: 0xC30C0
	private bool m_Inertia; // 0x1C
	[SerializeField] // RVA: 0xC30D0 Offset: 0xC30D0 VA: 0xC30D0
	private float m_DecelerationRate; // 0x20
	[SerializeField] // RVA: 0xC30E0 Offset: 0xC30E0 VA: 0xC30E0
	private float m_ScrollSensitivity; // 0x24
	[SerializeField] // RVA: 0xC30F0 Offset: 0xC30F0 VA: 0xC30F0
	private RectTransform m_Viewport; // 0x28
	[SerializeField] // RVA: 0xC3100 Offset: 0xC3100 VA: 0xC3100
	private Scrollbar m_HorizontalScrollbar; // 0x2C
	[SerializeField] // RVA: 0xC3110 Offset: 0xC3110 VA: 0xC3110
	private Scrollbar m_VerticalScrollbar; // 0x30
	[SerializeField] // RVA: 0xC3120 Offset: 0xC3120 VA: 0xC3120
	private ScrollRect.ScrollbarVisibility m_HorizontalScrollbarVisibility; // 0x34
	[SerializeField] // RVA: 0xC3130 Offset: 0xC3130 VA: 0xC3130
	private ScrollRect.ScrollbarVisibility m_VerticalScrollbarVisibility; // 0x38
	[SerializeField] // RVA: 0xC3140 Offset: 0xC3140 VA: 0xC3140
	private float m_HorizontalScrollbarSpacing; // 0x3C
	[SerializeField] // RVA: 0xC3150 Offset: 0xC3150 VA: 0xC3150
	private float m_VerticalScrollbarSpacing; // 0x40
	[SerializeField] // RVA: 0xC3160 Offset: 0xC3160 VA: 0xC3160
	private ScrollRect.ScrollRectEvent m_OnValueChanged; // 0x44
	private Vector2 m_PointerStartLocalCursor; // 0x48
	protected Vector2 m_ContentStartPosition; // 0x50
	private RectTransform m_ViewRect; // 0x58
	protected Bounds m_ContentBounds; // 0x5C
	private Bounds m_ViewBounds; // 0x74
	private Vector2 m_Velocity; // 0x8C
	private bool m_Dragging; // 0x94
	private bool m_Scrolling; // 0x95
	private Vector2 m_PrevPosition; // 0x98
	private Bounds m_PrevContentBounds; // 0xA0
	private Bounds m_PrevViewBounds; // 0xB8
	private bool m_HasRebuiltLayout; // 0xD0
	private bool m_HSliderExpand; // 0xD1
	private bool m_VSliderExpand; // 0xD2
	private float m_HSliderHeight; // 0xD4
	private float m_VSliderWidth; // 0xD8
	private RectTransform m_Rect; // 0xDC
	private RectTransform m_HorizontalScrollbarRect; // 0xE0
	private RectTransform m_VerticalScrollbarRect; // 0xE4
	private DrivenRectTransformTracker m_Tracker; // 0xE8
	private readonly Vector3[] m_Corners; // 0xEC

	// Properties
	public RectTransform content { get; set; }
	public bool horizontal { get; set; }
	public bool vertical { get; set; }
	public ScrollRect.MovementType movementType { get; set; }
	public float elasticity { get; set; }
	public bool inertia { get; set; }
	public float decelerationRate { get; set; }
	public float scrollSensitivity { get; set; }
	public RectTransform viewport { get; set; }
	public Scrollbar horizontalScrollbar { get; set; }
	public Scrollbar verticalScrollbar { get; set; }
	public ScrollRect.ScrollbarVisibility horizontalScrollbarVisibility { get; set; }
	public ScrollRect.ScrollbarVisibility verticalScrollbarVisibility { get; set; }
	public float horizontalScrollbarSpacing { get; set; }
	public float verticalScrollbarSpacing { get; set; }
	public ScrollRect.ScrollRectEvent onValueChanged { get; set; }
	protected RectTransform viewRect { get; }
	public Vector2 velocity { get; set; }
	private RectTransform rectTransform { get; }
	public Vector2 normalizedPosition { get; set; }
	public float horizontalNormalizedPosition { get; set; }
	public float verticalNormalizedPosition { get; set; }
	private bool hScrollingNeeded { get; }
	private bool vScrollingNeeded { get; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }

	// Methods

	// RVA: 0x224B98 Offset: 0x224B98 VA: 0x224B98
	protected void .ctor() { }

	// RVA: 0x224D50 Offset: 0x224D50 VA: 0x224D50
	public RectTransform get_content() { }

	// RVA: 0x224D58 Offset: 0x224D58 VA: 0x224D58
	public void set_content(RectTransform value) { }

	// RVA: 0x224D60 Offset: 0x224D60 VA: 0x224D60
	public bool get_horizontal() { }

	// RVA: 0x224D68 Offset: 0x224D68 VA: 0x224D68
	public void set_horizontal(bool value) { }

	// RVA: 0x224D70 Offset: 0x224D70 VA: 0x224D70
	public bool get_vertical() { }

	// RVA: 0x224D78 Offset: 0x224D78 VA: 0x224D78
	public void set_vertical(bool value) { }

	// RVA: 0x224D80 Offset: 0x224D80 VA: 0x224D80
	public ScrollRect.MovementType get_movementType() { }

	// RVA: 0x224D88 Offset: 0x224D88 VA: 0x224D88
	public void set_movementType(ScrollRect.MovementType value) { }

	// RVA: 0x224D90 Offset: 0x224D90 VA: 0x224D90
	public float get_elasticity() { }

	// RVA: 0x224D98 Offset: 0x224D98 VA: 0x224D98
	public void set_elasticity(float value) { }

	// RVA: 0x224DA0 Offset: 0x224DA0 VA: 0x224DA0
	public bool get_inertia() { }

	// RVA: 0x224DA8 Offset: 0x224DA8 VA: 0x224DA8
	public void set_inertia(bool value) { }

	// RVA: 0x224DB0 Offset: 0x224DB0 VA: 0x224DB0
	public float get_decelerationRate() { }

	// RVA: 0x224DB8 Offset: 0x224DB8 VA: 0x224DB8
	public void set_decelerationRate(float value) { }

	// RVA: 0x224DC0 Offset: 0x224DC0 VA: 0x224DC0
	public float get_scrollSensitivity() { }

	// RVA: 0x224DC8 Offset: 0x224DC8 VA: 0x224DC8
	public void set_scrollSensitivity(float value) { }

	// RVA: 0x224DD0 Offset: 0x224DD0 VA: 0x224DD0
	public RectTransform get_viewport() { }

	// RVA: 0x224DD8 Offset: 0x224DD8 VA: 0x224DD8
	public void set_viewport(RectTransform value) { }

	// RVA: 0x224EC0 Offset: 0x224EC0 VA: 0x224EC0
	public Scrollbar get_horizontalScrollbar() { }

	// RVA: 0x224EC8 Offset: 0x224EC8 VA: 0x224EC8
	public void set_horizontalScrollbar(Scrollbar value) { }

	// RVA: 0x2250C0 Offset: 0x2250C0 VA: 0x2250C0
	public Scrollbar get_verticalScrollbar() { }

	// RVA: 0x2250C8 Offset: 0x2250C8 VA: 0x2250C8
	public void set_verticalScrollbar(Scrollbar value) { }

	// RVA: 0x2252B8 Offset: 0x2252B8 VA: 0x2252B8
	public ScrollRect.ScrollbarVisibility get_horizontalScrollbarVisibility() { }

	// RVA: 0x2252C0 Offset: 0x2252C0 VA: 0x2252C0
	public void set_horizontalScrollbarVisibility(ScrollRect.ScrollbarVisibility value) { }

	// RVA: 0x2252C8 Offset: 0x2252C8 VA: 0x2252C8
	public ScrollRect.ScrollbarVisibility get_verticalScrollbarVisibility() { }

	// RVA: 0x2252D0 Offset: 0x2252D0 VA: 0x2252D0
	public void set_verticalScrollbarVisibility(ScrollRect.ScrollbarVisibility value) { }

	// RVA: 0x2252D8 Offset: 0x2252D8 VA: 0x2252D8
	public float get_horizontalScrollbarSpacing() { }

	// RVA: 0x2252E0 Offset: 0x2252E0 VA: 0x2252E0
	public void set_horizontalScrollbarSpacing(float value) { }

	// RVA: 0x225390 Offset: 0x225390 VA: 0x225390
	public float get_verticalScrollbarSpacing() { }

	// RVA: 0x225398 Offset: 0x225398 VA: 0x225398
	public void set_verticalScrollbarSpacing(float value) { }

	// RVA: 0x2253A0 Offset: 0x2253A0 VA: 0x2253A0
	public ScrollRect.ScrollRectEvent get_onValueChanged() { }

	// RVA: 0x2253A8 Offset: 0x2253A8 VA: 0x2253A8
	public void set_onValueChanged(ScrollRect.ScrollRectEvent value) { }

	// RVA: 0x2253B0 Offset: 0x2253B0 VA: 0x2253B0
	protected RectTransform get_viewRect() { }

	// RVA: 0x225534 Offset: 0x225534 VA: 0x225534
	public Vector2 get_velocity() { }

	// RVA: 0x225548 Offset: 0x225548 VA: 0x225548
	public void set_velocity(Vector2 value) { }

	// RVA: 0x225554 Offset: 0x225554 VA: 0x225554
	private RectTransform get_rectTransform() { }

	// RVA: 0x225608 Offset: 0x225608 VA: 0x225608 Slot: 38
	public virtual void Rebuild(CanvasUpdate executing) { }

	// RVA: 0x226744 Offset: 0x226744 VA: 0x226744 Slot: 39
	public virtual void LayoutComplete() { }

	// RVA: 0x226748 Offset: 0x226748 VA: 0x226748 Slot: 40
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x2256DC Offset: 0x2256DC VA: 0x2256DC
	private void UpdateCachedData() { }

	// RVA: 0x22674C Offset: 0x22674C VA: 0x22674C Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x22697C Offset: 0x22697C VA: 0x22697C Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x226C48 Offset: 0x226C48 VA: 0x226C48 Slot: 9
	public override bool IsActive() { }

	// RVA: 0x226CEC Offset: 0x226CEC VA: 0x226CEC
	private void EnsureLayoutHasRebuilt() { }

	// RVA: 0x226D8C Offset: 0x226D8C VA: 0x226D8C Slot: 41
	public virtual void StopMovement() { }

	// RVA: 0x226E24 Offset: 0x226E24 VA: 0x226E24 Slot: 42
	public virtual void OnScroll(PointerEventData data) { }

	// RVA: 0x2271B0 Offset: 0x2271B0 VA: 0x2271B0 Slot: 43
	public virtual void OnInitializePotentialDrag(PointerEventData eventData) { }

	// RVA: 0x227270 Offset: 0x227270 VA: 0x227270 Slot: 44
	public virtual void OnBeginDrag(PointerEventData eventData) { }

	// RVA: 0x227438 Offset: 0x227438 VA: 0x227438 Slot: 45
	public virtual void OnEndDrag(PointerEventData eventData) { }

	// RVA: 0x227474 Offset: 0x227474 VA: 0x227474 Slot: 46
	public virtual void OnDrag(PointerEventData eventData) { }

	// RVA: 0x227830 Offset: 0x227830 VA: 0x227830 Slot: 47
	protected virtual void SetContentAnchoredPosition(Vector2 position) { }

	// RVA: 0x227998 Offset: 0x227998 VA: 0x227998 Slot: 48
	protected virtual void LateUpdate() { }

	// RVA: 0x226608 Offset: 0x226608 VA: 0x226608
	protected void UpdatePrevData() { }

	// RVA: 0x226314 Offset: 0x226314 VA: 0x226314
	private void UpdateScrollbars(Vector2 offset) { }

	// RVA: 0x2282D4 Offset: 0x2282D4 VA: 0x2282D4
	public Vector2 get_normalizedPosition() { }

	// RVA: 0x228790 Offset: 0x228790 VA: 0x228790
	public void set_normalizedPosition(Vector2 value) { }

	// RVA: 0x228428 Offset: 0x228428 VA: 0x228428
	public float get_horizontalNormalizedPosition() { }

	// RVA: 0x2287D8 Offset: 0x2287D8 VA: 0x2287D8
	public void set_horizontalNormalizedPosition(float value) { }

	// RVA: 0x2285E0 Offset: 0x2285E0 VA: 0x2285E0
	public float get_verticalNormalizedPosition() { }

	// RVA: 0x2287EC Offset: 0x2287EC VA: 0x2287EC
	public void set_verticalNormalizedPosition(float value) { }

	// RVA: 0x228800 Offset: 0x228800 VA: 0x228800
	private void SetHorizontalNormalizedPosition(float value) { }

	// RVA: 0x228814 Offset: 0x228814 VA: 0x228814
	private void SetVerticalNormalizedPosition(float value) { }

	// RVA: 0x228828 Offset: 0x228828 VA: 0x228828 Slot: 49
	protected virtual void SetNormalizedPosition(float value, int axis) { }

	// RVA: 0x227764 Offset: 0x227764 VA: 0x227764
	private static float RubberDelta(float overStretching, float viewSize) { }

	// RVA: 0x228B30 Offset: 0x228B30 VA: 0x228B30 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0x228B34 Offset: 0x228B34 VA: 0x228B34
	private bool get_hScrollingNeeded() { }

	// RVA: 0x228BB4 Offset: 0x228BB4 VA: 0x228BB4
	private bool get_vScrollingNeeded() { }

	// RVA: 0x228C34 Offset: 0x228C34 VA: 0x228C34 Slot: 50
	public virtual void CalculateLayoutInputHorizontal() { }

	// RVA: 0x228C38 Offset: 0x228C38 VA: 0x228C38 Slot: 51
	public virtual void CalculateLayoutInputVertical() { }

	// RVA: 0x228C3C Offset: 0x228C3C VA: 0x228C3C Slot: 52
	public virtual float get_minWidth() { }

	// RVA: 0x228C48 Offset: 0x228C48 VA: 0x228C48 Slot: 53
	public virtual float get_preferredWidth() { }

	// RVA: 0x228C54 Offset: 0x228C54 VA: 0x228C54 Slot: 54
	public virtual float get_flexibleWidth() { }

	// RVA: 0x228C60 Offset: 0x228C60 VA: 0x228C60 Slot: 55
	public virtual float get_minHeight() { }

	// RVA: 0x228C6C Offset: 0x228C6C VA: 0x228C6C Slot: 56
	public virtual float get_preferredHeight() { }

	// RVA: 0x228C78 Offset: 0x228C78 VA: 0x228C78 Slot: 57
	public virtual float get_flexibleHeight() { }

	// RVA: 0x228C84 Offset: 0x228C84 VA: 0x228C84 Slot: 58
	public virtual int get_layoutPriority() { }

	// RVA: 0x228C8C Offset: 0x228C8C VA: 0x228C8C Slot: 59
	public virtual void SetLayoutHorizontal() { }

	// RVA: 0x229740 Offset: 0x229740 VA: 0x229740 Slot: 60
	public virtual void SetLayoutVertical() { }

	// RVA: 0x22832C Offset: 0x22832C VA: 0x22832C
	private void UpdateScrollbarVisibility() { }

	// RVA: 0x229E3C Offset: 0x229E3C VA: 0x229E3C
	private static void UpdateOneScrollbarVisibility(bool xScrollingNeeded, bool xAxisEnabled, ScrollRect.ScrollbarVisibility scrollbarVisibility, Scrollbar scrollbar) { }

	// RVA: 0x229920 Offset: 0x229920 VA: 0x229920
	private void UpdateScrollbarLayout() { }

	// RVA: 0x225C2C Offset: 0x225C2C VA: 0x225C2C
	protected void UpdateBounds() { }

	// RVA: 0x229FB0 Offset: 0x229FB0 VA: 0x229FB0
	internal static void AdjustBounds(ref Bounds viewBounds, ref Vector2 contentPivot, ref Vector3 contentSize, ref Vector3 contentPos) { }

	// RVA: 0x2295AC Offset: 0x2295AC VA: 0x2295AC
	private Bounds GetBounds() { }

	// RVA: 0x22A10C Offset: 0x22A10C VA: 0x22A10C
	internal static Bounds InternalGetBounds(Vector3[] corners, ref Matrix4x4 viewWorldToLocalMatrix) { }

	// RVA: 0x22715C Offset: 0x22715C VA: 0x22715C
	private Vector2 CalculateOffset(Vector2 delta) { }

	// RVA: 0x22A380 Offset: 0x22A380 VA: 0x22A380
	internal static Vector2 InternalCalculateOffset(ref Bounds viewBounds, ref Bounds contentBounds, bool horizontal, bool vertical, ScrollRect.MovementType movementType, ref Vector2 delta) { }

	// RVA: 0x2252E8 Offset: 0x2252E8 VA: 0x2252E8
	protected void SetDirty() { }

	// RVA: 0x224DE0 Offset: 0x224DE0 VA: 0x224DE0
	protected void SetDirtyCaching() { }

	// RVA: 0x22A61C Offset: 0x22A61C VA: 0x22A61C Slot: 23
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum ScrollRect.MovementType // TypeDefIndex: 1996
{
	// Fields
	public int value__; // 0x0
	public const ScrollRect.MovementType Unrestricted = 0;
	public const ScrollRect.MovementType Elastic = 1;
	public const ScrollRect.MovementType Clamped = 2;
}

// Namespace: 
public enum ScrollRect.ScrollbarVisibility // TypeDefIndex: 1997
{
	// Fields
	public int value__; // 0x0
	public const ScrollRect.ScrollbarVisibility Permanent = 0;
	public const ScrollRect.ScrollbarVisibility AutoHide = 1;
	public const ScrollRect.ScrollbarVisibility AutoHideAndExpandViewport = 2;
}

// Namespace: 
[Serializable]
public class ScrollRect.ScrollRectEvent : UnityEvent<Vector2> // TypeDefIndex: 1998
{
	// Methods

	// RVA: 0x224CEC Offset: 0x224CEC VA: 0x224CEC
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC0DF8 Offset: 0xC0DF8 VA: 0xC0DF8
[ExecuteAlways] // RVA: 0xC0DF8 Offset: 0xC0DF8 VA: 0xC0DF8
[SelectionBaseAttribute] // RVA: 0xC0DF8 Offset: 0xC0DF8 VA: 0xC0DF8
[DisallowMultipleComponent] // RVA: 0xC0DF8 Offset: 0xC0DF8 VA: 0xC0DF8
public class Selectable : UIBehaviour, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IEventSystemHandler // TypeDefIndex: 1999
{
	// Fields
	private static List<Selectable> s_List; // 0x0
	[FormerlySerializedAsAttribute] // RVA: 0xC3170 Offset: 0xC3170 VA: 0xC3170
	[SerializeField] // RVA: 0xC3170 Offset: 0xC3170 VA: 0xC3170
	private Navigation m_Navigation; // 0xC
	[FormerlySerializedAsAttribute] // RVA: 0xC31BC Offset: 0xC31BC VA: 0xC31BC
	[SerializeField] // RVA: 0xC31BC Offset: 0xC31BC VA: 0xC31BC
	private Selectable.Transition m_Transition; // 0x20
	[FormerlySerializedAsAttribute] // RVA: 0xC3208 Offset: 0xC3208 VA: 0xC3208
	[SerializeField] // RVA: 0xC3208 Offset: 0xC3208 VA: 0xC3208
	private ColorBlock m_Colors; // 0x24
	[FormerlySerializedAsAttribute] // RVA: 0xC3250 Offset: 0xC3250 VA: 0xC3250
	[SerializeField] // RVA: 0xC3250 Offset: 0xC3250 VA: 0xC3250
	private SpriteState m_SpriteState; // 0x6C
	[FormerlySerializedAsAttribute] // RVA: 0xC329C Offset: 0xC329C VA: 0xC329C
	[SerializeField] // RVA: 0xC329C Offset: 0xC329C VA: 0xC329C
	private AnimationTriggers m_AnimationTriggers; // 0x78
	[TooltipAttribute] // RVA: 0xC32F0 Offset: 0xC32F0 VA: 0xC32F0
	[SerializeField] // RVA: 0xC32F0 Offset: 0xC32F0 VA: 0xC32F0
	private bool m_Interactable; // 0x7C
	[FormerlySerializedAsAttribute] // RVA: 0xC3358 Offset: 0xC3358 VA: 0xC3358
	[FormerlySerializedAsAttribute] // RVA: 0xC3358 Offset: 0xC3358 VA: 0xC3358
	[SerializeField] // RVA: 0xC3358 Offset: 0xC3358 VA: 0xC3358
	private Graphic m_TargetGraphic; // 0x80
	private bool m_GroupsAllowInteraction; // 0x84
	private Selectable.SelectionState m_CurrentSelectionState; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xC33E0 Offset: 0xC33E0 VA: 0xC33E0
	[DebuggerBrowsableAttribute] // RVA: 0xC33E0 Offset: 0xC33E0 VA: 0xC33E0
	private bool <isPointerInside>k__BackingField; // 0x8C
	[CompilerGeneratedAttribute] // RVA: 0xC3414 Offset: 0xC3414 VA: 0xC3414
	[DebuggerBrowsableAttribute] // RVA: 0xC3414 Offset: 0xC3414 VA: 0xC3414
	private bool <isPointerDown>k__BackingField; // 0x8D
	[CompilerGeneratedAttribute] // RVA: 0xC3448 Offset: 0xC3448 VA: 0xC3448
	[DebuggerBrowsableAttribute] // RVA: 0xC3448 Offset: 0xC3448 VA: 0xC3448
	private bool <hasSelection>k__BackingField; // 0x8E
	private readonly List<CanvasGroup> m_CanvasGroupCache; // 0x90

	// Properties
	public static List<Selectable> allSelectables { get; }
	public Navigation navigation { get; set; }
	public Selectable.Transition transition { get; set; }
	public ColorBlock colors { get; set; }
	public SpriteState spriteState { get; set; }
	public AnimationTriggers animationTriggers { get; set; }
	public Graphic targetGraphic { get; set; }
	public bool interactable { get; set; }
	private bool isPointerInside { get; set; }
	private bool isPointerDown { get; set; }
	private bool hasSelection { get; set; }
	public Image image { get; set; }
	public Animator animator { get; }
	protected Selectable.SelectionState currentSelectionState { get; }

	// Methods

	// RVA: 0x22A790 Offset: 0x22A790 VA: 0x22A790
	protected void .ctor() { }

	// RVA: 0x22CD68 Offset: 0x22CD68 VA: 0x22CD68
	public static List<Selectable> get_allSelectables() { }

	// RVA: 0x22C214 Offset: 0x22C214 VA: 0x22C214
	public Navigation get_navigation() { }

	// RVA: 0x22CDF4 Offset: 0x22CDF4 VA: 0x22CDF4
	public void set_navigation(Navigation value) { }

	// RVA: 0x22CEB0 Offset: 0x22CEB0 VA: 0x22CEB0
	public Selectable.Transition get_transition() { }

	// RVA: 0x22CEB8 Offset: 0x22CEB8 VA: 0x22CEB8
	public void set_transition(Selectable.Transition value) { }

	// RVA: 0x22CF38 Offset: 0x22CF38 VA: 0x22CF38
	public ColorBlock get_colors() { }

	// RVA: 0x22CF50 Offset: 0x22CF50 VA: 0x22CF50
	public void set_colors(ColorBlock value) { }

	// RVA: 0x22D070 Offset: 0x22D070 VA: 0x22D070
	public SpriteState get_spriteState() { }

	// RVA: 0x22D084 Offset: 0x22D084 VA: 0x22D084
	public void set_spriteState(SpriteState value) { }

	// RVA: 0x22D124 Offset: 0x22D124 VA: 0x22D124
	public AnimationTriggers get_animationTriggers() { }

	// RVA: 0x22D12C Offset: 0x22D12C VA: 0x22D12C
	public void set_animationTriggers(AnimationTriggers value) { }

	// RVA: 0x22D1AC Offset: 0x22D1AC VA: 0x22D1AC
	public Graphic get_targetGraphic() { }

	// RVA: 0x22D1B4 Offset: 0x22D1B4 VA: 0x22D1B4
	public void set_targetGraphic(Graphic value) { }

	// RVA: 0x22D234 Offset: 0x22D234 VA: 0x22D234
	public bool get_interactable() { }

	// RVA: 0x22D23C Offset: 0x22D23C VA: 0x22D23C
	public void set_interactable(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC41E0 Offset: 0xC41E0 VA: 0xC41E0
	// RVA: 0x22D4BC Offset: 0x22D4BC VA: 0x22D4BC
	private bool get_isPointerInside() { }

	[CompilerGeneratedAttribute] // RVA: 0xC41F0 Offset: 0xC41F0 VA: 0xC41F0
	// RVA: 0x22D4C4 Offset: 0x22D4C4 VA: 0x22D4C4
	private void set_isPointerInside(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC4200 Offset: 0xC4200 VA: 0xC4200
	// RVA: 0x22D4CC Offset: 0x22D4CC VA: 0x22D4CC
	private bool get_isPointerDown() { }

	[CompilerGeneratedAttribute] // RVA: 0xC4210 Offset: 0xC4210 VA: 0xC4210
	// RVA: 0x22D4D4 Offset: 0x22D4D4 VA: 0x22D4D4
	private void set_isPointerDown(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC4220 Offset: 0xC4220 VA: 0xC4220
	// RVA: 0x22D4DC Offset: 0x22D4DC VA: 0x22D4DC
	private bool get_hasSelection() { }

	[CompilerGeneratedAttribute] // RVA: 0xC4230 Offset: 0xC4230 VA: 0xC4230
	// RVA: 0x22D4E4 Offset: 0x22D4E4 VA: 0x22D4E4
	private void set_hasSelection(bool value) { }

	// RVA: 0x22D4EC Offset: 0x22D4EC VA: 0x22D4EC
	public Image get_image() { }

	// RVA: 0x22D584 Offset: 0x22D584 VA: 0x22D584
	public void set_image(Image value) { }

	// RVA: 0x22D58C Offset: 0x22D58C VA: 0x22D58C
	public Animator get_animator() { }

	// RVA: 0x22D5F0 Offset: 0x22D5F0 VA: 0x22D5F0 Slot: 4
	protected override void Awake() { }

	// RVA: 0x22D6A0 Offset: 0x22D6A0 VA: 0x22D6A0 Slot: 14
	protected override void OnCanvasGroupChanged() { }

	// RVA: 0x22D904 Offset: 0x22D904 VA: 0x22D904 Slot: 24
	public virtual bool IsInteractable() { }

	// RVA: 0x22D924 Offset: 0x22D924 VA: 0x22D924 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x22AF80 Offset: 0x22AF80 VA: 0x22AF80 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x22D998 Offset: 0x22D998 VA: 0x22D998 Slot: 12
	protected override void OnTransformParentChanged() { }

	// RVA: 0x22CEA8 Offset: 0x22CEA8 VA: 0x22CEA8
	private void OnSetProperty() { }

	// RVA: 0x22B1A4 Offset: 0x22B1A4 VA: 0x22B1A4 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x22D9C4 Offset: 0x22D9C4 VA: 0x22D9C4
	protected Selectable.SelectionState get_currentSelectionState() { }

	// RVA: 0x22D9CC Offset: 0x22D9CC VA: 0x22D9CC Slot: 25
	protected virtual void InstantClearState() { }

	// RVA: 0x22DF2C Offset: 0x22DF2C VA: 0x22DF2C Slot: 26
	protected virtual void DoStateTransition(Selectable.SelectionState state, bool instant) { }

	// RVA: 0x22E1E8 Offset: 0x22E1E8 VA: 0x22E1E8
	public Selectable FindSelectable(Vector3 dir) { }

	// RVA: 0x22E8F0 Offset: 0x22E8F0 VA: 0x22E8F0
	private static Vector3 GetPointOnRectEdge(RectTransform rect, Vector2 dir) { }

	// RVA: 0x22EC28 Offset: 0x22EC28 VA: 0x22EC28
	private void Navigate(AxisEventData eventData, Selectable sel) { }

	// RVA: 0x22C22C Offset: 0x22C22C VA: 0x22C22C Slot: 27
	public virtual Selectable FindSelectableOnLeft() { }

	// RVA: 0x22C388 Offset: 0x22C388 VA: 0x22C388 Slot: 28
	public virtual Selectable FindSelectableOnRight() { }

	// RVA: 0x22C4E4 Offset: 0x22C4E4 VA: 0x22C4E4 Slot: 29
	public virtual Selectable FindSelectableOnUp() { }

	// RVA: 0x22C640 Offset: 0x22C640 VA: 0x22C640 Slot: 30
	public virtual Selectable FindSelectableOnDown() { }

	// RVA: 0x22C14C Offset: 0x22C14C VA: 0x22C14C Slot: 31
	public virtual void OnMove(AxisEventData eventData) { }

	// RVA: 0x22DA7C Offset: 0x22DA7C VA: 0x22DA7C
	private void StartColorTween(Color targetColor, bool instant) { }

	// RVA: 0x22DBA4 Offset: 0x22DBA4 VA: 0x22DBA4
	private void DoSpriteSwap(Sprite newSprite) { }

	// RVA: 0x22DC70 Offset: 0x22DC70 VA: 0x22DC70
	private void TriggerAnimation(string triggername) { }

	// RVA: 0x22ED1C Offset: 0x22ED1C VA: 0x22ED1C
	protected bool IsHighlighted(BaseEventData eventData) { }

	[ObsoleteAttribute] // RVA: 0xC4240 Offset: 0xC4240 VA: 0xC4240
	// RVA: 0x22F008 Offset: 0x22F008 VA: 0x22F008
	protected bool IsPressed(BaseEventData eventData) { }

	// RVA: 0x22EFBC Offset: 0x22EFBC VA: 0x22EFBC
	protected bool IsPressed() { }

	// RVA: 0x22D464 Offset: 0x22D464 VA: 0x22D464
	protected void UpdateSelectionState(BaseEventData eventData) { }

	// RVA: 0x22F054 Offset: 0x22F054 VA: 0x22F054
	private void EvaluateAndTransitionToSelectionState(BaseEventData eventData) { }

	// RVA: 0x22D92C Offset: 0x22D92C VA: 0x22D92C
	private void InternalEvaluateAndTransitionToSelectionState(bool instant) { }

	// RVA: 0x22BBDC Offset: 0x22BBDC VA: 0x22BBDC Slot: 32
	public virtual void OnPointerDown(PointerEventData eventData) { }

	// RVA: 0x22BE38 Offset: 0x22BE38 VA: 0x22BE38 Slot: 33
	public virtual void OnPointerUp(PointerEventData eventData) { }

	// RVA: 0x22F0BC Offset: 0x22F0BC VA: 0x22F0BC Slot: 34
	public virtual void OnPointerEnter(PointerEventData eventData) { }

	// RVA: 0x22F0C8 Offset: 0x22F0C8 VA: 0x22F0C8 Slot: 35
	public virtual void OnPointerExit(PointerEventData eventData) { }

	// RVA: 0x22F0D4 Offset: 0x22F0D4 VA: 0x22F0D4 Slot: 36
	public virtual void OnSelect(BaseEventData eventData) { }

	// RVA: 0x22F0E0 Offset: 0x22F0E0 VA: 0x22F0E0 Slot: 37
	public virtual void OnDeselect(BaseEventData eventData) { }

	// RVA: 0x22F0EC Offset: 0x22F0EC VA: 0x22F0EC Slot: 38
	public virtual void Select() { }

	// RVA: 0x22F27C Offset: 0x22F27C VA: 0x22F27C
	private static void .cctor() { }
}

// Namespace: 
public enum Selectable.Transition // TypeDefIndex: 2000
{
	// Fields
	public int value__; // 0x0
	public const Selectable.Transition None = 0;
	public const Selectable.Transition ColorTint = 1;
	public const Selectable.Transition SpriteSwap = 2;
	public const Selectable.Transition Animation = 3;
}

// Namespace: 
protected enum Selectable.SelectionState // TypeDefIndex: 2001
{
	// Fields
	public int value__; // 0x0
	public const Selectable.SelectionState Normal = 0;
	public const Selectable.SelectionState Highlighted = 1;
	public const Selectable.SelectionState Pressed = 2;
	public const Selectable.SelectionState Disabled = 3;
}

// Namespace: UnityEngine.UI
internal static class SetPropertyUtility // TypeDefIndex: 2002
{
	// Methods

	// RVA: 0x22F30C Offset: 0x22F30C VA: 0x22F30C
	public static bool SetColor(ref Color currentValue, Color newValue) { }

	// RVA: -1 Offset: -1
	public static bool SetStruct<T>(ref T currentValue, T newValue) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3AA89C Offset: 0x3AA89C VA: 0x3AA89C
	|-SetPropertyUtility.SetStruct<bool>
	|
	|-RVA: 0x3AA988 Offset: 0x3AA988 VA: 0x3AA988
	|-SetPropertyUtility.SetStruct<char>
	|
	|-RVA: 0x3AAA6C Offset: 0x3AAA6C VA: 0x3AAA6C
	|-SetPropertyUtility.SetStruct<int>
	|
	|-RVA: 0x3AAB50 Offset: 0x3AAB50 VA: 0x3AAB50
	|-SetPropertyUtility.SetStruct<float>
	|
	|-RVA: 0x3AAC40 Offset: 0x3AAC40 VA: 0x3AAC40
	|-SetPropertyUtility.SetStruct<TouchScreenKeyboardType>
	|
	|-RVA: 0x3AAD24 Offset: 0x3AAD24 VA: 0x3AAD24
	|-SetPropertyUtility.SetStruct<AspectRatioFitter.AspectMode>
	|
	|-RVA: 0x3AAE08 Offset: 0x3AAE08 VA: 0x3AAE08
	|-SetPropertyUtility.SetStruct<ColorBlock>
	|
	|-RVA: 0x3AAFD8 Offset: 0x3AAFD8 VA: 0x3AAFD8
	|-SetPropertyUtility.SetStruct<ContentSizeFitter.FitMode>
	|
	|-RVA: 0x3AB0BC Offset: 0x3AB0BC VA: 0x3AB0BC
	|-SetPropertyUtility.SetStruct<Image.FillMethod>
	|
	|-RVA: 0x3AB1A0 Offset: 0x3AB1A0 VA: 0x3AB1A0
	|-SetPropertyUtility.SetStruct<Image.Type>
	|
	|-RVA: 0x3AB284 Offset: 0x3AB284 VA: 0x3AB284
	|-SetPropertyUtility.SetStruct<InputField.CharacterValidation>
	|
	|-RVA: 0x3AB368 Offset: 0x3AB368 VA: 0x3AB368
	|-SetPropertyUtility.SetStruct<InputField.ContentType>
	|
	|-RVA: 0x3AB44C Offset: 0x3AB44C VA: 0x3AB44C
	|-SetPropertyUtility.SetStruct<InputField.InputType>
	|
	|-RVA: 0x3AB530 Offset: 0x3AB530 VA: 0x3AB530
	|-SetPropertyUtility.SetStruct<InputField.LineType>
	|
	|-RVA: 0x3AB614 Offset: 0x3AB614 VA: 0x3AB614
	|-SetPropertyUtility.SetStruct<Navigation>
	|
	|-RVA: 0x3AB774 Offset: 0x3AB774 VA: 0x3AB774
	|-SetPropertyUtility.SetStruct<Scrollbar.Direction>
	|
	|-RVA: 0x3AB858 Offset: 0x3AB858 VA: 0x3AB858
	|-SetPropertyUtility.SetStruct<Selectable.Transition>
	|
	|-RVA: 0x3AB93C Offset: 0x3AB93C VA: 0x3AB93C
	|-SetPropertyUtility.SetStruct<Slider.Direction>
	|
	|-RVA: 0x3ABA20 Offset: 0x3ABA20 VA: 0x3ABA20
	|-SetPropertyUtility.SetStruct<SpriteState>
	*/

	// RVA: -1 Offset: -1
	public static bool SetClass<T>(ref T currentValue, T newValue) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3AA83C Offset: 0x3AA83C VA: 0x3AA83C
	|-SetPropertyUtility.SetClass<object>
	|-SetPropertyUtility.SetClass<RectTransform>
	|-SetPropertyUtility.SetClass<Sprite>
	|-SetPropertyUtility.SetClass<AnimationTriggers>
	|-SetPropertyUtility.SetClass<Graphic>
	|-SetPropertyUtility.SetClass<InputField.OnChangeEvent>
	|-SetPropertyUtility.SetClass<InputField.OnValidateInput>
	|-SetPropertyUtility.SetClass<InputField.SubmitEvent>
	|-SetPropertyUtility.SetClass<Text>
	*/
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC0E6C Offset: 0xC0E6C VA: 0xC0E6C
[RequireComponent] // RVA: 0xC0E6C Offset: 0xC0E6C VA: 0xC0E6C
public class Slider : Selectable, IDragHandler, IInitializePotentialDragHandler, ICanvasElement, IEventSystemHandler // TypeDefIndex: 2003
{
	// Fields
	[SerializeField] // RVA: 0xC347C Offset: 0xC347C VA: 0xC347C
	private RectTransform m_FillRect; // 0x94
	[SerializeField] // RVA: 0xC348C Offset: 0xC348C VA: 0xC348C
	private RectTransform m_HandleRect; // 0x98
	[SpaceAttribute] // RVA: 0xC349C Offset: 0xC349C VA: 0xC349C
	[SerializeField] // RVA: 0xC349C Offset: 0xC349C VA: 0xC349C
	private Slider.Direction m_Direction; // 0x9C
	[SerializeField] // RVA: 0xC34CC Offset: 0xC34CC VA: 0xC34CC
	private float m_MinValue; // 0xA0
	[SerializeField] // RVA: 0xC34DC Offset: 0xC34DC VA: 0xC34DC
	private float m_MaxValue; // 0xA4
	[SerializeField] // RVA: 0xC34EC Offset: 0xC34EC VA: 0xC34EC
	private bool m_WholeNumbers; // 0xA8
	[SerializeField] // RVA: 0xC34FC Offset: 0xC34FC VA: 0xC34FC
	protected float m_Value; // 0xAC
	[SpaceAttribute] // RVA: 0xC350C Offset: 0xC350C VA: 0xC350C
	[SerializeField] // RVA: 0xC350C Offset: 0xC350C VA: 0xC350C
	private Slider.SliderEvent m_OnValueChanged; // 0xB0
	private Image m_FillImage; // 0xB4
	private Transform m_FillTransform; // 0xB8
	private RectTransform m_FillContainerRect; // 0xBC
	private Transform m_HandleTransform; // 0xC0
	private RectTransform m_HandleContainerRect; // 0xC4
	private Vector2 m_Offset; // 0xC8
	private DrivenRectTransformTracker m_Tracker; // 0xD0

	// Properties
	public RectTransform fillRect { get; set; }
	public RectTransform handleRect { get; set; }
	public Slider.Direction direction { get; set; }
	public float minValue { get; set; }
	public float maxValue { get; set; }
	public bool wholeNumbers { get; set; }
	public virtual float value { get; set; }
	public float normalizedValue { get; set; }
	public Slider.SliderEvent onValueChanged { get; set; }
	private float stepSize { get; }
	private Slider.Axis axis { get; }
	private bool reverseValue { get; }

	// Methods

	// RVA: 0x22F8B0 Offset: 0x22F8B0 VA: 0x22F8B0
	protected void .ctor() { }

	// RVA: 0x22FA18 Offset: 0x22FA18 VA: 0x22FA18
	public RectTransform get_fillRect() { }

	// RVA: 0x22FA20 Offset: 0x22FA20 VA: 0x22FA20
	public void set_fillRect(RectTransform value) { }

	// RVA: 0x23032C Offset: 0x23032C VA: 0x23032C
	public RectTransform get_handleRect() { }

	// RVA: 0x230334 Offset: 0x230334 VA: 0x230334
	public void set_handleRect(RectTransform value) { }

	// RVA: 0x2303B8 Offset: 0x2303B8 VA: 0x2303B8
	public Slider.Direction get_direction() { }

	// RVA: 0x2303C0 Offset: 0x2303C0 VA: 0x2303C0
	public void set_direction(Slider.Direction value) { }

	// RVA: 0x23043C Offset: 0x23043C VA: 0x23043C
	public float get_minValue() { }

	// RVA: 0x230444 Offset: 0x230444 VA: 0x230444
	public void set_minValue(float value) { }

	// RVA: 0x2304F0 Offset: 0x2304F0 VA: 0x2304F0
	public float get_maxValue() { }

	// RVA: 0x2304F8 Offset: 0x2304F8 VA: 0x2304F8
	public void set_maxValue(float value) { }

	// RVA: 0x230590 Offset: 0x230590 VA: 0x230590
	public bool get_wholeNumbers() { }

	// RVA: 0x230598 Offset: 0x230598 VA: 0x230598
	public void set_wholeNumbers(bool value) { }

	// RVA: 0x230630 Offset: 0x230630 VA: 0x230630 Slot: 46
	public virtual float get_value() { }

	// RVA: 0x230764 Offset: 0x230764 VA: 0x230764 Slot: 47
	public virtual void set_value(float value) { }

	// RVA: 0x230778 Offset: 0x230778 VA: 0x230778
	public float get_normalizedValue() { }

	// RVA: 0x230884 Offset: 0x230884 VA: 0x230884
	public void set_normalizedValue(float value) { }

	// RVA: 0x23093C Offset: 0x23093C VA: 0x23093C
	public Slider.SliderEvent get_onValueChanged() { }

	// RVA: 0x230944 Offset: 0x230944 VA: 0x230944
	public void set_onValueChanged(Slider.SliderEvent value) { }

	// RVA: 0x23094C Offset: 0x23094C VA: 0x23094C
	private float get_stepSize() { }

	// RVA: 0x230980 Offset: 0x230980 VA: 0x230980 Slot: 48
	public virtual void Rebuild(CanvasUpdate executing) { }

	// RVA: 0x230984 Offset: 0x230984 VA: 0x230984 Slot: 49
	public virtual void LayoutComplete() { }

	// RVA: 0x230988 Offset: 0x230988 VA: 0x230988 Slot: 50
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x23098C Offset: 0x23098C VA: 0x23098C Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x2309CC Offset: 0x2309CC VA: 0x2309CC Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x2309F0 Offset: 0x2309F0 VA: 0x2309F0 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x22FAA4 Offset: 0x22FAA4 VA: 0x22FAA4
	private void UpdateCachedReferences() { }

	// RVA: 0x230D04 Offset: 0x230D04 VA: 0x230D04
	private float ClampValue(float input) { }

	// RVA: 0x2304DC Offset: 0x2304DC VA: 0x2304DC
	private void Set(float input) { }

	// RVA: 0x230EB8 Offset: 0x230EB8 VA: 0x230EB8 Slot: 51
	protected virtual void Set(float input, bool sendCallback) { }

	// RVA: 0x230F94 Offset: 0x230F94 VA: 0x230F94 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0x230E9C Offset: 0x230E9C VA: 0x230E9C
	private Slider.Axis get_axis() { }

	// RVA: 0x230E84 Offset: 0x230E84 VA: 0x230E84
	private bool get_reverseValue() { }

	// RVA: 0x22FF34 Offset: 0x22FF34 VA: 0x22FF34
	private void UpdateVisuals() { }

	// RVA: 0x230FD0 Offset: 0x230FD0 VA: 0x230FD0
	private void UpdateDrag(PointerEventData eventData, Camera cam) { }

	// RVA: 0x231394 Offset: 0x231394 VA: 0x231394
	private bool MayDrag(PointerEventData eventData) { }

	// RVA: 0x231410 Offset: 0x231410 VA: 0x231410 Slot: 32
	public override void OnPointerDown(PointerEventData eventData) { }

	// RVA: 0x2316A0 Offset: 0x2316A0 VA: 0x2316A0 Slot: 52
	public virtual void OnDrag(PointerEventData eventData) { }

	// RVA: 0x2316EC Offset: 0x2316EC VA: 0x2316EC Slot: 31
	public override void OnMove(AxisEventData eventData) { }

	// RVA: 0x2319D8 Offset: 0x2319D8 VA: 0x2319D8 Slot: 27
	public override Selectable FindSelectableOnLeft() { }

	// RVA: 0x2319F8 Offset: 0x2319F8 VA: 0x2319F8 Slot: 28
	public override Selectable FindSelectableOnRight() { }

	// RVA: 0x231A18 Offset: 0x231A18 VA: 0x231A18 Slot: 29
	public override Selectable FindSelectableOnUp() { }

	// RVA: 0x231A38 Offset: 0x231A38 VA: 0x231A38 Slot: 30
	public override Selectable FindSelectableOnDown() { }

	// RVA: 0x231A58 Offset: 0x231A58 VA: 0x231A58 Slot: 53
	public virtual void OnInitializePotentialDrag(PointerEventData eventData) { }

	// RVA: 0x231A88 Offset: 0x231A88 VA: 0x231A88
	public void SetDirection(Slider.Direction direction, bool includeRectLayouts) { }

	// RVA: 0x231C5C Offset: 0x231C5C VA: 0x231C5C Slot: 42
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum Slider.Direction // TypeDefIndex: 2004
{
	// Fields
	public int value__; // 0x0
	public const Slider.Direction LeftToRight = 0;
	public const Slider.Direction RightToLeft = 1;
	public const Slider.Direction BottomToTop = 2;
	public const Slider.Direction TopToBottom = 3;
}

// Namespace: 
[Serializable]
public class Slider.SliderEvent : UnityEvent<float> // TypeDefIndex: 2005
{
	// Methods

	// RVA: 0x22F9B4 Offset: 0x22F9B4 VA: 0x22F9B4
	public void .ctor() { }
}

// Namespace: 
private enum Slider.Axis // TypeDefIndex: 2006
{
	// Fields
	public int value__; // 0x0
	public const Slider.Axis Horizontal = 0;
	public const Slider.Axis Vertical = 1;
}

// Namespace: UnityEngine.UI
[Serializable]
public struct SpriteState : IEquatable<SpriteState> // TypeDefIndex: 2007
{
	// Fields
	[SerializeField] // RVA: 0xC353C Offset: 0xC353C VA: 0xC353C
	private Sprite m_HighlightedSprite; // 0x0
	[SerializeField] // RVA: 0xC354C Offset: 0xC354C VA: 0xC354C
	private Sprite m_PressedSprite; // 0x4
	[SerializeField] // RVA: 0xC355C Offset: 0xC355C VA: 0xC355C
	private Sprite m_DisabledSprite; // 0x8

	// Properties
	public Sprite highlightedSprite { get; set; }
	public Sprite pressedSprite { get; set; }
	public Sprite disabledSprite { get; set; }

	// Methods

	// RVA: 0xC7420 Offset: 0xC7420 VA: 0xC7420
	public Sprite get_highlightedSprite() { }

	// RVA: 0xC7428 Offset: 0xC7428 VA: 0xC7428
	public void set_highlightedSprite(Sprite value) { }

	// RVA: 0xC7430 Offset: 0xC7430 VA: 0xC7430
	public Sprite get_pressedSprite() { }

	// RVA: 0xC7438 Offset: 0xC7438 VA: 0xC7438
	public void set_pressedSprite(Sprite value) { }

	// RVA: 0xC7440 Offset: 0xC7440 VA: 0xC7440
	public Sprite get_disabledSprite() { }

	// RVA: 0xC7448 Offset: 0xC7448 VA: 0xC7448
	public void set_disabledSprite(Sprite value) { }

	// RVA: 0xC7450 Offset: 0xC7450 VA: 0xC7450 Slot: 4
	public bool Equals(SpriteState other) { }
}

// Namespace: UnityEngine.UI
public static class StencilMaterial // TypeDefIndex: 2008
{
	// Fields
	private static List<StencilMaterial.MatEntry> m_List; // 0x0

	// Methods

	[EditorBrowsableAttribute] // RVA: 0xC4298 Offset: 0xC4298 VA: 0xC4298
	[ObsoleteAttribute] // RVA: 0xC4298 Offset: 0xC4298 VA: 0xC4298
	// RVA: 0x231DAC Offset: 0x231DAC VA: 0x231DAC
	public static Material Add(Material baseMat, int stencilID) { }

	// RVA: 0x21AB44 Offset: 0x21AB44 VA: 0x21AB44
	public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask) { }

	// RVA: 0x21ABF8 Offset: 0x21ABF8 VA: 0x21ABF8
	public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask, int readMask, int writeMask) { }

	// RVA: 0x219ED4 Offset: 0x219ED4 VA: 0x219ED4
	public static void Remove(Material customMat) { }

	// RVA: 0x231DCC Offset: 0x231DCC VA: 0x231DCC
	public static void ClearAll() { }

	// RVA: 0x231FB8 Offset: 0x231FB8 VA: 0x231FB8
	private static void .cctor() { }
}

// Namespace: 
private class StencilMaterial.MatEntry // TypeDefIndex: 2009
{
	// Fields
	public Material baseMat; // 0x8
	public Material customMat; // 0xC
	public int count; // 0x10
	public int stencilId; // 0x14
	public StencilOp operation; // 0x18
	public CompareFunction compareFunction; // 0x1C
	public int readMask; // 0x20
	public int writeMask; // 0x24
	public bool useAlphaClip; // 0x28
	public ColorWriteMask colorMask; // 0x2C

	// Methods

	// RVA: 0x231DB4 Offset: 0x231DB4 VA: 0x231DB4
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC0F14 Offset: 0xC0F14 VA: 0xC0F14
public class Text : MaskableGraphic, ILayoutElement // TypeDefIndex: 2010
{
	// Fields
	[SerializeField] // RVA: 0xC356C Offset: 0xC356C VA: 0xC356C
	private FontData m_FontData; // 0x64
	[TextAreaAttribute] // RVA: 0xC357C Offset: 0xC357C VA: 0xC357C
	[SerializeField] // RVA: 0xC357C Offset: 0xC357C VA: 0xC357C
	protected string m_Text; // 0x68
	private TextGenerator m_TextCache; // 0x6C
	private TextGenerator m_TextCacheForLayout; // 0x70
	protected static Material s_DefaultText; // 0x0
	protected bool m_DisableFontTextureRebuiltCallback; // 0x74
	private readonly UIVertex[] m_TempVerts; // 0x78

	// Properties
	public TextGenerator cachedTextGenerator { get; }
	public TextGenerator cachedTextGeneratorForLayout { get; }
	public override Texture mainTexture { get; }
	public Font font { get; set; }
	public virtual string text { get; set; }
	public bool supportRichText { get; set; }
	public bool resizeTextForBestFit { get; set; }
	public int resizeTextMinSize { get; set; }
	public int resizeTextMaxSize { get; set; }
	public TextAnchor alignment { get; set; }
	public bool alignByGeometry { get; set; }
	public int fontSize { get; set; }
	public HorizontalWrapMode horizontalOverflow { get; set; }
	public VerticalWrapMode verticalOverflow { get; set; }
	public float lineSpacing { get; set; }
	public FontStyle fontStyle { get; set; }
	public float pixelsPerUnit { get; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }

	// Methods

	// RVA: 0x232048 Offset: 0x232048 VA: 0x232048
	protected void .ctor() { }

	// RVA: 0x232124 Offset: 0x232124 VA: 0x232124
	public TextGenerator get_cachedTextGenerator() { }

	// RVA: 0x232218 Offset: 0x232218 VA: 0x232218
	public TextGenerator get_cachedTextGeneratorForLayout() { }

	// RVA: 0x232298 Offset: 0x232298 VA: 0x232298 Slot: 35
	public override Texture get_mainTexture() { }

	// RVA: 0x232508 Offset: 0x232508 VA: 0x232508
	public void FontTextureChanged() { }

	// RVA: 0x2324DC Offset: 0x2324DC VA: 0x2324DC
	public Font get_font() { }

	// RVA: 0x232680 Offset: 0x232680 VA: 0x232680
	public void set_font(Font value) { }

	// RVA: 0x2327B4 Offset: 0x2327B4 VA: 0x2327B4 Slot: 72
	public virtual string get_text() { }

	// RVA: 0x2327BC Offset: 0x2327BC VA: 0x2327BC Slot: 73
	public virtual void set_text(string value) { }

	// RVA: 0x23291C Offset: 0x23291C VA: 0x23291C
	public bool get_supportRichText() { }

	// RVA: 0x232948 Offset: 0x232948 VA: 0x232948
	public void set_supportRichText(bool value) { }

	// RVA: 0x2329D4 Offset: 0x2329D4 VA: 0x2329D4
	public bool get_resizeTextForBestFit() { }

	// RVA: 0x232A00 Offset: 0x232A00 VA: 0x232A00
	public void set_resizeTextForBestFit(bool value) { }

	// RVA: 0x232A8C Offset: 0x232A8C VA: 0x232A8C
	public int get_resizeTextMinSize() { }

	// RVA: 0x232AB8 Offset: 0x232AB8 VA: 0x232AB8
	public void set_resizeTextMinSize(int value) { }

	// RVA: 0x232B40 Offset: 0x232B40 VA: 0x232B40
	public int get_resizeTextMaxSize() { }

	// RVA: 0x232B6C Offset: 0x232B6C VA: 0x232B6C
	public void set_resizeTextMaxSize(int value) { }

	// RVA: 0x232BF4 Offset: 0x232BF4 VA: 0x232BF4
	public TextAnchor get_alignment() { }

	// RVA: 0x232C20 Offset: 0x232C20 VA: 0x232C20
	public void set_alignment(TextAnchor value) { }

	// RVA: 0x232CA8 Offset: 0x232CA8 VA: 0x232CA8
	public bool get_alignByGeometry() { }

	// RVA: 0x232CD4 Offset: 0x232CD4 VA: 0x232CD4
	public void set_alignByGeometry(bool value) { }

	// RVA: 0x232D4C Offset: 0x232D4C VA: 0x232D4C
	public int get_fontSize() { }

	// RVA: 0x232D78 Offset: 0x232D78 VA: 0x232D78
	public void set_fontSize(int value) { }

	// RVA: 0x232E00 Offset: 0x232E00 VA: 0x232E00
	public HorizontalWrapMode get_horizontalOverflow() { }

	// RVA: 0x232E2C Offset: 0x232E2C VA: 0x232E2C
	public void set_horizontalOverflow(HorizontalWrapMode value) { }

	// RVA: 0x232EB4 Offset: 0x232EB4 VA: 0x232EB4
	public VerticalWrapMode get_verticalOverflow() { }

	// RVA: 0x232EE0 Offset: 0x232EE0 VA: 0x232EE0
	public void set_verticalOverflow(VerticalWrapMode value) { }

	// RVA: 0x232F68 Offset: 0x232F68 VA: 0x232F68
	public float get_lineSpacing() { }

	// RVA: 0x232F94 Offset: 0x232F94 VA: 0x232F94
	public void set_lineSpacing(float value) { }

	// RVA: 0x233034 Offset: 0x233034 VA: 0x233034
	public FontStyle get_fontStyle() { }

	// RVA: 0x233060 Offset: 0x233060 VA: 0x233060
	public void set_fontStyle(FontStyle value) { }

	// RVA: 0x2330E8 Offset: 0x2330E8 VA: 0x2330E8
	public float get_pixelsPerUnit() { }

	// RVA: 0x2332EC Offset: 0x2332EC VA: 0x2332EC Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x2333A0 Offset: 0x2333A0 VA: 0x2333A0 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x23342C Offset: 0x23342C VA: 0x23342C Slot: 41
	protected override void UpdateGeometry() { }

	// RVA: 0x2334D4 Offset: 0x2334D4 VA: 0x2334D4
	internal void AssignDefaultFont() { }

	// RVA: 0x233550 Offset: 0x233550 VA: 0x233550
	public TextGenerationSettings GetGenerationSettings(Vector2 extents) { }

	// RVA: 0x233924 Offset: 0x233924 VA: 0x233924
	public static Vector2 GetTextAnchorPivot(TextAnchor anchor) { }

	// RVA: 0x233A9C Offset: 0x233A9C VA: 0x233A9C Slot: 44
	protected override void OnPopulateMesh(VertexHelper toFill) { }

	// RVA: 0x2345F8 Offset: 0x2345F8 VA: 0x2345F8 Slot: 74
	public virtual void CalculateLayoutInputHorizontal() { }

	// RVA: 0x2345FC Offset: 0x2345FC VA: 0x2345FC Slot: 75
	public virtual void CalculateLayoutInputVertical() { }

	// RVA: 0x234600 Offset: 0x234600 VA: 0x234600 Slot: 76
	public virtual float get_minWidth() { }

	// RVA: 0x234608 Offset: 0x234608 VA: 0x234608 Slot: 77
	public virtual float get_preferredWidth() { }

	// RVA: 0x234744 Offset: 0x234744 VA: 0x234744 Slot: 78
	public virtual float get_flexibleWidth() { }

	// RVA: 0x234750 Offset: 0x234750 VA: 0x234750 Slot: 79
	public virtual float get_minHeight() { }

	// RVA: 0x234758 Offset: 0x234758 VA: 0x234758 Slot: 80
	public virtual float get_preferredHeight() { }

	// RVA: 0x23487C Offset: 0x23487C VA: 0x23487C Slot: 81
	public virtual float get_flexibleHeight() { }

	// RVA: 0x234888 Offset: 0x234888 VA: 0x234888 Slot: 82
	public virtual int get_layoutPriority() { }

	// RVA: 0x234890 Offset: 0x234890 VA: 0x234890
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC0F4C Offset: 0xC0F4C VA: 0xC0F4C
[RequireComponent] // RVA: 0xC0F4C Offset: 0xC0F4C VA: 0xC0F4C
public class Toggle : Selectable, IPointerClickHandler, ISubmitHandler, ICanvasElement, IEventSystemHandler // TypeDefIndex: 2011
{
	// Fields
	public Toggle.ToggleTransition toggleTransition; // 0x94
	public Graphic graphic; // 0x98
	[SerializeField] // RVA: 0xC35B4 Offset: 0xC35B4 VA: 0xC35B4
	private ToggleGroup m_Group; // 0x9C
	public Toggle.ToggleEvent onValueChanged; // 0xA0
	[TooltipAttribute] // RVA: 0xC35C4 Offset: 0xC35C4 VA: 0xC35C4
	[SerializeField] // RVA: 0xC35C4 Offset: 0xC35C4 VA: 0xC35C4
	private bool m_IsOn; // 0xA4

	// Properties
	public ToggleGroup group { get; set; }
	public bool isOn { get; set; }

	// Methods

	// RVA: 0x2348F8 Offset: 0x2348F8 VA: 0x2348F8
	protected void .ctor() { }

	// RVA: 0x234A04 Offset: 0x234A04 VA: 0x234A04
	public ToggleGroup get_group() { }

	// RVA: 0x234A0C Offset: 0x234A0C VA: 0x234A0C
	public void set_group(ToggleGroup value) { }

	// RVA: 0x234D4C Offset: 0x234D4C VA: 0x234D4C Slot: 46
	public virtual void Rebuild(CanvasUpdate executing) { }

	// RVA: 0x234D50 Offset: 0x234D50 VA: 0x234D50 Slot: 47
	public virtual void LayoutComplete() { }

	// RVA: 0x234D54 Offset: 0x234D54 VA: 0x234D54 Slot: 48
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x234D58 Offset: 0x234D58 VA: 0x234D58 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x234D88 Offset: 0x234D88 VA: 0x234D88 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x234DAC Offset: 0x234DAC VA: 0x234DAC Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x234A34 Offset: 0x234A34 VA: 0x234A34
	private void SetToggleGroup(ToggleGroup newGroup, bool setMemberValue) { }

	// RVA: 0x235084 Offset: 0x235084 VA: 0x235084
	public bool get_isOn() { }

	// RVA: 0x235204 Offset: 0x235204 VA: 0x235204
	public void set_isOn(bool value) { }

	// RVA: 0x234F0C Offset: 0x234F0C VA: 0x234F0C
	private void Set(bool value) { }

	// RVA: 0x23520C Offset: 0x23520C VA: 0x23520C
	private void Set(bool value, bool sendCallback) { }

	// RVA: 0x234C44 Offset: 0x234C44 VA: 0x234C44
	private void PlayEffect(bool instant) { }

	// RVA: 0x235524 Offset: 0x235524 VA: 0x235524 Slot: 6
	protected override void Start() { }

	// RVA: 0x23552C Offset: 0x23552C VA: 0x23552C
	private void InternalToggle() { }

	// RVA: 0x235594 Offset: 0x235594 VA: 0x235594 Slot: 49
	public virtual void OnPointerClick(PointerEventData eventData) { }

	// RVA: 0x2355D4 Offset: 0x2355D4 VA: 0x2355D4 Slot: 50
	public virtual void OnSubmit(BaseEventData eventData) { }

	// RVA: 0x2355D8 Offset: 0x2355D8 VA: 0x2355D8 Slot: 42
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum Toggle.ToggleTransition // TypeDefIndex: 2012
{
	// Fields
	public int value__; // 0x0
	public const Toggle.ToggleTransition None = 0;
	public const Toggle.ToggleTransition Fade = 1;
}

// Namespace: 
[Serializable]
public class Toggle.ToggleEvent : UnityEvent<bool> // TypeDefIndex: 2013
{
	// Methods

	// RVA: 0x2349A0 Offset: 0x2349A0 VA: 0x2349A0
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC0FF4 Offset: 0xC0FF4 VA: 0xC0FF4
[DisallowMultipleComponent] // RVA: 0xC0FF4 Offset: 0xC0FF4 VA: 0xC0FF4
public class ToggleGroup : UIBehaviour // TypeDefIndex: 2014
{
	// Fields
	[SerializeField] // RVA: 0xC3628 Offset: 0xC3628 VA: 0xC3628
	private bool m_AllowSwitchOff; // 0xC
	private List<Toggle> m_Toggles; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC3638 Offset: 0xC3638 VA: 0xC3638
	private static Predicate<Toggle> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC3648 Offset: 0xC3648 VA: 0xC3648
	private static Func<Toggle, bool> <>f__am$cache1; // 0x4

	// Properties
	public bool allowSwitchOff { get; set; }

	// Methods

	// RVA: 0x2355E0 Offset: 0x2355E0 VA: 0x2355E0
	protected void .ctor() { }

	// RVA: 0x23551C Offset: 0x23551C VA: 0x23551C
	public bool get_allowSwitchOff() { }

	// RVA: 0x235674 Offset: 0x235674 VA: 0x235674
	public void set_allowSwitchOff(bool value) { }

	// RVA: 0x23567C Offset: 0x23567C VA: 0x23567C
	private void ValidateToggleIsInGroup(Toggle toggle) { }

	// RVA: 0x23508C Offset: 0x23508C VA: 0x23508C
	public void NotifyToggleOn(Toggle toggle) { }

	// RVA: 0x234F14 Offset: 0x234F14 VA: 0x234F14
	public void UnregisterToggle(Toggle toggle) { }

	// RVA: 0x234FCC Offset: 0x234FCC VA: 0x234FCC
	public void RegisterToggle(Toggle toggle) { }

	// RVA: 0x2353D8 Offset: 0x2353D8 VA: 0x2353D8
	public bool AnyTogglesOn() { }

	// RVA: 0x2358A4 Offset: 0x2358A4 VA: 0x2358A4
	public IEnumerable<Toggle> ActiveToggles() { }

	// RVA: 0x235990 Offset: 0x235990 VA: 0x235990
	public void SetAllTogglesOff() { }

	[CompilerGeneratedAttribute] // RVA: 0xC42FC Offset: 0xC42FC VA: 0xC42FC
	// RVA: 0x235A80 Offset: 0x235A80 VA: 0x235A80
	private static bool <AnyTogglesOn>m__0(Toggle x) { }

	[CompilerGeneratedAttribute] // RVA: 0xC430C Offset: 0xC430C VA: 0xC430C
	// RVA: 0x235AA4 Offset: 0x235AA4 VA: 0x235AA4
	private static bool <ActiveToggles>m__1(Toggle x) { }
}

// Namespace: UnityEngine.UI
public class ClipperRegistry // TypeDefIndex: 2015
{
	// Fields
	private static ClipperRegistry s_Instance; // 0x0
	private readonly IndexedSet<IClipper> m_Clippers; // 0x8

	// Properties
	public static ClipperRegistry instance { get; }

	// Methods

	// RVA: 0x1C998C Offset: 0x1C998C VA: 0x1C998C
	protected void .ctor() { }

	// RVA: 0x1C8A0C Offset: 0x1C8A0C VA: 0x1C8A0C
	public static ClipperRegistry get_instance() { }

	// RVA: 0x1C8AA8 Offset: 0x1C8AA8 VA: 0x1C8AA8
	public void Cull() { }

	// RVA: 0x1C9A18 Offset: 0x1C9A18 VA: 0x1C9A18
	public static void Register(IClipper c) { }

	// RVA: 0x1C9AB4 Offset: 0x1C9AB4 VA: 0x1C9AB4
	public static void Unregister(IClipper c) { }
}

// Namespace: UnityEngine.UI
public static class Clipping // TypeDefIndex: 2016
{
	// Methods

	// RVA: 0x1C9B48 Offset: 0x1C9B48 VA: 0x1C9B48
	public static Rect FindCullAndClipWorldRect(List<RectMask2D> rectMaskParents, out bool validRect) { }

	// RVA: 0x1C9EB4 Offset: 0x1C9EB4 VA: 0x1C9EB4
	private static Rect RectIntersect(Rect a, Rect b) { }
}

// Namespace: UnityEngine.UI
public interface IClipper // TypeDefIndex: 2017
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void PerformClipping();
}

// Namespace: UnityEngine.UI
public interface IClippable // TypeDefIndex: 2018
{
	// Properties
	public abstract GameObject gameObject { get; }
	public abstract RectTransform rectTransform { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract GameObject get_gameObject();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void RecalculateClipping();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract RectTransform get_rectTransform();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void Cull(Rect clipRect, bool validRect);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void SetClipRect(Rect value, bool validRect);
}

// Namespace: UnityEngine.UI
internal class RectangularVertexClipper // TypeDefIndex: 2019
{
	// Fields
	private readonly Vector3[] m_WorldCorners; // 0x8
	private readonly Vector3[] m_CanvasCorners; // 0xC

	// Methods

	// RVA: 0x22080C Offset: 0x22080C VA: 0x22080C
	public void .ctor() { }

	// RVA: 0x220B80 Offset: 0x220B80 VA: 0x220B80
	public Rect GetCanvasRect(RectTransform t, Canvas c) { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC1048 Offset: 0xC1048 VA: 0xC1048
[ExecuteAlways] // RVA: 0xC1048 Offset: 0xC1048 VA: 0xC1048
[RequireComponent] // RVA: 0xC1048 Offset: 0xC1048 VA: 0xC1048
[DisallowMultipleComponent] // RVA: 0xC1048 Offset: 0xC1048 VA: 0xC1048
public class AspectRatioFitter : UIBehaviour, ILayoutSelfController, ILayoutController // TypeDefIndex: 2020
{
	// Fields
	[SerializeField] // RVA: 0xC3658 Offset: 0xC3658 VA: 0xC3658
	private AspectRatioFitter.AspectMode m_AspectMode; // 0xC
	[SerializeField] // RVA: 0xC3668 Offset: 0xC3668 VA: 0xC3668
	private float m_AspectRatio; // 0x10
	private RectTransform m_Rect; // 0x14
	private bool m_DelayedSetDirty; // 0x18
	private DrivenRectTransformTracker m_Tracker; // 0x19

	// Properties
	public AspectRatioFitter.AspectMode aspectMode { get; set; }
	public float aspectRatio { get; set; }
	private RectTransform rectTransform { get; }

	// Methods

	// RVA: 0x1C5A94 Offset: 0x1C5A94 VA: 0x1C5A94
	protected void .ctor() { }

	// RVA: 0x1C5AB0 Offset: 0x1C5AB0 VA: 0x1C5AB0
	public AspectRatioFitter.AspectMode get_aspectMode() { }

	// RVA: 0x1C5AB8 Offset: 0x1C5AB8 VA: 0x1C5AB8
	public void set_aspectMode(AspectRatioFitter.AspectMode value) { }

	// RVA: 0x1C5B38 Offset: 0x1C5B38 VA: 0x1C5B38
	public float get_aspectRatio() { }

	// RVA: 0x1C5B40 Offset: 0x1C5B40 VA: 0x1C5B40
	public void set_aspectRatio(float value) { }

	// RVA: 0x1C5BBC Offset: 0x1C5BBC VA: 0x1C5BBC
	private RectTransform get_rectTransform() { }

	// RVA: 0x1C5C70 Offset: 0x1C5C70 VA: 0x1C5C70 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x1C5C74 Offset: 0x1C5C74 VA: 0x1C5C74 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x1C5D10 Offset: 0x1C5D10 VA: 0x1C5D10 Slot: 19
	protected virtual void Update() { }

	// RVA: 0x1C5D28 Offset: 0x1C5D28 VA: 0x1C5D28 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0x1C5D2C Offset: 0x1C5D2C VA: 0x1C5D2C
	private void UpdateRect() { }

	// RVA: 0x1C6268 Offset: 0x1C6268 VA: 0x1C6268
	private float GetSizeDeltaToProduceSize(float size, int axis) { }

	// RVA: 0x1C60E8 Offset: 0x1C60E8 VA: 0x1C60E8
	private Vector2 GetParentSize() { }

	// RVA: 0x1C6370 Offset: 0x1C6370 VA: 0x1C6370 Slot: 20
	public virtual void SetLayoutHorizontal() { }

	// RVA: 0x1C6374 Offset: 0x1C6374 VA: 0x1C6374 Slot: 21
	public virtual void SetLayoutVertical() { }

	// RVA: 0x1C5B34 Offset: 0x1C5B34 VA: 0x1C5B34
	protected void SetDirty() { }
}

// Namespace: 
public enum AspectRatioFitter.AspectMode // TypeDefIndex: 2021
{
	// Fields
	public int value__; // 0x0
	public const AspectRatioFitter.AspectMode None = 0;
	public const AspectRatioFitter.AspectMode WidthControlsHeight = 1;
	public const AspectRatioFitter.AspectMode HeightControlsWidth = 2;
	public const AspectRatioFitter.AspectMode FitInParent = 3;
	public const AspectRatioFitter.AspectMode EnvelopeParent = 4;
}

// Namespace: UnityEngine.UI
[RequireComponent] // RVA: 0xC1120 Offset: 0xC1120 VA: 0xC1120
[ExecuteAlways] // RVA: 0xC1120 Offset: 0xC1120 VA: 0xC1120
[AddComponentMenu] // RVA: 0xC1120 Offset: 0xC1120 VA: 0xC1120
public class CanvasScaler : UIBehaviour // TypeDefIndex: 2022
{
	// Fields
	[TooltipAttribute] // RVA: 0xC3678 Offset: 0xC3678 VA: 0xC3678
	[SerializeField] // RVA: 0xC3678 Offset: 0xC3678 VA: 0xC3678
	private CanvasScaler.ScaleMode m_UiScaleMode; // 0xC
	[TooltipAttribute] // RVA: 0xC36F0 Offset: 0xC36F0 VA: 0xC36F0
	[SerializeField] // RVA: 0xC36F0 Offset: 0xC36F0 VA: 0xC36F0
	protected float m_ReferencePixelsPerUnit; // 0x10
	[TooltipAttribute] // RVA: 0xC3738 Offset: 0xC3738 VA: 0xC3738
	[SerializeField] // RVA: 0xC3738 Offset: 0xC3738 VA: 0xC3738
	protected float m_ScaleFactor; // 0x14
	[TooltipAttribute] // RVA: 0xC37B0 Offset: 0xC37B0 VA: 0xC37B0
	[SerializeField] // RVA: 0xC37B0 Offset: 0xC37B0 VA: 0xC37B0
	protected Vector2 m_ReferenceResolution; // 0x18
	[TooltipAttribute] // RVA: 0xC37F8 Offset: 0xC37F8 VA: 0xC37F8
	[SerializeField] // RVA: 0xC37F8 Offset: 0xC37F8 VA: 0xC37F8
	protected CanvasScaler.ScreenMatchMode m_ScreenMatchMode; // 0x20
	[TooltipAttribute] // RVA: 0xC3840 Offset: 0xC3840 VA: 0xC3840
	[RangeAttribute] // RVA: 0xC3840 Offset: 0xC3840 VA: 0xC3840
	[SerializeField] // RVA: 0xC3840 Offset: 0xC3840 VA: 0xC3840
	protected float m_MatchWidthOrHeight; // 0x24
	private const float kLogBase = 2;
	[TooltipAttribute] // RVA: 0xC38A0 Offset: 0xC38A0 VA: 0xC38A0
	[SerializeField] // RVA: 0xC38A0 Offset: 0xC38A0 VA: 0xC38A0
	protected CanvasScaler.Unit m_PhysicalUnit; // 0x28
	[TooltipAttribute] // RVA: 0xC3918 Offset: 0xC3918 VA: 0xC3918
	[SerializeField] // RVA: 0xC3918 Offset: 0xC3918 VA: 0xC3918
	protected float m_FallbackScreenDPI; // 0x2C
	[TooltipAttribute] // RVA: 0xC398C Offset: 0xC398C VA: 0xC398C
	[SerializeField] // RVA: 0xC398C Offset: 0xC398C VA: 0xC398C
	protected float m_DefaultSpriteDPI; // 0x30
	[TooltipAttribute] // RVA: 0xC39D4 Offset: 0xC39D4 VA: 0xC39D4
	[SerializeField] // RVA: 0xC39D4 Offset: 0xC39D4 VA: 0xC39D4
	protected float m_DynamicPixelsPerUnit; // 0x34
	private Canvas m_Canvas; // 0x38
	private float m_PrevScaleFactor; // 0x3C
	private float m_PrevReferencePixelsPerUnit; // 0x40

	// Properties
	public CanvasScaler.ScaleMode uiScaleMode { get; set; }
	public float referencePixelsPerUnit { get; set; }
	public float scaleFactor { get; set; }
	public Vector2 referenceResolution { get; set; }
	public CanvasScaler.ScreenMatchMode screenMatchMode { get; set; }
	public float matchWidthOrHeight { get; set; }
	public CanvasScaler.Unit physicalUnit { get; set; }
	public float fallbackScreenDPI { get; set; }
	public float defaultSpriteDPI { get; set; }
	public float dynamicPixelsPerUnit { get; set; }

	// Methods

	// RVA: 0x1C6D00 Offset: 0x1C6D00 VA: 0x1C6D00
	protected void .ctor() { }

	// RVA: 0x1C6D98 Offset: 0x1C6D98 VA: 0x1C6D98
	public CanvasScaler.ScaleMode get_uiScaleMode() { }

	// RVA: 0x1C6DA0 Offset: 0x1C6DA0 VA: 0x1C6DA0
	public void set_uiScaleMode(CanvasScaler.ScaleMode value) { }

	// RVA: 0x1C6DA8 Offset: 0x1C6DA8 VA: 0x1C6DA8
	public float get_referencePixelsPerUnit() { }

	// RVA: 0x1C6DB0 Offset: 0x1C6DB0 VA: 0x1C6DB0
	public void set_referencePixelsPerUnit(float value) { }

	// RVA: 0x1C6DB8 Offset: 0x1C6DB8 VA: 0x1C6DB8
	public float get_scaleFactor() { }

	// RVA: 0x1C6DC0 Offset: 0x1C6DC0 VA: 0x1C6DC0
	public void set_scaleFactor(float value) { }

	// RVA: 0x1C6E54 Offset: 0x1C6E54 VA: 0x1C6E54
	public Vector2 get_referenceResolution() { }

	// RVA: 0x1C6E68 Offset: 0x1C6E68 VA: 0x1C6E68
	public void set_referenceResolution(Vector2 value) { }

	// RVA: 0x1C6FA4 Offset: 0x1C6FA4 VA: 0x1C6FA4
	public CanvasScaler.ScreenMatchMode get_screenMatchMode() { }

	// RVA: 0x1C6FAC Offset: 0x1C6FAC VA: 0x1C6FAC
	public void set_screenMatchMode(CanvasScaler.ScreenMatchMode value) { }

	// RVA: 0x1C6FB4 Offset: 0x1C6FB4 VA: 0x1C6FB4
	public float get_matchWidthOrHeight() { }

	// RVA: 0x1C6FBC Offset: 0x1C6FBC VA: 0x1C6FBC
	public void set_matchWidthOrHeight(float value) { }

	// RVA: 0x1C6FC4 Offset: 0x1C6FC4 VA: 0x1C6FC4
	public CanvasScaler.Unit get_physicalUnit() { }

	// RVA: 0x1C6FCC Offset: 0x1C6FCC VA: 0x1C6FCC
	public void set_physicalUnit(CanvasScaler.Unit value) { }

	// RVA: 0x1C6FD4 Offset: 0x1C6FD4 VA: 0x1C6FD4
	public float get_fallbackScreenDPI() { }

	// RVA: 0x1C6FDC Offset: 0x1C6FDC VA: 0x1C6FDC
	public void set_fallbackScreenDPI(float value) { }

	// RVA: 0x1C6FE4 Offset: 0x1C6FE4 VA: 0x1C6FE4
	public float get_defaultSpriteDPI() { }

	// RVA: 0x1C6FEC Offset: 0x1C6FEC VA: 0x1C6FEC
	public void set_defaultSpriteDPI(float value) { }

	// RVA: 0x1C707C Offset: 0x1C707C VA: 0x1C707C
	public float get_dynamicPixelsPerUnit() { }

	// RVA: 0x1C7084 Offset: 0x1C7084 VA: 0x1C7084
	public void set_dynamicPixelsPerUnit(float value) { }

	// RVA: 0x1C708C Offset: 0x1C708C VA: 0x1C708C Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x1C7108 Offset: 0x1C7108 VA: 0x1C7108 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x1C71E0 Offset: 0x1C71E0 VA: 0x1C71E0 Slot: 17
	protected virtual void Update() { }

	// RVA: 0x1C71F0 Offset: 0x1C71F0 VA: 0x1C71F0 Slot: 18
	protected virtual void Handle() { }

	// RVA: 0x1C7338 Offset: 0x1C7338 VA: 0x1C7338 Slot: 19
	protected virtual void HandleWorldCanvas() { }

	// RVA: 0x1C735C Offset: 0x1C735C VA: 0x1C735C Slot: 20
	protected virtual void HandleConstantPixelSize() { }

	// RVA: 0x1C7380 Offset: 0x1C7380 VA: 0x1C7380 Slot: 21
	protected virtual void HandleScaleWithScreenSize() { }

	// RVA: 0x1C7704 Offset: 0x1C7704 VA: 0x1C7704 Slot: 22
	protected virtual void HandleConstantPhysicalSize() { }

	// RVA: 0x1C7130 Offset: 0x1C7130 VA: 0x1C7130
	protected void SetScaleFactor(float scaleFactor) { }

	// RVA: 0x1C7188 Offset: 0x1C7188 VA: 0x1C7188
	protected void SetReferencePixelsPerUnit(float referencePixelsPerUnit) { }
}

// Namespace: 
public enum CanvasScaler.ScaleMode // TypeDefIndex: 2023
{
	// Fields
	public int value__; // 0x0
	public const CanvasScaler.ScaleMode ConstantPixelSize = 0;
	public const CanvasScaler.ScaleMode ScaleWithScreenSize = 1;
	public const CanvasScaler.ScaleMode ConstantPhysicalSize = 2;
}

// Namespace: 
public enum CanvasScaler.ScreenMatchMode // TypeDefIndex: 2024
{
	// Fields
	public int value__; // 0x0
	public const CanvasScaler.ScreenMatchMode MatchWidthOrHeight = 0;
	public const CanvasScaler.ScreenMatchMode Expand = 1;
	public const CanvasScaler.ScreenMatchMode Shrink = 2;
}

// Namespace: 
public enum CanvasScaler.Unit // TypeDefIndex: 2025
{
	// Fields
	public int value__; // 0x0
	public const CanvasScaler.Unit Centimeters = 0;
	public const CanvasScaler.Unit Millimeters = 1;
	public const CanvasScaler.Unit Inches = 2;
	public const CanvasScaler.Unit Points = 3;
	public const CanvasScaler.Unit Picas = 4;
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC11E4 Offset: 0xC11E4 VA: 0xC11E4
[ExecuteAlways] // RVA: 0xC11E4 Offset: 0xC11E4 VA: 0xC11E4
[RequireComponent] // RVA: 0xC11E4 Offset: 0xC11E4 VA: 0xC11E4
public class ContentSizeFitter : UIBehaviour, ILayoutSelfController, ILayoutController // TypeDefIndex: 2026
{
	// Fields
	[SerializeField] // RVA: 0xC3A1C Offset: 0xC3A1C VA: 0xC3A1C
	protected ContentSizeFitter.FitMode m_HorizontalFit; // 0xC
	[SerializeField] // RVA: 0xC3A2C Offset: 0xC3A2C VA: 0xC3A2C
	protected ContentSizeFitter.FitMode m_VerticalFit; // 0x10
	private RectTransform m_Rect; // 0x14
	private DrivenRectTransformTracker m_Tracker; // 0x18

	// Properties
	public ContentSizeFitter.FitMode horizontalFit { get; set; }
	public ContentSizeFitter.FitMode verticalFit { get; set; }
	private RectTransform rectTransform { get; }

	// Methods

	// RVA: 0x1CA76C Offset: 0x1CA76C VA: 0x1CA76C
	protected void .ctor() { }

	// RVA: 0x1CA780 Offset: 0x1CA780 VA: 0x1CA780
	public ContentSizeFitter.FitMode get_horizontalFit() { }

	// RVA: 0x1CA788 Offset: 0x1CA788 VA: 0x1CA788
	public void set_horizontalFit(ContentSizeFitter.FitMode value) { }

	// RVA: 0x1CA8B0 Offset: 0x1CA8B0 VA: 0x1CA8B0
	public ContentSizeFitter.FitMode get_verticalFit() { }

	// RVA: 0x1CA8B8 Offset: 0x1CA8B8 VA: 0x1CA8B8
	public void set_verticalFit(ContentSizeFitter.FitMode value) { }

	// RVA: 0x1CA934 Offset: 0x1CA934 VA: 0x1CA934
	private RectTransform get_rectTransform() { }

	// RVA: 0x1CA9E8 Offset: 0x1CA9E8 VA: 0x1CA9E8 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x1CA9EC Offset: 0x1CA9EC VA: 0x1CA9EC Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x1CAA88 Offset: 0x1CAA88 VA: 0x1CAA88 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0x1CAA8C Offset: 0x1CAA8C VA: 0x1CAA8C
	private void HandleSelfFittingAlongAxis(int axis) { }

	// RVA: 0x1CAB58 Offset: 0x1CAB58 VA: 0x1CAB58 Slot: 19
	public virtual void SetLayoutHorizontal() { }

	// RVA: 0x1CAB80 Offset: 0x1CAB80 VA: 0x1CAB80 Slot: 20
	public virtual void SetLayoutVertical() { }

	// RVA: 0x1CA804 Offset: 0x1CA804 VA: 0x1CA804
	protected void SetDirty() { }
}

// Namespace: 
public enum ContentSizeFitter.FitMode // TypeDefIndex: 2027
{
	// Fields
	public int value__; // 0x0
	public const ContentSizeFitter.FitMode Unconstrained = 0;
	public const ContentSizeFitter.FitMode MinSize = 1;
	public const ContentSizeFitter.FitMode PreferredSize = 2;
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC12AC Offset: 0xC12AC VA: 0xC12AC
public class GridLayoutGroup : LayoutGroup // TypeDefIndex: 2028
{
	// Fields
	[SerializeField] // RVA: 0xC3A3C Offset: 0xC3A3C VA: 0xC3A3C
	protected GridLayoutGroup.Corner m_StartCorner; // 0x38
	[SerializeField] // RVA: 0xC3A4C Offset: 0xC3A4C VA: 0xC3A4C
	protected GridLayoutGroup.Axis m_StartAxis; // 0x3C
	[SerializeField] // RVA: 0xC3A5C Offset: 0xC3A5C VA: 0xC3A5C
	protected Vector2 m_CellSize; // 0x40
	[SerializeField] // RVA: 0xC3A6C Offset: 0xC3A6C VA: 0xC3A6C
	protected Vector2 m_Spacing; // 0x48
	[SerializeField] // RVA: 0xC3A7C Offset: 0xC3A7C VA: 0xC3A7C
	protected GridLayoutGroup.Constraint m_Constraint; // 0x50
	[SerializeField] // RVA: 0xC3A8C Offset: 0xC3A8C VA: 0xC3A8C
	protected int m_ConstraintCount; // 0x54

	// Properties
	public GridLayoutGroup.Corner startCorner { get; set; }
	public GridLayoutGroup.Axis startAxis { get; set; }
	public Vector2 cellSize { get; set; }
	public Vector2 spacing { get; set; }
	public GridLayoutGroup.Constraint constraint { get; set; }
	public int constraintCount { get; set; }

	// Methods

	// RVA: 0x23E730 Offset: 0x23E730 VA: 0x23E730
	protected void .ctor() { }

	// RVA: 0x23E980 Offset: 0x23E980 VA: 0x23E980
	public GridLayoutGroup.Corner get_startCorner() { }

	// RVA: 0x23E988 Offset: 0x23E988 VA: 0x23E988
	public void set_startCorner(GridLayoutGroup.Corner value) { }

	// RVA: 0x23E9F8 Offset: 0x23E9F8 VA: 0x23E9F8
	public GridLayoutGroup.Axis get_startAxis() { }

	// RVA: 0x23EA00 Offset: 0x23EA00 VA: 0x23EA00
	public void set_startAxis(GridLayoutGroup.Axis value) { }

	// RVA: 0x23EA70 Offset: 0x23EA70 VA: 0x23EA70
	public Vector2 get_cellSize() { }

	// RVA: 0x23EA84 Offset: 0x23EA84 VA: 0x23EA84
	public void set_cellSize(Vector2 value) { }

	// RVA: 0x23EB08 Offset: 0x23EB08 VA: 0x23EB08
	public Vector2 get_spacing() { }

	// RVA: 0x23EB1C Offset: 0x23EB1C VA: 0x23EB1C
	public void set_spacing(Vector2 value) { }

	// RVA: 0x23EBA0 Offset: 0x23EBA0 VA: 0x23EBA0
	public GridLayoutGroup.Constraint get_constraint() { }

	// RVA: 0x23EBA8 Offset: 0x23EBA8 VA: 0x23EBA8
	public void set_constraint(GridLayoutGroup.Constraint value) { }

	// RVA: 0x23EC18 Offset: 0x23EC18 VA: 0x23EC18
	public int get_constraintCount() { }

	// RVA: 0x23EC20 Offset: 0x23EC20 VA: 0x23EC20
	public void set_constraintCount(int value) { }

	// RVA: 0x23ECD0 Offset: 0x23ECD0 VA: 0x23ECD0 Slot: 28
	public override void CalculateLayoutInputHorizontal() { }

	// RVA: 0x23F4AC Offset: 0x23F4AC VA: 0x23F4AC Slot: 29
	public override void CalculateLayoutInputVertical() { }

	// RVA: 0x23F808 Offset: 0x23F808 VA: 0x23F808 Slot: 37
	public override void SetLayoutHorizontal() { }

	// RVA: 0x240238 Offset: 0x240238 VA: 0x240238 Slot: 38
	public override void SetLayoutVertical() { }

	// RVA: 0x23F810 Offset: 0x23F810 VA: 0x23F810
	private void SetCellsAlongAxis(int axis) { }
}

// Namespace: 
public enum GridLayoutGroup.Corner // TypeDefIndex: 2029
{
	// Fields
	public int value__; // 0x0
	public const GridLayoutGroup.Corner UpperLeft = 0;
	public const GridLayoutGroup.Corner UpperRight = 1;
	public const GridLayoutGroup.Corner LowerLeft = 2;
	public const GridLayoutGroup.Corner LowerRight = 3;
}

// Namespace: 
public enum GridLayoutGroup.Axis // TypeDefIndex: 2030
{
	// Fields
	public int value__; // 0x0
	public const GridLayoutGroup.Axis Horizontal = 0;
	public const GridLayoutGroup.Axis Vertical = 1;
}

// Namespace: 
public enum GridLayoutGroup.Constraint // TypeDefIndex: 2031
{
	// Fields
	public int value__; // 0x0
	public const GridLayoutGroup.Constraint Flexible = 0;
	public const GridLayoutGroup.Constraint FixedColumnCount = 1;
	public const GridLayoutGroup.Constraint FixedRowCount = 2;
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC12F8 Offset: 0xC12F8 VA: 0xC12F8
public class HorizontalLayoutGroup : HorizontalOrVerticalLayoutGroup // TypeDefIndex: 2032
{
	// Methods

	// RVA: 0x2404B0 Offset: 0x2404B0 VA: 0x2404B0
	protected void .ctor() { }

	// RVA: 0x2404E0 Offset: 0x2404E0 VA: 0x2404E0 Slot: 28
	public override void CalculateLayoutInputHorizontal() { }

	// RVA: 0x240810 Offset: 0x240810 VA: 0x240810 Slot: 29
	public override void CalculateLayoutInputVertical() { }

	// RVA: 0x24081C Offset: 0x24081C VA: 0x24081C Slot: 37
	public override void SetLayoutHorizontal() { }

	// RVA: 0x240FC8 Offset: 0x240FC8 VA: 0x240FC8 Slot: 38
	public override void SetLayoutVertical() { }
}

// Namespace: UnityEngine.UI
public abstract class HorizontalOrVerticalLayoutGroup : LayoutGroup // TypeDefIndex: 2033
{
	// Fields
	[SerializeField] // RVA: 0xC3A9C Offset: 0xC3A9C VA: 0xC3A9C
	protected float m_Spacing; // 0x38
	[SerializeField] // RVA: 0xC3AAC Offset: 0xC3AAC VA: 0xC3AAC
	protected bool m_ChildForceExpandWidth; // 0x3C
	[SerializeField] // RVA: 0xC3ABC Offset: 0xC3ABC VA: 0xC3ABC
	protected bool m_ChildForceExpandHeight; // 0x3D
	[SerializeField] // RVA: 0xC3ACC Offset: 0xC3ACC VA: 0xC3ACC
	protected bool m_ChildControlWidth; // 0x3E
	[SerializeField] // RVA: 0xC3ADC Offset: 0xC3ADC VA: 0xC3ADC
	protected bool m_ChildControlHeight; // 0x3F

	// Properties
	public float spacing { get; set; }
	public bool childForceExpandWidth { get; set; }
	public bool childForceExpandHeight { get; set; }
	public bool childControlWidth { get; set; }
	public bool childControlHeight { get; set; }

	// Methods

	// RVA: 0x2404C8 Offset: 0x2404C8 VA: 0x2404C8
	protected void .ctor() { }

	// RVA: 0x240FD4 Offset: 0x240FD4 VA: 0x240FD4
	public float get_spacing() { }

	// RVA: 0x240FDC Offset: 0x240FDC VA: 0x240FDC
	public void set_spacing(float value) { }

	// RVA: 0x24104C Offset: 0x24104C VA: 0x24104C
	public bool get_childForceExpandWidth() { }

	// RVA: 0x241054 Offset: 0x241054 VA: 0x241054
	public void set_childForceExpandWidth(bool value) { }

	// RVA: 0x2410C4 Offset: 0x2410C4 VA: 0x2410C4
	public bool get_childForceExpandHeight() { }

	// RVA: 0x2410CC Offset: 0x2410CC VA: 0x2410CC
	public void set_childForceExpandHeight(bool value) { }

	// RVA: 0x24113C Offset: 0x24113C VA: 0x24113C
	public bool get_childControlWidth() { }

	// RVA: 0x241144 Offset: 0x241144 VA: 0x241144
	public void set_childControlWidth(bool value) { }

	// RVA: 0x2411B4 Offset: 0x2411B4 VA: 0x2411B4
	public bool get_childControlHeight() { }

	// RVA: 0x2411BC Offset: 0x2411BC VA: 0x2411BC
	public void set_childControlHeight(bool value) { }

	// RVA: 0x240504 Offset: 0x240504 VA: 0x240504
	protected void CalcAlongAxis(int axis, bool isVertical) { }

	// RVA: 0x240828 Offset: 0x240828 VA: 0x240828
	protected void SetChildrenAlongAxis(int axis, bool isVertical) { }

	// RVA: 0x24122C Offset: 0x24122C VA: 0x24122C
	private void GetChildSizes(RectTransform child, int axis, bool controlSize, bool childForceExpand, out float min, out float preferred, out float flexible) { }
}

// Namespace: UnityEngine.UI
public interface ILayoutElement // TypeDefIndex: 2034
{
	// Properties
	public abstract float minWidth { get; }
	public abstract float preferredWidth { get; }
	public abstract float flexibleWidth { get; }
	public abstract float minHeight { get; }
	public abstract float preferredHeight { get; }
	public abstract float flexibleHeight { get; }
	public abstract int layoutPriority { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void CalculateLayoutInputHorizontal();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void CalculateLayoutInputVertical();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract float get_minWidth();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract float get_preferredWidth();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract float get_flexibleWidth();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract float get_minHeight();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract float get_preferredHeight();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract float get_flexibleHeight();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract int get_layoutPriority();
}

// Namespace: UnityEngine.UI
public interface ILayoutController // TypeDefIndex: 2035
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void SetLayoutHorizontal();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void SetLayoutVertical();
}

// Namespace: UnityEngine.UI
public interface ILayoutGroup : ILayoutController // TypeDefIndex: 2036
{}

// Namespace: UnityEngine.UI
public interface ILayoutSelfController : ILayoutController // TypeDefIndex: 2037
{}

// Namespace: UnityEngine.UI
public interface ILayoutIgnorer // TypeDefIndex: 2038
{
	// Properties
	public abstract bool ignoreLayout { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_ignoreLayout();
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC1348 Offset: 0xC1348 VA: 0xC1348
[RequireComponent] // RVA: 0xC1348 Offset: 0xC1348 VA: 0xC1348
[ExecuteAlways] // RVA: 0xC1348 Offset: 0xC1348 VA: 0xC1348
public class LayoutElement : UIBehaviour, ILayoutElement, ILayoutIgnorer // TypeDefIndex: 2039
{
	// Fields
	[SerializeField] // RVA: 0xC3AEC Offset: 0xC3AEC VA: 0xC3AEC
	private bool m_IgnoreLayout; // 0xC
	[SerializeField] // RVA: 0xC3AFC Offset: 0xC3AFC VA: 0xC3AFC
	private float m_MinWidth; // 0x10
	[SerializeField] // RVA: 0xC3B0C Offset: 0xC3B0C VA: 0xC3B0C
	private float m_MinHeight; // 0x14
	[SerializeField] // RVA: 0xC3B1C Offset: 0xC3B1C VA: 0xC3B1C
	private float m_PreferredWidth; // 0x18
	[SerializeField] // RVA: 0xC3B2C Offset: 0xC3B2C VA: 0xC3B2C
	private float m_PreferredHeight; // 0x1C
	[SerializeField] // RVA: 0xC3B3C Offset: 0xC3B3C VA: 0xC3B3C
	private float m_FlexibleWidth; // 0x20
	[SerializeField] // RVA: 0xC3B4C Offset: 0xC3B4C VA: 0xC3B4C
	private float m_FlexibleHeight; // 0x24
	[SerializeField] // RVA: 0xC3B5C Offset: 0xC3B5C VA: 0xC3B5C
	private int m_LayoutPriority; // 0x28

	// Properties
	public virtual bool ignoreLayout { get; set; }
	public virtual float minWidth { get; set; }
	public virtual float minHeight { get; set; }
	public virtual float preferredWidth { get; set; }
	public virtual float preferredHeight { get; set; }
	public virtual float flexibleWidth { get; set; }
	public virtual float flexibleHeight { get; set; }
	public virtual int layoutPriority { get; set; }

	// Methods

	// RVA: 0x257CC8 Offset: 0x257CC8 VA: 0x257CC8
	protected void .ctor() { }

	// RVA: 0x257CFC Offset: 0x257CFC VA: 0x257CFC Slot: 27
	public virtual bool get_ignoreLayout() { }

	// RVA: 0x257D04 Offset: 0x257D04 VA: 0x257D04 Slot: 28
	public virtual void set_ignoreLayout(bool value) { }

	// RVA: 0x257E5C Offset: 0x257E5C VA: 0x257E5C Slot: 29
	public virtual void CalculateLayoutInputHorizontal() { }

	// RVA: 0x257E60 Offset: 0x257E60 VA: 0x257E60 Slot: 30
	public virtual void CalculateLayoutInputVertical() { }

	// RVA: 0x257E64 Offset: 0x257E64 VA: 0x257E64 Slot: 31
	public virtual float get_minWidth() { }

	// RVA: 0x257E6C Offset: 0x257E6C VA: 0x257E6C Slot: 32
	public virtual void set_minWidth(float value) { }

	// RVA: 0x257EE8 Offset: 0x257EE8 VA: 0x257EE8 Slot: 33
	public virtual float get_minHeight() { }

	// RVA: 0x257EF0 Offset: 0x257EF0 VA: 0x257EF0 Slot: 34
	public virtual void set_minHeight(float value) { }

	// RVA: 0x257F6C Offset: 0x257F6C VA: 0x257F6C Slot: 35
	public virtual float get_preferredWidth() { }

	// RVA: 0x257F74 Offset: 0x257F74 VA: 0x257F74 Slot: 36
	public virtual void set_preferredWidth(float value) { }

	// RVA: 0x257FF0 Offset: 0x257FF0 VA: 0x257FF0 Slot: 37
	public virtual float get_preferredHeight() { }

	// RVA: 0x257FF8 Offset: 0x257FF8 VA: 0x257FF8 Slot: 38
	public virtual void set_preferredHeight(float value) { }

	// RVA: 0x258074 Offset: 0x258074 VA: 0x258074 Slot: 39
	public virtual float get_flexibleWidth() { }

	// RVA: 0x25807C Offset: 0x25807C VA: 0x25807C Slot: 40
	public virtual void set_flexibleWidth(float value) { }

	// RVA: 0x2580F8 Offset: 0x2580F8 VA: 0x2580F8 Slot: 41
	public virtual float get_flexibleHeight() { }

	// RVA: 0x258100 Offset: 0x258100 VA: 0x258100 Slot: 42
	public virtual void set_flexibleHeight(float value) { }

	// RVA: 0x25817C Offset: 0x25817C VA: 0x25817C Slot: 43
	public virtual int get_layoutPriority() { }

	// RVA: 0x258184 Offset: 0x258184 VA: 0x258184 Slot: 44
	public virtual void set_layoutPriority(int value) { }

	// RVA: 0x258200 Offset: 0x258200 VA: 0x258200 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x258220 Offset: 0x258220 VA: 0x258220 Slot: 12
	protected override void OnTransformParentChanged() { }

	// RVA: 0x258224 Offset: 0x258224 VA: 0x258224 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x258244 Offset: 0x258244 VA: 0x258244 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x258248 Offset: 0x258248 VA: 0x258248 Slot: 11
	protected override void OnBeforeTransformParentChanged() { }

	// RVA: 0x257D80 Offset: 0x257D80 VA: 0x257D80
	protected void SetDirty() { }
}

// Namespace: UnityEngine.UI
[DisallowMultipleComponent] // RVA: 0xC140C Offset: 0xC140C VA: 0xC140C
[ExecuteAlways] // RVA: 0xC140C Offset: 0xC140C VA: 0xC140C
[RequireComponent] // RVA: 0xC140C Offset: 0xC140C VA: 0xC140C
public abstract class LayoutGroup : UIBehaviour, ILayoutElement, ILayoutGroup, ILayoutController // TypeDefIndex: 2040
{
	// Fields
	[SerializeField] // RVA: 0xC3B6C Offset: 0xC3B6C VA: 0xC3B6C
	protected RectOffset m_Padding; // 0xC
	[SerializeField] // RVA: 0xC3B7C Offset: 0xC3B7C VA: 0xC3B7C
	protected TextAnchor m_ChildAlignment; // 0x10
	private RectTransform m_Rect; // 0x14
	protected DrivenRectTransformTracker m_Tracker; // 0x18
	private Vector2 m_TotalMinSize; // 0x1C
	private Vector2 m_TotalPreferredSize; // 0x24
	private Vector2 m_TotalFlexibleSize; // 0x2C
	private List<RectTransform> m_RectChildren; // 0x34

	// Properties
	public RectOffset padding { get; set; }
	public TextAnchor childAlignment { get; set; }
	protected RectTransform rectTransform { get; }
	protected List<RectTransform> rectChildren { get; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }
	private bool isRootLayoutGroup { get; }

	// Methods

	// RVA: 0x23E814 Offset: 0x23E814 VA: 0x23E814
	protected void .ctor() { }

	// RVA: 0x23F44C Offset: 0x23F44C VA: 0x23F44C
	public RectOffset get_padding() { }

	// RVA: 0x25824C Offset: 0x25824C VA: 0x25824C
	public void set_padding(RectOffset value) { }

	// RVA: 0x2582BC Offset: 0x2582BC VA: 0x2582BC
	public TextAnchor get_childAlignment() { }

	// RVA: 0x2582C4 Offset: 0x2582C4 VA: 0x2582C4
	public void set_childAlignment(TextAnchor value) { }

	// RVA: 0x23F754 Offset: 0x23F754 VA: 0x23F754
	protected RectTransform get_rectTransform() { }

	// RVA: 0x23F444 Offset: 0x23F444 VA: 0x23F444
	protected List<RectTransform> get_rectChildren() { }

	// RVA: 0x23EF14 Offset: 0x23EF14 VA: 0x23EF14 Slot: 28
	public virtual void CalculateLayoutInputHorizontal() { }

	// RVA: -1 Offset: -1 Slot: 29
	public abstract void CalculateLayoutInputVertical();

	// RVA: 0x258334 Offset: 0x258334 VA: 0x258334 Slot: 30
	public virtual float get_minWidth() { }

	// RVA: 0x258344 Offset: 0x258344 VA: 0x258344 Slot: 31
	public virtual float get_preferredWidth() { }

	// RVA: 0x258354 Offset: 0x258354 VA: 0x258354 Slot: 32
	public virtual float get_flexibleWidth() { }

	// RVA: 0x258364 Offset: 0x258364 VA: 0x258364 Slot: 33
	public virtual float get_minHeight() { }

	// RVA: 0x258374 Offset: 0x258374 VA: 0x258374 Slot: 34
	public virtual float get_preferredHeight() { }

	// RVA: 0x258384 Offset: 0x258384 VA: 0x258384 Slot: 35
	public virtual float get_flexibleHeight() { }

	// RVA: 0x258394 Offset: 0x258394 VA: 0x258394 Slot: 36
	public virtual int get_layoutPriority() { }

	// RVA: -1 Offset: -1 Slot: 37
	public abstract void SetLayoutHorizontal();

	// RVA: -1 Offset: -1 Slot: 38
	public abstract void SetLayoutVertical();

	// RVA: 0x25839C Offset: 0x25839C VA: 0x25839C Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x2584C4 Offset: 0x2584C4 VA: 0x2584C4 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x25856C Offset: 0x25856C VA: 0x25856C Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x241538 Offset: 0x241538 VA: 0x241538
	protected float GetTotalMinSize(int axis) { }

	// RVA: 0x24152C Offset: 0x24152C VA: 0x24152C
	protected float GetTotalPreferredSize(int axis) { }

	// RVA: 0x241520 Offset: 0x241520 VA: 0x241520
	protected float GetTotalFlexibleSize(int axis) { }

	// RVA: 0x240240 Offset: 0x240240 VA: 0x240240
	protected float GetStartOffset(int axis, float requiredSpaceWithoutPadding) { }

	// RVA: 0x24138C Offset: 0x24138C VA: 0x24138C
	protected float GetAlignmentOnAxis(int axis) { }

	// RVA: 0x23F454 Offset: 0x23F454 VA: 0x23F454
	protected void SetLayoutInputForAxis(float totalMin, float totalPreferred, float totalFlexible, int axis) { }

	// RVA: 0x2413DC Offset: 0x2413DC VA: 0x2413DC
	protected void SetChildAlongAxis(RectTransform rect, int axis, float pos) { }

	// RVA: 0x2403A8 Offset: 0x2403A8 VA: 0x2403A8
	protected void SetChildAlongAxis(RectTransform rect, int axis, float pos, float size) { }

	// RVA: 0x258570 Offset: 0x258570 VA: 0x258570
	private bool get_isRootLayoutGroup() { }

	// RVA: 0x258710 Offset: 0x258710 VA: 0x258710 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0x258740 Offset: 0x258740 VA: 0x258740 Slot: 39
	protected virtual void OnTransformChildrenChanged() { }

	// RVA: -1 Offset: -1
	protected void SetProperty<T>(ref T currentValue, T newValue) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x514008 Offset: 0x514008 VA: 0x514008
	|-LayoutGroup.SetProperty<bool>
	|
	|-RVA: 0x51408C Offset: 0x51408C VA: 0x51408C
	|-LayoutGroup.SetProperty<int>
	|
	|-RVA: 0x514110 Offset: 0x514110 VA: 0x514110
	|-LayoutGroup.SetProperty<object>
	|-LayoutGroup.SetProperty<RectOffset>
	|
	|-RVA: 0x51417C Offset: 0x51417C VA: 0x51417C
	|-LayoutGroup.SetProperty<float>
	|
	|-RVA: 0x514204 Offset: 0x514204 VA: 0x514204
	|-LayoutGroup.SetProperty<TextAnchor>
	|
	|-RVA: 0x5142F8 Offset: 0x5142F8 VA: 0x5142F8
	|-LayoutGroup.SetProperty<GridLayoutGroup.Axis>
	|
	|-RVA: 0x5143EC Offset: 0x5143EC VA: 0x5143EC
	|-LayoutGroup.SetProperty<GridLayoutGroup.Constraint>
	|
	|-RVA: 0x5144E0 Offset: 0x5144E0 VA: 0x5144E0
	|-LayoutGroup.SetProperty<GridLayoutGroup.Corner>
	|
	|-RVA: 0x5145D4 Offset: 0x5145D4 VA: 0x5145D4
	|-LayoutGroup.SetProperty<Vector2>
	*/

	// RVA: 0x2583BC Offset: 0x2583BC VA: 0x2583BC
	protected void SetDirty() { }

	[DebuggerHiddenAttribute] // RVA: 0xC431C Offset: 0xC431C VA: 0xC431C
	// RVA: 0x258744 Offset: 0x258744 VA: 0x258744
	private IEnumerator DelayedSetDirty(RectTransform rectTransform) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC174C Offset: 0xC174C VA: 0xC174C
private sealed class LayoutGroup.<DelayedSetDirty>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 2041
{
	// Fields
	internal RectTransform rectTransform; // 0x8
	internal object $current; // 0xC
	internal bool $disposing; // 0x10
	internal int $PC; // 0x14

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xC477C Offset: 0xC477C VA: 0xC477C
	// RVA: 0x215F98 Offset: 0x215F98 VA: 0x215F98
	public void .ctor() { }

	// RVA: 0x215FA0 Offset: 0x215FA0 VA: 0x215FA0 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xC478C Offset: 0xC478C VA: 0xC478C
	// RVA: 0x2165D4 Offset: 0x2165D4 VA: 0x2165D4 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC479C Offset: 0xC479C VA: 0xC479C
	// RVA: 0x2165DC Offset: 0x2165DC VA: 0x2165DC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC47AC Offset: 0xC47AC VA: 0xC47AC
	// RVA: 0x2165E4 Offset: 0x2165E4 VA: 0x2165E4 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xC47BC Offset: 0xC47BC VA: 0xC47BC
	// RVA: 0x2165F8 Offset: 0x2165F8 VA: 0x2165F8 Slot: 6
	public void Reset() { }
}

// Namespace: UnityEngine.UI
public class LayoutRebuilder : ICanvasElement // TypeDefIndex: 2042
{
	// Fields
	private RectTransform m_ToRebuild; // 0x8
	private int m_CachedHashFromTransform; // 0xC
	private static ObjectPool<LayoutRebuilder> s_Rebuilders; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC3B8C Offset: 0xC3B8C VA: 0xC3B8C
	private static RectTransform.ReapplyDrivenProperties <>f__mg$cache0; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xC3B9C Offset: 0xC3B9C VA: 0xC3B9C
	private static Predicate<Component> <>f__am$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC3BAC Offset: 0xC3BAC VA: 0xC3BAC
	private static UnityAction<Component> <>f__am$cache1; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0xC3BBC Offset: 0xC3BBC VA: 0xC3BBC
	private static UnityAction<Component> <>f__am$cache2; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC3BCC Offset: 0xC3BCC VA: 0xC3BCC
	private static UnityAction<Component> <>f__am$cache3; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xC3BDC Offset: 0xC3BDC VA: 0xC3BDC
	private static UnityAction<Component> <>f__am$cache4; // 0x18

	// Properties
	public Transform transform { get; }

	// Methods

	// RVA: 0x216680 Offset: 0x216680 VA: 0x216680
	private static void .cctor() { }

	// RVA: 0x2167D0 Offset: 0x2167D0 VA: 0x2167D0
	public void .ctor() { }

	// RVA: 0x2167D8 Offset: 0x2167D8 VA: 0x2167D8
	private void Initialize(RectTransform controller) { }

	// RVA: 0x216818 Offset: 0x216818 VA: 0x216818
	private void Clear() { }

	// RVA: 0x216828 Offset: 0x216828 VA: 0x216828
	private static void ReapplyDrivenProperties(RectTransform driven) { }

	// RVA: 0x2168A8 Offset: 0x2168A8 VA: 0x2168A8 Slot: 5
	public Transform get_transform() { }

	// RVA: 0x2168B0 Offset: 0x2168B0 VA: 0x2168B0 Slot: 8
	public bool IsDestroyed() { }

	// RVA: 0x21693C Offset: 0x21693C VA: 0x21693C
	private static void StripDisabledBehavioursFromList(List<Component> components) { }

	// RVA: 0x216ABC Offset: 0x216ABC VA: 0x216ABC
	public static void ForceRebuildLayoutImmediate(RectTransform layoutRoot) { }

	// RVA: 0x216C04 Offset: 0x216C04 VA: 0x216C04 Slot: 4
	public void Rebuild(CanvasUpdate executing) { }

	// RVA: 0x217414 Offset: 0x217414 VA: 0x217414
	private void PerformLayoutControl(RectTransform rect, UnityAction<Component> action) { }

	// RVA: 0x217038 Offset: 0x217038 VA: 0x217038
	private void PerformLayoutCalculation(RectTransform rect, UnityAction<Component> action) { }

	// RVA: 0x216084 Offset: 0x216084 VA: 0x216084
	public static void MarkLayoutForRebuild(RectTransform rect) { }

	// RVA: 0x2178B0 Offset: 0x2178B0 VA: 0x2178B0
	private static bool ValidController(RectTransform layoutRoot, List<Component> comps) { }

	// RVA: 0x217B3C Offset: 0x217B3C VA: 0x217B3C
	private static void MarkLayoutRootForRebuild(RectTransform controller) { }

	// RVA: 0x217D2C Offset: 0x217D2C VA: 0x217D2C Slot: 6
	public void LayoutComplete() { }

	// RVA: 0x217DE8 Offset: 0x217DE8 VA: 0x217DE8 Slot: 7
	public void GraphicUpdateComplete() { }

	// RVA: 0x217DEC Offset: 0x217DEC VA: 0x217DEC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x217DF4 Offset: 0x217DF4 VA: 0x217DF4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x217E54 Offset: 0x217E54 VA: 0x217E54 Slot: 3
	public override string ToString() { }

	[CompilerGeneratedAttribute] // RVA: 0xC432C Offset: 0xC432C VA: 0xC432C
	// RVA: 0x217EEC Offset: 0x217EEC VA: 0x217EEC
	private static void <s_Rebuilders>m__0(LayoutRebuilder x) { }

	[CompilerGeneratedAttribute] // RVA: 0xC433C Offset: 0xC433C VA: 0xC433C
	// RVA: 0x217F18 Offset: 0x217F18 VA: 0x217F18
	private static bool <StripDisabledBehavioursFromList>m__1(Component e) { }

	[CompilerGeneratedAttribute] // RVA: 0xC434C Offset: 0xC434C VA: 0xC434C
	// RVA: 0x217FB8 Offset: 0x217FB8 VA: 0x217FB8
	private static void <Rebuild>m__2(Component e) { }

	[CompilerGeneratedAttribute] // RVA: 0xC435C Offset: 0xC435C VA: 0xC435C
	// RVA: 0x2180B8 Offset: 0x2180B8 VA: 0x2180B8
	private static void <Rebuild>m__3(Component e) { }

	[CompilerGeneratedAttribute] // RVA: 0xC436C Offset: 0xC436C VA: 0xC436C
	// RVA: 0x2181B8 Offset: 0x2181B8 VA: 0x2181B8
	private static void <Rebuild>m__4(Component e) { }

	[CompilerGeneratedAttribute] // RVA: 0xC437C Offset: 0xC437C VA: 0xC437C
	// RVA: 0x2182B8 Offset: 0x2182B8 VA: 0x2182B8
	private static void <Rebuild>m__5(Component e) { }
}

// Namespace: UnityEngine.UI
public static class LayoutUtility // TypeDefIndex: 2043
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC3BEC Offset: 0xC3BEC VA: 0xC3BEC
	private static Func<ILayoutElement, float> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC3BFC Offset: 0xC3BFC VA: 0xC3BFC
	private static Func<ILayoutElement, float> <>f__am$cache1; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xC3C0C Offset: 0xC3C0C VA: 0xC3C0C
	private static Func<ILayoutElement, float> <>f__am$cache2; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC3C1C Offset: 0xC3C1C VA: 0xC3C1C
	private static Func<ILayoutElement, float> <>f__am$cache3; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0xC3C2C Offset: 0xC3C2C VA: 0xC3C2C
	private static Func<ILayoutElement, float> <>f__am$cache4; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC3C3C Offset: 0xC3C3C VA: 0xC3C3C
	private static Func<ILayoutElement, float> <>f__am$cache5; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xC3C4C Offset: 0xC3C4C VA: 0xC3C4C
	private static Func<ILayoutElement, float> <>f__am$cache6; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC3C5C Offset: 0xC3C5C VA: 0xC3C5C
	private static Func<ILayoutElement, float> <>f__am$cache7; // 0x1C

	// Methods

	// RVA: 0x2183B8 Offset: 0x2183B8 VA: 0x2183B8
	public static float GetMinSize(RectTransform rect, int axis) { }

	// RVA: 0x2185AC Offset: 0x2185AC VA: 0x2185AC
	public static float GetPreferredSize(RectTransform rect, int axis) { }

	// RVA: 0x218954 Offset: 0x218954 VA: 0x218954
	public static float GetFlexibleSize(RectTransform rect, int axis) { }

	// RVA: 0x2183C8 Offset: 0x2183C8 VA: 0x2183C8
	public static float GetMinWidth(RectTransform rect) { }

	// RVA: 0x2185BC Offset: 0x2185BC VA: 0x2185BC
	public static float GetPreferredWidth(RectTransform rect) { }

	// RVA: 0x218964 Offset: 0x218964 VA: 0x218964
	public static float GetFlexibleWidth(RectTransform rect) { }

	// RVA: 0x2184BC Offset: 0x2184BC VA: 0x2184BC
	public static float GetMinHeight(RectTransform rect) { }

	// RVA: 0x218788 Offset: 0x218788 VA: 0x218788
	public static float GetPreferredHeight(RectTransform rect) { }

	// RVA: 0x218A54 Offset: 0x218A54 VA: 0x218A54
	public static float GetFlexibleHeight(RectTransform rect) { }

	// RVA: 0x218B44 Offset: 0x218B44 VA: 0x218B44
	public static float GetLayoutProperty(RectTransform rect, Func<ILayoutElement, float> property, float defaultValue) { }

	// RVA: 0x218B68 Offset: 0x218B68 VA: 0x218B68
	public static float GetLayoutProperty(RectTransform rect, Func<ILayoutElement, float> property, float defaultValue, out ILayoutElement source) { }

	[CompilerGeneratedAttribute] // RVA: 0xC438C Offset: 0xC438C VA: 0xC438C
	// RVA: 0x218F38 Offset: 0x218F38 VA: 0x218F38
	private static float <GetMinWidth>m__0(ILayoutElement e) { }

	[CompilerGeneratedAttribute] // RVA: 0xC439C Offset: 0xC439C VA: 0xC439C
	// RVA: 0x21900C Offset: 0x21900C VA: 0x21900C
	private static float <GetPreferredWidth>m__1(ILayoutElement e) { }

	[CompilerGeneratedAttribute] // RVA: 0xC43AC Offset: 0xC43AC VA: 0xC43AC
	// RVA: 0x2190E0 Offset: 0x2190E0 VA: 0x2190E0
	private static float <GetPreferredWidth>m__2(ILayoutElement e) { }

	[CompilerGeneratedAttribute] // RVA: 0xC43BC Offset: 0xC43BC VA: 0xC43BC
	// RVA: 0x2191B4 Offset: 0x2191B4 VA: 0x2191B4
	private static float <GetFlexibleWidth>m__3(ILayoutElement e) { }

	[CompilerGeneratedAttribute] // RVA: 0xC43CC Offset: 0xC43CC VA: 0xC43CC
	// RVA: 0x219288 Offset: 0x219288 VA: 0x219288
	private static float <GetMinHeight>m__4(ILayoutElement e) { }

	[CompilerGeneratedAttribute] // RVA: 0xC43DC Offset: 0xC43DC VA: 0xC43DC
	// RVA: 0x21935C Offset: 0x21935C VA: 0x21935C
	private static float <GetPreferredHeight>m__5(ILayoutElement e) { }

	[CompilerGeneratedAttribute] // RVA: 0xC43EC Offset: 0xC43EC VA: 0xC43EC
	// RVA: 0x219430 Offset: 0x219430 VA: 0x219430
	private static float <GetPreferredHeight>m__6(ILayoutElement e) { }

	[CompilerGeneratedAttribute] // RVA: 0xC43FC Offset: 0xC43FC VA: 0xC43FC
	// RVA: 0x219504 Offset: 0x219504 VA: 0x219504
	private static float <GetFlexibleHeight>m__7(ILayoutElement e) { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC14A4 Offset: 0xC14A4 VA: 0xC14A4
public class VerticalLayoutGroup : HorizontalOrVerticalLayoutGroup // TypeDefIndex: 2044
{
	// Methods

	// RVA: 0x5F3EA8 Offset: 0x5F3EA8 VA: 0x5F3EA8
	protected void .ctor() { }

	// RVA: 0x5F3EB0 Offset: 0x5F3EB0 VA: 0x5F3EB0 Slot: 28
	public override void CalculateLayoutInputHorizontal() { }

	// RVA: 0x5F3EDC Offset: 0x5F3EDC VA: 0x5F3EDC Slot: 29
	public override void CalculateLayoutInputVertical() { }

	// RVA: 0x5F3EEC Offset: 0x5F3EEC VA: 0x5F3EEC Slot: 37
	public override void SetLayoutHorizontal() { }

	// RVA: 0x5F3EFC Offset: 0x5F3EFC VA: 0x5F3EFC Slot: 38
	public override void SetLayoutVertical() { }
}

// Namespace: UnityEngine.UI
public interface IMaterialModifier // TypeDefIndex: 2045
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Material GetModifiedMaterial(Material baseMaterial);
}

// Namespace: UnityEngine.UI.Collections
[DefaultMemberAttribute] // RVA: 0xC14F4 Offset: 0xC14F4 VA: 0xC14F4
internal class IndexedSet<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable // TypeDefIndex: 2046
{
	// Fields
	private readonly List<T> m_List; // 0x0
	private Dictionary<T, int> m_Dictionary; // 0x0

	// Properties
	public int Count { get; }
	public bool IsReadOnly { get; }
	public T Item { get; set; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x580650 Offset: 0x580650 VA: 0x580650
	|-IndexedSet<object>..ctor
	|-IndexedSet<Graphic>..ctor
	|-IndexedSet<ICanvasElement>..ctor
	|-IndexedSet<IClipper>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public void Add(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x580700 Offset: 0x580700 VA: 0x580700
	|-IndexedSet<object>.Add
	|-IndexedSet<Graphic>.Add
	*/

	// RVA: -1 Offset: -1
	public bool AddUnique(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5807AC Offset: 0x5807AC VA: 0x5807AC
	|-IndexedSet<object>.AddUnique
	|-IndexedSet<Graphic>.AddUnique
	|-IndexedSet<ICanvasElement>.AddUnique
	|-IndexedSet<IClipper>.AddUnique
	*/

	// RVA: -1 Offset: -1 Slot: 16
	public bool Remove(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x58089C Offset: 0x58089C VA: 0x58089C
	|-IndexedSet<object>.Remove
	|-IndexedSet<Graphic>.Remove
	|-IndexedSet<ICanvasElement>.Remove
	|-IndexedSet<IClipper>.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 17
	public IEnumerator<T> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x580928 Offset: 0x580928 VA: 0x580928
	|-IndexedSet<object>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 9
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5809B0 Offset: 0x5809B0 VA: 0x5809B0
	|-IndexedSet<object>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public void Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5809EC Offset: 0x5809EC VA: 0x5809EC
	|-IndexedSet<object>.Clear
	|-IndexedSet<ICanvasElement>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public bool Contains(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x580A58 Offset: 0x580A58 VA: 0x580A58
	|-IndexedSet<object>.Contains
	|-IndexedSet<ICanvasElement>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 15
	public void CopyTo(T[] array, int arrayIndex) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x580A9C Offset: 0x580A9C VA: 0x580A9C
	|-IndexedSet<object>.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 10
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x580AE8 Offset: 0x580AE8 VA: 0x580AE8
	|-IndexedSet<object>.get_Count
	|-IndexedSet<Graphic>.get_Count
	|-IndexedSet<ICanvasElement>.get_Count
	|-IndexedSet<IClipper>.get_Count
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public bool get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x580B24 Offset: 0x580B24 VA: 0x580B24
	|-IndexedSet<object>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public int IndexOf(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x580B2C Offset: 0x580B2C VA: 0x580B2C
	|-IndexedSet<object>.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public void Insert(int index, T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x580B88 Offset: 0x580B88 VA: 0x580B88
	|-IndexedSet<object>.Insert
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public void RemoveAt(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x580C24 Offset: 0x580C24 VA: 0x580C24
	|-IndexedSet<object>.RemoveAt
	|-IndexedSet<ICanvasElement>.RemoveAt
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public T get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x580DEC Offset: 0x580DEC VA: 0x580DEC
	|-IndexedSet<object>.get_Item
	|-IndexedSet<ICanvasElement>.get_Item
	|-IndexedSet<IClipper>.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public void set_Item(int index, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x580E30 Offset: 0x580E30 VA: 0x580E30
	|-IndexedSet<object>.set_Item
	*/

	// RVA: -1 Offset: -1
	public void RemoveAll(Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x580F20 Offset: 0x580F20 VA: 0x580F20
	|-IndexedSet<object>.RemoveAll
	*/

	// RVA: -1 Offset: -1
	public void Sort(Comparison<T> sortLayoutFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x581000 Offset: 0x581000 VA: 0x581000
	|-IndexedSet<object>.Sort
	|-IndexedSet<ICanvasElement>.Sort
	*/
}

// Namespace: UnityEngine.UI
internal static class ListPool<T> // TypeDefIndex: 2047
{
	// Fields
	private static readonly ObjectPool<List<T>> s_ListPool; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC3C6C Offset: 0xC3C6C VA: 0xC3C6C
	private static UnityAction<List<T>> <>f__mg$cache0; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	private static void Clear(List<T> l) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5ED34C Offset: 0x5ED34C VA: 0x5ED34C
	|-ListPool<int>.Clear
	|
	|-RVA: 0x5ED90C Offset: 0x5ED90C VA: 0x5ED90C
	|-ListPool<object>.Clear
	|
	|-RVA: 0x5EDECC Offset: 0x5EDECC VA: 0x5EDECC
	|-ListPool<Color32>.Clear
	|
	|-RVA: 0x5EE48C Offset: 0x5EE48C VA: 0x5EE48C
	|-ListPool<UIVertex>.Clear
	|
	|-RVA: 0x5EEA4C Offset: 0x5EEA4C VA: 0x5EEA4C
	|-ListPool<Vector2>.Clear
	|
	|-RVA: 0x5EF00C Offset: 0x5EF00C VA: 0x5EF00C
	|-ListPool<Vector3>.Clear
	|
	|-RVA: 0x5EF5CC Offset: 0x5EF5CC VA: 0x5EF5CC
	|-ListPool<Vector4>.Clear
	*/

	// RVA: -1 Offset: -1
	public static List<T> Get() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5ED3C8 Offset: 0x5ED3C8 VA: 0x5ED3C8
	|-ListPool<int>.Get
	|
	|-RVA: 0x5ED988 Offset: 0x5ED988 VA: 0x5ED988
	|-ListPool<object>.Get
	|-ListPool<Canvas>.Get
	|-ListPool<Component>.Get
	|-ListPool<Mask>.Get
	|-ListPool<RectMask2D>.Get
	|
	|-RVA: 0x5EDF48 Offset: 0x5EDF48 VA: 0x5EDF48
	|-ListPool<Color32>.Get
	|
	|-RVA: 0x5EE508 Offset: 0x5EE508 VA: 0x5EE508
	|-ListPool<UIVertex>.Get
	|
	|-RVA: 0x5EEAC8 Offset: 0x5EEAC8 VA: 0x5EEAC8
	|-ListPool<Vector2>.Get
	|
	|-RVA: 0x5EF088 Offset: 0x5EF088 VA: 0x5EF088
	|-ListPool<Vector3>.Get
	|
	|-RVA: 0x5EF648 Offset: 0x5EF648 VA: 0x5EF648
	|-ListPool<Vector4>.Get
	*/

	// RVA: -1 Offset: -1
	public static void Release(List<T> toRelease) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5ED538 Offset: 0x5ED538 VA: 0x5ED538
	|-ListPool<int>.Release
	|
	|-RVA: 0x5EDAF8 Offset: 0x5EDAF8 VA: 0x5EDAF8
	|-ListPool<object>.Release
	|-ListPool<Canvas>.Release
	|-ListPool<Component>.Release
	|-ListPool<Mask>.Release
	|-ListPool<RectMask2D>.Release
	|
	|-RVA: 0x5EE0B8 Offset: 0x5EE0B8 VA: 0x5EE0B8
	|-ListPool<Color32>.Release
	|
	|-RVA: 0x5EE678 Offset: 0x5EE678 VA: 0x5EE678
	|-ListPool<UIVertex>.Release
	|
	|-RVA: 0x5EEC38 Offset: 0x5EEC38 VA: 0x5EEC38
	|-ListPool<Vector2>.Release
	|
	|-RVA: 0x5EF1F8 Offset: 0x5EF1F8 VA: 0x5EF1F8
	|-ListPool<Vector3>.Release
	|
	|-RVA: 0x5EF7B8 Offset: 0x5EF7B8 VA: 0x5EF7B8
	|-ListPool<Vector4>.Release
	*/

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5ED6B0 Offset: 0x5ED6B0 VA: 0x5ED6B0
	|-ListPool<int>..cctor
	|
	|-RVA: 0x5EDC70 Offset: 0x5EDC70 VA: 0x5EDC70
	|-ListPool<object>..cctor
	|
	|-RVA: 0x5EE230 Offset: 0x5EE230 VA: 0x5EE230
	|-ListPool<Color32>..cctor
	|
	|-RVA: 0x5EE7F0 Offset: 0x5EE7F0 VA: 0x5EE7F0
	|-ListPool<UIVertex>..cctor
	|
	|-RVA: 0x5EEDB0 Offset: 0x5EEDB0 VA: 0x5EEDB0
	|-ListPool<Vector2>..cctor
	|
	|-RVA: 0x5EF370 Offset: 0x5EF370 VA: 0x5EF370
	|-ListPool<Vector3>..cctor
	|
	|-RVA: 0x5EF930 Offset: 0x5EF930 VA: 0x5EF930
	|-ListPool<Vector4>..cctor
	*/
}

// Namespace: UnityEngine.UI
internal class ObjectPool<T> // TypeDefIndex: 2048
{
	// Fields
	private readonly Stack<T> m_Stack; // 0x0
	private readonly UnityAction<T> m_ActionOnGet; // 0x0
	private readonly UnityAction<T> m_ActionOnRelease; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC3C7C Offset: 0xC3C7C VA: 0xC3C7C
	[DebuggerBrowsableAttribute] // RVA: 0xC3C7C Offset: 0xC3C7C VA: 0xC3C7C
	private int <countAll>k__BackingField; // 0x0

	// Properties
	public int countAll { get; set; }
	public int countActive { get; }
	public int countInactive { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(UnityAction<T> actionOnGet, UnityAction<T> actionOnRelease) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5EFB8C Offset: 0x5EFB8C VA: 0x5EFB8C
	|-ObjectPool<List<IEventSystemHandler>>..ctor
	|-ObjectPool<object>..ctor
	|-ObjectPool<LayoutRebuilder>..ctor
	*/

	[CompilerGeneratedAttribute] // RVA: 0xC440C Offset: 0xC440C VA: 0xC440C
	// RVA: -1 Offset: -1
	public int get_countAll() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5EFC14 Offset: 0x5EFC14 VA: 0x5EFC14
	|-ObjectPool<object>.get_countAll
	*/

	[CompilerGeneratedAttribute] // RVA: 0xC441C Offset: 0xC441C VA: 0xC441C
	// RVA: -1 Offset: -1
	private void set_countAll(int value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5EFC1C Offset: 0x5EFC1C VA: 0x5EFC1C
	|-ObjectPool<object>.set_countAll
	*/

	// RVA: -1 Offset: -1
	public int get_countActive() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5EFC24 Offset: 0x5EFC24 VA: 0x5EFC24
	|-ObjectPool<object>.get_countActive
	*/

	// RVA: -1 Offset: -1
	public int get_countInactive() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5EFC90 Offset: 0x5EFC90 VA: 0x5EFC90
	|-ObjectPool<object>.get_countInactive
	*/

	// RVA: -1 Offset: -1
	public T Get() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5EFCCC Offset: 0x5EFCCC VA: 0x5EFCCC
	|-ObjectPool<List<IEventSystemHandler>>.Get
	|-ObjectPool<object>.Get
	|-ObjectPool<LayoutRebuilder>.Get
	*/

	// RVA: -1 Offset: -1
	public void Release(T element) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5EFDBC Offset: 0x5EFDBC VA: 0x5EFDBC
	|-ObjectPool<List<IEventSystemHandler>>.Release
	|-ObjectPool<object>.Release
	|-ObjectPool<LayoutRebuilder>.Release
	*/
}

// Namespace: UnityEngine.UI
internal class ReflectionMethodsCache // TypeDefIndex: 2049
{
	// Fields
	public ReflectionMethodsCache.Raycast3DCallback raycast3D; // 0x8
	public ReflectionMethodsCache.RaycastAllCallback raycast3DAll; // 0xC
	public ReflectionMethodsCache.Raycast2DCallback raycast2D; // 0x10
	public ReflectionMethodsCache.GetRayIntersectionAllCallback getRayIntersectionAll; // 0x14
	public ReflectionMethodsCache.GetRayIntersectionAllNonAllocCallback getRayIntersectionAllNonAlloc; // 0x18
	public ReflectionMethodsCache.GetRaycastNonAllocCallback getRaycastNonAlloc; // 0x1C
	private static ReflectionMethodsCache s_ReflectionMethodsCache; // 0x0

	// Properties
	public static ReflectionMethodsCache Singleton { get; }

	// Methods

	// RVA: 0x2219CC Offset: 0x2219CC VA: 0x2219CC
	public void .ctor() { }

	// RVA: 0x222CD4 Offset: 0x222CD4 VA: 0x222CD4
	public static ReflectionMethodsCache get_Singleton() { }

	// RVA: 0x222DFC Offset: 0x222DFC VA: 0x222DFC
	private static void .cctor() { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.Raycast3DCallback : MulticastDelegate // TypeDefIndex: 2050
{
	// Methods

	// RVA: 0x2241D4 Offset: 0x2241D4 VA: 0x2241D4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x2241E8 Offset: 0x2241E8 VA: 0x2241E8 Slot: 11
	public virtual bool Invoke(Ray r, out RaycastHit hit, float f, int i) { }

	// RVA: 0x2245A0 Offset: 0x2245A0 VA: 0x2245A0 Slot: 12
	public virtual IAsyncResult BeginInvoke(Ray r, out RaycastHit hit, float f, int i, AsyncCallback callback, object object) { }

	// RVA: 0x2246BC Offset: 0x2246BC VA: 0x2246BC Slot: 13
	public virtual bool EndInvoke(out RaycastHit hit, IAsyncResult result) { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.Raycast2DCallback : MulticastDelegate // TypeDefIndex: 2051
{
	// Methods

	// RVA: 0x223CFC Offset: 0x223CFC VA: 0x223CFC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x223D10 Offset: 0x223D10 VA: 0x223D10 Slot: 11
	public virtual RaycastHit2D Invoke(Vector2 p1, Vector2 p2, float f, int i) { }

	// RVA: 0x224090 Offset: 0x224090 VA: 0x224090 Slot: 12
	public virtual IAsyncResult BeginInvoke(Vector2 p1, Vector2 p2, float f, int i, AsyncCallback callback, object object) { }

	// RVA: 0x22418C Offset: 0x22418C VA: 0x22418C Slot: 13
	public virtual RaycastHit2D EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.RaycastAllCallback : MulticastDelegate // TypeDefIndex: 2052
{
	// Methods

	// RVA: 0x224700 Offset: 0x224700 VA: 0x224700
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x224714 Offset: 0x224714 VA: 0x224714 Slot: 11
	public virtual RaycastHit[] Invoke(Ray r, float f, int i) { }

	// RVA: 0x224A94 Offset: 0x224A94 VA: 0x224A94 Slot: 12
	public virtual IAsyncResult BeginInvoke(Ray r, float f, int i, AsyncCallback callback, object object) { }

	// RVA: 0x224B8C Offset: 0x224B8C VA: 0x224B8C Slot: 13
	public virtual RaycastHit[] EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.GetRayIntersectionAllCallback : MulticastDelegate // TypeDefIndex: 2053
{
	// Methods

	// RVA: 0x222E64 Offset: 0x222E64 VA: 0x222E64
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x222E78 Offset: 0x222E78 VA: 0x222E78 Slot: 11
	public virtual RaycastHit2D[] Invoke(Ray r, float f, int i) { }

	// RVA: 0x2231F8 Offset: 0x2231F8 VA: 0x2231F8 Slot: 12
	public virtual IAsyncResult BeginInvoke(Ray r, float f, int i, AsyncCallback callback, object object) { }

	// RVA: 0x2232F0 Offset: 0x2232F0 VA: 0x2232F0 Slot: 13
	public virtual RaycastHit2D[] EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.GetRayIntersectionAllNonAllocCallback : MulticastDelegate // TypeDefIndex: 2054
{
	// Methods

	// RVA: 0x2232FC Offset: 0x2232FC VA: 0x2232FC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x223310 Offset: 0x223310 VA: 0x223310 Slot: 11
	public virtual int Invoke(Ray r, RaycastHit2D[] results, float f, int i) { }

	// RVA: 0x2236C8 Offset: 0x2236C8 VA: 0x2236C8 Slot: 12
	public virtual IAsyncResult BeginInvoke(Ray r, RaycastHit2D[] results, float f, int i, AsyncCallback callback, object object) { }

	// RVA: 0x2237C4 Offset: 0x2237C4 VA: 0x2237C4 Slot: 13
	public virtual int EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.GetRaycastNonAllocCallback : MulticastDelegate // TypeDefIndex: 2055
{
	// Methods

	// RVA: 0x2237FC Offset: 0x2237FC VA: 0x2237FC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x223810 Offset: 0x223810 VA: 0x223810 Slot: 11
	public virtual int Invoke(Ray r, RaycastHit[] results, float f, int i) { }

	// RVA: 0x223BC8 Offset: 0x223BC8 VA: 0x223BC8 Slot: 12
	public virtual IAsyncResult BeginInvoke(Ray r, RaycastHit[] results, float f, int i, AsyncCallback callback, object object) { }

	// RVA: 0x223CC4 Offset: 0x223CC4 VA: 0x223CC4 Slot: 13
	public virtual int EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.UI
public class VertexHelper : IDisposable // TypeDefIndex: 2056
{
	// Fields
	private List<Vector3> m_Positions; // 0x8
	private List<Color32> m_Colors; // 0xC
	private List<Vector2> m_Uv0S; // 0x10
	private List<Vector2> m_Uv1S; // 0x14
	private List<Vector2> m_Uv2S; // 0x18
	private List<Vector2> m_Uv3S; // 0x1C
	private List<Vector3> m_Normals; // 0x20
	private List<Vector4> m_Tangents; // 0x24
	private List<int> m_Indices; // 0x28
	private static readonly Vector4 s_DefaultTangent; // 0x0
	private static readonly Vector3 s_DefaultNormal; // 0x10
	private bool m_ListsInitalized; // 0x2C

	// Properties
	public int currentVertCount { get; }
	public int currentIndexCount { get; }

	// Methods

	// RVA: 0x235AC8 Offset: 0x235AC8 VA: 0x235AC8
	public void .ctor() { }

	// RVA: 0x235AD8 Offset: 0x235AD8 VA: 0x235AD8
	public void .ctor(Mesh m) { }

	// RVA: 0x235E18 Offset: 0x235E18 VA: 0x235E18
	private void InitializeListIfRequired() { }

	// RVA: 0x236008 Offset: 0x236008 VA: 0x236008 Slot: 4
	public void Dispose() { }

	// RVA: 0x21EFE8 Offset: 0x21EFE8 VA: 0x21EFE8
	public void Clear() { }

	// RVA: 0x21F8BC Offset: 0x21F8BC VA: 0x21F8BC
	public int get_currentVertCount() { }

	// RVA: 0x236220 Offset: 0x236220 VA: 0x236220
	public int get_currentIndexCount() { }

	// RVA: 0x21F3A0 Offset: 0x21F3A0 VA: 0x21F3A0
	public void PopulateUIVertex(ref UIVertex vertex, int i) { }

	// RVA: 0x21F614 Offset: 0x21F614 VA: 0x21F614
	public void SetUIVertex(UIVertex vertex, int i) { }

	// RVA: 0x236294 Offset: 0x236294 VA: 0x236294
	public void FillMesh(Mesh mesh) { }

	// RVA: 0x23656C Offset: 0x23656C VA: 0x23656C
	internal void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector3 normal, Vector4 tangent) { }

	// RVA: 0x2367C4 Offset: 0x2367C4 VA: 0x2367C4
	public void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector3 normal, Vector4 tangent) { }

	// RVA: 0x2204FC Offset: 0x2204FC VA: 0x2204FC
	public void AddVert(Vector3 position, Color32 color, Vector2 uv0) { }

	// RVA: 0x2368F8 Offset: 0x2368F8 VA: 0x2368F8
	public void AddVert(UIVertex v) { }

	// RVA: 0x220620 Offset: 0x220620 VA: 0x220620
	public void AddTriangle(int idx0, int idx1, int idx2) { }

	// RVA: 0x234428 Offset: 0x234428 VA: 0x234428
	public void AddUIVertexQuad(UIVertex[] verts) { }

	// RVA: 0x23699C Offset: 0x23699C VA: 0x23699C
	public void AddUIVertexStream(List<UIVertex> verts, List<int> indices) { }

	// RVA: 0x21F1CC Offset: 0x21F1CC VA: 0x21F1CC
	public void AddUIVertexTriangleStream(List<UIVertex> verts) { }

	// RVA: 0x21EAAC Offset: 0x21EAAC VA: 0x21EAAC
	public void GetUIVertexStream(List<UIVertex> stream) { }

	// RVA: 0x236A6C Offset: 0x236A6C VA: 0x236A6C
	private static void .cctor() { }
}

// Namespace: UnityEngine.Experimental.UI
[ExtensionAttribute] // RVA: 0xC1528 Offset: 0xC1528 VA: 0xC1528
public static class VertexHelperExtension // TypeDefIndex: 2057
{
	// Methods

	[ExtensionAttribute] // RVA: 0xC442C Offset: 0xC442C VA: 0xC442C
	// RVA: 0x1C58B0 Offset: 0x1C58B0 VA: 0x1C58B0
	public static void AddVert(VertexHelper obj, Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector3 normal, Vector4 tangent) { }
}

// Namespace: UnityEngine.UI
[ObsoleteAttribute] // RVA: 0xC1538 Offset: 0xC1538 VA: 0xC1538
public abstract class BaseVertexEffect // TypeDefIndex: 2058
{
	// Methods

	// RVA: 0x1C682C Offset: 0x1C682C VA: 0x1C682C
	protected void .ctor() { }

	[EditorBrowsableAttribute] // RVA: 0xC443C Offset: 0xC443C VA: 0xC443C
	[ObsoleteAttribute] // RVA: 0xC443C Offset: 0xC443C VA: 0xC443C
	// RVA: -1 Offset: -1 Slot: 4
	public abstract void ModifyVertices(List<UIVertex> vertices);
}

// Namespace: UnityEngine.UI
[ExecuteAlways] // RVA: 0xC1584 Offset: 0xC1584 VA: 0xC1584
public abstract class BaseMeshEffect : UIBehaviour, IMeshModifier // TypeDefIndex: 2059
{
	// Fields
	private Graphic m_Graphic; // 0xC

	// Properties
	protected Graphic graphic { get; }

	// Methods

	// RVA: 0x1C6378 Offset: 0x1C6378 VA: 0x1C6378
	protected void .ctor() { }

	// RVA: 0x1C6380 Offset: 0x1C6380 VA: 0x1C6380
	protected Graphic get_graphic() { }

	// RVA: 0x1C6434 Offset: 0x1C6434 VA: 0x1C6434 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x1C6500 Offset: 0x1C6500 VA: 0x1C6500 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x1C65CC Offset: 0x1C65CC VA: 0x1C65CC Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x1C6698 Offset: 0x1C6698 VA: 0x1C6698 Slot: 19
	public virtual void ModifyMesh(Mesh mesh) { }

	// RVA: -1 Offset: -1 Slot: 20
	public abstract void ModifyMesh(VertexHelper vh);
}

// Namespace: UnityEngine.UI
[EditorBrowsableAttribute] // RVA: 0xC1594 Offset: 0xC1594 VA: 0xC1594
[ObsoleteAttribute] // RVA: 0xC1594 Offset: 0xC1594 VA: 0xC1594
public interface IVertexModifier // TypeDefIndex: 2060
{
	// Methods

	[EditorBrowsableAttribute] // RVA: 0xC44AC Offset: 0xC44AC VA: 0xC44AC
	[ObsoleteAttribute] // RVA: 0xC44AC Offset: 0xC44AC VA: 0xC44AC
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void ModifyVertices(List<UIVertex> verts);
}

// Namespace: UnityEngine.UI
public interface IMeshModifier // TypeDefIndex: 2061
{
	// Methods

	[ObsoleteAttribute] // RVA: 0xC4530 Offset: 0xC4530 VA: 0xC4530
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void ModifyMesh(Mesh mesh);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void ModifyMesh(VertexHelper verts);
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC15F8 Offset: 0xC15F8 VA: 0xC15F8
public class Outline : Shadow // TypeDefIndex: 2062
{
	// Methods

	// RVA: 0x21E5D8 Offset: 0x21E5D8 VA: 0x21E5D8
	protected void .ctor() { }

	// RVA: 0x21E674 Offset: 0x21E674 VA: 0x21E674 Slot: 20
	public override void ModifyMesh(VertexHelper vh) { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC163C Offset: 0xC163C VA: 0xC163C
public class PositionAsUV1 : BaseMeshEffect // TypeDefIndex: 2063
{
	// Methods

	// RVA: 0x21F234 Offset: 0x21F234 VA: 0x21F234
	protected void .ctor() { }

	// RVA: 0x21F23C Offset: 0x21F23C VA: 0x21F23C Slot: 20
	public override void ModifyMesh(VertexHelper vh) { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC1688 Offset: 0xC1688 VA: 0xC1688
public class Shadow : BaseMeshEffect // TypeDefIndex: 2064
{
	// Fields
	[SerializeField] // RVA: 0xC3CB0 Offset: 0xC3CB0 VA: 0xC3CB0
	private Color m_EffectColor; // 0x10
	[SerializeField] // RVA: 0xC3CC0 Offset: 0xC3CC0 VA: 0xC3CC0
	private Vector2 m_EffectDistance; // 0x20
	[SerializeField] // RVA: 0xC3CD0 Offset: 0xC3CD0 VA: 0xC3CD0
	private bool m_UseGraphicAlpha; // 0x28
	private const float kMaxEffectDistance = 600;

	// Properties
	public Color effectColor { get; set; }
	public Vector2 effectDistance { get; set; }
	public bool useGraphicAlpha { get; set; }

	// Methods

	// RVA: 0x21E5DC Offset: 0x21E5DC VA: 0x21E5DC
	protected void .ctor() { }

	// RVA: 0x21EB14 Offset: 0x21EB14 VA: 0x21EB14
	public Color get_effectColor() { }

	// RVA: 0x22F370 Offset: 0x22F370 VA: 0x22F370
	public void set_effectColor(Color value) { }

	// RVA: 0x21EB24 Offset: 0x21EB24 VA: 0x21EB24
	public Vector2 get_effectDistance() { }

	// RVA: 0x22F464 Offset: 0x22F464 VA: 0x22F464
	public void set_effectDistance(Vector2 value) { }

	// RVA: 0x22F614 Offset: 0x22F614 VA: 0x22F614
	public bool get_useGraphicAlpha() { }

	// RVA: 0x22F61C Offset: 0x22F61C VA: 0x22F61C
	public void set_useGraphicAlpha(bool value) { }

	// RVA: 0x21EB38 Offset: 0x21EB38 VA: 0x21EB38
	protected void ApplyShadowZeroAlloc(List<UIVertex> verts, Color32 color, int start, int end, float x, float y) { }

	// RVA: 0x22F6F8 Offset: 0x22F6F8 VA: 0x22F6F8
	protected void ApplyShadow(List<UIVertex> verts, Color32 color, int start, int end, float x, float y) { }

	// RVA: 0x22F728 Offset: 0x22F728 VA: 0x22F728 Slot: 20
	public override void ModifyMesh(VertexHelper vh) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC172C Offset: 0xC172C VA: 0xC172C
internal static class <PrivateImplementationDetails> // TypeDefIndex: 2065
{
	// Fields
	internal static readonly <PrivateImplementationDetails>.$ArrayType=12 $field-7BBE37982E6C057ED87163CAFC7FD6E5E42EEA46 /*Metadata offset 0x10F18C*/; // 0x0
}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType=12 // TypeDefIndex: 2066
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2067
{}

// Namespace: 
public class GameManager : MonoBehaviour // TypeDefIndex: 2068
{
	// Fields
	public static GameManager Instance; // 0x0
	[SerializeField] // RVA: 0xC4CD0 Offset: 0xC4CD0 VA: 0xC4CD0
	private GameObject[] playerPrefabs; // 0xC
	[SerializeField] // RVA: 0xC4CE0 Offset: 0xC4CE0 VA: 0xC4CE0
	private Transform playerPos; // 0x10
	[SerializeField] // RVA: 0xC4CF0 Offset: 0xC4CF0 VA: 0xC4CF0
	private Sprite[] backgroundImage; // 0x14
	[SerializeField] // RVA: 0xC4D00 Offset: 0xC4D00 VA: 0xC4D00
	private SpriteRenderer background; // 0x18
	[SerializeField] // RVA: 0xC4D10 Offset: 0xC4D10 VA: 0xC4D10
	private Animator getReadyAnim; // 0x1C
	[SerializeField] // RVA: 0xC4D20 Offset: 0xC4D20 VA: 0xC4D20
	private Text gameScoreText; // 0x20
	[SerializeField] // RVA: 0xC4D30 Offset: 0xC4D30 VA: 0xC4D30
	private Text endScore; // 0x24
	[SerializeField] // RVA: 0xC4D40 Offset: 0xC4D40 VA: 0xC4D40
	private Text endHighScore; // 0x28
	[SerializeField] // RVA: 0xC4D50 Offset: 0xC4D50 VA: 0xC4D50
	private GameObject[] endButtons; // 0x2C
	[SerializeField] // RVA: 0xC4D60 Offset: 0xC4D60 VA: 0xC4D60
	private Animator endAnimations; // 0x30
	[SerializeField] // RVA: 0xC4D70 Offset: 0xC4D70 VA: 0xC4D70
	private Animator fadeAnim; // 0x34
	[SerializeField] // RVA: 0xC4D80 Offset: 0xC4D80 VA: 0xC4D80
	private Image newImage; // 0x38
	[SerializeField] // RVA: 0xC4D90 Offset: 0xC4D90 VA: 0xC4D90
	private Sprite[] medals; // 0x3C
	[SerializeField] // RVA: 0xC4DA0 Offset: 0xC4DA0 VA: 0xC4DA0
	private Image medalImage; // 0x40
	[SerializeField] // RVA: 0xC4DB0 Offset: 0xC4DB0 VA: 0xC4DB0
	private GameObject medalSparkle; // 0x44
	private GameObject flappy; // 0x48
	private bool ready; // 0x4C
	private bool start; // 0x4D
	private bool end; // 0x4E
	private bool newBool; // 0x4F
	private int gameScore; // 0x50

	// Methods

	// RVA: 0x5E0538 Offset: 0x5E0538 VA: 0x5E0538
	public void .ctor() { }

	// RVA: 0x5E0540 Offset: 0x5E0540 VA: 0x5E0540
	private void Awake() { }

	// RVA: 0x5E05A4 Offset: 0x5E05A4 VA: 0x5E05A4
	private void Start() { }

	// RVA: 0x5E081C Offset: 0x5E081C VA: 0x5E081C
	private void Update() { }

	// RVA: 0x5E0860 Offset: 0x5E0860 VA: 0x5E0860
	public void GetReady() { }

	// RVA: 0x5E09BC Offset: 0x5E09BC VA: 0x5E09BC
	public void UpdateScore() { }

	// RVA: 0x5E0CD0 Offset: 0x5E0CD0 VA: 0x5E0CD0
	public bool GameState() { }

	// RVA: 0x5E0CD8 Offset: 0x5E0CD8 VA: 0x5E0CD8
	public void EndGame() { }

	[DebuggerHiddenAttribute] // RVA: 0xC4EB0 Offset: 0xC4EB0 VA: 0xC4EB0
	// RVA: 0x5E0ECC Offset: 0x5E0ECC VA: 0x5E0ECC
	private IEnumerator GameOver() { }

	// RVA: 0x5E0F58 Offset: 0x5E0F58 VA: 0x5E0F58
	public void Replay() { }

	[DebuggerHiddenAttribute] // RVA: 0xC4EC0 Offset: 0xC4EC0 VA: 0xC4EC0
	// RVA: 0x5E1030 Offset: 0x5E1030 VA: 0x5E1030
	private IEnumerator StartGame() { }

	// RVA: 0x5E10A4 Offset: 0x5E10A4 VA: 0x5E10A4
	public void Leaderboard() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC4CA0 Offset: 0xC4CA0 VA: 0xC4CA0
private sealed class GameManager.<GameOver>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 2069
{
	// Fields
	internal int <i>__1; // 0x8
	internal GameObject[] $locvar0; // 0xC
	internal int $locvar1; // 0x10
	internal GameManager $this; // 0x14
	internal object $current; // 0x18
	internal bool $disposing; // 0x1C
	internal int $PC; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xC4EE0 Offset: 0xC4EE0 VA: 0xC4EE0
	// RVA: 0x5E0F50 Offset: 0x5E0F50 VA: 0x5E0F50
	public void .ctor() { }

	// RVA: 0x5E10A8 Offset: 0x5E10A8 VA: 0x5E10A8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xC4EF0 Offset: 0xC4EF0 VA: 0xC4EF0
	// RVA: 0x5E17F0 Offset: 0x5E17F0 VA: 0x5E17F0 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC4F00 Offset: 0xC4F00 VA: 0xC4F00
	// RVA: 0x5E17F8 Offset: 0x5E17F8 VA: 0x5E17F8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC4F10 Offset: 0xC4F10 VA: 0xC4F10
	// RVA: 0x5E1800 Offset: 0x5E1800 VA: 0x5E1800 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xC4F20 Offset: 0xC4F20 VA: 0xC4F20
	// RVA: 0x5E1814 Offset: 0x5E1814 VA: 0x5E1814 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC4CB0 Offset: 0xC4CB0 VA: 0xC4CB0
private sealed class GameManager.<StartGame>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 2070
{
	// Fields
	internal object $current; // 0x8
	internal bool $disposing; // 0xC
	internal int $PC; // 0x10

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xC4F30 Offset: 0xC4F30 VA: 0xC4F30
	// RVA: 0x5E109C Offset: 0x5E109C VA: 0x5E109C
	public void .ctor() { }

	// RVA: 0x5E189C Offset: 0x5E189C VA: 0x5E189C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xC4F40 Offset: 0xC4F40 VA: 0xC4F40
	// RVA: 0x5E1998 Offset: 0x5E1998 VA: 0x5E1998 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC4F50 Offset: 0xC4F50 VA: 0xC4F50
	// RVA: 0x5E19A0 Offset: 0x5E19A0 VA: 0x5E19A0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC4F60 Offset: 0xC4F60 VA: 0xC4F60
	// RVA: 0x5E19A8 Offset: 0x5E19A8 VA: 0x5E19A8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xC4F70 Offset: 0xC4F70 VA: 0xC4F70
	// RVA: 0x5E19BC Offset: 0x5E19BC VA: 0x5E19BC Slot: 6
	public void Reset() { }
}

// Namespace: 
public class MainMenu : MonoBehaviour // TypeDefIndex: 2071
{
	// Fields
	[SerializeField] // RVA: 0xC4DC0 Offset: 0xC4DC0 VA: 0xC4DC0
	private Animator fadeAnim; // 0xC

	// Methods

	// RVA: 0x5E1A44 Offset: 0x5E1A44 VA: 0x5E1A44
	public void .ctor() { }

	// RVA: 0x5E1A4C Offset: 0x5E1A4C VA: 0x5E1A4C
	public void ChangeScene() { }

	[DebuggerHiddenAttribute] // RVA: 0xC4ED0 Offset: 0xC4ED0 VA: 0xC4ED0
	// RVA: 0x5E1B24 Offset: 0x5E1B24 VA: 0x5E1B24
	private IEnumerator StartGame() { }

	// RVA: 0x5E1B98 Offset: 0x5E1B98 VA: 0x5E1B98
	public void RateGame() { }

	// RVA: 0x5E1B9C Offset: 0x5E1B9C VA: 0x5E1B9C
	public void Leaderboard() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC4CC0 Offset: 0xC4CC0 VA: 0xC4CC0
private sealed class MainMenu.<StartGame>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 2072
{
	// Fields
	internal object $current; // 0x8
	internal bool $disposing; // 0xC
	internal int $PC; // 0x10

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xC4F80 Offset: 0xC4F80 VA: 0xC4F80
	// RVA: 0x5E1B90 Offset: 0x5E1B90 VA: 0x5E1B90
	public void .ctor() { }

	// RVA: 0x5E1BA0 Offset: 0x5E1BA0 VA: 0x5E1BA0 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xC4F90 Offset: 0xC4F90 VA: 0xC4F90
	// RVA: 0x5E1C88 Offset: 0x5E1C88 VA: 0x5E1C88 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC4FA0 Offset: 0xC4FA0 VA: 0xC4FA0
	// RVA: 0x5E1C90 Offset: 0x5E1C90 VA: 0x5E1C90 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC4FB0 Offset: 0xC4FB0 VA: 0xC4FB0
	// RVA: 0x5E1C98 Offset: 0x5E1C98 VA: 0x5E1C98 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xC4FC0 Offset: 0xC4FC0 VA: 0xC4FC0
	// RVA: 0x5E1CAC Offset: 0x5E1CAC VA: 0x5E1CAC Slot: 6
	public void Reset() { }
}

// Namespace: 
public class ObstacleBehaviour : MonoBehaviour // TypeDefIndex: 2073
{
	// Fields
	[SerializeField] // RVA: 0xC4DD0 Offset: 0xC4DD0 VA: 0xC4DD0
	private float moveSpeed; // 0xC

	// Methods

	// RVA: 0x5E1D34 Offset: 0x5E1D34 VA: 0x5E1D34
	public void .ctor() { }

	// RVA: 0x5E1D3C Offset: 0x5E1D3C VA: 0x5E1D3C
	private void Update() { }
}

// Namespace: 
public class ObstacleSpawner : MonoBehaviour // TypeDefIndex: 2074
{
	// Fields
	[SerializeField] // RVA: 0xC4DE0 Offset: 0xC4DE0 VA: 0xC4DE0
	private float waitTime; // 0xC
	[SerializeField] // RVA: 0xC4DF0 Offset: 0xC4DF0 VA: 0xC4DF0
	private GameObject[] obstaclePrefabs; // 0x10
	private float tempTime; // 0x14

	// Methods

	// RVA: 0x5E1EE0 Offset: 0x5E1EE0 VA: 0x5E1EE0
	public void .ctor() { }

	// RVA: 0x5E1EE8 Offset: 0x5E1EE8 VA: 0x5E1EE8
	private void Start() { }

	// RVA: 0x5E1F18 Offset: 0x5E1F18 VA: 0x5E1F18
	private void LateUpdate() { }

	// RVA: 0x5E211C Offset: 0x5E211C VA: 0x5E211C
	private void OnTriggerEnter2D(Collider2D col) { }
}

// Namespace: 
public class PlayerController : MonoBehaviour // TypeDefIndex: 2075
{
	// Fields
	[SerializeField] // RVA: 0xC4E00 Offset: 0xC4E00 VA: 0xC4E00
	private float thrust; // 0xC
	[SerializeField] // RVA: 0xC4E10 Offset: 0xC4E10 VA: 0xC4E10
	private float minTiltSmooth; // 0x10
	[SerializeField] // RVA: 0xC4E20 Offset: 0xC4E20 VA: 0xC4E20
	private float maxTiltSmooth; // 0x14
	[SerializeField] // RVA: 0xC4E30 Offset: 0xC4E30 VA: 0xC4E30
	private float hoverDistance; // 0x18
	[SerializeField] // RVA: 0xC4E40 Offset: 0xC4E40 VA: 0xC4E40
	private float hoverSpeed; // 0x1C
	private bool start; // 0x20
	private float timer; // 0x24
	private float tiltSmooth; // 0x28
	private float y; // 0x2C
	private Rigidbody2D playerRigid; // 0x30
	private Quaternion downRotation; // 0x34
	private Quaternion upRotation; // 0x44

	// Methods

	// RVA: 0x5E22D8 Offset: 0x5E22D8 VA: 0x5E22D8
	public void .ctor() { }

	// RVA: 0x5E22E0 Offset: 0x5E22E0 VA: 0x5E22E0
	private void Start() { }

	// RVA: 0x5E23E4 Offset: 0x5E23E4 VA: 0x5E23E4
	private void Update() { }

	// RVA: 0x5E2788 Offset: 0x5E2788 VA: 0x5E2788
	private void LateUpdate() { }

	// RVA: 0x5E2A70 Offset: 0x5E2A70 VA: 0x5E2A70
	private void OnTriggerEnter2D(Collider2D col) { }

	// RVA: 0x5E30C8 Offset: 0x5E30C8 VA: 0x5E30C8
	private void OnCollisionEnter2D(Collision2D col) { }

	// RVA: 0x5E2FAC Offset: 0x5E2FAC VA: 0x5E2FAC
	public void KillPlayer() { }
}

// Namespace: 
public class Scrolling : MonoBehaviour // TypeDefIndex: 2076
{
	// Fields
	[SerializeField] // RVA: 0xC4E50 Offset: 0xC4E50 VA: 0xC4E50
	private float scrollSpeed; // 0xC
	[SerializeField] // RVA: 0xC4E60 Offset: 0xC4E60 VA: 0xC4E60
	private bool isMainMenu; // 0x10
	private Renderer quadRenderer; // 0x14

	// Methods

	// RVA: 0x5E31E8 Offset: 0x5E31E8 VA: 0x5E31E8
	public void .ctor() { }

	// RVA: 0x5E31F0 Offset: 0x5E31F0 VA: 0x5E31F0
	private void Start() { }

	// RVA: 0x5E3258 Offset: 0x5E3258 VA: 0x5E3258
	private void Update() { }

	// RVA: 0x5E32EC Offset: 0x5E32EC VA: 0x5E32EC
	public void Scroll() { }
}

// Namespace: 
public class SoundManager : MonoBehaviour // TypeDefIndex: 2077
{
	// Fields
	public static SoundManager Instance; // 0x0
	[SerializeField] // RVA: 0xC4E70 Offset: 0xC4E70 VA: 0xC4E70
	private AudioSource point; // 0xC
	[SerializeField] // RVA: 0xC4E80 Offset: 0xC4E80 VA: 0xC4E80
	private AudioSource swoosh; // 0x10
	[SerializeField] // RVA: 0xC4E90 Offset: 0xC4E90 VA: 0xC4E90
	private AudioSource flap; // 0x14
	[SerializeField] // RVA: 0xC4EA0 Offset: 0xC4EA0 VA: 0xC4EA0
	private AudioSource hit; // 0x18
	private AudioSource playAudio; // 0x1C

	// Methods

	// RVA: 0x5E3384 Offset: 0x5E3384 VA: 0x5E3384
	public void .ctor() { }

	// RVA: 0x5E338C Offset: 0x5E338C VA: 0x5E338C
	private void Awake() { }

	// RVA: 0x5E33F0 Offset: 0x5E33F0 VA: 0x5E33F0
	private void Start() { }

	// RVA: 0x5E34A0 Offset: 0x5E34A0 VA: 0x5E34A0
	private void Update() { }

	// RVA: 0x5E0AFC Offset: 0x5E0AFC VA: 0x5E0AFC
	public void PlayTheAudio(string tempName) { }
}
